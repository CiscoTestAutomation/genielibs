import unittest
from pyats.topology import loader
from genie.libs.sdk.apis.iosxe.inventory.get import get_hardware_version


class TestGetHardwareVersion(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        testbed = """
        devices:
          nyquist4-sjc24:
            connections:
              defaults:
                class: unicon.Unicon
              a:
                command: mock_device_cli --os iosxe --mock_data_dir mock_data --state connect
                protocol: unknown
            os: iosxe
            platform: c9300
            type: switch
        """
        self.testbed = loader.load(testbed)
        self.device = self.testbed.devices['nyquist4-sjc24']
        self.device.connect(
            learn_hostname=True,
            init_config_commands=[],
            init_exec_commands=[]
        )

    def test_get_hardware_version(self):
        result = get_hardware_version(self.device)
        expected_output = {'hardware_version': [[],
                      ['V00',
                       'NULL',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'V01',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'V00',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL',
                       'NULL']],
 'name': [[],
          ['Chassis',
           'Backplane',
           'slot 1',
           'Slot 1 Linecard',
           'slot 2',
           'slot 3',
           'slot 4',
           'slot 5',
           'slot 6',
           'slot 7',
           'Slot 7 Linecard',
           'slot R0',
           'Slot 3 Supervisor',
           'Slot 3 USB Container',
           'Slot 3 SATA Container',
           'TenGigabitEthernetContainer3/0/1',
           'TenGigabitEthernetContainer3/0/2',
           'TenGigabitEthernetContainer3/0/3',
           'TenGigabitEthernetContainer3/0/4',
           'TenGigabitEthernetContainer3/0/5',
           'TenGigabitEthernetContainer3/0/6',
           'TenGigabitEthernetContainer3/0/7',
           'TenGigabitEthernetContainer3/0/8',
           'FortyGigabitEthernetContainer3/0/9',
           'FortyGigabitEthernetContainer3/0/10',
           'Ap3/0/1 Container',
           'Slot 3 CPU',
           'slot R1',
           'Slot 4 Supervisor',
           'Slot 4 USB Container',
           'Slot 4 SATA Container',
           'TenGigabitEthernetContainer4/0/1',
           'TenGigabitEthernetContainer4/0/2',
           'TenGigabitEthernetContainer4/0/3',
           'TenGigabitEthernetContainer4/0/4',
           'TenGigabitEthernetContainer4/0/5',
           'TenGigabitEthernetContainer4/0/6',
           'TenGigabitEthernetContainer4/0/7',
           'TenGigabitEthernetContainer4/0/8',
           'FortyGigabitEthernetContainer4/0/9',
           'FortyGigabitEthernetContainer4/0/10',
           'Ap4/0/1 Container',
           'Slot 4 CPU',
           'slot F0',
           'slot F1',
           'PowerSupplyContainer1',
           'PowerSupplyContainer2',
           'PowerSupplyContainer3',
           'PowerSupplyContainer4',
           'PowerSupplyContainer5',
           'PowerSupplyModule5',
           'PowerSupply5',
           'Fan5/1',
           'Fan5/2',
           'PowerSupplyContainer6',
           'PowerSupplyContainer7',
           'PowerSupplyContainer8',
           'PowerSupplyModule8',
           'PowerSupply8',
           'Fan8/1',
           'Fan8/2',
           'FanContainer',
           'FanTray',
           'Fan17/1',
           'Fan17/2',
           'Fan17/3',
           'Fan17/4',
           'Fan17/5',
           'Fan17/6',
           'Fan17/7',
           'Fan17/8',
           'Fan17/9',
           'Fan17/10',
           'Fan17/11',
           'Fan17/12',
           'Internal POE Bay']]}
        self.assertEqual(result, expected_output)
