import os
import unittest
from pyats.topology import loader
from genie.libs.sdk.apis.iosxe.mac.get import get_mac_table_entries


class TestGetMacTableEntries(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        testbed = f"""
        devices:
          HA-9400-S2:
            connections:
              defaults:
                class: unicon.Unicon
              a:
                command: mock_device_cli --os iosxe --mock_data_dir {os.path.dirname(__file__)}/mock_data --state connect
                protocol: unknown
            os: iosxe
            platform: cat9k
            type: iosxe
        """
        self.testbed = loader.load(testbed)
        self.device = self.testbed.devices['HA-9400-S2']
        self.device.connect(
            learn_hostname=True,
            init_config_commands=[],
            init_exec_commands=[]
        )

    def test_get_mac_table_entries(self):
        result = get_mac_table_entries(self.device)
        expected_output = {'interfaces': ['GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'Vlan1',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'GigabitEthernet2/7/0/23',
                'Vlan10',
                'Vlan300'],
 'mac_address': ['00:00:00:43:0e:04',
                 '00:00:04:8c:1b:1b',
                 '00:00:05:fa:b5:34',
                 '00:00:08:53:c5:ad',
                 '00:00:19:91:e7:e4',
                 '00:00:19:ae:43:c7',
                 '00:00:6e:4d:13:58',
                 '00:a0:c9:00:00:00',
                 '00:ea:bd:c3:f0:71',
                 '00:ea:bd:c3:f0:73',
                 '18:8b:45:b7:59:e6',
                 '2c:ab:eb:4f:b3:17',
                 '2c:ab:eb:4f:b3:18',
                 '34:12:78:56:01:00',
                 '34:ed:1b:7d:fa:91',
                 '34:ed:1b:7e:12:87',
                 '34:ed:1b:7e:12:99',
                 '34:ed:1b:7e:12:9a',
                 '34:ed:1b:7e:12:e4',
                 '44:b6:be:d8:d4:e2',
                 '44:b6:be:d8:d4:e3',
                 '44:b6:be:d8:d4:ec',
                 '44:b6:be:d8:d4:ff',
                 '44:b6:be:d8:d6:91',
                 '68:2c:7b:23:85:17',
                 '68:2c:7b:23:85:18',
                 '68:2c:7b:23:85:2f',
                 '68:2c:7b:23:85:30',
                 '6c:99:89:9a:06:8e',
                 '6c:b2:ae:43:17:5e',
                 '6c:b2:ae:43:17:63',
                 '70:7d:b9:cf:b0:1b',
                 'a4:53:0e:8f:f3:d4',
                 'a4:53:0e:8f:f3:d6',
                 'ac:4a:67:04:98:9f',
                 'b0:8b:cf:4b:0f:cc',
                 'b0:8b:cf:4b:0f:d9',
                 'b0:8b:cf:4b:0f:dd',
                 'b0:8b:cf:4b:0f:e3',
                 'b0:8b:cf:4b:0f:eb',
                 'b0:8b:cf:4b:0f:ed',
                 'b0:8b:cf:a1:c6:59',
                 'b0:8b:cf:a1:c6:5a',
                 'b0:8b:cf:a1:c6:69',
                 'b0:8b:cf:a1:c6:74',
                 'bc:d2:95:23:93:94',
                 'd4:eb:68:17:98:9d',
                 'd4:eb:68:17:98:a3',
                 'd4:eb:68:17:98:a9',
                 'e4:aa:5d:59:f3:fe',
                 'e4:aa:5d:59:f4:0e',
                 'e4:aa:5d:59:f4:0f',
                 'e4:aa:5d:5a:15:92',
                 'e4:aa:5d:5a:15:93',
                 'f8:6b:d9:a9:59:17',
                 'f8:6b:d9:a9:59:18',
                 'f8:6b:d9:a9:59:2c',
                 'f8:6b:d9:a9:59:2f',
                 'f8:7a:41:4b:5a:17',
                 'f8:7a:41:4b:5a:56',
                 'f8:7a:41:4b:5a:64',
                 '70:7d:b9:cf:b0:1a',
                 '70:7d:b9:cf:b0:33'],
 'vlan': ['1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '1',
          '10',
          '300'],
 'vrf': ['default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'default',
         'vrf_10',
         'blue']}
        self.assertEqual(result, expected_output)
