{"verify_node_reachable": {"virl": {"module_name": "std.verify", "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n\n        Returns:\n            boolean: True/False\n        \n        Raise:\n            None\n    ", "uid": "verify_node_reachable", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#16"}}, "verify_node_state": {"virl": {"module_name": "std.verify", "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n            state (`str`): state to verify\n\n        Returns:\n            state ('str'): node state\n        \n        Raise:\n            None\n    ", "uid": "verify_node_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#51"}}, "verify_simulation": {"virl": {"module_name": "std.verify", "doc": "Verify if simulation exists\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            max_time (`int`): maximum wait time in seconds. Default: 60\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 10\n            exist (`Bool`): True if simulation exists. False for opposite check.\n\n        Returns:\n            Bool: True/False\n        Raise:\n            None\n    ", "uid": "verify_simulation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#92"}}, "launch_simulation": {"virl": {"module_name": "std.utils", "doc": "launch simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            simulation_data (`str`): simulation data \n            connection_alias (`str`): connection_alias\n\n        Returns:\n            result: result of launching simulation\n        \n        Raise:\n            None\n    ", "uid": "launch_simulation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#12"}}, "stop_simulation": {"virl": {"module_name": "std.utils", "doc": "Stop simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n\n            result: result of GET command\n        \n        Raise:\n            None\n    ", "uid": "stop_simulation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#45"}}, "get_node_list": {"virl": {"module_name": "std.get", "doc": "Get node list\n\n        Args:\n            device (`obj`): Device object\n            simulation_name: simulation name\n\n        Returns:\n            list: node list\n        \n        Raise:\n            None\n    ", "uid": "get_node_list", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#70"}}, "get_node_summary": {"virl": {"module_name": "std.get", "doc": "Get node summary\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n            dict: node summary info\n        \n        Raise:\n            None\n    ", "uid": "get_node_summary", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#42"}}, "get_simulations": {"virl": {"module_name": "std.get", "doc": "Get simulations list\n\n        Args:\n            device (`obj`): Device object\n            connection_alias (`str`): connection alias\n\n        Returns:\n            list: list of simulation names\n        \n        Raise:\n            None\n    ", "uid": "get_simulations", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#12"}}, "is_interface_igp_sync_mpls_enabled": {"iosxr": {"module_name": "mpls.verify", "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ", "uid": "is_interface_igp_sync_mpls_enabled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#54"}, "iosxe": {"module_name": "mpls.verify", "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ", "uid": "is_interface_igp_sync_mpls_enabled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#86"}}, "is_mpls_ldp_neighbor_in_state": {"iosxr": {"module_name": "mpls.verify", "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_mpls_ldp_neighbor_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#159"}, "iosxe": {"module_name": "mpls.verify", "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_mpls_ldp_neighbor_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#191"}}, "verify_mpls_binding_label": {"iosxr": {"module_name": "mpls.verify", "doc": " Verify local and remote binding labels for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            prefix (`str`): ipv4/ipv6\n        Returns:\n            verified result\n        Raises:\n            None\n    ", "uid": "verify_mpls_binding_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#114"}, "iosxe": {"module_name": "mpls.verify", "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            ipv4 (`str`): ipv4 with prefix\n        Returns:\n            verified result\n        Raises:\n            None\n    ", "uid": "verify_mpls_binding_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#146"}}, "verify_segment_routing_gb_range": {"iosxr": {"module_name": "mpls.verify", "doc": " Verify segment routing global block range\n\n        Args:\n            device (`obj`): Device object\n            expected_label_min (`int`): Segment routing global block start\n            expected_label_max (`int`): Segment routing global block end\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_segment_routing_gb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#17"}, "iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies the segment routing gb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ", "uid": "verify_segment_routing_gb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#532"}}, "verify_bundle_in_state": {"iosxr": {"module_name": "interface.verify", "doc": " Verify bundle state\n\n        Args:\n            device (`obj`): Device object\n            bundle (`str`): Bundle name\n            interface (`bool`): Bundle interface\n            status (`str`): Expected bundle status\n            link_state (`str`): Expected line state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_bundle_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#12"}}, "verify_interface_in_state": {"iosxr": {"module_name": "interface.verify", "doc": " Verify interface state and ip\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interfaces name\n            verify_status (`bool`): To verify interface status\n            oper_status (`str`): Expected oper status\n            line_protocol (`str`): Expected line protocol status\n            verify_ip (`bool`): To verify interface ip\n            ip (`str`): Expected interface ip\n            subnet (`str`): Expected interface ip subnet\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_interface_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#58"}}, "configure_interface_passive": {"iosxr": {"module_name": "interface.configure", "doc": " Configure Interface passive\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_passive", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#42"}}, "configure_interface_point_to_point": {"iosxr": {"module_name": "interface.configure", "doc": " Configure Interface point to point\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_point_to_point", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#12"}}, "get_interface_ip_address": {"iosxr": {"module_name": "interface.get", "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ", "uid": "get_interface_ip_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#16"}, "iosxe": {"module_name": "interface.get", "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ", "uid": "get_interface_ip_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#314"}}, "is_ntp_clock_synchronized": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "is_ntp_clock_synchronized", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#71"}, "iosxe": {"module_name": "ntp.verify", "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "is_ntp_clock_synchronized", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#78"}}, "verify_no_ntp_association_configuration": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify no NTP association configuration on the device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ", "uid": "verify_no_ntp_association_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#273"}}, "verify_ntp_association_with_server": {"iosxr": {"module_name": "ntp.verify", "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ", "uid": "verify_ntp_association_with_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#191"}, "iosxe": {"module_name": "ntp.verify", "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ", "uid": "verify_ntp_association_with_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#212"}}, "verify_ntp_leap_second": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_leap_second", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#127"}, "iosxe": {"module_name": "ntp.verify", "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_leap_second", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#144"}}, "verify_ntp_time": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#147"}, "iosxe": {"module_name": "ntp.verify", "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#166"}}, "verify_ntp_time_changed": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_time_changed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#103"}, "iosxe": {"module_name": "ntp.verify", "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ntp_time_changed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#116"}}, "verify_smallest_stratum_ntp_system_peer": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ", "uid": "verify_smallest_stratum_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#17"}, "iosxe": {"module_name": "ntp.verify", "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ", "uid": "verify_smallest_stratum_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#20"}}, "verify_synced_ntp_server": {"iosxr": {"module_name": "ntp.verify", "doc": " Verify synched NTP server\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): Server peer IP address\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ", "uid": "verify_synced_ntp_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#247"}}, "configure_ntp_iburst": {"iosxr": {"module_name": "ntp.configure", "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_iburst", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#89"}, "iosxe": {"module_name": "ntp.configure", "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_iburst", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#108"}}, "configure_ntp_master": {"iosxr": {"module_name": "ntp.configure", "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_master", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#60"}, "iosxe": {"module_name": "ntp.configure", "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_master", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#77"}}, "configure_ntp_server": {"iosxr": {"module_name": "ntp.configure", "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n            auth_key ('list'): Authentication key number corresponding\n                               to server ip\n                ex.)\n                   auth_key = [\n                        '1',\n                        '2',\n                   ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#110"}, "iosxe": {"module_name": "ntp.configure", "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ntp_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#129"}}, "remove_ntp_server": {"iosxr": {"module_name": "ntp.configure", "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ntp_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#33"}, "iosxe": {"module_name": "ntp.configure", "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ntp_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#50"}}, "remove_ntp_system_peer": {"iosxr": {"module_name": "ntp.configure", "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#12"}, "iosxe": {"module_name": "ntp.configure", "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#12"}}, "get_ntp_md5_peer": {"iosxr": {"module_name": "ntp.get", "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ", "uid": "get_ntp_md5_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#101"}, "iosxe": {"module_name": "ntp.get", "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ", "uid": "get_ntp_md5_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#110"}}, "get_ntp_outgoing_interface": {"iosxr": {"module_name": "ntp.get", "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ", "uid": "get_ntp_outgoing_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#55"}, "iosxe": {"module_name": "ntp.get", "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ", "uid": "get_ntp_outgoing_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#59"}}, "get_ntp_packet": {"iosxr": {"module_name": "ntp.get", "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ", "uid": "get_ntp_packet", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#178"}, "iosxe": {"module_name": "ntp.get", "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ", "uid": "get_ntp_packet", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#213"}}, "get_ntp_servers": {"iosxr": {"module_name": "ntp.get", "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ", "uid": "get_ntp_servers", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#23"}, "iosxe": {"module_name": "ntp.get", "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ", "uid": "get_ntp_servers", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#25"}}, "get_ntp_source_interface_ip": {"iosxr": {"module_name": "ntp.get", "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ", "uid": "get_ntp_source_interface_ip", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#39"}, "iosxe": {"module_name": "ntp.get", "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ", "uid": "get_ntp_source_interface_ip", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#43"}}, "get_ntp_system_peer": {"iosxr": {"module_name": "ntp.get", "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ", "uid": "get_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#142"}, "iosxe": {"module_name": "ntp.get", "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ", "uid": "get_ntp_system_peer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#153"}}, "get_ospf_process_id_on_interface": {"iosxr": {"module_name": "ospf.get", "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ", "uid": "get_ospf_process_id_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ospf/get.py#20"}, "iosxe": {"module_name": "ospf.get", "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ", "uid": "get_ospf_process_id_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#861"}}, "verify_segment_routing_label_by_traceroute": {"iosxr": {"module_name": "segment_routing.verify", "doc": " Verify Segment routing label by traceroute\n\n        Args:\n            device (`obj`): Device object\n            traceroute_address ('str): Traceroute address\n            process_id ('str'): Router ISIS process ID\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_segment_routing_label_by_traceroute", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#64"}}, "verify_segment_routing_operation": {"iosxr": {"module_name": "segment_routing.verify", "doc": " Verify Segment routing operation\n\n        Args:\n            device (`obj`): Device object\n            loopback_interface (`str`): Loopback interface\n            label_min (`int`): Segment routing global block start\n            prefix_sid_index (`int`): Prefix-sid index\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_segment_routing_operation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#15"}}, "configure_segment_routing_gb_range": {"iosxr": {"module_name": "segment_routing.configure", "doc": " Add segment routing\n\n        Args:\n            device ('obj'): Device object\n            label_min (`int`): Segment routing global block start\n            label_max (`int`): Segment routing global block end\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_segment_routing_gb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#12"}}, "configure_segment_routing_prefix_sid_index": {"iosxr": {"module_name": "segment_routing.configure", "doc": " Configure segment routing prefix-sid index\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface (`str`): Interface to configure\n            prefix_sid_index (`int`): Prefix-sid index\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_segment_routing_prefix_sid_index", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#69"}}, "configure_segment_routing_sr_prefer": {"iosxr": {"module_name": "segment_routing.configure", "doc": " Configure segment routing sr prefer\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_segment_routing_sr_prefer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#40"}}, "verify_isis_neighbor_in_state": {"iosxr": {"module_name": "isis.verify", "doc": " Verify ISIS neighbor state\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): ISIS neighbor interfaces\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_isis_neighbor_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#12"}}, "verify_no_isis_neighbor": {"iosxr": {"module_name": "isis.verify", "doc": " Verify ISIS neighbors not found\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_no_isis_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#66"}}, "configure_isis_md5_authentication": {"iosxr": {"module_name": "isis.configure", "doc": " Configure MD5 authentication\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            hello_password ('str'): Authentication password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_isis_md5_authentication", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#147"}}, "configure_isis_metric": {"iosxr": {"module_name": "isis.configure", "doc": " Configure ISIS metric\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            metric ('str'): Metric value\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_isis_metric", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#111"}}, "configure_isis_metric_style": {"iosxr": {"module_name": "isis.configure", "doc": " Configure ISIS metric style\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n            metric_style ('str'): Metric style\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_isis_metric_style", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#41"}}, "configure_isis_net_address": {"iosxr": {"module_name": "isis.configure", "doc": " Configure ISIS network address\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            net_address ('str'): Net Address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_isis_net_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#12"}}, "configure_isis_prefix_sid": {"iosxr": {"module_name": "isis.configure", "doc": " Configure ISIS prefix-sid\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            prefix_sid ('str'): Prefix-Sid\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_isis_prefix_sid", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#74"}}, "verify_hostname": {"iosxr": {"module_name": "running_config.verify", "doc": " Verify hostname is matched with expected name\n\n        Args:\n            device (`obj`): Device object\n            expected_hostname (`str`): Expected hostname\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_hostname", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/verify.py#15"}}, "get_running_config_dict": {"iosxr": {"module_name": "running_config.get", "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ", "uid": "get_running_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#31"}, "junos": {"module_name": "running_config.get", "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ", "uid": "get_running_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/get.py#12"}, "nxos": {"module_name": "running_config.get", "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ", "uid": "get_running_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#12"}, "iosxe": {"module_name": "running_config.get", "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ", "uid": "get_running_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#35"}}, "get_running_config_hostname": {"iosxr": {"module_name": "running_config.get", "doc": " Get device hostname\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ", "uid": "get_running_config_hostname", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#12"}, "iosxe": {"module_name": "running_config.get", "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ", "uid": "get_running_config_hostname", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#60"}}, "verify_bgp_l2vpn_evpn_neighbor_in_state": {"iosxr": {"module_name": "bgp.verify", "doc": " Verify BGP l2vpn evpn neighbor state\n\n        Args:\n            device (`obj`): Device object\n            neighbor (`str`): Neighbor IP\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_bgp_l2vpn_evpn_neighbor_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#12"}}, "verify_bgp_neighbor_exist": {"iosxr": {"module_name": "bgp.verify", "doc": " Verify bgp neighbor exists in 'show bgp {address_family} summary'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            address_family ('str'): Address family\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): Verified result\n    ", "uid": "verify_bgp_neighbor_exist", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#59"}, "iosxe": {"module_name": "bgp.verify", "doc": " Verify bgp neighbor exists in 'show ip bgp {address_family} summary'\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address_family ('str'): address family\n            vrf ('str'): vrf\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ", "uid": "verify_bgp_neighbor_exist", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1622"}}, "verify_bgp_neighbor_in_state": {"iosxr": {"module_name": "bgp.verify", "doc": " Verify bgp neighbor exists in 'show bgp neighbors {nbr}'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            vrf ('str'): Vrf\n            address_family ('str'): Address family\n            expected_state ('str'): Expected state\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): verified result\n    ", "uid": "verify_bgp_neighbor_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#96"}}, "get_bgp_as": {"iosxr": {"module_name": "bgp.get", "doc": " Get bgp id from show running-config\n\n        Args:\n            device ('obj'): device object\n            instance ('str'): instance name\n        Returns:\n            str: bgp_as\n    ", "uid": "get_bgp_as", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/get.py#16"}}, "verify_coherentDSP_in_state": {"iosxr": {"module_name": "controllers.verify", "doc": " Verify coherentDSP state\n\n        Args:\n            device (`obj`): Device object\n            dsp (`str`): CoherentDSP port\n            controller_state (`str`): Expected controller state\n            derived_state (`str`): Expected derived state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_coherentDSP_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#68"}}, "verify_optics_in_state": {"iosxr": {"module_name": "controllers.verify", "doc": " Verify optics state\n\n        Args:\n            device (`obj`): Device object\n            optics (`str`): Optics port\n            rx_power (`float`): Expected RX power\n            controller_state (`str`): Expected controller state\n            led_state (`str`): Expected LED state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_optics_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#12"}}, "verify_module_serial_num": {"iosxr": {"platform": {"module_name": "verify", "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            expected_serial_num (`str`): Expected serial number\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_module_serial_num", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#14"}}}, "get_module_info": {"iosxr": {"platform": {"module_name": "get", "doc": " Get a module's infomation\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            key (`str`): Key name\n        Returns:\n            field (`str`): Field value\n    ", "uid": "get_module_info", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#9"}}}, "get_traceroute_mpls_label_to_prefix": {"iosxr": {"module_name": "traceroute.get", "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ", "uid": "get_traceroute_mpls_label_to_prefix", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#63"}, "iosxe": {"module_name": "traceroute.get", "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ", "uid": "get_traceroute_mpls_label_to_prefix", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#65"}}, "get_traceroute_parsed_output": {"iosxr": {"module_name": "traceroute.get", "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ", "uid": "get_traceroute_parsed_output", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#16"}, "iosxe": {"module_name": "traceroute.get", "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ", "uid": "get_traceroute_parsed_output", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#16"}}, "config_mpls_ldp_on_interface": {"junos": {"module_name": "mpls.configure", "doc": " Config ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ", "uid": "config_mpls_ldp_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#12"}, "iosxe": {"module_name": "mpls.configure", "doc": " Config ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ", "uid": "config_mpls_ldp_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#15"}}, "remove_mpls_ldp_from_interface": {"junos": {"module_name": "mpls.configure", "doc": " Remove ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ", "uid": "remove_mpls_ldp_from_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#33"}, "iosxe": {"module_name": "mpls.configure", "doc": " Remove ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ", "uid": "remove_mpls_ldp_from_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#38"}}, "verify_interfaces_terse_state": {"junos": {"module_name": "interface.verify", "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_admin_state (`str`): Expected admin state for interface\n                ex.) expected_admin_state = 'up'\n            expected_link_state (`str`): Expected link state for interface\n                ex.) expected_link_state = 'down'\n            expected_oper_status (`str`): Expected oper state for interface\n                ex.) expected_oper_status = 'up'\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ", "uid": "verify_interfaces_terse_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#14"}}, "default_interface": {"junos": {"module_name": "interface.configure", "doc": " Reset junos interface configuration \n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n        Returns:\n            None\n    ", "uid": "default_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#13"}, "iosxe": {"module_name": "interface.configure", "doc": " configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "default_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#928"}}, "shut_interface": {"junos": {"module_name": "interface.configure", "doc": " Shut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "shut_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#47"}, "iosxe": {"module_name": "interface.configure", "doc": " Shut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "shut_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#157"}}, "unshut_interface": {"junos": {"module_name": "interface.configure", "doc": " Unshut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "unshut_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#74"}, "iosxe": {"module_name": "interface.configure", "doc": " Unshut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "unshut_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#185"}}, "get_interface_address_mask_running_config": {"junos": {"module_name": "interface.get", "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ", "uid": "get_interface_address_mask_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#13"}, "iosxe": {"module_name": "interface.get", "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Not used in IOSXE. Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ", "uid": "get_interface_address_mask_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#765"}}, "verify_ospf_interface_cost": {"junos": {"module_name": "ospf.verify", "doc": " Verifies ospf cost on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            cost_type ('str'): Cost type configured\n            expected_cost ('int'): Expected configured cost\n            instance ('str'): Instance to use\n            area ('str'): Area to use\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_ospf_interface_cost", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#17"}}, "configure_ospf_interface_metric_cost": {"junos": {"module_name": "ospf.configure", "doc": " Configure ospf interface metric cost\n\n        Args:\n            device ('obj'): Device to configure\n            interface ('str'): Interface to configure\n            area ('str'): Area\n            cost_type ('str'): Cost type\n            cost ('int'): Cost\n    ", "uid": "configure_ospf_interface_metric_cost", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#76"}}, "configure_ospf_passive_interface": {"junos": {"module_name": "ospf.configure", "doc": "configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            area (`str`): IP address of area\n\n        Returns:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ", "uid": "configure_ospf_passive_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#12"}, "iosxe": {"module_name": "ospf.configure", "doc": "Configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): ospf process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ospf_passive_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#162"}}, "remove_ospf_passive_interface": {"junos": {"module_name": "ospf.configure", "doc": "remove passive interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            area (`str`): IP address of area\n\n        Returns:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ", "uid": "remove_ospf_passive_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#44"}, "iosxe": {"module_name": "ospf.configure", "doc": "Remove passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ospf_passive_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#204"}}, "get_ospf_interface_and_area": {"junos": {"module_name": "ospf.get", "doc": " Retrieve interface for ospf on junos device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            interface and area value dictionary\n    ", "uid": "get_ospf_interface_and_area", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#16"}}, "verify_ip_cef_nexthop_label": {"junos": {"module_name": "routing.verify", "doc": " Verify nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Not used on JuniperOS\n            table (`str`): Route table\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ", "uid": "verify_ip_cef_nexthop_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#32"}, "iosxe": {"module_name": "routing.verify", "doc": " Verify ip cef nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Vrf name\n            table (`str`): Not used on IOSXE\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ", "uid": "verify_ip_cef_nexthop_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#30"}}, "write_erase_reload_device_without_reconfig": {"nxos": {"module_name": "platform.utils", "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ", "uid": "write_erase_reload_device_without_reconfig", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#19"}, "ios": {"module_name": "platform.utils", "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ", "uid": "write_erase_reload_device_without_reconfig", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/utils.py#5"}, "iosxe": {"module_name": "platform.utils", "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ", "uid": "write_erase_reload_device_without_reconfig", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#25"}}, "analyze_rate": {"com": {"module_name": "utils", "doc": " Get the traffic rate and the corresponding unit\n\n        Args:\n            rate (`str`): Passed rate as a string\n\n        Returns:\n            rate (`int`): Traffic rate\n            rate_unit (`str`): Traffic rate unit\n            original_rate (`str`): Original Traffic rate\n    ", "uid": "analyze_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#573"}}, "bits_to_netmask": {"com": {"module_name": "utils", "doc": " Convert bits to netmask\n        Args:\n            bits ('int'): bits to converts\n            ex.) bits = 32\n        Raise:\n            None\n        Returns:\n            Net mask\n    ", "uid": "bits_to_netmask", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#748"}}, "compare_config_dicts": {"com": {"module_name": "utils", "doc": " Compare two configuration dicts and return the differences\n\n        Args:\n            a (`dict`): Configuration dict\n            b (`dict`): Configuration dict\n            exclude (`list`): List of item to ignore. Supports Regex. \n                              Regex must begins with ( )\n        Returns:\n            out (`str`): differences\n    ", "uid": "compare_config_dicts", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#223"}}, "configure_device": {"com": {"module_name": "utils", "doc": "shut interface\n\n        Args:\n            device (`obj`): Device object\n            config (`str`): Configuration to apply\n    ", "uid": "configure_device", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#683"}}, "copy_file_from_tftp_ftp": {"com": {"module_name": "utils", "doc": "Copy file to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): File name\n            pro (`str`): Transfer protocol\n        Returns:\n            None\n        Raises:\n            pyATS Results\n    ", "uid": "copy_file_from_tftp_ftp", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#417"}}, "copy_pcap_file": {"com": {"module_name": "utils", "doc": "Copy pcap filename to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): Pcap filename\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ", "uid": "copy_pcap_file", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#244"}}, "copy_to_server": {"com": {"module_name": "utils", "doc": " Copy file from directory to server\n\n        Args:\n            testbed ('obj'): Testbed object\n            protocol ('str'): Transfer protocol\n            server ('str'): Server name in testbed yaml or server ip address\n            local_path ('str'): File to copy, including path\n            remote_path ('str'): Where to save the file, including file name\n\n        Returns:\n            None\n\n        Raises:\n            Exception\n    ", "uid": "copy_to_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#372"}}, "destroy_connection": {"com": {"module_name": "utils", "doc": " Destroy connection device\n        Args:\n            device ('obj'): Device object\n\n    ", "uid": "destroy_connection", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#672"}}, "escape_ansi": {"com": {"module_name": "utils", "doc": null, "uid": "escape_ansi", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#150"}}, "get_config_dict": {"com": {"module_name": "utils", "doc": " Cast config to Configuration dict\n\n        Args:\n            config ('str'): config string\n        Returns:\n            Configuration dict\n    ", "uid": "get_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#210"}}, "get_delta_time_from_outputs": {"com": {"module_name": "utils", "doc": " Get delta time from Time source of two outputs \n        Time source example: 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n\n        Args:\n            output_before ('str'): Text output from show command\n            output_after ('str'): Text output from show command\n        Returns:\n            Time delta in seconds\n    ", "uid": "get_delta_time_from_outputs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#556"}}, "get_neighbor_address": {"com": {"module_name": "utils", "doc": "Get the neighbor address in a subnet /30\n\n        Args:\n            ip (`str`): Ip address to get the neighbor for\n\n        Returns:\n            None\n    ", "uid": "get_neighbor_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#307"}}, "get_time_source_from_output": {"com": {"module_name": "utils", "doc": " Parse out 'Time Source' value from output\n        Time source output example : 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n\n        Args:\n            output ('str'): Text output from command\n        Returns:\n            Datetime object\n            Format : datetime(year, month, day, hour, minute, second, microseconds)\n    ", "uid": "get_time_source_from_output", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#517"}}, "get_unconfig_line": {"com": {"module_name": "utils", "doc": " unconfigure specific line\n\n        Args:\n            config_dict (`str`): Config dict\n            line (`str`): line to unconfig\n        Returns:\n            unconfig (`list`): list of unconfig strings\n    ", "uid": "get_unconfig_line", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#185"}}, "get_username_password": {"com": {"module_name": "utils", "doc": " Gets the username and password to use to log into the device console.\n    ", "uid": "get_username_password", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#764"}}, "has_configuration": {"com": {"module_name": "utils", "doc": " Verifies if configuration is present\n        Args:\n            configuration_dict ('dict'): Dictionary containing configuration\n            configuration ('str'): Configuration to be verified        \n        Returns:\n            True if configuration is found\n    ", "uid": "has_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#329"}}, "int_to_mask": {"com": {"module_name": "utils", "doc": " Convert int to mask\n        Args:\n            mask_int ('int'): prefix length is convert to mask      \n        Returns:\n            mask value\n    ", "uid": "int_to_mask", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#347"}}, "load_jinja": {"com": {"module_name": "utils", "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            device (`obj`): Device object\n            vrf_name (`str`): Vrf name to be used in configuration\n            bandwidth (`int`): In bps, bandwidth for traffic flow\n            packet_size (`int`): Config packet size\n            ref_packet_size (`int`): Refrenced packet size\n            time_interval (`float`): In seconds, used for calculating bc\n            ipp4_bps (`int`): In bps, bandwidth for IPP4 traffic\n            ipp2_bw_percent (`int`): In percents, bandwidth for IPP2 traffic\n            ipp0_bw_percent (`int`): In percents, bandwidth for IPP0 traffic\n            interface (`str`): Where to apply the configured policies\n\n        Returns:\n            out\n    ", "uid": "load_jinja", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#468"}}, "mask_to_int": {"com": {"module_name": "utils", "doc": " Convert mask to int\n        Args:\n            mask ('str'):  mask to int     \n        Returns:\n            int value\n    ", "uid": "mask_to_int", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#362"}}, "netmask_to_bits": {"com": {"module_name": "utils", "doc": " Convert netmask to bits\n        Args:\n            net_mask ('str'): Net mask IP address\n            ex.) net_mask = '255.255.255.255'\n        Raise:\n            None\n        Returns:\n            Net mask bits\n    ", "uid": "netmask_to_bits", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#736"}}, "question_mark": {"com": {"module_name": "utils", "doc": " Verify if ? works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            None\n    ", "uid": "question_mark", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#96"}}, "question_mark_retrieve": {"com": {"module_name": "utils", "doc": " Retrieve output after pressing ? on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            output (`str`): Output\n    ", "uid": "question_mark_retrieve", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#115"}}, "reconnect_device": {"com": {"module_name": "utils", "doc": " Reconnect device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds trying to connect to device\n            interval ('int'): Interval in seconds of checking connection\n            sleep_disconnect ('int'): Waiting time after device disconnection\n        Raise:\n            ConnectionError\n        Returns:\n            N/A\n    ", "uid": "reconnect_device", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#697"}}, "reconnect_device_with_new_credentials": {"com": {"module_name": "utils", "doc": " Reconnect device\n    Args:\n        device ('obj'): Device object\n        max_time ('int'): Max time in seconds trying to connect to device\n        interval ('int'): Interval in seconds of checking connection\n        sleep_disconnect ('int'): Waiting time after device disconnection\n    Raise:\n        ConnectionError\n    Returns:\n        N/A\n    ", "uid": "reconnect_device_with_new_credentials", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#631"}}, "tabber": {"com": {"module_name": "utils", "doc": " Verify if tab works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n        Returns:\n            None\n    ", "uid": "tabber", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#59"}}, "time_to_int": {"com": {"module_name": "utils", "doc": " Cast time string to int in second\n\n        Args:\n            time(`str`): time string\n        Returns:\n            out(`int`): time in second\n    ", "uid": "time_to_int", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#155"}}, "change_configuration_using_jinja_templates": {"com": {"module_name": "jinja.configure", "doc": "Use Jinja templates to change the device configuration\n\n        Args:\n            device (`obj`): Device object\n            template (`obj`): Jinja template to be used in configuration\n            parameters (`dict`): Dictionary of all the parameters\n                                 to be passed to the Jinja template\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ", "uid": "change_configuration_using_jinja_templates", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/configure.py#11"}}, "get_jinja_template": {"com": {"module_name": "jinja.get", "doc": " Gets the jinja template specified\n\n        Args:\n            templates_dir ('str'): Templates directory\n            template_name ('str'): Template name\n\n        Returns:\n            ('obj') jinja template\n            None\n\n        Raises:\n            None\n    ", "uid": "get_jinja_template", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#6"}}, "load_jinja_template": {"com": {"module_name": "jinja.get", "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            path (`str`): Path to file directory\n            file (`str`): File name\n            kwargs (`dict`): Key value pairs\n        Returns:\n            out (`str`): Rendered template\n    ", "uid": "load_jinja_template", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#33"}}, "is_redundancy_state_in_state": {"iosxe": {"module_name": "redundancy.verify", "doc": " Verify if redundancy state is in state:\n        Args:\n            device ('obj'): Device object\n            output ('dict'): Parsed output of show redundancy state\n            expected_state ('str'): Expected state\n            max_time ('int'): Max time in seconds to check redundancy state\n            check_interval ('int'): Interval in seconds between each check\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_redundancy_state_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/verify.py#16"}}, "get_redundancy_operational_state": {"iosxe": {"module_name": "redundancy.get", "doc": " Get redundancy states of device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            String: Redundancy state\n            None\n        Raises:\n            None\n    ", "uid": "get_redundancy_operational_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/get.py#10"}}, "is_eem_applet_configured": {"iosxe": {"module_name": "eem.verify", "doc": " Verify if EEM applet is configured in running config\n\n        Args:\n            device ('obj') : Device object\n            applet_name ('str') : Applet name\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_eem_applet_configured", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/verify.py#7"}}, "remove_eem_applet": {"iosxe": {"module_name": "eem.configure", "doc": " Remove EEM applet from running config\n\n        Args:\n            device ('obj'): Device object\n            applet_name ('str'): Applet name\n        Raises:\n            SubCommandFailure\n        Returns:\n            None\n    ", "uid": "remove_eem_applet", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/configure.py#14"}}, "verify_mpls_forwarding_table_has_prefix_in_subnet_range": {"iosxe": {"module_name": "mpls.verify", "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ", "uid": "verify_mpls_forwarding_table_has_prefix_in_subnet_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#220"}}, "verify_mpls_forwarding_table_local_label_for_subnet": {"iosxe": {"module_name": "mpls.verify", "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            min_range ('int'): Minimum label\n            max_range ('int'): Maximum label\n            in_range ('bool'): True to verify between min_range/max_range, False to verify outside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ", "uid": "verify_mpls_forwarding_table_local_label_for_subnet", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#280"}}, "verify_mpls_forwarding_table_outgoing_label": {"iosxe": {"module_name": "mpls.verify", "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label\n            same_as_local (`bool`):\n                True if verify outgoing labels with local label\n                False if verify outgoing labels with expected label\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_mpls_forwarding_table_outgoing_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#21"}}, "get_interface_interfaces_ldp_enabled": {"iosxe": {"module_name": "mpls.get", "doc": " Get interfaces which have ldp configured from 'show mpls interfaces details'\n\n        Args:\n            device ('str'): Device str\n            vrf ('str'): Vrf name\n        Returns:\n            interface list\n        Raises:\n            None\n    ", "uid": "get_interface_interfaces_ldp_enabled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#81"}}, "get_mpls_forwarding_table_key_value_pairs": {"iosxe": {"module_name": "mpls.get", "doc": " Gets all key:value pairs from the mpls forwarding table\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ", "uid": "get_mpls_forwarding_table_key_value_pairs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#201"}}, "get_mpls_interface_ldp_configured": {"iosxe": {"module_name": "mpls.get", "doc": " Get interfaces which have ldp configured from 'show run'\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            interface address\n    ", "uid": "get_mpls_interface_ldp_configured", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#107"}}, "get_mpls_label_stack": {"iosxe": {"module_name": "mpls.get", "doc": " Get mpls Label Stack\n        using 'show mpls forwarding-table labels {label} detail'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n        Returns:\n            stack ('list'): Label stack\n    ", "uid": "get_mpls_label_stack", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#51"}}, "get_mpls_ldp_peer_state": {"iosxe": {"module_name": "mpls.get", "doc": " Gets the ldp peer state under specified interface\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n        Returns:\n            ldp peer state ('str')\n        Raises:\n            None\n    ", "uid": "get_mpls_ldp_peer_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#154"}}, "get_mpls_ldp_session_count": {"iosxe": {"module_name": "mpls.get", "doc": " Get mpls ldp seesion count\n\n        Args:\n            device(`str`): Device str\n        Returns:\n            int: session count\n        Raises:\n            None\n    ", "uid": "get_mpls_ldp_session_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#128"}}, "get_mpls_outgoing_label": {"iosxe": {"module_name": "mpls.get", "doc": " Get mpls outgoing label \n        using 'show mpls forwarding-table labels {label}'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n        Returns:\n            out_label ('str'): Outgoing label\n    ", "uid": "get_mpls_outgoing_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#24"}}, "check_traffic_drop_count": {"iosxe": {"module_name": "traffic.checks", "doc": "Check for the drop count\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            drop_count (`str`): Expected drop count\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ", "uid": "check_traffic_drop_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#243"}}, "check_traffic_expected_rate": {"iosxe": {"module_name": "traffic.checks", "doc": "Check the expected rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            expected_rate (`str`): Traffic expected received rate\n            tolerance (`str`): Traffic loss tolerance percentage\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ", "uid": "check_traffic_expected_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#150"}}, "check_traffic_transmitted_rate": {"iosxe": {"module_name": "traffic.checks", "doc": "Check transmitted rate was set correctly or not\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ", "uid": "check_traffic_transmitted_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#60"}}, "get_traffic_rates": {"iosxe": {"module_name": "traffic.checks", "doc": "Retrieve the formated traffic rates and tolerance margin\n\n        Args:\n            expected_rate (`str`): Expected traffic rate\n            tolerance (`str`): Tolerance margin\n\n        Returns:\n            expected_rate, expected_rate_unit, original_rate, tolerance_margin\n        Raise:\n            Exception: Failed analyzing rate\n    ", "uid": "get_traffic_rates", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#297"}}, "set_traffic_transmit_rate": {"iosxe": {"module_name": "traffic.checks", "doc": "Set stream transmit rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Failed to set transmit rate\n    ", "uid": "set_traffic_transmit_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#17"}}, "verify_dns_packets": {"iosxe": {"module_name": "dns.verify", "doc": " Analyze the DNS packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address('str'): The captured IP address\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_dns_packets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/verify.py#11"}}, "remove_subscriber": {"iosxe": {"module_name": "subscriber.configure", "doc": " Remove subscriber\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): BGP AS\n            bridge_id ('str'): Bridge Id\n            bridge_interface ('str'): Bridge interface\n            vpn_id ('str'): VPN id\n            vpn_interface ('str'): VPN interface\n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ", "uid": "remove_subscriber", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/subscriber/configure.py#12"}}, "is_issu_in_state": {"iosxe": {"module_name": "issu.verify", "doc": " Verify if ISSU is in state for a specific slot\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot for which we need to check ISSU state\n            expected_state ('str'): Acceptable ISSU states are:\n                                        - loadversion\n                                        - runversion\n                                        - acceptversion\n                                        - commitversion\n            max_time ('int'): Max time checking issu state\n            interval ('int': Interval checking\n        Raise:\n            None\n        Return\n            True\n            False\n    ", "uid": "is_issu_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#55"}}, "is_issu_rollback_timer_in_state": {"iosxe": {"module_name": "issu.verify", "doc": " Verify if issu rollback timer is in state\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot name\n            expected_state ('str'): Expected state ('active', 'inactive')\n            max_time ('int'): Max time checking \n            interval ('int'): Check interfal\n        Return:\n            True\n            False\n        Raise:\n            SchemaEmptyParserError\n\n    ", "uid": "is_issu_rollback_timer_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#101"}}, "is_issu_terminal_state_reached_on_slot": {"iosxe": {"module_name": "issu.verify", "doc": " Verify if a slot has reached\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot to check\n            max_time ('int'): Max time checking\n            interval ('int'): Interval of checking\n        Raise:\n            None\n        Return:\n            True\n            False\n    ", "uid": "is_issu_terminal_state_reached_on_slot", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#18"}}, "copy_issu_image_to_disk": {"iosxe": {"module_name": "issu.configure", "doc": " Copy image from a server to disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            address ('str'): Server address\n            path ('str'): Path on server\n            protocol ('str'): Transfer protocol\n            image ('str'): Image name\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n            wait_time_after_copy ('int'): Wait time after file copy\n            overwrite ('bool'): Flag to overwrite existing file\n        Raises:\n            Exception: Failed copying ISSU image to disk\n        Returns:\n            None\n    ", "uid": "copy_issu_image_to_disk", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#71"}}, "downgrade_issu_image_on_router": {"iosxe": {"module_name": "issu.configure", "doc": " Execute software downgrade on router\n        Args:\n            device ('obj'): Device object\n            upgraded_image ('str'): Name of current installed image\n            downgrade_image ('str'): Name of image to be used in downgrade\n            disk ('str'): Disk name            \n            timeout ('int'): Timeout in seconds\n        Raise:\n            SubCommandFailure: Failed downgrading image on device\n            ConnectionError: Failed reconnecting to device\n        Returns:\n            None\n\n    ", "uid": "downgrade_issu_image_on_router", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#368"}}, "issu_acceptversion": {"iosxe": {"module_name": "issu.configure", "doc": " Execute issu acceptversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu acceptversion' command\n        Returns:\n            None\n    ", "uid": "issu_acceptversion", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#291"}}, "issu_commitversion": {"iosxe": {"module_name": "issu.configure", "doc": " Execute issu commitversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu commitversion' command\n        Returns:\n            None\n    ", "uid": "issu_commitversion", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#315"}}, "issu_loadversion": {"iosxe": {"module_name": "issu.configure", "doc": " Execute issu loadversion command on device\n        Args:\n            device ('obj'): Device object\n            standby_slot ('int'): Standby slot number\n            disk ('str'): Disk name\n            image ('str'): Image name\n            timeout ('int'): Time out in seconds\n        Raise:\n            Exception: Failed to load version on device\n        Returns:\n            None\n    ", "uid": "issu_loadversion", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#233"}}, "issu_runversion": {"iosxe": {"module_name": "issu.configure", "doc": " Execute issu runversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception Failed to reconnect to device\n        Returns:\n            None\n    ", "uid": "issu_runversion", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#263"}}, "perform_issu": {"iosxe": {"module_name": "issu.configure", "doc": " Execute ISSU on device\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name on disk\n            disk ('str'): Disk where is located image\n            timeout ('int'): Timeout in second for each section\n        Raise:\n            None\n        Returns:\n            None\n    ", "uid": "perform_issu", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#115"}}, "prepare_issu": {"iosxe": {"module_name": "issu.configure", "doc": " Prepare image and check device before starting issu process\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name\n            path ('str'): Path on dsetr\n            overwrite ('bool'): Flag to overwrite existing file\n            protocol ('str'): Protocol to be used on copying image to device\n            address ('str'): Address of server from where image will be copied.\n            disks ('list'): List of disks where image will be copied\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n        Raises:\n            Exception: Failed preparing ISSU image\n        Returns:\n            None\n    ", "uid": "prepare_issu", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#35"}}, "reload_issu_slot": {"iosxe": {"module_name": "issu.configure", "doc": " Reload slot on device\n        Args:\n            device ('obj'): Device object\n            slot ('str'):  Slot to be reloaded\n            wait_time ('int'): Time to wait in seconds after slot reload\n        Raise:\n            Exception\n    ", "uid": "reload_issu_slot", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#343"}}, "get_issu_free_space_on_disk": {"iosxe": {"module_name": "issu.get", "doc": " Get free space information on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return:            \n            Integer: Free space on disk in bytes\n        Raises: \n            SubCommandFailure: Failed getting free space info on device\n    ", "uid": "get_issu_free_space_on_disk", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#39"}}, "get_issu_space_info_on_disk": {"iosxe": {"module_name": "issu.get", "doc": " Get free and total space on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return: \n            list: \n                bytes_total ('int'): Total space on disk in bytes\n                bytes_free ('int'): Free space on disk in bytes\n        Raise:\n            SubCommandFailure: Failed executing dir command\n    ", "uid": "get_issu_space_info_on_disk", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#6"}}, "configure_route_map_route_map": {"iosxe": {"module_name": "route_map.configure", "doc": " Configures route-map on device\n\n        Args:\n            device('obj'): device to configure on\n            route_map('list'): route-map list which contains dictionary\n                dictionary contains following 6 keys:\n                    seq ('int'): sequence number\n                    route_map ('str'): route-map name\n                    prefix_list ('str'): prefix-list value\n                    set_community ('str'): set community value\n                    match_community ('str'): match community value\n                    set_as_path ('str') : set as-path values\n                ex.)\n                    [\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test_out',\n                        'match_community': 2\n                    },\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test',\n                        'set_community': '62000:1'\n                    },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring route map\n    ", "uid": "configure_route_map_route_map", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/route_map/configure.py#12"}}, "config_mac_aging_time": {"iosxe": {"module_name": "mac.configure", "doc": " Config mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n            aging_time (`int`): mac aging-time\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ", "uid": "config_mac_aging_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#12"}}, "config_mac_learning": {"iosxe": {"module_name": "mac.configure", "doc": " Config mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ", "uid": "config_mac_learning", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#70"}}, "unconfig_mac_aging_time": {"iosxe": {"module_name": "mac.configure", "doc": " Unconfig mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ", "uid": "unconfig_mac_aging_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#43"}}, "unconfig_mac_learning": {"iosxe": {"module_name": "mac.configure", "doc": " Unconfig mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ", "uid": "unconfig_mac_learning", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#96"}}, "get_mac_aging_timer": {"iosxe": {"module_name": "mac.get", "doc": " Get Aging-Timer from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            aging_time (`int`): aging-time in second\n            None \n        Raises:\n            None\n    ", "uid": "get_mac_aging_timer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#12"}}, "get_mac_table": {"iosxe": {"module_name": "mac.get", "doc": " Get mac table from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            mac_table (`dict`): mac table dict\n            None: When nothing has been found\n        Raises:\n            None\n    ", "uid": "get_mac_table", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#34"}}, "get_ospf_router_id": {"iosxe": {"module_name": "protocols.get", "doc": " Get ospf router-id - show ip protocols\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            instance ('str'): instance value\n        Returns:\n            str: single router id\n            None: if empty\n        Raises:\n            None\n    ", "uid": "get_ospf_router_id", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#42"}}, "get_protocols_bgp_process": {"iosxe": {"module_name": "protocols.get", "doc": " Returns bgp process id from show protocols\n\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            bgp process id\n        Raises:\n            None\n    ", "uid": "get_protocols_bgp_process", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#14"}}, "is_interface_changed_state_log": {"iosxe": {"module_name": "interface.verify", "doc": " Verify interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ", "uid": "is_interface_changed_state_log", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#146"}}, "is_interface_present_running_config": {"iosxe": {"module_name": "interface.verify", "doc": " Verify if interface is present in running-config\n        Args:\n            device ('obj')      : Device object\n            interface ('str')   : Interface\n\n        Raises:\n            SubCommandFailure\n            Exception\n        Returns\n            True\n            False\n    ", "uid": "is_interface_present_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#695"}}, "is_interface_traffic_flowing_at_rate": {"iosxe": {"module_name": "interface.verify", "doc": " Verify if interface traffic is flowing at generated rate\n        Args:\n            interface_rate ('float'): Interface rate\n            tgn_tx_rate ('float'): Generated rate\n            tolerance ('float'): Margin of error in percentage \n\n        Returns:\n            True\n            False\n    ", "uid": "is_interface_traffic_flowing_at_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#741"}}, "verify_interface_bundled_interfaces_mode": {"iosxe": {"module_name": "interface.verify", "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): Interfaces list\n            port_channel (`str`): Port channel interface\n            lacp_id (`int`): lacp ID\n        Returns:\n            None\n    ", "uid": "verify_interface_bundled_interfaces_mode", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#571"}}, "verify_interface_config_carrier_delay": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface carrier_delay config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify has carrier delay\n                           False if verify no carrier delay\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_config_carrier_delay", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#31"}}, "verify_interface_config_no_shutdown": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface doesn't have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_config_no_shutdown", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#241"}}, "verify_interface_config_ospf_bfd": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface ospf bfd config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_config_ospf_bfd", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#71"}}, "verify_interface_config_rejected": {"iosxe": {"module_name": "interface.verify", "doc": " Verify if it fails when trying to configure an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            True: Rejected configuration \n            False: Accepted configuration\n        Raises:\n            None\n    ", "uid": "verify_interface_config_rejected", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#722"}}, "verify_interface_config_shutdown": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_config_shutdown", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#206"}}, "verify_interface_description_in_running_config": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_description_in_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#762"}}, "verify_interface_description_in_show_interfaces": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface description in show interfaces <interface>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_description_in_show_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#797"}}, "verify_interface_ip_route_connected": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface IP address route is present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            flag (`bool`): True if verify present \n                           False if verify not present\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_ip_route_connected", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#339"}}, "verify_interface_mtu_packets": {"iosxe": {"module_name": "interface.verify", "doc": " Verify one mtu packet split into two packets\n\n        Args:\n            pkts (`obj`): Pcap object\n            peer_ip (`str`): Ping ip address\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_interface_mtu_packets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#106"}}, "verify_interface_no_error_counters": {"iosxe": {"module_name": "interface.verify", "doc": " Verify no error counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            counters (`list`): Extra counters to be checked\n        Returns:\n            None\n    ", "uid": "verify_interface_no_error_counters", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#164"}}, "verify_interface_port_channel_in_no_use": {"iosxe": {"module_name": "interface.verify", "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_port_channel_in_no_use", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#664"}}, "verify_interface_port_channel_status_bundled": {"iosxe": {"module_name": "interface.verify", "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_port_channel_status_bundled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#615"}}, "verify_interface_port_channel_status_changed": {"iosxe": {"module_name": "interface.verify", "doc": " Verify Port channel status\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            status (`str`): Interface status\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_port_channel_status_changed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#499"}}, "verify_interface_port_channel_status_down": {"iosxe": {"module_name": "interface.verify", "doc": " Verify Port Channel state is down\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n\n        Returns:\n            N/A\n    ", "uid": "verify_interface_port_channel_status_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#469"}}, "verify_interface_port_channel_status_up_and_interfaces_bundled": {"iosxe": {"module_name": "interface.verify", "doc": " Verify Port channel state and the bundled interfaces\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n            interface('str'): Interface name\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_interface_port_channel_status_up_and_interfaces_bundled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#539"}}, "verify_interface_secondary_addresses": {"iosxe": {"module_name": "interface.verify", "doc": " Verify secondary addresses are present in RIB\n\n        Args:\n            device (`obj`): Device object\n            connected_sec_addr (`str`): Secondary ip address for connected\n            local_sec_addr (`str`): Secondary ip address for local\n            vrf (`str`): Vrf name\n            address_family (`str`): Address family\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n        Returns:\n            list of address not in RIB\n    ", "uid": "verify_interface_secondary_addresses", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#431"}}, "verify_interface_state_admin_down": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ", "uid": "verify_interface_state_admin_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#312"}}, "verify_interface_state_down": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface state is down and and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ", "uid": "verify_interface_state_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#285"}}, "verify_interface_state_up": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ", "uid": "verify_interface_state_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#259"}}, "verify_no_interface_ip_route_connected": {"iosxe": {"module_name": "interface.verify", "doc": "Verify interface IP address route is not present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_no_interface_ip_route_connected", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#402"}}, "clear_interface_config": {"iosxe": {"module_name": "interface.configure", "doc": " Clears interface config\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to clear\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "clear_interface_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#651"}}, "clear_interface_counters": {"iosxe": {"module_name": "interface.configure", "doc": " Clear interface counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "clear_interface_counters", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#59"}}, "clear_interface_interfaces": {"iosxe": {"module_name": "interface.configure", "doc": " clear interface configuration\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "clear_interface_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#956"}}, "config_interface_carrier_delay": {"iosxe": {"module_name": "interface.configure", "doc": " Configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            delay (`int`): Delay time in second\n            delay_type (`str`): Delay type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_interface_carrier_delay", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#294"}}, "config_interface_mtu": {"iosxe": {"module_name": "interface.configure", "doc": " Config MTU on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mtu_bytes (`int`): MTU bytes\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_interface_mtu", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#379"}}, "config_interface_negotiation": {"iosxe": {"module_name": "interface.configure", "doc": " Config negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_interface_negotiation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#90"}}, "config_interface_ospf": {"iosxe": {"module_name": "interface.configure", "doc": " Config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): Ospf process id\n            area ('int'): Ospf area code\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_interface_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#445"}}, "config_interface_subinterface_and_secondary_addresses": {"iosxe": {"module_name": "interface.configure", "doc": " Configure sub-interface and secondary addresses on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sub_interface_num (`int`): Subinterface to be added to\n                                 interface name\n            ip_address(`str`): IP addressed to be configured on interface\n            prefix(`str`): prefix to be used in configuration\n            encap_type (`str`): Encapsulation type\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_interface_subinterface_and_secondary_addresses", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#538"}}, "config_ip_on_interface": {"iosxe": {"module_name": "interface.configure", "doc": " Configure IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): IP addressed to be configured on interface\n            mask (`str`): Mask address to be used in configuration\n            eth_encap_type (`str`): Encapsulation type\n            eth_encap_val (`str`): Encapsulation value\n            sub_interface (`str`): Subinterface to be added to interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "config_ip_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#477"}}, "configure_interface_description": {"iosxe": {"module_name": "interface.configure", "doc": "configure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description(`str`): Description\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_description", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#1021"}}, "configure_interface_directed_broadcast": {"iosxe": {"module_name": "interface.configure", "doc": " Configures directed-broadcast on interface\n\n        Args:\n            device ('obj'): device to run on\n            interfaces ('list'): list of interfaces to configure\n            configure ('bool'): config/unconfig\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_directed_broadcast", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#713"}}, "configure_interface_interfaces_on_port_channel": {"iosxe": {"module_name": "interface.configure", "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n\n        Returns:\n            None\n    ", "uid": "configure_interface_interfaces_on_port_channel", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#837"}}, "configure_interface_l3_port_channel": {"iosxe": {"module_name": "interface.configure", "doc": " Configure Port channel and lag interfaces\n\n        Args:\n            target (`str`): Target device to configure on\n            port_channel (`str`): Port Channel Interface\n            neighbor_address (`str`): Peer IP address\n            neighbor_netmask(`str`): Peer address Net-mask\n            interfaces(`List`): List of interfaces to configure\n            testbed (`obj`): Testbed object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_l3_port_channel", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#753"}}, "configure_interface_monitor_session": {"iosxe": {"module_name": "interface.configure", "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            monitor_config (`list`): list of monitor session configuration\n                ex.) \n                    monitor_config = [{\n                            'session_name': 1,\n                            'session_type': 'erspan-source',\n                            'interface': 'GigabitEthernet10',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        },\n                        {\n                            'session_name': 2,\n                            'session_type': 'erspan-destination',\n                            'interface': 'GigabitEthernet11',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        }\n                    ]\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_monitor_session", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#1078"}}, "configure_interface_switchport_access_vlan": {"iosxe": {"module_name": "interface.configure", "doc": " Configures switchport on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan ('str'): access_vlan to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_interface_switchport_access_vlan", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#678"}}, "configure_lacp_on_interface": {"iosxe": {"module_name": "interface.configure", "doc": " Configure LACP on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            min_max_bundle (`int`): Number of minimum/maximum bundles\n            minumum_bundle (`bool`): True if configuring minimum-bundle\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_lacp_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#880"}}, "configure_subinterfaces_for_vlan_range": {"iosxe": {"module_name": "interface.configure", "doc": " Configures multiple subinterfaces looping through vlan range\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Physical interface to configure\n            vlan_id_start ('int'): Start of vlan range\n            vlan_id_step ('int'): Size of vlan range step\n            vlan_id_count ('int'): How many steps for vlan range\n            netmask ('str'): Netmask to configure\n            network_start ('str'): Start of network\n            network_step ('str'): Size of network step\n            ospf_network_type ('str'): Ospf network type to configure\n\n        Raises:\n            SubCommandFailure\n\n        Returns:\n            list of configured interfaces\n\n    ", "uid": "configure_subinterfaces_for_vlan_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#1144"}}, "configure_vrf_on_interface": {"iosxe": {"module_name": "interface.configure", "doc": " Configure interface to use VRF\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface\n            vrf ('str'): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_vrf_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#990"}}, "remove_interface_carrier_delay": {"iosxe": {"module_name": "interface.configure", "doc": " Remove interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_interface_carrier_delay", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#332"}}, "remove_interface_configured_service_policy": {"iosxe": {"module_name": "interface.configure", "doc": " Remove any service policy configured under interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to remove service policy from\n            out (`dict`): Show run interface <interface> output\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_interface_configured_service_policy", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#596"}}, "remove_interface_negotiation": {"iosxe": {"module_name": "interface.configure", "doc": " Remove negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_interface_negotiation", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#124"}}, "remove_interface_ospf_bfd": {"iosxe": {"module_name": "interface.configure", "doc": " Remove interface ospf bfd on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_interface_ospf_bfd", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#356"}}, "reset_interface": {"iosxe": {"module_name": "interface.configure", "doc": " Reset interface configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "reset_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#32"}}, "shut_interface_adjacent_interfaces": {"iosxe": {"module_name": "interface.configure", "doc": " Shut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ", "uid": "shut_interface_adjacent_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#215"}}, "shutdown_interface": {"iosxe": {"module_name": "interface.configure", "doc": " Shutdown a bundled Interface\n\n        Args:\n            device (`obj`): Device object\n            member (`str`): Bundled interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "shutdown_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#813"}}, "unconfig_interface_mtu": {"iosxe": {"module_name": "interface.configure", "doc": " Remove MTU config from interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "unconfig_interface_mtu", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#414"}}, "unconfigure_interface_description": {"iosxe": {"module_name": "interface.configure", "doc": "unconfigure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "unconfigure_interface_description", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#1051"}}, "unshut_interface_adjacent_interfaces": {"iosxe": {"module_name": "interface.configure", "doc": " Unshut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "unshut_interface_adjacent_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#255"}}, "get_bundled_interface": {"iosxe": {"module_name": "interface.get", "doc": " Pick up Port channel bundled interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port Channel Interface\n            exclude_interface ('str'): interface to skip\n\n        Returns:\n            String: Interface\n\n        Raises:\n            None\n    ", "uid": "get_bundled_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#734"}}, "get_inserted_interface_by_media_type": {"iosxe": {"module_name": "interface.get", "doc": " Get newly inserted interface by media type\n\n        Args:\n            device (`obj`): Device object\n            media_type (`str`): media type\n\n        Returns:\n            interface (`str`): interface name\n    ", "uid": "get_inserted_interface_by_media_type", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#39"}}, "get_interface_carrier_delay": {"iosxe": {"module_name": "interface.get", "doc": " Get interface carrier delay\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            delay_type ('str'): Carrier delay type: 'up', 'down'\n\n        Returns:\n            None\n            delay in seconds ('str')\n\n        Raises:\n            None\n    ", "uid": "get_interface_carrier_delay", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#476"}}, "get_interface_connected_adjacent_router_interfaces": {"iosxe": {"module_name": "interface.get", "doc": " Get list of connected interfaces from adjacents routers\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            List: EthernetInterface objects\n\n        Raises:\n            None\n    ", "uid": "get_interface_connected_adjacent_router_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#704"}}, "get_interface_interfaces": {"iosxe": {"module_name": "interface.get", "doc": " Get interface and device\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ", "uid": "get_interface_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#537"}}, "get_interface_interfaces_under_vrf": {"iosxe": {"module_name": "interface.get", "doc": " Get interfaces configured under specific Vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n\n        Returns:\n            interfaces (`list`): List of interfaces\n\n        Raises:\n            None\n    ", "uid": "get_interface_interfaces_under_vrf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#571"}}, "get_interface_ip_and_mask": {"iosxe": {"module_name": "interface.get", "doc": " Get interface ip address and mask\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            prefix (`bool`): return ip with prefix if True\n                             otherwise return ip and mask\n\n        Returns:\n            Tuple: (None, None)\n            Tuple: (str: interface ip address, str: interface mask)\n\n        Raises:\n            None\n    ", "uid": "get_interface_ip_and_mask", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#502"}}, "get_interface_loopback_ip_address": {"iosxe": {"module_name": "interface.get", "doc": " Gets all loopback interface ip_address' up to number specified\n\n        Args:\n            device ('obj'): device to use\n            num ('int'): max number of loopback interfaces to get ip_address from\n\n        Returns:\n            list: [(interface with Loopback address, ip_address), ...]\n\n        Raises:\n            None\n    ", "uid": "get_interface_loopback_ip_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#355"}}, "get_interface_mac_address": {"iosxe": {"module_name": "interface.get", "doc": " Get interface mac address from device\n\n        Args:\n            device (`obj`): Device object\n            interface(`str`): Interface name\n\n        Returns:\n            None\n            interface mac address\n\n        Raises:\n            None\n    ", "uid": "get_interface_mac_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#209"}}, "get_interface_mtu_config_range": {"iosxe": {"module_name": "interface.get", "doc": " Get MTU config range\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            range_dict (`dict`): MTU range dict\n                ex: {'min':30, 'max':360, range: '30-360'}\n\n        Raises:\n            None\n    ", "uid": "get_interface_mtu_config_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#178"}}, "get_interface_mtu_size": {"iosxe": {"module_name": "interface.get", "doc": " Get interface MTU\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            mtu (`int`): mtu bytes\n\n        Raises:\n            None\n    ", "uid": "get_interface_mtu_size", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#154"}}, "get_interface_netmask": {"iosxe": {"module_name": "interface.get", "doc": " Get netmask of ip address' class\n\n        Args:\n            ip_address ('str'): ipv4 address\n\n        Returns:\n            ip address mask\n\n        Raises:\n            None\n    ", "uid": "get_interface_netmask", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#941"}}, "get_interface_packet_counter": {"iosxe": {"module_name": "interface.get", "doc": " Returns packet counters for given interface\n\n        Args:\n            device ('obj') : Device object\n            interface ('str'): Interface name\n            output ('dict'): Parsed output from 'show interfaces' command\n\n        Returns\n            counter: number of output packet\n\n            if any error or no counter_field was found return None\n            - to separate 0 packet and None value\n\n        Raises:\n            None\n    ", "uid": "get_interface_packet_counter", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#630"}}, "get_interface_packet_input_rate": {"iosxe": {"module_name": "interface.get", "doc": " Get rate from in_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ", "uid": "get_interface_packet_input_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#896"}}, "get_interface_packet_output_rate": {"iosxe": {"module_name": "interface.get", "doc": " Get rate from out_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n            field ('str'): Used for get_interface_packet_input_rate\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ", "uid": "get_interface_packet_output_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#807"}}, "get_interface_port_channel_members": {"iosxe": {"module_name": "interface.get", "doc": " Get interface members\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n\n        Returns:\n            interface members\n\n        Raises:\n            None\n    ", "uid": "get_interface_port_channel_members", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#965"}}, "get_interface_qlimit_bytes": {"iosxe": {"module_name": "interface.get", "doc": " Get interface qlimit in bytes\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            qlimit_bytes (`int`): Interface qlimit_bytes\n\n        Raises:\n            None\n    ", "uid": "get_interface_qlimit_bytes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#270"}}, "get_interface_running_config": {"iosxe": {"module_name": "interface.get", "doc": " Get interface configuration from show running-config interface {interface}\n        \n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n\n        Return:\n            Dictionary with running interface configuration\n\n        Raises:\n            None\n    ", "uid": "get_interface_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#602"}}, "get_interface_switchport_access_vlan": {"iosxe": {"module_name": "interface.get", "doc": " Returns access_vlan id for interface on device\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n\n        Returns:\n            str access_vlan\n\n        Raise:\n            None\n    ", "uid": "get_interface_switchport_access_vlan", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#917"}}, "get_interface_with_mask": {"iosxe": {"module_name": "interface.get", "doc": " Gets interface:ip_address with specific mask\n\n        Args:\n            device('obj'): device to use\n            netmask('str'): netmask the interface must have\n            address_family('str'): address_family to search under\n\n        Returns:\n            (None, None)\n            (interface('str'), ip_address('str'))\n\n        Raises:\n            None\n    ", "uid": "get_interface_with_mask", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#410"}}, "get_interface_with_up_state": {"iosxe": {"module_name": "interface.get", "doc": " Get a interface which is up\n\n        Args:\n            device ('obj'): Device object\n            interface_type ('str'): Interface type\n            virtual_interface ('bool'): Flag for logical interface\n                               if is None, return physical or logical\n                               if is True, return only logical\n                               if is False, return only physical\n        Returns:\n            None\n            interface name ('str')\n\n        Raises:\n            None\n    ", "uid": "get_interface_with_up_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#443"}}, "get_interface_without_service_policy": {"iosxe": {"module_name": "interface.get", "doc": " Find a interface without service-policy\n\n        Args:\n            device (`obj`): Device object\n            interface_type (`str`): Interface type\n            virtual_interface ('bool'): flag for matching virtual interfaces\n\n        Returns:\n            None\n            interface (`str`): Interface name\n\n        Raises:\n            None\n    ", "uid": "get_interface_without_service_policy", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#233"}}, "get_neighbor_interface_and_device": {"iosxe": {"module_name": "interface.get", "doc": " Get neighbor interface and device from topology\n\n        Args:\n            device (`obj`): Device object\n            interface_alias (`str`): interface alias\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ", "uid": "get_neighbor_interface_and_device", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#83"}}, "get_neighbor_interface_and_device_by_link": {"iosxe": {"module_name": "interface.get", "doc": " Get neighbor interface and device by link\n\n        Args:\n            device (`obj`): Device object\n            link_name (`str`): link name\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ", "uid": "get_neighbor_interface_and_device_by_link", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#113"}}, "get_neighboring_device_interface": {"iosxe": {"module_name": "interface.get", "doc": " Get neighbor device interface\n\n        Args:\n            device ('obj'): Device object\n            testbed ('obj'): Testbed object\n            interface ('str'): interface name\n\n        Returns:\n            Dictionary: topology\n\n        Raises:\n            None\n    ", "uid": "get_neighboring_device_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#661"}}, "get_unused_loopback_interface": {"iosxe": {"module_name": "interface.get", "doc": " Gets the first un-used loopback interface\n\n        Args:\n            device ('obj'): device to use\n\n        returns:\n            string: first unused loopback\n\n        Raises:\n            None\n    ", "uid": "get_unused_loopback_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#385"}}, "get_ntp_system_peer_vrf": {"iosxe": {"module_name": "ntp.get", "doc": " Get a ntp system peer's vrf name\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            vrf (`str`): vrf name\n    ", "uid": "get_ntp_system_peer_vrf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#191"}}, "verify_hardware_active_ESP_changed": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify active ESP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n    ", "uid": "verify_hardware_active_ESP_changed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#85"}}, "verify_hardware_active_RP_changed": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify active RP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n        Raises:\n            None\n    ", "uid": "verify_hardware_active_RP_changed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#57"}}, "verify_hardware_fan_speed_increase": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify fan speed increase\n\n        Args:\n            curr_fans (`list`): current fans\n            prev_fans (`list`): previous fans\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ", "uid": "verify_hardware_fan_speed_increase", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#24"}}, "verify_hardware_redundancy_states": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify redundancy operational state is sso\n        Manual Swact is enabled and\n        Peer state is STANDBY HOT\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): verified result\n    ", "uid": "verify_hardware_redundancy_states", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#253"}}, "verify_hardware_slot_exist": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify hardware slot exists\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ", "uid": "verify_hardware_slot_exist", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#142"}}, "verify_hardware_slot_removed": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify hardware slot has removed\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ", "uid": "verify_hardware_slot_removed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#111"}}, "verify_hardware_spa_exist": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify spa exists\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ", "uid": "verify_hardware_spa_exist", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#211"}}, "verify_hardware_spa_removed": {"iosxe": {"module_name": "hardware.verify", "doc": " Verify spa has removed\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ", "uid": "verify_hardware_spa_removed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#169"}}, "get_hardware_all_fans_speed": {"iosxe": {"module_name": "hardware.get", "doc": " Get fan speed for all fans \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            fans (`list`): Fans info\n        Raises:\n            None\n    ", "uid": "get_hardware_all_fans_speed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#22"}}, "get_hardware_esp_slot": {"iosxe": {"module_name": "hardware.get", "doc": " Get ESP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): ESP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): ESP slot in required state\n            None\n        Raises:\n            None\n    ", "uid": "get_hardware_esp_slot", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#119"}}, "get_hardware_inserted_sfp": {"iosxe": {"module_name": "hardware.get", "doc": " Get newly inserted SFP\n\n        Args:\n            device (`obj`): Device object\n            prev_slots (`dict`): Previous sfp slot dict\n            sfp_descr (`str`): SFP descr\n            intf_type (`str`): Interface type\n        Returns:\n            interface (`str`): Interface name\n    ", "uid": "get_hardware_inserted_sfp", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#212"}}, "get_hardware_interface_sfp_descr": {"iosxe": {"module_name": "hardware.get", "doc": " Get interface SFP descr\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Returns:\n            descr (`str`): Interface SFP descr\n        Raises:\n            None\n    ", "uid": "get_hardware_interface_sfp_descr", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#300"}}, "get_hardware_rp_slot": {"iosxe": {"module_name": "hardware.get", "doc": " Get RP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): RP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): RP slot in required state\n            None\n        Raises:\n            None\n    ", "uid": "get_hardware_rp_slot", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#64"}}, "get_hardware_sfp_slot_dict": {"iosxe": {"module_name": "hardware.get", "doc": " Get SFP slot dict\n\n        Args:\n            device (`obj`): Device object\n            sfp_descr (`str`): SFP descr\n        Returns:\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Raises:\n            None\n    ", "uid": "get_hardware_sfp_slot_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#247"}}, "get_hardware_slot_state": {"iosxe": {"module_name": "hardware.get", "doc": " Get slot state\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): Slot\n        Returns:\n            state (`str`): Slot state\n            None\n        Raises:\n            None\n    ", "uid": "get_hardware_slot_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#174"}}, "is_l2vpn_storm_control_packet_count_increased": {"iosxe": {"module_name": "l2vpn.verify", "doc": " Verify packet count has increased\n        \n            Args:\n                intial_discard_packets ('dict'): previous dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234234,\n                            'unicast': 123123\n                        }\n                current_discard_packets ('dict'): current dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234534,\n                            'unicast': 123523\n                        }\n            Returns:\n                True\n                False\n            Raises:\n                None\n        ", "uid": "is_l2vpn_storm_control_packet_count_increased", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#126"}}, "verify_l2vpn_storm_control_configuration": {"iosxe": {"module_name": "l2vpn.verify", "doc": " Verify storm-control configuration is applied\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            None\n        Raises:\n            None\n    ", "uid": "verify_l2vpn_storm_control_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#23"}}, "configure_l2vpn_storm_control": {"iosxe": {"module_name": "l2vpn.configure", "doc": " Configures storm control under service instance\n\n        Args:\n            device('obj'): device to configure\n            interface('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_l2vpn_storm_control", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#13"}}, "verify_vpls_same_interface_for_l2vpn_and_l3vpn": {"iosxe": {"module_name": "l2vpn.vpls.verify", "doc": " Verify that subinterface for L3VPN vrf and service instance for L2VPN bridge-domain belong to same interface\n\n        Args:\n            device('obj'): device object \n            vrf ('str'): vrf name\n            bridge_domain_id ('int'): bridge-domain id\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_vpls_same_interface_for_l2vpn_and_l3vpn", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/vpls/verify.py#23"}}, "get_l2vpn_interface_under_service_instance": {"iosxe": {"module_name": "l2vpn.get", "doc": " Gets interface under service instance 'service_instance_id' using command\n        'show ethernet service instance'\n\n        Args:\n            device ('obj'): Device object\n            service_instance_id ('int'): service instance id\n    \n        Returns:\n            interface\n            None\n        Raises:\n            None\n\n    ", "uid": "get_l2vpn_interface_under_service_instance", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#18"}}, "get_l2vpn_storm_control_discard_packet_count": {"iosxe": {"module_name": "l2vpn.get", "doc": "Get current storm control discard packet count\n        \n            Args:\n                device ('Obj'): Device object\n                service_instance_id ('int'): L2VPN service instance id\n                interface ('str'): Interface name\n\n            Returns:\n                None\n\n            Raises:\n                None\n                \n        ", "uid": "get_l2vpn_storm_control_discard_packet_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#48"}}, "is_syslog_message_received": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify if a message was received in Syslog server.\n        It needs a output from a tcpdump command\n\n        Args:                        \n            device ('obj'): Device object\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_syslog_message_received", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#312"}}, "verify_syslog_bgp_peer_down": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for bgp peer down message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "verify_syslog_bgp_peer_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#201"}}, "verify_syslog_bgp_peer_up": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for bgp peer up message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "verify_syslog_bgp_peer_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#169"}}, "verify_syslog_interface_link_down": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify link down message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "verify_syslog_interface_link_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#274"}}, "verify_syslog_interface_link_up": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify link up message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_syslog_interface_link_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#233"}}, "verify_syslog_interface_shut": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for interface shut message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_syslog_interface_shut", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#9"}}, "verify_syslog_interface_up": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for interface up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_syslog_interface_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#48"}}, "verify_syslog_ospf_neighbor_down": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for ospf neighbor down message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_syslog_ospf_neighbor_down", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#129"}}, "verify_syslog_ospf_neighbor_up": {"iosxe": {"module_name": "syslog.verify", "doc": " Verify log for ospf neighbor up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "verify_syslog_ospf_neighbor_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#88"}}, "configure_syslog_server": {"iosxe": {"module_name": "syslog.configure", "doc": " Configure Syslog servers\n\n        Args:\n            device ('obj') : Device to be configured server\n            server ('str'): Syslog server to be configured            \n            steps ('obj'): Context manager object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_syslog_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/configure.py#8"}}, "get_syslog_first_bgp_down_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get first BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ", "uid": "get_syslog_first_bgp_down_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#169"}}, "get_syslog_first_bgp_up_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get first BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ", "uid": "get_syslog_first_bgp_up_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#275"}}, "get_syslog_first_ospf_down_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get first OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ", "uid": "get_syslog_first_ospf_down_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#107"}}, "get_syslog_first_ospf_up_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get first OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ", "uid": "get_syslog_first_ospf_up_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#218"}}, "get_syslog_last_bgp_down_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get last BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ", "uid": "get_syslog_last_bgp_down_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#150"}}, "get_syslog_last_bgp_up_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get last BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ", "uid": "get_syslog_last_bgp_up_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#258"}}, "get_syslog_last_ospf_down_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get last OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ", "uid": "get_syslog_last_ospf_down_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#83"}}, "get_syslog_last_ospf_up_message": {"iosxe": {"module_name": "syslog.get", "doc": " Get last OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ", "uid": "get_syslog_last_ospf_up_message", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#196"}}, "get_syslog_maximum_bgp_down_time": {"iosxe": {"module_name": "syslog.get", "doc": " Get maximum BGP down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from show logging\n        Returns:\n            BGP down time in seconds\n        Raises:\n            ValueError\n    ", "uid": "get_syslog_maximum_bgp_down_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#303"}}, "get_syslog_maximum_ospf_down_time": {"iosxe": {"module_name": "syslog.get", "doc": " Get maximum OSPF down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from Syslog server\n            server ('str'): Syslog server address\n        Returns:\n            Integer: OSPF down time in seconds\n            None\n        Raises:\n            None\n    ", "uid": "get_syslog_maximum_ospf_down_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#12"}}, "get_syslog_message_time": {"iosxe": {"module_name": "syslog.get", "doc": " Get message time\n        Args:\n            message ('str'): Line from show logging command\n            regex ('str'): Regex to extract time from line\n        Returns:\n            datetime: Time extracted from message\n            None\n        Raises:\n            None\n    ", "uid": "get_syslog_message_time", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#47"}}, "is_interface_igp_sync_ospf_enabled": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show ip ospf mpls ldp interface'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf      ('str')        : vrf name\n            address_family ('str')  : Interface address family (ipv4 or ipv6)\n            instance ('str')        : Instance number\n            area_address ('str')    : Area address\n            device                  : Device to be executed command\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Raises:\n            Exception\n\n        Returns\n            None\n\n    ", "uid": "is_interface_igp_sync_ospf_enabled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#341"}}, "is_ospf_neighbor_established_on_interface": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify OSPF is established on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): Maximum wait time\n            check_interval (`int`): Check interval\n\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "is_ospf_neighbor_established_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#193"}}, "is_ospf_neighbor_state_changed_log": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify ospf interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ", "uid": "is_ospf_neighbor_state_changed_log", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#225"}}, "is_ospf_shutdown": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies ospf is shutdown by verifying there are\n        no neighbors\n\n        Args:\n            device('obj'): device to use\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            interface ('str'): Interface name\n        Returns:\n            True\n            False\n    ", "uid": "is_ospf_shutdown", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#243"}}, "is_ospf_tilfa_enabled_in_sr": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify if TI-LFA is enabled in SR\n\n    Args:\n        device ('str'): Device object\n        interface ('str'): Interface name\n        process_id ('int'): Process id\n        area ('str'): Ospf area\n        neighbor_address ('str'): Neighbor address\n        max_time (int): Maximum wait time in seconds checking an ouput\n        check_interval (int): Wait time between iterations when looping\n        output ('dict'): Parsed output of command 'show ip ospf segment-routing protected-adjacencies'\n    Raises:\n        None\n    Returns:\n        True/False\n    ", "uid": "is_ospf_tilfa_enabled_in_sr", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#952"}}, "is_type_10_opaque_area_link_states_originated": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if Type 10 opaque area link states are originated\n        from command 'show ip ospf database opaque-area self-originate'\n\n        Args:\n            device (`obj`): Device to be executed command\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ", "uid": "is_type_10_opaque_area_link_states_originated", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#662"}}, "verify_opaque_type_7_prefix_and_flags": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ", "uid": "verify_opaque_type_7_prefix_and_flags", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#727"}}, "verify_ospf_database_contains_sid_neighbor_address_pairs": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies the ospf database contains the sid and neighbor address pairs provided\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Ospf router id\n            pairs ('dict'): Get from 'get_ospf_sr_adj_sid_and_neighbor_address'\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_ospf_database_contains_sid_neighbor_address_pairs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1449"}}, "verify_ospf_database_flag": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify ospf database flag does (not) have expected value\n\n        Args:\n            device (`obj`): Device object\n            lsa_id (`str`): Link State ID\n            expected_flag (`str`): Expected flag value\n            has_flag (`bool`): True if expect to contain flag\n                               False if expect not to contain flag\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_ospf_database_flag", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#25"}}, "verify_ospf_in_state": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies ospf process is enabled by checking if neighbors exist.\n        If a list of neighbors is passed it will also verify is those neighbors\n        have reached state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): If specified, function will verify the neighbors\n                               are listed.\n            state('str'): If specified, function will verify the neighbors are in\n                          state.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_ospf_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#277"}}, "verify_ospf_max_metric_configuration": {"iosxe": {"module_name": "ospf.verify", "doc": "Verify OSPF max-metric configuration\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process ID\n            metric_value (`int`): Metric value to be configured\n            expected_state (`str`): State to check\n            max_time (int): Maximum wait time for the trigger,\n                             in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result(`bool`): verify result\n            state\n    ", "uid": "verify_ospf_max_metric_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#91"}}, "verify_ospf_neighbor_address_in_state": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies that an ospf neighbor using the provided address is in a specific state\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            state ('str'): State to verify the interfaces are in\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_ospf_neighbor_address_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1389"}}, "verify_ospf_neighbor_addresses_are_not_listed": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies that an ospf neighbor using the provided address is not listed\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_ospf_neighbor_addresses_are_not_listed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1420"}}, "verify_ospf_neighbor_state": {"iosxe": {"module_name": "ospf.verify", "doc": "Verify OSPF neighbor is state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State to check for neighbor\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False        \n    ", "uid": "verify_ospf_neighbor_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#152"}}, "verify_ospf_segment_routing_gb_srgb_base_and_range": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies segment routing gb SRGB Base value\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Router entry to look under\n            expected_srgb_base ('int'): Expected value for SRGB Base\n            expected_srgb_base ('int'): Expected value for SRGB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ", "uid": "verify_ospf_segment_routing_gb_srgb_base_and_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1141"}}, "verify_ospf_segment_routing_lb_srlb_base_and_range": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies segment routing lb SRLB Base value\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            router_id ('str'): Router entry to look under\n            expected_srlb_base ('int'): Expected value for SRLB Base\n            expected_srlb_range ('int'): Expected value for SRLB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ", "uid": "verify_ospf_segment_routing_lb_srlb_base_and_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1198"}}, "verify_ospf_sid_database_prefixes_advertised": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies prefixes advertised by advertising_router are only allowed_prefixes\n\n        Args:\n            device ('obj'): Device to execute command on\n            advertising_router ('str'): Advertising router id\n            allowed_prefixes ('list'): Prefixes allowed to be advertised.\n                                       Can be subset of full prefix.\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_ospf_sid_database_prefixes_advertised", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#406"}}, "verify_ospf_sr_label_preference": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify SR label preference for a process id\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Process if\n            expected_preference ('bool'): Sr label preference that is expected\n        Returns:\n            True/False\n        Raises:\n            None\n    ", "uid": "verify_ospf_sr_label_preference", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1088"}}, "verify_ospf_tilfa_in_state_in_ospf": {"iosxe": {"module_name": "ospf.verify", "doc": " Verify if TI-LFA is enabled in OSPF\n\n        Args:\n            device ('str'): Device object\n            interface ('str'): Interface name\n            process_id ('int'): Process id\n            max_time (int): Maximum wait time in seconds checking an ouput\n            check_interval (int): Wait time between iterations when looping\n\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ", "uid": "verify_ospf_tilfa_in_state_in_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#876"}}, "verify_sid_in_ospf": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            sid (`int`): SID value\n            code (`str`): Check for codes in output\n                ex.) code = 'L'\n            ip_address (`str`): IP address to check in output\n            avoid_codes (`list`): List of codes to avoid\n                ex.)\n                    avoid_codes = ['L', 'C']\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            output ('list'): Pass output as reference - modifies the calling output\n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_sid_in_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#498"}}, "verify_sid_in_ospf_pairs": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if SID is found in ospf pairs\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            pairs = [{'sid': 10, 'prefix':'169.0.0.1/32', 'codes': 'M'}, {...}]\n\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_sid_in_ospf_pairs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#1264"}}, "verify_sid_is_advertised_in_ospf": {"iosxe": {"module_name": "ospf.verify", "doc": " Verifies if SID is advertised in ospf\n        from command 'show ip ospf database opaque-area adv-router {router_id}'\n\n        Args:\n            device (`obj`): Device to be executed command\n            router_id (`str`): Router ID\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ", "uid": "verify_sid_is_advertised_in_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#798"}}, "configure_no_shut_ospf": {"iosxe": {"module_name": "ospf.configure", "doc": " Configure no shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_no_shut_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#82"}}, "configure_ospf_cost": {"iosxe": {"module_name": "ospf.configure", "doc": "configure ospf cost\n\n        Args:\n            device (`obj`): Device object\n            ospf_cost (`int`): Ospf cost value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ospf_cost", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#245"}}, "configure_ospf_max_metric_router_lsa_on_startup": {"iosxe": {"module_name": "ospf.configure", "doc": "Configure max-metric router-lsa on start-up\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            metric_value (`int`): Metric value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ospf_max_metric_router_lsa_on_startup", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#22"}}, "configure_ospf_networks": {"iosxe": {"module_name": "ospf.configure", "doc": " Configures ospf on networks\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            ip_address ('list'): List of ip_address' to configure\n            netmask ('str'): Netmask to use\n            area ('str'): Area to configure under\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_ospf_networks", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#275"}}, "configure_shut_ospf": {"iosxe": {"module_name": "ospf.configure", "doc": " Configure shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_shut_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#54"}}, "remove_ospf_max_metric_configuration": {"iosxe": {"module_name": "ospf.configure", "doc": " Remove max-metric from running-config under ospf\n\n        Args:\n            device (`obj`): Device object \n            ospf_process_id (`str`): Router OSPF id\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_ospf_max_metric_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#112"}}, "get_ospf_area_of_interface": {"iosxe": {"module_name": "ospf.get", "doc": " Get area value of an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            vrf ('str'): VRF name\n            process_id ('str'): Process id\n            address_family ('str'): Address family\n        Returns:\n            area ('str'): If area found\n            None: If area not found\n        Raises:\n            ValueError: Command found more than one area\n    ", "uid": "get_ospf_area_of_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#181"}}, "get_ospf_global_block_range": {"iosxe": {"module_name": "ospf.get", "doc": " Get global block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Global range minimum\n                int: Global range maximum\n            )\n        Raises:\n            None\n    ", "uid": "get_ospf_global_block_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#569"}}, "get_ospf_interface_affinity_bits": {"iosxe": {"module_name": "ospf.get", "doc": " Get affinity bits value of an ospf interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            bits ('str'): Affinity bits\n    ", "uid": "get_ospf_interface_affinity_bits", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#826"}}, "get_ospf_interfaces": {"iosxe": {"module_name": "ospf.get", "doc": " Retrieve interface for ospf using BGP AS number\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n\n        Returns:\n            List of interfaces\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_ospf_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#491"}}, "get_ospf_local_block_range": {"iosxe": {"module_name": "ospf.get", "doc": " Get local block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Local range minimum\n                int: Local range maximum\n            )\n        Raises:\n            None\n    ", "uid": "get_ospf_local_block_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#609"}}, "get_ospf_neighbor_address_in_state": {"iosxe": {"module_name": "ospf.get", "doc": " Gets the ospf neighbors address' in state\n\n        Args:\n            device ('obj'): Device to use\n            state ('str'): full/sub-string of the state you want\n                           search for\n\n        Returns:\n            ('list'): of ospf neighbor address' in state\n\n        Raises:\n            N/A\n    ", "uid": "get_ospf_neighbor_address_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#763"}}, "get_ospf_neighbors": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf neighbor ip_addresses - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ", "uid": "get_ospf_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#382"}}, "get_ospf_neighbors_in_state": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n            state ('str'): full/sub-string of the state you want \n                           search for\n            in_state ('bool'): Check if state is in state provided\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_ospf_neighbors_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#290"}}, "get_ospf_neighbors_not_in_state": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            state ('str'): full/sub-string of the state you want \n                           search against\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ", "uid": "get_ospf_neighbors_not_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#363"}}, "get_ospf_neighbors_using_interface": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf neighbor ip_addresses that are under the specified interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n\n        Returns:\n            list of ospf neighbor ip_addresses\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_ospf_neighbors_using_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#400"}}, "get_ospf_process_id_and_area": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf process id and area\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            address_family (`str`): Address family name\n\n        Returns:\n            None if error occured\n            tuple: ospf process number and area\n                ex.) (1234, ['0.0.0.4', '0.0.0.8'])\n                First element that is 1234 is process number\n                Second element that is ['0.0.0.4', '0.0.0.8'] is list of areas\n        Raises:\n            None\n    ", "uid": "get_ospf_process_id_and_area", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#521"}}, "get_ospf_process_number": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf process number\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            output ('dict'): Output from parser otherwise will get from device\n\n        Returns:\n            None if error occured\n            str: ospf process number\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_ospf_process_number", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#244"}}, "get_ospf_router_self_originate_metric": {"iosxe": {"module_name": "ospf.get", "doc": " Get the OSPF advertised metric value\n\n        Args:\n            device ('obj'): Device object\n            vrf (`str`): Vrf value - Default\n            ospf_process_id (`int`): OSPF process ID\n\n        Returns:\n            Dictionary for metric\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n    ", "uid": "get_ospf_router_self_originate_metric", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#32"}}, "get_ospf_segment_routing_gb_srgb_base_and_range": {"iosxe": {"module_name": "ospf.get", "doc": " Gets 'SRGB Base' and 'SRGB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('int'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRGB Base value, ('dict'): Output from parser)\n            if cannot filter due to lack of arguments:\n                ([{key:value},{key:value}], ('dict'): Output from parser)\n\n        Raises:\n            None\n    ", "uid": "get_ospf_segment_routing_gb_srgb_base_and_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#706"}}, "get_ospf_segment_routing_lb_srlb_base_and_range": {"iosxe": {"module_name": "ospf.get", "doc": " Gets 'SRLB Base' and 'SRLB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRLB Base value, ('dict'): Output from parser)\n\n        Raises:\n            None\n    ", "uid": "get_ospf_segment_routing_lb_srlb_base_and_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#649"}}, "get_ospf_session_count": {"iosxe": {"module_name": "ospf.get", "doc": " Get ospf seesion count\n\n        Args:\n            device(`str`): Device str\n        \n        Returns:\n            integer: ospf session count\n        \n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_ospf_session_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#464"}}, "get_ospf_sr_adj_sid_and_neighbor_address": {"iosxe": {"module_name": "ospf.get", "doc": " Gets adjacency sids and corresponding neighbor address.\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            neighbor_addresses ('list'): If provided, function will only return adj-sid/neighbor_address\n                                         pairs that exist in the list\n\n        Returns:\n            {(192.168.0.1, 123), (192.168.0.2, 231), ...}\n    ", "uid": "get_ospf_sr_adj_sid_and_neighbor_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#794"}}, "get_router_ospf_section_running_config": {"iosxe": {"module_name": "ospf.get", "doc": " Get router OSPF section from running-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ", "uid": "get_router_ospf_section_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#430"}}, "get_router_ospf_section_startup_config": {"iosxe": {"module_name": "ospf.get", "doc": " Get router OSPF section from startup-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ", "uid": "get_router_ospf_section_startup_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#447"}}, "configure_prefix_list_prefix_list": {"iosxe": {"module_name": "prefix_list.configure", "doc": " Configures prefix-list on device\n\n        Args:\n            device('obj'): device to configure on\n            prefix_list('list'): prefix list which contains dictionary\n                dictionary contains following 3 keys:\n                    prefix_list ('str'): prefix list value\n                    seq ('int'): sequence number\n                    route ('str'): IP address\n                ex.)\n                   [ {\n                        'prefix_list': 1,\n                        'seq': 5,\n                        'route': '172.16.0.0/24'\n                    },\n                    {\n                        'prefix_list': 2,\n                        'seq': 5,\n                        'route': '172.16.1.0/24'\n                    },\n                    {\n                        'direction': 'in',\n                        'permit': 'deny',\n                        'route': '10.94.12.1',\n                        'comparison_operator': '<',\n                        'comparison_value': 36\n                    } \n                    ]\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_prefix_list_prefix_list", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#16"}}, "configure_community_list_community_list_permit": {"iosxe": {"module_name": "community_list.configure", "doc": " Configure community list permit\n\n        Args:\n            device ('obj'): Device object\n            community_list('list'): community list which contains dictionary\n                dictionary contains following 3 keys:\n                    seq ('int'): sequence number\n                    permit ('str'): permit value\n                    community ('str'): community value - Optional\n                ex.)\n                    [ \n                        {\n                            'seq': 1,\n                            'permit': 'deny',\n                            'community': 62000:1\n                        },\n                        {   \n                            'seq': 1,\n                            'permit': 'permit'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'deny',\n                            'community': '62000:2'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'permit'\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_community_list_community_list_permit", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/community_list/configure.py#15"}}, "is_snmp_message_received": {"iosxe": {"module_name": "snmp.verify", "doc": " Verify if a message was received in snmp server\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_snmp_message_received", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#131"}}, "verify_cli_and_snmp_cpu_memory": {"iosxe": {"module_name": "snmp.verify", "doc": " Verify CPU and Memory usage information from \n        CLI and SNMP are equivalent\n\n        Args:\n            device (`obj`): Device object\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n            load_tolerance (`int`): Tolerance for load information\n            memory_tolerance (`int`): Tolerance for memory information\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ", "uid": "verify_cli_and_snmp_cpu_memory", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#15"}}, "get_snmp_cli_dict": {"iosxe": {"module_name": "snmp.get", "doc": " Get CPU and memory usage information from CLI\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n            out (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                        \"load_average\": {\n                            \"status\": \"healthy\",\n                            \"1_min\": 0.07,\n                            \"5_min\": 0.02,\n                            \"15_min\": 0.0\n                        },\n                        \"memory\": {\n                            \"status\": \"healthy\",\n                            \"total\": 964676,\n                            \"used\": 575896,\n                            \"used_percentage\": 60,\n                            \"free\": 388780,\n                            \"free_percentage\": 40,\n                            \"committed\": 869972,\n                            \"committed_percentage\": 90\n                        },\n                        \"cpu\": {\n                            \"0\": {\n                                \"user\": 3.4,\n                                \"system\": 0.8,\n                                \"nice_process\": 0.0,\n                                \"idle\": 95.69,\n                                \"irq\": 0.0,\n                                \"sirq\": 0.1,\n                                \"waiting\": 0.0\n                            }\n                        }}}\n        Raises:\n            None\n    ", "uid": "get_snmp_cli_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#159"}}, "get_snmp_dict": {"iosxe": {"module_name": "snmp.get", "doc": " Get CPU and memory usage information from SNMP device\n\n        Args:\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n        Returns:\n            snmp_dict (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                     \"used\": 575640,\n                     \"free\": 389036,\n                     \"1_min\": 3,\n                     \"5_min\": 4,\n                     \"15_min\": 0,\n                     \"committed\": 869368}}\n    ", "uid": "get_snmp_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#105"}}, "get_snmp_id_slot_map": {"iosxe": {"module_name": "snmp.get", "doc": " Get id-slot mapping from SNMP server\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oids (`list`): Oid codes\n            version (`str`): SNMP version\n        Returns:\n            id_slot_map (`dict`): Id slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n        Raises:\n            None\n    ", "uid": "get_snmp_id_slot_map", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#49"}}, "get_snmp_snmpwalk": {"iosxe": {"module_name": "snmp.get", "doc": " Get snmpwalk output from SNMP device\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`): SNMP version\n            option (`str`): Optional command\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ", "uid": "get_snmp_snmpwalk", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#13"}}, "verify_ip_and_sid_in_segment_routing": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies if IP address and SID is present in Segment Routing\n        from command 'show segment-routing mpls connected-prefix-sid-map local <address_family>' or\n        from command 'show segment-routing mpls connected-prefix-sid-map <address_family>'\n        Args:\n            device (`obj`): Device to be executed command\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0'\n            address_family (`str`): Address family\n            local (`bool`): Flag to check command with local\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_ip_and_sid_in_segment_routing", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#369"}}, "verify_ip_and_sid_in_segment_routing_mapping_server": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies if IP address and SID is present in Segment Routing mapping server\n        from show segment-routing mpls mapping-server {address_family}'\n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0' \n            mapping_server (`str`): mapping server to check\n            ex.)\n                mapping_server = 'PREFIX_SID_EXPORT_MAP'   or\n                mapping_server = 'PREFIX_SID_REMOTE_EXPORT_MAP'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_ip_and_sid_in_segment_routing_mapping_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#584"}}, "verify_segment_routing_dynamic_metric_type": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verify segment-routing metric type under dynamic path with active state\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_type (`str`): Expected metric type\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ", "uid": "verify_segment_routing_dynamic_metric_type", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#242"}}, "verify_segment_routing_lb_range": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies the segment routing lb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ", "uid": "verify_segment_routing_lb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#480"}}, "verify_segment_routing_policy_attributes": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verify segment-routing policy attributes is as expected\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_bsid (`int`): Expected Binding SID\n            expected_mode (`str`): Expected allocation mode\n            expected_state (`str`): Expected binding state\n            policy_dict (`dict`): Policy dict from parser output \n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n            sid (`int`): Binding sid\n    ", "uid": "verify_segment_routing_policy_attributes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#19"}}, "verify_segment_routing_policy_hops": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verify segment-routing policy hops with order and extract labels\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            segment_list (`list`): Segment list to verify\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n            path_type (`int`): Tath Type, default: explicit\n        Returns\n            result (`bool`): Verified result\n            labels (`list`): Hops labels\n    ", "uid": "verify_segment_routing_policy_hops", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#154"}}, "verify_segment_routing_policy_state": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verify segment-routing policy state is as expected (Admin/Operational)\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name, if not specified will verify all\n            expected_admin (`str`): Expected admin state\n            expected_oper (`str`): Expected operational state\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ", "uid": "verify_segment_routing_policy_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#95"}}, "verify_segment_routing_traffic_eng_policies": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies configured traffic_eng policies have expected configurations\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            expected_admin_status ('str'): Expected admin status\n            expected_oper_status ('str'): Expected operational status\n            expected_metric_type ('str'): Expected metric type\n            expected_path_accumulated_metric ('int'): Expected path accumulated metric\n            expected_path_status ('str'): Expected path status\n            expected_affinity_type ('str'): Expected affinity type\n            expected_affinities ('list'): Expected affinities\n            expected_preference ('int'): Expected preference path \n            max_time ('int'): Maximum amount of time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ", "uid": "verify_segment_routing_traffic_eng_policies", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#681"}}, "verify_sid_in_segment_routing": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies if SID is found in segment-routing\n        from command 'show segment-routing mpls connected-prefix-sid-map ipv4' or\n        from command 'show segment-routing mpls connected-prefix-sid-map local ipv4'\n        \n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family name\n            local (`bool`): Flag to check command with local\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_sid_in_segment_routing", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#294"}}, "verify_status_of_segment_routing": {"iosxe": {"module_name": "segment_routing.verify", "doc": " Verifies if state matches expected_state state in segment-routing\n        from command 'show segment-routing mpls state'\n\n        Args:\n            device (`obj`): Device to be executed command\n            state (`str`): Expected state\n        Raises:\n            None\n        Returns\n            True/False\n\n    ", "uid": "verify_status_of_segment_routing", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#343"}}, "get_segment_routing_accumulated_path_metric": {"iosxe": {"module_name": "segment_routing.get", "doc": " Get accumulated path metric for a preference path\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            preference ('int'): Preference path\n\n        Returns:\n            accumulated_metric (None, 'int'): Accumulated path metric\n\n        Raises:\n            N/A\n    ", "uid": "get_segment_routing_accumulated_path_metric", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#213"}}, "get_segment_routing_gb_range": {"iosxe": {"module_name": "segment_routing.get", "doc": " Gets segement-routing global block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            None\n    ", "uid": "get_segment_routing_gb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#194"}}, "get_segment_routing_lb_range": {"iosxe": {"module_name": "segment_routing.get", "doc": " Gets segement-routing local block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            N/A\n    ", "uid": "get_segment_routing_lb_range", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#174"}}, "get_segment_routing_policy_active_path_hop_labels": {"iosxe": {"module_name": "segment_routing.get", "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            policy ('str'): Policy name\n            policy_dict ('dict'): Policy dict from parser output\n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n        Returns:\n            labels ('list'): Hop labels\n    ", "uid": "get_segment_routing_policy_active_path_hop_labels", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#22"}}, "get_segment_routing_policy_in_state": {"iosxe": {"module_name": "segment_routing.get", "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            expected_admin ('str'): Expected admin state\n            expected_oper ('str'): Expected operational state\n        Returns:\n            policy ('str'): Policy name\n    ", "uid": "get_segment_routing_policy_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#102"}}, "get_segment_routing_sid_map_configuration": {"iosxe": {"module_name": "segment_routing.get", "doc": " Get Segment routing SID map configuration\n\n        Args:\n            device ('str'): Device str\n            address_family ('str'): Address family\n        Returns:\n            Dictionary with ip address as key and sid as value\n            ex.)\n                {\n                    '192.168.1.1': '1',\n                    '192.168.1.2': '2'\n                }\n    ", "uid": "get_segment_routing_sid_map_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#134"}}, "is_routing_repair_path_in_route_database": {"iosxe": {"module_name": "routing.verify", "doc": " Verify if 'repair path' is present in route database\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ", "uid": "is_routing_repair_path_in_route_database", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#653"}}, "is_routing_route_targets_present": {"iosxe": {"module_name": "routing.verify", "doc": " Verify route target is present\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): address family to check\n            routes ('list'): list of routes to compare\n                ex.) routes = ['192.168.1.1', '192.168.1.2']\n            ignore_routes ('list'): list of routes to ignore with type\n                ex.) ignore_routes = ['L', 'B', 'C']\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_routing_route_targets_present", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#612"}}, "verify_rib_fib_lfib_consistency": {"iosxe": {"module_name": "routing.verify", "doc": " Verify the outgoing label for route are the same in:\n        - show ip route <route>\n        - show ip cef <route>\n        - show mpls forwarding-table <route>\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): Route or ipn\n            none_pattern (`list`): None label pattern\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ", "uid": "verify_rib_fib_lfib_consistency", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#98"}}, "verify_routing_ip_bgp_neighbors_routes_exists": {"iosxe": {"module_name": "routing.verify", "doc": " Verify if the initial_route provided exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            expected_result ('bool'): expected result to check\n        Returns:\n            True / False\n        Raises:\n            None\n    ", "uid": "verify_routing_ip_bgp_neighbors_routes_exists", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#497"}}, "verify_routing_ip_routes": {"iosxe": {"module_name": "routing.verify", "doc": " Verify ip route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output provided as argument\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ", "uid": "verify_routing_ip_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#352"}}, "verify_routing_local_and_connected_route": {"iosxe": {"module_name": "routing.verify", "doc": " Verify there is local and connected route registered for the vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n        Returns:\n            (`dict`): Interface dict contain ip route info\n            False\n        Raises:\n            None\n     ", "uid": "verify_routing_local_and_connected_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#293"}}, "verify_routing_neighbors_advertised_routes_exists": {"iosxe": {"module_name": "routing.verify", "doc": " Verify if neighbors advertised routes exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            output ('list'): list of neighbors advertised routes (get_bgp_neighbors_advertised_routes)\n        Returns:\n            True\n            False\n    ", "uid": "verify_routing_neighbors_advertised_routes_exists", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#555"}}, "verify_routing_route_ip_on_interface": {"iosxe": {"module_name": "routing.verify", "doc": " Verify routes match the configured IP address in running config\n\n        Args:\n            device (`obj`): Device object\n            interface_dict (`dict`): Interface dict contain ip route info. Get from libs/routing/verify.py::verify_routing_local_and_connected_route\n        Returns:\n            True / False\n        Raises:\n            None\n    ", "uid": "verify_routing_route_ip_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#326"}}, "verify_routing_static_routes": {"iosxe": {"module_name": "routing.verify", "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output from 'show ip route static'\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ", "uid": "verify_routing_static_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#425"}}, "configure_routing_ip_route": {"iosxe": {"module_name": "routing.configure", "doc": " Configure ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_routing_ip_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#16"}}, "configure_routing_static_route": {"iosxe": {"module_name": "routing.configure", "doc": " Configure static ip route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            destination_address('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_routing_static_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#118"}}, "enable_routing_debug_static_route": {"iosxe": {"module_name": "routing.configure", "doc": " Enables debug route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): route\n            mask (str): mask the ip address\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "enable_routing_debug_static_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#163"}}, "remove_routing_ip_route": {"iosxe": {"module_name": "routing.configure", "doc": " Remove ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_routing_ip_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#67"}}, "get_routes": {"iosxe": {"module_name": "routing.get", "doc": " Retrieve all routes in specific protocal - show ip route\n\n        Args:\n            device ('obj'): Device object\n            protocol_codes ('str'): Protocol codes\n                If not provided, it will get all protocal routes\n        Returns:\n            routes ('list'): List of routes\n    ", "uid": "get_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#34"}}, "get_routing_mpls_label": {"iosxe": {"module_name": "routing.get", "doc": " Get registered MPLS label to prefix \n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            output ('dict'): Optional. Parsed output of command 'show ip route {prefix}'\n        Returns:\n            int: registered MPLS label\n        Raises:\n            None\n\n    ", "uid": "get_routing_mpls_label", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#267"}}, "get_routing_ospf_routes": {"iosxe": {"module_name": "routing.get", "doc": " Retrieve all ospf routes - show ip route\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            routes ('list'): List of ospf routes\n    ", "uid": "get_routing_ospf_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#20"}}, "get_routing_outgoing_interface": {"iosxe": {"module_name": "routing.get", "doc": " Execute 'show ip cef <address>' and retrieve the outgoing interface\n\n        Args:\n            device (`obj`): Device object\n            ip_address ('str'): ip_address\n            vrf ('str'): vrf to search under\n            address_family ('str'): address_family to search under\n\n        Returns:\n            ('list'): [interface name, ip_address]\n\n        Raises:\n            SchemaEmptyParserError\n\n    ", "uid": "get_routing_outgoing_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#74"}}, "get_routing_repair_path_information": {"iosxe": {"module_name": "routing.get", "doc": " Get 'repair path' information under route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n        Returns:\n            tuple : (\n                next_hop ('str'): Next hop ip\n                outgoing_interface ('str'): Outgoing interface name\n            )            \n        Raises:\n            None\n    ", "uid": "get_routing_repair_path_information", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#227"}}, "get_routing_route_count": {"iosxe": {"module_name": "routing.get", "doc": " Get route count for all vrfs\n\n        Args:\n            device(`str`): Device str\n            vrf ('str'): VRF name\n\n        Returns:\n            int: route count\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_routing_route_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#120"}}, "get_routing_route_count_all_vrf": {"iosxe": {"module_name": "routing.get", "doc": " Get route count for every VRF\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            Integer: Route count\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_routing_route_count_all_vrf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#155"}}, "get_routing_routes": {"iosxe": {"module_name": "bgp.get", "doc": " Get advertised neighbors from route\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            route ('str'): route value\n        Returns:\n            Dictionary of advertised prefixes\n        Raises:\n            None\n\n\n    ", "uid": "get_routing_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#467"}}, "configure_control_plane_control_plane_policy": {"iosxe": {"module_name": "control_plane.configure", "doc": " Configure control plane policy\n\n        Args:\n            device ('obj'): Device object\n            config('list'): List of commands to configure\n                ex.)\n                    [\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': False\n                        },\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': True\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring control plane policy\n\n    ", "uid": "configure_control_plane_control_plane_policy", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/control_plane/configure.py#11"}}, "verify_ip_precedence_ip_precedence": {"iosxe": {"module_name": "ip_precedence.verify", "doc": "Verify that all packets have mapped IP precedence value to EXP\n\n        Args:\n            packets ('obj'): Packets to analyze\n            exclude_src_ip ('str'): Source ip to exclude\n\n        Returns:\n            True / False\n            \n        Raises:\n            None\n    ", "uid": "verify_ip_precedence_ip_precedence", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ip_precedence/verify.py#9"}}, "is_routing_repair_path_in_cef": {"iosxe": {"module_name": "cef.verify", "doc": " Verify 'repair path' is presente in express forwarding\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds retrieving and checking output\n            check_interval ('int')\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ", "uid": "is_routing_repair_path_in_cef", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#9"}}, "get_cef_internal_repair_next_hop_ip_address": {"iosxe": {"module_name": "cef.get", "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ", "uid": "get_cef_internal_repair_next_hop_ip_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#124"}}, "get_cef_next_hop_ip_address": {"iosxe": {"module_name": "cef.get", "doc": " Get next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address \n        Raises:\n            None\n    ", "uid": "get_cef_next_hop_ip_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#78"}}, "get_cef_registred_label_to_prefix": {"iosxe": {"module_name": "cef.get", "doc": " Get registered label to prefix in CEF\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            output ('dict'): Optional. Parsed output from command 'show ip cef {prefix} detail'\n            vrf ('str'): Optional. VRF name. Default: 'default'\n            address_family ('str'): Optional. Family name. Default: 'ipv4'\n            interface ('str'): Optional. Interface name\n            nexthop_address ('str'): Optional. Nexthop address\n        Returns:\n            int: Registered label\n        Raises:\n            ValueError: Found more than on registered label\n    ", "uid": "get_cef_registred_label_to_prefix", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#239"}}, "get_cef_repair_path_of_route": {"iosxe": {"module_name": "cef.get", "doc": " Get 'repair path' of route\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Return:\n            tuple: (\n                String: Repair path IP address,\n                String: Repair path Interface\n            )\n        Raises:\n            None\n    ", "uid": "get_cef_repair_path_of_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#11"}}, "change_hostname": {"iosxe": {"module_name": "utils", "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ", "uid": "change_hostname", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#277"}}, "clear_packet_buffer": {"iosxe": {"module_name": "utils", "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ", "uid": "clear_packet_buffer", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#210"}}, "delete_local_file": {"iosxe": {"module_name": "utils", "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ", "uid": "delete_local_file", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#31"}}, "export_packet_capture": {"iosxe": {"module_name": "utils", "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ", "uid": "export_packet_capture", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#163"}}, "get_config_from_file": {"iosxe": {"module_name": "utils", "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration \n    ", "uid": "get_config_from_file", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#50"}}, "ping_interface_success_rate": {"iosxe": {"module_name": "utils", "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ", "uid": "ping_interface_success_rate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#236"}}, "save_running_config_configuration": {"iosxe": {"module_name": "utils", "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ", "uid": "save_running_config_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#299"}}, "set_clock": {"iosxe": {"module_name": "utils", "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ", "uid": "set_clock", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#315"}}, "start_packet_capture": {"iosxe": {"module_name": "utils", "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ", "uid": "start_packet_capture", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#79"}}, "stop_packet_capture": {"iosxe": {"module_name": "utils", "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ", "uid": "stop_packet_capture", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#135"}}, "verify_policy_map_packet_count_match": {"iosxe": {"module_name": "policy_map.verify", "doc": " Compare the packets' count for the provided traffic flows\n\n        Args:\n            flows_dict (`dict`): Dictionary of traffic flows\n            class_map_out_packets_dict (`dict`): Dictionary of retrieved traffic flows packets count\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_packet_count_match", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#210"}}, "verify_policy_map_packets_counting_up": {"iosxe": {"module_name": "policy_map.verify", "doc": "Verify packets are counting up\n\n        Args:\n            device (`obj`): Device object\n            packet_classes (`Dict`): list of packet classes\n                ex.)\n                    packet_classes: ['BGP_Class', 'OSPF_Class', 'LDP_Class']\n\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_packets_counting_up", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#427"}}, "verify_policy_map_policy_map_configuration": {"iosxe": {"module_name": "policy_map.verify", "doc": " Verify policy map configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`List`): List of interfaces\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_policy_map_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#172"}}, "verify_policy_map_policy_map_configuration_policy_map_with_operational": {"iosxe": {"module_name": "policy_map.verify", "doc": " Compare configuration policy map with operational \n\n        Args:\n            configurational_container (`dict`): Dictionary of configurational container\n            operational_container (`dict`): Dictionary of operational container\n            table (`obj`): Table object\n            spaces ('str'): Spaces in table field\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_policy_map_configuration_policy_map_with_operational", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#338"}}, "verify_policy_map_policy_map_configurational_operational_policy_map": {"iosxe": {"module_name": "policy_map.verify", "doc": "Verify configured policy map and operational state match\n\n        Args:\n            device (`obj`): Device object\n            configurational_out (`Dict`): Configurational status\n            interface (`str`): Interface name\n\n        Returns:\n            result(`bool`): Verify result\n            table(`obj`): Table result\n    ", "uid": "verify_policy_map_policy_map_configurational_operational_policy_map", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#21"}}, "verify_policy_map_row_added": {"iosxe": {"module_name": "policy_map.verify", "doc": "Add row to Table\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            parameter_value (`str`): Parameter value\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_row_added", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#137"}}, "verify_policy_map_values": {"iosxe": {"module_name": "policy_map.verify", "doc": "Verify running configuration values to operational one and add Table row\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            config_key (`str`): Configuration key to check\n            oper_key (`str`): Operational key to check\n\n        Returns:\n            True\n            False\n    ", "uid": "verify_policy_map_values", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#95"}}, "get_policy_map_class_maps": {"iosxe": {"module_name": "policy_map.get", "doc": " Get class map dictionary\n\n        Args:\n            device (`obj`): Device object\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n        Returns:\n            class map dictionary\n    ", "uid": "get_policy_map_class_maps", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#290"}}, "get_policy_map_configurational_policy_map": {"iosxe": {"module_name": "policy_map.get", "doc": " Get policy-map running configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces\n\n        Returns:\n            policy-map configurational dictionary\n    ", "uid": "get_policy_map_configurational_policy_map", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#60"}}, "get_policy_map_operational_policy_map_on_interface": {"iosxe": {"module_name": "policy_map.get", "doc": " Get operational policy-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            Device output parsed dictionary\n    ", "uid": "get_policy_map_operational_policy_map_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#123"}}, "get_policy_map_policy_map_ip_precedence": {"iosxe": {"module_name": "policy_map.get", "doc": " Gets policy-map ip precedence per stream\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            stream ip precedece ('dict')\n    ", "uid": "get_policy_map_policy_map_ip_precedence", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#202"}}, "get_policy_map_policy_map_packet_count": {"iosxe": {"module_name": "policy_map.get", "doc": " Get policy-map packet count\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            class_map_out_packets: Packet count\n\n        Raises:\n            KeyError\n    ", "uid": "get_policy_map_policy_map_packet_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#144"}}, "get_policy_map_running_policy_map": {"iosxe": {"module_name": "policy_map.get", "doc": " Get running policy-map configuration\n\n        Args:\n            device (`obj`): Device object\n            policy_map (`str`): Policy map name\n\n        Returns:\n            None\n\n        Raises:\n            SchemaUnsupportedKeyError\n    ", "uid": "get_policy_map_running_policy_map", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#25"}}, "verify_bfd_configuration": {"iosxe": {"module_name": "bfd.verify", "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface bfd is configured on\n            interval ('str'): interval to verify\n            state ('str'): state to verify\n            protocols ('list'): protocols to verify\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_bfd_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#14"}}, "configure_bfd_on_interface": {"iosxe": {"module_name": "bfd.configure", "doc": " Configures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            interval ('str'): interval\n            min_rx ('str'): min_rx\n            multiplier ('str'): multiplier\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ", "uid": "configure_bfd_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#12"}}, "disable_bfd_on_ospf": {"iosxe": {"module_name": "bfd.configure", "doc": " Disables bfd on ospf protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling bfd on ospf protocol\n    ", "uid": "disable_bfd_on_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#74"}}, "enable_bfd_on_ospf": {"iosxe": {"module_name": "bfd.configure", "doc": " Enabled bfd on ospf protocol on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on ospf protocol\n    ", "uid": "enable_bfd_on_ospf", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#52"}}, "enable_bfd_static_route": {"iosxe": {"module_name": "bfd.configure", "doc": " Enables bfd static route on device\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n            ip_address ('str'): ip address of destination\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling bfd static rout on device\n    ", "uid": "enable_bfd_static_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#96"}}, "copy_file_to_running_config": {"iosxe": {"module_name": "running_config.configure", "doc": " Restore config from local file using copy function\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ", "uid": "copy_file_to_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#43"}}, "remove_running_config": {"iosxe": {"module_name": "running_config.configure", "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ", "uid": "remove_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#107"}}, "remove_tacacs_server": {"iosxe": {"module_name": "running_config.configure", "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ", "uid": "remove_tacacs_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#133"}}, "restore_running_config": {"iosxe": {"module_name": "running_config.configure", "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ", "uid": "restore_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#75"}}, "save_running_config": {"iosxe": {"module_name": "running_config.configure", "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ", "uid": "save_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#22"}}, "get_config_commands_from_running_config": {"iosxe": {"module_name": "running_config.get", "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ", "uid": "get_config_commands_from_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#152"}}, "get_running_config": {"iosxe": {"module_name": "running_config.get", "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ", "uid": "get_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#115"}}, "get_running_config_section": {"iosxe": {"module_name": "running_config.get", "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ", "uid": "get_running_config_section", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#135"}}, "get_running_config_section_dict": {"iosxe": {"module_name": "running_config.get", "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ", "uid": "get_running_config_section_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#83"}}, "search_running_config": {"iosxe": {"module_name": "running_config.get", "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ", "uid": "search_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#16"}}, "get_startup_config_dict": {"iosxe": {"module_name": "startup_config.get", "doc": " Get section information from show startup-config\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ", "uid": "get_startup_config_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/startup_config/get.py#13"}}, "is_bgp_import_path_selection": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies that import path selection of type is in running\n        config\n\n        Args:\n            device('obj'): device to use\n            vrf('str'): vrf name\n            selection_type('str'): import path selection type to verify\n            max_time('int'): max time to wait\n            check_interval('int'): how often to check        \n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_bgp_import_path_selection", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#276"}}, "is_bgp_neighbors_enabled": {"iosxe": {"module_name": "bgp.verify", "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is enabled and in either Idle or Active\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_bgp_neighbors_enabled", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#882"}}, "is_bgp_neighbors_established": {"iosxe": {"module_name": "bgp.verify", "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is established\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_bgp_neighbors_established", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#910"}}, "is_bgp_neighbors_shutdown": {"iosxe": {"module_name": "bgp.verify", "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is shutdown\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_bgp_neighbors_shutdown", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#854"}}, "is_bgp_neighbors_state": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies BGP neighbor is in state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            state('regex str'): regex to match\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_bgp_neighbors_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#816"}}, "is_route_in_bgp_table": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if route is in BGP table\n        Args:\n            device ('obj')          : Device object\n            address_family('str')   : Address family to be used in show command\n            default_rd('str')       : Route distinguisher from VRF list\n            default_vrf('str')      : Default VRF name\n            routes_dict ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "is_route_in_bgp_table", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1490"}}, "is_router_bgp_configured_with_four_octet": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies that router bgp has been enabled with four\n        octet capability and is in the established state\n\n        Args:\n            device('obj'): device to check\n            vrf('vrf'): vrf to check under\n            neighbor_address('str'): neighbor address to match\n            max_time('int'): maximum time to wait\n            check_interval('int'): how often to check\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ", "uid": "is_router_bgp_configured_with_four_octet", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#228"}}, "verify_bgp_address_received": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies that address is recieved from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address ('str'): address to verify\n\n        Returns:\n            True/False\n        Raises:\n            None\n    ", "uid": "verify_bgp_address_received", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1541"}}, "verify_bgp_as_in_as_path": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if a route has an AS number in its AS path\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route to be verified\n            bgp_as ('str'): AS number to be verified in route AS path\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n            output ('str'): Parsed output of one of the following commands:\n                * 'show ip bgp {address_family} vrf {vrf}'\n                * 'show ip bgp {address_family}'\n                * 'show ip bgp'\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_bgp_as_in_as_path", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#993"}}, "verify_bgp_as_path_prepend": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if AS value is added at the beginning of the AS path on route\n        Args:\n            route_dict ('obj')      : Dict containing all routes on device\n            as_path_prepend ('int') : AS number to be checked on route\n            as_path ('int')         : AS path on route            \n            route ('str')           : Route beeing checked\n            steps ('obj')           : Context manager step\n        Returns:\n            None\n        \n        Raises:\n            pyATS Results\n    ", "uid": "verify_bgp_as_path_prepend", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#370"}}, "verify_bgp_config_operational_state_neighbors": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify that bgp running config matches operational state from:\n            'show ip bgp {address_family} vrf {vrf} neighbors'\n            'show ip bgp {address_family} all neighbors'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_neighbors ('dict'): Parsed output from: \n                'show ip bgp {address_family} vrf {vrf} neighbors'\n                'show ip bgp {address_family} all neighbors'\n            vrf ('str'): VRF name to be verified\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n    ", "uid": "verify_bgp_config_operational_state_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1115"}}, "verify_bgp_config_operational_state_summary": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify that bgp running config matches operational state from:\n\n            'show ip bgp {address_family} vrf {vrf} summary'\n            'show ip bgp {address_family} all summary'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_summary ('dict'): Parsed output from:\n                'show ip bgp {address_family} vrf {vrf} summary'\n                'show ip bgp {address_family} all summary'\n            vrf ('str'): VRF name\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n\n    ", "uid": "verify_bgp_config_operational_state_summary", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1239"}}, "verify_bgp_configuration_and_operation_state": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify bgp configuration is matched with operational state\n        - \"ipv4 vrf xxxx\" and \"vpnv4\" in running config are in \n          \"VPNv4 Unicast\" address family in bgp all summary\n        - \"l2vpn vpls\" in running config are in \n          \"L2VPN Vpls\" address family in bgp all summary\n        - BGP AS number is same as configured\n        - All configured neighbors exist and the status can be checked\n\n        Args:\n            device ('obj'): Device object\n            sr_dict(`dict`): Parsed output from libs.bgp.get.get_show_run_bgp_dict\n            sm_dict(`dict`): Parsed output of command 'show ip bgp all summary'\n        Returns:\n            result(`bool`): verified result\n            info(`str`): compared information\n        Raises:\n            None\n    ", "uid": "verify_bgp_configuration_and_operation_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#46"}}, "verify_bgp_last_reset": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify last reset is always greater than previous value\n\n        Args:\n            prev_list(`list`): list of previous last reset value\n            curr_list(`list`): list of current last reset value\n        Returns:\n            result(`bool`): verified result\n            table(`obj`): table to display\n        Raises:\n            None\n    ", "uid": "verify_bgp_last_reset", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#171"}}, "verify_bgp_peers_are_present": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if BGP peers are present\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary\n            bgp_peers ('dict'): Dictionary containing peer details - Neigbor and AS number\n                ex.)\n                    bgp_peers = {\n                        '192.168.1.1': 65532,\n                        '192.168.1.2': 65532,\n                    }\n        Returns:\n            True\n            False\n    ", "uid": "verify_bgp_peers_are_present", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1041"}}, "verify_bgp_rd_table": {"iosxe": {"module_name": "bgp.verify", "doc": "Verify BGP table on neighbors\n\n        Args:\n            device ('obj')             : Device object\n            address_family ('str')     : Address family to be used in show command\n            routes_list ('dict')       : Routes to be verified \n            vrf ('str')           : VRF value \n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ", "uid": "verify_bgp_rd_table", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#417"}}, "verify_bgp_route_is_advertised": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if a route is advertised for a VRF and Router Distinguisher\n\n        Args:\n            vrf('str')                  : VRF name to be verified\n            address_family('str')       : Address family \n            neighbor_address ('str')            : Neighbor interface address\n            default_rd('str')           : Route distinguisher from VRF list\n            default_vrf('str')          : VRF from VRF list\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n        Returns:\n            True\n            False\n        Raises:\n            Exception\n    ", "uid": "verify_bgp_route_is_advertised", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1362"}}, "verify_bgp_route_is_received": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if VRF and Router Distinguisher have at least one received route\n        Args:\n            device ('obj')              : Device object\n            address_family ('str')      : Address family to be used in show command\n            vrf ('str')                 : VRF name to be verified \n            neighbor_address ('str')   : Neighbor interface address\n            default_rd ('str')          : Route distinguisher from VRF list\n            default_vrf ('str')         : Default VRF name\n            address_family ('str')      : Address family\n            received_routes ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_bgp_route_is_received", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1432"}}, "verify_bgp_routes_from_neighbors": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if routes are advertised by a particular source\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            route ('str'): IP address\n            source_address ('str'): source address to check in output\n            rr_loopback ('list'): loopback address list to check in output for route reflactor device\n            ex.)\n                loopback1 = '192.168.36.40'\n                loopback2 = '192.168.36.41'\n                rr_loopback = [ loopback1, loopback2 ]\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_bgp_routes_from_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#938"}}, "verify_bgp_routes_have_community": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify routes have community or not\n\n        Args:\n            device ('str'): Device str\n            neighbor ('str'): neighbor address\n            community ('str'): community name to search\n            vrf ('str'): vrf name\n            rd_export ('str'): rd export value\n            check_not_match ('bool'): flag check community match or not\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_bgp_routes_have_community", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#723"}}, "verify_bgp_soo_on_route": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies soo exists on route \n\n        Args:\n            Required:\n                device('obj'): device to verify on\n                address_family('str'): address_family to verify under\n                route('str'): route to verify\n            \n            One or the other:\n                vrf('str'): verify using vrf\n                rd('str'): verify using rd\n\n            Optional:\n                timeout('obj'): timeout object to override default\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ", "uid": "verify_bgp_soo_on_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#316"}}, "verify_bgp_status_codes_exist": {"iosxe": {"module_name": "bgp.verify", "doc": " Verifies status exists in status_codes\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            route ('str'): route to check under\n            status_codes ('str'): status codes from parser\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            check_all ('bool'): wether or not to check all status_codes passed or atleast one\n\n        Returns:\n            codes ('str') or None\n        Raises:\n            None\n    ", "uid": "verify_bgp_status_codes_exist", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#1568"}}, "verify_bgp_syslog": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify syslog messages don't contain BGP-5-ADJCHANGE mnemonic\n\n        Args:\n            device(`obj`): device object\n        Returns:\n            result (`str`): verified result\n        Raises:\n            None\n    ", "uid": "verify_bgp_syslog", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#209"}}, "verify_bgp_table_uut": {"iosxe": {"module_name": "bgp.verify", "doc": "Verify BGP table on device under test\n\n        Args:                \n            device ('obj')             : Device object            \n            address_family ('str')     : Address family to be used in show command\n            vrf ('str')           : VRF value of neighbors\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            routes_list ('dict')       : Routes to be verified\n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ", "uid": "verify_bgp_table_uut", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#494"}}, "verify_capabilities_bgp_neighbor": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if capabilities of bgp neighbor matches expected capabilities\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            neighbor_address ('str')          : Address family to be searched under\n            expected_capabilities  ('list')   : List of expected capabilities\n            vrf_name ('str')                  : VRF name\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ", "uid": "verify_capabilities_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#575"}}, "verify_session_state_bgp_neighbor": {"iosxe": {"module_name": "bgp.verify", "doc": " Verify if session state matches expected state\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            address_families ('list')         : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n            neighbor_address ('str')          : Address family to be searched under\n            expected_session_state  ('str')   : List of expected state\n            vrf_name ('str')                  : VRF value\n            max_time ('int'): max time\n            check_interval ('int'): check interval\n        Returns: \n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_session_state_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#630"}}, "clear_bgp_neighbors_soft": {"iosxe": {"module_name": "bgp.clear", "doc": " Reset connection to a BGP neighbor or to all neighbors, diretion in or out\n        Args:\n            device ('obj') : Device object\n            direction ('str'): Direction type:\n                ex.)\n                    direction = \"in\"\n                    direction = \"out\"\n            neighbor (`str`): Neighbor address\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ", "uid": "clear_bgp_neighbors_soft", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#39"}}, "clear_ip_bgp_vrf_af_soft": {"iosxe": {"module_name": "bgp.clear", "doc": " BGP soft clear using vrf, address family and AS number\n\n        Args:\n            device ('obj'): device object\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            as_number ('int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ", "uid": "clear_ip_bgp_vrf_af_soft", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#12"}}, "configure_bgp_additional_paths": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure additional_paths on bgp router\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "configure_bgp_additional_paths", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#745"}}, "configure_bgp_address_advertisement": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure address advertisement on router bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            ip_address ('str'): ip address\n            mask ('str'): mask\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "configure_bgp_address_advertisement", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#804"}}, "configure_bgp_advertise_additional_paths": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures advertisement for additional paths\n\n        Args:\n            device ('obj'): device to configure\n            bgp_as ('str'): router bgp number\n            neighbor ('str'): neighbor to advertise to\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "configure_bgp_advertise_additional_paths", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#773"}}, "configure_bgp_import_path_selection": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures import path selection on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n            type('str'): type of selection to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ", "uid": "configure_bgp_import_path_selection", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#25"}}, "configure_bgp_neighbor": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures bgp neighbor on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_as('str'): neighbor_as to configure\n            neighbor_address('str'): address of neighbor\n            source_interface('str'): used to configure update-source on neighbor\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ", "uid": "configure_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#95"}}, "configure_bgp_neighbor_activate": {"iosxe": {"module_name": "bgp.configure", "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            steps('obj')               : Context manager steps\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ", "uid": "configure_bgp_neighbor_activate", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#424"}}, "configure_bgp_neighbor_as_override": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure AS override in VRF\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "configure_bgp_neighbor_as_override", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#709"}}, "configure_bgp_neighbor_remote_as": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "configure_bgp_neighbor_remote_as", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#650"}}, "configure_bgp_router_id": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            router_id('str'): router_id of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ", "uid": "configure_bgp_router_id", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#60"}}, "configure_bgp_soo_on_inbound_from_neighbor": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures extended community SoO on inbound from neighbor using soo_rt\n\n        Args:\n            device('obj'): device to execute on\n            soo_rt('str'): route to configure SoO with\n            bgp_as('str'): what router bgp to configure on\n            vrf('str'): what vrf to configure on\n            neighbor_address('str'): what neighbor to configure on\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ", "uid": "configure_bgp_soo_on_inbound_from_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#160"}}, "configure_maximum_prefix_to_bgp_neighbor": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure maximum prefix to router bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            maximum_prefix ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'maximum_prefix': maximum prefix number\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.6,\n                        'maximum_prefix': 5,\n                    }\n                ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: maximum_prefix is not a list\n\n    ", "uid": "configure_maximum_prefix_to_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#271"}}, "configure_no_shut_bgp_neighbors": {"iosxe": {"module_name": "bgp.configure", "doc": " Enables bgp neighbors if provided otherwise it enabled the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_id ('int'): router bgp_id to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors('list'): Libs with BGP neighbors\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n    ", "uid": "configure_no_shut_bgp_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#623"}}, "configure_prefix_list_prefix_list_to_bgp_neighbor": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure prefix list to bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            prefix_list ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'prefix_list': prefix,\n                    'direction': direction\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.4',\n                        'prefix_list': 'in'\n                        'direction': 'in'\n                    },\n                    {\n                        'neighbor': '192.168.1.5',\n                        'prefix_list': 'out'\n                        'direction': 'out'\n                    }\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: prefix_list is not a list\n    ", "uid": "configure_prefix_list_prefix_list_to_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#205"}}, "configure_route_map_route_map_to_bgp_neighbor": {"iosxe": {"module_name": "bgp.configure", "doc": " Configure route map to bgp neighbors\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            vrf_address_family ('str'): address family for vrf\n            route_map ('list'): route map list which contains dictionary\n                dictionary contains following 5 keys:\n                    neighbor ('str'): neighbor value\n                    route_map ('str'): route-map name\n                    direction ('str'): direction type\n            ex.)\n                [\n                    {\n                        'neighbor': '192.168.60.10',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.60.11',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.6.10',\n                        'route_map': 'community_test_in',\n                        'direction': 'in'\n                    },\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: route_map is not a list\n    ", "uid": "configure_route_map_route_map_to_bgp_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#329"}}, "configure_shut_bgp_neighbors": {"iosxe": {"module_name": "bgp.configure", "doc": " Configures shut/enable on bgp neighbors if provided otherwise the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_as ('int'): router bgp_as to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors ('list'): List of neighbors to shut/enable\n            noshut ('bool'): does the opposite of shut if True\n        Returns:        \n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n\n    ", "uid": "configure_shut_bgp_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#464"}}, "remove_bgp_configuration": {"iosxe": {"module_name": "bgp.configure", "doc": " Remove bgp configuration\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ", "uid": "remove_bgp_configuration", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#687"}}, "get_bgp_advertised_route_count": {"iosxe": {"module_name": "bgp.get", "doc": " Returns number of advertised routes under neighbor\n\n        Args:\n            device('obj'): device to use\n            neighbor ('str'): neighbor to search under\n            route ('str'): route to search for\n        Returns:\n            number of advertised routes ('int')\n        Raises:\n            None\n    ", "uid": "get_bgp_advertised_route_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1588"}}, "get_bgp_best_routes": {"iosxe": {"module_name": "bgp.get", "doc": " Get best routes to neighbor\n\n        Args:\n            device('obj): device to use\n            address_family('str'): address_family to search under\n            rd('str'): vrf route distinguisher\n            neighbor_address('str'): ip_address of neighbor to search under\n            vrf('str'): vrf to search under\n        Returns:\n            list of routes\n        Raises:\n            None\n\n    ", "uid": "get_bgp_best_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#595"}}, "get_bgp_current_as_path": {"iosxe": {"module_name": "bgp.get", "doc": " Learn current AS path from show command\n        Args:\n            device ('obj')         : Device object\n            vrf ('str')       : VRF name\n            address_family ('str') : Address family\n        Returns:\n            String: neighbor\n            String: AS path\n        Raises:\n            None\n    ", "uid": "get_bgp_current_as_path", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#700"}}, "get_bgp_external_internal_neighbor_count": {"iosxe": {"module_name": "bgp.get", "doc": " \n        Get counter of internals bgp neighbors (iBGP) \n        and externals bgp neighbors (eBGP)\n        Args:\n            device ('obj'): Device object\n        Returns:\n            ibgp_count ('int'): Counter of internal bgps (iBGP)\n            ebgp_count ('int'): Number of external bgps (eBGP)\n    ", "uid": "get_bgp_external_internal_neighbor_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1242"}}, "get_bgp_id": {"iosxe": {"module_name": "bgp.get", "doc": " Get bgp id\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n        Returns:\n            integer: bgp_id\n        Raises:\n            None\n    ", "uid": "get_bgp_id", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#937"}}, "get_bgp_last_reset_list": {"iosxe": {"module_name": "bgp.get", "doc": " Get last reset list from - show ip bgp all neighbors\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            key_list(`list`): result list\n            table(`obj`): table to display\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "get_bgp_last_reset_list", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#130"}}, "get_bgp_neighbor_capabilities": {"iosxe": {"module_name": "bgp.get", "doc": " Get neighbor capabilities \n        Args:            \n            vrf ('str')               : VRF name\n            device ('obg')            : Device object\n            output ('dict')           : Parsed output\n            address_family ('str')    : Address family to be verified\n            neighbor_address ('str')          : Neighbor address\n            vrf ('str')               : VRF name\n        Returns:\n            Capabilities\n        Raises:\n            None\n    ", "uid": "get_bgp_neighbor_capabilities", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#740"}}, "get_bgp_neighbor_session_state": {"iosxe": {"module_name": "bgp.get", "doc": " Get session state from device\n\n        Args:\n            device ('obj')           : Device object\n            vrf ('str')              : VRF name\n            address_family           : Address family\n            neighbor_address ('str')         : Neighbor interface address\n            output ('dict')          : Parsed output\n            address_families ('list')        : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n        Returns:\n            Session state\n        Raises:\n            Exception\n    ", "uid": "get_bgp_neighbor_session_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#784"}}, "get_bgp_neighbors": {"iosxe": {"module_name": "bgp.get", "doc": " Gets bgp neighbors that is under {address_family}\n        and optionally {vrf} \n            - show ip bgp {address_family} all summary\n            - show ip bgp {address_family} vrf {vrf} summary\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            vrf('str'): vrf to search under. If empty it will search \n                        under all\n\n        Returns:\n            list - Neighbor ip_address'\n    ", "uid": "get_bgp_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1035"}}, "get_bgp_neighbors_advertised": {"iosxe": {"module_name": "bgp.get", "doc": "Retrieve advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): address of neighbor\n    \n        Returns:\n            Dictionary\n\n    ", "uid": "get_bgp_neighbors_advertised", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#558"}}, "get_bgp_neighbors_advertised_routes": {"iosxe": {"module_name": "bgp.get", "doc": " Get advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor IP address\n\n        Returns:\n            Dictionary of advertised neighbors\n        Raises:\n            None\n\n    ", "uid": "get_bgp_neighbors_advertised_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#339"}}, "get_bgp_neighbors_in_state": {"iosxe": {"module_name": "bgp.get", "doc": " Get bgp neighbor ip_addresses that are in {state} - show \n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you want \n                             search for/against\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ", "uid": "get_bgp_neighbors_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1079"}}, "get_bgp_neighbors_not_in_state": {"iosxe": {"module_name": "bgp.get", "doc": " Get bgp neighbor ip_addresses that are NOT in {state} - show\n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you dont\n                             want to find neighbors with\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ", "uid": "get_bgp_neighbors_not_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1179"}}, "get_bgp_networks_from_neighbor": {"iosxe": {"module_name": "bgp.get", "doc": " Gets bgp networks from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            networks ('list')\n        Raises:\n            None\n    ", "uid": "get_bgp_networks_from_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1485"}}, "get_bgp_route_ext_community": {"iosxe": {"module_name": "bgp.get", "doc": " Get route extended community\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            route('route'): route to search under\n            vrf('str'): if getting route via vrf\n            rd('str'): if getting route via rd\n        Returns:\n            extended community\n        Raises:\n            None\n    ", "uid": "get_bgp_route_ext_community", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#977"}}, "get_bgp_route_from_neighbors": {"iosxe": {"module_name": "bgp.get", "doc": "Execute 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor_address ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n        Returns:\n            Dictionary of neighbor routes\n        Raises:\n            KeyError: A key is missing in dictionary\n    ", "uid": "get_bgp_route_from_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#275"}}, "get_bgp_routes_list": {"iosxe": {"module_name": "bgp.get", "doc": " Returns a list of routes from BGP table\n\n        Args:\n            device ('obj'): Device object\n            vrf ('vrf'): VRF name\n            address_family ('str'): Address family\n\n        Raises:\n            None\n\n        Returns:\n            list object with unique routes from BGP table\n            False\n    ", "uid": "get_bgp_routes_list", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1285"}}, "get_bgp_routing_table": {"iosxe": {"module_name": "bgp.get", "doc": " Get parsed dict of the BGP routing table executing one of the following commands\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp'\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            Parsed dictionary of BGP routing table\n        Raises:\n            None\n    ", "uid": "get_bgp_routing_table", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1339"}}, "get_bgp_running_config": {"iosxe": {"module_name": "bgp.get", "doc": " Get parsed running BGP config\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): Address familly\n            vrf ('str'): VRF name\n        Returns:\n            Dictionary\n                Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n    ", "uid": "get_bgp_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1417"}}, "get_bgp_session_count": {"iosxe": {"module_name": "bgp.get", "doc": " Get bgp sesion count on state (established, idle, active)\n\n    Args:\n        device(`str`): Device str\n        in_state ('str'): Get bgp count only of neighbors in state\n    Returns:\n        Integer: bgp session count\n    ", "uid": "get_bgp_session_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1198"}}, "get_bgp_state_pfx_rcd": {"iosxe": {"module_name": "bgp.get", "doc": " Get State/PfxRcd value from the device\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            State/PfxRcd value\n        Raises:\n            None\n\n    ", "uid": "get_bgp_state_pfx_rcd", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#232"}}, "get_bgp_status_codes_from_neighbor": {"iosxe": {"module_name": "bgp.get", "doc": " Gets status_codes from route under neighbor\n\n        Args: \n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            route ('str'): route to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            status_codes ('str')\n            None\n        Raises:\n            None\n    ", "uid": "get_bgp_status_codes_from_neighbor", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1527"}}, "get_bgp_summary": {"iosxe": {"module_name": "bgp.get", "doc": " Get neighbors from show bgp summary command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            all_summary ('bool'): check all summary    \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ", "uid": "get_bgp_summary", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#499"}}, "get_configured_bgp_peers": {"iosxe": {"module_name": "bgp.get", "doc": " Get configured BGP peers\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): AS number\n            router_bgp_address_family ('str'): Address family of router bgp\n            vrf ('str'): VRf name\n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ", "uid": "get_configured_bgp_peers", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#1377"}}, "get_ip_bgp_neighbors": {"iosxe": {"module_name": "bgp.get", "doc": " Get Ip Bgp neighbors from the following commands:\n            'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}',\n            'show ip bgp {address_family} vrf {vrf} neighbors',\n            'show ip bgp {address_family} neighbors {neighbor}',\n            'show ip bgp {address_family} neighbors',\n            'show ip bgp {address_family} all neighbors {route}'           \n            'show ip bgp neighbors {neighbor}',\n            'show ip bgp neighbors'\n\n        Args:\n            device ('obj')         : Device object \n            address_family ('str') : Address family\n            vrf ('str')            : Vrf name\n            neighbor ('neighbor')  : Neighbor address\n        Returns:\n            Dictionary\n        Raises:\n            None\n        \n    ", "uid": "get_ip_bgp_neighbors", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#865"}}, "get_ip_bgp_route": {"iosxe": {"module_name": "bgp.get", "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n        Returns:\n            routes Dictionary\n    ", "uid": "get_ip_bgp_route", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#429"}}, "get_ip_bgp_summary": {"iosxe": {"module_name": "bgp.get", "doc": "Execute from the following commands:\n        'show ip bgp {address_family} summary',\n        'show ip bgp {address_family} vrf {vrf} summary',\n        'show ip bgp {address_family} rd {rd} summary',\n        'show ip bgp all summary',\n        'show ip bgp {address_family} all summary'\n        and retrieve neighbor address and AS number\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ", "uid": "get_ip_bgp_summary", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#176"}}, "get_show_run_bgp_dict": {"iosxe": {"module_name": "bgp.get", "doc": " Parse router bgp section from show running-config to a dictionary\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            Dictionary following below schema:\n            {\n                'bgp_as': int,\n                    Any(): {\n                        Any(): {\n                            'neighbor': str,\n                            'neighbors': list\n                            'remote_as': int}}}\n        Raises:\n            None\n    ", "uid": "get_show_run_bgp_dict", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#34"}}, "get_bridge_domain_bridge_domain_interfaces": {"iosxe": {"module_name": "bridge_domain.get", "doc": " Get list of interfaces using bridge-domain id\n\n        Args:\n            bridge_domain_id('int'): bridge-domain id to get interfaces\n            device ('obj'): Device object\n\n        Returns:\n            list of interfaces\n        Raises:\n            None\n    ", "uid": "get_bridge_domain_bridge_domain_interfaces", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#52"}}, "get_bridge_domain_bridge_domain_mac_count": {"iosxe": {"module_name": "bridge_domain.get", "doc": " Get bridge domain mac count\n\n        Args:\n            device(`obj`): Device object \n            timeout_parse ('int'): Timeout in seconds for command device.parse('show bridge-domain')\n        Returns:\n            integer: mac count\n        Raises:\n            None\n    ", "uid": "get_bridge_domain_bridge_domain_mac_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#13"}}, "verify_flow_cache_record_exists": {"iosxe": {"module_name": "flow.verify", "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            expected_source_address ('str'): Source address to match\n            expected_destination_address ('str'): Destination address to match\n            format ('bool'): Format output or not\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ", "uid": "verify_flow_cache_record_exists", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#116"}}, "verify_flow_exporter_records_added_and_sent_are_equal": {"iosxe": {"module_name": "flow.verify", "doc": " Verifies that flow exporter records added and sent are equal\n\n        Args:\n            device ('obj'): Device to use\n            exporter ('str'): Exporter name\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ", "uid": "verify_flow_exporter_records_added_and_sent_are_equal", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#52"}}, "verify_flow_with_source_and_destination_exists": {"iosxe": {"module_name": "flow.verify", "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            source_address ('str'): Source address to match\n            destination_address ('str'): Destination address to match\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ", "uid": "verify_flow_with_source_and_destination_exists", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#13"}}, "get_flows_src_dst_address_pairs": {"iosxe": {"module_name": "flow.get", "doc": " Gets flows under flow_monitor and returns source and destination address pairs\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor name\n\n        Raises:\n            N/A\n\n        Returns:\n            [('source_address', 'destination_address'), ...]\n    ", "uid": "get_flows_src_dst_address_pairs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/get.py#12"}}, "get_current_system_datetime": {"iosxe": {"module_name": "system.get", "doc": " Returns current time of system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            current time ('str')\n        Raises:\n            None\n    ", "uid": "get_current_system_datetime", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/get.py#12"}}, "verify_acl_applied": {"iosxe": {"module_name": "acl.verify", "doc": " Verify if access list is correctly applied\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access list name\n            applied_config ('str'): Output from acl.configure.config_extended_acl\n        Raises:\n            None\n        Returns:\n            True\n            False\n\n    ", "uid": "verify_acl_applied", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#11"}}, "config_acl_on_interface": {"iosxe": {"module_name": "acl.configure", "doc": " Configures acl on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n    ", "uid": "config_acl_on_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#89"}}, "config_extended_acl": {"iosxe": {"module_name": "acl.configure", "doc": " Configure extended ACL on device\n\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            protocol ('str'): protocol\n            src_ip ('str'): source start ip\n            src_step ('str'): increment step for source ip\n            src_wildcard ('str'): source wildcard\n            dst_ip ('str'): destination start ip\n            dst_step ('str'): increment step for destination ip\n            dst_wildcard ('str'): destination wildcard\n            dst_port ('str'): Acl destination port\n            entries ('int'): Acl entries\n\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ", "uid": "config_extended_acl", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#13"}}, "is_logging_bfd_down_logged": {"iosxe": {"module_name": "logging.verify", "doc": " Verifies bfd is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ", "uid": "is_logging_bfd_down_logged", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#61"}}, "is_logging_ospf_neighbor_down_logged": {"iosxe": {"module_name": "logging.verify", "doc": " Verifies ospf neighbor is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ", "uid": "is_logging_ospf_neighbor_down_logged", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#84"}}, "is_logging_static_route_down_logged": {"iosxe": {"module_name": "logging.verify", "doc": " Verifies static route is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ", "uid": "is_logging_static_route_down_logged", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#108"}}, "is_logging_string_matching_regex_logged": {"iosxe": {"module_name": "logging.verify", "doc": " Verifies string that matches regex is logged - ignoring logs from before passed timestamp\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n           regex ('str'): regex string to match\n\n        Returns:\n            timestamp of command if found else False ('str') \n        Raises:\n            None\n    ", "uid": "is_logging_string_matching_regex_logged", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#17"}}, "get_logging_logs": {"iosxe": {"module_name": "logging.get", "doc": " Returns list of entries in the logging system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            list of enteries from logging system\n        Raises:\n            None\n    ", "uid": "get_logging_logs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#12"}}, "verify_vrf_advertised_routes": {"iosxe": {"module_name": "vrf.verify", "doc": " Verify if each VRF/route distinguisher have at least one advertised route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be search under in advertised routes\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "verify_vrf_advertised_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#25"}}, "verify_vrf_description_in_running_config": {"iosxe": {"module_name": "vrf.verify", "doc": "Verify vrf description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            Exception\n            KeyError\n    ", "uid": "verify_vrf_description_in_running_config", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#287"}}, "verify_vrf_description_in_show_ip_vrf_detail": {"iosxe": {"module_name": "vrf.verify", "doc": "Verify vrf description in show ip vrf detail <vrf>\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n            Exception\n    ", "uid": "verify_vrf_description_in_show_ip_vrf_detail", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#252"}}, "verify_vrf_received_routes": {"iosxe": {"module_name": "vrf.verify", "doc": " Verify if each neighbor has at least one received route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be searched under in received routes\n            received_routes ('dict'): Advertised routes from command:\n                 'show bgp {address_family} all neighbors {neighbor} routes\n\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ", "uid": "verify_vrf_received_routes", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#181"}}, "verify_vrf_routes_in_bgp_table": {"iosxe": {"module_name": "vrf.verify", "doc": " Verify that each VRF and route distinguisher has at least one route in BGP table\n\n        Args:\n            device ('obj'): Device object\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            address_family ('address_family'): Address family\n            routes_dict ('dict'): Parsed output from command 'show ip bgp all'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ", "uid": "verify_vrf_routes_in_bgp_table", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#109"}}, "configure_vrf_description": {"iosxe": {"module_name": "vrf.configure", "doc": "Configure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description(`str`): Description\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_vrf_description", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#13"}}, "unconfigure_vrf_description": {"iosxe": {"module_name": "vrf.configure", "doc": "Unconfigure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure            \n    ", "uid": "unconfigure_vrf_description", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#40"}}, "get_vrf_interface": {"iosxe": {"module_name": "vrf.get", "doc": " Gets the subinterfaces for vrf\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n\n        Returns:\n            interfaces('list'): List of interfaces under specified vrf\n            None\n\n        Raises:\n            None\n    ", "uid": "get_vrf_interface", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#85"}}, "get_vrf_route_distinguisher": {"iosxe": {"module_name": "vrf.get", "doc": " Get default route distinguisher from show command\n\n        Args:\n            vrf ('str')     : VRF value\n            device ('obj')  : Device object\n\n        Returns:\n            route_distinguisher ('str'): Route distinguisher value\n            False\n\n        Raises:\n            Exception\n    ", "uid": "get_vrf_route_distinguisher", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#37"}}, "get_vrf_route_targets": {"iosxe": {"module_name": "vrf.get", "doc": " Get route target value from a device\n\n        Args:\n            address_family ('str'): address family value\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            vrf('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n\n        Returns:\n            Route target value\n            None\n\n        Raises:\n            None\n    ", "uid": "get_vrf_route_targets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#110"}}, "get_vrf_vrfs": {"iosxe": {"module_name": "vrf.get", "doc": " Get all vrfs from device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            out ('dict'): Vrf dictionary\n\n        Raises:\n            None\n    ", "uid": "get_vrf_vrfs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#12"}}, "is_platform_slot_in_state": {"iosxe": {"module_name": "platform.verify", "doc": " Verify if slot is in state\n\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot number\n            state ('str'): State being checked\n            max_time ('int'): Max time checking\n            interval ('int'): Interval checking\n        Return:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "is_platform_slot_in_state", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#16"}}, "verify_changes_platform": {"iosxe": {"module_name": "platform.verify", "doc": " Verify if there are changes between outputs from 'show platform'\n        Args:\n            device ('obj'): Device object\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n            max_time ('int'): Max time in seconds retrying\n            interval ('int'): Interval of each retry\n        Return:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_changes_platform", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#59"}}, "write_erase_reload_device": {"iosxe": {"module_name": "platform.utils", "doc": "Execute 'write erase' on device, reload and apply basic configuration.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            static_route_ip (`str`): IP address for static route configuration\n            config_sleep (`int`): Time to wait after applying mgmt IP configuration\n            vrf (`str`): VRF to use for management IP operations\n            via_mgmt(`str`): Via to use to reach the device mgt IP.\n            post_reconnect_time(`int`): Maximum time to wait after reload before configuring\n\n\n        Returns:\n            None\n    ", "uid": "write_erase_reload_device", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#186"}}, "get_diffs_platform": {"iosxe": {"module_name": "platform.get", "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "get_diffs_platform", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#59"}}, "get_platform_standby_rp": {"iosxe": {"module_name": "platform.get", "doc": " Get standby router slot on device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds retrieving router information\n            interval ('int'): Interval in seconds retrieving router information\n        Raise:\n            None\n        Return:\n            Integer: Number of RP\n    ", "uid": "get_platform_standby_rp", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#16"}}, "verify_ping_from_server": {"iosxe": {"module_name": "server.verify", "doc": "Verify ping from server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address (`str`): IP address to ping\n            count (`int`): repeat ping count\n            interface (`str`): source ip/interface value\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ", "uid": "verify_ping_from_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/verify.py#10"}}, "configure_tacacs_server": {"iosxe": {"module_name": "server.configure", "doc": " Configure tacacs server\n\n        Args:\n            device ('obj'): Device object\n            server_config('list'): List of configuration for server\n                dictionary contains following 3 keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type ('int'): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                ex.)\n                    [\n                        {\n                            'host': '192.168.21.1',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                        },\n                        {\n                            'host': '192.168.21.2',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.2'\n                        }\n                    ] \n                        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ", "uid": "configure_tacacs_server", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#12"}}, "verify_arp_packets": {"iosxe": {"module_name": "arp.verify", "doc": " Verify arp packets sent interval\n\n        Args:\n            pkts (`obj`): Pcap object\n            timeout (`str`): ARP timeout interval\n            tolerance (`int`): Delay tolerance\n        Returns:\n            True\n            False\n    ", "uid": "verify_arp_packets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#55"}}, "verify_static_arp": {"iosxe": {"module_name": "arp.verify", "doc": " Verify static arp entry is present in ARP table\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ", "uid": "verify_static_arp", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#13"}}, "configure_arp_timeout": {"iosxe": {"module_name": "arp.configure", "doc": " Config arp timeout on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            timeout (`int`): timeout in second\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_arp_timeout", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#12"}}, "configure_static_arp": {"iosxe": {"module_name": "arp.configure", "doc": " Configure static arp\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "configure_static_arp", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#75"}}, "remove_arp_timeout": {"iosxe": {"module_name": "arp.configure", "doc": " Remove arp timeout configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ", "uid": "remove_arp_timeout", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#50"}}, "get_arp_table_count": {"iosxe": {"module_name": "arp.get", "doc": "\n    Get arp table count\n\n    Args:\n        device(`obj`): Device str\n    Returns:\n        arp table count\n    ", "uid": "get_arp_table_count", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#14"}}, "verify_traceroute": {"iosxe": {"module_name": "traceroute.verify", "doc": " Verify traceroute if it matches expected_output_label_list or expected_hop_list\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            ignore_last_label ('bool'): Ignore last label in expected_output_label_list\n            expected_output_label_list ('list'): Expected output label list of first hop\n                ex.) \n                    expected_output_label_list = ['16052','16062','16063','39']\n            expected_hop_list ('list'): Expected hop list\n                ex.) \n                    expected_hop_list = ['27.86.198.29', '106.187.14.129', '106.187.14.34', '192.168.1.1']\n        Returns:\n            True/False\n        Raises:\n            None\n    ", "uid": "verify_traceroute", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#60"}}, "verify_traceroute_first_hop_address": {"iosxe": {"module_name": "traceroute.verify", "doc": " Verify if first hop ip address is expected one\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            expected_hop_address ('str'): Expected next hop ip address\n        Returns:\n            True/False\n        Raises:\n            None\n    ", "uid": "verify_traceroute_first_hop_address", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#16"}}, "is_version_image_installed": {"iosxe": {"module_name": "version.verify", "doc": " Verify if image is installed on device\n        Args:\n            device ('str'): Device object\n            image ('str'): Image being verified\n        Raise:\n            None\n        Return:\n            True\n            False\n    ", "uid": "is_version_image_installed", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/version/verify.py#8"}}, "analyze_udp_in_mpls_packets": {"iosxe": {"module_name": "udp.get", "doc": " Analyze passed packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address ('str'): Destination IP address\n            ttl (`int`): Time to live\n            packet_count (`int`): Packet count to check during\n                packet analysis\n            destination_port (`int`): Destination port start \"traceroute\"\n        Returns:\n            pkt count\n        Raises:\n            None \n    ", "uid": "analyze_udp_in_mpls_packets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udp/get.py#10"}}, "get_processes_five_seconds_cpu_usage": {"iosxe": {"module_name": "processes.get", "doc": " Get average CPU usage for last 5 seconds\n\n        Args:\n            device ('obj'): Device objecte\n\n        Returns:\n            CPU usage for last 5 seconds\n            None\n        Raises:\n            None\n    ", "uid": "get_processes_five_seconds_cpu_usage", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/processes/get.py#4"}}, "verify_vpn_route_targets": {"iosxe": {"module_name": "vpn.verify", "doc": " Verify route target are imported, exported or both\n\n        Args:\n            device ('obj'): Device object\n            route_targets ('list'): list of route targets to check\n                ex.)\n                    [\n                        '65109:4005',\n                        '65109:4006'\n                    ]\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            address_family ('str'): address family to check\n            vrf ('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ", "uid": "verify_vpn_route_targets", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpn/verify.py#17"}}, "compare_archive_config_dicts": {"iosxe": {"module_name": "archive.verify", "doc": " Checks for differences between two 'show archive' dictionaries\n\n        Args:\n            dict1('dict'): first dictionary\n            dict2('dict'): seconds dictionary\n\n        Returns:\n            list of commands that are different between the two configs\n        Raises:\n            None\n    ", "uid": "compare_archive_config_dicts", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/verify.py#9"}}, "get_archive_config_differences": {"iosxe": {"module_name": "archive.get", "doc": " Gets the archive differences between {file1} and {file2}\n\n        Args:\n            device ('obj'): Device object\n            file1('str'): file1 to get diff from\n            file2('str'): file2 to get diff from\n\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n    ", "uid": "get_archive_config_differences", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#35"}}, "get_archive_config_incremental_diffs": {"iosxe": {"module_name": "archive.get", "doc": " Gets the archive incremental diffs from file\n\n        Args:\n            device ('obj'): Device object\n            file('str'): file to get diff from\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n\n    ", "uid": "get_archive_config_incremental_diffs", "url": "https://bitbucket-eng-sjc1.cisco.com/bitbucket/projects/PYATS-PYPI/repos/genielibs/browse/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#11"}}}
