{
  "add_device_to_testbed_yaml_file": {
    "nxos": {
      "doc": " Add device details to the devices yaml file\n\n        Args:\n            device_name ('str'): Name of the device to be added as a string\n            device_ip ('str'): IP address of the device to be added as a string\n            yaml_file ('str'): Name(path) of the yaml file where the device\n                       is to be added as a string\n        Return value:\n            None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "add_device_to_testbed_yaml_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L281"
    }
  },
  "analyze_core_by_bingopy": {
    "nxos": {
      "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            clear_cores (`bool`): To clear cores before generating core. Default to True\n            service (`str`): service to generate core\n            remote_server (`str`): remote server name in testbed yaml\n            remote_user (`str`, optional): userid on remote server\n            remote_pass (`str`, optional): password of userid on remote server\n            remote_location (`str`): Location of saving core file\n            remote_via: (`str`, optional): specify connection to get ip\n                                 if not specified, use active connection one\n            vrf (`str`): VRF for copying file to remote server\n                         Defaults to management\n            private_image_tree (`str`, optional): Tree location for private image\n            private_image_process_path (`str`, optional): Process path for private image\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n            clear_cores (`Bool`, optional): clear cores if TRUE. Defaults to True\n            max_time (`int`, optional): Maximum time to wait. \n                                        Defaults to 360 seconds\n            check_interval (`int`, optional): Time interval while checking.\n                                              Defaults to 10 seconds\n            bloggered (`bool`, optional): if use bloggered command\n                                          if False, use kill -6 command instead\n                                          Defaults to True\n            source_location (`str`, optional): source file location for BingoPy\n                                               Defaults to /auto/andatc/independent/shellrc-files/current/rc/.bashrc.build\n            bingopy_location (`str`, optional): bingopy location\n                                                Defaults to /ws/xianqin-sjc/bingo/blogger_core.pl\n\n        Returns:\n            out (`str`): Output of BingoPy\n    ",
      "module_name": "bingopy.bingopy",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_core_by_bingopy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/bingopy/bingopy.py#L16"
    }
  },
  "analyze_core_by_ucd": {
    "linux": {
      "doc": " analyze core by UCD\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            core_file (`str`): core file name with path to analyze by UCD\n            gdb_command (`str`, optional): gdb command in GDB\n                                           Defaults to `bt full`\n            ucd_command (`str`, optional): ucd command with path and options\n                                           Defaults to `/ws/cvanka-sjc/ucd/ucd -c`\n            timeout (`int`, optional): timeout to expire for device.receive()\n                                       Defaults to 300 seconds\n\n        Returns:\n            out (`str`): Output of UCD\n    ",
      "module_name": "ucd.ucd",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_core_by_ucd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/ucd/ucd.py#L9"
    }
  },
  "analyze_rate": {
    "com": {
      "doc": " Get the traffic rate and the corresponding unit\n\n        Args:\n            rate (`str`): Passed rate as a string\n\n        Returns:\n            rate (`int`): Traffic rate\n            rate_unit (`str`): Traffic rate unit\n            original_rate (`str`): Original Traffic rate\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L581"
    }
  },
  "analyze_udp_in_mpls_packets": {
    "iosxe": {
      "doc": " Analyze passed packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address ('str'): Destination IP address\n            ttl (`int`): Time to live\n            packet_count (`int`): Packet count to check during\n                packet analysis\n            destination_port (`int`): Destination port start \"traceroute\"\n        Returns:\n            pkt count\n        Raises:\n            None \n    ",
      "module_name": "udp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_udp_in_mpls_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udp/get.py#L10"
    }
  },
  "apic_rest_delete": {
    "apic": {
      "doc": "DELETE REST Command to delete information from the device\n\n        Args:\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_delete",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L140"
    }
  },
  "apic_rest_get": {
    "apic": {
      "doc": "GET REST Command to retrieve information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            query_target {self|children|subtree}:\n                                'self': (default) MO itself\n                                'children': just the MO's child objects\n                                'subtree': MO and its child objects\n            rsp_subtree {no|children|full}: Specifies child object level\n                                            included in the response\n                                            'no': (default) the response\n                                                   does not include any children\n                                            'children': return only the child\n                                                        objects\n                                            'full': includes the full tree\n                                                    structure\n            rsp_prop_include {all|naming-only|config-only}:\n                                'all': all properties of the objects\n                                'naming-only': only the naming properties\n                                'config-only': only configurable properties\n            rsp_subtree_include (`string`): specify additional contained objects\n                                          or options to be included\n            rsp_subtree_class (`string`) : specify classes\n            target_subtree_class (string): specify subtree classes\n            query_target_filter (`string`): filter expression\n            expected_status_code (`int`): Expected result\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_get",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L15"
    }
  },
  "apic_rest_post": {
    "apic": {
      "doc": "POST REST Command to configure information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            payload (`dict`): Dictionary containing the information to send via\n                            the post\n            xml_payload (bool): Set to True if payload is in XML format\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_post",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L91"
    }
  },
  "arithmetic_operations": {
    "com": {
      "doc": "\n    Perform arithmetic operations on operands.\n\n    Args:\n        operation (`str`): string indicating the calculation method.\n                           'addition' is '+'\n                           'subtraction' is '-'\n                           'multiplication' is '*'\n                           'division' is '/'\n        operands (`list`): operands to be calculated.\n                           example: [1, 2]\n\n    Returns:\n        Numerical : Calculation result\n        None      : When an abnormality occurs during calculation\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "arithmetic_operations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3709"
    }
  },
  "assign_default_ipv4_sgacl": {
    "iosxe": {
      "doc": " Assign a default static SGACL(ipv4)\n        Args:\n            device ('obj'): device to use\n             sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to assign default static SGACL(ipv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "assign_default_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L175"
    }
  },
  "assign_static_ipv4_sgacl": {
    "iosxe": {
      "doc": " Assign static SGACL(Ipv4)\n        Args:\n            device ('obj'): device to use\n            src_sgt (`str`): Source Group Tag\n            dest_sgt (`str`): Destination Group Tag\n            sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to assign static SGACL(IPv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "assign_static_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L152"
    }
  },
  "attach_device_tracking_policy_to_interface": {
    "iosxe": {
      "doc": " Attach Device Tracking Policy to a interface\n\n        Args:\n            device (`obj`): Device object\n            policy_name (`str`): Policy name to be attached to interface\n            interface (`str`): interface to attach policy\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_device_tracking_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2320"
    }
  },
  "attach_dhcpv6_guard_policy_to_interface": {
    "iosxe": {
      "doc": " Attach DHCPv6 Guard Policy to an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_dhcpv6_guard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1933"
    }
  },
  "attach_dhcpv6_guard_policy_to_vlan": {
    "iosxe": {
      "doc": " Attach DHCPv6 Guard Policy to a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_dhcpv6_guard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2252"
    }
  },
  "attach_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Attaches the given ipv6 dhcp guard policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be attached\n            interface (str): interface to attach policy to\n            vlan (str): vlan or vlan range to attach the policy to. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L356"
    }
  },
  "attach_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Attaches the given ipv6 nd suppress policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be attached\n            interface (str): interface to attach policy to\n            vlan (str): vlan or vlan range to attach the policy to. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 nd suppress policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L428"
    }
  },
  "attach_ipv6_raguard_policy_to_interface": {
    "iosxe": {
      "doc": " Attach IPv6 RA Guard Policy to an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_raguard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1795"
    }
  },
  "attach_ipv6_raguard_policy_to_vlan": {
    "iosxe": {
      "doc": " Attach IPv6 RA Guard Policy to a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_raguard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2069"
    }
  },
  "authentication_convert_to_new_style": {
    "iosxe": {
      "doc": "Common function to configure authentication convert-to new-style for both forced and without forced\n    \n        Args:\n            device ('obj'): device to use\n            force (`str`): Cli input to continue (default value is None)\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure: Failed to configure authentication convert-to new-style\n            ",
      "module_name": "authentication.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "authentication_convert_to_new_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/authentication/configure.py#L13"
    }
  },
  "bits_to_netmask": {
    "com": {
      "doc": " Convert bits to netmask\n        Args:\n            bits ('int'): bits to converts\n            ex.) bits = 32\n        Raise:\n            None\n        Returns:\n            Net mask\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "bits_to_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L827"
    }
  },
  "cdets_lookup": {
    "linux": {
      "doc": " Function to return matching cdets given a corefile\n    Note: The corefile should already be decoded as this function searches\n    for the entry within the decoder archived database ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "cdets_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L29"
    }
  },
  "change_configuration_using_jinja_templates": {
    "com": {
      "doc": "Use Jinja templates to change the device configuration\n\n        Args:\n            device (`obj`): Device object\n            template (`obj`): Jinja template to be used in configuration\n            parameters (`dict`): Dictionary of all the parameters\n                                 to be passed to the Jinja template\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "jinja.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "change_configuration_using_jinja_templates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/configure.py#L11"
    }
  },
  "change_hostname": {
    "ios": {
      "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "change_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L278"
    },
    "iosxe": {
      "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "change_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L284"
    }
  },
  "change_power_cycler_state": {
    "com": {
      "doc": " Turn on the power cycler\n        Args:\n            device ('obj'): Device object\n            powercycler ('obj'): Powercycler object\n            state ('str'): Power cycler state on/off\n            outlets ('str'): Power cycler outlets\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "change_power_cycler_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L149"
    }
  },
  "check_if_device_in_testbed_yaml": {
    "nxos": {
      "doc": " Check if the given device name is part of the devices yaml file\n\n        Args:\n            device_name ('str'): Name of the device to be found as a string\n            yaml_file ('str'): Name(path) of the yaml file where the device\n                       is to be found as a string\n        Return value:\n            Boolean. True, if found. False, if error/not found\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "check_if_device_in_testbed_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L259"
    }
  },
  "check_traffic_drop_count": {
    "iosxe": {
      "doc": "Check for the drop count\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            drop_count (`str`): Expected drop count\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_drop_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L337"
    }
  },
  "check_traffic_expected_rate": {
    "iosxe": {
      "doc": "Check the expected rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            expected_rate (`str`): Traffic expected received rate\n            tolerance (`str`): Traffic loss tolerance percentage\n            traffic_gen (`str`): Traffic generating device\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_expected_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L150"
    }
  },
  "check_traffic_transmitted_rate": {
    "iosxe": {
      "doc": "Check transmitted rate was set correctly or not\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_transmitted_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L60"
    }
  },
  "clear_aaa_cache": {
    "iosxe": {
      "doc": " Clear AAA Cache\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Radius Server Grp name\n            profile ('str',optional): Profile name to clear. Default 'all.'\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            switch1.api.clear_aaa_cache('radiusGroup')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_aaa_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L683"
    }
  },
  "clear_access_list_counters": {
    "iosxe": {
      "doc": " clear access-list counters\n        Args:\n            device (`obj`):           Device object\n            option ('str', Optional): Which data to clear. Default will clear all access-list counters or \n                                      can give access-list name(eg:input_packet) or number(eg:100)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_list_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/clear.py#L12"
    }
  },
  "clear_access_session": {
    "iosxe": {
      "doc": " executes clear access-sesssion CLI \n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to execute clear access-sesssion.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L285"
    }
  },
  "clear_access_session_intf": {
    "iosxe": {
      "doc": " clear access-session interface {}\n        Args:\n            device (`obj`): Device object\n            intf('str'): Name of the interface to clear access-session\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dot1x.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_session_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/clear.py#L12"
    }
  },
  "clear_arp_cache": {
    "iosxe": {
      "doc": " Clears device cache\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_arp_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L49"
    }
  },
  "clear_bgp_neighbor": {
    "junos": {
      "doc": " Clear bgp neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/clear.py#L3"
    }
  },
  "clear_bgp_neighbor_soft": {
    "junos": {
      "doc": " Clear bgp neighbor soft using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbor_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/clear.py#L29"
    }
  },
  "clear_bgp_neighbors_soft": {
    "iosxe": {
      "doc": " Reset connection to a BGP neighbor or to all neighbors, diretion in or out\n        Args:\n            device ('obj') : Device object\n            direction ('str'): Direction type:\n                ex.)\n                    direction = \"in\"\n                    direction = \"out\"\n            neighbor (`str`): Neighbor address\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbors_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L39"
    }
  },
  "clear_counters": {
    "iosxe": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L730"
    }
  },
  "clear_crypto_sa_counters": {
    "iosxe": {
      "doc": " Clear all the ipsec sa counters\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_crypto_sa_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L13"
    }
  },
  "clear_cts_counters": {
    "iosxe": {
      "doc": " Clear CTS credentials\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear cts counters\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cts_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L428"
    }
  },
  "clear_cts_credentials": {
    "iosxe": {
      "doc": " clear CTS credentials\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear cts credential\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cts_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L406"
    }
  },
  "clear_device_tracking_counters": {
    "iosxe": {
      "doc": " Clear device-tracking counters\n    Args:\n        device ('obj'): device object\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id. Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to clear device-tracking counters\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_device_tracking_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2182"
    }
  },
  "clear_device_tracking_database": {
    "iosxe": {
      "doc": " Clear device-tracking database\n        Args:\n            device ('obj'): device object\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    address ('dict', optional):\n                        address ('str'): IPv4 address or \"all\"\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    force ('bool', optional): Force to clear all (mac) entries\n                    interface ('str', optional):\n                        target ('str'): interface\n                        force ('bool', optional): Force to clear all (mac) entries\n                        vlanid ('str', optional): vlanid\n                    mac ('str', optional):\n                        address ('str'): 48-bit hardware address\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    policy ('str', optional): policy name\n                    prefix ('bool', optional)\n                        address ('str'): IPv6 address (X:X:X:X::X/<0-128>) or \"all\"\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    vlanid ('str', optional): vlan id\n                ex.)\n                    [\n                        {\n                            \"force\": True,\n                            \"mac\": {\n                                \"address\": \"dead.beef.0001\"\n                                \"target\":\n                                    \"force\": True\n                                    \"interface\": \"gigabitEthernet0/0\"\n                                    \"policy\": \"test\"\n                                    \"vlanid\": 10\n                            }\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 source-guard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_device_tracking_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2067"
    }
  },
  "clear_errdisable_intf_vlan": {
    "iosxe": {
      "doc": " clear errdisable interface {} vlan\n        Args:\n            device (`obj`): Device object\n            intf('str'): Name of the interface to clear errdisable\n            Vlan('str', optional): Name of the vlan to to clear errdisable, default value is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_errdisable_intf_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/clear.py#L11"
    }
  },
  "clear_flow_monitor": {
    "iosxe": {
      "doc": " clear flow monitor data\n        Args:\n            device (`obj`):           Device object\n            name ('str'):             Name of the flow (eg: created[ipv4_input] or user defined[monitor_ipv4_out])\n            option ('str', optional): Which data to clear. Default will clear all flow monitor info or\n                                      can give perticular option to clear eg:cache/statistics\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L248"
    }
  },
  "clear_flow_monitor_statistics": {
    "iosxe": {
      "doc": " Clears Flow Monitor statistics on device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_monitor_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L98"
    }
  },
  "clear_interface_config": {
    "iosxe": {
      "doc": " Clears interface config\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to clear\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L775"
    }
  },
  "clear_interface_counters": {
    "iosxe": {
      "doc": " Clear interface counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L377"
    }
  },
  "clear_interface_interfaces": {
    "iosxe": {
      "doc": " clear interface configuration\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1234"
    }
  },
  "clear_iox": {
    "iosxe": {
      "doc": " \n    Execute clear iox\n    Uses disable_iox\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n        disable_iox_then_clear ('boolean') : Disable IOX then clear\n        wait_timer ('int') : wait timer after disable IOX if disable_iox_then_clear\n        timeout ('int'): timeout arg for Unicon execute for this CLI\n    Returns:\n        True\n        False\n    Raises:\n        None    \n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L53"
    }
  },
  "clear_ip_bgp_vrf_af_soft": {
    "iosxe": {
      "doc": " BGP soft clear using vrf, address family and AS number\n\n        Args:\n            device ('obj'): device object\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            as_number ('int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_bgp_vrf_af_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L12"
    }
  },
  "clear_ip_mroute_all": {
    "iosxe": {
      "doc": " clear ip mroute *\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_mroute_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1324"
    }
  },
  "clear_ip_mroute_vrf": {
    "iosxe": {
      "doc": " clear ipv6 mld group\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_mroute_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/clear.py#L12"
    }
  },
  "clear_ip_nat_translation_all": {
    "iosxe": {
      "doc": " clear ip nat translation *\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_nat_translation_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1304"
    }
  },
  "clear_ipv6_mfib_vrf_counters": {
    "iosxe": {
      "doc": " clear ipv6 mfib vrf * counters\n        Args:\n            device (`obj`):             Device object\n            vrf_name ('str', optional): VRF name. Default will clear all vrf counters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipv6.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_mfib_vrf_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/clear.py#L11"
    }
  },
  "clear_ipv6_mld_group": {
    "iosxe": {
      "doc": " clear ipv6 mld group\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipv6.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_mld_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/clear.py#L35"
    }
  },
  "clear_logging": {
    "iosxe": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L751"
    },
    "iosxr": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L346"
    },
    "nxos": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L312"
    }
  },
  "clear_macsec_counters": {
    "iosxe": {
      "doc": " Clears macsec counters on device\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interfaces\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_macsec_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L314"
    }
  },
  "clear_mdns_query_db": {
    "iosxe": {
      "doc": " Clears mdns query database statistics on device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing query-db statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_query_db",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L261"
    }
  },
  "clear_mdns_statistics": {
    "iosxe": {
      "doc": " Clears mdns statistics on device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L240"
    }
  },
  "clear_mpls_counters": {
    "iosxe": {
      "doc": " Clear mpls counters\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mpls_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L230"
    }
  },
  "clear_mpls_ldp_neighbor": {
    "iosxe": {
      "doc": " clear mpls ldp neighbor {}\n        Args:\n            device ('obj'): Device object\n            neighbor_ip ('str'): neighbor ip\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mpls_ldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L259"
    }
  },
  "clear_ospf3_neighbor": {
    "junos": {
      "doc": " Clear ospf3 neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "ospf3.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf3_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/clear.py#L3"
    }
  },
  "clear_ospf_neighbor": {
    "junos": {
      "doc": " Clear ospf neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "ospf.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/clear.py#L3"
    }
  },
  "clear_ospf_trace_log": {
    "junos": {
      "doc": "\n    Clear log ospf_trace_log\n\n    Args:\n        device (`obj`): Device object\n        ospf_trace_log(`str`): OSPF trace log\n\n    Returns:\n        None\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf_trace_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L74"
    }
  },
  "clear_packet_buffer": {
    "ios": {
      "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_packet_buffer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L211"
    },
    "iosxe": {
      "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_packet_buffer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L217"
    }
  },
  "compare_archive_config_dicts": {
    "iosxe": {
      "doc": " Checks for differences between two 'show archive' dictionaries\n\n        Args:\n            dict1('dict'): first dictionary\n            dict2('dict'): seconds dictionary\n\n        Returns:\n            list of commands that are different between the two configs\n        Raises:\n            None\n    ",
      "module_name": "archive.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_archive_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/verify.py#L9"
    }
  },
  "compare_config_dicts": {
    "com": {
      "doc": " Compare two configuration dicts and return the differences\n\n        Args:\n            a (`dict`): Configuration dict\n            b (`dict`): Configuration dict\n            exclude (`list`): List of item to ignore. Supports Regex.\n                              Regex must begins with ( )\n        Returns:\n            out (`str`): differences\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L233"
    }
  },
  "compare_metric_of_route": {
    "junos": {
      "doc": " Compare the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            ip_address ('str'): IP address in show command.\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2643"
    }
  },
  "compared_with_running_config": {
    "com": {
      "doc": " Show difference between given config and current config\n        Args:\n            config ('dict'): Config to compare with\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "compared_with_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1429"
    }
  },
  "concurrent_ssh_sessions": {
    "iosxe": {
      "doc": "\n    Generates multiple ssh sessions\n        Args:\n            device (`obj`): Device object\n            testbed (`str`): Testbed object\n            enable_pass (`str`): enable password\n            concurrent_sessions (`int`): count of ssh session to generate\n            iteration_times (`int`): count of concurrent_sessions to repeat\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "concurrent_ssh_sessions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1159"
    }
  },
  "config_acl_on_interface": {
    "iosxe": {
      "doc": " Configures acl on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L138"
    }
  },
  "config_device_tracking_policy": {
    "iosxe": {
      "doc": " Configure a device-tracking policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains any of the following keys:\n                    cache_guard ('str', optional):             cache poisoning guard mode\n                    data_glean ('str', optional):              source address gleaning\n                    destination_glean ('str', optional):       destination address gleaning\n                    device_role ('str', optional):             device role\n                    distribution_switch ('str', optional):     hostname of ip address\n                    limit_address_count ('dict', optional):\n                        all ('int', optional):                 max value\n                        ipv4 ('int', optional):                address limit for ipv4 per mac\n                        ipv6 ('int', optional):                address limit for ipv6 per mac\n                    origin ('str', optional):                  configure origin of the policy\n                    prefix_glean ('str', optional):            glean prefixes in RA and DHCP-PD traffic\n                    protocol ('dict', optional):\n                        name ('dict'):                         name can be arp, dhcp4, dhcp6, ndp, or udp\n                            prefix_list ('str'):               name of prefix-list\n                    security_level ('str', optional):          security level\n                    tracking ('str', optional):                tracking behavior\n                    trusted_port ('bool', optional):           setup trusted port\n                    vpc ('int', optional):                     setup vpc port\n                ex.)\n                    [\n                        {\n                            \"cache_guard\": \"ipv4\",\n                            \"data_glean\": \"log-only\",\n                            \"destination_glean\": \"log-only\",\n                            \"device_role\": \"node\",\n                            \"distribution-switch\": \"\"10.10.10.10\"\",\n                            \"limit_address_count\": {\n                                \"all\": 1000,\n                                \"ipv4\": 50,\n                                \"ipv6\": 10\n                            },\n                            \"origin\": \"cli\",\n                            \"prefix_glean\": \"only\",\n                            \"protocol\": {\n                                \"arp\": {\n                                    \"prefix_list\": \"name1\"\n                                },\n                                \"dhcp4\": {\n                                    \"prefix_list\": \"name2\"\n                                }\n                            },\n                            \"security_level\": \"guard\",\n                            \"tracking\": \"enable\",\n                            \"trusted_port\": True,\n                            \"vpc\": 10\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure device-track policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L500"
    }
  },
  "config_edge_trunk_on_interface": {
    "iosxe": {
      "doc": " Configure spanning portf edge trunk on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_edge_trunk_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2193"
    }
  },
  "config_enable_ip_routing": {
    "iosxe": {
      "doc": " Enable IP Routing\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_enable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L58"
    }
  },
  "config_enable_ipv6_routing": {
    "iosxe": {
      "doc": " configure ipv6 routing on device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n    ",
      "module_name": "ipv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_enable_ipv6_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/configure.py#L11"
    }
  },
  "config_encapsulation_on_interface": {
    "iosxe": {
      "doc": " Configure encapsulation on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            vlan  (`str`): Vlan to be configured with encapsulation\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_encapsulation_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L584"
    }
  },
  "config_eompls_pseudowire": {
    "iosxe": {
      "doc": "configure pseudowire interface \n        Args:\n            device (`obj`): Device \n            pseudowire_name (`str`): Specifies the pseudowire interface\n            neigh (`str`) : Specifies the peer IP address\n            vc_id (`str`) : virtual circuit (VC) ID value of the Layer 2 VPN (L2VPN) pseudowire.\n            flow_ip (`str`) : Specifies load-balance factor Eg:dst-ip so on\n            flow_label (`str`) : core load balancing based on flow-labels.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_eompls_pseudowire",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1083"
    }
  },
  "config_extended_acl": {
    "iosxe": {
      "doc": " Configure extended ACL on device\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny), default value is None\n            protocol ('str'): protocol, default value is None\n            src_ip ('str'): source start ip, default value is None\n            src_step ('str'): increment step for source ip, default value is None\n            src_wildcard ('str'): source wildcard, default value is None\n            dst_ip ('str'): destination start ip, default value is None\n            dst_step ('str'): increment step for destination ip, default value is None\n            dst_wildcard ('str'): destination wildcard, default value is None\n            dst_port ('str'): Acl destination port, default value is None\n            entries ('int'): Acl entries, default value is None\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L13"
    }
  },
  "config_flow_exporter": {
    "iosxe": {
      "doc": " Config Flow Exporter on Device\n\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n            dest_ip (`str`): Destination IP\n            udp_port (`str`): UDP port\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_flow_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L12"
    }
  },
  "config_flow_monitor_on_interface": {
    "iosxe": {
      "doc": " Config Flow Monitor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            exporter_name (`str`): Flow exporter name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_flow_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L72"
    }
  },
  "config_identity_ibns": {
    "iosxe": {
      "doc": " Configured 802.1x port based authentication for\n        IBNS2.0 with service policy\n    Mandatory args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            access(bol): Set to True, False to configure in Trunk mode\n            Policy_map: Name of policy map to be attached.\n    Optional args:\n        data_vlan(`int`): vlan_id for data traffic\n        voice_vlan(`int`): vlan_id for voice traffic\n        max_req:(`int`) Max No. of Retries\n        max-reauth-req(`int`): Max No. of Reauthentication Attempts\n        authmod('str'): default(multi-auth), mult-host peer, multi-domain etc\n        closed('bol'):  {False: closed | True: open (default) }\n        reauth('str'):  server or numberic range is 1 to 65535 seconds\n        ctr('str'): {both | in}\n        txp(`int`):The range is 1 to 65535 seconds\n        port_control ('str'): {auto|force-authorized|force-unauthorized}. Default = 'auto'\n    Returns:\n            None\n    Raises:\n            SubCommandFailure: Failed to configure 802.1x port based authentication\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_identity_ibns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L303"
    }
  },
  "config_interface_carrier_delay": {
    "iosxe": {
      "doc": " Configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            delay (`int`): Delay time in second\n            delay_type (`str`): Delay type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L339"
    }
  },
  "config_interface_mtu": {
    "iosxe": {
      "doc": " Config MTU on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mtu_bytes (`int`): MTU bytes\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L455"
    }
  },
  "config_interface_negotiation": {
    "iosxe": {
      "doc": " Config negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L79"
    }
  },
  "config_interface_ospf": {
    "iosxe": {
      "doc": " Config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): Ospf process id\n            area ('int'): Ospf area code\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L521"
    }
  },
  "config_interface_ospfv3": {
    "iosxe": {
      "doc": "config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospfv3_pid (`str`): Ospfv3 process id\n            area ('int'): Ospf area code\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L553"
    }
  },
  "config_interface_subinterface_and_secondary_addresses": {
    "iosxe": {
      "doc": " Configure sub-interface and secondary addresses on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sub_interface_num (`int`): Subinterface to be added to\n                                 interface name\n            ip_address(`str`): IP addressed to be configured on interface\n            prefix(`str`): prefix to be used in configuration\n            encap_type (`str`): Encapsulation type\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_subinterface_and_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L662"
    }
  },
  "config_ip_on_interface": {
    "iosxe": {
      "doc": " Configure IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): IP addressed to be configured on interface\n            mask (`str`): Mask address to be used in configuration\n            ipv6_address (`str`): IPv6 address with subnet mask\n            eth_encap_type (`str`): Encapsulation type\n            eth_encap_val (`str`): Encapsulation value\n            sub_interface (`str`): Subinterface to be added to interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L587"
    }
  },
  "config_ip_on_vlan": {
    "iosxe": {
      "doc": "Configure an IPv4/IPv6 address on a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n            ipv4_address (`str`): IPv4 address\n            subnetmask (`str`): Subnet mask to be used for IPv4 address\n            ipv6_address (`str`): Ipv6 address\n            ipv6_prefix_len (`int`): length of IPv6 prefix\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to configure Ipv4/Ipv6 address on vlan\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_on_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L39"
    }
  },
  "config_ip_pim": {
    "iosxe": {
      "doc": " Enables PIM sparse mode on an interface.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mode (`str`): specifiy pim mode\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L13"
    }
  },
  "config_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Configure an ipv6 nd raguard policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains following keys:\n                    device_role ('str', optional):             device role\n                    hop_limit ('dict', optional):\n                        max ('int'):                           maximum hop limit\n                        min ('int'):                           minimum hop limit\n                    managed_config_flag ('bool', optional):    enable M flag\n                    match ('dict', optional):\n                        ipv6 ('str'):                          access list to match\n                        ra ('str'):                            prefix list to match\n                    other_config_flag ('bool', optional):      enable O flag\n                    router_preference ('dict', optional):      enable router preference flag\n                    trusted_port ('bool', optional):           setup trusted port\n                ex.)\n                    [\n                        {\n                            \"device_role\": \"host\",\n                            \"hop_limit\": {\n                                \"max\": 100,\n                                \"min\": 50\n                            },\n                            \"managed_config_flag\": True,\n                            \"match\": {\n                                \"ipv6\": \"test\",\n                                \"ra\": \"bar\"\n                            },\n                            \"other_config_flag\": False,\n                            \"router_preference\": \"high\",\n                            \"trusted_port\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L733"
    }
  },
  "config_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Configure an ipv6 source-guard policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains following keys:\n                    deny ('str', optional):         block data traffic\n                    permit ('str', optional):       allow data traffic\n                    trusted ('bool', optional):     setup trusted port\n                    validate ('str', optional):     validate source of received data traffic\n                ex.)\n                    [\n                        {\n                            \"deny\": \"global-autoconf\",\n                            \"permit\": \"link-local\",\n                            \"trusted\": True,\n                            \"validate\": \"address\",\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L906"
    }
  },
  "config_license": {
    "iosxe": {
      "doc": " Config license on Device\n\n        Args:\n            device (`obj`): Device object\n            license (`str`): License name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "system.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_license",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/configure.py#L13"
    }
  },
  "config_mac_aging_time": {
    "iosxe": {
      "doc": " Config mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n            aging_time (`int`): mac aging-time\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L12"
    }
  },
  "config_mac_learning": {
    "iosxe": {
      "doc": " Config mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L70"
    }
  },
  "config_macsec_keychain_on_device": {
    "iosxe": {
      "doc": " Configures macsec key chain on device\n\n        Args:\n            device ('obj'): device to use\n            keychain_name ('str'): keychain name to configure\n            key_string ('str'): key string to configure\n            lifetime ('list'): start and end timings\n              ex.)\n                lifetime = [\"10:36:55 Aug 18 2021\", \"10:37:55 Aug 18 2021\"]\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_keychain_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L85"
    }
  },
  "config_macsec_network_link_on_interface": {
    "iosxe": {
      "doc": " Configures macsec network-link on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_network_link_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L190"
    }
  },
  "config_macsec_replay_protection_window_size": {
    "iosxe": {
      "doc": " Configures macsec replay-protection window-size on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            window_size ('str'): window size\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_replay_protection_window_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L54"
    }
  },
  "config_mka_keychain_on_interface": {
    "iosxe": {
      "doc": " Configures mka keychain on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            key_string ('str'): key string to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mka_keychain_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L159"
    }
  },
  "config_mka_policy_xpn": {
    "iosxe": {
      "doc": " Configures mka policy xpn on device or interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite value\n            sak_rekey_int ('str'): Sak rekey interval\n            key_server_priority ('str'): Key server priority\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mka_policy_xpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L250"
    }
  },
  "config_mpls_lable_protocol": {
    "iosxe": {
      "doc": " Config mpls lable protocol on interface or device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_lable_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L309"
    }
  },
  "config_mpls_ldp_explicit_on_device": {
    "iosxe": {
      "doc": " Config mpls ldp explicit on device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_explicit_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L514"
    }
  },
  "config_mpls_ldp_on_device": {
    "iosxe": {
      "doc": " Config ldp on Device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L61"
    }
  },
  "config_mpls_ldp_on_interface": {
    "iosxe": {
      "doc": " Config ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L16"
    },
    "junos": {
      "doc": " Config ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L12"
    }
  },
  "config_mpls_ldp_router_id_on_device": {
    "iosxe": {
      "doc": " Config mpls ldp router id on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            force ('bool') : router-id is instantly changed when the interface is down if true\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_router_id_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L361"
    }
  },
  "config_mpls_on_device": {
    "iosxe": {
      "doc": " configure mpls on device\n        Args:\n            device (`obj`): Device object\n            loopback_intf (`str`): Interface name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L231"
    }
  },
  "config_multicast_routing_mvpn_vrf": {
    "iosxe": {
      "doc": " Enables IP multicast routing for the MVPN VRF specified for the vrf-name argument.\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_multicast_routing_mvpn_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L70"
    }
  },
  "config_no_keepalive_intf": {
    "iosxe": {
      "doc": " configure no switchport and no keepalive on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_no_keepalive_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L178"
    }
  },
  "config_pseudowire_class": {
    "iosxe": {
      "doc": " configure pseudowire class\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name/ip address\n            pw_class ('str'): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_pseudowire_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L681"
    }
  },
  "config_pw_class_interface": {
    "iosxe": {
      "doc": " configure pseudowire class on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            peer_id (`str`): peer address\n            vc_id (`str`): vc id \n            pw_class  (`str`): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_pw_class_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L726"
    }
  },
  "config_rp_address": {
    "iosxe": {
      "doc": "Configures a static IP address of a rendezvous point for a multicast group range.\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            ip_address (`str`): IP address of the group-range \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L42"
    }
  },
  "config_speed_nonego_on_interface": {
    "iosxe": {
      "doc": " Configure speed nonego on interface\n\n        Args:\n            device (`obj`): Device object\n            interface ('str'): Interface to be configured\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_speed_nonego_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L559"
    }
  },
  "config_standard_acl_for_ip_pim": {
    "iosxe": {
      "doc": " Configures a standard IP access list.\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            host_ip ('str'): source start ip\n            host_wildcard ('str'): increment step for source ip\n            vrf ('str'): vrf name\n            rp_address ('str'): mention the IP address of the rendezvous point for the group.\n            bir_enabled ('boolean', optional): sets true if enabled.  Defaults to False.\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_standard_acl_for_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L196"
    }
  },
  "config_vc_backup_peer": {
    "iosxe": {
      "doc": "configure backup peer vc on interface\n        Args:\n\t    device (`obj`): Device object\n\t    interface (`str`): interface, backup peer need to be configured on\n            peer_address (`str`): Address of the peer, main vc\n            backup_peer('str'): Peer address of backup vc\n            vc_id (`str`): VC ID for the back up peer\n            backup_vc_id(`str`): Backup peer vc id\n            pw_class(`str`): psuedowire class \n            backup_pw_class(`str`): psuedowire class of backup peer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vc_backup_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1047"
    }
  },
  "config_vlan": {
    "iosxe": {
      "doc": " Configures a VLAN on Interface or Device\n    e.g.\n    vlan 666\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L15"
    }
  },
  "config_vlan_tag_native": {
    "iosxe": {
      "doc": " Configure vlan dot1q tag native\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vlan_tag_native",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L92"
    }
  },
  "config_wan_macsec_on_interface": {
    "iosxe": {
      "doc": " Configures WAN Macsec on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            speed ('str'): Operation speed\n            destination_address ('str'): eapol destination-address\n            eth_type ('str'): eapol eth-type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_wan_macsec_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L12"
    }
  },
  "config_xconnect_on_interface": {
    "iosxe": {
      "doc": " configure xconnect neighbor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            neighbor (`str`): Neighbor to be configured on xconnect\n            vcid (`str`): Vcid to be configured through xconnect\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L653"
    }
  },
  "configure_aaa_default_dot1x_methods": {
    "iosxe": {
      "doc": " configure aaa default dot1x methods\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Radius Server Grp name\n            group_type ('str'): Group type. Options are 'group','cache','local'\n            server_grp2 (`str`, optional): 2nd Radius Server Grp name. i.e aaa cache feature (Default is None)\n            group_type2 ('str', optional): 2nd Group type. Options are 'group','cache','local' (Default is None)\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            configure_aaa_default_dot1x_methods(switch1,'testRadiusGrp')\n            configure_aaa_default_dot1x_methods(switch1,'radiusGroup',group_type='cache',\n                group_type2='group',server_grp2='radiusGroup')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_default_dot1x_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L494"
    }
  },
  "configure_aaa_login_method_none": {
    "iosxe": {
      "doc": " This configure will enable login method none that is applicable for line and vty\n    from getting locked for password \n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_login_method_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L552"
    }
  },
  "configure_aaa_new_model": {
    "iosxe": {
      "doc": " configure aaa new-model\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_new_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L475"
    }
  },
  "configure_access_session_monitor": {
    "iosxe": {
      "doc": " Enable access-session  monitor\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable access-session monitor\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L209"
    }
  },
  "configure_access_session_single_policy_interface": {
    "iosxe": {
      "doc": "Common funtion to configure access-session single-policy interface for both forced and without forced\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure access-session single-policy interface\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_single_policy_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L35"
    }
  },
  "configure_access_session_single_policy_policy_name": {
    "iosxe": {
      "doc": "Common function to configure access-session single-policy policy-name for both forced and without forced \n        Args:\n            device ('obj'): device to use\n            policy_name (`str`): Policy name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure access-session single-policy policy-name\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_single_policy_policy_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L58"
    }
  },
  "configure_access_session_sticky": {
    "iosxe": {
      "doc": " configure interface-template sticky timer\n        Args:\n            device ('obj'): device to use\n            timer (int): <1-65535>  Enter a value between 1 and 65535\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure interface-template sticky timer\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L237"
    }
  },
  "configure_any_radius_server": {
    "iosxe": {
      "doc": " Configure radius server on device\n    Args:\n        device (`obj`): Device object\n        server_name (`str`): Radius server name\n        addr_type (`str`): Address type v4 or v6\n        address (`str`): ISE Ip\n        authport (`int`): Auth port\n        acctport (`int`): Acct port\n        secret (`str`): ISE Secret key\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_any_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L385"
    }
  },
  "configure_arp_timeout": {
    "iosxe": {
      "doc": " Config arp timeout on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            timeout (`int`): timeout in second\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L12"
    }
  },
  "configure_attachment_circuit_vfi": {
    "iosxe": {
      "doc": "\n    configure the Attachment Circuit with the VFI.\n        Args:\n\t    device (`obj`): Device \n        interface(`str`): interface name\n        vfiname(`str`): the Layer 2 VFI that you are binding to the VLAN port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_attachment_circuit_vfi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1385"
    }
  },
  "configure_auth_method": {
    "iosxe": {
      "doc": "Configure cli \n    authentication method mab/dot1x pae authenticator\n    Args:\n        device (`obj`): Device object\n        value (`str`): mab/dot1x\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_auth_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L831"
    }
  },
  "configure_authentication_convert_to_new_style": {
    "iosxe": {
      "doc": "Common function to configure authentication convert-to new-style for both forced and without forced\n        Args:\n            device ('obj'): device to use\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure authentication convert-to new-style\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_convert_to_new_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L80"
    }
  },
  "configure_authentication_convert_to_new_style_single_policy_interface": {
    "iosxe": {
      "doc": "Common funtion to configure authentication convert-to new-style\n        single-policy interface for both forced and without forced \n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure authentication convert-to new-style single-policy interface\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_convert_to_new_style_single_policy_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L11"
    }
  },
  "configure_authentication_host_mode": {
    "iosxe": {
      "doc": "Configure legacy cli authentication host-mode multi-auth/multi-domain/multi-host/single-host\n    Args:\n        device (`obj`): Device object\n        mode (`str`): Host mode\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_host_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L537"
    }
  },
  "configure_authentication_order": {
    "iosxe": {
      "doc": "Configure legacy cli authentication order dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        order (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_order",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L594"
    }
  },
  "configure_authentication_parameters_interface": {
    "iosxe": {
      "doc": " Configure authentication parameters on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure the authentication parameters\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_parameters_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2355"
    }
  },
  "configure_authentication_periodic": {
    "iosxe": {
      "doc": "Configure legacy cli \n        authentication periodic\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_periodic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L742"
    }
  },
  "configure_authentication_port_control": {
    "iosxe": {
      "doc": "Configure legacy cli \n    authentication port-control auto/force-authorized/force-unauthorized\n    Args:\n        device (`obj`): Device object\n        control (`str`): auto/force-authorized/force-unauthorized\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_port_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L682"
    }
  },
  "configure_authentication_priority": {
    "iosxe": {
      "doc": "Configure legacy cli authentication priority dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        priority (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L638"
    }
  },
  "configure_authentication_timer_reauth": {
    "iosxe": {
      "doc": "Configure legacy cli \n    authentication timer reauthenticate value/server\n    Args:\n        device (`obj`): Device object\n        value (`str`): authentication timer reauthenticate value/server\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_timer_reauth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L786"
    }
  },
  "configure_autodiscovery_bgp_signalling_ldp_template": {
    "iosxe": {
      "doc": " Config autodiscovery bgp signaling ldp template\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n            vpn_id ('str'): vpn id to be configured\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_autodiscovery_bgp_signalling_ldp_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1511"
    }
  },
  "configure_bfd_on_interface": {
    "iosxe": {
      "doc": " Configures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            interval ('str'): interval\n            min_rx ('str'): min_rx\n            multiplier ('str'): multiplier\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bfd_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L12"
    }
  },
  "configure_bgp_additional_paths": {
    "iosxe": {
      "doc": " Configure additional_paths on bgp router\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L817"
    }
  },
  "configure_bgp_address_advertisement": {
    "iosxe": {
      "doc": " Configure address advertisement on router bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            ip_address ('str'): ip address\n            mask ('str'): mask\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_address_advertisement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L875"
    }
  },
  "configure_bgp_address_family_attributes": {
    "iosxe": {
      "doc": " configure attributes for bgp \n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            neighbor ('str'): neighbor address to send label\n            send_label (`boolean`) :  send MPLS labels with the routes if true\n            route_reflector_client (`boolean`) : sets a device as routing information exchange server if true\n            next-hop-self all (`boolean`) : sets a device as routing information exchange server if true\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_address_family_attributes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L943"
    }
  },
  "configure_bgp_advertise_additional_paths": {
    "iosxe": {
      "doc": " Configures advertisement for additional paths\n\n        Args:\n            device ('obj'): device to configure\n            bgp_as ('str'): router bgp number\n            neighbor ('str'): neighbor to advertise to\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_advertise_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L845"
    }
  },
  "configure_bgp_graceful_restart": {
    "iosxe": {
      "doc": " Configures graceful-restart on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1012"
    }
  },
  "configure_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Configures import path selection on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n            type('str'): type of selection to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L25"
    }
  },
  "configure_bgp_l2vpn_neighbor_activate": {
    "iosxe": {
      "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            address_family_modifier ('str') : the endpoint provisioning information to be distributed\n                                              to BGP peers.\n            community('str') :  Specifies the communities attribute to be sent to a BGP neighbor.\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_l2vpn_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L499"
    }
  },
  "configure_bgp_log_neighbor_changes": {
    "iosxe": {
      "doc": " Configures log-neighbor-changes on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_log_neighbor_changes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1036"
    }
  },
  "configure_bgp_neighbor": {
    "iosxe": {
      "doc": " Configures bgp neighbor on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_as('str'): neighbor_as to configure\n            neighbor_address('str'): address of neighbor\n            source_interface('str'): used to configure update-source on neighbor\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L95"
    }
  },
  "configure_bgp_neighbor_activate": {
    "iosxe": {
      "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            steps('obj')               : Context manager steps\n            peer_policy('str')         : peer policy to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L426"
    }
  },
  "configure_bgp_neighbor_as_override": {
    "iosxe": {
      "doc": " Configure AS override in VRF\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_as_override",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L781"
    }
  },
  "configure_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " Configure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L722"
    }
  },
  "configure_bgp_neighbor_send_community": {
    "iosxe": {
      "doc": " Add send-community attribute for bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n            send_community ('str')     : send-community attribute to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_send_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1060"
    }
  },
  "configure_bgp_redistribute_connected": {
    "iosxe": {
      "doc": " Configures redistrubute connected on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1289"
    }
  },
  "configure_bgp_redistribute_ospf": {
    "iosxe": {
      "doc": " Configures redistribute ospf on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            ospf_instance('str'): ospf redistribute to configure\n            vrf('str'): vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1184"
    }
  },
  "configure_bgp_router_id": {
    "iosxe": {
      "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            router_id('str'): router_id of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L60"
    }
  },
  "configure_bgp_soo_on_inbound_from_neighbor": {
    "iosxe": {
      "doc": " Configures extended community SoO on inbound from neighbor using soo_rt\n\n        Args:\n            device('obj'): device to execute on\n            soo_rt('str'): route to configure SoO with\n            bgp_as('str'): what router bgp to configure on\n            vrf('str'): what vrf to configure on\n            neighbor_address('str'): what neighbor to configure on\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_soo_on_inbound_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L160"
    }
  },
  "configure_bgp_template_peer_policy": {
    "iosxe": {
      "doc": " Configures template peer-policy on BGP\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            policy:('str'): policy to be configured\n            send_community('str'): community to be configured\n            route_reflect_client('str') : enable router to acts as a routing information exchange server for all other iBGP routers.\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_template_peer_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1222"
    }
  },
  "configure_bgp_template_peer_session": {
    "iosxe": {
      "doc": " Configures template peer-session on BGP\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            session_name:('str'): session name to be used\n            remote_as('str'): remote as to configured\n            source_intf('str'): source interface to be used\n            neighbor('str'): neighbor ip\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_template_peer_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1255"
    }
  },
  "configure_by_jinja2": {
    "com": {
      "doc": " Configure using Jinja template\n\n        Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "jinja.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/utils.py#L20"
    }
  },
  "configure_cdp": {
    "ios": {
      "doc": " \n        Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L11"
    },
    "iosxe": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L11"
    },
    "iosxr": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L11"
    },
    "nxos": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L9"
    }
  },
  "configure_class_map": {
    "iosxe": {
      "doc": " Configures class-map\n        Args:\n             device ('obj'): device to use\n             class_name ('str'): name of the class \n             match_val  ('str'): values of the match\n             match_mode ('str',optional): name of the match_mode, default is None\n             match_val1 ('str',optional): name of the match_mode 2, default is None\n             match_mode1 ('str',optional): name of the match_mode type, default is None\n             class_match_type ('str',optional): name of the match type, default is match-all\n             access_group ('bool', optional): create class match with acls groups, default is False\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure             \n    ",
      "module_name": "policy_class_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_class_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_class_map/configure.py#L13"
    }
  },
  "configure_coa": {
    "iosxe": {
      "doc": "\n    COA Configuration for dot1x and mab\n    Args:\n        device ('obj'): Device object\n        config_dict ('dict'): Dictionary of interface configuration details\n            dictionary contains following keys:\n                auth_type(all, any, session-key) : all(Matches when all attributes match)\n                                                    any(Matches when all sent attributes match)\n                                                    session-key(Matches with session key attribute only)\n                hostname(hostname/ipv4/ipv6) : Ip/ipv6 or hostname of the RADIUS client\n                encryption_type(0,6,7): 0(UNENCRYPTED), 6(ENCRYPTED), 7(HIDDEN)\n                server_key(str) : Specify a RADIUS client server-key\n                ignore_retransmission(bool) : Drop packets using same radius id\n                ignore_server-key(bool) : Ignore shared secret\n                ignore_session-key(bool) : Ignore attr 151\n\n    Returns:\n        None\n\n    Example: {\n                'auth_type': 'all',\n                'hostname': 'hostname',\n                'encryption_type' : 0,\n                'server_key' : 'secretkey',\n                'ignore_retransmission': True,\n                'ignore_server_key': True,\n                'ignore_session_key': True\n                }\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_coa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L209"
    }
  },
  "configure_common_criteria_policy": {
    "iosxe": {
      "doc": " Configure aaa common criteria policy\n    Args:\n        device (`obj`):                 Device object\n        policy_name (`str`):            Policy name\n        char_changes (`str`, optional): Number of change characters between old and new passwords\n        copy (`str`, optional):         Copy from policy\n        lifetime (`dict`, optional):    lifetime configuration\n        lower_case (`str`, optional):   Number of lower-case characters\n        upper_case (`str`, optional):   Number of upper-case characters\n        max_len (`str`, optional):      Specify the maximum length of the password\n        min_len (`str`, optional):      Specify the minimum length of the password\n        no_value (`dict`, optional):    value to unconfigure\n        num_count (`str`, optional):    Number of numeric characters\n        special_case (`str`, optional): Number of special characters\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_common_criteria_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L846"
    }
  },
  "configure_community_list_community_list_permit": {
    "iosxe": {
      "doc": " Configure community list permit\n\n        Args:\n            device ('obj'): Device object\n            community_list('list'): community list which contains dictionary\n                dictionary contains following 3 keys:\n                    seq ('int'): sequence number\n                    permit ('str'): permit value\n                    community ('str'): community value - Optional\n                ex.)\n                    [ \n                        {\n                            'seq': 1,\n                            'permit': 'deny',\n                            'community': 62000:1\n                        },\n                        {   \n                            'seq': 1,\n                            'permit': 'permit'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'deny',\n                            'community': '62000:2'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'permit'\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "community_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_community_list_community_list_permit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/community_list/configure.py#L15"
    }
  },
  "configure_control_plane_control_plane_policy": {
    "iosxe": {
      "doc": " Configure control plane policy\n\n        Args:\n            device ('obj'): Device object\n            config('list'): List of commands to configure\n                ex.)\n                    [\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': False\n                        },\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': True\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring control plane policy\n\n    ",
      "module_name": "control_plane.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_control_plane_control_plane_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/control_plane/configure.py#L11"
    }
  },
  "configure_cts_authorization_list": {
    "iosxe": {
      "doc": " Configure Local authorization list to use for CTS\n        Args:\n            device ('obj'): device to use\n            authlist ('str'): Named authorization list to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring Local authorization list\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_authorization_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L14"
    }
  },
  "configure_cts_credentials": {
    "iosxe": {
      "doc": " Configure CTS credentials\n        Args:\n            device ('obj'): device to use\n            credential_id ('str'): Specify the CTS device ID\n            password (`str`): Specify device's CTS password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts credential\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L193"
    }
  },
  "configure_default_gateway": {
    "iosxe": {
      "doc": " Configures default gateway\n\n        Args:\n            device ('obj'): Device obj\n            gateway_ip ('str'): IP address of gateway to be configured\n              \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_gateway",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L374"
    }
  },
  "configure_device": {
    "com": {
      "doc": "shut interface\n\n        Args:\n            device (`obj`): Device object\n            config (`str`): Configuration to apply\n            config_timeout ('int'): Timeout value in sec, Default Value is 150 sec\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L754"
    }
  },
  "configure_device_sgt": {
    "iosxe": {
      "doc": " Configure Device SGT\n        Args:\n            device ('obj'): device to use\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Device SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_sgt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L70"
    }
  },
  "configure_device_tracking_binding": {
    "iosxe": {
      "doc": "Adds static entry to binding table\n    Args:\n        device ('obj'): device object\n        vlan ('str'): vlan id\n        address ('str'): ip address (v4 or v6)\n        interface ('str'): interface for entry - Eg. TWE 1/0/1\n        mac ('str'): entry's mac address\n        tracking ('str', optional): Set the tracking for the device - Eg. \"enable\", \"disable\", or \"default\" . Defaults to \"default.\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to add static entry\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1783"
    }
  },
  "configure_device_tracking_binding_options": {
    "iosxe": {
      "doc": " Configures device-tracking binding options\n        Args:\n            device ('obj'): device object\n            reachable_lifetime ('str', optional): Default max time in REACHABLE without activity - can be 1-86400 or \"infinite\". Defaults to None\n            stale_lifetime ('str', optional): Default max time in STALE without activity - can be 1-86400 or \"infinite\". Defaults to None\n            down_lifetime ('str', optional): Default max time in DOWN without activity - can be 1-86400 or \"infinite\". Defaults to None\n            max_entries ('int', optional): Max number of entries - can be 1-1000000. Defaults to None\n            mac_limit ('int', optional): Max number of mac entries - can be 1-1000000. Defaults to None\n            port_limit ('int', optional): Max number of port entries - can be 1-1000000. Defaults to None\n            vlan_limit ('int', optional): Max number of vlan entries - can be 1-2000000. Defaults to None\n            logging ('bool', optional): Enable syslog logging of binding table events. Defaults to False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure device-tracking binding\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_binding_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1831"
    }
  },
  "configure_device_tracking_policy": {
    "iosxe": {
      "doc": " Configure device tracking Policy\n        Args:\n            device ('obj'): device to use\n            client_policy_name ('str'): name of the policy to be configured on client side\n            server_policy_name ('str'): name of the policy to be configured on server side\n            protocol ('str'): protocol to be configured (arp,dhcp4,dhcp6,ndp,udp)\n\n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure: Failed configuring device tracking policy\n    ",
      "module_name": "device_tracking.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/device_tracking/configure.py#L13"
    }
  },
  "configure_device_tracking_tracking": {
    "iosxe": {
      "doc": " Configure device-tracking tracking\n\n    Args:\n        device (\"obj\"): The device to configure\n        auto_source (\"str\", optional): The configuration for auto_source - either override or failback address. Defaults to None.\n        retry_interval (\"str\", optional): Device-tracking retry-interval in seconds. Defaults to None.\n\n    Raises:\n        SubCommandFailure: Failed to configure device-tracking tracking\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_tracking",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2040"
    }
  },
  "configure_device_tracking_upgrade_cli": {
    "iosxe": {
      "doc": " Configures device-tracking upgrade-cli {option}\n    Args:\n        device ('obj'): device to use\n        force ('bool'): option to force the upgrade\n        revert: ('bool'): option to revert the upgrade\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: \"Failed to configure device-tracking upgrade-cli with\n        force {force} and revert {revert}\"\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_upgrade_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L262"
    }
  },
  "configure_dhcpv6_guard_policy": {
    "iosxe": {
      "doc": " Configure DHCPv6 Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCPv6 guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcpv6_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L44"
    }
  },
  "configure_disable_aes_encryption": {
    "iosxe": {
      "doc": "\n        removes aes password encryption\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandError\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_disable_aes_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L314"
    }
  },
  "configure_dot1x_cred_profile": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): dot1x credential profile name\n            username (`str`): username for dot1x user\n            passwd (`str`): password in plain text\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure dot1x credential\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_cred_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L37"
    }
  },
  "configure_dot1x_supplicant": {
    "iosxe": {
      "doc": "Configure switch as dot1x supplicant/client\n    Args:\n        device ('obj'): device to use\n        interface (`str`): Interface name\n        cred_profile_name (`str`,optional): dot1x credential profile name\n        eap_profile (`str`, optional): eap profile name (Default is None)\n        auth_port_control ('str',optional): Port control type (i.e auto, force-authorized)\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_supplicant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L123"
    }
  },
  "configure_dynamic_path_in_tunnel": {
    "iosxe": {
      "doc": "configure dynamic path in tunnel\n\n        Args:\n            device (`obj`): Device object\n            tunnel (`str`): Tunnel name\n            path_option (`str`): Mention the path option\n            attribute_name (`str`): Attribute name to be set\n            lockdown(`Boolean`): set the lockdown if true\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_path_in_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L822"
    }
  },
  "configure_eap_method": {
    "iosxe": {
      "doc": " configure EAP method\n\n        Args:\n            device ('obj'): Device object\n            server_config ('dict'): Dict object\n              dictionary contains following keys:\n                key_name_compliance ('bool'): eap Key-name (attr 102)\n                profile_word ('str'): specify a profile name (max 63 characters)\n                description ('str'): provide a description for the EAP profile\n                method ('str'): add an allowed method like gtc,fast,leap,md5,mschapv2,peap,tls\n                fast_profile_word ('str'): specify the method profile (max 63 characters)\n                pki_trustpoint ('str'): set the default pki trustpoint\n                exit_eap_profiles ('bool'): exit EAP profiles configuration submode\n        Returns:\n            None\n        Raises:\n           Failed configuring EAP method\n        Example:\n            server_config = {\n                     key_name_compliance = True,\n                     profile_word = \"word1\",\n                     description = \"des1\",\n                     method = \"grc\",\n                     fast_profile_word = \"w1\",\n                     pki_trustpoint = \"pki_word\",\n                     exit_eap_profiles = True,\n                     \n                    },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L12"
    }
  },
  "configure_eap_profile": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n            method ('str',optional). Method to use for eap authentication. Default is md5\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L61"
    }
  },
  "configure_eap_profile_md5": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_profile_md5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L102"
    }
  },
  "configure_eapol_dest_address_interface": {
    "iosxe": {
      "doc": " Configures EAPOL Destination Address on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be configured\n        dest_address ('str'): destination address to be configured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eapol_dest_address_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2784"
    }
  },
  "configure_eapol_eth_type_interface": {
    "iosxe": {
      "doc": " Configures EAPOL Ethernet Type on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be configured\n        eth_type ('str'): eth_type to be configured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eapol_eth_type_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2844"
    }
  },
  "configure_enable_aes_encryption": {
    "iosxe": {
      "doc": "\n        enables aes password encryption\n        Args:\n            device ('obj'): Device object\n            master_key ('str'): Master key(New key with minimum length of 8 chars)\n        Returns:\n            None\n        Raises:\n            SubCommandError\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_aes_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L277"
    }
  },
  "configure_enable_policy_password": {
    "iosxe": {
      "doc": " Configure enable password with policy\n    Args:\n        device (`obj`):                  Device object\n        password (`str`):                Password\n        policy_name (`str`, optional):   Policy name\n        password_type ('str', optional): Password type\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_policy_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L947"
    }
  },
  "configure_encapsulation_mpls_ldp": {
    "iosxe": {
      "doc": " Configures encapsulation mpls ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the encapuslation\n                               config to be applied\n            neigbor (`str`): Neighbor id\n            vlan_id (`str`): vlan id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_encapsulation_mpls_ldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1719"
    }
  },
  "configure_errdisable": {
    "iosxe": {
      "doc": " \n    Configures errdisable recovery cause and errdisable recovery interval\n    e.g.\n    errdisable recovery cause loopdetect\n    errdisable recovery interval 60\n    Args:\n        device ('obj') : Device object\n        recovery_cause ('str'): error disable recovery cause\n        recovery_interval ('int'): errdisable recovery interval integer in seconds\n    Returns:\n        None\n    ",
      "module_name": "error_disable.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_errdisable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/error_disable/configure.py#L15"
    }
  },
  "configure_evpn_default_gateway_advertise_global": {
    "iosxe": {
      "doc": " Configure default-gateway advertise in l2vpn evpn globally\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_default_gateway_advertise_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L336"
    }
  },
  "configure_evpn_evi_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_evi_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L277"
    }
  },
  "configure_evpn_instance_encapsulation_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            encap_type ('str): encapsulation \n                               vxlan | mpls \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_instance_encapsulation_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L214"
    }
  },
  "configure_evpn_instance_vlan_based_with_reoriginate_rt5": {
    "iosxe": {
      "doc": " Configuring l2vpn evpn instance vlan based by re-originating RT-5\n        Args:\n            device (`obj`): Device object\n            instance (`int`): instance number\n        Returns:\n            console ouput ('str'): incase of successful configuration\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_instance_vlan_based_with_reoriginate_rt5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L13"
    }
  },
  "configure_evpn_l2_instance_vlan_association": {
    "iosxe": {
      "doc": " Configure configure VLAN association to EVPN instance\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            evpn_instance('int'): EVPN Instance id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_l2_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L386"
    }
  },
  "configure_evpn_l3_instance_vlan_association": {
    "iosxe": {
      "doc": " configure VLAN association to EVPN l3 vni instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            vni_id('int'): VNI id\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_l3_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L443"
    }
  },
  "configure_evpn_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn instance\n        Args:\n            device (`obj`): Device object\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L160"
    }
  },
  "configure_explicit_path": {
    "iosxe": {
      "doc": " configure te explicit path\n\n        Args:\n            device (`obj`): Device object\n            path_name (`str`): Name of the path\n            path (`list`): list of ip address to destination\n            path_type (`str`): Mention the path type\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_explicit_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L612"
    }
  },
  "configure_explicit_path_in_tunnel": {
    "iosxe": {
      "doc": " configure explicit path in tunnel\n\n        Args:\n            device (`obj`): Device object\n            tunnel (`str`): Tunnel name\n            path_name (`str`): Name of the explicit path\n            path_option (`str`): Mention the path option\n            attribute_name (`str`): Attribute name to be set\n            lockdown(`Boolean`): set the lockdown if true\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_explicit_path_in_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L755"
    }
  },
  "configure_flow_monitor": {
    "iosxe": {
      "doc": " Config Flow Monitor on Device\n        Args:\n            device (`obj`): Device object\n            monitor_name (`str`): Flow Monitor name\n            exporter_name (`str`): Flow exporter name\n            record_name (`str`): Flow record name\n            timeout ('int'): Timeout\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring flow monitor\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L81"
    }
  },
  "configure_flow_record": {
    "iosxe": {
      "doc": " Config Flow Record on Device\n        Args:\n            device (`obj`): Device object\n            record_name (`str`): Flow record name\n            match_ipv4_field_1 ('str'): First IPv4 field to be configured\n            match_flow_field ('str'): Flow field to be configured\n            match_int_field ('str'): Interface field to be configured\n            match_ipv4_field_2 ('str'): Second IPv4 field to be configured\n            match_transport_field_1 ('str'): First transport field to be configured\n            match_transport_field_2 ('str'): Second transport field to be configured\n            collect_counter_bytes ('bool'): Enable counter field bytes\n            collect_counter_packets ('bool'): Enable counter field packets\n            collect_int_field ('str'): Collect interface field to be configured\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring Flow Record on Device\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L12"
    }
  },
  "configure_fnf_exporter": {
    "iosxe": {
      "doc": " Config Flow Exporter on Device \n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            dest_ip (`str`): Destination IP\n            source_int('str'): Interface\n            udp_port (`str`): UDP port\n            timeout ('int'): Timeout\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring fnf exporter\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L120"
    }
  },
  "configure_fnf_monitor_on_interface": {
    "iosxe": {
      "doc": " Config Fnf Monitor on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            monitor_name (`str`): Flow monitor name\n            direction ('str'): Direction of monitor (input/output)\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring interface with flow monitor\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L192"
    }
  },
  "configure_global_stackwise_virtual": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            domain ('str'): Stackwise-virtual domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_global_stackwise_virtual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L11"
    }
  },
  "configure_igmp_version": {
    "iosxe": {
      "doc": "configures the IGMP version that the switch uses on interfaces.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): mentions interface name\n            version (`int`): specifies the IGMP version that the switch uses.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_igmp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L96"
    }
  },
  "configure_ikev2_keyring": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            keyring_name ('str'): Name for the keyring\n            peer_name ('str'): peer name\n            peer_ip ('str'): peer ip addr\n            peer_mask ('str'): peer nw mask\n            key ('str'): preshared key\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L13"
    }
  },
  "configure_ikev2_profile": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ikev2 profile name\n            remote_addr ('str'): peer/remote ip address\n            remote_auth ('str'): remote authentication method\n            local_auth ('str'): local authentication method\n            keyring ('str'): ikev2 keyring name\n            dpd_hello_time ('int'): DPD R-U-THERE interval\n            dpd_retry_time ('int'): DPD Retry Interval\n            dpd_query ('str'): DPD queires on-demand or periodic\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L54"
    }
  },
  "configure_inherit_peer_session": {
    "iosxe": {
      "doc": " configure inherit peer session under bgp\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            peer_policy('str')         : peer policy to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_inherit_peer_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L469"
    }
  },
  "configure_interface_description": {
    "iosxe": {
      "doc": "configure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description(`str`): Description\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1329"
    }
  },
  "configure_interface_directed_broadcast": {
    "iosxe": {
      "doc": " Configures directed-broadcast on interface\n\n        Args:\n            device ('obj'): device to run on\n            interfaces ('list'): list of interfaces to configure\n            configure ('bool'): config/unconfig\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_directed_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L864"
    }
  },
  "configure_interface_for_authentication": {
    "iosxe": {
      "doc": "\n    Interface configuration for Dot1x\n    Args:\n        device(obj): Device object\n        config_list(list): List of configurations to configure\n        auth_type(str): Authentication method type(dot1x/mab)\n    Returns:\n        None if configuration is failed\n        config_list if configuration is succeded\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_authentication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1541"
    }
  },
  "configure_interface_for_dot1x": {
    "iosxe": {
      "doc": "\n    Interface configuration for Dot1x\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        order (str): Add an authentication method to the order list\n        priority (str): Add an authentication method to the priority list\n        port_control (str): Set the port-control value(auto, force-authorized, force-unauthorized)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'authentication open',\n            'authentication order dot1x,\n            'authentication priority dot1x,\n            'authentication port-control auto,\n            'dot1x pae authenticator'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'dot1x pae supplicant'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_dot1x",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1567"
    }
  },
  "configure_interface_for_mab": {
    "iosxe": {
      "doc": "\n    Interface configuration for Mac authentication bypass\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        order (str): Add an authentication method to the order list\n        priority (str): Add an authentication method to the priority list\n        port_control (str): Set the port-control value(auto, force-authorized, force-unauthorized)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'authentication open',\n            'authentication order mab,\n            'authentication priority mab,\n            'authentication port-control auto',\n            'dot1x pae authenticator',\n            'mab'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'dot1x pae supplicant'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_mab",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1618"
    }
  },
  "configure_interface_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1033"
    }
  },
  "configure_interface_l3_port_channel": {
    "iosxe": {
      "doc": " Configure Port channel and lag interfaces\n\n        Args:\n            target (`str`): Target device to configure on\n            port_channel (`str`): Port Channel Interface\n            neighbor_address (`str`): Peer IP address\n            neighbor_netmask(`str`): Peer address Net-mask\n            interfaces(`List`): List of interfaces to configure\n            testbed (`obj`): Testbed object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_l3_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L904"
    }
  },
  "configure_interface_mac_address": {
    "iosxe": {
      "doc": " Configure static mac address on interface\n    Args:\n        device (`obj`): Device object\n        interface ('str'): Interface to configure\n        mac ('str'): Mac address with format H.H.H\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2904"
    }
  },
  "configure_interface_monitor_session": {
    "iosxe": {
      "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            monitor_config (`list`): list of monitor session configuration\n                ex.) \n                    monitor_config = [{\n                            'session_name': 1,\n                            'session_type': 'erspan-source',\n                            'interface': 'GigabitEthernet10',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        },\n                        {\n                            'session_name': 2,\n                            'session_type': 'erspan-destination',\n                            'interface': 'GigabitEthernet11',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        }\n                    ]\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1386"
    }
  },
  "configure_interface_no_switchport": {
    "iosxe": {
      "doc": " Configures no switchport on interface\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_no_switchport",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2417"
    }
  },
  "configure_interface_ospfv3": {
    "iosxe": {
      "doc": " Config OSPFV3 on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): OspfV3 process id\n            area ('int'): Ospf area code\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2222"
    }
  },
  "configure_interface_passive": {
    "iosxr": {
      "doc": " Configure Interface passive\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_passive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L42"
    }
  },
  "configure_interface_point_to_point": {
    "iosxr": {
      "doc": " Configure Interface point to point\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_point_to_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L12"
    }
  },
  "configure_interface_pvlan_host_assoc": {
    "iosxe": {
      "doc": " Configures Interface Private Vlan Host Association\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            primary_vlan ('str'): Primary private vlan\n            sec_vlan ('str'): Secondary private vlan\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_pvlan_host_assoc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3019"
    }
  },
  "configure_interface_span_portfast": {
    "iosxe": {
      "doc": " Configures Spanning Tree Portfast on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str',optional) : Options are disable/trunk. Default is '' (i.e no mode)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_span_portfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2969"
    }
  },
  "configure_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Configures switchport on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan ('str'): access_vlan to configure\n            mode ('str',optional) Switchport mode (i.e access)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L801"
    }
  },
  "configure_interface_switchport_mode": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str')      : interface mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2388"
    }
  },
  "configure_interface_switchport_pvlan_mode": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str')      : pvlan mode (i.e host or promiscuous)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_pvlan_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2991"
    }
  },
  "configure_interface_switchport_trunk": {
    "iosxe": {
      "doc": " configure switchport mode trunk to the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`list`): list of Interface to be added to port channel\n            vlan (`str`): vlan to be added to the port\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_trunk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1125"
    }
  },
  "configure_interface_switchport_trunk_vlan": {
    "iosxe": {
      "doc": " Configures switchport trunk on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            trunk_mode('str'): trunk mode to configure\n            vlan ('str'): trunk_vlan to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_trunk_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2565"
    }
  },
  "configure_interface_switchport_voice_vlan": {
    "iosxe": {
      "doc": " Configures switchport on interface\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to configure\n        vlan ('str'): voice_vlan to configure\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_voice_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2539"
    }
  },
  "configure_interface_template": {
    "iosxe": {
      "doc": " Configure Template on a list of interfaces\n    interface GigabitEthernet1/0/1\n      source template sample-template\n\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Template name\n        interface_list ('list'): List of Interface names - can directly pass in device.interfaces from testbed yaml\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2475"
    }
  },
  "configure_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n            channel_protocol (`str`): protocol used for port-channel\n            disable_switchport('str'): disable switchport\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1080"
    }
  },
  "configure_interfaces_shutdown": {
    "ios": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L9"
    },
    "iosxe": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L964"
    },
    "iosxr": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L72"
    },
    "nxos": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L9"
    }
  },
  "configure_interfaces_unshutdown": {
    "ios": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L24"
    },
    "iosxe": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L987"
    },
    "iosxr": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L87"
    },
    "nxos": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L24"
    }
  },
  "configure_ip_dhcp_snooping": {
    "iosxe": {
      "doc": " Configures ip dhcp snooping vlan {vlan_range}\n    Args:\n        device ('obj'): device to use\n        vlan_range ('str'): vlan range from (1-4096), example: 1,3-5,7,9-11\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure ip dhcp snooping vlan {vlan_range}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L310"
    }
  },
  "configure_ip_domain_lookup": {
    "iosxe": {
      "doc": " Enable domain lookup \n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian configuration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_domain_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L12"
    }
  },
  "configure_ip_mtu": {
    "iosxe": {
      "doc": " Configuring ip mtu on  device\n\n        Args:\n            device ('str'): Device str\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2681"
    }
  },
  "configure_ip_name_server": {
    "iosxe": {
      "doc": " Enable ip name server \n        Args:\n            device ('obj'): device to use\n            domain_ip ('str'): dns server ip or proxy server ip.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian configuration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_name_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L56"
    }
  },
  "configure_ip_on_tunnel_interface": {
    "iosxe": {
      "doc": " Configure tunnel interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): IP addressed to be configured on interface\n            mask (`str`): Mask address to be used in configuration\n            tunnel_source (`str`): tunnel source address\n            tunnel_destination (`str`): tunnel destination address\n            keepalive_timer ('int',optional): tunnel keepalive timer,default value is 10\n            ip_mtu ('str',optional): tunnel mtu, default value is None\n            ipv6_address (`str`,optional): IPv6 address with subnet mask,default value is None\n\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_on_tunnel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2596"
    }
  },
  "configure_ip_pim_vrf_ssm_default": {
    "iosxe": {
      "doc": "configure ip pim vrf ssm default on device.\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_vrf_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L150"
    }
  },
  "configure_ip_prefix_list": {
    "iosxe": {
      "doc": " configure prefix-list to pass a prefix\n\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            seq (`int`): Sequence to insert to existing route-map entry\n            ip_address (`str`): ip address to be used\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L811"
    }
  },
  "configure_ip_rsvp_bandwidth": {
    "iosxe": {
      "doc": " configure ip rsvp bandiwth on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            bandwidth ('str'): rsvp bandwidth\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_rsvp_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L492"
    }
  },
  "configure_ipsec_profile": {
    "iosxe": {
      "doc": " Configures ipsec transform set\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ipsec profile name\n            transform_set_name ('str'): transform-set name\n            ikev2_profile_name ('str'): ikev2 profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L64"
    }
  },
  "configure_ipsec_transform_set": {
    "iosxe": {
      "doc": " Configures ipsec transform set\n        Args:\n            device (`obj`): Device object\n            transform_set_name ('str'): transform-set name\n            transform_method ('str'): transform method e.g. esp-gcm, esp-md5-hmac\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_transform_set",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L36"
    }
  },
  "configure_ipsec_tunnel": {
    "iosxe": {
      "doc": " Configures ipsec transform set\n        Args:\n            device (`obj`): Device object\n            tunnel_intf ('str'): tunnel interface\n            tunnel_ip ('str'): tunnel ip addr\n            tunnel_mask ('str'): tunnel mask\n            tunnel_src_ip ('str'): tunnel source IP\n            tunnel_mode ('str'): ipv4 or ipv6\n            tunnel_dst_ip ('str'): tunnel destination IP\n            ipsec_profile_name ('str'): IPSEC profile name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L98"
    }
  },
  "configure_ipv4_dhcp_relay_helper": {
    "iosxe": {
      "doc": " Configure helper IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): helper IP address to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_dhcp_relay_helper",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1764"
    }
  },
  "configure_ipv4_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure subnet SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt (`str`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L131"
    }
  },
  "configure_ipv4_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure Ipv4 SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Ipv4 SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L110"
    }
  },
  "configure_ipv6_acl_on_interface": {
    "iosxe": {
      "doc": " Configures IPv6 acl on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl name to apply\n            inbound ('bool', option): True for inbound acl, False for outbound acl, default value is True\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L402"
    }
  },
  "configure_ipv6_destination_guard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 destination-guard policy\n    Args:\n        device ('obj'): device object\n        policy ('str'): policy name\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to attach ipv6 destination-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1936"
    }
  },
  "configure_ipv6_destination_guard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 destination-guard policy\n    Args:\n        device ('obj'): device object\n        policy ('str'): policy name\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to detach ipv6 destination-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1967"
    }
  },
  "configure_ipv6_destination_guard_policy": {
    "iosxe": {
      "doc": " Configure ipv6 destination-guard policy\n    Args:\n        device (\"obj\"): The device to configure the policy on\n        policy_name (\"str\"): the name of the policy\n        enforcement (\"str\", optional): The enforcement policy to set - Eg. \"always\" or \"stressed\". Defaults to None.\n    Raises:\n        SubCommandFailure: Failed to configure ipv6 destination-guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1998"
    }
  },
  "configure_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Configures ipv6 dhcp guard policy {policy_name}\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n            trusted_port ('bool'): True indicating the port is a trusted port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L12"
    }
  },
  "configure_ipv6_dhcp_relay": {
    "iosxe": {
      "doc": " Configure IPv6 DHCP Relay\n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            dest_ipv6 ('str'): IPv6 destination address\n            vlan ('int'): vlan number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 DHCP Relay\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1860"
    }
  },
  "configure_ipv6_nd": {
    "iosxe": {
      "doc": " Configure IPv6 ND parameters\n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            lifetime ('int') : Valid Lifetime in secs\n            pref_lifetime ('int') : Preferred Lifetime in secs\n            router_pref ('str') : default router preference\n            ra_lifetime ('int') : IPv6 Router Advertisement Lifetime\n            ra_interval ('int') : IPv6 Router Advertisement Interval\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 DHCP ND parameters\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1894"
    }
  },
  "configure_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Configure ipv6 nd suppress policy {mode}\n    Args:\n        device ('obj'): device to use\n        policy_name ('str'): name of the policy to be configured\n        mode ('str'): mode for policy (dad-proxy, full-proxy, mc-proxy)\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure ipv6 nd suppress policy {policy_name} with mode {mode}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L165"
    }
  },
  "configure_ipv6_object_group_network": {
    "iosxe": {
      "doc": " Configure ipv6 object group of network type\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n            og_mode ('str'): object-group mode host or network\n            ipv6_address ('str'): IPv6 address\n            ipv6_network ('str'): IPv6 network address\n            prefix ('str'): Prefix length\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_object_group_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L12"
    }
  },
  "configure_ipv6_object_group_service": {
    "iosxe": {
      "doc": " Configure ipv6 object group of service type\n\n            Args:\n                device (`obj`): Device object\n                og_name ('str'): object-group name\n                ipv6_service ('str'): IPv6 service to add str\n\n            Returns:\n                None\n\n            Raises:\n                SubCommandFailure\n        ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_object_group_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L102"
    }
  },
  "configure_ipv6_ogacl": {
    "iosxe": {
      "doc": " Configure IPv6 Object-Group ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_og ('str'): name of Service object-group\n            src_nw ('str'): name of source network object-group or any\n            dst_nw ('str'): name of destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            service_type ('str',optional): service type to configure,default value is None\n            log_option ('str',optional): Option to log ACL match,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ogacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L233"
    }
  },
  "configure_ipv6_ospf_bfd": {
    "iosxe": {
      "doc": "configure ipv6 ospf bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1150"
    }
  },
  "configure_ipv6_raguard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 RA Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 RA guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L13"
    }
  },
  "configure_isis_md5_authentication": {
    "iosxr": {
      "doc": " Configure MD5 authentication\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            hello_password ('str'): Authentication password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_md5_authentication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L147"
    }
  },
  "configure_isis_metric": {
    "iosxr": {
      "doc": " Configure ISIS metric\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            metric ('str'): Metric value\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L111"
    }
  },
  "configure_isis_metric_style": {
    "iosxr": {
      "doc": " Configure ISIS metric style\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n            metric_style ('str'): Metric style\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_metric_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L41"
    }
  },
  "configure_isis_net_address": {
    "iosxr": {
      "doc": " Configure ISIS network address\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            net_address ('str'): Net Address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_net_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L12"
    }
  },
  "configure_isis_prefix_sid": {
    "iosxr": {
      "doc": " Configure ISIS prefix-sid\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            prefix_sid ('str'): Prefix-Sid\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_prefix_sid",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L74"
    }
  },
  "configure_l2vpn_evpn": {
    "iosxe": {
      "doc": " Config l2vpn evpn\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L58"
    }
  },
  "configure_l2vpn_evpn_router_id": {
    "iosxe": {
      "doc": " Config l2vpn evpn\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface type \n                               loopback | physical\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_evpn_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L106"
    }
  },
  "configure_l2vpn_storm_control": {
    "iosxe": {
      "doc": " Configures storm control under service instance\n\n        Args:\n            device('obj'): device to configure\n            interface('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_storm_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L13"
    }
  },
  "configure_l2vpn_vfi_context": {
    "iosxe": {
      "doc": " Config l2vpn vfi context\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n            vpn_id ('str'): vpn id to be configured\n            member('str') : member ip\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1537"
    }
  },
  "configure_l2vpn_vfi_context_vpls": {
    "iosxe": {
      "doc": "\n    Configures l2vpn vfi context vpls on device\n\n    Args:\n        device('obj'): device to configure\n        vpn_id('str'): vpn_id to configure\n        pseudowire('str', optional): pseudowire to configure,\n                                     default value is None\n\n    Returns:\n        N/A\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_vfi_context_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L74"
    }
  },
  "configure_lacp_on_interface": {
    "iosxe": {
      "doc": " Configure LACP on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            min_max_bundle (`int`): Number of minimum/maximum bundles\n            minumum_bundle (`bool`): True if configuring minimum-bundle\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lacp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1158"
    }
  },
  "configure_layer2_vfi_autodiscovery": {
    "iosxe": {
      "doc": "configure Layer 2 VFI vpnid configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            vpnid(`str`): vpnid for vpls domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_autodiscovery",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1415"
    }
  },
  "configure_layer2_vfi_context": {
    "iosxe": {
      "doc": "configure Layer 2 VFI context configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            verbatim(`str`): vpnid for vpls domain\n            neighbors(`list`): Specifies list of remote peering router ID.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1289"
    }
  },
  "configure_layer2_vfi_manual": {
    "iosxe": {
      "doc": "configure Layer 2 VFI manual configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            verbatim(`str`): vpnid for vpls domain\n            neighbors(`list`): Specifies list of remote peering router ID.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1263"
    }
  },
  "configure_ldp_discovery_targeted_hello_accept": {
    "iosxe": {
      "doc": " configure mpls ldp discovery targeted-hello accept \n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldp_discovery_targeted_hello_accept",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1772"
    }
  },
  "configure_ldra_interface": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n            interface_id ('str'): interface-id for ldra interface\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra on interface\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L267"
    }
  },
  "configure_ldra_policy_vlan": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra policy on vlan\n        Args:\n            device ('obj'): device to use\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra policy on vlan\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L213"
    }
  },
  "configure_ldra_remote_id": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            remote_id ('str'): remote-id for ldra\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra remote-id\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_remote_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L163"
    }
  },
  "configure_lldp": {
    "ios": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L8"
    },
    "iosxe": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L8"
    },
    "iosxr": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L8"
    },
    "nxos": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L8"
    }
  },
  "configure_logging_buffer_size": {
    "iosxe": {
      "doc": " logging buffered <4096-2147483647>\n        Args:\n            device (`obj`): Device object\n            buffer_size ('int'): Size of the buffer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_buffer_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L134"
    }
  },
  "configure_logging_buffered_errors": {
    "iosxe": {
      "doc": " Confgiure logging buffered errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_buffered_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L153"
    }
  },
  "configure_logging_console": {
    "iosxe": {
      "doc": " logging console\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_console",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L11"
    }
  },
  "configure_logging_console_errors": {
    "iosxe": {
      "doc": " Confgiure logging console errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_console_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L191"
    }
  },
  "configure_logging_monitor": {
    "iosxe": {
      "doc": " logging monitor\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L44"
    }
  },
  "configure_maximum_path_under_ospf": {
    "iosxe": {
      "doc": " configure maximum-path under ospf\n        Args:\n            device ('obj'): Device object\n            ospf_process_id('int'): ospf processid to unconfig\n            max_path('int'): maximum path to be installed\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_maximum_path_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1069"
    }
  },
  "configure_maximum_prefix_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure maximum prefix to router bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            maximum_prefix ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'maximum_prefix': maximum prefix number\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.6,\n                        'maximum_prefix': 5,\n                    }\n                ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: maximum_prefix is not a list\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_maximum_prefix_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L271"
    }
  },
  "configure_mdns": {
    "iosxe": {
      "doc": " Configure mDNS (Multicast Domain Name System) services on agent and service peer\n\n        mdns-sd gateway\n        mdns-sd service-definition custom10\n          service-type _airplay._tcp.local\n          service-type _raop._tcp.local\n          service-type _ipp._tcp.local\n          service-type _afpovertcp._tcp.local\n          service-type _nfs._tcp.local\n          service-type _ssh._tcp.local\n          service-type _dpap._tcp.local\n          service-type _daap._tcp.local\n          service-type _ichat._tcp.local\n          service-type _presence._tcp.local\n          service-type _http._tcp.local\n          service-type _ipps._tcp.local\n          service-type _printer._tcp.local\n          service-type _smb._tcp.local\n          service-type _ftp._tcp.local\n        mdns-sd service-list service_list31 IN\n        match custom10\n        mdns-sd service-list service_list32 OUT\n        match custom10\n        mdns-sd service-list service_list33 OUT\n        match custom10\n        mdns-sd service-list service_list34 IN\n        match custom10\n        mdns-sd service-policy Policy41\n          service-list service_list31 IN\n        mdns-sd service-policy Policy42\n          service-list service_list32 OUT\n          service-list service_list33 OUT\n          service-list service_list34 IN\n        mdns-sd service-list service_list55 IN\n        match custom10 message-type query\n        mdns-sd service-list service_list66 OUT\n        match custom10 location-filter filter8\n        mdns-sd service-policy Policy43\n          service-list service_list55 IN\n          service-list service_list66 OUT\n        end\n\n    Args:\n        device ('obj'): device to configure\n        service definition ('str', optional): service definition name. Default value is None\n        service_list ('list', optional): list with all services. Default value is None\n        direction ('str', optional): direction. Default value is None\n        policy_name ('dict', optional): dict with all Policy names and directions. Default value is None\n        service_list_msg_type ('str', optional): creating service list for msg type. Default value is None\n        direction_msg_type ('str', optional): creating direction for msg type. Default value is None\n        message_type ('str', optional): Message type. Default value is None\n        service_list_filter ('str', optional): creating service list for filter type. Default value is None\n        direction_filter_type ('str', optional): creating direction for filter type. Default value is None\n        filter_name ('str', optional): Filter name. Default value is None\n        policy_name1 ('dict', optional): creating new dict for adding new service list for msg and filter types. Default value is None\n\n        dict = {'Policy41': ['service_list31', 'IN'],\n                'Policy42': ['service_list32',\n                             'OUT',\n                             'service_list33',\n                             'OUT',\n                             'service_list34',\n                             'IN']}\n\n        dict = {'Policy43': ['service_list55', 'IN',\n                             'service_list66',\n                             'OUT']}\n\n  Returns:\n      None\n\n  Raises:\n      SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L380"
    }
  },
  "configure_mdns_controller": {
    "iosxe": {
      "doc": " Create mdns controller\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            cont_addr ('str'): controller addresses to be configured\n            cont_service_policy ('str'): service-policy to configured\n            cont_src_intf ('str'): Default router ID\n            srvc_list ('str'):\n            mat_option ('str'):\n            msg_type ('str'):\n            src_intf ('str'):\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_controller",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L11"
    }
  },
  "configure_mdns_location_filter": {
    "iosxe": {
      "doc": " Configures location filter details on vlan\n\n        Args:\n            device ('obj'): device to use\n            location_filter ('str'): location filter name\n            location_group ('str'): location group name\n            vlan ('int'): Vlan id\n            role ('str'): Role name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_location_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L743"
    }
  },
  "configure_mdns_location_group": {
    "iosxe": {
      "doc": " Configures location group details on interface\n\n        Args:\n            device ('obj'): device to use\n            location_group ('int'): location group name\n            vlan ('int'): Vlan id value\n            interface ('list'): list of interfaces to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_location_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L778"
    }
  },
  "configure_mdns_sd_agent": {
    "iosxe": {
      "doc": " Configures mDNS(Multicast Domain Name System) agent\n\n        Args:\n            device (`obj`): Device object\n            timer ('int', optional): Timer value. Default value is None\n            count ('int', optional): Count value. Default value is None\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_sd_agent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L846"
    }
  },
  "configure_mdns_sd_service_peer": {
    "iosxe": {
      "doc": " Configures mDNS(Multicast Domain Name System) service peer\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan value\n            ip_addr ('str'): ipv4,ipv6 address\n            response_timer ('int', optional): active response timer. Default value is None\n            timer ('int', optional): Timer value. Default value is None\n            count ('int', optional): Count value. Default value is None\n            value ('int', optional): rate limit value . Default value is None\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_sd_service_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L885"
    }
  },
  "configure_mdns_service_definition": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) service definition\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            srvc_type ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns service-definition\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_definition",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L957"
    }
  },
  "configure_mdns_svi": {
    "iosxe": {
      "doc": " Create mdns svi\n        Args:\n            device ('obj'): device to use\n            vlan ('str'):\n            srvc_ins_suffix ('str'): controller addresses to be configured\n            srvc_mdns_qry ('str'): Controller port to be configured\n            srvc_policy ('str'): service-policy to configured\n            transport ('str'): Default router ID\n            act_qry ('int'): Default router ID\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns svi config\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L170"
    }
  },
  "configure_mdns_trust": {
    "iosxe": {
      "doc": " Configures location filter details on vlan\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L934"
    }
  },
  "configure_mdt_auto_discovery_mldp": {
    "iosxe": {
      "doc": " configure mdt auto-discovery mldp\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_auto_discovery_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L105"
    }
  },
  "configure_mdt_overlay_use_bgp": {
    "iosxe": {
      "doc": " Enables BGP as the overlay protocol\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring vrf\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_overlay_use_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L129"
    }
  },
  "configure_mka_policy": {
    "iosxe": {
      "doc": " Configures mka policy on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L408"
    }
  },
  "configure_mka_policy_delay_protection": {
    "iosxe": {
      "doc": " Configures mka policy with delay protection on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mka_policy_delay_protection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L341"
    }
  },
  "configure_mode_to_eEdge": {
    "iosxe": {
      "doc": " Convert the configuration mode to eEdge\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Convert the configuration mode to eEdge\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mode_to_eEdge",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L158"
    }
  },
  "configure_mpls_label_mode": {
    "iosxe": {
      "doc": " configure vpn label allocation mode.\n        Args:\n            device (`obj`): Device object\n            mode (`str`): mode used to allocate a VPN label\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_label_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L152"
    }
  },
  "configure_mpls_label_mode_all_vrfs_protocol": {
    "iosxe": {
      "doc": " Config mpls label mode all-vrfs protocol on device\n\n        Args:\n            device (`obj`): Device object\n            address_family ('str'): address-family which is mode to be configured for\n            label_allocation ('str'): label to configured for the address-family\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_label_mode_all_vrfs_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1485"
    }
  },
  "configure_mpls_ldp_graceful_restart": {
    "iosxe": {
      "doc": " Configures mpls ldp graceful restart on device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_ldp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1165"
    }
  },
  "configure_mpls_ldp_nsr": {
    "iosxe": {
      "doc": " Configures mpls ldp nsr on device\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_ldp_nsr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L803"
    }
  },
  "configure_mpls_pseudowire_xconnect_on_interface": {
    "iosxe": {
      "doc": " Configures mpls xconnect pseudowire class on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            ip (`str`): IP address to be configured with xconnect\n            vlan (`str`): Vlan id to be configured\n            pw_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_pseudowire_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1437"
    }
  },
  "configure_mpls_static_binding": {
    "iosxe": {
      "doc": "configure mpls static binding\n        Args:\n        device (`obj`): Device \n        neighbor (`str`) : neighbor ip address\n        mask (`str`): mask to be used for ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_static_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1671"
    }
  },
  "configure_mpls_te_explicit_null": {
    "iosxe": {
      "doc": "configure explicit null on Tunnel\n        Args:\n            device (`obj`): Device \n            explicit_null(`str`) : configure explicit null \n            verbatim(`str`) : configure verbatim\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_explicit_null",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1236"
    }
  },
  "configure_mpls_te_forwarding_adjacency": {
    "iosxe": {
      "doc": "configure mpls te forwarding-adjacency\n        Args:\n        device (`obj`): Device \n        intf ('str') : tunnel name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_forwarding_adjacency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1751"
    }
  },
  "configure_mpls_te_globally": {
    "iosxe": {
      "doc": "configure mpls te on device\n\n        Args:\n            device (`obj`): Device object   \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_globally",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L471"
    }
  },
  "configure_mpls_te_on_interface": {
    "iosxe": {
      "doc": " configure mple te on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L390"
    }
  },
  "configure_mpls_te_under_ospf": {
    "iosxe": {
      "doc": "configure mpls te under ospf\n\n        Args:\n            device (`obj`): Device object\n            processid (`str`): process id of ospf\n            router_id ('str'): Router Id\n            area ('str'): ospf area\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L416"
    }
  },
  "configure_nat_in_out": {
    "iosxe": {
      "doc": " Enable nat IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            inside_interface ('str'): enable nat in over this interface, default value is None\n            outside_interface ('str'): enable nat out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: NAT IN OUT not enable over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L10"
    }
  },
  "configure_nat_overload_rule": {
    "iosxe": {
      "doc": " Configure interface overloaad rule\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface which will use for overlad rule\n            access_list_name ('str'): Name of extended access list\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Nat overload rule not connfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L42"
    }
  },
  "configure_no_bgp_default": {
    "iosxe": {
      "doc": " configure no bgp default attributes under bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            ipv4_unicast ('boolean'): disable the default behavior of the BGP routing process \n                                  exchanging IPv4 address info, if set to true\n            route_target_filter ('boolean'): disable automatic route-target filtering globally for all VRFs.\n                                            if set to true.\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command                                            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_bgp_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L982"
    }
  },
  "configure_no_boot_manual": {
    "iosxe": {
      "doc": " no boot manual\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_boot_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L12"
    }
  },
  "configure_no_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Enables bgp neighbors if provided otherwise it enabled the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_id ('int'): router bgp_id to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors('list'): Libs with BGP neighbors\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L695"
    }
  },
  "configure_no_shut_ospf": {
    "iosxe": {
      "doc": " Configure no shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L133"
    }
  },
  "configure_ntp_iburst": {
    "iosxe": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L108"
    },
    "iosxr": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L89"
    }
  },
  "configure_ntp_master": {
    "iosxe": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L77"
    },
    "iosxr": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L60"
    }
  },
  "configure_ntp_server": {
    "iosxe": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n            vrf ('str'): Optional VRF to be used during configuration\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L129"
    },
    "iosxr": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n            auth_key ('list'): Authentication key number corresponding\n                               to server ip\n                ex.)\n                   auth_key = [\n                        '1',\n                        '2',\n                   ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L110"
    }
  },
  "configure_ospf_bfd": {
    "iosxe": {
      "doc": "configure ospf ip bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L981"
    }
  },
  "configure_ospf_cost": {
    "iosxe": {
      "doc": "configure ospf cost\n\n        Args:\n            device (`obj`): Device object\n            ospf_cost (`int`): Ospf cost value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L294"
    }
  },
  "configure_ospf_include_connected_in_bgp": {
    "iosxe": {
      "doc": " redistributes IPv6 routes under bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process id\n            address_family ('str'): address family to configure under\n            vrf ('str'): vrf under which routes to be redistribute\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_include_connected_in_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1148"
    }
  },
  "configure_ospf_interface_metric_cost": {
    "junos": {
      "doc": " Configure ospf interface metric cost\n\n        Args:\n            device ('obj'): Device to configure\n            interface ('str'): Interface to configure\n            area ('str'): Area\n            cost_type ('str'): Cost type\n            cost ('int'): Cost\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_interface_metric_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L44"
    }
  },
  "configure_ospf_internal_external_routes_into_bgp": {
    "iosxe": {
      "doc": " redistributes all(internal and external) OSPF routes into BGP\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process_id\n            address_family ('str'): address family to configure under\n            vrf ('str'): vrf under which routes to be redistribute\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_internal_external_routes_into_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1113"
    }
  },
  "configure_ospf_max_metric_router_lsa_on_startup": {
    "iosxe": {
      "doc": "Configure max-metric router-lsa on start-up\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            metric_value (`int`): Metric value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_max_metric_router_lsa_on_startup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L22"
    }
  },
  "configure_ospf_message_digest_key": {
    "iosxe": {
      "doc": "configure ospf message digest key\n\n        Args:\n            device (`obj`): Device object\n            key (`str`): key value\n            message_digest_key (`str`): message digest key value\n            md5 (`str`): md5 value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_message_digest_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L506"
    }
  },
  "configure_ospf_network_point": {
    "iosxe": {
      "doc": "configure ospf point to point network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_network_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L923"
    }
  },
  "configure_ospf_networks": {
    "iosxe": {
      "doc": " Configures ospf on networks\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            ip_address ('list'): List of ip_address' to configure\n            netmask ('str'): Netmask to use\n            area ('str'): Area to configure under\n            router_id('str'): ospf router id\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L324"
    }
  },
  "configure_ospf_passive_interface": {
    "iosxe": {
      "doc": "Configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): ospf process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L212"
    },
    "junos": {
      "doc": "configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            area (`str`): IP address of area\n\n        Returns:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L12"
    }
  },
  "configure_ospf_redistributed_connected": {
    "iosxe": {
      "doc": " configure redistribute connected under ospf\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): process id of ospf\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_redistributed_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1012"
    }
  },
  "configure_ospf_routing": {
    "iosxe": {
      "doc": " Configures ospf and ip routing on device\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            router_id ('str', optional): Router id to use, default value is None\n            router_config ('bool', optional): To configure router-id or not, \n                                              default value is None\n            nsf ('bool', optional): nsf configuration, default value is None\n            vrf_name ('str', optional): vrf name, default value is None\n            vrf_id ('str', optional): vrf id, default value is None\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L682"
    }
  },
  "configure_ospf_routing_on_interface": {
    "iosxe": {
      "doc": " Configures ospf and ip routing on Interface\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Interface to use\n            ospf_process_id ('str'): Process id for ospf process\n            areaid ('str'): Area id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_routing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L775"
    }
  },
  "configure_ospf_vrf": {
    "iosxe": {
      "doc": " Configures router-id in ospf vrf\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            vrf('str'): vrf id for ospf process\n            router_id('str'): ospf router id\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L360"
    }
  },
  "configure_ospfv3": {
    "iosxe": {
      "doc": "configure ospf ip bfd\n\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospfv3 process id\n            router_id (`str`, optional): Router id, default value is None\n            vrf('str', optional): vrf id for ospf process\n            nsr (`Bool`, optional): Nsr to be configured, default value is None\n            graceful_restart (`Bool`, optional): Graceful restart to be \n                                                 configured,default value is None\n            address_family (`str`, optional): Address family to be configured,\n                                              default value is None\n            bfd ('str', optional) : bfd name, default value is None\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L636"
    }
  },
  "configure_ospfv3_network_point": {
    "iosxe": {
      "doc": "configure ospfv3 point to point network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3_network_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1092"
    }
  },
  "configure_pac_key": {
    "iosxe": {
      "doc": " Configure pack key on a given Radius server\n        Args:\n            device ('obj'): device to use\n            server_name ('str'):  Name for the radius server configuration\n            key ('str'): Per-server encryption key\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure pac key\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pac_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L217"
    }
  },
  "configure_pbr_route_map": {
    "iosxe": {
      "doc": " Configure route-map\n\n        Args:\n            device (`obj`): Device object\n            route_map_name (`str`): Route-map to be configured on interface\n            acl_name (`str`): Route-map to be attached on interface\n            next_hop_ip (`str`): Next-hop ip address\n            default_next_hop (`str`, optional): Default Next-hop ip address, default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pbr_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L73"
    }
  },
  "configure_policy_map": {
    "iosxe": {
      "doc": " Configures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_name('str) : name of the policy name\n             class_map_list('list'): list of data type hold number class map information\n             [ \n             {\n             class_map_name('str') : name of the class \n             policer_val('int',optional): police rate value,\n             match_mode('list',optional): match mode name for cos,\n             matched_value('list',optional): match mode values for cos traffic_class and dscp,\n             table_map_name('str',optional): to set the table name for policy_map,\n             table_map_mode('str',optional : name of the tablemode \n             } ]\n\n        example:\n             class_map_list=[{'class_map_name':'test1',\n             'policer_val':2000000000,\n             'match_mode':['dscp','cos']\n             'matched_value':['cs1','5']\n             'table_map_name':'table1'\n             'table_map_mode':'dscp'}]\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L12"
    }
  },
  "configure_port_sgt": {
    "iosxe": {
      "doc": " Configure port sgt on physical interface\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            sgt ('int'): Security Group Tag (SGT) value\n            trusted('bool'): Trusted/Untrusted\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure port sgt\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_sgt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L242"
    }
  },
  "configure_prefix_list_prefix_list": {
    "iosxe": {
      "doc": " Configures prefix-list on device\n\n        Args:\n            device('obj'): device to configure on\n            prefix_list('list'): prefix list which contains dictionary\n                dictionary contains following 3 keys:\n                    prefix_list ('str'): prefix list value\n                    seq ('int'): sequence number\n                    route ('str'): IP address\n                ex.)\n                   [ {\n                        'prefix_list': 1,\n                        'seq': 5,\n                        'route': '172.16.0.0/24'\n                    },\n                    {\n                        'prefix_list': 2,\n                        'seq': 5,\n                        'route': '172.16.1.0/24'\n                    },\n                    {\n                        'direction': 'in',\n                        'permit': 'deny',\n                        'route': '10.94.12.1',\n                        'comparison_operator': '<',\n                        'comparison_value': 36\n                    } \n                    ]\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_prefix_list_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L16"
    }
  },
  "configure_prefix_list_prefix_list_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure prefix list to bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            prefix_list ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'prefix_list': prefix,\n                    'direction': direction\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.4',\n                        'prefix_list': 'in'\n                        'direction': 'in'\n                    },\n                    {\n                        'neighbor': '192.168.1.5',\n                        'prefix_list': 'out'\n                        'direction': 'out'\n                    }\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: prefix_list is not a list\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_prefix_list_prefix_list_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L205"
    }
  },
  "configure_pseudowire_encapsulation_mpls": {
    "iosxe": {
      "doc": " Configures pseudowire encapsulation mpls\n\n        Args:\n            device (`obj`): Device object\n            pseudowire_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pseudowire_encapsulation_mpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1316"
    }
  },
  "configure_ptp_aes67_rates": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n            intf_list ('list'): PTP interface list\n            sync (`int`): PTP sync interval. Default: 0.\n            delay (`int`): PTP delay-req interval. Default: 0.\n            announce (`int`): PTP announce interval. Default: 0.\n            announce_timeout (`int`): PTP announce timeout. Default: 3.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_aes67_rates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L185"
    }
  },
  "configure_ptp_domain": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            domain (`str`): PTP domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_domain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L79"
    }
  },
  "configure_ptp_dscp_message": {
    "iosxe": {
      "doc": " PTP dscp message configuration\n        Args:\n            device (`obj`): Device object\n            dscp_event ('str'): PTP DSCP event message\n            dscp_general ('str'): PTP DSCP general message\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_dscp_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L118"
    }
  },
  "configure_ptp_modes": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_modes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L31"
    }
  },
  "configure_ptp_priority": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            priority1 (`str`): PTP priority1\n            priority2 (`str`): PTP priority2\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L96"
    }
  },
  "configure_ptp_transport_ipv4": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            transport (`str`): PTP transport l3 mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_transport_ipv4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L62"
    }
  },
  "configure_pvlan_primary": {
    "iosxe": {
      "doc": " Configures Primary Private Vlan\n        Args:\n            device ('obj'): device to use\n            primary_vlan ('str'): Primary private vlan\n            secondary_vlan ('str',optional): Secondary isolated/community vlan\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_primary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L178"
    }
  },
  "configure_pvlan_svi_mapping": {
    "iosxe": {
      "doc": " Configures Private Vlan Mapping on SVI\n        Args:\n            device ('obj'): device to use\n            svi_vlan ('str'): SVI interface\n            mapping_vlan ('str'): Private vlan to map to\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_svi_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L154"
    }
  },
  "configure_pvlan_type": {
    "iosxe": {
      "doc": " Configures Isolated Private Vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): Vlan id\n            pvlan_type ('str'): Private vlan type (i.e isolated, primary, community)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L205"
    }
  },
  "configure_qos_policy": {
    "iosxe": {
      "doc": " Configures the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            access_type ('str') : type of interface or VC\n            policy_name ('str') : name of the policy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_qos_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L31"
    }
  },
  "configure_radius_attribute_6": {
    "iosxe": {
      "doc": "\n    Configure radius attribute 6 on-for-login-auth\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L344"
    }
  },
  "configure_radius_automate_tester": {
    "iosxe": {
      "doc": " configure Radius Automate Tester. It polls the radius to make sure it is alive.\n    Args:\n        device (`obj`): Device object\n        server_name ('str'): Radius server name\n        username ('str'): Identity Username to query radius server\n        idle_time ('int',optional): Radius polling interval in min.\n                                  Default: None. Device will add idle time depending on IOS version\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_automate_tester",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L752"
    }
  },
  "configure_radius_group": {
    "iosxe": {
      "doc": " \n    Configure aaa radius server group\n    Args:\n        device ('obj'): Device object\n        server_config('dict'): Dictionary of configurations for server\n            dictionary contains following keys:\n                server_group ('str'): Radius server group name\n                server_name ('str'): Radius server name\n                vrf('str'):  vrf name\n                mgmt_intf('str'):  Management interface\n                retransmit('int'):  <1-100>  Number of retries for a transaction (default is 3)\n                timeout('int'): <1-1000>  Wait time (default 5 seconds)\n                ip_addr ('str'): ISE IP\n                key('str'): Server key\n    Returns:\n        configurations list\n    Raises:\n        SubCommandFailure\n    Example:\n        server_config = {\n                    server_group = \"sg1\",\n                    server_name = \"sname1\",\n                    vrf = \"vrf1\",\n                    mgmt_intf = \"GigabitEthernet0/0\",\n                    retransmit = 0,\n                    timeout = 10,\n                    ip_addr = \"11.19.99.99\",\n                    key = \"cisco123',\n                },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L132"
    }
  },
  "configure_radius_interface": {
    "iosxe": {
      "doc": " Configure Radius Interface\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L645"
    }
  },
  "configure_radius_interface_vrf": {
    "iosxe": {
      "doc": " Configure Radius Interface via vrf\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n        vrf('str'): VRF name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface via vrf\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_interface_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L800"
    }
  },
  "configure_radius_server": {
    "iosxe": {
      "doc": " Configure radius server\n\n        Args:\n            device ('obj'): Device object\n            server_config('dict'): Dictionary of configuration for server\n                dictionary contains following keys:\n                    server_name ('str'): Radius server name\n                    ipv4 (Hostname or A.B.C.D):  IPv4 Address of radius server\n                    ipv6 (Hostname or X:X:X:X::X):  IPv6 Address of radius server\n                    auth_port (<0-65534>): UDP port for RADIUS authentication server\n                    acct_port (<0-65534>): UDP port for RADIUS accounting server\n                    key_encryption (int(0,6,7)): 0(UNENCRYPTED key), 6(ENCRYPTED key), 7(HIDDEN key)\n                    key (LINE): Radius server pre shared secret key\n                    timeout (<1-1000>): Time to wait (in seconds) for this radius server to reply\n                    retransmit (<0-100>): Number of retries to active server (overrides default)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n        \n        ex.) \n            {\n                'server_name': 'radius_server',\n                'ipv4': '11.15.23.213',\n                'auth_port': '1812,\n                'acct_port': '1813',\n                'key_encryption': '7',\n                'key': 'Cisco',\n                'timeout': '100',\n                'retransmit': '5'\n            }\n\n        configures below cli commands:\n            'radius server radius_server',\n            'address ipv4 11.15.23.213 auth-port 1812 acct-port 1813',\n            'key 7 Cisco',\n            'timeout 100',\n            'retransmit 5'\n    ",
      "module_name": "server.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#L72"
    }
  },
  "configure_radius_server_group": {
    "iosxe": {
      "doc": " Configure aaa radius server group\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n        rad_server (`str`): Radius Server\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L433"
    }
  },
  "configure_redistribute_connected": {
    "iosxe": {
      "doc": " configure redistribute connected in bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('str'): bgp as number\n            address_family ('str'): address family under bgp \n            vrf ('str'): vrf in address_family\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring redistribute\n                            connected under bgp address_family\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_redistribute_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L910"
    }
  },
  "configure_route_map": {
    "iosxe": {
      "doc": " configure route map\n\n        Args:\n            device (`obj`): device to execute on\n            route_map_name (`int`): route map name\n            permit (`int`): Sequence to insert to existing route-map entry\n            prefix_list_name (`str`): prefix-list name to be used\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L893"
    }
  },
  "configure_route_map_route_map": {
    "iosxe": {
      "doc": " Configures route-map on device\n\n        Args:\n            device('obj'): device to configure on\n            route_map('list'): route-map list which contains dictionary\n                dictionary contains following 6 keys:\n                    seq ('int'): sequence number\n                    route_map ('str'): route-map name\n                    prefix_list ('str'): prefix-list value\n                    set_community ('str'): set community value\n                    match_community ('str'): match community value\n                    set_as_path ('str') : set as-path values\n                ex.)\n                    [\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test_out',\n                        'match_community': 2\n                    },\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test',\n                        'set_community': '62000:1'\n                    },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring route map\n    ",
      "module_name": "route_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/route_map/configure.py#L12"
    }
  },
  "configure_route_map_route_map_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure route map to bgp neighbors\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            vrf_address_family ('str'): address family for vrf\n            route_map ('list'): route map list which contains dictionary\n                dictionary contains following 5 keys:\n                    neighbor ('str'): neighbor value\n                    route_map ('str'): route-map name\n                    direction ('str'): direction type\n            ex.)\n                [\n                    {\n                        'neighbor': '192.168.60.10',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.60.11',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.6.10',\n                        'route_map': 'community_test_in',\n                        'direction': 'in'\n                    },\n         \n       ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: route_map is not a list\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_route_map_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L329"
    }
  },
  "configure_route_map_under_interface": {
    "iosxe": {
      "doc": " Configure route-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            route_map (`str`): Route-map to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_under_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L9"
    }
  },
  "configure_routing_ip_route": {
    "iosxe": {
      "doc": " Configure ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L16"
    }
  },
  "configure_routing_ip_route_vrf": {
    "iosxe": {
      "doc": " Configure ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address to reach\n            mask (str): mask the ip address\n            vrf(str)  : vrf name\n            interface ('str'): interface name to configure,default is None.\n            dest_add('str'): gateway address to configure,default is None.\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ip_route_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L321"
    }
  },
  "configure_routing_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            destination_address('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L118"
    }
  },
  "configure_segment_routing_gb_range": {
    "iosxr": {
      "doc": " Add segment routing\n\n        Args:\n            device ('obj'): Device object\n            label_min (`int`): Segment routing global block start\n            label_max (`int`): Segment routing global block end\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L12"
    }
  },
  "configure_segment_routing_prefix_sid_index": {
    "iosxr": {
      "doc": " Configure segment routing prefix-sid index\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface (`str`): Interface to configure\n            prefix_sid_index (`int`): Prefix-sid index\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_prefix_sid_index",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L69"
    }
  },
  "configure_segment_routing_sr_prefer": {
    "iosxr": {
      "doc": " Configure segment routing sr prefer\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_sr_prefer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L40"
    }
  },
  "configure_service_internal": {
    "iosxe": {
      "doc": " Configures service internal on device",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L792"
    }
  },
  "configure_service_password_encryption": {
    "iosxe": {
      "doc": " Configures service password encryption\n    Args:\n        device ('obj'): device to use\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed configuring service password encryption \n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_password_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1016"
    }
  },
  "configure_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Configures shut/enable on bgp neighbors if provided otherwise the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_as ('int'): router bgp_as to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors ('list'): List of neighbors to shut/enable\n            noshut ('bool'): does the opposite of shut if True\n        Returns:        \n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L539"
    }
  },
  "configure_shut_ospf": {
    "iosxe": {
      "doc": " Configure shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L74"
    }
  },
  "configure_snmp": {
    "iosxe": {
      "doc": " Configures the snmp on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n            access_type ('str') : type of Access\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L18"
    }
  },
  "configure_spanning_tree": {
    "iosxe": {
      "doc": " \n    Configures spanning-tree vlan with input vlan or vlan range\n    e.g.\n    spanning-tree vlan 666\n    spanning-tree vlan 1-999\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L14"
    }
  },
  "configure_stackwise_virtual_interfaces": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            svl_links ('dict'): Dict object\n                Dictionary contains following key, values:\n                    key: interface ('str'): Interface Name\n                    value: link_id ('str'): SVL link id\n                Example:\n                    svl_links = {\n                        'HundredGigE1/0/1':'1',\n                        'HundredGigE1/0/2':'1'\n                    }\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stackwise_virtual_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L50"
    }
  },
  "configure_static_arp": {
    "iosxe": {
      "doc": " Configure static arp\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L92"
    }
  },
  "configure_subinterfaces_for_vlan_range": {
    "iosxe": {
      "doc": " Configures multiple subinterfaces looping through vlan range\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Physical interface to configure\n            vlan_id_start ('int'): Start of vlan range\n            vlan_id_step ('int'): Size of vlan range step\n            vlan_id_count ('int'): How many steps for vlan range\n            netmask ('str'): Netmask to configure\n            network_start ('str'): Start of network\n            network_step ('str'): Size of network step\n            ospf_network_type ('str'): Ospf network type to configure\n\n        Raises:\n            SubCommandFailure\n\n        Returns:\n            list of configured interfaces\n\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_subinterfaces_for_vlan_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1486"
    }
  },
  "configure_svi": {
    "iosxe": {
      "doc": " Vlan SVI configuration\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): VLAN id for SVI\n            ipaddr ('str'): IP address for SVI\n            mask ('str'): Subnet mask for ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2759"
    }
  },
  "configure_switchport_trunk": {
    "iosxe": {
      "doc": " Switch port mode trunk interface configuration\n        Args:\n            device (`obj`): Device object\n            intf_list ('list'): List of interfaces to be configured as trunks\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2734"
    }
  },
  "configure_syslog_server": {
    "iosxe": {
      "doc": " Configure Syslog servers\n\n        Args:\n            device ('obj') : Device to be configured server\n            server ('str'): Syslog server to be configured            \n            steps ('obj'): Context manager object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "syslog.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_syslog_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/configure.py#L8"
    }
  },
  "configure_system_jumbomtu": {
    "iosxe": {
      "doc": " Sets mtu value on device\n        Args:\n            device ('str'): Device str\n            mtu_value ('int'): MTU value to be set\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_system_jumbomtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L399"
    }
  },
  "configure_table_map": {
    "iosxe": {
      "doc": " Configures table_map\n        Args:\n             device ('obj'): device to use\n             table_map_name('str') : name of the table map  name\n             from_val('list') : list of from values\n             to_val('list') : list of to values \n             default_val('str'): name of the default, default is copy\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "table_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_table_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/table_map/configure.py#L12"
    }
  },
  "configure_tacacs_group": {
    "iosxe": {
      "doc": " \n    Configure aaa tacacs server group\n    Args:\n        device ('obj'): Device object\n        server_config('dict'): Dictionary of configurations for server\n            dictionary contains following keys:\n                server_group ('str'): Tacacs server group name\n                server_name ('str'): Tacacs server name\n                vrf('str'):  vrf name\n                mgmt_intf('str'):  Management interface\n                timeout('int'): <1-1000>  Wait time (default 5 seconds)\n    Returns:\n        configurations list\n    Raises:\n        SubCommandFailure\n    Example:\n        server_config = {\n                    server_group = \"sg1\",\n                    server_name = \"sname1\",\n                    vrf = \"vrf1\",\n                    mgmt_intf = \"GigabitEthernet0/0\",\n                    timeout = 10,\n                },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tacacs_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L77"
    }
  },
  "configure_tacacs_server": {
    "iosxe": {
      "cat9500": {
        "doc": " Configure tacacs server\n        Args:\n            device ('obj'): Device object\n            server_config('dict'): Dictionary object\n                dictionary contains following  keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type (str): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                    ipv6_server('str'): server ipv6 address\n                    single_connection('boolean'): set to True\n                    send_nat_address('boolean'): set to True\n                    fqdn_name('str'): Fully Qualified domain name\n            Returns:\n                configurations list\n            Raises:\n                Failed configuring tacacs server\n            Example:\n                server_config = {\n                            'host': 'mgmt-tac',\n                            'timeout': '10',\n                            'key_type': '7',\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                            'ipv6_server': '2000::2'\n                            'single_connection': True\n                            'send_nat_address': True\n                            'fqdn_name': 'f1'\n                        },\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_tacacs_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/configure.py#L12"
      },
      "doc": " Configure tacacs server\n\n        Args:\n            device ('obj'): Device object\n            server_config('list'): List of configuration for server\n                dictionary contains following 3 keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type ('int'): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                ex.)\n                    [\n                        {\n                            'host': '192.168.21.1',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                        },\n                        {\n                            'host': '192.168.21.2',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.2'\n                        }\n                    ] \n                        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ",
      "module_name": "server.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#L12"
    }
  },
  "configure_te_tunnel": {
    "iosxe": {
      "doc": "creates tunnel with ip address.\n        Args :\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            ip_config_subcmd (`str`): subcommands for configuring ip address in tunnel  \n            intf_type (`str`): interface type\n\t    intf_number(`str`): interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_te_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L999"
    }
  },
  "configure_template": {
    "iosxe": {
      "doc": " \n    Configures Template with various sub-options    \n    e.g.\n    template loop-detect\n      loopdetect\n      loopdetect 2\n    Args:\n        device ('obj') : Device object\n        template_name ('str'): Template name\n        loopdetect_enable ('bool'): configure 'loopdetect' or not\n        loopdetect_interval ('int'): loopdetect interval integer in seconds\n        loopdetect_source_port ('bool'): configure 'loopdetect source-port' or not\n\n    Returns:\n        None\n    ",
      "module_name": "configuration_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/configuration_template/configure.py#L15"
    }
  },
  "configure_template_type_vpls": {
    "iosxe": {
      "doc": " template type to be configured\n        Args:\n            device (`obj`): Device object\n            template_type ('str'): template type for the template\n            flow_classification('str'): classify the flow based on ip or ethernet\n            template_name (`str`) : name of the template to be used\n            flow_ip_type ('str'): define the flow ip type \n            flow_label_type ('str'): flow label to be used\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template_type_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1584"
    }
  },
  "configure_terminal_exec_prompt_timestamp": {
    "iosxe": {
      "doc": " terminal exec prompt timestamp\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_exec_prompt_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L116"
    }
  },
  "configure_terminal_length": {
    "iosxe": {
      "doc": " terminal length 0\n        Args:\n            device (`obj`): Device object\n            line_num ('int'): Number of lines on screen (0 for no pausing)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L78"
    }
  },
  "configure_terminal_width": {
    "iosxe": {
      "doc": " terminal width 0\n        Args:\n            device (`obj`): Device object\n            char_num ('int'): Number of characters on a screen line\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_width",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L98"
    }
  },
  "configure_traffic_eng_passive_interface": {
    "iosxe": {
      "doc": "configure traffic-eng passive-interface \n        Args:\n        device (`obj`): Device \n        interface_name (`str`): interface name\n        neighbor (`str`) : neighbor ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        ospf_neigh (`str`) : ospf neighbor ip\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_traffic_eng_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1641"
    }
  },
  "configure_tunnel_auto_route": {
    "iosxe": {
      "doc": "configure autoroute announce in tunnel.\n        Args: \n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            autoroute_type (`str`): autoroute type used for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_auto_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L952"
    }
  },
  "configure_tunnel_bandwidth": {
    "iosxe": {
      "doc": "configure  tunnel bandwidth\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n\t    bandwidth (`int`) : Tunnel bandwidth\n            class_type (`int`) : Default value 0\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L876"
    }
  },
  "configure_tunnel_destination": {
    "iosxe": {
      "doc": "creates tunnel destination.\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            dst_ip (`str`): Ip address of tunnel destination \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L976"
    }
  },
  "configure_tunnel_priority": {
    "iosxe": {
      "doc": "configure tunnel priority\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            priority(`int`): tunnel priority\n            hold_priority(`int`): hold priority for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L904"
    }
  },
  "configure_umbrella_global_parameter_map": {
    "iosxe": {
      "doc": " Enable Umbrella  parameter-map Globally\n        Args:\n            device ('obj'): device to use\n            token_key ('str'): Configure Token key for device registration, default value is None\n            api_key ('str'): Configure Token key for device registration, , default value is None\n            secret_key ('str'): Configure secret key with api key for device registration, default value is None, Example: 34cc188ffba47b5ab18290a62ae5e0m\n            org_id ('str'): Configure org id with api key for device registration, default value is None, Example: 2549304\n            local_bypass_name ('str'): Configure local domain bypass for non umbrella lookup, default value is None\n            dnscrypt ('str'): This is to disable/enable DNSCrypt, default value is None\n            udp_timeout('int'): This is for device registration reattempt, value range 1-30sec, default value is 30. \n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella parameter-map configuration\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_global_parameter_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L76"
    }
  },
  "configure_umbrella_in_out": {
    "iosxe": {
      "doc": " Enable Umbrella IN and OUT over interface \n        Args:\n            device ('obj'):uut device to use\n            in_interface ('str'): enable Umbrella in over this interface, default value is None\n            in_tag ('str'): configure device tag with umbrella in, default value is None\n            out_interface ('str'): enable Umbrella out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella IN OUT not enable over interface\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L11"
    }
  },
  "configure_umbrella_local_bypass": {
    "iosxe": {
      "doc": " Cofigure local domain bypass regex\n        Args:\n            device ('obj'): device to use\n            local_bypass_name ('str'): Name of local domain bypass\n            domain ('str'): Regex pattern.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Local domain bypass \n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_local_bypass",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L145"
    }
  },
  "configure_username": {
    "iosxe": {
      "doc": " Configure a user with a password\n        Args:\n            device (`obj`): Device object\n            username (`str`): User name\n            pwd ('str'): Password for the user\n            encryption ('int',optional): Encryption level (Default 0 for cleartext)\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            dut1.api.configure_username(username='testUser',pwd='secretPwd')\n            -->username testUser password 0 secretPwd\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_username",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L706"
    }
  },
  "configure_vlan_agent": {
    "iosxe": {
      "doc": " Configures vlan on mDNS(Multicast Domain Name System) agent\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID\n            policy ('str'): Policy name\n            active_query_timer ('int'): Active Query timer value\n            transport_way ('str'): Transport way (ipv4,ipv6 or both, which need to allow)\n            vlan_src_intf('int', optional): Source interface vlan. Default value is None\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_agent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L641"
    }
  },
  "configure_vlan_sp": {
    "iosxe": {
      "doc": " Configures vlan on SP(service peer)\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID\n            policy ('str'): Policy name\n            active_query_timer ('int'): Active Query timer value\n            src_vlan ('int'): Source interface vlan id\n            ip_address ('str'): Ip address (ipv4 or ipv6)\n            transport_way ('str'): Transport way (ipv4,ipv6 or both, which need to allow)\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_sp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L707"
    }
  },
  "configure_vlan_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure Vlan SGT\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Vlan SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L89"
    }
  },
  "configure_vlan_vpls": {
    "iosxe": {
      "doc": " Config vpls on vlan\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L111"
    }
  },
  "configure_vrf_definition_family": {
    "iosxe": {
      "doc": " Configures Address Family on VRF\n        Args:\n            device ('obj')    : device to use\n            vrf ('str'): VRF name\n            address_family ('str).  'ipv4', 'ipv6',\n            family_type ('str,optional). (i.e unicast, multicast). Default is ''.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_definition_family",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L202"
    }
  },
  "configure_vrf_description": {
    "iosxe": {
      "doc": "Configure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description(`str`): Description\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L13"
    }
  },
  "configure_vrf_on_interface": {
    "iosxe": {
      "doc": " Configure interface to use VRF\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface\n            vrf ('str'): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1298"
    }
  },
  "configure_vtp_mode": {
    "iosxe": {
      "doc": " Configures global VTP mode\n        Args:\n            device ('obj'): device to use\n            mode ('str'):  VTP mode (i.e transparent, client, server)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L137"
    }
  },
  "configure_wired_radius_attribute_44": {
    "iosxe": {
      "doc": " To configure radius attribute 44 for wired\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_wired_radius_attribute_44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L606"
    }
  },
  "convert_server_to_linux_device": {
    "com": {
      "doc": "\n    Args\n        converts a server block to a device object\n        device ('obj'): Device object\n        server ('str'): server hostname\n\n    Returns:\n        A Device object that can be connected\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "convert_server_to_linux_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1375"
    }
  },
  "copy_data_to_device": {
    "linux": {
      "doc": " Copies data into a device and creates a file to store that data.\n        Args:\n            data ('str'): The data to be copied\n            destination ('str'): Folder of where to store file\n            filename ('str'): Name of the file created. If left none then a \n                random name will be generated\n        Raise:\n            Exception: Permission Denied, File Creation Failed\n        Returns:\n            Path (str): path of created file\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_data_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L123"
    }
  },
  "copy_file_from_tftp_ftp": {
    "com": {
      "doc": "Copy file to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): File name\n            pro (`str`): Transfer protocol\n        Returns:\n            None\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_from_tftp_ftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L437"
    }
  },
  "copy_file_to_running_config": {
    "ios": {
      "doc": " Restore config from local file using copy function\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L43"
    },
    "iosxe": {
      "doc": " Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`str`): timeout\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L43"
    }
  },
  "copy_from_device": {
    "apic": {
      "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (boolean): True if successful, False if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L233"
    },
    "com": {
      "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via telnet or SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .) (optionally include filename)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (str, None): console output if successful, None if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1003"
    },
    "nxos": {
      "aci": {
        "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via telnet or SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (boolean): True if successful, False if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "copy_from_device",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L182"
      }
    }
  },
  "copy_issu_image_to_disk": {
    "iosxe": {
      "doc": " Copy image from a server to disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            address ('str'): Server address\n            path ('str'): Path on server\n            protocol ('str'): Transfer protocol\n            image ('str'): Image name\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n            wait_time_after_copy ('int'): Wait time after file copy\n            overwrite ('bool'): Flag to overwrite existing file\n        Raises:\n            Exception: Failed copying ISSU image to disk\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_issu_image_to_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L71"
    }
  },
  "copy_pcap_file": {
    "com": {
      "doc": "Copy pcap filename to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): Pcap filename\n            command ('str'): cli command to copy file from remote\n                             server to local server\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_pcap_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L254"
    }
  },
  "copy_to_device": {
    "apic": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file to copy to on the device (default: None)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: scp)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L179"
    },
    "com": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file path to copy to on the device (default: flash:)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (str, None): console output if successful, None if not\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L843"
    },
    "iosxr": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file path to copy to on the device (default: harddisk:)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L235"
    },
    "nxos": {
      "aci": {
        "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file to copy to on the device (default: None)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "copy_to_device",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L22"
      }
    }
  },
  "copy_to_server": {
    "com": {
      "doc": " Copy file from directory to server\n\n        Args:\n            testbed ('obj'): Testbed object\n            protocol ('str'): Transfer protocol\n            server ('str'): Server name in testbed yaml or server ip address\n            local_path ('str'): File to copy, including path\n            remote_path ('str'): Where to save the file, including file name\n            timeout('int'): timeout value in seconds, default 300\n            fu_session ('obj'): existing FileUtils object to reuse\n            quiet ('bool'): quiet mode -- does not print copy progress\n        Returns:\n            None\n\n        Raises:\n            Exception\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L367"
    }
  },
  "create_dhcp_pool": {
    "iosxe": {
      "doc": " Create DHCP pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            network ('str'): IP of the network pool\n            mask ('str'): Subnet mask of the network pool\n            router_id ('str'): Default router ID\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L12"
    }
  },
  "create_dhcp_pool_ipv6": {
    "iosxe": {
      "doc": " Create DHCP IPv6 pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            ipv6_prefix ('str'): IPv6 prefix\n            lifetime ('int'): lifetime in seconds\n            pref_lifetime ('int'): preferred lifetime in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating IPv6 DHCP pool\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dhcp_pool_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L12"
    }
  },
  "decode_core": {
    "linux": {
      "doc": " Function to decode the given corefile ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "decode_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L5"
    }
  },
  "decrypt_tacacs_pcap": {
    "iosxe": {
      "doc": "Decrypt and Converting the tacacs pcap file to tacacs txt file\n        Args:\n            filename: taacs pcap filename\n            key: tacacs server key\n            filepath: tacacs pcap file path\n\n        Returns:\n            True : Decrypted and copied to pcap txt file\n            False: No data in pcap text file\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "decrypt_tacacs_pcap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L798"
    }
  },
  "default_interface": {
    "iosxe": {
      "doc": " configure default interface on device\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1206"
    },
    "junos": {
      "doc": " Reset junos interface configuration \n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n        Returns:\n            Boolean\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L13"
    }
  },
  "delete_file_on_device": {
    "junos": {
      "doc": " Deletes file on device\n\n    Args:\n        device (obj): Device object\n        file_name ('str'): File name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_file_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L197"
    }
  },
  "delete_file_on_server": {
    "com": {
      "doc": " delete the file from server\n    Args:\n        testbed ('obj'): testbed object containing the server info\n        server ('str\"): server address or hostname\n        path ('str'): file path on server\n        protocol ('str'): protocol used for deletion, defaults to sftp\n        timeout ('int'):  connection timeout\n    Returns:\n        None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_file_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1330"
    }
  },
  "delete_files": {
    "ios": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L422"
    },
    "iosxe": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L428"
    },
    "nxos": {
      "aci": {
        "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "delete_files",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L352"
      }
    }
  },
  "delete_local_file": {
    "ios": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_local_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L20"
    },
    "iosxe": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_local_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L25"
    }
  },
  "delete_unprotected_files": {
    "apic": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            None\n            ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/utils.py#L38"
    },
    "ios": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L140"
    },
    "iosxe": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L274"
    },
    "nxos": {
      "doc": " Delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L97"
    }
  },
  "destroy_connection": {
    "com": {
      "doc": " Destroy connection device\n        Args:\n            device ('obj'): Device object\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "destroy_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L743"
    }
  },
  "detach_dhcpv6_guard_policy_to_interface": {
    "iosxe": {
      "doc": " Detach DHCPv6 Guard Policy from an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_dhcpv6_guard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2001"
    }
  },
  "detach_dhcpv6_guard_policy_vlan": {
    "iosxe": {
      "doc": " Detach DHCPv6 Guard Policy from a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_dhcpv6_guard_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2285"
    }
  },
  "detach_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Detaches the given ipv6 dhcp guard policy from an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be detached\n            interface (str): interface to detach policy from\n            vlan (str): vlan or vlan range to detach the policy from e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L392"
    }
  },
  "detach_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Detaches the given ipv6 nd suppress policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be detached\n            interface (str): interface to detach policy from\n            vlan (str): vlan or vlan range to detach the policy from. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 nd suppress policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L464"
    }
  },
  "detach_ipv6_raguard_policy_to_interface": {
    "iosxe": {
      "doc": " Detach IPv6 RA Guard Policy from an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to detach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_raguard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2036"
    }
  },
  "detach_ipv6_raguard_policy_to_vlan": {
    "iosxe": {
      "doc": " Detach IPv6 RA Guard Policy from Vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to detach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_raguard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2103"
    }
  },
  "device_tracking_attach_policy": {
    "iosxe": {
      "doc": " Attach device tracking policy to a target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach device-tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1044"
    }
  },
  "device_tracking_detach_policy": {
    "iosxe": {
      "doc": " Detach device-tracking policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach device-tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1076"
    }
  },
  "device_tracking_unit_test": {
    "iosxe": {
      "doc": " Run device-tracking unit tests\n        Args:\n            device ('obj'): device object\n            options ('list'): list of policy configuration options:\n                dictionary contains any of the following keys:\n                    association ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        mac_address ('str')                   48-bit hardware address\n                        command ('str')                       command to execute\n                    bt_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        # configs ('dict', optional):\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                        data_glean('bool', optional):\n                        pref ('dict', optional):\n                            level ('int'):                    preference level\n                            incomplete('bool'):               if True, set incomplete state\n                            origin ('int'):                   set origin\n                            iterate ('int', optional):        number of iterations\n                    bt_mac ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        # configs ('dict', optional):\n                        mac_address ('str'):                  48-bit hardware address\n                        canip ('str', optional):              candidate IP address\n                        wired ('boot', optional):             If true, wired connection\n                    bulk_sync ('bool'):                       if true, bulk sync to DS\n                    check_reach ('dict', optional):\n                        network_address ('str'):              IPv6 address\n                        vlan ('int'):                         vlan id\n                    clear ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        vlans ('list', optional):             list of vlan ids\n                    disable_cli_sync ('bool'):                if true, disable CLI sync\n                    dna ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        policy ('str', optional):             policy name\n                        priority ('int', optional):           policy priority\n                        vlan ('int', optional)\n                    evpn_dt ('int'):                          vlanid - de/attach DT policy from evpn\n                    evpn_flood_suppr ('dict', optional):\n                        vlan: ('int'):                        vlan id\n                        dhcp_floop_suppr ('bool')             enable/disable flooping suppress from evpn\n                    evpn_gateway_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                    evpn_remote_bt_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                        pref_level ('int'):                   preference level\n                    fabric ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        mac_address('str'):                   48-bit hardware address\n                    fault ('dict', optional):\n                        code: ('int'):                        fault code\n                        mac_address ('str'):                  48-bit hardware address\n                        bdid ('int'):                         bridge-domain id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        transaction_id ('int'):               DHCP transation id\n                        client_address ('str'):               Client IP address\n                        server_address ('str'):               Server IP address\n                    flood_suppr ('int'):                      vlan id, de/attach flooding suppress policy\n                    ha_sync_msg ('dict', optional):\n                        msg_type ('str'):                     HA message type\n                        action ('str'):                       enable or disable message type\n                    ip_dhcp_snooping ('int'):                 vlan id, de/attach shared policy from ip dhcp snooping\n                    lisp_dt ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        pref_level ('int'):                   preference level\n                        cache_guard ('int'):                  cache guard\n                    notify ('dict', optional):\n                        delete ('dict', optional):\n                            network_address ('str'):          IP address\n                            check ('str'):                    type of check\n                        register ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                    pgm ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        peer ('dict', optional):\n                            network_address ('str'):          IP address\n                            interface ('str'):                interface\n                            num ('str'):                      interface num\n                        vlan ('int', optional):               vlan id\n                    profile ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                    reapply_filters ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                    replace_policy ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('dict', optional):\n                            id ('int'):                       vlan id\n                            old_policy ('str'):               old policy name\n                            new_policy ('str'):               new policy name\n                    transport ('str'):                        authentication key (Hex string)\n                    upgm ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                ex.)\n                    [\n                        {\n                            \"association\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"command\": \"new\"\n                            },\n                            \"bt_add\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"pref\": {\n                                    \"level\": 2,\n                                    \"incomplete\": True,\n                                    \"origin\": 4,\n                                    \"iterate\": 2,\n                                },\n                            },\n                            \"bt_mac\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"wired\": True,\n                            },\n                            \"bulk_sync\": True,\n                            \"check_reach\": {\n                                \"network_address\": \"FE80::6AF3:3E56:FE0B:BEE9\",\n                                \"vlan\": 39,\n                            },\n                            \"clear\": {\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"vlans\": [1, 2, 3, 4, 5],\n                            },\n                            \"disable_cli_sync\": True,\n                            \"dna\": {\n                                \"policy\": \"test\",\n                                \"priority\": 255,\n                                \"vlan\": 39,\n                            },\n                            \"evpn_dt\": 39,\n                            \"evpn_flood_suppr\": {\n                                \"vlan\": 39,\n                                \"dhcp_floop_suppr\": True,\n                            },\n                            \"evpn_gateway_add\": {\n                                \"vlan\": 39,\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                            },\n                            \"evpn_remote_bt_add\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"pref_level\": 255,\n                            },\n                            \"fabric\": {\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                            },\n                            \"fault\":{\n                                \"code\": 12,\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"bdid\": 4094,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"transaction_id\": 10000,\n                                \"client_address\": \"10.10.10.10\",\n                                \"server_address\": \"20.20.20.20\",\n                            },\n                            \"flood_suppr\": 39,\n                            \"ha_sync_msg\": {\n                                \"msg_type\": \"bt-entry\",\n                                \"action\": \"disable\",\n                            },\n                            \"ip_dhcp_snooping\": 39,\n                            \"lisp_dt\": {\n                                \"vlan\": 39,\n                                \"pref_level\": 0,\n                                \"cache_guard\": 3,\n                            },\n                            \"notify\": {\n                                \"delete\": {\n                                    \"network_address\": \"10.10.10.10\",\n                                    \"check\": \"quick_check\",\n                                },\n                            },\n                            \"pgm\": {\n                                \"vlan\": 39,\n                            },\n                            \"profile\": {\n                                \"vlan\": 39,\n                            },\n                            \"reapply_filters\":{\n                                \"vlan\": 39,\n                            },\n                            \"replace_policy\": {\n                                \"vlan\": {\n                                    \"id\": 39,\n                                    \"old_policy\": \"policy_old\",\n                                    \"new_policy\": \"policy_new\",\n                                },\n                            },\n                            \"transport\": \"ffff\",\n                            \"upgm\": {\n                                \"target\": {\n                                    \"interface\": \"TwentyFiveGigE\",\n                                    \"num\": \"1/0/42\",\n                                },\n                            },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to perform device-tracking unit-test\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_unit_test",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1272"
    }
  },
  "diff_configuration": {
    "com": {
      "doc": " Show difference between two configurations\n        Args:\n            config1 ('str'): Configuration one\n            config2 ('str'): Configuration two\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "diff_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1446"
    }
  },
  "disable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Disables bfd on ospf protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L74"
    }
  },
  "disable_cts_enforcement": {
    "iosxe": {
      "doc": " Disable cts role-based enforcement\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_cts_enforcement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L290"
    }
  },
  "disable_cts_enforcement_vlan": {
    "iosxe": {
      "doc": " disable cts role-based enforcement on given vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_cts_enforcement_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L307"
    }
  },
  "disable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Disabling DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to disable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L119"
    }
  },
  "disable_dhcp_snooping": {
    "iosxe": {
      "doc": " Disable DHCP snooping globally\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping globally\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L248"
    }
  },
  "disable_dhcp_snooping_option_82": {
    "iosxe": {
      "doc": " Disable DHCP snooping Option 82\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping Option 82\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping_option_82",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L159"
    }
  },
  "disable_dhcp_snooping_vlan": {
    "iosxe": {
      "doc": " Disable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping on vlan\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L119"
    }
  },
  "disable_dot1x_sysauthcontrol": {
    "iosxe": {
      "doc": " Globally disables 802.1X port-based authentication.\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable 802.1X port-based authentication.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dot1x_sysauthcontrol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L470"
    }
  },
  "disable_iox": {
    "iosxe": {
      "doc": " \n    Configure no iox    \n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L104"
    }
  },
  "disable_ip_routing": {
    "iosxe": {
      "doc": " Disables ip routing on device\n\n        Args:\n            device ('str'): Device str\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L244"
    }
  },
  "disable_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Disables ipv6 multicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L445"
    }
  },
  "disable_keepalive_on_interface": {
    "iosxe": {
      "doc": " Disables keepalive on interface \n\n        Args:\n            device ('str'): Device str\n            interface ('str'): MTU value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_keepalive_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L297"
    }
  },
  "disable_service_internal": {
    "iosxe": {
      "doc": " Disable service internal\n        Args:\n            device ('obj'): device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable service internal\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1254"
    }
  },
  "disable_usb_ssd": {
    "iosxe": {
      "doc": " \n    Configure - platform usb disable\n    Disables connected SSDs on c9300\n    Args:\n        device ('obj') : Device object\n        timeout ('int'): timeout arg for Unicon configure for this CLI\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_usb_ssd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L34"
    }
  },
  "downgrade_issu_image_on_router": {
    "iosxe": {
      "doc": " Execute software downgrade on router\n        Args:\n            device ('obj'): Device object\n            upgraded_image ('str'): Name of current installed image\n            downgrade_image ('str'): Name of image to be used in downgrade\n            disk ('str'): Disk name            \n            timeout ('int'): Timeout in seconds\n        Raise:\n            SubCommandFailure: Failed downgrading image on device\n            ConnectionError: Failed reconnecting to device\n        Returns:\n            None\n\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "downgrade_issu_image_on_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L368"
    }
  },
  "dynamic_diff_create_running_config": {
    "com": {
      "doc": " Creates a merged running config from template dynamic diff with\n        variables replaced by mapping and merged with base config\n        Args:\n            mapping ('dict'): Variable to interface mapping\n            ex.) {'{{ int_1 }}': 'Ethernet2/1-48', '{{ int_2 }}': 'Ethernet5'}\n            template ('str'): Content of the dynamic diff template\n            base_config ('str'): Content of the base config\n        Raise:\n            None\n        Returns:\n            Config ('str'): The merged running config from template\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "dynamic_diff_create_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1516"
    }
  },
  "dynamic_diff_parameterized_running_config": {
    "com": {
      "doc": " Parameterize device interface from the configuration and return the parameterized configuration\n        with respect to the mapping.\n        Args:\n            base_config ('str'): Content of the base config\n            mapping ('dict'): Interface to variable mapping\n            ex.) {'Ethernet2/1-48': '{{ int_1 }}', 'Ethernet5': '{{ int_2 }}'}\n            running_config ('str'): The running config. If set to None, running config will be retrieved\n                from currently connected device\n        Raise:\n            None\n        Returns:\n            Templated Config ('str'): The config that is parameterized\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "dynamic_diff_parameterized_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1468"
    }
  },
  "enable_autoconf": {
    "iosxe": {
      "doc": " Enable autoconf\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable autoconf\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_autoconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L181"
    }
  },
  "enable_backtrace": {
    "nxos": {
      "n9k": {
        "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to enable backtrace\n            module (`int`): module number for LCs\n            frame_count (`int`): number of backtraces\n        Returns:\n            out (`str`): Output of command\n    ",
        "module_name": "debug.debug",
        "package": "genie.libs.sdk.apis",
        "uid": "enable_backtrace",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/debug/debug.py#L11"
      }
    }
  },
  "enable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Enabled bfd on ospf protocol on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L52"
    }
  },
  "enable_bfd_static_route": {
    "iosxe": {
      "doc": " Enables bfd static route on device\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n            ip_address ('str'): ip address of destination\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling bfd static rout on device\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bfd_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L96"
    }
  },
  "enable_bgp_forwarding": {
    "iosxe": {
      "doc": " enables bgp forwarding under interface\n        Args:\n            device('obj'): device to configure\n            interface_name('str'): interface name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bgp_forwarding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1326"
    }
  },
  "enable_cts_enforcement": {
    "iosxe": {
      "doc": " Enable cts role-based enforcement\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_cts_enforcement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L33"
    }
  },
  "enable_cts_enforcement_vlan": {
    "iosxe": {
      "doc": " Enable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_cts_enforcement_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L51"
    }
  },
  "enable_debug": {
    "iosxe": {
      "doc": " Enable debug for the mentioned parameter\n        Args:\n            device ('obj'): device to use\n            parameter ('str'): parameter for which debug has to be enabled\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling debug\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_debug",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L12"
    }
  },
  "enable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Enabling DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to enable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L73"
    }
  },
  "enable_dhcp_snooping": {
    "iosxe": {
      "doc": " Enable DHCP snooping \n        Args:\n            device ('obj'): device to use\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCP snooping\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L100"
    }
  },
  "enable_dhcp_snooping_option_82": {
    "iosxe": {
      "doc": " Enable DHCP snooping Option 82\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling DHCP snooping Option 82\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping_option_82",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L231"
    }
  },
  "enable_dhcp_snooping_vlan": {
    "iosxe": {
      "doc": " Enable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCP snooping on vlan\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L80"
    }
  },
  "enable_dot1x_sysauthcontrol": {
    "iosxe": {
      "doc": " Globally enables 802.1X port-based authentication.\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable 802.1X port-based authentication.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dot1x_sysauthcontrol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L266"
    }
  },
  "enable_iox": {
    "iosxe": {
      "doc": " \n    Configure iox    \n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L89"
    }
  },
  "enable_ip_dhcp_snooping_trust": {
    "iosxe": {
      "doc": " Enable DHCP snooping trust on interface\n        Configure 'ip dhcp snooping trust' on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling DHCP snooping trust on interface\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_dhcp_snooping_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L205"
    }
  },
  "enable_ip_routing": {
    "iosxe": {
      "doc": " Enables ip routing on device\n\n        Args:\n            device ('str'): Device str\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L193"
    }
  },
  "enable_ipv6_dhcp_server": {
    "iosxe": {
      "doc": " Enable IPv6 DHCP server on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to enable IPv6 DHCP server\n            pool_name (`str`): Pool name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_dhcp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1967"
    }
  },
  "enable_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Enables ipv6 multicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L419"
    }
  },
  "enable_ipv6_unicast_routing": {
    "iosxe": {
      "doc": " Enables ipv6 unicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_unicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L218"
    }
  },
  "enable_routing_debug_static_route": {
    "iosxe": {
      "doc": " Enables debug route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): route\n            mask (str): mask the ip address\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_routing_debug_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L163"
    }
  },
  "enable_service_internal": {
    "iosxe": {
      "doc": " Enable service internal\n        Args:\n            device ('obj'): device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable service internal\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1236"
    }
  },
  "enable_usb_ssd": {
    "iosxe": {
      "doc": " \n    Configure - no platform usb disable\n    Enables connected SSDs on c9300\n    Args:\n        device ('obj') : Device object\n        timeout ('int'): timeout arg for Unicon configure for this CLI\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_usb_ssd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L15"
    }
  },
  "escape_ansi": {
    "com": {
      "doc": null,
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "escape_ansi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L165"
    }
  },
  "exclude_ip_dhcp": {
    "iosxe": {
      "doc": " Exclude IP in DHCP\n        Args:\n            device ('obj'): device to use\n            ip ('str'): ip to exclude\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed excluding IP in DHCP config\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "exclude_ip_dhcp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L139"
    }
  },
  "execute": {
    "com": {
      "doc": " execute command to device\n        Args:\n            device (`obj`): Device object\n        Return:\n            output (`str`): output from command on device\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L431"
    },
    "junos": {
      "doc": " Execute command to device\n\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n        \n        Returns:\n            output which is generated by command\n            \n        Raises:\n            N/A or SubCommandFailure       \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "execute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L305"
    }
  },
  "execute_and_parse_json": {
    "com": {
      "doc": " execute the specified command on the device which must return output in JSON format.\n        The JSON is parsed into a dict.\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            output (`dict`): parsed JSON output from command on device as a dict\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_and_parse_json",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L453"
    }
  },
  "execute_by_jinja2": {
    "linux": {
      "doc": " Configure using Jinja template\n        Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            post_commands ('list'): List of post commands\n            failure_commands ('list'): List of commands required after failure\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L52"
    }
  },
  "execute_card_OIR": {
    "ios": {
      "doc": " Execute 'hw-module subslot <slot> oir power-cycle' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR has to be performed\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L219"
    },
    "iosxe": {
      "doc": " Execute 'hw-module subslot <slot> oir power-cycle' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR has to be performed\n            timeout ('int',optional): Max time for card oir execution to complete in seconds.Defaults to 60\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L352"
    }
  },
  "execute_change_boot_variable": {
    "nxos": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n            timeout ('int'): Timeout in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_change_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L17"
    }
  },
  "execute_clean_controller_fabric": {
    "apic": {
      "doc": " Cleans the controller part of the ACI fabric\n\n    Args:\n        device (obj): Device to execute on\n\n        max_time (int, optional): Max time in seconds allowed for 'acidiag\n            touch clean'. Defaults to 90.\n\n    Returns:\n        True if successful\n        False if failed\n\n    Raises:\n        N/A\n    ",
      "module_name": "fabric.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clean_controller_fabric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/fabric/execute.py#L93"
    }
  },
  "execute_clean_node_fabric": {
    "nxos": {
      "aci": {
        "doc": " Cleans the node part of the ACI fabric\n\n    Args:\n        device (obj): Device to execute on\n\n        hostname (str, optional): Hostname to copy boot image from if its not\n            found. Defaults to None.\n\n        copy_protocol (str, optional): Protocol to use for copying boot image\n            if its not found. Defaults to None\n\n        image (str, optional): Boot image to copy if its not found. Defaults\n            to None.\n\n        destination_dir (str, optional): Directory to copy the boot image to.\n            Defaults to None.\n\n        copy_max_time (int, optional): Max time in seconds allowed for copying\n            the image. Defaults to 300.\n\n        max_time (int, optional): Max time in seconds allowed for executing\n            clean commands. Defaults to 90.\n\n    Returns:\n        True if successful\n        False if failed\n\n    Raises:\n        N/A\n    ",
        "module_name": "fabric.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_clean_node_fabric",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/fabric/execute.py#L10"
      }
    }
  },
  "execute_clear_dns_statistics": {
    "iosxe": {
      "doc": " Execute test CLI to Clear umbrella dns querey/response statistics\n        Args:\n            device ('obj'): device to use\n        Returns:\n            clear statistics execution command\n        Raises:\n            SubCommandFailure: test ngdns cli\n    ",
      "module_name": "umbrella_odns.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_dns_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/execute.py#L25"
    }
  },
  "execute_clear_firmware_repository": {
    "apic": {
      "doc": " Clears the firmware repository.\n\n    Args:\n        device (obj): Device to execute on\n\n        sleep_after_delete (int, optional): Time in seconds to sleep\n            after clearing the firmware repository. Defaults to 5.\n\n    Returns:\n        True if firmware repository is emptied\n        False if firmware repository cannot be emptied\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_firmware_repository",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L10"
    }
  },
  "execute_clear_line": {
    "com": {
      "doc": " Executes 'clear line <port>' to clear busy console port on device\n        Args:\n            device ('obj'): Device object\n            alias ('str'): Alias used for console port connection\n                           Default: 'cli'\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L23"
    }
  },
  "execute_clear_logging": {
    "iosxe": {
      "doc": " Clears logging logs\n        execute - clear logging\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            None\n    ",
      "module_name": "logging.get",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#L35"
    }
  },
  "execute_clear_nat_translation": {
    "iosxe": {
      "doc": " Clear All NAT Flows\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat_translation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L2"
    }
  },
  "execute_clear_platform_software_fed_active_acl_counters_hardware": {
    "iosxe": {
      "doc": " clear platform software fed active acl counters hardware\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_active_acl_counters_hardware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L388"
    }
  },
  "execute_clear_platform_software_fed_switch_acl_counters_hardware": {
    "iosxe": {
      "doc": " clear platform software fed switch acl counters hardware\n        Args:\n            device ('obj'): Device object\n            switch_num ('int'): Switch number to clear acl counters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_switch_acl_counters_hardware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L403"
    }
  },
  "execute_copy_run_to_start": {
    "com": {
      "doc": " Execute copy running-config to startup-config\n        Args:\n            device ('obj'): Device object\n            command_timeout ('int'): Timeout value in sec, Default Value is 300 sec\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n            copy_vdc_all ('boolean'): Copy on all VDCs or not, Default Value is False\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_run_to_start",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L371"
    }
  },
  "execute_copy_to_running_config": {
    "com": {
      "doc": " Copying file to running-config on device\n        Args:\n            device ('obj'): Device object\n            file ('str'): String object to copy to device\n            copy_config_timeout ('int'): Timeout for copy in seconds (default: 60)\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L326"
    }
  },
  "execute_copy_to_startup_config": {
    "com": {
      "doc": " Copying file to startup-config on device\n        Args:\n            device ('obj'): Device object\n            file ('str'): String object to copy to device\n            dest ('str'): Target to copy to (default: startup-config)\n            copy_config_timeout ('int'): Timeout for copy in seconds (default: 60)\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_to_startup_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L348"
    }
  },
  "execute_deactivate_pie": {
    "iosxr": {
      "doc": " De-activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_deactivate_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L85"
    }
  },
  "execute_delete_boot_variable": {
    "ios": {
      "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to delete as boot variable\n            timeout ('int', optional): Max time to delete boot vars in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_delete_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L26"
    },
    "iosxe": {
      "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list', optional): List of strings of system images to delete as boot variable.default is an empty list\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_delete_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L26"
    },
    "nxos": {
      "mds": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/mds/platform/execute.py#L10"
      },
      "n3k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n3k/platform/execute.py#L11"
      },
      "n5k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n5k/platform/execute.py#L10"
      },
      "n7k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n7k/platform/execute.py#L10"
      },
      "n9k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/platform/execute.py#L10"
      }
    }
  },
  "execute_install_controller_group_firmware": {
    "apic": {
      "doc": " Installs the controller image onto the controller(s) and verifies install\n    completed.\n\n    Args:\n        device (obj): Device to execute on\n\n        controller_image (str): Image to install. This must exist in the\n            firmware repository.\n\n        error_patterns (list, optional): Any extra error patterns for executing\n            'firmware upgrade controller-group'. Defaults to None.\n\n        controller_upgrade_max_time (int, optional): Max time in seconds allowed\n            for verifying controller upgrade. Defaults to 1800.\n\n        controller_upgrade_check_interval (int, optional): How often in seconds\n            to check upgrade status. Defaults to 60.\n\n        controller_reconnect_max_time (int optional): Max time in seconds allowed\n            for reconnecting to controller if the connection is lost. Defaults\n            to 900.\n\n        controller_reconnect_check_interval (int, optional): How often in\n            seconds to attempt reconnect. Defaults to 60.\n\n        controller_upgrade_after_reconnect_max_time (int, optional): Max time\n            in seconds allowed for verifying controller upgrade after reconnect.\n            Defaults to 300.\n\n        controller_upgrade_after_reconnect_check_interval (int, optional): How\n            often in seconds to check upgrade status after reconnect. Defaults\n            to 60.\n\n    Returns:\n        True if install succeeds\n        False if install failed\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_controller_group_firmware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L44"
    }
  },
  "execute_install_package": {
    "iosxe": {
      "doc": " Installs package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            install_timeout (\"int\"): Maximum time for install. Default 660\n            reconnect_max_time (\"int\"): Maximum time for reconnect. Default 120\n            reconnect_interval (\"int\"): Time between reconnect attempts. Default 30\n            install_commit_sleep_time (\"int\"): Sleep time before install commit command\n            _install (\"bool\"): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L146"
    }
  },
  "execute_install_pie": {
    "iosxr": {
      "doc": " Installs and activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image_dir (`str`): Directory where pie file is located in\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n            _install (`bool`): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L15"
    }
  },
  "execute_install_switch_group_firmware": {
    "apic": {
      "doc": " Installs the switch image on the switch(s) and then verifies the install\n    completed.\n\n    Args:\n        device (obj): Device to execute on\n\n        switch_image (str): Image to install. This must exist in the\n            firmware repository.\n\n        switch_node_ids (str): String of node IDs to install the image on. The\n            node IDs must be separated by a comma.\n\n        switch_group_name (str, optional): Name for the switch-group that will\n            be configured. Defaults to switches.\n\n        clear_switch_group (bool, optional): Whether or not to clear the\n            switch-group configuration before applying new configuration.\n            Defaults to True.\n\n        error_patterns (list, optional): Any extra error patterns for executing\n            'firmware upgrade switch-group {name}'. Defaults to None.\n\n        switch_upgrade_max_time (int, optional): Max time in seconds allowed for\n            verifying upgrade status. Defaults to 2700.\n\n        switch_upgrade_check_interval (int, optional): How often in seconds to\n            check upgrade status. Defaults to 60.\n\n        stabilize_switch_group_config_sleep (int, optional): How long in seconds\n            to sleep after configuring switch-group. Defaults to 120.\n\n        controller_reconnect_max_time (int optional): Max time in seconds allowed\n            for reconnecting to controller if the connection is lost. Defaults\n            to 900.\n\n        controller_reconnect_check_interval (int, optional): How often in\n            seconds to attempt reconnect. Defaults to 60.\n\n    Returns:\n        True if install succeeds\n        False if install failed\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_switch_group_firmware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L151"
    }
  },
  "execute_power_cycle_device": {
    "com": {
      "doc": " Powercycle a device\n\n    Args:\n        device ('obj'): Device object\n\n        delay (int, optional): Time in seconds to sleep between turning the\n            device off and then back on. Defaults to 30.\n\n    Raises:\n        Exception if powercycling fails.\n\n    Returns:\n        None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_power_cycle_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L77"
    }
  },
  "execute_register_nodes": {
    "apic": {
      "doc": " Registers the provided nodes to the fabric\n\n    Args:\n        device (obj): The device to execute on\n\n        nodes (list): Names of the nodes to register. These nodes must\n            have 'serialnum' and 'node_id' defined under the\n            testbed.device.custom key.\n\n        rest_alias (str, optional): Alias for the REST connection. Defaults\n            to rest.\n\n    Returns:\n        True if registering is successful\n        False if registering fails\n\n    Raises:\n        N/A\n    ",
      "module_name": "fabric.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_register_nodes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/fabric/execute.py#L10"
    }
  },
  "execute_reload": {
    "com": {
      "doc": " Reload device\n        Args:\n            device ('obj'): Device object\n            prompt_recovery ('bool'): Enable/Disable prompt recovery feature\n            reload_creds ('str'): Credential name defined in the testbed yaml file to be used during reload\n            sleep_after_reload ('int'): Time to sleep after reload in seconds, default: 120\n            timeout ('int'): reload timeout value, defaults 800 seconds.\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L297"
    }
  },
  "execute_remove_inactive_pies": {
    "iosxr": {
      "doc": " Removes given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            remove_timeout (`str`): Maximum time to execute command\n                                    Default 300 seconds (Optional)\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_remove_inactive_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L109"
    }
  },
  "execute_set_boot_variable": {
    "ios": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to set as boot variable\n            timeout ('int', optional): Max time to set boot vars in seconds\n                             Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L45"
    },
    "iosxe": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to set as boot variable\n            timeout ('int'): Max time to set boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L52"
    }
  },
  "execute_set_config_register": {
    "ios": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int', optional): Max time to set config-register in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L64"
    },
    "iosxe": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L70"
    },
    "iosxr": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n                             Default 60 seconds (Optional)\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L133"
    }
  },
  "execute_test_ngdns_lookup": {
    "iosxe": {
      "doc": " Execute dns query using test cli\n        Args:\n            device ('obj'): device to use\n            domain_name ('str'): URL whihc we want to validate\n        Returns:\n            test execution command \n        Raises:\n            SubCommandFailure: test ngdns cli\n    ",
      "module_name": "umbrella_odns.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_ngdns_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/execute.py#L3"
    }
  },
  "execute_uninstall_package": {
    "iosxe": {
      "doc": " Uninstalls package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            timeout (\"int\"): maximum time for install\n            install_commit_sleep_time (\"int\"): Sleep time before install commit command\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_uninstall_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L247"
    }
  },
  "execute_write_erase": {
    "ios": {
      "doc": " Execute 'write erase' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int', optional): Max time to for write erase to complete in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L83"
    },
    "iosxe": {
      "doc": " Execute 'write erase' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for write erase to complete in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L88"
    },
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L47"
    }
  },
  "execute_write_erase_boot": {
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L76"
    }
  },
  "execute_write_memory": {
    "ios": {
      "doc": " Execute 'write memory' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int', optional): Max time to for write memory to complete in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L120"
    },
    "iosxe": {
      "doc": " Execute 'write memory' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for write memory to complete in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L125"
    }
  },
  "export_packet_capture": {
    "ios": {
      "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n            protocol (`str`): Protocol name\n            path (`str`): Path to export\n            username (`str`): user name\n            password (`str`): password\n\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "export_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L150"
    },
    "iosxe": {
      "cat9500": {
        "doc": "Export the packet capture to device\n        Args:\n            device (`obj`): Device object\n            server_config dict has following attributes\n                cap_name (str): capture name\n                filetype (`str`): Filetype(flash)\n                file_name (`str`): pcap file name\n            timeout : timeout value\n        Returns:\n            True on successful export and copy\n            False on not successful export or copy\n        Raises:\n            pyATS Results\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "export_packet_capture",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/utils.py#L13"
      },
      "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n            protocol (`str`): Protocol name\n            path (`str`): Path to export\n            username (`str`): user name\n            password (`str`): password\n\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "export_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L156"
    }
  },
  "extract_tar_gz": {
    "linux": {
      "doc": " extract tar.gz file\n        Args:\n            files (`list`): list of tar.gz files\n            option (`str`): option to tar command for extraction\n                            Default to `-zxvf`\n        Raises:\n            N/A\n        Returns:\n            extracted_files (`list`): extracted file list\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "extract_tar_gz",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L14"
    }
  },
  "free_up_disk_space": {
    "apic": {
      "doc": "Delete files to create space on device except protected files\n    Args:\n        device ('Obj') : Device object\n        destination ('str') : Destination directory, i.e bootflash:/\n        required_size ('int') : Check if enough space to fit given size in bytes.\n                                If this number is negative it will be assumed\n                                the required size is not available.\n        skip_deletion ('bool') : Only performs checks, no deletion\n        protected_files ('list') : List of file patterns that wont be deleted.\n        min_free_space_percent ('int'): Minimum acceptable free disk space %.\n                                        Optional,\n        dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n         True if there is enough space after the operation, False otherwise\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "free_up_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/utils.py#L89"
    },
    "com": {
      "doc": "Delete files to create space on device except protected files\n    Args:\n        device ('Obj') : Device object\n        destination ('str') : Destination directory, i.e bootflash:/\n        required_size ('int') : Check if enough space to fit given size in bytes.\n                                If this number is negative it will be assumed\n                                the required size is not available.\n        skip_deletion ('bool') : Only performs checks, no deletion\n        protected_files ('list') : List of file patterns that wont be deleted\n        compact ('bool'): Compact option for n9k, used for size estimation,\n                          default False\n        min_free_space_percent ('int'): Minimum acceptable free disk space %.\n                                        Optional,\n        dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        allow_deletion_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False\n    Returns:\n         True if there is enough space after the operation, False otherwise\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "free_up_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L173"
    }
  },
  "get_aaa_member": {
    "iosxe": {
      "doc": "Get aaa member by parsing variuos aaa related commands\n        Args:\n            device (`obj`): Device object\n            leaf   (`str`): Need xpath value for this leaf\n                            ref:accounting-method, athorization-method,\n                            athenticating-method, event-type, role, username,\n                            password, secret, server-name, server-type, opens,\n                            closes, aborts, reject, request, timeouts, source-address\n            keyword (`str`): This argument highlihgts particular section from\n                            'show run aaa' command.\n                            eg:\"show run aaa | sec \" + keyword => keyword = accounting\n            intf   (`str`): interface name\n        Returns:\n            Valid xpath value for the leaf or None\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_aaa_member",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L14"
    }
  },
  "get_aci_registered_nodes_in_state": {
    "apic": {
      "doc": " Returns a list of node IDs that are in the provided state.\n\n    Args:\n        device (obj): Device to execute on\n        state (str): State of nodes to match\n\n    Returns:\n        (list): of nodes that are in the provided state\n\n    Raises:\n        N/A\n    ",
      "module_name": "acidiag.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_aci_registered_nodes_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/acidiag/get.py#L11"
    }
  },
  "get_acl_hit_counts": {
    "iosxe": {
      "doc": " Get ACL(access-list) hit counts\n\n        Args:\n            device(`obj`): Device object\n            name(`str`): Access-list name\n            source_network(`str`): source network\n            destination_network(`str`): destination network\n            output(`str`): output of show access-lists\n            parsed_output(`str`): parsed_output from show access-lists\n        Returns:\n            List:\n            [[str, int]]\n\n            Example:\n            [['acl1', 100]]\n        Raises:\n            None\n    ",
      "module_name": "acl.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_acl_hit_counts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/get.py#L15"
    }
  },
  "get_active_outgoing_interface": {
    "junos": {
      "doc": " Get active outgoing interface value\n\n        Args:\n            device (`obj`): Device object\n            destination_address (`str`): Destination address value\n            extensive ('bool'): Try command with extensive \n        Returns:\n            Interface name\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_active_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L15"
    }
  },
  "get_address_without_netmask": {
    "junos": {
      "doc": " Get interface ip address without mask\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            return_all ('bool'): return List of values. Defaults to False\n                                 Default to False\n            link_local (`bool`): flag to get link-local address for IPv6\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_address_without_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L130"
    }
  },
  "get_archive_config_differences": {
    "iosxe": {
      "doc": " Gets the archive differences between {file1} and {file2}\n\n        Args:\n            device ('obj'): Device object\n            file1('str'): file1 to get diff from\n            file2('str'): file2 to get diff from\n\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n    ",
      "module_name": "archive.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_archive_config_differences",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L35"
    }
  },
  "get_archive_config_incremental_diffs": {
    "iosxe": {
      "doc": " Gets the archive incremental diffs from file\n\n        Args:\n            device ('obj'): Device object\n            file('str'): file to get diff from\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "archive.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_archive_config_incremental_diffs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L11"
    }
  },
  "get_arp_interface_mac_from_ip": {
    "iosxe": {
      "doc": "\n    Get the outgoing interface along with mac address of particular\n    host in 'show arp vrf <vrf> <ip>' / 'show arp <ip>'  arp table\n\n    Args:\n        device(`obj`): Device str\n        ip_address ('str'): ip\n        vrf ('str', optional): vrf interface, default None\n    Returns:\n        interface and mac (tuple)\n        None\n    ",
      "module_name": "arp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_arp_interface_mac_from_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#L36"
    }
  },
  "get_arp_table_count": {
    "iosxe": {
      "doc": "\n    Get arp table count\n\n    Args:\n        device(`obj`): Device str\n    Returns:\n        arp table count\n    ",
      "module_name": "arp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_arp_table_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#L14"
    }
  },
  "get_auth_session": {
    "iosxe": {
      "doc": "\n    Get the authentication session details for the device interface\n    Args:\n        device ('obj'): Device object\n        interface ('str'): interface to check the authentication session\n        mac_address ('str'): mac-address of the session\n        search_value (str): key to be matched for method status\n        method ('str', optional): dot1x/mab session\n        timeout (int, optional): Total timeout in seconds. Defaults to 1\n        interval (int, optional): interval in seconds to check for authentication.\n                                  Defaults to 1\n    Returns:\n        None if authentication session is empty\n        Authentication session dictionary if session exists\n    Raise:\n        AttributeError\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_auth_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L259"
    }
  },
  "get_authentication_config_mode": {
    "iosxe": {
      "doc": "  Get current authentication config mode on device\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            config mode\n\n        Raises:\n            SubCommandFailure: Failed to configure authentication convert-to new-style\n    ",
      "module_name": "authentication.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_authentication_config_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/authentication/get.py#L16"
    }
  },
  "get_available_space": {
    "apic": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/get.py#L7"
    },
    "ios": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L492"
    },
    "iosxe": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L213"
    },
    "iosxr": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L118"
    },
    "nxos": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L74"
    }
  },
  "get_bfd_session_state_count": {
    "junos": {
      "doc": " Get bfd session state count\n\n    Args:\n        device (obj): Device object\n        expected_session_state (str): Expected session state. Defaults to 'Up'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "bfd.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bfd_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/get.py#L14"
    }
  },
  "get_bgp_advertised_route_count": {
    "iosxe": {
      "doc": " Returns number of advertised routes under neighbor\n\n        Args:\n            device('obj'): device to use\n            neighbor ('str'): neighbor to search under\n            route ('str'): route to search for\n        Returns:\n            number of advertised routes ('int')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_advertised_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1643"
    }
  },
  "get_bgp_as": {
    "iosxr": {
      "doc": " Get bgp id from show running-config\n\n        Args:\n            device ('obj'): device object\n            instance ('str'): instance name\n        Returns:\n            str: bgp_as\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/get.py#L16"
    }
  },
  "get_bgp_best_routes": {
    "iosxe": {
      "doc": " Get best routes to neighbor\n\n        Args:\n            device('obj): device to use\n            address_family('str'): address_family to search under\n            rd('str'): vrf route distinguisher\n            neighbor_address('str'): ip_address of neighbor to search under\n            vrf('str'): vrf to search under\n        Returns:\n            list of routes\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L662"
    }
  },
  "get_bgp_current_as_path": {
    "iosxe": {
      "doc": " Learn current AS path from show command\n        Args:\n            device ('obj')         : Device object\n            vrf ('str')       : VRF name\n            address_family ('str') : Address family\n        Returns:\n            String: neighbor\n            String: AS path\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_current_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L766"
    }
  },
  "get_bgp_external_internal_neighbor_count": {
    "iosxe": {
      "doc": " \n        Get counter of internals bgp neighbors (iBGP) \n        and externals bgp neighbors (eBGP)\n        Args:\n            device ('obj'): Device object\n        Returns:\n            ibgp_count ('int'): Counter of internal bgps (iBGP)\n            ebgp_count ('int'): Number of external bgps (eBGP)\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_external_internal_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1298"
    }
  },
  "get_bgp_id": {
    "iosxe": {
      "doc": " Get bgp id\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n        Returns:\n            integer: bgp_id\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1001"
    }
  },
  "get_bgp_last_reset_list": {
    "iosxe": {
      "doc": " Get last reset list from - show ip bgp all neighbors\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            key_list(`list`): result list\n            table(`obj`): table to display\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_last_reset_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L126"
    }
  },
  "get_bgp_mpls_labels": {
    "iosxe": {
      "doc": " Returns BGP mpls labels\n\n        args:\n            device ('obj'): Device to use\n            route ('str'): Route to check mpls label\n\n        raises:\n            N/A\n\n        returns:\n            str\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_mpls_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1708"
    }
  },
  "get_bgp_mvpn_route_count": {
    "iosxe": {
      "doc": " Returns count of metioned routes \n\n        args:\n            device ('obj'): Device to use\n            route ('list'): Route to check \n            vrf ('str'): vrf name\n        raises:\n            N/A\n\n        returns:\n            dict\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_mvpn_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1754"
    }
  },
  "get_bgp_neighbor_capabilities": {
    "iosxe": {
      "doc": " Get neighbor capabilities \n        Args:            \n            vrf ('str')               : VRF name\n            device ('obg')            : Device object\n            output ('dict')           : Parsed output\n            address_family ('str')    : Address family to be verified\n            neighbor_address ('str')          : Neighbor address\n            vrf ('str')               : VRF name\n        Returns:\n            Capabilities\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_capabilities",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L806"
    }
  },
  "get_bgp_neighbor_prefixes_count": {
    "junos": {
      "doc": "\n    Get bgp neighbor accepted, received or advertised prefixes count\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_prefixes_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L634"
    }
  },
  "get_bgp_neighbor_session_state": {
    "iosxe": {
      "doc": " Get session state from device\n\n        Args:\n            device ('obj')           : Device object\n            vrf ('str')              : VRF name\n            address_family           : Address family\n            neighbor_address ('str')         : Neighbor interface address\n            output ('dict')          : Parsed output\n            address_families ('list')        : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n        Returns:\n            Session state\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L848"
    }
  },
  "get_bgp_neighbors": {
    "iosxe": {
      "doc": " Gets bgp neighbors that is under {address_family}\n        and optionally {vrf} \n            - show ip bgp {address_family} all summary\n            - show ip bgp {address_family} vrf {vrf} summary\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            vrf('str'): vrf to search under. If empty it will search \n                        under all\n\n        Returns:\n            list - Neighbor ip_address'\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1100"
    }
  },
  "get_bgp_neighbors_advertised": {
    "iosxe": {
      "doc": "Retrieve advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): address of neighbor\n    \n        Returns:\n            Dictionary\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L625"
    }
  },
  "get_bgp_neighbors_advertised_routes": {
    "iosxe": {
      "doc": " Get advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor IP address\n\n        Returns:\n            Dictionary of advertised neighbors\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L335"
    }
  },
  "get_bgp_neighbors_from_running_config": {
    "iosxe": {
      "doc": " Returns a list of configured bgp neighbors from running-config\n\n        args:\n            device ('obj'): Device to use\n            address_family ('str'): Address family bgp neighbors are under\n            vrf ('str'): Vrf bgp neighbors are under\n\n        raises:\n            N/A\n\n        returns:\n            List\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1685"
    }
  },
  "get_bgp_neighbors_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are in {state} - show \n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you want \n                             search for/against\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1144"
    }
  },
  "get_bgp_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are NOT in {state} - show\n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you dont\n                             want to find neighbors with\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1235"
    }
  },
  "get_bgp_networks_from_neighbor": {
    "iosxe": {
      "doc": " Gets bgp networks from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            networks ('list')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_networks_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1540"
    }
  },
  "get_bgp_peer_prefixes": {
    "junos": {
      "doc": "Return a dictionary of BGP prefix value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n\n    Returns:\n        dict: Dictionary of prefix values\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_peer_prefixes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L18"
    }
  },
  "get_bgp_route_ext_community": {
    "iosxe": {
      "doc": " Get route extended community\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            route('route'): route to search under\n            vrf('str', Optional): if getting route via vrf. Default is None\n            rd('str', Optional): if getting route via rd. Default is None\n        Returns:\n            extended community\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_route_ext_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1041"
    }
  },
  "get_bgp_route_from_neighbors": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor_address ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n        Returns:\n            Dictionary of neighbor routes\n        Raises:\n            KeyError: A key is missing in dictionary\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_route_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L271"
    }
  },
  "get_bgp_routes": {
    "iosxe": {
      "doc": " Get bgp routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            route ('str'): route value\n        Returns:\n            Dictionary of advertised prefixes\n        Raises:\n            None\n\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L535"
    }
  },
  "get_bgp_routes_list": {
    "iosxe": {
      "doc": " Returns a list of routes from BGP table\n\n        Args:\n            device ('obj'): Device object\n            vrf ('vrf'): VRF name\n            address_family ('str'): Address family\n\n        Raises:\n            None\n\n        Returns:\n            list object with unique routes from BGP table\n            False\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routes_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1341"
    }
  },
  "get_bgp_routing_table": {
    "iosxe": {
      "doc": " Get parsed dict of the BGP routing table executing one of the following commands\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp'\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            Parsed dictionary of BGP routing table\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routing_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1395"
    }
  },
  "get_bgp_rt2_community_label": {
    "iosxe": {
      "doc": " Get external community & label for specific mac and ip route from \n        <show ip bgp l2vpn evpn route-type 2 <eti> <mac> <ip>> command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            eti (int): Ethernet Tag Identifier\n            mac (str): MAC Address\n            ip (str): Ip address\n            vrf_id (str): vrf\n        Returns:\n            Dict: contains values for keys ext_community and label\n            Ex:  {\n              'ext_community': ['RT:300:2000101', 'RT:300:3000101', 'ENCAP:8'], \n              'labels': ['2000101']\n            }\n            or None\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_rt2_community_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1785"
    }
  },
  "get_bgp_rt5_community_paths_label": {
    "iosxe": {
      "doc": " Get external community, paths and labels of specific ip from \n        show ip bgp {address_family} route-type 5 {eti} {ip} {ip_len}\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            eti (int): Ethernet Tag Identifier\n            ip (str): Ip address\n            ip_len (int): ip length <=128\n            vrf_id (str): vrf\n        Returns:\n            dict: Contains values for keys ext_community, label, paths \n            Ex: {\n              'vni_labels': ['3000101'], \n              'ext_community': ['RT:300:3000101'], \n              'paths': '1 available, best #1, table evi_101, \n                   re-originated from [2][30.0.1.11:101][0][48]\n                   [00505684DC69][32][20.101.1.3]/24'\n            }\n            or None\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_rt5_community_paths_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1845"
    }
  },
  "get_bgp_running_config": {
    "iosxe": {
      "doc": " Get parsed running BGP config\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): Address familly\n            vrf ('str'): VRF name\n        Returns:\n            Dictionary\n                Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1472"
    }
  },
  "get_bgp_session_count": {
    "iosxe": {
      "doc": " Get bgp sesion count on state (established, idle, active)\n\n    Args:\n        device(`str`): Device str\n        in_state ('str'): Get bgp count only of neighbors in state\n    Returns:\n        Integer: bgp session count\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1254"
    }
  },
  "get_bgp_state_pfx_rcd": {
    "iosxe": {
      "doc": " Get State/PfxRcd value from the device\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            State/PfxRcd value\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_state_pfx_rcd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L228"
    }
  },
  "get_bgp_status_codes_from_neighbor": {
    "iosxe": {
      "doc": " Gets status_codes from route under neighbor\n\n        Args: \n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            route ('str'): route to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            status_codes ('str')\n            None\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_status_codes_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1582"
    }
  },
  "get_bgp_summary": {
    "iosxe": {
      "doc": " Get neighbors from show bgp summary command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            all_summary ('bool'): check all summary    \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L566"
    }
  },
  "get_bgp_summary_neighbor_state_count": {
    "junos": {
      "doc": " Get bgp summary peer-state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Establ'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_summary_neighbor_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L147"
    }
  },
  "get_bool": {
    "com": {
      "doc": " Get boolean result against given value\n\n        Use-case:\n        %CALLABLE Markup doesn't support built-in function bool().\n        This API can be used when you want to get boolean result via %CALLABLE\n        or can directly calling this API with value in Blitz YAML or etc\n\n    Args:\n        device (Device): device object\n        value (`any`): any such as string, integer, list, dict etc.\n\n    Returns:\n        Bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3852"
    }
  },
  "get_boot_variables": {
    "aireos": {
      "doc": "Get current or info of boot variables on the device\n\n        Args:\n            device ('obj'): Device object\n            output ('str'): Out from 'show boot' command\n\n        Returns:\n            return a tuple where first tuple is active image and second is backup\n            ({'version': <version>, 'status': <status>}, {'version': <version>, 'status': <status>})\n    ",
      "module_name": "get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/aireos/get.py#L25"
    },
    "ios": {
      "doc": "Get the configured boot variables on the device\n        Args:\n            device (`obj`): Device object\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L101"
    },
    "iosxe": {
      "cat9500": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L11"
      },
      "cat9k": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L11"
      },
      "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L265"
    }
  },
  "get_bridge_domain_bridge_domain_interfaces": {
    "iosxe": {
      "doc": " Get list of interfaces using bridge-domain id\n\n        Args:\n            bridge_domain_id('int'): bridge-domain id to get interfaces\n            device ('obj'): Device object\n\n        Returns:\n            list of interfaces\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bridge_domain_bridge_domain_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L52"
    }
  },
  "get_bridge_domain_bridge_domain_mac_count": {
    "iosxe": {
      "doc": " Get bridge domain mac count\n\n        Args:\n            device(`obj`): Device object \n            timeout_parse ('int'): Timeout in seconds for command device.parse('show bridge-domain')\n        Returns:\n            integer: mac count\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bridge_domain_bridge_domain_mac_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L13"
    }
  },
  "get_bundled_interface": {
    "iosxe": {
      "doc": " Pick up Port channel bundled interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port Channel Interface\n            exclude_interface ('str'): interface to skip\n\n        Returns:\n            String: Interface\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bundled_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L747"
    }
  },
  "get_cdp_neighbors_info": {
    "ios": {
      "doc": " \n        Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/get.py#L10"
    },
    "iosxe": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/get.py#L10"
    },
    "iosxr": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/get.py#L10"
    },
    "nxos": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/get.py#L10"
    }
  },
  "get_cef_internal_primary_interface": {
    "iosxe": {
      "doc": " Get cef internal output primary interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_primary_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L501"
    }
  },
  "get_cef_internal_primary_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_primary_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L251"
    }
  },
  "get_cef_internal_repair_interface": {
    "iosxe": {
      "doc": " Get cef internal output repair interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_repair_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L563"
    }
  },
  "get_cef_internal_repair_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_repair_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L132"
    }
  },
  "get_cef_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address \n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L85"
    }
  },
  "get_cef_registred_label_to_prefix": {
    "iosxe": {
      "doc": " Get registered label to prefix in CEF\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            output ('dict'): Optional. Parsed output from command 'show ip cef {prefix} detail'\n            vrf ('str'): Optional. VRF name. Default: 'default'\n            address_family ('str'): Optional. Family name. Default: 'ipv4'\n            interface ('str'): Optional. Interface name\n            nexthop_address ('str'): Optional. Nexthop address\n        Returns:\n            int: Registered label\n        Raises:\n            ValueError: Found more than on registered label\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_registred_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L387"
    }
  },
  "get_cef_repair_path_of_route": {
    "iosxe": {
      "doc": " Get 'repair path' of route\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Return:\n            tuple: (\n                String: Repair path IP address,\n                String: Repair path Interface\n            )\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_repair_path_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L18"
    }
  },
  "get_chassis_cpu_util": {
    "junos": {
      "doc": "Returns chassis cpu utilization\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section (str): cpu utilization, defaults to cpu-idle-5sec\n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_cpu_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L46"
    }
  },
  "get_chassis_cpu_util_alternative": {
    "junos": {
      "doc": "Returns chassis cpu utilization. When show chassis routing-engine\n       has the alternative output\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section ('str', optional): cpu utilization, defaults to cpu-idle\n        expected_state ('str'): cpu state, defaults to Master\n        expected_slot (int, optional): Expected slot number. default to None. \n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_cpu_util_alternative",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L71"
    }
  },
  "get_chassis_fpc_cpu_util": {
    "junos": {
      "doc": "Returns chassis fpc cpu utilization\n\n    Args:\n        device (obj): Device object\n        cpu_total ('str', optional): cpu utilization, defaults to cpu-total\n        expected_state ('str'): cpu state, defaults to Master\n        Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_fpc_cpu_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L201"
    }
  },
  "get_chassis_fpc_slot_numbers": {
    "junos": {
      "doc": "Returns slot numbers\n    Args:\n        device (obj): Device object\n        expected_state (str): Expected state. Default to None.\n    Returns:\n        list: List of slot numbers \n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_fpc_slot_numbers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L176"
    }
  },
  "get_chassis_memory_util": {
    "junos": {
      "doc": "Returns chassis memory utilization\n\n    Args:\n        device (obj): Device object\n        expected_slot (int): Expected slot number\n\n    Returns:\n        str: Memory utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_memory_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L13"
    }
  },
  "get_chassis_slot_idle_value": {
    "junos": {
      "doc": "Returns chassis cpu utilization for specific slot.\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section ('str', optional): cpu utilization, defaults to cpu-idle\n        slot ('str'): cpu slot, defaults to 0\n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_slot_idle_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L246"
    }
  },
  "get_chassis_sn": {
    "iosxe": {
      "doc": "Get the chassis SN of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis SN\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_sn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L680"
    },
    "nxos": {
      "doc": "Get the chassis SN of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis SN\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_sn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L412"
    }
  },
  "get_chassis_type": {
    "iosxe": {
      "doc": "Get the chassis type of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L662"
    },
    "nxos": {
      "doc": "Get the chassis type of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L394"
    }
  },
  "get_chassis_zone_actual_usage": {
    "junos": {
      "doc": " Get capacity actual usage of a zone\n\n        Args:\n            device (`obj`): Device object\n            expected_zone (`str`): Expected zone\n        Returns:\n            result (`list`): list of states of routing engines\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_zone_actual_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L154"
    }
  },
  "get_class_of_service_classifiers": {
    "junos": {
      "doc": " Get list of classifiers based interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            classifiers: list\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_class_of_service_classifiers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L46"
    }
  },
  "get_class_of_service_shaping_rate": {
    "junos": {
      "doc": " Get shapping rate based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            shaping_rate: Staping rate value\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_class_of_service_shaping_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L16"
    }
  },
  "get_config_commands_from_running_config": {
    "ios": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L154"
    },
    "iosxe": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L152"
    }
  },
  "get_config_dict": {
    "com": {
      "doc": " Cast config to Configuration dict\n\n        Args:\n            config ('str'): config string\n        Returns:\n            Configuration dict\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L220"
    }
  },
  "get_config_from_file": {
    "ios": {
      "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_from_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L39"
    },
    "iosxe": {
      "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_from_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L44"
    }
  },
  "get_config_register": {
    "iosxe": {
      "doc": "Get current config-register setting on the device\n        Args:\n            device (`obj`): Device object\n            next_reload (`bool`): Determine if returning next-reload value\n        Returns:\n            config-register value or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L305"
    },
    "iosxr": {
      "doc": "Get config-regsiter on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            config-register or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L67"
    }
  },
  "get_configuration_interface_family_bridge_vlan_id": {
    "junos": {
      "doc": " Get vlan-di from \n        show configuration interface {interface} unit {unit} family bridge vlan-id\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        unit (str): Unit value\n\n    Returns:\n        str: vlan-id\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_interface_family_bridge_vlan_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L79"
    }
  },
  "get_configuration_mpls_label_switched_path_name": {
    "junos": {
      "doc": " Get path name from show configuration protocols mpls label-switched-path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): File to check\n\n    Returns:\n        str or None: Configured primary name\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_mpls_label_switched_path_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L12"
    }
  },
  "get_configuration_mpls_paths": {
    "junos": {
      "doc": " Get all paths from show configuration protocols mpls path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): Path to check\n\n    Returns:\n        List or None: All path addresses\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_mpls_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L46"
    }
  },
  "get_configured_bgp_peers": {
    "iosxe": {
      "doc": " Get configured BGP peers\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): AS number\n            router_bgp_address_family ('str'): Address family of router bgp\n            vrf ('str'): VRf name\n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configured_bgp_peers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1433"
    }
  },
  "get_connected_alias": {
    "com": {
      "doc": " Get connected alias from device object\n\n        Args:\n            device ('obj')  : Device object\n        Returns:\n            aliases (`dict`) : dict with alias key with value\n                               which contains all related info\n                               for the connection\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_connected_alias",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3451"
    }
  },
  "get_connection": {
    "com": {
      "doc": "\n        Get connection object.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n\n        Returns:\n            Connection object\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2851"
    }
  },
  "get_current_active_pies": {
    "iosxr": {
      "doc": "Gets the current active pies on a device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            List of active pies on the device\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_current_active_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L184"
    }
  },
  "get_current_system_datetime": {
    "iosxe": {
      "doc": " Returns current time of system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            current time ('str')\n        Raises:\n            None\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_current_system_datetime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/get.py#L12"
    }
  },
  "get_ddos_protection_arrival_rate": {
    "junos": {
      "doc": " Get arrival rate for expected-protocol-states-local\n\n    Args:\n        device (object): Device object\n        protocol (str): Protocol value \n        expected_protocol_states_local (str): Expected protocol states local\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "ddos.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ddos_protection_arrival_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ddos/get.py#L15"
    }
  },
  "get_delta_time_from_outputs": {
    "com": {
      "doc": " Get delta time from Time source of two outputs\n        Time source example: 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n\n        Args:\n            output_before ('str'): Text output from show command\n            output_after ('str'): Text output from show command\n        Returns:\n            Time delta in seconds\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_delta_time_from_outputs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L564"
    }
  },
  "get_device_connections_info": {
    "com": {
      "doc": " Get connection information of a device from testbed file.\n            Args:\n                device (`obj`): device object\n            Returns:\n                device.connections (`dict`)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_connections_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3151"
    }
  },
  "get_device_tracking_counters_vlan_faults": {
    "iosxe": {
      "doc": " Get device_tracking vlan count message type\n        Args:\n            device ('obj'): device object\n            vlanid ('str'): vlan\n        Returns:\n            List\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_counters_vlan_faults",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L144"
    }
  },
  "get_device_tracking_counters_vlan_message_type": {
    "iosxe": {
      "doc": " Get device_tracking vlan count message type\n        Args:\n            device ('obj'): device object\n            vlanid ('str'): vlan\n            message_type ('str', optional): message type. Defaults to \"received\"\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_counters_vlan_message_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L118"
    }
  },
  "get_device_tracking_database_details_binding_table_configurations": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_database_details_binding_table_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L34"
    }
  },
  "get_device_tracking_database_details_binding_table_count": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n            state('bool', optional): get state count if True. Defaults to False\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_database_details_binding_table_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L53"
    }
  },
  "get_device_tracking_policy_name_configurations": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_policy_name_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L14"
    }
  },
  "get_devices": {
    "com": {
      "doc": " Get devices from testbed object\n        Args:\n            testbed (`obj`): testbed object\n            os (`str`): specify os to choose. Defaults to None\n            regex (`str`): regex to chose devices based against regex_key\n                           Defaults to None\n            regex_key (`str`): specify key in testbed yaml where use regex\n                               default to `os`\n            pick_type (`str`) : specify how to pick up\n                                default to `all`\n                                choices:\n                                  `all`: pick up all devices\n                                         return device names as list\n                                  `first_one`: pick up first one device\n                                               return device name as string\n                                  `random_one`: pick up one device randomly\n                                                return device name as string\n                                  `random_order`: randomize order of devices\n                                                  return device names as list\n            only_connected (`bool`) : check if device is connected and return \n                                      only connected ones. Default to False\n            with_os (`bool`): return dict with device name and os as key/value pair\n                              Defaults to False\n\n        Raise:\n            Exception\n        Returns:\n            picked_devices (`list` or `str`, or dict): list of device names\n                                              device name as string in case of\n                                              `first_one` or `random_one`\n                                              if with_os is True, will return dict with os\n                                              ex.)\n                                              {\n                                                  'R1_xe': 'iosxe',\n                                                  'R2_xr': 'iosxr',\n                                              }\n\n        Example:\n\n        >>> dev.api.get_devices(testbed)\n        ['terminal_server',\n         'internet-rtr01',\n         'internet-host01',\n         'edge-firewall01',\n         'core-rtr01',\n         'core-rtr02',\n         'dist-rtr01',\n         'dist-rtr02',\n         'dist-sw01',\n         'dist-sw02',\n         'inside-host01',\n         'edge-sw01',\n         'inside-host02']\n\n        >>> dev.api.get_devices(testbed, os='iosxe')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n        >>> dev.api.get_devices(testbed, regex='iosxe')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n        >>> dev.api.get_devices(testbed, regex='ios.*')\n        ['internet-rtr01',\n         'core-rtr01',\n         'core-rtr02',\n         'dist-rtr01',\n         'dist-rtr02',\n         'edge-sw01']\n\n        >>> dev.api.get_devices(testbed, regex='iosxrv', regex_key='series')\n        ['core-rtr01', 'core-rtr02']\n\n        >>> dev.api.get_devices(testbed, os='iosxe', regex='.*n0.*', regex_key='command')\n        ['internet-rtr01']\n\n        >>> dev.api.get_devices(testbed, pick_type='first_one')\n        'terminal_server'\n\n        >>> dev.api.get_devices(testbed, os='nxos', pick_type='random_one')\n        'dist-sw02'\n\n        >>> dev.api.get_devices(testbed, os='iosxe', pick_type='random_order')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_devices",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2898"
    }
  },
  "get_diagnostics_optics_stats": {
    "junos": {
      "doc": "Get the traffic stats of given interface via show interfaces diagnostics optics {interface}\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            stat_name ('str'): stat name under `traffic-statistics`\n            lane_number ('int'): lane number\n\n        Returns:\n            str (value of stat_name)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diagnostics_optics_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L769"
    }
  },
  "get_dict_items": {
    "com": {
      "doc": " Get one or any of dict items\n        Args:\n            name (`dict`): dict data\n            key (`str|int|list`): key in dict. one or any\n            contains (`str`): filter with Dq by this keyword\n            regex (`bool`): if use regex for contains\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n            headers (`bool`): if return contains headers, or not\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): list of one or of dict key/value items\n\n        Example:\n\n            bgp = {\n                'id': '65000',\n                'shutdown': False,\n                'address_family': {\n                    'ipv4': {\n                        'total_neighbor': 3,\n                        'neighbors': {\n                            '10.1.1.1': {\n                                'status': 'up',\n                                'routes': 10,\n                            },\n                            '10.2.2.2': {\n                                'status': 'down',\n                                'routes': '20',\n                            },\n                            '10.3.3.3': {\n                                'status': 'up',\n                                'routes': 30\n                            }\n                        }\n                    }\n                }\n            }\n\n            Some examples with above structure data.\n\n            >>> dev.api.get_dict_items(bgp, 'neighbors')\n            [['10.1.1.1'], ['10.2.2.2'], ['10.3.3.3']]\n\n            >>> dev.api.get_dict_items(bgp, ['id', 'shutdown'])\n            [['65000', False]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], 'ipv4')\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], '10.1.1.1')\n            [['10.1.1.1', 10, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'])\n            [[10], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_str=True)\n            [['10'], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_num=True)\n            [[10], [20]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            (Speceial case) if only one item in list, it will return value without list.\n            >>> dev.api.get_dict_items(bgp, 'routes', '10.1.1.1')\n            10\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dict_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1702"
    }
  },
  "get_diffs_platform": {
    "ios": {
      "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diffs_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L15"
    },
    "iosxe": {
      "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diffs_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L68"
    }
  },
  "get_file_size": {
    "ios": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L520"
    },
    "iosxe": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L136"
    },
    "iosxr": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L88"
    },
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            int\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L64"
    },
    "nxos": {
      "doc": "\n        Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L20"
    }
  },
  "get_file_size_from_server": {
    "com": {
      "doc": " Get file size from the server\n    Args:\n        device ('Obj'): Device object\n        server ('str'): server address or hostname\n        path ('str'): file path on server to check\n        protocol ('srt'): protocol used to check file size\n        timeout ('int'): check size timeout in seconds\n        fu_session ('obj'): existing FileUtils object to reuse\n    Returns:\n         integer representation of file size in bytes\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1152"
    }
  },
  "get_file_timestamp": {
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L209"
    }
  },
  "get_firewall_counter": {
    "junos": {
      "doc": " Get specific field value from show firewall counter filter\n\n        Args:\n            device (`obj`): Device object\n            filters (`str`): Firewall filter argument\n            counter_name (`str`): Firewall counter name argument\n            field (`str`): field to check in parse_output\n                           Default to `packet-count`\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n            output (`str`): output of show firewall counter filter {filters} {counter_name}\n                            Default to None\n        Returns:\n            counter value(int) \n        Raises:\n            N/A\n    ",
      "module_name": "firewall.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firewall_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/get.py#L20"
    }
  },
  "get_firmware_repository_images": {
    "apic": {
      "doc": " Returns a list of images in the firmware repository.\n\n    Args:\n        device (obj): Device to execute on\n        image_type (str): Type of images to return\n\n    Returns:\n        (list): of images in the firmware repository\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_repository_images",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L11"
    }
  },
  "get_firmware_repository_images_by_polling": {
    "apic": {
      "doc": " Polls the firmware repository for an image that matches\n    'image_type'. Returns after a matching image is found.\n\n    Args:\n        device (obj): Device to execute on\n        image_type (str): Type of images to return\n        max_time (int, optional): Max time for polling. Defaults to 120.\n        check_interval (int, optional): How often to poll. Defaults to 15.\n\n    Returns:\n        (list): of images in the firmware repository\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_repository_images_by_polling",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L49"
    }
  },
  "get_firmware_upgrade_status": {
    "apic": {
      "doc": " Returns a list of tuples containing node_id, status.\n\n    Args:\n        device (obj): Device to execute on\n        firmware_group (str, optional): group to filter by. Defaults to None.\n\n    Returns:\n        (list of tuples): each containing \"node_id, status\"\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_upgrade_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L76"
    }
  },
  "get_firmware_version_from_image_name": {
    "apic": {
      "doc": " Get the firmware version from the image name.\n\n    Args:\n        image_name (str): image filename\n\n    Returns:\n        string with image version\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_version_from_image_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L108"
    },
    "nxos": {
      "aci": {
        "doc": " Get the firmware version from the image name.\n\n    Args:\n        image_name (str): image filename\n\n    Returns:\n        string with image version\n    ",
        "module_name": "firmware.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_firmware_version_from_image_name",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/firmware/get.py#L5"
      }
    }
  },
  "get_flows_src_dst_address_pairs": {
    "iosxe": {
      "doc": " Gets flows under flow_monitor and returns source and destination address pairs\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor name\n\n        Raises:\n            N/A\n\n        Returns:\n            [('source_address', 'destination_address'), ...]\n    ",
      "module_name": "flow.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_flows_src_dst_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/get.py#L12"
    }
  },
  "get_hardware_all_fans_speed": {
    "iosxe": {
      "doc": " Get fan speed for all fans \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            fans (`list`): Fans info\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_all_fans_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L22"
    }
  },
  "get_hardware_esp_slot": {
    "iosxe": {
      "doc": " Get ESP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): ESP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): ESP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_esp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L119"
    }
  },
  "get_hardware_inserted_sfp": {
    "iosxe": {
      "doc": " Get newly inserted SFP\n\n        Args:\n            device (`obj`): Device object\n            prev_slots (`dict`): Previous sfp slot dict\n            sfp_descr (`str`): SFP descr\n            intf_type (`str`): Interface type\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_inserted_sfp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L212"
    }
  },
  "get_hardware_interface_sfp_descr": {
    "iosxe": {
      "doc": " Get interface SFP descr\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Returns:\n            descr (`str`): Interface SFP descr\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_interface_sfp_descr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L300"
    }
  },
  "get_hardware_rp_slot": {
    "iosxe": {
      "doc": " Get RP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): RP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): RP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_rp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L64"
    }
  },
  "get_hardware_sfp_slot_dict": {
    "iosxe": {
      "doc": " Get SFP slot dict\n\n        Args:\n            device (`obj`): Device object\n            sfp_descr (`str`): SFP descr\n        Returns:\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_sfp_slot_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L247"
    }
  },
  "get_hardware_slot_state": {
    "iosxe": {
      "doc": " Get slot state\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): Slot\n        Returns:\n            state (`str`): Slot state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L174"
    }
  },
  "get_hostname": {
    "junos": {
      "doc": " Get the hostname from 'show version'\n\n        Args:\n            device ('obj'): device to use\n        \n        Returns:\n            hostname ('str'): Hostname\n\n        Raises:\n            N/A\n    ",
      "module_name": "version.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/version/get.py#L13"
    }
  },
  "get_inserted_interface_by_media_type": {
    "iosxe": {
      "doc": " Get newly inserted interface by media type\n\n        Args:\n            device (`obj`): Device object\n            media_type (`str`): media type\n\n        Returns:\n            interface (`str`): interface name\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_inserted_interface_by_media_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L39"
    }
  },
  "get_interface_address_mask_running_config": {
    "iosxe": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Not used in IOSXE. Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L778"
    },
    "junos": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L23"
    }
  },
  "get_interface_admin_status": {
    "iosxe": {
      "doc": "Get admin status of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_admin_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1253"
    }
  },
  "get_interface_carrier_delay": {
    "iosxe": {
      "doc": " Get interface carrier delay\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            delay_type ('str'): Carrier delay type: 'up', 'down'\n\n        Returns:\n            None\n            delay in seconds ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L489"
    }
  },
  "get_interface_connected_adjacent_router_interfaces": {
    "iosxe": {
      "doc": " Get list of connected interfaces from adjacents routers\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            List: EthernetInterface objects\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_connected_adjacent_router_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L717"
    }
  },
  "get_interface_counter": {
    "iosxe": {
      "doc": "Get interface counters and status\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n        counter_name('str'): Counter/status parameter\n\n    Returns:\n        Counter parameter value of an interface\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1339"
    }
  },
  "get_interface_description": {
    "iosxe": {
      "doc": "Get description of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface description string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1167"
    }
  },
  "get_interface_field": {
    "junos": {
      "doc": " Get specific field value from show interfaces\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface name\n            field (`str`): field name where want to get value\n            output (`str`): output of show interfaces {interface}\n                            Default to None\n        Returns:\n            value (`str`): ifindex number\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L864"
    }
  },
  "get_interface_from_yaml": {
    "com": {
      "doc": " Get interface name from the testbed yaml file\n\n        To be used within datafile\n\n        Args:\n            local (`str`): local device to get interface from\n            remote (`str`): Remote device where the interface is connected to\n            value (`str`): Either link name or a number and a link will be randomly chosen\n            testbed_topology (`dict`): `testbed.topology` or `testbed`\n\n        Raise:\n            Exception\n        Returns:\n            Interface name\n\n        Example:\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(uut,helper,0,%{testbed.topology})}\"\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(uut,helper,r1_r4_1,%{testbed.topology})}\"\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(alias,helper,0,%{testbed})}\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_from_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3045"
    }
  },
  "get_interface_ifindex": {
    "iosxe": {
      "doc": "Get  snmp ifindex of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface ifindex integer value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ifindex",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1322"
    }
  },
  "get_interface_information": {
    "ios": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L16"
    },
    "iosxe": {
      "doc": " Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1001"
    },
    "iosxr": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L52"
    },
    "nxos": {
      "doc": " Get interface information from device for a  interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L17"
    }
  },
  "get_interface_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1897"
    },
    "iosxe": {
      "doc": " Get interface and device\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L550"
    }
  },
  "get_interface_interfaces_ldp_enabled": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show mpls interfaces details'\n\n        Args:\n            device ('str'): Device str\n            vrf ('str'): Vrf name\n        Returns:\n            interface list\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces_ldp_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L87"
    }
  },
  "get_interface_interfaces_under_vrf": {
    "iosxe": {
      "doc": " Get interfaces configured under specific Vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n\n        Returns:\n            interfaces (`list`): List of interfaces\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces_under_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L584"
    }
  },
  "get_interface_ip_address": {
    "iosxe": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Used only for junos api\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L326"
    },
    "iosxr": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L17"
    },
    "junos": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            link_local ('bool'): Link local address\n            return_all ('bool'): return List of values\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L65"
    }
  },
  "get_interface_ip_and_mask": {
    "iosxe": {
      "doc": " Get interface ip address and mask\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            prefix (`bool`): return ip with prefix if True\n                             otherwise return ip and mask\n\n        Returns:\n            Tuple: (None, None)\n            Tuple: (str: interface ip address, str: interface mask)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_and_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L515"
    }
  },
  "get_interface_ipv4_address": {
    "ios": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L40"
    },
    "iosxe": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1025"
    },
    "iosxr": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L76"
    },
    "junos": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L737"
    },
    "nxos": {
      "doc": " Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L40"
    }
  },
  "get_interface_last_state_timestamp": {
    "iosxe": {
      "doc": "Get interface last state up/down time value in nanosecond using 'show log'\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface timestamp integer value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_last_state_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1278"
    }
  },
  "get_interface_logical_output_bps": {
    "junos": {
      "doc": "Get logical output bps of a logical interface\n\n    Args:\n        device ('obj'): device object\n        logical_interface ('str'): Logical interface to check output bps\n        interface ('str'): interface name to pass in show command\n        extensive ('bool'): Use extensive in show command\n        output_dict ('dict'): Pass if dictionary already exist\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_logical_output_bps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L379"
    }
  },
  "get_interface_loopback_ip_address": {
    "iosxe": {
      "doc": " Gets all loopback interface ip_address' up to number specified\n\n        Args:\n            device ('obj'): device to use\n            num ('int'): max number of loopback interfaces to get ip_address from\n\n        Returns:\n            list: [(interface with Loopback address, ip_address), ...]\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_loopback_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L368"
    }
  },
  "get_interface_mac_address": {
    "iosxe": {
      "doc": " Get interface mac address from device\n\n        Args:\n            device (`obj`): Device object\n            interface(`str`): Interface name\n\n        Returns:\n            None\n            interface mac address\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L221"
    }
  },
  "get_interface_mtu_config_range": {
    "iosxe": {
      "doc": " Get MTU config range\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            range_dict (`dict`): MTU range dict\n                ex: {'min':30, 'max':360, range: '30-360'}\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mtu_config_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L190"
    }
  },
  "get_interface_mtu_size": {
    "iosxe": {
      "doc": " Get interface MTU\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            mtu (`int`): mtu bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mtu_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L166"
    }
  },
  "get_interface_names": {
    "iosxe": {
      "doc": "Gets the names of all interfaces on the device\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        list: List of interface names\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_names",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1050"
    },
    "nxos": {
      "doc": "Gets the names of all interfaces on the device\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        list: List of interface names\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_names",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L62"
    }
  },
  "get_interface_netmask": {
    "iosxe": {
      "doc": " Get netmask of ip address' class\n\n        Args:\n            ip_address ('str'): ipv4 address\n\n        Returns:\n            ip address mask\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L954"
    }
  },
  "get_interface_network_address": {
    "junos": {
      "doc": " Get interface network address from device\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family. Default to 'ipv4'\n            link_local ('bool'): Link local address. Default to False\n            return_all ('bool'): return List of values. Default to False\n        Returns:\n            None\n            network_address ('str'): If has multiple network addresses\n                                     will return the first one.\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_network_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L610"
    }
  },
  "get_interface_oper_yang_status": {
    "iosxe": {
      "doc": "Get the current operational state of the interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_oper_yang_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1226"
    }
  },
  "get_interface_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L223"
    }
  },
  "get_interface_output_pps": {
    "junos": {
      "doc": " Retrieve output pps value from interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n\n        Returns:\n            Output pps value\n    ",
      "module_name": "monitor.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/get.py#L22"
    }
  },
  "get_interface_packet_counter": {
    "iosxe": {
      "doc": " Returns packet counters for given interface\n\n        Args:\n            device ('obj') : Device object\n            interface ('str'): Interface name\n            output ('dict'): Parsed output from 'show interfaces' command\n\n        Returns\n            counter: number of output packet\n\n            if any error or no counter_field was found return None\n            - to separate 0 packet and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L643"
    }
  },
  "get_interface_packet_input_rate": {
    "iosxe": {
      "doc": " Get rate from in_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_input_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L909"
    }
  },
  "get_interface_packet_output_rate": {
    "iosxe": {
      "doc": " Get rate from out_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n            field ('str'): Used for get_interface_packet_input_rate\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_output_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L820"
    }
  },
  "get_interface_port_channel_members": {
    "iosxe": {
      "doc": " Get interface members\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n\n        Returns:\n            interface members\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_port_channel_members",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L978"
    }
  },
  "get_interface_qlimit_bytes": {
    "iosxe": {
      "doc": " Get interface qlimit in bytes\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            qlimit_bytes (`int`): Interface qlimit_bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_qlimit_bytes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L282"
    }
  },
  "get_interface_queue_counters_dropped": {
    "junos": {
      "doc": " Get queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_dropped",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L344"
    }
  },
  "get_interface_queue_counters_queued_packets": {
    "junos": {
      "doc": " Get queued packets based on queue number\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_queued_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L490"
    }
  },
  "get_interface_queue_counters_trans_packets": {
    "junos": {
      "doc": " Get queue counters transmitter based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_trans_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L451"
    }
  },
  "get_interface_queue_counters_transmitted_byte_rate": {
    "junos": {
      "doc": " Get queue counters transmitted byte rate based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_transmitted_byte_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L583"
    }
  },
  "get_interface_queue_red_dropped_packets": {
    "junos": {
      "doc": " Get red-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            red_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_red_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L319"
    }
  },
  "get_interface_queue_rl_dropped_packets": {
    "junos": {
      "doc": " Get rl-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            rl_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_rl_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L295"
    }
  },
  "get_interface_queue_tail_dropped_packets": {
    "junos": {
      "doc": " Get tail-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            tail_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_tail_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L271"
    }
  },
  "get_interface_running_config": {
    "iosxe": {
      "doc": " Get interface configuration from show running-config interface {interface}\n        \n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n\n        Return:\n            Dictionary with running interface configuration\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L615"
    }
  },
  "get_interface_snmp_index": {
    "junos": {
      "doc": " Get local index number\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            total_drop_packets: Output error drops\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_snmp_index",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L918"
    }
  },
  "get_interface_speed": {
    "junos": {
      "doc": "Get speed of an interface\n\n    Args:\n        device (obj): device object\n        interface (str): interface name\n        bit_size (str): desired return size (gbps/mbps/kbps)\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L159"
    }
  },
  "get_interface_statistics_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface statistics\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_statistics_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L247"
    }
  },
  "get_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Returns access_vlan id for interface on device\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n\n        Returns:\n            str access_vlan\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L930"
    }
  },
  "get_interface_traffic_input_pps": {
    "junos": {
      "doc": "Get interface input pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_input_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L555"
    }
  },
  "get_interface_traffic_output_pps": {
    "junos": {
      "doc": "Get interface output pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L528"
    }
  },
  "get_interface_traffic_stats": {
    "junos": {
      "doc": "Get the traffic stats of given interface via 'show interfaces {interface} extensive'\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            stat_name (`str`): stat name under `traffic-statistics`\n            extensive (`bool`): flag to use `show interface {interface} extensive`\n\n        Returns:\n            int (value of stat_name)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L699"
    }
  },
  "get_interface_type": {
    "iosxe": {
      "doc": "Get type of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1189"
    }
  },
  "get_interface_type_from_yaml": {
    "com": {
      "doc": " Get interface type from the testbed yaml file\n\n        To be used within datafile\n\n        Args:\n            local (`str`): local device to get interface from\n            remote (`str`): Remote device where the interface is connected to\n            value (`str`): Either link name or a number and a link will be randomly chosen\n            testbed_topology (`dict`): `testbed.topology` or `testbed`\n\n        Raise:\n            N/A\n        Returns:\n            Interface type or `None` if not found\n\n        Example:\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(uut,helper,0,%{testbed.topology})}\"\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(uut,helper,r1_r4_1,%{testbed.topology})}\"\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(alias,helper,0,%{testbed})}\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_type_from_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3110"
    }
  },
  "get_interface_with_mask": {
    "iosxe": {
      "doc": " Gets interface:ip_address with specific mask\n\n        Args:\n            device('obj'): device to use\n            netmask('str'): netmask the interface must have\n            address_family('str'): address_family to search under\n\n        Returns:\n            (None, None)\n            (interface('str'), ip_address('str'))\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_with_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L423"
    }
  },
  "get_interface_with_up_state": {
    "iosxe": {
      "doc": " Get a interface which is up\n\n        Args:\n            device ('obj'): Device object\n            interface_type ('str'): Interface type\n            virtual_interface ('bool'): Flag for logical interface\n                               if is None, return physical or logical\n                               if is True, return only logical\n                               if is False, return only physical\n        Returns:\n            None\n            interface name ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_with_up_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L456"
    }
  },
  "get_interface_without_service_policy": {
    "iosxe": {
      "doc": " Find a interface without service-policy\n\n        Args:\n            device (`obj`): Device object\n            interface_type (`str`): Interface type\n            virtual_interface ('bool'): flag for matching virtual interfaces\n\n        Returns:\n            None\n            interface (`str`): Interface name\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_without_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L245"
    }
  },
  "get_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1835"
    }
  },
  "get_interfaces_description": {
    "junos": {
      "doc": "Get the description of given interface via 'show interfaces descriptions {interface}'\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name, default: None\n\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L659"
    }
  },
  "get_interfaces_status": {
    "iosxe": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1146"
    },
    "iosxr": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L176"
    },
    "nxos": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L88"
    }
  },
  "get_interfaces_terse_columns": {
    "junos": {
      "doc": "Get the description of given interface via 'show interfaces descriptions {interface}'\n        Args:\n            device ('obj'): Device object\n            expected_columns('str'): Expected columns based on parser table\n                Example:  columns: ['interface', 'admin_state', 'enabled', 'link_state', 'oper_status']\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_terse_columns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L831"
    }
  },
  "get_ip_bgp_neighbors": {
    "iosxe": {
      "doc": " Get Ip Bgp neighbors from the following commands:\n            'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}',\n            'show ip bgp {address_family} vrf {vrf} neighbors',\n            'show ip bgp {address_family} neighbors {neighbor}',\n            'show ip bgp {address_family} neighbors',\n            'show ip bgp {address_family} all neighbors {route}'\n            'show ip bgp neighbors {neighbor}',\n            'show ip bgp neighbors'\n\n        Args:\n            device ('obj')         : Device object \n            address_family ('str') : Address family\n            vrf ('str')            : Vrf name\n            neighbor ('neighbor')  : Neighbor address\n        Returns:\n            Dictionary\n        Raises:\n            None\n        \n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L929"
    }
  },
  "get_ip_bgp_route": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            routes Dictionary\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L425"
    }
  },
  "get_ip_bgp_route_nexthop_color": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n       return list of nexthop and color community\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            list of nexthop and color community\n            ex.) [['192.168.1.1', '100'], ['192.168.2.2', '200']]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_route_nexthop_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L494"
    }
  },
  "get_ip_bgp_summary": {
    "iosxe": {
      "doc": "Execute from the following commands:\n        'show ip bgp {address_family} summary',\n        'show ip bgp {address_family} vrf {vrf} summary',\n        'show ip bgp {address_family} rd {rd} summary',\n        'show ip bgp all summary',\n        'show ip bgp {address_family} all summary'\n        and retrieve neighbor address and AS number\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L172"
    }
  },
  "get_ip_packet_scapy": {
    "iosxe": {
      "doc": "\n    returns IP layer from packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            ip packet\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_packet_scapy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1275"
    }
  },
  "get_ip_theft_syslogs": {
    "iosxe": {
      "doc": "Gets IP Theft syslog\n\n    Args:\n        device (obj): device object\n    Returns:\n        Dictionary\n        None\n    Raises:\n        None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_theft_syslogs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L167"
    }
  },
  "get_ipv6_interface_ip_address": {
    "iosxe": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1071"
    },
    "iosxr": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address. Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L99"
    },
    "junos": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address. Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L752"
    }
  },
  "get_ipv6_interface_link_local_address": {
    "iosxe": {
      "doc": " Get local link address\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface value\n\n        Returns:\n            link-local address (`str`): Link-Local address\n    ",
      "module_name": "ipv6.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_link_local_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/get.py#L16"
    }
  },
  "get_ipv6_nd_raguard_policy_configurations": {
    "iosxe": {
      "doc": " Get ipv6 nd raguard policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_nd_raguard_policy_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L78"
    }
  },
  "get_ipv6_source_guard_policy_configurations": {
    "iosxe": {
      "doc": " Get ipv6 source guard policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_source_guard_policy_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L98"
    }
  },
  "get_issu_free_space_on_disk": {
    "iosxe": {
      "doc": " Get free space information on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return:            \n            Integer: Free space on disk in bytes\n        Raises: \n            SubCommandFailure: Failed getting free space info on device\n    ",
      "module_name": "issu.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_issu_free_space_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L39"
    }
  },
  "get_issu_space_info_on_disk": {
    "iosxe": {
      "doc": " Get free and total space on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return: \n            list: \n                bytes_total ('int'): Total space on disk in bytes\n                bytes_free ('int'): Free space on disk in bytes\n        Raise:\n            SubCommandFailure: Failed executing dir command\n    ",
      "module_name": "issu.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_issu_space_info_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L6"
    }
  },
  "get_jinja_template": {
    "com": {
      "doc": " Gets the jinja template specified\n\n        Args:\n            templates_dir ('str'): Templates directory\n            template_name ('str'): Template name\n\n        Returns:\n            ('obj') jinja template\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "jinja.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L9"
    }
  },
  "get_l2vpn_interface_under_service_instance": {
    "iosxe": {
      "doc": " Gets interface under service instance 'service_instance_id' using command\n        'show ethernet service instance'\n\n        Args:\n            device ('obj'): Device object\n            service_instance_id ('int'): service instance id\n    \n        Returns:\n            interface\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "l2vpn.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_l2vpn_interface_under_service_instance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L18"
    }
  },
  "get_l2vpn_storm_control_discard_packet_count": {
    "iosxe": {
      "doc": "Get current storm control discard packet count\n        \n            Args:\n                device ('Obj'): Device object\n                service_instance_id ('int'): L2VPN service instance id\n                interface ('str'): Interface name\n\n            Returns:\n                None\n\n            Raises:\n                None\n                \n        ",
      "module_name": "l2vpn.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_l2vpn_storm_control_discard_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L48"
    }
  },
  "get_lacp_intf_count": {
    "iosxe": {
      "doc": " This API parse 'show lacp internal' command and return number of member interfaces\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n        Returns:\n            Returns interface count\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_intf_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L73"
    }
  },
  "get_lacp_intf_list": {
    "iosxe": {
      "doc": " This API parse 'show lacp internal' command and return interface list\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n        Returns:\n            Returns interface list\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_intf_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L102"
    }
  },
  "get_lacp_member": {
    "iosxe": {
      "doc": " This API parse's 'show lacp internal/neighbor' commands and return requested member\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n            count (`int`): Required interface count\n            member (`str`): Specify one of them to search \u2018interface\u2019, \u2018port_num\u2019, \u2018oper_key\u2019 or \u2018partner_id\u2019\n                             ex.) member=\u2018interface\u2019\n            intf_list(`list'): List of interfaces\n            internal (`bool`): True = internal command and False = neighbor command\n        Returns:\n            If success, returns member value or None\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_member",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L9"
    }
  },
  "get_lacp_stats": {
    "junos": {
      "doc": "Get LACP traffic stats of given interface via 'show lacp statistics {interface}'\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Lag interface name\n            link (`str`): link name of Lag interface\n            stat_names (`list`): list of link stat names\n\n        Returns:\n            list of stat values\n\n        Raises:\n            None\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/get.py#L12"
    }
  },
  "get_lacp_sys_id": {
    "iosxe": {
      "doc": " This API parse's 'show lacp sys-id' command and return sys id\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Returns system id\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_sys_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L56"
    }
  },
  "get_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label. Defaults to input\n        local_label (str): Database local label. Defaults to None\n\n    Returns:\n        ldp_label ('str'): Will return one value\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L19"
    }
  },
  "get_ldp_database_session_label": {
    "junos": {
      "doc": " Gets ldp prefix\n\n    Args:\n        device (obj): Device object\n        address (str): IP address\n        expected_ldp_prefix (str): Expected LDP prefix value\n        expected_ldp_database_type (str): Expected LDP database type. Default is 'Input label database'\n    \n    Returns:\n        (str): database session label\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_database_session_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L63"
    }
  },
  "get_ldp_session_state_count": {
    "junos": {
      "doc": " Get show ldp session count\n\n    Args:\n        device (obj): Device object\n        expected_session_state (str): Expected session state. Defaults to 'Operational'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L103"
    }
  },
  "get_list_items": {
    "com": {
      "doc": " Get one or any of list items\n        Args:\n            name (`list`): list data\n            index (`int`): number of index for list to get\n            index_end (`int`): end number of index for list to get\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): one or any of list items\n\n        Example:\n\n        >>> dev.api.get_list_items([1,2,3], 0)\n        1\n\n        >>> dev.api.get_list_items([[1,4],2,3], 0)\n        [1, 4]\n\n        >>> dev.api.get_list_items([[1,4],2,3], 1, to_str=True)\n        '2'\n\n        >>> dev.api.get_list_items([[1,4],2,'3'], 2, to_str=True)\n        '3'\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 2, to_num=True)\n        3\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 1, 2)\n        [2, '3']\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_list_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1653"
    }
  },
  "get_list_length": {
    "com": {
      "doc": "\"\n    Returns length of target_list.\n\n    Args:\n        target_list (`list`): target list\n\n    Raise:\n        N/A\n\n    Return:\n        length of target list(int)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_list_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3892"
    }
  },
  "get_lldp_neighbors_info": {
    "ios": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/get.py#L11"
    },
    "iosxe": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/get.py#L10"
    },
    "iosxr": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/get.py#L11"
    },
    "nxos": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/get.py#L11"
    }
  },
  "get_local_ip": {
    "com": {
      "doc": " Get the local IP address that is used to connect to devices.\n\n    Looks up the IP address via the spawn process ID.\n\n    Args:\n        device (Device): device object\n        alias (str): alias name of the connection\n\n    Returns:\n        IP address (str)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_local_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3827"
    }
  },
  "get_log_message_time": {
    "junos": {
      "doc": " Gets the timestamp of a log message\n\n    Args:\n        device (obj): Device object\n        message (str): Message\n        file_name (str): File to check. Defaults to 'messages'\n\n    Returns:\n        (datetime): Timestamp object\n    ",
      "module_name": "log.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_log_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/get.py#L15"
    }
  },
  "get_logging_logs": {
    "iosxe": {
      "doc": " Returns list of entries in the logging system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            list of entries from logging system\n        Raises:\n            None\n    ",
      "module_name": "logging.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_logging_logs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#L15"
    }
  },
  "get_longest_server_address": {
    "com": {
      "doc": "\n    get the longest server address from the devices's testbed\n    Args:\n        device ('obj'): Device object\n    Returns:\n        the longest address in the testbed\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_longest_server_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1311"
    }
  },
  "get_mac_aging_timer": {
    "iosxe": {
      "doc": " Get Aging-Timer from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            aging_time (`int`): aging-time in second\n            None \n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mac_aging_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L12"
    }
  },
  "get_mac_table": {
    "iosxe": {
      "doc": " Get mac table from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            mac_table (`dict`): mac table dict\n            None: When nothing has been found\n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mac_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L34"
    }
  },
  "get_md5_hash_of_file": {
    "ios": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L514"
    },
    "iosxe": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L524"
    },
    "iosxr": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L76"
    },
    "linux": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L104"
    },
    "nxos": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L123"
    }
  },
  "get_mgmt_interface": {
    "iosxe": {
      "doc": " Get the name of the management interface.\n\n    if the mgmt_ip is provided, will use that for the lookup. If not, will\n    call the get_mgmt_ip API to get the IP.\n\n    Args:\n        mgmt_ip: (str) IP address of the management interface (optional)\n\n    Returns:\n        String with interface name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L679"
    },
    "iosxr": {
      "doc": " Get the name of the management interface.\n\n    if the mgmt_ip is provided, will use that for the lookup. If not, will\n    call the get_mgmt_ip API to get the IP.\n\n    Args:\n        mgmt_ip: (str) IP address of the management interface (optional)\n\n    Returns:\n        String with interface name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L328"
    },
    "nxos": {
      "doc": " Get the management interface name.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L253"
    }
  },
  "get_mgmt_ip": {
    "apic": {
      "doc": " Get the management IP address of the device.\n\n    Returns:\n        IP address string or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L308"
    },
    "iosxe": {
      "doc": " Get the management IP address of the device.\n\n    Returns:\n        IP address string or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L632"
    }
  },
  "get_mgmt_ip_and_mgmt_src_ip_addresses": {
    "iosxe": {
      "doc": " Get the management IP address and management source addresses.\n\n    Returns:\n        Tuple of mgmt_ip and list of IP address (mgmt_ip, [mgmt_src_addrs]) or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L650"
    },
    "iosxr": {
      "doc": " Get the management IP address and management source addresses.\n\n    Returns:\n        Tuple of mgmt_ip and list of IP address (mgmt_ip, [mgmt_src_addrs]) or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L305"
    },
    "nxos": {
      "doc": " Get the management IP and source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L228"
    }
  },
  "get_mgmt_src_ip_addresses": {
    "apic": {
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L287"
    },
    "iosxe": {
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L616"
    },
    "iosxr": {
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L289"
    },
    "nxos": {
      "aci": {
        "doc": " Get the source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "get_mgmt_src_ip_addresses",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L329"
      },
      "doc": " Get the source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L207"
    }
  },
  "get_module_info": {
    "iosxr": {
      "doc": " Get a module's information\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            key (`str`): Key name\n        Returns:\n            field (`str`): Field value\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_module_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L17"
    }
  },
  "get_mpls_forwarding_table_key_value_pairs": {
    "iosxe": {
      "doc": " Gets all key:value pairs from the mpls forwarding table\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_forwarding_table_key_value_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L207"
    }
  },
  "get_mpls_interface_ldp_configured": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show run'\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            interface address\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_interface_ldp_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L113"
    }
  },
  "get_mpls_label_stack": {
    "iosxe": {
      "doc": " Get mpls Label Stack\n        using 'show mpls forwarding-table labels {label} detail'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n            prefix ('str'): Prefix value\n        Returns:\n            stack ('list'): Label stack\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L51"
    }
  },
  "get_mpls_ldp_peer_state": {
    "iosxe": {
      "doc": " Gets the ldp peer state under specified interface\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n        Returns:\n            ldp peer state ('str')\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_ldp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L160"
    }
  },
  "get_mpls_ldp_session_count": {
    "iosxe": {
      "doc": " Get mpls ldp seesion count\n\n        Args:\n            device(`str`): Device str\n        Returns:\n            int: session count\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_ldp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L134"
    }
  },
  "get_mpls_out_label": {
    "junos": {
      "doc": " Get out label information from mpls\n\n    Args:\n        device (obj): device object\n        name (str): lsp name\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_out_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L17"
    }
  },
  "get_mpls_outgoing_label": {
    "iosxe": {
      "doc": " Get mpls outgoing label \n        using 'show mpls forwarding-table labels {label}'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n        Returns:\n            out_label ('str'): Outgoing label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L24"
    }
  },
  "get_mpls_record_routes": {
    "junos": {
      "doc": " Get mpls record routes\n\n    Args:\n        device (obj): device object\n        name (str): mpls name to check\n        purge_self (bool, optional): Purge <self> from record routes? Defaults to True.\n        \n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_record_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L41"
    }
  },
  "get_neighbor_address": {
    "com": {
      "doc": "Get the neighbor address in a subnet /30\n\n        Args:\n            ip (`str`): Ip address to get the neighbor for\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L307"
    }
  },
  "get_neighbor_interface_and_device": {
    "iosxe": {
      "doc": " Get neighbor interface and device from topology\n\n        Args:\n            device (`obj`): Device object\n            interface_alias (`str`): interface alias\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_interface_and_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L95"
    }
  },
  "get_neighbor_interface_and_device_by_link": {
    "iosxe": {
      "doc": " Get neighbor interface and device by link\n\n        Args:\n            device (`obj`): Device object\n            link_name (`str`): link name\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_interface_and_device_by_link",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L125"
    }
  },
  "get_neighboring_device_interface": {
    "iosxe": {
      "doc": " Get neighbor device interface\n\n        Args:\n            device ('obj'): Device object\n            testbed ('obj'): Testbed object\n            interface ('str'): interface name\n\n        Returns:\n            Dictionary: topology\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighboring_device_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L674"
    }
  },
  "get_node_list": {
    "virl": {
      "doc": "Get node list\n\n        Args:\n            device (`obj`): Device object\n            simulation_name: simulation name\n\n        Returns:\n            list: node list\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_node_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L70"
    }
  },
  "get_node_summary": {
    "virl": {
      "doc": "Get node summary\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n            dict: node summary info\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_node_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L42"
    }
  },
  "get_ntp_md5_peer": {
    "iosxe": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L110"
    },
    "iosxr": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L101"
    }
  },
  "get_ntp_outgoing_interface": {
    "iosxe": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L59"
    },
    "iosxr": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L55"
    }
  },
  "get_ntp_packet": {
    "iosxe": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L213"
    },
    "iosxr": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L178"
    }
  },
  "get_ntp_peer_information": {
    "junos": {
      "doc": " Get ntp peer information\n\n        Args:\n            device (`obj`): Device object\n            expected_mode(`str`, Optional): Expected ntp mode. Defaults to None.\n        Returns:\n            result (`list`): List of peers\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_peer_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/get.py#L11"
    }
  },
  "get_ntp_servers": {
    "iosxe": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L25"
    },
    "iosxr": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L23"
    }
  },
  "get_ntp_source_interface_ip": {
    "iosxe": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L43"
    },
    "iosxr": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L39"
    }
  },
  "get_ntp_system_config_source_address": {
    "junos": {
      "doc": " Get ntp system configuration source address\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`str`):  ntp system configuration source address\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_config_source_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/get.py#L42"
    }
  },
  "get_ntp_system_peer": {
    "iosxe": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L153"
    },
    "iosxr": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L142"
    }
  },
  "get_ntp_system_peer_vrf": {
    "iosxe": {
      "doc": " Get a ntp system peer's vrf name\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            vrf (`str`): vrf name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L191"
    }
  },
  "get_ospf3_neighbor_count": {
    "junos": {
      "doc": " Get ospf3 neighbors count\n\n    Args:\n        device (`obj`): Device object\n        expected_state (`str`): Expected neighbor state. Defaults to None\n        output (`str`): output of show ospf neighbor. Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (`int`, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf3.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf3_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/get.py#L33"
    }
  },
  "get_ospf3_neighbors_instance_state_count": {
    "junos": {
      "doc": " Get ospf3 neighbors instance state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Full'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf3.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf3_neighbors_instance_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/get.py#L14"
    }
  },
  "get_ospf_area_of_interface": {
    "iosxe": {
      "doc": " Get area value of an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            vrf ('str'): VRF name\n            process_id ('str'): Process id\n            address_family ('str'): Address family\n        Returns:\n            area ('str'): If area found\n            None: If area not found\n        Raises:\n            ValueError: Command found more than one area\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_area_of_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L181"
    }
  },
  "get_ospf_database_checksum": {
    "junos": {
      "doc": " Get ospf data base checksum data in a list\n\n    Args:\n        device (obj): Device object\n        lsa_type (str, optional): LSA type to check for. Defaults to None.\n\n    Returns:\n        list: List of checksums\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_database_checksum",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L93"
    }
  },
  "get_ospf_global_block_range": {
    "iosxe": {
      "doc": " Get global block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Global range minimum\n                int: Global range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_global_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L577"
    }
  },
  "get_ospf_interface_affinity_bits": {
    "iosxe": {
      "doc": " Get affinity bits value of an ospf interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            bits ('str'): Affinity bits\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interface_affinity_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L834"
    }
  },
  "get_ospf_interface_and_area": {
    "junos": {
      "doc": " Retrieve interface for ospf on junos device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            interface and area value dictionary\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interface_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L15"
    }
  },
  "get_ospf_interfaces": {
    "iosxe": {
      "doc": " Retrieve interface for ospf using OSPF Process ID\n\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF Process ID\n\n        Returns:\n            List of interfaces\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L491"
    }
  },
  "get_ospf_local_block_range": {
    "iosxe": {
      "doc": " Get local block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Local range minimum\n                int: Local range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_local_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L617"
    }
  },
  "get_ospf_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        destination_address (str): Destination address\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L179"
    }
  },
  "get_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Gets the ospf neighbors address' in state\n\n        Args:\n            device ('obj'): Device to use\n            state ('str'): full/sub-string of the state you want\n                           search for\n\n        Returns:\n            ('list'): of ospf neighbor address' in state\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L771"
    }
  },
  "get_ospf_neighbor_count": {
    "junos": {
      "doc": " Get ospf neighbors count\n\n    Args:\n        device (`obj`): Device object\n        expected_state (`str`): Expected neighbor state. Defaults to None\n        output (`str`): output of show ospf neighbor. Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (`int`, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L166"
    }
  },
  "get_ospf_neighbors": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L382"
    }
  },
  "get_ospf_neighbors_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n            state ('str'): full/sub-string of the state you want \n                           search for\n            in_state ('bool'): Check if state is in state provided\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L290"
    }
  },
  "get_ospf_neighbors_instance_state_count": {
    "junos": {
      "doc": " Get ospf neighbors instance state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Full'. \n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_instance_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L147"
    }
  },
  "get_ospf_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            state ('str'): full/sub-string of the state you want \n                           search against\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L363"
    }
  },
  "get_ospf_neighbors_using_interface": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are under the specified interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n\n        Returns:\n            list of ospf neighbor ip_addresses\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_using_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L400"
    }
  },
  "get_ospf_process_id_and_area": {
    "iosxe": {
      "doc": " Get ospf process id and area\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            address_family (`str`): Address family name\n\n        Returns:\n            None if error occured\n            tuple: ospf process number and area\n                ex.) (1234, ['0.0.0.4', '0.0.0.8'])\n                First element that is 1234 is process number\n                Second element that is ['0.0.0.4', '0.0.0.8'] is list of areas\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L529"
    }
  },
  "get_ospf_process_id_on_interface": {
    "iosxe": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L869"
    },
    "iosxr": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ospf/get.py#L20"
    }
  },
  "get_ospf_process_number": {
    "iosxe": {
      "doc": " Get ospf process number\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            output ('dict'): Output from parser otherwise will get from device\n\n        Returns:\n            None if error occured\n            str: ospf process number\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L244"
    }
  },
  "get_ospf_router_id": {
    "iosxe": {
      "doc": " Get ospf router-id - show ip protocols\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            instance ('str'): instance value\n        Returns:\n            str: single router id\n            None: if empty\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L42"
    },
    "junos": {
      "doc": " Retrieve ospf router id\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L130"
    }
  },
  "get_ospf_router_self_originate_metric": {
    "iosxe": {
      "doc": " Get the OSPF advertised metric value\n\n        Args:\n            device ('obj'): Device object\n            vrf (`str`): Vrf value - Default\n            ospf_process_id (`int`): OSPF process ID\n\n        Returns:\n            Dictionary for metric\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_self_originate_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L32"
    }
  },
  "get_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRGB Base' and 'SRGB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('int'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRGB Base value, ('dict'): Output from parser)\n            if cannot filter due to lack of arguments:\n                ([{key:value},{key:value}], ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L714"
    }
  },
  "get_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRLB Base' and 'SRLB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRLB Base value, ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L657"
    }
  },
  "get_ospf_session_count": {
    "iosxe": {
      "doc": " Get ospf seesion count\n\n        Args:\n            device(`str`): Device str\n        \n        Returns:\n            integer: ospf session count\n        \n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L464"
    }
  },
  "get_ospf_spf_scheduled_time": {
    "junos": {
      "doc": "\n    Get OSPF spf scheduled time in log 'Jun 12 03:32:19.068983 OSPF SPF scheduled for topology default in 8s' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_spf_scheduled_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L42"
    }
  },
  "get_ospf_spf_start_time": {
    "junos": {
      "doc": "\n    Get OSPF spf start time in log 'Jun 12 03:40:19.068983 Starting full SPF for topology default' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_spf_start_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L67"
    }
  },
  "get_ospf_sr_adj_sid_and_neighbor_address": {
    "iosxe": {
      "doc": " Gets adjacency sids and corresponding neighbor address.\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            neighbor_addresses ('list'): If provided, function will only return adj-sid/neighbor_address\n                                         pairs that exist in the list\n\n        Returns:\n            {(192.168.0.1, 123), (192.168.0.2, 231), ...}\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_sr_adj_sid_and_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L802"
    }
  },
  "get_packet_attributes_scapy": {
    "iosxe": {
      "doc": "\n    returns attributes and their values of a packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            dict with attributes and their values\n    example:\n        {\n            \"User-Name\": {\"value\": \"'6c8bd38ec702'\", \"len\": \"14\"},\n            \"User-Password\": {\"value\": \"b392032ba377baacffb4cacf3a8d9b04\", \"len\": \"18\"},\n            \"Service-Type\": {\"value\": \"Call Check\", \"len\": \"6\"},\n            \"Framed-MTU\": {\"value\": \"1468\", \"len\": \"6\"},\n            \"Message-Authenticator\": {\"value\": \"d215599321f88dca2cacb5e0e793f354\", \"len\": \"18\"},\n            \"EAP-Key-Name\": {\"value\": \"''\", \"len\": \"2\"},\n            \"NAS-IP-Address\": {\"value\": \"10.106.26.213\", \"len\": \"6\"},\n            \"NAS-Port-Id\": {\"value\": \"'TenGigabitEthernet1/0/11'\", \"len\": \"26\"},\n            \"NAS-Port-Type\": {\"value\": \"Ethernet\", \"len\": \"6\"},\n            \"NAS-Port\": {\"value\": \"50111\", \"len\": \"6\"},\n            \"Calling-Station-Id\": {\"value\": \"'6C-8B-D3-8E-C7-02'\", \"len\": \"19\"},\n            \"NAS-Identifier\": {\"value\": \"'Switch-9500'\", \"len\": \"13\"},\n            \"Called-Station-Id\": {\"value\": \"'D0-EC-35-92-C9-8B'\", \"len\": \"19\"},\n        }\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_attributes_scapy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1210"
    }
  },
  "get_packet_info_field": {
    "iosxe": {
      "doc": "\n    returns packets info\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            returns packets info\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_info_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1263"
    }
  },
  "get_packet_ip_tos_field": {
    "iosxe": {
      "doc": "\n    returns types of services field from packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            returns types of services field\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_ip_tos_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1292"
    }
  },
  "get_peer_bgp_address": {
    "junos": {
      "doc": " Retrieve peer's ip address for 'show bpg neighbor' command\n\n        Args:\n            device ('obj'): Device object\n            address_family('str'): Mandatory field (ipv4, ipv6)\n\n        Returns:\n            an ip address\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_peer_bgp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L74"
    }
  },
  "get_peer_restart_flags_received": {
    "junos": {
      "doc": " Retrieve peer restart flags received\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): Neighbor IP address\n\n        Returns:\n            List of peer restart flags received\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_peer_restart_flags_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L120"
    }
  },
  "get_pfe_count": {
    "junos": {
      "doc": "Returns count of count_type\n\n    Args:\n        device (obj): Device object\n        count_type (str): Which count to return. Ex: bfd, arp, atm-oam\n\n    Return:\n        str: Count for given count_type\n    ",
      "module_name": "pfe.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_pfe_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/pfe/get.py#L14"
    }
  },
  "get_pfe_hardware_input_drops": {
    "junos": {
      "doc": " Get hardware input drops\n\n    Args:\n        device (obj): Device object\n        count_type (str): Which count to return. Ex: bfd, arp, atm-oam\n\n    Return:\n        str: Count for given count_type\n    ",
      "module_name": "pfe.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_pfe_hardware_input_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/pfe/get.py#L45"
    }
  },
  "get_ping_message": {
    "junos": {
      "doc": " Get ntp peer information\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Given interface for the output\n            address (`str`): Interface used in command\n            source (`str`): Interface used in command\n            size (`int`): Size value used in command\n            count (`int`): Count value used in command\n        Returns:\n            result (`str`): message\n        Raises:\n            N/A\n    ",
      "module_name": "ping.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ping_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/get.py#L11"
    }
  },
  "get_platform_core": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L139"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core or \n                                            system-report is generated on device\n                                            ex.) `bootflash:/core/`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                           or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L348"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core is generated \n                                            on device\n                                            ex.) `harddisk:/dumper`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                           or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L227"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                                   or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L133"
    }
  },
  "get_platform_cpu_load": {
    "ios": {
      "doc": "Get cpu load on device\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L212"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L424"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load   (`int`): Cpu load (5 mins average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L290"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L193"
    }
  },
  "get_platform_cpu_load_detail": {
    "ios": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L268"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                if not specified, will return one ALL_PROCESSES \n                                with total cpu load\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            check_key_total (`str`): Key to check in parsed output for Total\n                                     Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L480"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'netconf': 0.0,\n                                         'bgp': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L350"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L247"
    }
  },
  "get_platform_default_dir": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L82"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L330"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L207"
    },
    "junos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `file list` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/platform/get.py#L10"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L115"
    }
  },
  "get_platform_logging": {
    "ios": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): Override show command\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n        Returns:\n            logs     (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L174"
    },
    "iosxe": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L402"
    },
    "iosxr": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L487"
    },
    "linux": {
      "doc": "Get logging messages\n\n        Args:\n            device          (`obj`): Device object\n            command         (`str`): Override show command\n            files          (`list`): List of syslog files\n            keywords       (`list`): List of keywords to match\n            timeout         (`int`): timeout (default: 300 secs)\n            output          (`str`): Not Available on this platform\n            prompt_pattern  (`str`): Prompt pattern\n            error_patterns (`list`): Error patterns. if not specified, [](empty) is default.\n        Returns:\n            logs           (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/get.py#L10"
    },
    "nxos": {
      "doc": "Get logging messages\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): show command. Default to 'show logging logfile'\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match. Default to None\n            output    (`str`): Output of show command. Default to None\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L449"
    }
  },
  "get_platform_memory_usage": {
    "ios": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L326"
    },
    "iosxe": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L516"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to 'dynamic'\n            output         (`str`): Output of show command\n                                    Default to None\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L378"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. Not used for NXOS\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L277"
    }
  },
  "get_platform_memory_usage_detail": {
    "ios": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L404"
    },
    "iosxe": {
      "doc": null,
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L598"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `dynamic`\n            output         (`str`): Output of show command\n                                    Deault to None\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L457"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. Not used for NXOS\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'libvirtd': 0.0012294695662956926,\n                                            'inotifywait': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L344"
    }
  },
  "get_platform_standby_rp": {
    "iosxe": {
      "doc": " Get standby router slot on device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds retrieving router information\n            interval ('int'): Interval in seconds retrieving router information\n        Raise:\n            None\n        Return:\n            Integer: Number of RP\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_standby_rp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L25"
    }
  },
  "get_platform_type": {
    "iosxe": {
      "doc": "Get platform type of device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device platform type\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L698"
    },
    "nxos": {
      "doc": "Get platform type of device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device platform type\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L430"
    }
  },
  "get_policy_map_class_maps": {
    "iosxe": {
      "doc": " Get class map dictionary\n\n        Args:\n            device (`obj`): Device object\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n        Returns:\n            class map dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_class_maps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L290"
    }
  },
  "get_policy_map_configurational_policy_map": {
    "iosxe": {
      "doc": " Get policy-map running configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces\n\n        Returns:\n            policy-map configurational dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_configurational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L60"
    }
  },
  "get_policy_map_operational_policy_map_on_interface": {
    "iosxe": {
      "doc": " Get operational policy-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            Device output parsed dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_operational_policy_map_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L123"
    }
  },
  "get_policy_map_policy_map_ip_precedence": {
    "iosxe": {
      "doc": " Gets policy-map ip precedence per stream\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            stream ip precedece ('dict')\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_policy_map_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L202"
    }
  },
  "get_policy_map_policy_map_packet_count": {
    "iosxe": {
      "doc": " Get policy-map packet count\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            class_map_out_packets: Packet count\n\n        Raises:\n            KeyError\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_policy_map_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L144"
    }
  },
  "get_policy_map_running_policy_map": {
    "iosxe": {
      "doc": " Get running policy-map configuration\n\n        Args:\n            device (`obj`): Device object\n            policy_map (`str`): Policy map name\n\n        Returns:\n            None\n\n        Raises:\n            SchemaUnsupportedKeyError\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_running_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L25"
    }
  },
  "get_processes_five_seconds_cpu_usage": {
    "iosxe": {
      "doc": " Get average CPU usage for last 5 seconds\n\n        Args:\n            device ('obj'): Device objecte\n\n        Returns:\n            CPU usage for last 5 seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "processes.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_processes_five_seconds_cpu_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/processes/get.py#L4"
    }
  },
  "get_protocols_bgp_process": {
    "iosxe": {
      "doc": " Returns bgp process id from show protocols\n\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            bgp process id\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_protocols_bgp_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L14"
    }
  },
  "get_radius_packets": {
    "iosxe": {
      "doc": "\n    returns radius packets from pcap file/packet\n        Args:\n            pcap_or_packet (`str/obj`): path of pcap file or packet object obtained\n                                        from scapy module\n        Returns:\n            List contains radius packets\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_radius_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1187"
    }
  },
  "get_redundancy_operational_state": {
    "iosxe": {
      "doc": " Get redundancy states of device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            String: Redundancy state\n            None\n        Raises:\n            None\n    ",
      "module_name": "redundancy.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_redundancy_operational_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/get.py#L10"
    }
  },
  "get_route_advertising_label": {
    "junos": {
      "doc": "Get the label with given table_name via\n        'show route advertising-protocol {protocol} {ip_address} {route} detail'\n\n        Args:\n            device ('obj'): Device to use\n            protocol ('str'): Protocol used in show command\n            ip_address ('str'): IP address used in show command\n            route ('str'): Route used in show command\n            table_name ('str'): Label inet\n\n        Returns:\n            str\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_advertising_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L249"
    }
  },
  "get_route_as_path": {
    "junos": {
      "doc": "\n    Get the AS path via 'show route target_route extensive'\n\n    Args:\n        device (obj): Device object\n        target_route (str): Address used in show command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L528"
    }
  },
  "get_route_count": {
    "junos": {
      "doc": "\n    Get total route count for each table via 'show route target_route extensive'\n\n    Args:\n        device (`obj`): Device object\n        table (`str`): Table name such as `inet.0`, `inet6.0`\n        protocol (`str`): Protocol name such as `Direct`, `Static` and etc\n        active (`bool`): get only active route count\n                         Default to True\n        output (`str`): output of show route summary\n\n    \n    Returns:\n        int: return number of route count based on given arguments\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L755"
    }
  },
  "get_route_destination_address": {
    "junos": {
      "doc": "Get destination address that matches criteria\n\n    Args:\n        device (obj): device object\n        extensive (bool): Show extensive output. Defaults to None.\n        prefix (str, optional): Route prefix. Defaults to None.\n        protocol (str, optional): Route protocol. Defaults to None.\n        interface (str, optional): Route interface. Defaults to None.\n\n    Returns:\n        str: The destination address\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L74"
    }
  },
  "get_route_mpls_labels": {
    "junos": {
      "doc": "\n    Get mpls labels from routing table\n\n    Args:\n        device (`obj`): Device object\n        route (`str`): Route Information such as `192.168.1.0/24`\n        table_name (`str`): table name\n        return_list (`bool`): if True, mpls labels will be returned as list instead of string\n                              Default to False\n        output` (`str`): output of show route summary\n\n    \n    Returns:\n        mpls label(`str`, `list`): return mpls label info as string by default\n                                   if return_list is True, will return labels as list\n        None: if any issue\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_mpls_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L873"
    }
  },
  "get_route_nexthop": {
    "junos": {
      "doc": " Get nexthops of route from routing table\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): route in routing table\n            extensive (`bool`): flag to add `extensive` to show command\n                                Default to False\n            all_nexthops (`bool`):  flag to return all nexthops as list or only first one as string\n            only_best (`bool`): only best nexthop\n            only_non_best (`bool`): only non-best nexthop\n        Returns:\n            nexthop address (list or string)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L593"
    }
  },
  "get_route_push_value": {
    "junos": {
      "doc": "Get Push value in 'show route {address}'\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            expected_table_name ('str'): Expected table name\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_push_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L663"
    }
  },
  "get_route_summary_table_total_route_count": {
    "junos": {
      "doc": "\n    Get total route count for each table via 'show route target_route extensive'\n\n    Args:\n        device (obj): Device object\n    \n    Returns:\n        dict: Table name as key, total route count as value.\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_summary_table_total_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L567"
    }
  },
  "get_route_table_first_label": {
    "junos": {
      "doc": "Get route table first label\n\n    Args:\n        device (obj): Device object\n        table ('str'): Table name\n        address ('str'): Address to search in show command\n    \n    Returns:\n        output_label (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_first_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L709"
    }
  },
  "get_route_table_output_interface": {
    "junos": {
      "doc": "Get route table output interface\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_interface (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L304"
    }
  },
  "get_route_table_output_label": {
    "junos": {
      "doc": "Get route table output label\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_label (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_output_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L352"
    }
  },
  "get_route_table_switched_path_destination_address": {
    "junos": {
      "doc": " Get route table switched path destination address\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        name (str): switched path label\n\n    Returns:\n        str or None: metric value\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_switched_path_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L144"
    }
  },
  "get_route_uptime": {
    "junos": {
      "doc": "\n    Get uptime of active route in routing table\n\n    Args:\n        device (`obj`): Device object\n        route (`str`): Route Information such as `192.168.1.0/24`\n        protocol (`str`): Protocol name such as `Direct`, `Static` and etc\n        push (`bool`): flag to check route only with `Push` in route entry\n        output` (`str`): output of show route summary\n\n    \n    Returns:\n        uptime(`int`): return uptime in seconds\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L803"
    }
  },
  "get_router_ospf_section_running_config": {
    "iosxe": {
      "doc": " Get router OSPF section from running-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_router_ospf_section_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L430"
    }
  },
  "get_router_ospf_section_startup_config": {
    "iosxe": {
      "doc": " Get router OSPF section from startup-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_router_ospf_section_startup_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L447"
    }
  },
  "get_routes": {
    "iosxe": {
      "doc": " Retrieve all routes in specific protocal - show ip route\n\n        Args:\n            device ('obj'): Device object\n            protocol_codes ('str'): Protocol codes\n                If not provided, it will get all protocal routes\n        Returns:\n            routes ('list'): List of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L29"
    }
  },
  "get_routing_best_path_peer_id": {
    "junos": {
      "doc": "Get routing best path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_best_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L458"
    }
  },
  "get_routing_best_routes": {
    "junos": {
      "doc": "Return a list of best routes\n\n    Args:\n        device (object): Device object\n        address (str): Address to check\n        protocol (str): Protocol to check\n        active_tag (str, optional): Active tag. Defaults to \"*\".\n\n    Returns:\n        list: List of best routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L215"
    }
  },
  "get_routing_engines_states": {
    "junos": {
      "doc": " Get state of routing engines\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`list`): list of states of routing engines\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_engines_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L118"
    }
  },
  "get_routing_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name. Default is None.\n        ip_address (str): IP address name. Default is None.\n        extensive (bool): Run with extensive command.\n        expected_metric_2 (bool): Flag for checking metric2\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L399"
    }
  },
  "get_routing_mpls_label": {
    "iosxe": {
      "doc": " Get registered MPLS label to prefix \n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf (`vrf`): VRF name\n            output ('dict'): Optional. Parsed output of command 'show ip route {prefix}'\n        Returns:\n            int: registered MPLS label\n        Raises:\n            None\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L253"
    }
  },
  "get_routing_nonbest_path_peer_id": {
    "junos": {
      "doc": "Get routing nonbest path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_nonbest_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L491"
    }
  },
  "get_routing_ospf_routes": {
    "iosxe": {
      "doc": " Retrieve all ospf routes - show ip route\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            routes ('list'): List of ospf routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_ospf_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L16"
    }
  },
  "get_routing_outgoing_interface": {
    "iosxe": {
      "doc": " Execute 'show ip cef <address>' and retrieve the outgoing interface\n\n        Args:\n            device (`obj`): Device object\n            ip_address ('str'): ip_address\n            vrf ('str'): vrf to search under\n            address_family ('str'): address_family to search under\n\n        Returns:\n            ('list'): [interface name, ip_address]\n\n        Raises:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L71"
    }
  },
  "get_routing_repair_path_information": {
    "iosxe": {
      "doc": " Get 'repair path' information under route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n        Returns:\n            tuple : (\n                next_hop ('str'): Next hop ip\n                outgoing_interface ('str'): Outgoing interface name\n            )            \n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_repair_path_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L215"
    }
  },
  "get_routing_route_count": {
    "iosxe": {
      "doc": " Get route count for all vrfs\n\n        Args:\n            device(`str`): Device str\n            vrf ('str'): VRF name\n\n        Returns:\n            int: route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L116"
    }
  },
  "get_routing_route_count_all_vrf": {
    "iosxe": {
      "doc": " Get route count for every VRF\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            Integer: Route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_route_count_all_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L145"
    }
  },
  "get_routing_routes": {
    "iosxe": {
      "doc": "Execute 'show ip route vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            address_family (`str`): Address family name\n\n        Returns:\n            Dictionary: received routes\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L181"
    }
  },
  "get_routing_vrf_entries": {
    "iosxe": {
      "doc": " Get entry of routes from\n        'show ip route vrf {vrf} {prefix}'/'show ip route {prefix}'\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf (`str`, optional): VRF name, default None\n        Returns:\n            list: entries of ip\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_vrf_entries",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L298"
    }
  },
  "get_rsvp_hello_sent": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            sent_count_flag ('bool'): Flag for getting Hello: sent value\n        \n        Returns:\n            sent_count: Value obtained from the Hello: send value\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_rsvp_hello_sent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/get.py#L13"
    }
  },
  "get_rsvp_session_state_count": {
    "junos": {
      "doc": " Get show ldp session count\n\n    Args:\n        device (obj): Device object\n        expected_lsp_state (str): Expected session state. Defaults to 'Up'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "rsvp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_rsvp_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/get.py#L81"
    }
  },
  "get_running_config": {
    "ios": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L117"
    },
    "iosxe": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L115"
    }
  },
  "get_running_config_all": {
    "com": {
      "doc": " Return raw running configuration\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n        Returns:\n            Raw output\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3162"
    }
  },
  "get_running_config_dict": {
    "asa": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/asa/running_config/get.py#L12"
    },
    "ios": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L37"
    },
    "iosxe": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L35"
    },
    "iosxr": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L33"
    },
    "junos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/get.py#L12"
    },
    "nxos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L14"
    }
  },
  "get_running_config_hostname": {
    "ios": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L62"
    },
    "iosxe": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L60"
    },
    "iosxr": {
      "doc": " Get device hostname\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L14"
    }
  },
  "get_running_config_section": {
    "ios": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L137"
    },
    "iosxe": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L135"
    }
  },
  "get_running_config_section_attr44": {
    "iosxe": {
      "doc": " Return list with configuration section starting with passed keyword\n        Args:\n            device ('obj') : Device object to extract configuration\n            option (`str`) : match string\n        Returns:\n            Return the configuration with the passed keyword\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_attr44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L332"
    }
  },
  "get_running_config_section_dict": {
    "ios": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L85"
    },
    "iosxe": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L83"
    }
  },
  "get_running_image": {
    "ios": {
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L547"
    },
    "iosxe": {
      "cat9500": {
        "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_running_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L57"
      },
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L163"
    },
    "iosxr": {
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L46"
    },
    "nxos": {
      "doc": "\n        Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            kickstart (`str`): Kickstart image\n            system (`str`): System image\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L46"
    }
  },
  "get_segment_routing_accumulated_path_metric": {
    "iosxe": {
      "doc": " Get accumulated path metric for a preference path\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            preference ('int'): Preference path\n\n        Returns:\n            accumulated_metric (None, 'int'): Accumulated path metric\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_accumulated_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L226"
    }
  },
  "get_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Gets segement-routing global block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L207"
    }
  },
  "get_segment_routing_labels_from_bgp": {
    "iosxe": {
      "doc": " Gets segement-routing labels from bgp table\n\n        Args:\n            device (`obj`): device to use\n            route (`str`): route to check\n            vrf (`vrf`): VRF name\n            best_path (`bool`): only best path returned\n\n        Returns:\n            ('list'): list of segment routing labels\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_labels_from_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L261"
    }
  },
  "get_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Gets segement-routing local block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L187"
    }
  },
  "get_segment_routing_policy_active_path_hop_labels": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            policy ('str'): Policy name\n            policy_dict ('dict'): Policy dict from parser output\n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            ignore_first_label (`bool`): flag to ignore first label\n        Returns:\n            labels ('list'): Hop labels\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_policy_active_path_hop_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L22"
    }
  },
  "get_segment_routing_policy_in_state": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            expected_admin ('str'): Expected admin state\n            expected_oper ('str'): Expected operational state\n            expected_color (`str`): Expected color\n            expected_endpoint (`str`): Expected end-point address\n        Returns:\n            policy ('str'): Policy name\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_policy_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L108"
    }
  },
  "get_segment_routing_sid_map_configuration": {
    "iosxe": {
      "doc": " Get Segment routing SID map configuration\n\n        Args:\n            device ('str'): Device str\n            address_family ('str'): Address family\n        Returns:\n            Dictionary with ip address as key and sid as value\n            ex.)\n                {\n                    '192.168.1.1': '1',\n                    '192.168.1.2': '2'\n                }\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_sid_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L147"
    }
  },
  "get_server_vm": {
    "linux": {
      "doc": " Get all VMs on server\n        Args:\n            vm_hostname ('str'): VM name to check for on ESXI server\n        Raises:\n            N/A\n        Returns:\n            devs ('dict'): Dictionary of VMs that are on the ESXI server, \n            where the key is the name of the VM and the value is its VM id.\n            \n        Parser schema for vim-cmd vmsvc/getallvms\n        schema = {\n            'vmid': {\n                Any(): {\n                    'vmid': str,\n                    'name': str,\n                    'file': str,\n                    'guest_os': str,\n                    'version': str,\n                    Optional('annotation'): str,\n                }\n            }\n        }\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_server_vm",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L55"
    }
  },
  "get_services_accounting_aggregation_template_field": {
    "junos": {
      "doc": " Get value of field from show service accounting aggregation template template-name {template-name} extensive\n\n        Args:\n            device (`obj`): Device object\n            source (`str`, Optional): source address. Default to None\n            destination (`str`, Optional): destination address. Default to None\n            template_name (`str`): template name\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting errors\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_aggregation_template_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L316"
    }
  },
  "get_services_accounting_errors": {
    "junos": {
      "doc": " Get value of field from show services accounting errors\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting errors\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L278"
    }
  },
  "get_services_accounting_flow": {
    "junos": {
      "doc": " Get value of field from show services accounting flow\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting flow\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L234"
    }
  },
  "get_services_accounting_flow_active": {
    "junos": {
      "doc": " Get services accounting flow active flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L33"
    }
  },
  "get_services_accounting_flow_expired": {
    "junos": {
      "doc": " Get services accounting flow expired flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_expired",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L52"
    }
  },
  "get_services_accounting_flow_exported": {
    "junos": {
      "doc": " Get services accounting flow exported flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_exported",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L13"
    }
  },
  "get_services_accounting_flow_packets": {
    "junos": {
      "doc": " Get criteria from show services accounting flow\n\n        Args:\n            device (`obj`): Device object\n            criteria ('str'): Criteria to return from show command\n        Returns:\n            flow packet value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L126"
    }
  },
  "get_services_accounting_memory": {
    "junos": {
      "doc": " Get services accounting memory\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L161"
    }
  },
  "get_services_accounting_status": {
    "junos": {
      "doc": " Get value of field from show services accounting status\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting status\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L194"
    }
  },
  "get_services_accounting_usage_five_second_load": {
    "junos": {
      "doc": " Get services accounting usage five-second-load\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_usage_five_second_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L71"
    }
  },
  "get_services_accounting_usage_one_minute_load": {
    "junos": {
      "doc": " Get services accounting usage one-min-load\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_usage_one_minute_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L98"
    }
  },
  "get_show_output_include": {
    "iosxe": {
      "doc": " Find the lines which are match from show command.\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n            output (`str`): output of show command. (optional) Default to None\n        Returns:\n            bool,output('str') : True/False, include command output based on the output\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_include",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L771"
    }
  },
  "get_show_output_line_count": {
    "iosxe": {
      "doc": " Count number of lines from show command.\n\n        The command string is created using \"{command} | count {filter}\"\n\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n            output (`str`): output of show command. (optional) Default to None\n        Returns:\n            line_count (`int`): number of lines based on show command output\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_line_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L698"
    },
    "junos": {
      "doc": " Count number of line from show command output\n\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            output (`str`): output of show command. Default to None\n        \n        Returns:\n            line_count (`int`): number of lines based on show command output\n            \n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_line_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L389"
    }
  },
  "get_show_output_section": {
    "iosxe": {
      "doc": " Display the lines which are match from section \n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n        Returns:\n            bool,output('str') : True/False, section command output based on the output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1344"
    }
  },
  "get_show_run_bgp_dict": {
    "iosxe": {
      "doc": " Parse router bgp section from show running-config to a dictionary\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            Dictionary following below schema:\n            {\n                'bgp_as': int,\n                    Any(): {\n                        Any(): {\n                            'neighbor': str,\n                            'neighbors': list\n                            'remote_as': int}}}\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_run_bgp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L30"
    }
  },
  "get_show_tech": {
    "apic": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/support/tech_support.py#L11"
    },
    "iosxe": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: flash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/support/tech_support.py#L13"
    },
    "iosxr": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: bootflash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the bootflash,\n    compressed with tar and uploaded to the target_host via scp.\n    The created show tech files will be deleted from the bootflash.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/support/tech_support.py#L12"
    },
    "nxos": {
      "aci": {
        "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
        "module_name": "support.tech_support",
        "package": "genie.libs.sdk.apis",
        "uid": "get_show_tech",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/support/tech_support.py#L11"
      },
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: bootflash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        vrf (str): VRF to use (default: management)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the bootflash,\n    compressed with tar and uploaded to the target_host via scp.\n    The created show tech files will be deleted from the bootflash.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/support/tech_support.py#L13"
    }
  },
  "get_simulations": {
    "virl": {
      "doc": "Get simulations list\n\n        Args:\n            device (`obj`): Device object\n            connection_alias (`str`): connection alias\n\n        Returns:\n            list: list of simulation names\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_simulations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L12"
    }
  },
  "get_single_interface": {
    "com": {
      "doc": "\"\n    Returns the single interface and fails if multiple interfaces\n    are found.\n\n    Args:\n        device (`obj`): device to use\n        link_name ('str'): link name\n        opposite ('bool'): find opposite device interface\n        phy ('bool'): find only physical interface\n\n    Raise:\n        N/A\n\n    Return:\n        Interface Object\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_single_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3781"
    }
  },
  "get_slot_model": {
    "iosxe": {
      "doc": "Gets the model name of one or all modules\n\n    Args:\n        device (obj): Device object\n        slot (str, optional): Module slot to get. Defaults to None.\n\n    Returns:\n        dict: Dictionary mapped from slot number to model\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_slot_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L639"
    },
    "nxos": {
      "doc": "Gets the model name of all modules\n\n    Args:\n        device (obj): Device object\n        slot (str, optional): Module slot to get. Defaults to None.\n\n    Returns:\n        dict: Dictionary mapped from slot number to model\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_slot_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L375"
    }
  },
  "get_snmp_cli_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from CLI\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n            out (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                        \"load_average\": {\n                            \"status\": \"healthy\",\n                            \"1_min\": 0.07,\n                            \"5_min\": 0.02,\n                            \"15_min\": 0.0\n                        },\n                        \"memory\": {\n                            \"status\": \"healthy\",\n                            \"total\": 964676,\n                            \"used\": 575896,\n                            \"used_percentage\": 60,\n                            \"free\": 388780,\n                            \"free_percentage\": 40,\n                            \"committed\": 869972,\n                            \"committed_percentage\": 90\n                        },\n                        \"cpu\": {\n                            \"0\": {\n                                \"user\": 3.4,\n                                \"system\": 0.8,\n                                \"nice_process\": 0.0,\n                                \"idle\": 95.69,\n                                \"irq\": 0.0,\n                                \"sirq\": 0.1,\n                                \"waiting\": 0.0\n                            }\n                        }}}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_cli_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L159"
    }
  },
  "get_snmp_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from SNMP device\n\n        Args:\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n        Returns:\n            snmp_dict (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                     \"used\": 575640,\n                     \"free\": 389036,\n                     \"1_min\": 3,\n                     \"5_min\": 4,\n                     \"15_min\": 0,\n                     \"committed\": 869368}}\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L105"
    }
  },
  "get_snmp_id_slot_map": {
    "iosxe": {
      "doc": " Get id-slot mapping from SNMP server\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oids (`list`): Oid codes\n            version (`str`): SNMP version\n        Returns:\n            id_slot_map (`dict`): Id slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_id_slot_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L49"
    }
  },
  "get_snmp_information": {
    "junos": {
      "doc": " Get snmp information\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`list`): list of snmp information\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/get.py#L12"
    }
  },
  "get_snmp_snmpwalk": {
    "iosxe": {
      "doc": " Get snmpwalk output from SNMP device\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`): SNMP version\n            option (`str`): Optional command\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_snmpwalk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L13"
    },
    "linux": {
      "doc": " Get snmpwalk output from SNMP device\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`, optional): SNMP version. Default is \"2c\"\n            option (`str`): Optional command. Default is None\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_snmpwalk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/snmp/get.py#L10"
    }
  },
  "get_software_version": {
    "iosxr": {
      "asr9k": {
        "doc": " Gets the version of the current running image\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_software_version",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/asr9k/get.py#L9"
      },
      "ncs5k": {
        "doc": " Gets the version of the current running image\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_software_version",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs5k/get.py#L9"
      }
    },
    "nxos": {
      "doc": "Get software version of device\n\n    Args:\n        device (obj): Device object\n        return_tuple (bool, optional): Should the return be a tuple.\n            Defaults to False.\n\n    Returns:\n        (str, tuple): Device software version as a str or tuple\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_software_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L476"
    }
  },
  "get_stack_size": {
    "iosxe": {
      "doc": "Get switch stack size\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        int: Size of stack as int\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_stack_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L610"
    }
  },
  "get_startup_config_dict": {
    "iosxe": {
      "doc": " Get section information from show startup-config\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "startup_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_startup_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/startup_config/get.py#L13"
    }
  },
  "get_structure_output": {
    "com": {
      "doc": "\n    Get structure output from any test data. Data will be divided by space\n    and generate structure data.\n\n    Args:\n        device (`obj`): device to use\n        command (`str`): show command. Default to None\n        exclude (`list`): patter to excute in text output\n                          Default to ['!']\n        negative_keyword (`str`): keyword to set value as False\n                                  Default to 'no'\n        output (`str`): text output\n\n    Returns:\n        Dict : structure data (python dictionary)\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_structure_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3521"
    }
  },
  "get_syslog_first_bgp_down_message": {
    "iosxe": {
      "doc": " Get first BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L169"
    }
  },
  "get_syslog_first_bgp_up_message": {
    "iosxe": {
      "doc": " Get first BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L275"
    }
  },
  "get_syslog_first_ospf_down_message": {
    "iosxe": {
      "doc": " Get first OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L107"
    }
  },
  "get_syslog_first_ospf_up_message": {
    "iosxe": {
      "doc": " Get first OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L218"
    }
  },
  "get_syslog_last_bgp_down_message": {
    "iosxe": {
      "doc": " Get last BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L150"
    }
  },
  "get_syslog_last_bgp_up_message": {
    "iosxe": {
      "doc": " Get last BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L258"
    }
  },
  "get_syslog_last_ospf_down_message": {
    "iosxe": {
      "doc": " Get last OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L83"
    }
  },
  "get_syslog_last_ospf_up_message": {
    "iosxe": {
      "doc": " Get last OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L196"
    }
  },
  "get_syslog_maximum_bgp_down_time": {
    "iosxe": {
      "doc": " Get maximum BGP down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from show logging\n        Returns:\n            BGP down time in seconds\n        Raises:\n            ValueError\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_maximum_bgp_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L303"
    }
  },
  "get_syslog_maximum_ospf_down_time": {
    "iosxe": {
      "doc": " Get maximum OSPF down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from Syslog server\n            server ('str'): Syslog server address\n        Returns:\n            Integer: OSPF down time in seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_maximum_ospf_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L12"
    }
  },
  "get_syslog_message_time": {
    "iosxe": {
      "doc": " Get message time\n        Args:\n            message ('str'): Line from show logging command\n            regex ('str'): Regex to extract time from line\n        Returns:\n            datetime: Time extracted from message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L47"
    }
  },
  "get_system_connections_sessions": {
    "junos": {
      "doc": " Get list of system connections via show system connections\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of system connection sessions\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_connections_sessions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L271"
    }
  },
  "get_system_current_time": {
    "junos": {
      "doc": "Return system timestamp\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        (Datetime): Return system timestamp\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_current_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L42"
    }
  },
  "get_system_uptime": {
    "junos": {
      "doc": "Return system uptime\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        str: Returns system uptime in seconds\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L16"
    }
  },
  "get_system_users": {
    "junos": {
      "doc": " Get list of users via show system user\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of username and ip address pairs\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_users",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L238"
    }
  },
  "get_task_memory_information": {
    "junos": {
      "doc": " Returns specific data based on requirement\n\n        Args:\n            device (`obj`): Device object\n            required_attribute ('str'): Type of data to return from show task memory\n        Returns:\n            result (`str`): size of memory currently in use\n    ",
      "module_name": "task.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_task_memory_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/task/get.py#L11"
    }
  },
  "get_testcase_name": {
    "com": {
      "doc": " Get testcase name from runtime\n\n    Args:\n        runtime (`obj`, optional): easypy runtime object\n        escape_regex_chars (`bool`): escapre regex special chars. Default to False\n\n    Returns:\n        str: testcase name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_testcase_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3870"
    }
  },
  "get_time_source_from_output": {
    "com": {
      "doc": " Parse out 'Time Source' value from output\n        Time source output example : 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n                                     'Time source is NTP, *12:33:45.355 EST Fri Feb 7 2020'\n\n        Args:\n            output ('str'): Text output from command\n        Returns:\n            Datetime object\n            Format : datetime(year, month, day, hour, minute, second, microseconds)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_time_source_from_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L526"
    }
  },
  "get_tolerance_min_max": {
    "com": {
      "doc": "\n       Get minimum and maximum tolerance range\n\n        Args:\n            value(int): value to find minumum and maximum range\n            expected_tolerance ('int'): Expected tolerance precentage\n\n        Returns:\n            minimum and maximum value of tolerance\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_tolerance_min_max",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2094"
    }
  },
  "get_total_space": {
    "ios": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L597"
    },
    "iosxe": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L241"
    },
    "iosxr": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L159"
    },
    "nxos": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L97"
    }
  },
  "get_traceroute_mpls_label_to_prefix": {
    "iosxe": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L65"
    },
    "iosxr": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L63"
    }
  },
  "get_traceroute_parsed_output": {
    "iosxe": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L16"
    },
    "iosxr": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L16"
    }
  },
  "get_traffic_rates": {
    "iosxe": {
      "doc": "Retrieve the formated traffic rates and tolerance margin\n\n        Args:\n            expected_rate (`str`): Expected traffic rate\n            tolerance (`str`): Tolerance margin\n\n        Returns:\n            expected_rate, expected_rate_unit, original_rate, tolerance_margin\n        Raise:\n            Exception: Failed analyzing rate\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traffic_rates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L391"
    }
  },
  "get_trunk_interfaces_encapsulation": {
    "iosxe": {
      "doc": "Get trunk interfaces encapsulation\n\n    Args:\n        device ('obj'): device object\n        interfaces ('list'): interface names\n\n    Returns:\n        dictonary with interface as the key and encapsulation as the value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_trunk_interfaces_encapsulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1369"
    }
  },
  "get_unconfig_line": {
    "com": {
      "doc": " unconfigure specific line\n\n        Args:\n            config_dict (`str`): Config dict\n            line (`str`): line to unconfig\n        Returns:\n            unconfig (`list`): list of unconfig strings\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_unconfig_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L196"
    }
  },
  "get_unused_loopback_interface": {
    "iosxe": {
      "doc": " Gets the first un-used loopback interface\n\n        Args:\n            device ('obj'): device to use\n\n        returns:\n            string: first unused loopback\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_unused_loopback_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L398"
    }
  },
  "get_username_password": {
    "com": {
      "doc": " Gets the username and password to use to log into the device console.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_username_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1403"
    }
  },
  "get_valid_config_from_running_config": {
    "ios": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L190"
    },
    "iosxe": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L188"
    },
    "iosxr": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L57"
    },
    "nxos": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L38"
    }
  },
  "get_vlan_info": {
    "ios": {
      "doc": " Api method to call parser and return device vlan information\n        Args:\n                device ('obj'): Device object\n        Returns:\n                Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/vlan/get.py#L18"
    },
    "iosxe": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/get.py#L12"
    },
    "iosxr": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/vlan/get.py#L17"
    },
    "nxos": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/vlan/get.py#L17"
    }
  },
  "get_vm_power_state": {
    "linux": {
      "doc": " Get the power state of VM\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('str'): The id of the VM\n        Raises:\n            N/A\n        Returns:\n            ('str'): \"on\" or \"off\"\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vm_power_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L30"
    }
  },
  "get_vm_snapshot": {
    "linux": {
      "doc": " Get the snapshot id for the given device\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('str'): The id of the VM\n            snapshot_name ('str'): Name of the snapshot to be reverted to, \n                                    Default is golden\n        Raises:\n            N/A\n        Returns:\n            ('str'): The snapshot id\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vm_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L102"
    }
  },
  "get_vrf_interface": {
    "iosxe": {
      "doc": " Gets the subinterfaces for vrf\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n\n        Returns:\n            interfaces('list'): List of interfaces under specified vrf\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L85"
    }
  },
  "get_vrf_route_distinguisher": {
    "iosxe": {
      "doc": " Get default route distinguisher from show command\n\n        Args:\n            vrf ('str')     : VRF value\n            device ('obj')  : Device object\n\n        Returns:\n            route_distinguisher ('str'): Route distinguisher value\n            False\n\n        Raises:\n            Exception\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_route_distinguisher",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L37"
    }
  },
  "get_vrf_route_targets": {
    "iosxe": {
      "doc": " Get route target value from a device\n\n        Args:\n            address_family ('str'): address family value\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            vrf('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n\n        Returns:\n            Route target value\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L110"
    }
  },
  "get_vrf_vrfs": {
    "iosxe": {
      "doc": " Get all vrfs from device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            out ('dict'): Vrf dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_vrfs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L12"
    }
  },
  "get_yaml_device_interface": {
    "iosxe": {
      "doc": "Gets the interface and interfaces's alias connected to devices, as per yaml file.\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            alias (`str`): interface name\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_yaml_device_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L82"
    }
  },
  "has_configuration": {
    "com": {
      "doc": " Verifies if configuration is present\n        Args:\n            configuration_dict ('dict'): Dictionary containing configuration\n            configuration ('str'): Configuration to be verified\n        Returns:\n            True if configuration is found\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "has_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L325"
    }
  },
  "health_core": {
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core or \n                                            system-report is generated on device\n                                            ex.) `bootflash:/core/`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            health_data (`dict`): return health_data format.\n                                  ex.)\n                                  {\n                                      \"health_data\": {\n                                          \"num_of_cores\": 1,\n                                          \"core_files\": [\n                                              {\n                                                  \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                  \"decode\": \"\"\"\n                                                    <decode output>\n                                                  \"\"\"\n                                              }\n                                          ]\n                                      }\n                                   }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L333"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core is generated \n                                            on device\n                                            ex.) `harddisk:/dumper`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L336"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
      "module_name": "health.health",
      "n9k": {
        "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
        "module_name": "health.health",
        "package": "genie.libs.sdk.apis",
        "uid": "health_core",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/health/health.py#L16"
      },
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L306"
    }
  },
  "health_cpu": {
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                if not specified, will return one ALL_PROCESSES \n                                with total cpu load\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            check_key_total (`str`): Key to check in parsed output for Total\n                                     Default to `five_sec_cpu_total`\n            add_total (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         \"health_data\": [\n                                             {\n                                                 \"process\": \"OMP\",\n                                                 \"value\": 0.0,\n                                             },\n                                             {\n                                                 \"process\": \"NAT-ROUTE\",\n                                                 \"value\": 0.0,\n                                             }\n                                         ]\n                                     }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L17"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            check_key_total (`str`): Key to check in parsed output\n                                     for Total. Default to `one_min_cpu`\n            add_total    (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     Example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"netconf\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"bgp\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L15"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            check_key_total (`str`): Key to check in parsed output for Total\n                                     Default to `five_sec_cpu_total`\n            add_total (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                     }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L16"
    }
  },
  "health_logging": {
    "iosxe": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                               {\n                                   \"health_data\": {\n                                       \"num_of_logs\": 1,\n                                       \"logs\": [\n                                           {\n                                               \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                               \"decode\": \"<decode output>\" # Optional\n                                           }\n                                       ]\n                                   }\n                               }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L263"
    },
    "iosxr": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                                {\n                                    \"health_data\": {\n                                        \"num_of_logs\": 1,\n                                        \"logs\": [\n                                            {\n                                                \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                                \"decode\": \"<decode output>\", # Optional\n                                            }\n                                        ]\n                                    }\n                                }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L263"
    },
    "nxos": {
      "doc": "Get logging messages\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): show command. Default to 'show logging logfile'\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match.\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command. Default to None\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                                {\n                                    \"health_data\": {\n                                        \"num_of_logs\": 1,\n                                        \"logs\": [\n                                            {\n                                                \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                                \"decode\": \"<decode output>\" # Optional\n                                            }\n                                        ]\n                                    }\n                                }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L238"
    }
  },
  "health_memory": {
    "iosxe": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0012294695662956926,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0012294695662956926,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L123"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `dynamic`\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n                                    Deault to None\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0012294695662956926,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0012294695662956926,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L127"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. not used for NXOS\n            check_key_total (`str`): N/A. not used for NXOS\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"/opt/mtx/bin/grpc -i 2626 -I\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"/sbin/klogd -2 -x -c 1\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L123"
    }
  },
  "int_to_mask": {
    "com": {
      "doc": " Convert int to mask\n        Args:\n            mask_int ('int'): prefix length is convert to mask\n        Returns:\n            mask value\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "int_to_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L342"
    }
  },
  "ipv6_nd_raguard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 nd raguard policy to target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_nd_raguard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1108"
    }
  },
  "ipv6_nd_raguard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 nd raguard policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_nd_raguard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1140"
    }
  },
  "ipv6_source_guard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 source-guard policy to target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_source_guard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1172"
    }
  },
  "ipv6_source_guard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 source-guard policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_source_guard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1204"
    }
  },
  "is_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Verifies that import path selection of type is in running\n        config\n\n        Args:\n            device('obj'): device to use\n            vrf('str'): vrf name\n            selection_type('str'): import path selection type to verify\n            max_time('int'): max time to wait\n            check_interval('int'): how often to check        \n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L276"
    }
  },
  "is_bgp_neighbor_authentication_key_configured": {
    "junos": {
      "doc": "\n    Verify that all of bgp neighbors have Authentication key is configured\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbor_authentication_key_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L417"
    }
  },
  "is_bgp_neighbors_enabled": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is enabled and in either Idle or Active\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L882"
    }
  },
  "is_bgp_neighbors_established": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is established\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_established",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L910"
    }
  },
  "is_bgp_neighbors_shutdown": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is shutdown\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L854"
    }
  },
  "is_bgp_neighbors_state": {
    "iosxe": {
      "doc": " Verifies BGP neighbor is in state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            state('regex str'): regex to match\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L816"
    }
  },
  "is_bgp_running": {
    "junos": {
      "doc": "\n    Verify if bgp is running\n\n    Args:\n        device('obj'): device to use\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_running",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L381"
    }
  },
  "is_connected_via_vty": {
    "iosxe": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L363"
    },
    "iosxr": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/utils.py#L4"
    },
    "nxos": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#L148"
    }
  },
  "is_current_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check current boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_current_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L33"
    }
  },
  "is_eem_applet_configured": {
    "iosxe": {
      "doc": " Verify if EEM applet is configured in running config\n\n        Args:\n            device ('obj') : Device object\n            applet_name ('str') : Applet name\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "eem.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_eem_applet_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/verify.py#L7"
    }
  },
  "is_interface_changed_state_log": {
    "iosxe": {
      "doc": " Verify interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_changed_state_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L147"
    }
  },
  "is_interface_igp_sync_mpls_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L93"
    },
    "iosxr": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L54"
    }
  },
  "is_interface_igp_sync_ospf_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show ip ospf mpls ldp interface'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf      ('str')        : vrf name\n            address_family ('str')  : Interface address family (ipv4 or ipv6)\n            instance ('str')        : Instance number\n            area_address ('str')    : Area address\n            device                  : Device to be executed command\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Raises:\n            Exception\n\n        Returns\n            None\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_ospf_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L341"
    }
  },
  "is_interface_present_running_config": {
    "iosxe": {
      "doc": " Verify if interface is present in running-config\n        Args:\n            device ('obj')      : Device object\n            interface ('str')   : Interface\n\n        Raises:\n            SubCommandFailure\n            Exception\n        Returns\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_present_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L695"
    }
  },
  "is_interface_traffic_flowing_at_rate": {
    "iosxe": {
      "doc": " Verify if interface traffic is flowing at generated rate\n        Args:\n            interface_rate ('float'): Interface rate\n            tgn_tx_rate ('float'): Generated rate\n            tolerance ('float'): Margin of error in percentage \n\n        Returns:\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_traffic_flowing_at_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L741"
    }
  },
  "is_issu_in_state": {
    "iosxe": {
      "doc": " Verify if ISSU is in state for a specific slot\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot for which we need to check ISSU state\n            expected_state ('str'): Acceptable ISSU states are:\n                                        - loadversion\n                                        - runversion\n                                        - acceptversion\n                                        - commitversion\n            max_time ('int'): Max time checking issu state\n            interval ('int': Interval checking\n        Raise:\n            None\n        Return\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L55"
    }
  },
  "is_issu_rollback_timer_in_state": {
    "iosxe": {
      "doc": " Verify if issu rollback timer is in state\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot name\n            expected_state ('str'): Expected state ('active', 'inactive')\n            max_time ('int'): Max time checking \n            interval ('int'): Check interfal\n        Return:\n            True\n            False\n        Raise:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_rollback_timer_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L101"
    }
  },
  "is_issu_terminal_state_reached_on_slot": {
    "iosxe": {
      "doc": " Verify if a slot has reached\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot to check\n            max_time ('int'): Max time checking\n            interval ('int'): Interval of checking\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_terminal_state_reached_on_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L18"
    }
  },
  "is_l2vpn_storm_control_packet_count_increased": {
    "iosxe": {
      "doc": " Verify packet count has increased\n        \n            Args:\n                intial_discard_packets ('dict'): previous dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234234,\n                            'unicast': 123123\n                        }\n                current_discard_packets ('dict'): current dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234534,\n                            'unicast': 123523\n                        }\n            Returns:\n                True\n                False\n            Raises:\n                None\n        ",
      "module_name": "l2vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_l2vpn_storm_control_packet_count_increased",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L126"
    }
  },
  "is_logging_bfd_down_logged": {
    "iosxe": {
      "doc": " Verifies bfd is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_bfd_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L61"
    }
  },
  "is_logging_ospf_neighbor_down_logged": {
    "iosxe": {
      "doc": " Verifies ospf neighbor is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_ospf_neighbor_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L84"
    }
  },
  "is_logging_ospf_spf_logged": {
    "junos": {
      "doc": "\n    Verify SPF change log\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('int'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_ospf_spf_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L14"
    }
  },
  "is_logging_static_route_down_logged": {
    "iosxe": {
      "doc": " Verifies static route is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_static_route_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L108"
    }
  },
  "is_logging_string_matching_regex_logged": {
    "iosxe": {
      "doc": " Verifies string that matches regex is logged - ignoring logs from before passed timestamp\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n           regex ('str'): regex string to match\n\n        Returns:\n            timestamp of command if found else False ('str') \n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_string_matching_regex_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L17"
    }
  },
  "is_mpls_ldp_neighbor_in_state": {
    "iosxe": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L242"
    },
    "iosxr": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L159"
    }
  },
  "is_next_reload_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check next boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_next_reload_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L16"
    }
  },
  "is_ntp_clock_synchronized": {
    "iosxe": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address. \n                            If None, peer/reference clock is ignored.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L78"
    },
    "iosxr": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L71"
    }
  },
  "is_ospf_neighbor_established_on_interface": {
    "iosxe": {
      "doc": " Verify OSPF is established on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): Maximum wait time\n            check_interval (`int`): Check interval\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_neighbor_established_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L193"
    }
  },
  "is_ospf_neighbor_state_changed_log": {
    "iosxe": {
      "doc": " Verify ospf interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_neighbor_state_changed_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L225"
    }
  },
  "is_ospf_shutdown": {
    "iosxe": {
      "doc": " Verifies ospf is shutdown by verifying there are\n        no neighbors\n\n        Args:\n            device('obj'): device to use\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            interface ('str'): Interface name\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L243"
    }
  },
  "is_ospf_tilfa_enabled_in_sr": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in SR\n\n    Args:\n        device ('str'): Device object\n        interface ('str'): Interface name\n        process_id ('int'): Process id\n        area ('str'): Ospf area\n        neighbor_address ('str'): Neighbor address\n        max_time (int): Maximum wait time in seconds checking an ouput\n        check_interval (int): Wait time between iterations when looping\n        output ('dict'): Parsed output of command 'show ip ospf segment-routing protected-adjacencies'\n    Raises:\n        None\n    Returns:\n        True/False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_tilfa_enabled_in_sr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L952"
    }
  },
  "is_platform_slot_in_state": {
    "iosxe": {
      "doc": " Verify if slot is in state\n\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot number\n            state ('str'): State being checked\n            max_time ('int'): Max time checking\n            interval ('int'): Interval checking\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_platform_slot_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L20"
    }
  },
  "is_process_started": {
    "linux": {
      "doc": " Checks if a trex process is running right now.\n        Args:\n            name (str): Name of the process to search for\n        Raise:\n            None\n        Returns:\n            Running (bool): Whether or not the process is running\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_process_started",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L268"
    }
  },
  "is_push_present_in_route": {
    "junos": {
      "doc": "Check if Push is presnt in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_push_present_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L883"
    }
  },
  "is_redundancy_state_in_state": {
    "iosxe": {
      "doc": " Verify if redundancy state is in state:\n        Args:\n            device ('obj'): Device object\n            output ('dict'): Parsed output of show redundancy state\n            expected_state ('str'): Expected state\n            max_time ('int'): Max time in seconds to check redundancy state\n            check_interval ('int'): Interval in seconds between each check\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "redundancy.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_redundancy_state_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/verify.py#L16"
    }
  },
  "is_route_in_bgp_table": {
    "iosxe": {
      "doc": " Verify if route is in BGP table\n        Args:\n            device ('obj')          : Device object\n            address_family('str')   : Address family to be used in show command\n            default_rd('str')       : Route distinguisher from VRF list\n            default_vrf('str')      : Default VRF name\n            routes_dict ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_route_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1490"
    }
  },
  "is_router_bgp_configured_with_four_octet": {
    "iosxe": {
      "doc": " Verifies that router bgp has been enabled with four\n        octet capability and is in the established state\n\n        Args:\n            device('obj'): device to check\n            vrf('vrf'): vrf to check under\n            neighbor_address('str'): neighbor address to match\n            max_time('int'): maximum time to wait\n            check_interval('int'): how often to check\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_router_bgp_configured_with_four_octet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L228"
    }
  },
  "is_routing_repair_path_in_cef": {
    "iosxe": {
      "doc": " Verify 'repair path' is presente in express forwarding\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds retrieving and checking output\n            check_interval ('int')\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_repair_path_in_cef",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L17"
    }
  },
  "is_routing_repair_path_in_route_database": {
    "iosxe": {
      "doc": " Verify if 'repair path' is present in route database\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_repair_path_in_route_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L654"
    }
  },
  "is_routing_route_targets_present": {
    "iosxe": {
      "doc": " Verify route target is present\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): address family to check\n            routes ('list'): list of routes to compare\n                ex.) routes = ['192.168.1.1', '192.168.1.2']\n            ignore_routes ('list'): list of routes to ignore with type\n                ex.) ignore_routes = ['L', 'B', 'C']\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_route_targets_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L613"
    }
  },
  "is_snmp_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in snmp server\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_snmp_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L131"
    }
  },
  "is_syslog_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in Syslog server.\n        It needs a output from a tcpdump command\n\n        Args:                        \n            device ('obj'): Device object\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_syslog_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L312"
    }
  },
  "is_type_10_opaque_area_link_states_originated": {
    "iosxe": {
      "doc": " Verifies if Type 10 opaque area link states are originated\n        from command 'show ip ospf database opaque-area self-originate'\n\n        Args:\n            device (`obj`): Device to be executed command\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_type_10_opaque_area_link_states_originated",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L662"
    }
  },
  "is_version_image_installed": {
    "iosxe": {
      "doc": " Verify if image is installed on device\n        Args:\n            device ('str'): Device object\n            image ('str'): Image being verified\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "version.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_version_image_installed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/version/verify.py#L8"
    }
  },
  "issu_acceptversion": {
    "iosxe": {
      "doc": " Execute issu acceptversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu acceptversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_acceptversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L291"
    }
  },
  "issu_commitversion": {
    "iosxe": {
      "doc": " Execute issu commitversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu commitversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_commitversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L315"
    }
  },
  "issu_loadversion": {
    "iosxe": {
      "doc": " Execute issu loadversion command on device\n        Args:\n            device ('obj'): Device object\n            standby_slot ('int'): Standby slot number\n            disk ('str'): Disk name\n            image ('str'): Image name\n            timeout ('int'): Time out in seconds\n        Raise:\n            Exception: Failed to load version on device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_loadversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L233"
    }
  },
  "issu_runversion": {
    "iosxe": {
      "doc": " Execute issu runversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception Failed to reconnect to device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_runversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L263"
    }
  },
  "kill_processes": {
    "linux": {
      "doc": " Kills the processes with given PIDs \n        Args:\n            pids ('list'): List of PIDs\n            ex.) pids = [12, 15, 16]\n        Raise:\n            None\n        Returns:\n            Failed (list): List of pids that failed to be killed\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "kill_processes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L63"
    }
  },
  "l2vpn_xconnect_context": {
    "iosxe": {
      "doc": "configure L2VPN xconnect context\n        Args:\n        device (`obj`): Device \n        context_name (`str`): l2vpn cross connect name\n        pseudowire_member (`str`) : member pseudowire name \n        interface (`str`) : member interface name.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "l2vpn_xconnect_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1118"
    }
  },
  "launch_simulation": {
    "virl": {
      "doc": "launch simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            simulation_data (`str`): simulation data \n            connection_alias (`str`): connection_alias\n\n        Returns:\n            result: result of launching simulation\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "launch_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L12"
    }
  },
  "learn_process_pids": {
    "linux": {
      "doc": " Finds the PIDs of processes that match the search\n        Args:\n            search ('str'): The name of the processes to find\n        Raise:\n            None\n        Returns:\n            PIDs ('list'): [pid]\n            ex.) PIDs = ['123', '456']\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "learn_process_pids",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L43"
    }
  },
  "learn_routem_configs": {
    "linux": {
      "doc": " Gets the current running config on device\n        Args:\n            output_config ('bool'): Specifies whether the config\n            or path of the config is outputted \n        Raise:\n            None\n        Returns:\n            Config ('dict'): {pid: config}\n            ex.) Config = {'123': 'config'}\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "learn_routem_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L10"
    }
  },
  "load_dict_from_json_file": {
    "com": {
      "doc": " load python dictionary from a JSON file\n        Args:\n            filename (`string`): JSON file name\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.load_dict_from_json_file('merged_dict')\n        {\n            'a': {\n                'b': 1,\n            },\n            'c': {\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "load_dict_from_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2649"
    }
  },
  "load_jinja": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            device (`obj`): Device object\n            vrf_name (`str`): Vrf name to be used in configuration\n            bandwidth (`int`): In bps, bandwidth for traffic flow\n            packet_size (`int`): Config packet size\n            ref_packet_size (`int`): Refrenced packet size\n            time_interval (`float`): In seconds, used for calculating bc\n            ipp4_bps (`int`): In bps, bandwidth for IPP4 traffic\n            ipp2_bw_percent (`int`): In percents, bandwidth for IPP2 traffic\n            ipp0_bw_percent (`int`): In percents, bandwidth for IPP0 traffic\n            interface (`str`): Where to apply the configured policies\n\n        Returns:\n            out\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "load_jinja",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L479"
    }
  },
  "load_jinja_template": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            path (`str`): Path to file directory\n            file (`str`): File name\n            kwargs (`dict`): Key value pairs\n        Returns:\n            out (`str`): Rendered template\n        Raises:\n            TemplateNotFound\n    ",
      "module_name": "jinja.get",
      "package": "genie.libs.sdk.apis",
      "uid": "load_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L35"
    }
  },
  "mask_to_int": {
    "com": {
      "doc": " Convert mask to int\n        Args:\n            mask ('str'):  mask to int\n        Returns:\n            int value\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "mask_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L357"
    }
  },
  "modify_filename": {
    "com": {
      "doc": " Truncation is done such that protocol:/directory/image should not\n        exceed the limited characters.\n        This for older devices, where it does not allow netboot from rommon,\n        if image length is more than provided limit (63 characters by default).\n        Returns truncated image name, if protocol:/directory/image length\n        exceeds limit, else image return without any change\n        Args:\n            device\n            file ('str'): the file to be processed\n            directory ('str'): the directory where the image will be copied\n            protocol ('str'): the protocol used in the url\n            server ('str'): server address used in calculation, if not provided then it\n                            will take the longest server address from the testbed\n            append_hostname ('bool'): option to append hostname to the end of the file\n            check_image_length ('bool'): option to check the name length exceeds the limit\n            limit ('int'): character limit of the url, default 63\n            unique_file_name ('bool'): append a six digit random number to the end of\n                                        file name to make it unique\n            unique_number ('int'): provide a number to be used with unique_file_name\n                                    instead of a random one\n            new_name ('str'): replace original file name with new_name\n\n        Raises:\n            ValueError\n        Returns:\n            truncated image name\n            ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "modify_filename",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1218"
    }
  },
  "netmask_to_bits": {
    "com": {
      "doc": " Convert netmask to bits\n        Args:\n            net_mask ('str'): Net mask IP address\n            ex.) net_mask = '255.255.255.255'\n        Raise:\n            None\n        Returns:\n            Net mask bits\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "netmask_to_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L814"
    }
  },
  "number_to_string": {
    "com": {
      "doc": " Converts from number(integer|float) to number(string)\n        Args:\n            number (`int|float`): number (integer|float)\n        Raise:\n            Exception\n        Returns:\n            ret_str ('str'): number (string)\n\n        Example:\n\n        >>> dev.api.number_to_string(1)\n        '1'\n\n        >>> dev.api.number_to_string(1.1)\n        '1.1'\n\n        >>> dev.api.number_to_string('1')\n        '1'\n\n        >>> dev.api.number_to_string('1.1')\n        '1.1'\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "number_to_string",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1603"
    }
  },
  "nxapi_method_nxapi_cli": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - output_schema, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json_rpc, json, xml\n\n            command_type (str): Type of command:\n                - cli, cli_ascii, cli_array, cli_show, cli_show_ascii,\n                  cli_conf, bash\n\n            # Optional depending on above arguments\n            error_action (str): Action to take if error:\n                - stop_on_error, continue_on_error, rollback_on_error\n            chunk (bool): True to chunk output else False\n            sid (str): SID from previous chunk to get the next chunk\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_nxapi_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L148"
    }
  },
  "nxapi_method_nxapi_rest": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-REST (DME)\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - convert, convert-with-dn, convert-for-replace, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            # For convert action\n            input_type (str): Specify input type:\n                - cli, model\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n\n            # Optional\n            retries (int): number of retries (default: 3)\n\n            # Optional\n            retry_wait (int): number of seconds to wait before retrying\n                              (default: 10)\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_nxapi_rest",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L9"
    }
  },
  "nxapi_method_restconf": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - send, convert\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json, xml\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_restconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L239"
    }
  },
  "parse_tacacs_packet": {
    "iosxe": {
      "doc": " Parsing tacacs pcap file data\n        Args:\n            decrypted_pcap_file: txt file having tacacs packet data\n        Returns:\n            tacacs_json_dict: dict contains tacacs data as\n            json format\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "parse_tacacs_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L833"
    }
  },
  "perform_issu": {
    "iosxe": {
      "doc": " Execute ISSU on device\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name on disk\n            disk ('str'): Disk where is located image\n            timeout ('int'): Timeout in second for each section\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "perform_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L115"
    }
  },
  "perform_ssh": {
    "iosxe": {
      "doc": "\n    Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            testbed (`str`): Testbed object\n            enable_pass (`str`): Enable password\n            timeout (int): Optional timeout value\n                           default value 60\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "perform_ssh",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1088"
    }
  },
  "ping": {
    "ios": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): type of service value\n        dscp (`str`): DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L543"
    },
    "iosxe": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): type of service value\n        dscp (`str`): DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L553"
    },
    "iosxr": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): Not supported. type of service value\n        dscp (`str`): Not supported. DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L171"
    },
    "nxos": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): Not supported. type of service value\n        dscp (`str`): Not supported. DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): Not supported. validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L144"
    }
  },
  "ping_interface_success_rate": {
    "ios": {
      "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping_interface_success_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L237"
    },
    "iosxe": {
      "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping_interface_success_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L243"
    }
  },
  "pkill_process": {
    "linux": {
      "doc": " pkills the process with the given name \n        Args:\n            name ('str'): Name of the running process\n            ex.) name = 't-rex'\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "pkill_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L83"
    }
  },
  "prepare_issu": {
    "iosxe": {
      "doc": " Prepare image and check device before starting issu process\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name\n            path ('str'): Path on dsetr\n            overwrite ('bool'): Flag to overwrite existing file\n            protocol ('str'): Protocol to be used on copying image to device\n            address ('str'): Address of server from where image will be copied.\n            disks ('list'): List of disks where image will be copied\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n        Raises:\n            Exception: Failed preparing ISSU image\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "prepare_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L35"
    }
  },
  "print_header": {
    "com": {
      "doc": null,
      "module_name": "api_unittest_generator",
      "package": "genie.libs.sdk.apis",
      "uid": "print_header",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/api_unittest_generator.py#L40"
    }
  },
  "question_mark": {
    "com": {
      "doc": " Verify if ? works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "question_mark",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L111"
    }
  },
  "question_mark_retrieve": {
    "com": {
      "doc": " Retrieve output after pressing ? on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            output (`str`): Output\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "question_mark_retrieve",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L130"
    }
  },
  "quick_configure_by_jinja2": {
    "junos": {
      "doc": "Configure device with Jinja2 using a quick method\n\n    Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "quick_configure_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L358"
    }
  },
  "read_data_from_device": {
    "linux": {
      "doc": " Reads text data from device and returns it as output\n        Args:\n            location ('str'): Path to the text file\n        Raises:\n            FileNotFoundError: File Does not Exist\n        Returns:\n            Data ('str'): Text data read from the device\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "read_data_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L175"
    }
  },
  "reconnect_device": {
    "com": {
      "doc": " Reconnect device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds trying to connect to device\n            interval ('int'): Interval in seconds of checking connection\n            sleep_disconnect ('int'): Waiting time after device disconnection\n        Raise:\n            ConnectionError\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "reconnect_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L769"
    }
  },
  "reconnect_device_with_new_credentials": {
    "com": {
      "doc": " Reconnect device\n    Args:\n        device ('obj'): Device object\n        max_time ('int'): Max time in seconds trying to connect to device\n        interval ('int'): Interval in seconds of checking connection\n        sleep_disconnect ('int'): Waiting time after device disconnection\n    Raise:\n        ConnectionError\n    Returns:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "reconnect_device_with_new_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L703"
    }
  },
  "redistribute_bgp_metric_type_under_ospf": {
    "iosxe": {
      "doc": " redistributes bgp metric type under ospf \n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            vrf ('str'): vrf to be configured\n            metric_type ('str'): metricy type used\n            tag('str'): tag used in metric_type\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_bgp_metric_type_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L414"
    }
  },
  "redistribute_bgp_under_ospf": {
    "iosxe": {
      "doc": "Redistribute bgp prefixes under ospf \n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            vrf (str): ospf with vrf \n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_bgp_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L101"
    }
  },
  "redistribute_route_map_under_ospf": {
    "iosxe": {
      "doc": " configure route-map to redistribute routes between dynamic routing protocols. \n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n            redistributed_ospf (`int`): ospf to be redistributed\n            route_map_name (`str`): route map name\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_route_map_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L739"
    }
  },
  "reload_issu_slot": {
    "iosxe": {
      "doc": " Reload slot on device\n        Args:\n            device ('obj'): Device object\n            slot ('str'):  Slot to be reloaded\n            wait_time ('int'): Time to wait in seconds after slot reload\n        Raise:\n            Exception\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "reload_issu_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L343"
    }
  },
  "remove_acl_from_interface": {
    "iosxe": {
      "doc": " Remove acl from an interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n            inbound (boolean, optional): True for inbound acl, False for outbound acl. Default value is True\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_acl_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L307"
    }
  },
  "remove_arp_timeout": {
    "iosxe": {
      "doc": " Remove arp timeout configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L67"
    }
  },
  "remove_bgp_configuration": {
    "iosxe": {
      "doc": " Remove bgp configuration\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_bgp_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L759"
    }
  },
  "remove_channel_group_from_interface": {
    "iosxe": {
      "doc": " Remove channel group from an Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the channel group command is to be applied\n            channel_group (`str`): Channel group number\n            mode (`str`): Channel group mode\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_channel_group_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2137"
    }
  },
  "remove_default_ipv4_sgacl": {
    "iosxe": {
      "doc": " Remove a default static SGACL(ipv4)\n        Args:\n            device ('obj'): device to use\n             sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove default static SGACL(ipv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_default_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L388"
    }
  },
  "remove_device_tracking_policy": {
    "iosxe": {
      "doc": " Remove device-tracking policy\n        Args:\n            device ('obj'): device to use\n            client_policy_name('str'): name of a policy to be removed\n            server_policy_name('str', optional): name of another policy to be removed. Default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing device tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L703"
    }
  },
  "remove_dhcp_pool": {
    "iosxe": {
      "doc": " Remove DHCP pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L49"
    }
  },
  "remove_dhcp_pool_ipv6": {
    "iosxe": {
      "doc": " Remove DHCP IPv6 pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 DHCP pool\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_pool_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L45"
    }
  },
  "remove_dhcp_snooping_binding": {
    "iosxe": {
      "doc": " Remove DHCP snooping binding\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to remove binding\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing dhcp snooping binding\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_snooping_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L176"
    }
  },
  "remove_dhcpv6_guard_policy": {
    "iosxe": {
      "doc": " Configure DHCPv6 Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing DHCPv6 guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcpv6_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L115"
    }
  },
  "remove_disable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Removing disable DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove disable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_disable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L141"
    }
  },
  "remove_eem_applet": {
    "iosxe": {
      "doc": " Remove EEM applet from running config\n\n        Args:\n            device ('obj'): Device object\n            applet_name ('str'): Applet name\n        Raises:\n            SubCommandFailure\n        Returns:\n            None\n    ",
      "module_name": "eem.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_eem_applet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/configure.py#L14"
    }
  },
  "remove_enable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Removing enable DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove enable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_enable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L96"
    }
  },
  "remove_explicit_path": {
    "iosxe": {
      "doc": "Remove explicit path configuration, created for tunnel\n        Args:\n\t    device (`obj`): Device object\n\t    explicit_paths (`list`): List of explicit paths to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_explicit_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1027"
    }
  },
  "remove_interface_carrier_delay": {
    "iosxe": {
      "doc": " Remove interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L408"
    }
  },
  "remove_interface_configured_service_policy": {
    "iosxe": {
      "doc": " Remove any service policy configured under interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to remove service policy from\n            out (`dict`): Show run interface <interface> output\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_configured_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L720"
    }
  },
  "remove_interface_ip": {
    "iosxe": {
      "doc": " Remove ip on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1827"
    }
  },
  "remove_interface_negotiation": {
    "iosxe": {
      "doc": " Remove negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L113"
    }
  },
  "remove_interface_ospf_bfd": {
    "iosxe": {
      "doc": " Remove interface ospf bfd on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L432"
    }
  },
  "remove_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Remove IPv6 DHCP Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 DHCP guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L137"
    }
  },
  "remove_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Remove IPv6 ND Suppress Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 ND suppress policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L235"
    }
  },
  "remove_ipv6_raguard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 RA Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 RA guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L84"
    }
  },
  "remove_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 Source Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 Source Guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1017"
    }
  },
  "remove_l2vpn_xconnect_context": {
    "iosxe": {
      "doc": "unconfigure l2vpn xconnect context\n        Args:\n\t    device (`obj`): Device \n\t    context_name (`str`): l2vpn cross connect name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_l2vpn_xconnect_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1144"
    }
  },
  "remove_ldra_interface": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra on interface\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L301"
    }
  },
  "remove_ldra_policy_vlan": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra policy on vlan\n        Args:\n            device ('obj'): device to use\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra policy on vlan\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L240"
    }
  },
  "remove_ldra_remote_id": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            remote_id ('str'): remote-id for ldra\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra remote-id\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_remote_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L188"
    }
  },
  "remove_mpls_lable_protocol_from_device": {
    "iosxe": {
      "doc": " Remove mpls label protocol from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_lable_protocol_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L339"
    }
  },
  "remove_mpls_ldp_explicit_from_device": {
    "iosxe": {
      "doc": " Remove mpls ldp explicit from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_explicit_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L536"
    }
  },
  "remove_mpls_ldp_from_device": {
    "iosxe": {
      "doc": " Remove ldp from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L82"
    }
  },
  "remove_mpls_ldp_from_interface": {
    "iosxe": {
      "doc": " Remove ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L103"
    },
    "junos": {
      "doc": " Remove ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L33"
    }
  },
  "remove_mpls_ldp_router_id_from_device": {
    "iosxe": {
      "doc": " Remove mpls ldp router id from device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_router_id_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L127"
    }
  },
  "remove_ntp_server": {
    "iosxe": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L50"
    },
    "iosxr": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L33"
    }
  },
  "remove_ntp_system_peer": {
    "iosxe": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L12"
    },
    "iosxr": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L12"
    }
  },
  "remove_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": " Remove max-metric from running-config under ospf\n\n        Args:\n            device (`obj`): Device object \n            ospf_process_id (`str`): Router OSPF id\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L162"
    }
  },
  "remove_ospf_passive_interface": {
    "iosxe": {
      "doc": "Remove passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L253"
    }
  },
  "remove_port_channel_interface": {
    "iosxe": {
      "doc": " Remove port channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel to be removed\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_port_channel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2169"
    }
  },
  "remove_routing_ip_route": {
    "iosxe": {
      "doc": " Remove ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L67"
    }
  },
  "remove_running_config": {
    "ios": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L109"
    },
    "iosxe": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L109"
    }
  },
  "remove_static_ipv4_sgacl": {
    "iosxe": {
      "doc": " Remove static SGACL(Ipv4)\n        Args:\n            device ('obj'): device to use\n            src_sgt (`str`): Source Group Tag\n            dest_sgt (`str`): Destination Group Tag\n            sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove static SGACL(IPv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_static_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L366"
    }
  },
  "remove_subscriber": {
    "iosxe": {
      "doc": " Remove subscriber\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): BGP AS\n            bridge_id ('str'): Bridge Id\n            bridge_interface ('str'): Bridge interface\n            vpn_id ('str'): VPN id\n            vpn_interface ('str'): VPN interface\n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "subscriber.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/subscriber/configure.py#L12"
    }
  },
  "remove_tacacs_server": {
    "ios": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L135"
    },
    "iosxe": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L135"
    }
  },
  "remove_vfi_context": {
    "iosxe": {
      "doc": " Config autodiscovery bgp signaling ldp template\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1563"
    }
  },
  "remove_virtual_interface": {
    "iosxe": {
      "doc": " Remove virtual interface created\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_virtual_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1271"
    }
  },
  "repeat_command_save_output": {
    "com": {
      "doc": "\n        Execute the {command} on the device and store the output to file, can\n        repeat the same command with {command_count} and a sleep interval with\n        {command_interval}.\n\n        Args:\n            command ('str'): Command to run on device\n            command_interval ('int'): Waiting between command calls\n            command_count ('int'): Number of times to call command\n            report_file ('str'): File name to store in archive\n\n        Raises:\n            Parser and python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "repeat_command_save_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2014"
    }
  },
  "request_chassis_routing_engine_master_switch": {
    "junos": {
      "doc": "Run request chassis routing-engine master switch\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "package": "genie.libs.sdk.apis",
      "uid": "request_chassis_routing_engine_master_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L11"
    }
  },
  "request_login_other_re": {
    "junos": {
      "doc": " Execute 'request routing-engine login other-routing-engine'\n        \n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            bool\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "request_login_other_re",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L337"
    }
  },
  "request_routing_engine_login_other_routing_engine": {
    "junos": {
      "doc": "Run request routing-engine login other-routing-engine\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "package": "genie.libs.sdk.apis",
      "uid": "request_routing_engine_login_other_routing_engine",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L27"
    }
  },
  "reset_interface": {
    "iosxe": {
      "doc": " Reset interface configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "reset_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L32"
    }
  },
  "restart_routing": {
    "junos": {
      "doc": "API for restarting routing\n\n    Args:\n        device (obj): Restarts routing process\n\n    Returns:\n        None\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restart_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/configure.py#L11"
    }
  },
  "restore_running_config": {
    "ios": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L75"
    },
    "iosxe": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L75"
    },
    "iosxr": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/configure.py#L5"
    },
    "nxos": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/configure.py#L6"
    }
  },
  "revert_vm_snapshot": {
    "linux": {
      "doc": " Revert VM back to provided snapshot\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('int'): The id of the VM on the ESXi server\n            vm_snapshot_id ('int'): The id of the required snapshot\n            snapshot_name ('str'): Name of the snapshot to be reverted to,\n                                    Default is golden         \n        Raises:\n            N/A\n        Retuns:\n            vm_recovery_status ('tuple'): String message indicating the recovery \n            status of the each VM.\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "revert_vm_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L137"
    }
  },
  "save_dict_to_json_file": {
    "com": {
      "doc": " merge a list of Python dictionaries into one dictionary\n        and save the dictionary to a JSON file\n        If same key exists in data(dicts) which will be merged,\n        the key will be overridden.\n\n        Args:\n            data (`list`): list of dictionaries\n            filename (`string`): filename to save\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.save_dict_to_file(data=[dict1, dict2], 'merged_dict')\n        {\n            'a': {        # came from `dict1`\n                'b': 1,\n            },\n            'c': {        # came from `dict2`\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_dict_to_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2606"
    }
  },
  "save_info_to_file": {
    "com": {
      "doc": " save information to a file in runtime directory\n        Args:\n            filename ('str'): Log file name\n            parameters ('list'): Parameters list\n            header ('list'): Header list\n            separator ('str'): Separator for the parameters\n\n            example for traffic loss:\n                parameters = ['TC1', 'PE1-PE2-1000pps', '0.0', 'PASSED']\n                header = ['uid', 'flows', 'outage', 'result']\n                save_info_to_file('logs.txt', parameters, header=header)\n\n                - in logs.txt\n                uid,flows,outage,result\n                TC1,PE1-PE2-1000pps,0.0,PASSED\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_info_to_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1543"
    }
  },
  "save_running_config": {
    "ios": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L22"
    },
    "iosxe": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L22"
    }
  },
  "save_running_config_configuration": {
    "ios": {
      "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L300"
    },
    "iosxe": {
      "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L306"
    }
  },
  "scale_accesslist_config": {
    "iosxe": {
      "doc": " Configure the huge(more than 1k static acl) extended acls\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n            acl_list ('str') : acl_lists\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "scale_accesslist_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L189"
    }
  },
  "scp": {
    "ios": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L333"
    },
    "iosxe": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L339"
    },
    "iosxr": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L98"
    },
    "linux": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`): specify connection to get ip\n                                Default to None\n            creds (`str`): Name of the credentials for the remote device\n                           Defaults to \"default\"\n            timeout (`timeout`, optional): timeout for scp in seconds. Defaults to None\n        Returns:\n            result (`bool`): True if scp successfully done\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L126"
    },
    "nxos": {
      "doc": " copy files from local device to remote device via scp\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            return_filename (`bool`): if True, will return list of copied files\n        Returns:\n            result (`bool` or `tuple`): True if scp successfully done \n                                        if return_filename is True, return list of copied filename\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L20"
    }
  },
  "search_running_config": {
    "ios": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L18"
    },
    "iosxe": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L16"
    }
  },
  "send_email": {
    "com": {
      "doc": "\n        Send an email from execution server where pyATS runs.\n        Plain or HTML email can be sent.\n\n        Args:\n            from_email (list/str): list or string-list of addresses to be used\n                                   in the generated email's \"From:\" field.\n            to_email(list/str): list or string-list of addresses to be used\n                                in the generated email's \"To:\" field.\n            subject (str): alternate subject for the report email\n            body (string): message body in the email\n            attachments (list): list of attachments paths\n            html_email (bool): flag to enable alternative email format\n            html_body (string): html content\n\n        Raises:\n            python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "send_email",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2061"
    }
  },
  "set_clock": {
    "ios": {
      "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "set_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L316"
    },
    "iosxe": {
      "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "set_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L322"
    }
  },
  "set_filter_packet_capture_inject": {
    "iosxe": {
      "doc": " Set filter for packet capture inject\n        Args:\n            device (`obj`): Device object\n            filter (`str`): Filter to be set\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed setting filter for packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "set_filter_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L41"
    }
  },
  "set_system_mtu": {
    "iosxe": {
      "doc": " Sets mtu value on device\n\n        Args:\n            device ('str'): Device str\n            mtu_value ('str'): MTU value to be set\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "set_system_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L270"
    }
  },
  "set_traffic_transmit_rate": {
    "iosxe": {
      "doc": "Set stream transmit rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Failed to set transmit rate\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "set_traffic_transmit_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L17"
    }
  },
  "shut_interface": {
    "iosxe": {
      "doc": " Shut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L146"
    },
    "junos": {
      "doc": " Shut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L49"
    }
  },
  "shut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Shut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L260"
    }
  },
  "shutdown_interface": {
    "iosxe": {
      "doc": " Shutdown a bundled Interface\n\n        Args:\n            device (`obj`): Device object\n            member (`str`): Bundled interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shutdown_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1009"
    }
  },
  "slugify": {
    "com": {
      "doc": " update all special characters in string to underscore\n        Args:\n            word (`str`): string which you want to convert special characters in the word to underscore\n        Raise:\n            Exception\n        Returns:\n            word\n\n        Example:\n\n        >>> dev.api.slugify('Ethernet1/1.100')\n        Ethernet1_1_100\n\n        >>> dev.api.slugify('2020-05-26_14:15:36.555')\n        2020_05_26_14_15_36_555\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "slugify",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1993"
    }
  },
  "socat_relay": {
    "linux": {
      "doc": " Setup UDP/TCP relay using 'socat' command.\n\n    Args:\n        device (obj): Device object (optional)\n        remote_ip (str): remote IP address\n        remote_port (str): remote port\n        protocol (str): portocol (default: TCP4)\n\n    Returns:\n        proxy_port (int): Proxy port number or False if not able to setup relay\n    ",
      "module_name": "socat.relay",
      "package": "genie.libs.sdk.apis",
      "uid": "socat_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/socat/relay.py#L9"
    }
  },
  "source_configured_template": {
    "iosxe": {
      "doc": "Source template config\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            template (`str`): Built-in/User defined template Name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to source a configured template\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "source_configured_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L14"
    }
  },
  "start_packet_capture": {
    "ios": {
      "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L66"
    },
    "iosxe": {
      "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n            direction ('str'): direction of the capture pkts. Default is both direction\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L71"
    }
  },
  "start_packet_capture_inject": {
    "iosxe": {
      "doc": " Start packet capture inject\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed start packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L63"
    }
  },
  "start_perf": {
    "nxos": {
      "doc": " start perf in shell mode\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to set for Perf\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n        Returns:\n            ret_dict (`dict`): Dictionary\n            \n        example:\n        ret_dict = {\n            `service_pid`: '8086',\n            `perf_pid`: '15026',\n        }\n    ",
      "module_name": "flamegraph.flamegraph",
      "package": "genie.libs.sdk.apis",
      "uid": "start_perf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L15"
    }
  },
  "start_routem_process": {
    "linux": {
      "doc": " Starts the routem executable with the provided config\n        Args:\n            config ('str'): Path to config file or raw config data\n            routem_executable ('str'): Path to routem executable file \n            config_save_location ('str'): Path of folder of where to save the config\n                file if raw config data is passed into the first argument\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_routem_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L194"
    }
  },
  "start_trex_process": {
    "linux": {
      "doc": " Starts a trex process on the device\n        Args:\n            location (str): folder location of where the trex executable is at\n        Raise:\n            FileNotFoundError\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_trex_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L250"
    }
  },
  "stop_packet_capture": {
    "ios": {
      "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L122"
    },
    "iosxe": {
      "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L128"
    }
  },
  "stop_packet_capture_inject": {
    "iosxe": {
      "doc": " Stop packet capture inject\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed stop packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L83"
    }
  },
  "stop_perf_and_generate_svg": {
    "nxos": {
      "doc": " stop perf in shell mode and then copy to remote and generate svg file\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            perf_pid (`str`): Perf process id\n            perf_filename (`str`): Perf filename\n            perf_save_local_bash (`str`): Location to save perf file in shell\n            perf_save_local_nxos (`str`): Location to save perf file in NXOS\n            vrf: VRF for copying file to remote server\n            perf_save_remote_user (`str`): userid on remote server\n            perf_save_remote_pass (`str`): password of userid on remote server\n            perf_save_remote_server (`str`): remote server name in testbed yaml\n            perf_save_remote_via (`via`): specify connection to get ip\n                                          if not specified, use active connection one\n            svg_filename (`str`): svg filename\n            svg_archive_location (`str`): svg archive location\n            remote_flamegraph_location (`str`): flamegraph location on remote server\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n\n        Returns:\n            svg_location (`str`): location of svg file\n\n    ",
      "module_name": "flamegraph.flamegraph",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_perf_and_generate_svg",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L55"
    }
  },
  "stop_simulation": {
    "virl": {
      "doc": "Stop simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n\n            result: result of GET command\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L45"
    }
  },
  "string_to_number": {
    "com": {
      "doc": " Converts from number(string) to number(integer)\n        Args:\n            word (`str`): number (string)\n        Raise:\n            Exception\n        Returns:\n            ret_num ('int|float'): number (integer|float)\n\n        Example:\n\n        >>> dev.api.string_to_number('1')\n        1\n\n        >>> dev.api.string_to_number('1.1')\n        1.1\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "string_to_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1573"
    }
  },
  "switch_vm_power": {
    "linux": {
      "doc": " Switch power of VM On/Off\n        Args:\n            vm_id ('str'): The id of the VM\n            state ('str'): Power state to be switched to, eg. 'on' / 'off'\n        Raises:\n            N/A\n        Returns:\n            out ('str'): \n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "switch_vm_power",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L12"
    }
  },
  "tabber": {
    "com": {
      "doc": " Verify if tab works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "tabber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L74"
    }
  },
  "time_to_int": {
    "com": {
      "doc": " Cast time string to int in second\n\n        Args:\n            time(`str`): time string\n        Returns:\n            out(`int`): time in second\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "time_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L170"
    }
  },
  "tokens": [
    "aci",
    "aireos",
    "apic",
    "asa",
    "asr9k",
    "cat9500",
    "cat9k",
    "com",
    "ios",
    "iosxe",
    "iosxr",
    "junos",
    "linux",
    "mds",
    "n3k",
    "n5k",
    "n7k",
    "n9k",
    "ncs5k",
    "nxos",
    "virl"
  ],
  "topic_search": {
    "linux": {
      "doc": " Function to get the cdets from the result_file using topic_search api \n        Args:\n            result_file (decoded text file)\n\n        timeout (`int`):\n            timeout to search topic. Default to 300 secs\n\n        Returns:\n            output (CDETS)\n    ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "topic_search",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L62"
    }
  },
  "trex_copy_json": {
    "linux": {
      "doc": " Copies trex json config data to the trex folder\n        Args:\n            json (str): the json config in text form or path to json file on\n                local machine\n            destination (str): folder of where to put trex-config.json in\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "trex_copy_json",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L223"
    }
  },
  "trex_save_configuration": {
    "linux": {
      "doc": " Save configuration of the currently running Trex instance using its API\n        Args:\n            None\n        Raise:\n            FileNotFoundError\n        Returns:\n            str\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "trex_save_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L95"
    }
  },
  "unconfig_device_tracking_policy": {
    "iosxe": {
      "doc": " Remove specified options for device-tracking policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains any of the following keys:\n                    cache_guard ('bool', optional)\n                    data_glean ('bool', optional)\n                    destination_glean ('bool', optional)\n                    device_role ('bool', optional)\n                    distribution_switch ('bool', optional)\n                    limit_address_count ('bool', optional)\n                    origin ('bool', optional)\n                    prefix_glean ('bool', optional)\n                    protocol ('dict', optional)\n                        name ('bool')\n                    tracking ('bool', optional)\n                    trusted_port ('bool', optional)\n                    vpc ('int', optional)\n                ex.)\n                    [\n                        {\n                            \"cache_guard\": True,\n                            \"data_glean\": True,\n                            \"destination_glean\": True,\n                            \"device_role\": True,\n                            \"distribution-switch\": True,\n                            \"limit_address_count\": True,\n                            \"origin\": True,\n                            \"prefix_glean\": True,\n                            \"protocol\": {\n                                \"arp\": True,\n                                \"dhcp4\": True\n                            },\n                            \"security_level\": True,\n                            \"tracking\": True,\n                            \"trusted_port\": True,\n                            \"vpc\": 10\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove device-track policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L612"
    }
  },
  "unconfig_extended_acl": {
    "iosxe": {
      "doc": " Unconfigure the extended acls\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L174"
    }
  },
  "unconfig_flow_exporter": {
    "iosxe": {
      "doc": " Unconfigures Flow Exporter on Device\n\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_flow_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L48"
    }
  },
  "unconfig_interface_mtu": {
    "iosxe": {
      "doc": " Remove MTU config from interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L490"
    }
  },
  "unconfig_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Remove specified options for ipv6 nd raguard policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    device_role ('bool', optional)\n                    hop_limit ('dict', optional)\n                        max ('bool')\n                        min ('bool')\n                    managed_config_flag ('bool', optional)\n                    match ('dict', optional)\n                        ipv6 ('bool')\n                        ra ('bool')\n                    other_config_flag ('bool', optional)\n                    router_preference ('bool', optional)\n                    trusted_port ('bool', optional)\n                ex.)\n                    [\n                        {\n                            \"device_role\": True,\n                            \"hop_limit\": {\n                                \"max\": True,\n                                \"min\": True\n                            },\n                            \"managed_config_flag\": True,\n                            \"match\": {\n                                \"ipv6\": True,\n                                \"ra\": True\n                            },\n                            \"other_config_flag\": True,\n                            \"router_preference\": True,\n                            \"trusted_port\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 nd raguard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L827"
    }
  },
  "unconfig_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Remove specified options for ipv6 source-guard policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    deny ('bool', optional)\n                    permit ('bool', optional)\n                    trusted ('bool', optional)\n                    validate ('dict', optional)\n                        source ('bool')\n                ex.)\n                    [\n                        {\n                            \"deny\": True,\n                            \"permit\": True,\n                            \"trusted\": True,\n                            \"validate\": {\n                                \"address\": True,\n                                \"prefix\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 source-guard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L959"
    }
  },
  "unconfig_mac_aging_time": {
    "iosxe": {
      "doc": " Unconfig mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L43"
    }
  },
  "unconfig_mac_learning": {
    "iosxe": {
      "doc": " Unconfig mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L96"
    }
  },
  "unconfig_macsec_keychain_on_device": {
    "iosxe": {
      "doc": " Unconfigures macsec key chain on device\n\n        Args:\n            device ('obj'): device to use\n            keychain_name ('str'): keychain name to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_macsec_keychain_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L129"
    }
  },
  "unconfig_macsec_network_link_on_interface": {
    "iosxe": {
      "doc": " Un configures macsec network-link on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_macsec_network_link_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L220"
    }
  },
  "unconfig_mdns_sd_service_peer": {
    "iosxe": {
      "doc": " UNConfig MDNS_SD_SERVICE PEER\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan value\n            ip_addr ('str'): ipv4,ipv6 address\n            response_timer ('int'): active response timer\n            timer ('int'): Timer value\n            count ('int'): Count value\n            value ('int'): rate limit value\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mdns_sd_service_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L311"
    }
  },
  "unconfig_mka_policy_xpn": {
    "iosxe": {
      "doc": " Unconfigures mka policy xpn on device\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mka_policy_xpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L293"
    }
  },
  "unconfig_pseudowire_class": {
    "iosxe": {
      "doc": " unconfigure pseudowire class\n\n        Args:\n            device (`obj`): Device object\n            pw_class ('str'): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_pseudowire_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L706"
    }
  },
  "unconfig_standard_acl_for_ip_pim": {
    "iosxe": {
      "doc": " Configures a standard IP access list.\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_standard_acl_for_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L243"
    }
  },
  "unconfig_vlan": {
    "iosxe": {
      "doc": " vlan on Interface or Device configuration removal\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L73"
    }
  },
  "unconfig_xconnect_on_interface": {
    "iosxe": {
      "doc": " unconfigure xconnect neighbor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            neighbor (`str`): Neighbor to be configured on xconnect\n            vcid (`str`): Vcid to be configured through xconnect\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L282"
    }
  },
  "unconfigure_aaa_default_dot1x_methods": {
    "iosxe": {
      "doc": " configure aaa default dot1x methods\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_default_dot1x_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L530"
    }
  },
  "unconfigure_aaa_login_method_none": {
    "iosxe": {
      "doc": " This configure will enable login method none that is applicable for line and vty\n        from getting locked for password \n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_login_method_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L579"
    }
  },
  "unconfigure_access_session_monitor": {
    "iosxe": {
      "doc": " Enable access-session  monitor\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable access-session monitor\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_access_session_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L431"
    }
  },
  "unconfigure_access_session_sticky": {
    "iosxe": {
      "doc": " configure interface-template sticky timer\n        Args:\n            device ('obj'): device to use\n            timer (int): <1-65535>  Enter a value between 1 and 65535\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure interface-template sticky timer\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_access_session_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L450"
    }
  },
  "unconfigure_ace": {
    "iosxe": {
      "doc": " Unconfigure Access-list Entry (ACE) from Access-list\n\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            protocol ('str'): protocol\n            src_ip ('str'): source start ip\n            src_wildcard ('str'): source wildcard\n            dst_ip ('str'): destination start ip\n            dst_wildcard ('str'): destination wildcard\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            sequence_num ('str',optional): specific sequence number, default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L242"
    }
  },
  "unconfigure_acl": {
    "iosxe": {
      "doc": " unconfigure Access-list\n\n        Args:\n            device (`obj`): Device object\n            acl_name (`str`): Access-list name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L213"
    }
  },
  "unconfigure_any_radius_server": {
    "iosxe": {
      "doc": " Unconfigure radius server on device\n    Args:\n        device (`obj`): Device object\n        server_name (`str`): Radius server name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_any_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L413"
    }
  },
  "unconfigure_auth_method": {
    "iosxe": {
      "doc": "unconfigure legacy cli \n    authentication method mab/dot1x pae authenticator\n    Args:\n        device (`obj`): Device object\n        value (`str`): mab/dot1x\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_auth_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L860"
    }
  },
  "unconfigure_authentication_host_mode": {
    "iosxe": {
      "doc": "UnConfigure legacy cli authentication host-mode multi-auth/multi-domain/multi-host/single-host\n    Args:\n        device (`obj`): Device object\n        mode (`str`): Host mode\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_host_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L565"
    }
  },
  "unconfigure_authentication_order": {
    "iosxe": {
      "doc": "UnConfigure legacy cli authentication order dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        order (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_order",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L616"
    }
  },
  "unconfigure_authentication_periodic": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication periodic\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_periodic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L764"
    }
  },
  "unconfigure_authentication_port_control": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication port-control auto/force-authorized/force-unauthorized\n    Args:\n        device (`obj`): Device object\n        control (`str`): auto/force-authorized/force-unauthorized\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_port_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L713"
    }
  },
  "unconfigure_authentication_priority": {
    "iosxe": {
      "doc": "Unconfigure legacy cli authentication priority dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        priority (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L660"
    }
  },
  "unconfigure_authentication_timer_reauth": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication timer reauthenticate value/server\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_timer_reauth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L809"
    }
  },
  "unconfigure_bfd_on_interface": {
    "iosxe": {
      "doc": " Unconfigures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bfd_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L122"
    }
  },
  "unconfigure_bgp_neighbor_activate": {
    "iosxe": {
      "doc": " Unconfigure Activate bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1403"
    }
  },
  "unconfigure_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " unonfigure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n            vrf ('str'): Vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1446"
    }
  },
  "unconfigure_bgp_neighbor_send_community": {
    "iosxe": {
      "doc": " Remove send-community attribute for bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n            send_community ('str')     : send-community attribute to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_send_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1349"
    }
  },
  "unconfigure_cdp": {
    "ios": {
      "doc": "\n        Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L41"
    },
    "iosxe": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L41"
    },
    "iosxr": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L20"
    },
    "nxos": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L18"
    }
  },
  "unconfigure_class_map": {
    "iosxe": {
      "doc": " Unconfigures class-map\n        Args:\n             device ('obj'): device to use\n             class_name ('str'): name of the class\n             class_match_type ('str',optional): name of the match type, default is 'match-all'\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_class_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_class_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_class_map/configure.py#L65"
    }
  },
  "unconfigure_common_criteria_policy": {
    "iosxe": {
      "doc": " Unconfigure aaa common criteria policy\n    Args:\n        device (`obj`):      Device object\n        policy_name (`str`): Policy name\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_common_criteria_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L920"
    }
  },
  "unconfigure_cts_authorization_list": {
    "iosxe": {
      "doc": " Unconfigure Local authorization list to use for CTS\n        Args:\n            device ('obj'): device to use\n            authlist ('str'): Named authorization list to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure Local authorization list\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_authorization_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L272"
    }
  },
  "unconfigure_device_tracking_binding": {
    "iosxe": {
      "doc": "Removes static entry to binding table\n    Args:\n        device ('obj'): device object\n        vlan ('str'): vlan id\n        address ('str'): ip address (v4 or v6)\n        interface ('str'): interface for entry - Eg. TWE 1/0/1\n        mac ('str'): entry's mac address\n        tracking ('str', optional): Set the tracking for the device - Eg. \"enable\", \"disable\", or \"default\" . Defaults to \"default.\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to add static entry\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1807"
    }
  },
  "unconfigure_device_tracking_binding_options": {
    "iosxe": {
      "doc": " Unconfigures device-tracking binding options\n        Args:\n            device ('obj'): device object\n            reachable_lifetime ('bool', optional): Flag to unconfigure reachable-lifetime. Defaults to False\n            stale_lifetime ('bool', optional): Flag to unconfigure stale-lifetime. Defaults to False\n            down_lifetime ('bool', optional): Flag to unconfigure down-lifetime. Defaults to False\n            max_entries ('bool', optional): Flag to unconfigure max-entries lifetime. Defaults to False\n            logging ('bool', optional): Disable syslog logging of binding table events. Defaults to False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure device-tracking binding\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_binding_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1898"
    }
  },
  "unconfigure_dot1x_cred_profile": {
    "iosxe": {
      "doc": "Unconfigure dot1x credentials profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): dot1x credential profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure dot1x credential\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_cred_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L392"
    }
  },
  "unconfigure_dot1x_supplicant": {
    "iosxe": {
      "doc": " UnConfigure on dot1x supplicant switch \n    Args:\n        device (`obj`): Device object\n        profile_name (`str`): dot1x Credential profile_name\n        intf (`str`) : Supplicant Interface\n        eap_profile (`str`, optional): eap profile name (Default is None)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_supplicant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L489"
    }
  },
  "unconfigure_dot1x_system_auth_control": {
    "iosxe": {
      "doc": "UnConfigure dot1x system-auth-control\n    Args: \n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring     \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_system_auth_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L518"
    }
  },
  "unconfigure_eap_profile": {
    "iosxe": {
      "doc": "Unconfigure EAP Profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L83"
    }
  },
  "unconfigure_eap_profile_md5": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eap_profile_md5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L412"
    }
  },
  "unconfigure_eapol_dest_address_interface": {
    "iosxe": {
      "doc": " Unconfigures EAPOL Destination Address on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be unconfigured\n        dest_address ('str'): destination address to be unconfigured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eapol_dest_address_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2814"
    }
  },
  "unconfigure_eapol_eth_type_interface": {
    "iosxe": {
      "doc": " Unconfigures EAPOL Ethernet Type on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be unconfigured\n        eth_type ('str'): eth_type to be unconfigured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eapol_eth_type_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2874"
    }
  },
  "unconfigure_enable_policy_password": {
    "iosxe": {
      "doc": " Unconfigure enable password with policy\n    Args:\n        device (`obj`):                   Device object\n        password (`str`):                 Password\n        policy (`str`, optional):         Policy name\n        password_type ('str', optional) : Password type\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_enable_policy_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L982"
    }
  },
  "unconfigure_errdisable": {
    "iosxe": {
      "doc": " \n    UnConfigures errdisable recovery cause and errdisable recovery interval\n    e.g.\n    e.g.\n    no errdisable recovery cause loopdetect\n    no errdisable recovery interval\n    Args:\n        device ('obj') : Device object\n        recovery_cause ('str'): error disable recovery cause\n        recovery_interval ('int'): errdisable recovery interval integer in seconds\n    Returns:\n        None\n    ",
      "module_name": "error_disable.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_errdisable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/error_disable/configure.py#L38"
    }
  },
  "unconfigure_evpn_default_gateway_advertise_global": {
    "iosxe": {
      "doc": " Unconfigure default-gateway advertise in l2vpn evpn globally\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_default_gateway_advertise_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L361"
    }
  },
  "unconfigure_evpn_evi_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn multicast advertise disable on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_evi_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L307"
    }
  },
  "unconfigure_evpn_instance_encapsulation_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            encap_type ('str): encapsulation \n                               vxlan | mpls \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_instance_encapsulation_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L245"
    }
  },
  "unconfigure_evpn_instance_vlan_based": {
    "iosxe": {
      "doc": " Unconfiguring l2vpn evpn instance configuration\n        Args:\n            device (`obj`): Device object\n            instance (`int`): instance number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_instance_vlan_based",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L37"
    }
  },
  "unconfigure_evpn_l2_instance_vlan_association": {
    "iosxe": {
      "doc": " unconfigure VLAN association to EVPN instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            evpn_instance('int'): EVPN Instance id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_l2_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L414"
    }
  },
  "unconfigure_evpn_l3_instance_vlan_association": {
    "iosxe": {
      "doc": " unconfigure VLAN association to EVPN l3 vni instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_l3_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L470"
    }
  },
  "unconfigure_evpn_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn instance\n        Args:\n            device (`obj`): Device object\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L187"
    }
  },
  "unconfigure_flow_exporter_monitor_record": {
    "iosxe": {
      "doc": " Unconfigures Flow Exporter,Monitor and Record on Device\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n            record_name (`str`): Flow record name\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed unconfiguring Flow Exporter,monitor,record\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_flow_exporter_monitor_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L159"
    }
  },
  "unconfigure_fnf_monitor_on_interface": {
    "iosxe": {
      "doc": " Unconfig Flow Monitor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be unconfigured\n            monitor_name (`str`): Flow monitor name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring interface with flow monitor\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_fnf_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L222"
    }
  },
  "unconfigure_global_stackwise_virtual": {
    "iosxe": {
      "doc": " Disable global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_global_stackwise_virtual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L33"
    }
  },
  "unconfigure_igmp_version": {
    "iosxe": {
      "doc": "configures the IGMP version that the switch uses on interfaces.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): mentions interface name\n            version (`int`): specifies the IGMP version that the switch uses.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_igmp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L123"
    }
  },
  "unconfigure_interface_description": {
    "iosxe": {
      "doc": "unconfigure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1359"
    }
  },
  "unconfigure_interface_for_dot1x": {
    "iosxe": {
      "doc": "\n    Interface un-configuration for Dot1x\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'no authentication open',\n            'no authentication order',\n            'no authentication priority',\n            'no authentication port-control',\n            'no dot1x pae'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'no dot1x pae'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_for_dot1x",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1670"
    }
  },
  "unconfigure_interface_for_mab": {
    "iosxe": {
      "doc": "\n    Interface un-configuration for Mac authentication bypass\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'no authentication open',\n            'no authentication order',\n            'no authentication priority',\n            'no authentication port-control',\n            'no dot1x pae',\n            'no mab'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'no dot1x pae'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_for_mab",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1717"
    }
  },
  "unconfigure_interface_mac_address": {
    "iosxe": {
      "doc": " Unconfigure static mac address on interface\n    Args:\n        device (`obj`): Device object\n        interface ('str'): Interface to unconfigure mac\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2927"
    }
  },
  "unconfigure_interface_monitor_session": {
    "iosxe": {
      "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            session_name (`str`): session_name\n            session_type (`str`): session_type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1460"
    }
  },
  "unconfigure_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Unconfigures switchport on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n            vlan ('str'): access_vlan to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L836"
    }
  },
  "unconfigure_interface_template": {
    "iosxe": {
      "doc": " UnConfigures Template on a list of interfaces\n    interface GigabitEthernet1/0/1\n      no source template sample-template\n\n        Args:\n            device ('obj'): Device object\n            template_name ('str'): Template name\n            interface_list ('list'): List of Interface names - can directly pass in device.interfaces from testbed yaml\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2507"
    }
  },
  "unconfigure_ip_dhcp_snooping": {
    "iosxe": {
      "doc": " Unconfigures ip dhcp snooping vlan {vlan_range}\n    Args:\n        device ('obj'): device to use\n        vlan_range ('str'): vlan range from (1-4096), example: 1,3-5,7,9-11\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure ip dhcp snooping vlan {vlan_range}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L333"
    }
  },
  "unconfigure_ip_domain_lookup": {
    "iosxe": {
      "doc": " Disable ip domain lookup \n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian Unconfiguration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_domain_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L34"
    }
  },
  "unconfigure_ip_mtu": {
    "iosxe": {
      "doc": " Unconfiguring ip mtu on  device\n\n        Args:\n            device ('str'): Device str\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2707"
    }
  },
  "unconfigure_ip_name_server": {
    "iosxe": {
      "doc": " Disable ip name server\n        Args:\n            device ('obj'): device to use\n            domain_ip ('str'): dns server ip or proxy server ip.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian Unconfiguration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_name_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L80"
    }
  },
  "unconfigure_ip_pim_vrf_ssm_default": {
    "iosxe": {
      "doc": "unconfigure ip pim vrf ssm default on device\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_pim_vrf_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L173"
    }
  },
  "unconfigure_ip_prefix_list": {
    "iosxe": {
      "doc": " unconfigure prefix-list\n\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix-list name\n            seq (`int`): Sequence number of a prefix list\n            ip_address (`str`): ip address to be pass\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L863"
    }
  },
  "unconfigure_ipv4_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure Ipv4 Subnet to SGT mapping\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure Ipv4 Subnet to SGT mapping\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L345"
    }
  },
  "unconfigure_ipv4_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure Ipv4 SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure Ipv4 SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L325"
    }
  },
  "unconfigure_ipv6_acl": {
    "iosxe": {
      "doc": " Unconfigure IPv6 ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L372"
    }
  },
  "unconfigure_ipv6_acl_on_interface": {
    "iosxe": {
      "doc": " Remove acl from an interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n            inbound ('bool', optional): True for inbound acl, False for outbound acl. Default value is True\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L439"
    }
  },
  "unconfigure_ipv6_destination_guard_policy": {
    "iosxe": {
      "doc": " Unconfigure ipv6 destination_guard policy\n    Args:\n        device (\"obj\"): the device to unconfigure the policy on\n        policy_name (\"str\"): The name of the policy\n\n    Raises:\n        SubCommandFailure: Failed to unconfigure ipv6 destination-guard {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_destination_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2020"
    }
  },
  "unconfigure_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Unconfigures ipv6 dhcp guard policy {policy_name}\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            device_role ('bool'): True indicating set device role to its default value\n            trusted_port ('bool'): True indicating set trusted_port to its default value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: \"Failed to unconfigure ipv6 dhcp guard policy {policy_name} with\n            unconfigure device role {device_role} and unconfigure trusted port {trusted_port}\"\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L78"
    }
  },
  "unconfigure_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Unconfigures ipv6 nd suppress policy {mode}\n    Args:\n        device ('obj'): device to use\n        policy_name ('str'): name of the policy to be uconfigured\n        mode ('bool'): True indicating set mode to its default value\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure ipv6 nd suppress policy {policy_name} with mode {mode}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L200"
    }
  },
  "unconfigure_ipv6_object_group_network": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group network\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L172"
    }
  },
  "unconfigure_ipv6_object_group_network_entry": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group network entry\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n            og_mode ('str'): object-group mode\n            ipv6_address ('str'): IPv6 address\n            ipv6_network ('str'): IPv6 network address\n            prefix ('str'): Prefix length\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_network_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L57"
    }
  },
  "unconfigure_ipv6_object_group_service": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group service\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L203"
    }
  },
  "unconfigure_ipv6_object_group_service_entry": {
    "iosxe": {
      "doc": " Unconfigure ipv6 object group service entry\n\n            Args:\n                device (`obj`): Device object\n                og_name ('str'): object-group name\n                ipv6_service ('str'): IPv6 service to add int or str\n\n            Returns:\n                None\n\n            Raises:\n                SubCommandFailure\n        ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_service_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L137"
    }
  },
  "unconfigure_ipv6_ogacl_ace": {
    "iosxe": {
      "doc": " Unconfigure Access-list Entry (ACE) from IPv6 Object-Group ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_og ('str'): Service object-group\n            src_nw ('str'): source network object-group or any\n            dst_nw ('str'): destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            service_type ('str',optional): service type to configure,default value is None\n            log_option ('str',optional): Option to log ACL match,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ogacl_ace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L302"
    }
  },
  "unconfigure_ipv6_ospf_bfd": {
    "iosxe": {
      "doc": "unconfigure ipv6 ospf bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1179"
    }
  },
  "unconfigure_l2vpn_evpn": {
    "iosxe": {
      "doc": " unconfig l2vpn evpn \n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L82"
    }
  },
  "unconfigure_l2vpn_evpn_router_id": {
    "iosxe": {
      "doc": " unconfig l2vpn evpn \n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface type \n                               loopback | physical\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_evpn_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L133"
    }
  },
  "unconfigure_l2vpn_vfi_context_vpls": {
    "iosxe": {
      "doc": "\n    Unconfigures l2vpn vfi context vpls on device\n\n    Args:\n        device('obj'): device to configure\n\n    Returns:\n        N/A\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_vfi_context_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L111"
    }
  },
  "unconfigure_layer2_vfi_autodiscovery": {
    "iosxe": {
      "doc": "unconfigure Layer 2 VFI vpnid configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_layer2_vfi_autodiscovery",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1466"
    }
  },
  "unconfigure_layer2_vfi_manual": {
    "iosxe": {
      "doc": "unconfigure Layer 2 VFI manual configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_layer2_vfi_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1342"
    }
  },
  "unconfigure_ldp_discovery_targeted_hello_accept": {
    "iosxe": {
      "doc": " unconfigure mpls ldp discovery targeted-hello accept \n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ldp_discovery_targeted_hello_accept",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1791"
    }
  },
  "unconfigure_lldp": {
    "ios": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L18"
    },
    "iosxe": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L17"
    },
    "iosxr": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L17"
    },
    "nxos": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L17"
    }
  },
  "unconfigure_logging_buffered_errors": {
    "iosxe": {
      "doc": " Unconfgiure logging buffered errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_buffered_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L172"
    }
  },
  "unconfigure_logging_console": {
    "iosxe": {
      "doc": " no logging console\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_console",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L28"
    }
  },
  "unconfigure_logging_console_errors": {
    "iosxe": {
      "doc": " Unconfgiure logging console errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_console_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L210"
    }
  },
  "unconfigure_logging_monitor": {
    "iosxe": {
      "doc": " no logging monitor\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L61"
    }
  },
  "unconfigure_mdns_config": {
    "iosxe": {
      "doc": " Unconfigure mDNS (Multicast Domain Name System) services on agent and service peer\n\n        Args:\n            device ('obj'): device to configure\n            policy_name ('list', optional): dict with all Policy names and directions. Default value is None\n            service_list ('list', optional): list with all services. Default value is None\n            direction ('str', optional): direction. Default value is None\n            service definition ('str', optional): service definition name. Default value is None\n            service_list_filter ('str', optional): creating service list for filter type. Default value is None\n            direction_filter_type ('str', optional): creating direction for filter type. Default value is None\n            filter_name ('str', optional): filter name. Default value is None\n            service_list_msg_type ('str', optional): creating service list for msg type. Default value is None\n            direction_msg_type ('str', optional): creating direction for msg type. Default value is None\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L560"
    }
  },
  "unconfigure_mdns_controller": {
    "iosxe": {
      "doc": " Remove mdns controller\n        Args:\n            device ('obj'): device to use\n            name ('str'): name of the controller to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_controller",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L128"
    }
  },
  "unconfigure_mdns_location_group": {
    "iosxe": {
      "doc": " Removing location group details on interface\n\n        Args:\n            device ('obj'): device to use\n            location_group ('int'): location group name\n            vlan ('int'): Vlan id value\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_location_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L818"
    }
  },
  "unconfigure_mdns_service_definition": {
    "iosxe": {
      "doc": " Unconfigure mdns service definition\n        Args:\n            device ('obj'): device to use\n            name ('list')\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_service_definition",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L279"
    }
  },
  "unconfigure_mdns_svi": {
    "iosxe": {
      "doc": " Remove mdns svi\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): name of the controller to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns on interface\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L211"
    }
  },
  "unconfigure_mdns_vlan": {
    "iosxe": {
      "doc": " Removing mdns-sd gateway from vlan configuartion (mDNS-Multicast Domain Name System)\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L683"
    }
  },
  "unconfigure_mdt_auto_discovery_mldp": {
    "iosxe": {
      "doc": " unconfigure mdt auto-discovery mldp\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_auto_discovery_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L153"
    }
  },
  "unconfigure_mdt_overlay_use_bgp": {
    "iosxe": {
      "doc": " unconfigure BGP as the overlay protocol\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_overlay_use_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L177"
    }
  },
  "unconfigure_mka_keychain_on_interface": {
    "iosxe": {
      "doc": " Unconfigures mka keychain on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            key_string ('str'): key string to configure\n            key_chain ('str'): fall back key chain to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_keychain_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L474"
    }
  },
  "unconfigure_mka_policy": {
    "iosxe": {
      "doc": " Unconfigures mka policy on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            interface ('str'): interface to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L441"
    }
  },
  "unconfigure_mka_policy_delay_protection": {
    "iosxe": {
      "doc": " Unconfigures mka policy with delay protection on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            interface ('str'): interface to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_policy_delay_protection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L375"
    }
  },
  "unconfigure_mpls_ldp_graceful_restart": {
    "iosxe": {
      "doc": " Unconfigures mpls ldp graceful restart on device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_ldp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1186"
    }
  },
  "unconfigure_mpls_ldp_nsr": {
    "iosxe": {
      "doc": " Unconfigures mpls ldp nsr on device\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_ldp_nsr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L856"
    }
  },
  "unconfigure_mpls_static_binding": {
    "iosxe": {
      "doc": "unconfigure mpls static binding\n        Args:\n        device (`obj`): Device \n        neighbor (`str`) : neighbor ip address\n        mask (`str`): mask to be used for ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_static_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1695"
    }
  },
  "unconfigure_mpls_te_explicit_null": {
    "iosxe": {
      "doc": "unconfigure explicit null on Tunnel\n        Args:\n            device (`obj`): Device \n            explicit_null(`str`) : unconfigure explicit null \n            verbatim(`str`) : unconfigure verbatim\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_te_explicit_null",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1208"
    }
  },
  "unconfigure_mpls_te_under_ospf": {
    "iosxe": {
      "doc": "unconfigure MPLS TE under ospf\n\n        Args:\n            device (`obj`): Device object\n            processid ('str'): Process Id\n            area ('str'): ospf area\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_te_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L445"
    }
  },
  "unconfigure_nat_in_out": {
    "iosxe": {
      "doc": " Disable nat IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            inside_interface ('str'): Disable nat in from this interface, default value is None\n            outside_interface ('str'): Disable nat out From this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: NAT IN OUT not enable over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L67"
    }
  },
  "unconfigure_nat_overload_rule": {
    "iosxe": {
      "doc": " UnConfigure interface overload rule\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface which will use for overlad rule\n            access_list_name ('str'): Name of extended access list\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Nat overload rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L98"
    }
  },
  "unconfigure_ospf": {
    "iosxe": {
      "doc": "Remove ospf on device\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L52"
    }
  },
  "unconfigure_ospf_on_device": {
    "iosxe": {
      "doc": " Unconfigures ospf and ip routing on device\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L840"
    }
  },
  "unconfigure_ospf_router_id": {
    "iosxe": {
      "doc": " unonfigures ospf router-id \n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            router_id ('str'): Router id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L386"
    }
  },
  "unconfigure_ospf_vrf_on_device": {
    "iosxe": {
      "doc": " unonfigure destination in vrf\n        Args:\n            device ('obj'): Device object\n            ospf_process_id('str'): ospf processid to unconfig\n            vrf ('str'): Vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_vrf_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1040"
    }
  },
  "unconfigure_ospfv3": {
    "iosxe": {
      "doc": "unconfigure ospfv3\n\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospfv3 process id\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L613"
    }
  },
  "unconfigure_ospfv3_network": {
    "iosxe": {
      "doc": "unconfigure ospfv3 network type\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospfv3_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1121"
    }
  },
  "unconfigure_pbr_route_map": {
    "iosxe": {
      "doc": " Unconfigure route-map\n\n        Args:\n            device (`obj`): Device object\n            route_map_name (`str`): Route-map to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pbr_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L117"
    }
  },
  "unconfigure_policy_map": {
    "iosxe": {
      "doc": " Unconfigures policy-map\n        Args:\n             device ('obj'): device to use\n             policy_name ('str'): name of the class\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L73"
    }
  },
  "unconfigure_pseudowire_encapsulation_mpls": {
    "iosxe": {
      "doc": " unconfigures pseudowire encapsulation mpls\n\n        Args:\n            device (`obj`): Device object\n            pseudowire_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pseudowire_encapsulation_mpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1362"
    }
  },
  "unconfigure_ptp_domain": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            domain (`str`): PTP domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_domain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L233"
    }
  },
  "unconfigure_ptp_dscp_message": {
    "iosxe": {
      "doc": " PTP dscp message configuration removal\n        Args:\n            device (`obj`): Device object\n            dscp_event ('str'): PTP DSCP event message\n            dscp_general ('str'): PTP DSCP general message\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_dscp_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L140"
    }
  },
  "unconfigure_ptp_modes": {
    "iosxe": {
      "doc": " PTP global configuration removal\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_modes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L162"
    }
  },
  "unconfigure_ptp_transport_ipv4": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            transport (`str`): PTP transport l3 mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_transport_ipv4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L216"
    }
  },
  "unconfigure_qos_policy": {
    "iosxe": {
      "doc": " Unconfigure the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            access_type ('str') : type of interface or VC\n            policy_name ('str') : name of the policy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_qos_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L63"
    }
  },
  "unconfigure_radius_attribute_6": {
    "iosxe": {
      "doc": "\n    Unconfigure radius attribute 6 on-for-login-auth\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_attribute_6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L364"
    }
  },
  "unconfigure_radius_automate_tester": {
    "iosxe": {
      "doc": " Unconfigure Radius Automate Tester.\n    Args:\n        device (`obj`): Device object\n        server_name ('str'): Radius server name\n        username ('str'): Identity Username to query radius server\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_automate_tester",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L779"
    }
  },
  "unconfigure_radius_interface": {
    "iosxe": {
      "doc": " Configure Radius Interface\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L664"
    }
  },
  "unconfigure_radius_interface_vrf": {
    "iosxe": {
      "doc": " Unconfigure Radius Interface via vrf\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n        vrf('str'): VRF name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed unconfiguring Radius Interface via vrf\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_interface_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L823"
    }
  },
  "unconfigure_radius_server_group": {
    "iosxe": {
      "doc": " unconfigure aaa radius server group\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L455"
    }
  },
  "unconfigure_route_map": {
    "iosxe": {
      "doc": " unconfigure route map\n\n        Args:\n            device (`obj`): device to execute on\n            route_map_name (`int`): route map name\n            permit (`int`): Sequence to insert to existing route-map entry\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L955"
    }
  },
  "unconfigure_route_map_under_interface": {
    "iosxe": {
      "doc": " unonfigure route-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            route_map (`str`): Route-map to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_route_map_under_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L41"
    }
  },
  "unconfigure_service_password_encryption": {
    "iosxe": {
      "doc": " Unconfigures service password encryption\n    Args:\n        device ('obj'): device to use\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed unconfiguring service password encryption \n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_password_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1037"
    }
  },
  "unconfigure_snmp": {
    "iosxe": {
      "doc": " Unconfigures the snmp on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L37"
    }
  },
  "unconfigure_spanning_tree": {
    "iosxe": {
      "doc": " \n    UnConfigures spanning-tree vlan with input vlan or vlan range\n    e.g.\n    no spanning-tree vlan 666\n    no spanning-tree vlan 1-999\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L35"
    }
  },
  "unconfigure_stackwise_virtual_interfaces": {
    "iosxe": {
      "doc": " Disable global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            svl_links ('dict'): Dict object\n                Dictionary contains following key, values:\n                    key: interface ('str'): Interface Name\n                    value: link_id ('str'): SVL link id\n                Example:\n                    svl_links = {\n                        'HundredGigE1/0/1':'1',\n                        'HundredGigE1/0/2':'1'\n                    }\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stackwise_virtual_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L81"
    }
  },
  "unconfigure_svi": {
    "iosxe": {
      "doc": " Vlan SVI configuration removal\n        Args:\n            device (`obj`): Device object\n            vlan ('list'): Vlan value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2948"
    }
  },
  "unconfigure_table_map": {
    "iosxe": {
      "doc": " Unconfigures policy-map\n        Args:\n             device ('obj'): device to use\n             table_map_name ('str'): name of the table\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "table_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_table_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/table_map/configure.py#L54"
    }
  },
  "unconfigure_template": {
    "iosxe": {
      "doc": " \n    UnConfigures specified Template \n    Args:\n        device ('obj') : Device object\n        template_name ('str'): Template name\n    Returns:\n        None\n    ",
      "module_name": "configuration_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/configuration_template/configure.py#L54"
    }
  },
  "unconfigure_template_type_vpls": {
    "iosxe": {
      "doc": " unconfigure template type\n        Args:\n            device (`obj`): Device object\n            template_type ('str'): template type for the template\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_template_type_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1618"
    }
  },
  "unconfigure_tunnel_auto_route": {
    "iosxe": {
      "doc": "unconfigure autoroute announce in tunnel.\n        Args: \n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            autoroute_type (`str`): autoroute type used for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tunnel_auto_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L928"
    }
  },
  "unconfigure_tunnel_interface": {
    "iosxe": {
      "doc": " Unconfigure tunnel interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tunnel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2655"
    }
  },
  "unconfigure_umbrella_global_parameter_map": {
    "iosxe": {
      "doc": " Disable Umbrella  parameter-map Globally\n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella parameter-map un-configuration\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_global_parameter_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L125"
    }
  },
  "unconfigure_umbrella_in_out": {
    "iosxe": {
      "doc": " Unconfigure Umbrella IN and OUT over interface \n        Args:\n            device ('obj'):uut [device to use]\n            in_interface ('str'): Disable Umbrella in over this interface, default value is None\n            in_tag ('str'): configure device tag with umbrella in, default value is None\n            out_interface ('str'): Disable Umbrella out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella IN OUT not Disable  over interface\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L43"
    }
  },
  "unconfigure_umbrella_local_bypass": {
    "iosxe": {
      "doc": " Un-Cofigure local domain bypass regex\n        Args:\n            device ('obj'): device to use\n            local_bypass_name ('str'): Name of local domain bypass\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: unconifgure Local domain bypass \n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_local_bypass",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L172"
    }
  },
  "unconfigure_username": {
    "iosxe": {
      "doc": " Configure a user with a password\n        Args:\n            device (`obj`): Device object\n            username (`str`): User name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            dut1.api.unconfigure_username(username='testUser')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_username",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L732"
    }
  },
  "unconfigure_vlan_interface": {
    "iosxe": {
      "doc": " Unconfigure vlan from device\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to be unconfigured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2445"
    }
  },
  "unconfigure_vrf": {
    "iosxe": {
      "doc": "Remove ospf on device\n\n        Args:\n            device (`obj`): Device object\n            vrf (`int`): vrf id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L38"
    }
  },
  "unconfigure_vrf_definition_on_device": {
    "iosxe": {
      "doc": " unconfig vrf definition on device\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_definition_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L82"
    }
  },
  "unconfigure_vrf_description": {
    "iosxe": {
      "doc": "Unconfigure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure            \n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L60"
    }
  },
  "unconfigure_wired_radius_attribute_44": {
    "iosxe": {
      "doc": " To unconfigure radius attribute 44 for wired\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_wired_radius_attribute_44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L626"
    }
  },
  "unit_convert": {
    "com": {
      "doc": " Get value with given corresponding unit.\n        If not unit is given, value will be converted to value without unit\n\n        Args:\n            value (`str`): value with unit like `10M`\n            unit (`str`): unit type like `K`, `M`, `G`\n\n        Returns:\n            new_value (`float`): value after converting to given unit\n\n        Examples:\n            >>> dev.api.unit_convert('123K', 'M')\n            0.123\n\n            >>> dev.api.unit_convert('100M', 'K')\n            100000.0\n\n            >>> dev.api.unit_convert('100M')\n            100000000.0\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "unit_convert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L636"
    }
  },
  "unshut_interface": {
    "iosxe": {
      "doc": " Unshut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L174"
    },
    "junos": {
      "doc": " Unshut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L76"
    }
  },
  "unshut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Unshut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L300"
    }
  },
  "verify_aci_registered_nodes_in_state": {
    "apic": {
      "doc": " Verifies that a provided list of Node IDs are in the provided state.\n\n    Args:\n        device (obj): Device to execute on\n        node_ids (list): List of node IDs to verify\n        state (str): State of nodes to match\n        max_time (int, optional): Max time to verify. Defaults to 90.\n        check_interval (int, optional): How often to recheck. Defaults to 15.\n\n    Returns:\n        (bool): True if all nodes provided are in the correct state\n                False if some nodes provided are in the wrong state\n\n    Raises:\n        N/A\n    ",
      "module_name": "acidiag.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_aci_registered_nodes_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/acidiag/verify.py#L10"
    }
  },
  "verify_acl_applied": {
    "iosxe": {
      "doc": " Verify if access list is correctly applied\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access list name\n            applied_config ('str'): Output from acl.configure.config_extended_acl\n        Raises:\n            None\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_applied",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L13"
    }
  },
  "verify_acl_usage": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            expected_acl_type (`str`): type of ACL\n            acl_id (`str`): Name of ACL\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L38"
    }
  },
  "verify_all_ospf3_neighbor_states": {
    "junos": {
      "doc": " Verifies state of ospf3 neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF3 adjacency state that is expected\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_all_ospf3_neighbor_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1113"
    }
  },
  "verify_all_ospf_neighbor_states": {
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_all_ospf_neighbor_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1427"
    }
  },
  "verify_app_requested_state": {
    "iosxe": {
      "doc": " \n    verify_app_requested_state\n    Check show app-hosting list and confirm the requested state of the passed in list of appids\n    Args:\n        device ('obj') : Device object\n        app_list ('list') : list of appids\n        requested_state ('str') : requested state of appid\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None    \n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_app_requested_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L12"
    }
  },
  "verify_arp_interface_exists": {
    "junos": {
      "doc": "Verify interface exists in arp table\n\n    Args:\n        device (obj): Device object\n        expected_interface (str): Interface to check for\n        invert (bool, optional): Inverts to ensure interface doesn't exist. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_interface_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/arp/verify.py#L15"
    }
  },
  "verify_arp_packets": {
    "iosxe": {
      "doc": " Verify arp packets sent interval\n\n        Args:\n            pkts (`obj`): Pcap object\n            timeout (`str`): ARP timeout interval\n            tolerance (`int`): Delay tolerance\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L55"
    }
  },
  "verify_arp_vrf_interface_mac_entry": {
    "iosxe": {
      "doc": " Verify that interface and mac (optional) passed in are the \n        outgoing interface and mac for host in ARP table \n        'show arp vrf {vrf} {ip}' / 'show arp {ip}'\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): Ip address\n            expected_interface ('str'): interface\n            vrf ('str', optional): vrf interface, default None\n            expected_mac ('str', optional): mac address, default None\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_vrf_interface_mac_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L109"
    }
  },
  "verify_best_path_is_towards_to_interface": {
    "junos": {
      "doc": "Verify best path towards to given interface\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): Route name. Default to None.\n            protocol ('str'): Protocol name. Default to None.\n            expected_ip_address ('str'): Expected IP address. Default to None.\n            expected_target_route ('str'): Expected target route. Default to None.\n            expected_via ('str'): Expected via interface. Default to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_best_path_is_towards_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2468"
    }
  },
  "verify_bfd_configuration": {
    "iosxe": {
      "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface bfd is configured on\n            interval ('str'): interval to verify\n            state ('str'): state to verify\n            protocols ('list'): protocols to verify\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L14"
    }
  },
  "verify_bfd_ipv6_session_destination_details_client": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_ipv6_session_destination_details_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L137"
    }
  },
  "verify_bfd_ipv6_session_destination_details_session_state": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_ipv6_session_destination_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L96"
    }
  },
  "verify_bfd_neighbors_details": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L166"
    }
  },
  "verify_bfd_neighbors_details_no_output": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details has not output\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L234"
    }
  },
  "verify_bfd_neighbors_details_registered_protocols": {
    "iosxe": {
      "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_registered_protocols ('list'): protocols to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_registered_protocols",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L124"
    }
  },
  "verify_bfd_neighbors_details_session_state": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L82"
    }
  },
  "verify_bfd_session": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        session_address (str): Session address\n        expected_session_state (str): Expected session state\n        expected_session_multiplier (str): Expected session multiplier\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        expected_interface (str, optional): Expected interface to check\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L14"
    }
  },
  "verify_bfd_session_count": {
    "junos": {
      "doc": " Verify BFD session count\n    Args:\n        device (`obj`): Device object\n        address (`str`): Session address\n        expected_session_count (`int`): number of expected session count\n        expected_client_count (`int`, optional): number of expected client count\n                                                 Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60.\n        check_interval (`int`, optional): Check interval. Defaults to 10.\n    Returns:  \n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L178"
    }
  },
  "verify_bfd_session_destination": {
    "iosxr": {
      "doc": " Verifies bfd session destination details\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            ipv6 ('bool'): Run ipv6 show command. Default to false.\n            expected_session_state ('str'): Session state to verify\n            expected_det_time ('str'): Expect det time value.\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L178"
    }
  },
  "verify_bfd_session_destination_detail": {
    "iosxr": {
      "doc": " Verifies bfd session destination detail\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            expected_received_parameters_state ('str'): Received parameter state to verify\n            ipv6 ('bool'): Run ipv6 show command. Default to false\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L237"
    }
  },
  "verify_bfd_session_destination_detail_no_output": {
    "iosxr": {
      "doc": " Verifies bfd session destination has no output\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            ipv6 ('bool'): Run ipv6 show command. Default to false\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_detail_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L300"
    }
  },
  "verify_bfd_session_destination_details_client": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_client ('str'): Client to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_details_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L55"
    }
  },
  "verify_bfd_session_destination_details_session_state": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L13"
    }
  },
  "verify_bfd_session_detail": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        session_address (str): Session address\n        expected_session_state (str): Expected session state\n        expected_client ('str'): Expected client\n        expected_session_multiplier ('str'): Expected session multiplier\n        expected_tx_interval ('str'): Expected tx interval\n        expected_rx_interval ('str'): Expected rx interval\n        expected_session_detect_time ('str'): Expected session detect time\n        expected_remote_state ('str'): Expected remote session state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L63"
    }
  },
  "verify_bgp_active_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp active holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected active holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_active_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L330"
    }
  },
  "verify_bgp_address_received": {
    "iosxe": {
      "doc": " Verifies that address is recieved from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address ('str'): address to verify\n\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_address_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1541"
    }
  },
  "verify_bgp_all_neighbor_status": {
    "junos": {
      "doc": "\n    Verify all bgp peer states\n\n    Args:\n        device('obj'): device to use\n        expected_state('str') : Expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_all_neighbor_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L494"
    }
  },
  "verify_bgp_all_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp all peer state\n\n    Args:\n        device('obj'): device to use\n        expected_state('str') : Expected peer state\n                                Default to `Establ`\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_all_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L1091"
    }
  },
  "verify_bgp_as_in_as_path": {
    "iosxe": {
      "doc": " Verify if a route has an AS number in its AS path\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route to be verified\n            bgp_as ('str'): AS number to be verified in route AS path\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n            output ('str'): Parsed output of one of the following commands:\n                * 'show ip bgp {address_family} vrf {vrf}'\n                * 'show ip bgp {address_family}'\n                * 'show ip bgp'\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_as_in_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L993"
    }
  },
  "verify_bgp_as_path_prepend": {
    "iosxe": {
      "doc": " Verify if AS value is added at the beginning of the AS path on route\n        Args:\n            route_dict ('obj')      : Dict containing all routes on device\n            as_path_prepend ('int') : AS number to be checked on route\n            as_path ('int')         : AS path on route            \n            route ('str')           : Route beeing checked\n            steps ('obj')           : Context manager step\n        Returns:\n            None\n        \n        Raises:\n            pyATS Results\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_as_path_prepend",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L370"
    }
  },
  "verify_bgp_config_operational_state_neighbors": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n            'show ip bgp {address_family} vrf {vrf} neighbors'\n            'show ip bgp {address_family} all neighbors'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_neighbors ('dict'): Parsed output from: \n                'show ip bgp {address_family} vrf {vrf} neighbors'\n                'show ip bgp {address_family} all neighbors'\n            vrf ('str'): VRF name to be verified\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_config_operational_state_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1115"
    }
  },
  "verify_bgp_config_operational_state_summary": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n\n            'show ip bgp {address_family} vrf {vrf} summary'\n            'show ip bgp {address_family} all summary'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_summary ('dict'): Parsed output from:\n                'show ip bgp {address_family} vrf {vrf} summary'\n                'show ip bgp {address_family} all summary'\n            vrf ('str'): VRF name\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_config_operational_state_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1239"
    }
  },
  "verify_bgp_configuration_and_operation_state": {
    "iosxe": {
      "doc": " Verify bgp configuration is matched with operational state\n        - \"ipv4 vrf xxxx\" and \"vpnv4\" in running config are in \n          \"VPNv4 Unicast\" address family in bgp all summary\n        - \"l2vpn vpls\" in running config are in \n          \"L2VPN Vpls\" address family in bgp all summary\n        - BGP AS number is same as configured\n        - All configured neighbors exist and the status can be checked\n\n        Args:\n            device ('obj'): Device object\n            sr_dict(`dict`): Parsed output from libs.bgp.get.get_show_run_bgp_dict\n            sm_dict(`dict`): Parsed output of command 'show ip bgp all summary'\n        Returns:\n            result(`bool`): verified result\n            info(`str`): compared information\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_configuration_and_operation_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L46"
    }
  },
  "verify_bgp_each_path": {
    "iosxe": {
      "doc": " Verify each endpoint is same 'show ip bgp vrf {vrf} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            vrf ('str'): VRF name\n            route ('str'): Route to check\n            expected_endpoint_ip ('str', None): Expected endpoint ip\n            expected_metric ('str'): Expected metric ip\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_each_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1716"
    }
  },
  "verify_bgp_error_message": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_message('str'): Expected message\n        expected_error_message('str') : Expected error message\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_error_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L202"
    }
  },
  "verify_bgp_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L275"
    }
  },
  "verify_bgp_l2vpn_evpn_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify BGP l2vpn evpn neighbor state\n\n        Args:\n            device (`obj`): Device object\n            neighbor (`str`): Neighbor IP\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L12"
    }
  },
  "verify_bgp_last_error": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_error('str') : Expected last error\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_last_error",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L146"
    }
  },
  "verify_bgp_last_reset": {
    "iosxe": {
      "doc": " Verify last reset is always greater than previous value\n\n        Args:\n            prev_list(`list`): list of previous last reset value\n            curr_list(`list`): list of current last reset value\n        Returns:\n            result(`bool`): verified result\n            table(`obj`): table to display\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_last_reset",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L171"
    }
  },
  "verify_bgp_mvpn_route_count": {
    "iosxe": {
      "doc": " Verify count of metioned routes \n\n        args:\n            device ('obj'): Device to use\n            route_type ('dict') : contains all the route type and route count\n            vrf ('str'): vrf name\n        raises:\n            N/A\n\n        returns:\n            dict\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_mvpn_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1844"
    }
  },
  "verify_bgp_neighbor_exist": {
    "iosxe": {
      "doc": " Verify bgp neighbor exists in 'show ip bgp {address_family} summary'\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address_family ('str'): address family\n            vrf ('str'): vrf\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1622"
    },
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp {address_family} summary'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            address_family ('str'): Address family\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): Verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L59"
    }
  },
  "verify_bgp_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp neighbors {nbr}'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            vrf ('str'): Vrf\n            address_family ('str'): Address family\n            expected_state ('str'): Expected state\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L96"
    }
  },
  "verify_bgp_not_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        not_expected_state('str') : Not expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_not_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L83"
    }
  },
  "verify_bgp_peer_address": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        peer_address (`list`): List of peer addresses to verify\n        expected_state('str') : Expected peer state\n        peer_address_only (`bool`): if True, make sure only given\n                                    peer_address exist\n                                    Default to False\n        neighbor_command (`bool`): if True, use `show bgp neighbor <address>` instead\n                                   Default to False\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L964"
    }
  },
  "verify_bgp_peer_as": {
    "junos": {
      "doc": "\n    Verify bgp peer AS number\n\n    Args:\n        device('obj'): device to use\n        peer_address('str'): Peer interface\n        expected_peer_as ('int'): Expected peer AS number\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L908"
    }
  },
  "verify_bgp_peer_import_value": {
    "junos": {
      "doc": "Verifies BGP peer import value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        expected_import_value (str): Expected import value to check against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_import_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L787"
    }
  },
  "verify_bgp_peer_option": {
    "junos": {
      "doc": "\n    Verify bgp peer's bgp option\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface\n        protocol('str'): protocol name\n        expected_bgp_option('str') : Expected peer bgp-option flag\n        invert (bool, optional): True if output does not contain expected_bgp_option. Defaults to False.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L842"
    }
  },
  "verify_bgp_peer_prefixes_match": {
    "junos": {
      "doc": "Verifies whether BGP peer prefixes match or not\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        active (bool, optional): Check active prefix. Defaults to True.\n        received (bool, optional): Check received prefix. Defaults to True.\n        accepted (bool, optional): Check accepted prefix. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_prefixes_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L714"
    }
  },
  "verify_bgp_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_state('str') : Expected peer state\n        check_peer('boolean'): pass True if want to check peer address; default False\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L16"
    }
  },
  "verify_bgp_peers_are_present": {
    "iosxe": {
      "doc": " Verify if BGP peers are present\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary\n            bgp_peers ('dict'): Dictionary containing peer details - Neigbor and AS number\n                ex.)\n                    bgp_peers = {\n                        '192.168.1.1': 65532,\n                        '192.168.1.2': 65532,\n                    }\n        Returns:\n            True\n            False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peers_are_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1041"
    }
  },
  "verify_bgp_rd_table": {
    "iosxe": {
      "doc": "Verify BGP table on neighbors\n\n        Args:\n            device ('obj')             : Device object\n            address_family ('str')     : Address family to be used in show command\n            routes_list ('dict')       : Routes to be verified \n            vrf ('str')           : VRF value \n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rd_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L417"
    }
  },
  "verify_bgp_route_is_advertised": {
    "iosxe": {
      "doc": " Verify if a route is advertised for a VRF and Router Distinguisher\n\n        Args:\n            vrf('str')                  : VRF name to be verified\n            address_family('str')       : Address family \n            neighbor_address ('str')            : Neighbor interface address\n            default_rd('str')           : Route distinguisher from VRF list\n            default_vrf('str')          : VRF from VRF list\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n        Returns:\n            True\n            False\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_route_is_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1362"
    }
  },
  "verify_bgp_route_is_received": {
    "iosxe": {
      "doc": " Verify if VRF and Router Distinguisher have at least one received route\n        Args:\n            device ('obj')              : Device object\n            address_family ('str')      : Address family to be used in show command\n            vrf ('str')                 : VRF name to be verified \n            neighbor_address ('str')   : Neighbor interface address\n            default_rd ('str')          : Route distinguisher from VRF list\n            default_vrf ('str')         : Default VRF name\n            address_family ('str')      : Address family\n            received_routes ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_route_is_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1432"
    }
  },
  "verify_bgp_routes_from_neighbors": {
    "iosxe": {
      "doc": " Verify if routes are advertised by a particular source\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            route ('str'): IP address\n            source_address ('str'): source address to check in output\n            rr_loopback ('list'): loopback address list to check in output for route reflactor device\n            ex.)\n                loopback1 = '192.168.36.40'\n                loopback2 = '192.168.36.41'\n                rr_loopback = [ loopback1, loopback2 ]\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_routes_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L938"
    }
  },
  "verify_bgp_routes_have_community": {
    "iosxe": {
      "doc": " Verify routes have community or not\n\n        Args:\n            device ('str'): Device str\n            neighbor ('str'): neighbor address\n            community ('str'): community name to search\n            vrf ('str'): vrf name\n            rd_export ('str'): rd export value\n            check_not_match ('bool'): flag check community match or not\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_routes_have_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L723"
    }
  },
  "verify_bgp_rt2_label": {
    "iosxe": {
      "doc": " Verify bgp label for routetype 2 in 'show ip bgp {address_family}\n        route-type 2 {eti} {mac} {ip}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            mac_addr('str'): Mac address\n            ip_addr('str'): Ip address\n            vrf_id ('str'): vrf\n            expected_label('str'): Expected label \n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt2_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2116"
    }
  },
  "verify_bgp_rt2_route_target": {
    "iosxe": {
      "doc": " Verify bgp RT-2 host route(s) exists in 'show ip bgp {address_family}\n        route-type 2 {eti} {mac} {ip}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            mac_addr('str'): mac address\n            ip_addr('str'): Ip address\n            vrf_id ('str'): vrf\n            expected_rt('str' or 'list'): Expected route target\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int'. optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt2_route_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1881"
    }
  },
  "verify_bgp_rt5_label": {
    "iosxe": {
      "doc": " Verify bgp for specific label existstance in \n        'show ip bgp {address_family} route-type 5 {eti} {ip_addr} {ip_length}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): IP ADDRESS\n            ip_length('str'): Ip length\n            vrf_id ('str'): vrf\n            expected_label('str'): Expected Label\n            max_time ('int', optional): maximum time to wait in seconds, \n                default is 30\n            check_interval ('int', optional): how often to check  in seconds, \n                default is 10\n        Example:\n            EVPN ESI: 00000000000000000000, Gateway Address: 0.0.0.0, \n            VNI Label 3000101, MPLS VPN Label 0\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2059"
    }
  },
  "verify_bgp_rt5_reoriginated_from": {
    "iosxe": {
      "doc": " re-originated RT-5 host IP route indicates route is re-originated \n        from RT-2 in 'show ip bgp {address_family} route-type 5 \n        {eti} {ip} {ip_len}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): Ip address\n            ip_length('str'): Ip length\n            vrf_id('str'): VRF name\n            expected_path('str'): Expected path\n            max_time ('int', optional): maximum time to wait in seconds,\n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Example: \n            Paths: (1 available, best #1, table evi_101, \n            re-originated from [2][30.0.1.11:101][0][48]\n                [009999888888][32][20.101.1.3]/24)\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_reoriginated_from",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1942"
    }
  },
  "verify_bgp_rt5_route_target": {
    "iosxe": {
      "doc": " Verify bgp for specific route target host(s) in\n        'show ip bgp {address_family} route-type 5 {eti} {ip} {ip_len}' \n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): ipv4/ipv6 address\n            ip_length('str'): Ip length\n            vrf_id ('str'): vrf\n            expected_rt ('str' or 'list'): Expected RT\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_route_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2002"
    }
  },
  "verify_bgp_soo_on_route": {
    "iosxe": {
      "doc": " Verifies soo exists on route \n\n        Args:\n            Required:\n                device('obj'): device to verify on\n                address_family('str'): address_family to verify under\n                route('str'): route to verify\n            \n            One or the other:\n                vrf('str'): verify using vrf\n                rd('str'): verify using rd\n\n            Optional:\n                timeout('obj'): timeout object to override default\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_soo_on_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L316"
    }
  },
  "verify_bgp_status_codes_exist": {
    "iosxe": {
      "doc": " Verifies status exists in status_codes\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            route ('str'): route to check under\n            status_codes ('str'): status codes from parser\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            check_all ('bool'): wether or not to check all status_codes passed or atleast one\n\n        Returns:\n            codes ('str') or None\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_status_codes_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1568"
    }
  },
  "verify_bgp_summary_instance_peers_state": {
    "junos": {
      "doc": " Verifies all peer states are a supplied state\n\n    Args:\n        device('obj'): device to use\n        instance ('str'): Instance name\n        expected_state('str') : Expected peer state Default to `Establ`\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_summary_instance_peers_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L1146"
    }
  },
  "verify_bgp_syslog": {
    "iosxe": {
      "doc": " Verify syslog messages don't contain BGP-5-ADJCHANGE mnemonic\n\n        Args:\n            device(`obj`): device object\n        Returns:\n            result (`str`): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_syslog",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L209"
    }
  },
  "verify_bgp_table_uut": {
    "iosxe": {
      "doc": "Verify BGP table on device under test\n\n        Args:                \n            device ('obj')             : Device object            \n            address_family ('str')     : Address family to be used in show command\n            vrf ('str')           : VRF value of neighbors\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            routes_list ('dict')       : Routes to be verified\n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_table_uut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L494"
    }
  },
  "verify_bgp_updown_time": {
    "junos": {
      "doc": "\n    Verify the up/down time of all neighbors is less than given_time\n\n    Args:\n        device('obj'): device to use\n        given_seconds('int') : Given time in seconds\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_updown_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L540"
    }
  },
  "verify_bidir_groupip": {
    "iosxe": {
      "doc": "Verify bidir multicast group ip output\n\n    Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            groupip (`str`): multicast group ip\n            upstream_intf (`str`, optional): sourceip of the multicast group ip\n            incmg_intf (`str`, optional): incoming interface of the mullticast group ip\n            flag (`str`, optional): flag\n            outgng_intf (`str`, optional): outgoing interface\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bidir_groupip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L353"
    }
  },
  "verify_boot_variable": {
    "ios": {
      "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System images\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L65"
    },
    "iosxe": {
      "cat9k": {
        "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n\n    Args:\n        device (obj): The device to execute on.\n\n        boot_images (list): The images that are expected to be configured\n            as the boot variable for the next reload.\n\n        output (str, optional): The device output from 'show boot'. If not\n            provided the API will gather it from the device automatically.\n            Defaults to None.\n\n    Returns:\n        True - if the expected images are configured\n        False - if the expected images are NOT configured\n\n    Raises:\n        N/A\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/verify.py#L5"
      },
      "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System images\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L141"
    }
  },
  "verify_bundle_in_state": {
    "iosxr": {
      "doc": " Verify bundle state\n\n        Args:\n            device (`obj`): Device object\n            bundle (`str`): Bundle name\n            interface (`bool`): Bundle interface\n            status (`str`): Expected bundle status\n            link_state (`str`): Expected line state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bundle_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L14"
    }
  },
  "verify_capabilities_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if capabilities of bgp neighbor matches expected capabilities\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            neighbor_address ('str')          : Address family to be searched under\n            expected_capabilities  ('list')   : List of expected capabilities\n            vrf_name ('str')                  : VRF name\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_capabilities_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L575"
    }
  },
  "verify_cdp_in_state": {
    "ios": {
      "doc": " \n        Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L9"
    },
    "iosxr": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/verify.py#L9"
    },
    "nxos": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/verify.py#L9"
    }
  },
  "verify_cdp_peer_interface": {
    "iosxe": {
      "doc": " Verify interfaces of peer are present in cdp neighbors\n        Args:\n            device('obj'): device \n            interfaces(`list`): interfaces to be checked\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_peer_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L26"
    }
  },
  "verify_cef_internal_label_stack": {
    "iosxe": {
      "doc": " Verify stack is programmed for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            stack (`list`): Stack list to verify exists\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_internal_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L58"
    }
  },
  "verify_cef_labels": {
    "iosxe": {
      "doc": " Verify first and last label on route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            expected_first_label ('str'): Expected first label\n            expected_last_label ('str'): Expected last label\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L729"
    }
  },
  "verify_cef_outgoing_interface": {
    "iosxe": {
      "doc": "Verify outgoing interfaces for a particular prefix in cef\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf\n            dst_pfx (`str`): destination prefix\n            out_intf(`list`): List of outgoing interface to be checked,\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n        True if outgoing interfaces is as expected, false in all other cases\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L128"
    }
  },
  "verify_changes_platform": {
    "iosxe": {
      "doc": " Verify if there are changes between outputs from 'show platform'\n        Args:\n            device ('obj'): Device object\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n            max_time ('int'): Max time in seconds retrying\n            interval ('int'): Interval of each retry\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_changes_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L62"
    }
  },
  "verify_chassis_alarm_output": {
    "junos": {
      "doc": " Verify message_topic is mentioned via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            message_topic ('str'): Message information that should be in output\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_alarm_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L718"
    }
  },
  "verify_chassis_alarms_no_error": {
    "junos": {
      "doc": " Verify there are no error about target FPC via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            target_fpc (`str`): Target fpc. \n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_alarms_no_error",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L865"
    }
  },
  "verify_chassis_environment_component_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_component_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L555"
    }
  },
  "verify_chassis_environment_item": {
    "junos": {
      "doc": " Verify specific item in show chassis environment exists or doesn't exist\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_item",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1615"
    }
  },
  "verify_chassis_environment_multiple_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_multiple_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1294"
    }
  },
  "verify_chassis_environment_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L324"
    }
  },
  "verify_chassis_environment_status": {
    "junos": {
      "doc": " Verify specific item in fan_tray_list has expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L670"
    }
  },
  "verify_chassis_fabric_plane_exists": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric summary'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Chassis fabric items expected\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_plane_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1669"
    }
  },
  "verify_chassis_fabric_plane_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric plane'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Chassis fabric items expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_plane_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1389"
    }
  },
  "verify_chassis_fabric_summary_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric summary'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): chassis fabric item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_summary_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1340"
    }
  },
  "verify_chassis_fan_tray_present": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            invert (`bool',optional): Check fan tray not present. Defaults to False\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fan_tray_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L259"
    }
  },
  "verify_chassis_fpc_pic_not_exists": {
    "junos": {
      "doc": " Verifies PIC slot does not exist via \n            - show chassis fpc pic-status\n\n    Args:\n        device (obj): Device object\n        pic (int): PIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_pic_not_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L986"
    }
  },
  "verify_chassis_fpc_pic_status": {
    "junos": {
      "doc": " Verifies slot state via \n            - show chassis fpc pic-status\n\n    Args:\n        device (obj): Device object\n        expected_state (str): Expected state of that slot. For example: \"Online\"\n        pic (int): PIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_pic_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L920"
    }
  },
  "verify_chassis_fpc_slot_port": {
    "junos": {
      "doc": "Verifies chassis fpc slot exists\n\n    Args:\n        device (obj): Device object\n        fpc_slot (str/int): FPC slot number\n        pic_slot (str/int): PIC slot number\n        expected_pic_port (str): Expected PIC port\n        invert (bool): Inverts function\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_slot_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1571"
    }
  },
  "verify_chassis_fpc_slot_state": {
    "junos": {
      "doc": " Verifies slot state via \n            - show chassis fpc\n            - show chassis environment fpc\n\n    Args:\n        device (obj): Device object\n        expected_state (list): Expected state of that slot. For example: [\"Offline\", \"Online\"].\n        expected_slot (str, optional): Expected slot to check. For example: \"0\".\n        all_slots(bool, optional): Flag that indicate all slots need to be verified. Defaults to False.\n        environment(bool, optional): Flag that indicate different show commands. Defaults to False. \n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L15"
    }
  },
  "verify_chassis_hardware_item_present": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Item name\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_hardware_item_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L500"
    }
  },
  "verify_chassis_mic_exists_under_fpc": {
    "junos": {
      "doc": " Verifies MIC $mic exists under FPC $fpc via \n            - show chassis hardware\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        invert (bool, optional): True means verifying PIC does not exist\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_mic_exists_under_fpc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1157"
    }
  },
  "verify_chassis_no_alarms": {
    "junos": {
      "doc": " Verify there are no alarms via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_no_alarms",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L406"
    }
  },
  "verify_chassis_no_error_fpc_mic": {
    "junos": {
      "doc": " Verifies no errored FPC $fpc MIC $mic\n            - show chassis alarms\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_no_error_fpc_mic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1237"
    }
  },
  "verify_chassis_pic_exists_under_mic": {
    "junos": {
      "doc": " Verifies PIC exists under MIC $mic of FPC $fpc via \n            - show chassis hardware\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        invert (bool, optional): True means verifying PIC does not exist\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_pic_exists_under_mic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1052"
    }
  },
  "verify_chassis_power_item_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_power_item_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L622"
    }
  },
  "verify_chassis_re_state": {
    "junos": {
      "doc": " Verify output of show chassis routing-engine ends as expected state\n\n        Args:\n            device (`obj`): Device object\n            expected_re_state (`str`): Expected end of output state\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_re_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L102"
    }
  },
  "verify_chassis_routing_engine": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_routing_engine",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L443"
    }
  },
  "verify_chassis_slot_state": {
    "junos": {
      "doc": " Verify slot's state in 'show chassis routing-engine'\n\n        Args:\n            device (`obj`): Device object\n            expected_slots_states_pairs (`dict`): Expected states with given slots. E.g.,{'slot1':'state1', 'slot2':'state2'}\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L200"
    }
  },
  "verify_chassis_slots_present": {
    "junos": {
      "doc": " Verify slots present in 'show chassis routing-engine'\n\n        Args:\n            device (`obj`): Device object\n            expected_slots (`list`): Given slots\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_slots_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L145"
    }
  },
  "verify_chassis_usb_flag_exists": {
    "junos": {
      "doc": " Verify there is/isn't usb flag in given usb in the routing engine via show chassis hardware detail\n\n        Args:\n            device (`obj`): Device object\n            flag (`str`): USB flag description in output,\n            usb (`str`): USB name in output,,\n            invert (`bool`, optional): Used to indicate a reverse verification. default: False\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_usb_flag_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L787"
    }
  },
  "verify_class_of_service_interface": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_object_type (`str`, optional): Expected object type. Defaults to None\n            expected_object_name (`str`, optional): Expected object name. Defaults to None\n            max_time (`int`, optional): Maximum time to keep checking. Defaults to 60\n            check_interval (`int`, optional): How often to check. Defaults to 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "class_of_service.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_class_of_service_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L68"
    }
  },
  "verify_class_of_service_object_exists": {
    "junos": {
      "doc": " Verifies class_of_service object exists\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface to check\n        expected_object (str): Object name to check for\n        invert (bool, optional): Whether to check if it doesn't exist or not. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "class_of_service.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_class_of_service_object_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L14"
    }
  },
  "verify_cli_and_snmp_cpu_memory": {
    "iosxe": {
      "doc": " Verify CPU and Memory usage information from \n        CLI and SNMP are equivalent\n\n        Args:\n            device (`obj`): Device object\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n            load_tolerance (`int`): Tolerance for load information\n            memory_tolerance (`int`): Tolerance for memory information\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cli_and_snmp_cpu_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L15"
    }
  },
  "verify_cluster_exists_in_route": {
    "junos": {
      "doc": "Verifies cluster exists in route\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        protocol ('str'): Protocol to use in show command\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cluster_exists_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3360"
    }
  },
  "verify_cluster_list_length_of_path": {
    "junos": {
      "doc": "Verify length of cluster list of path (best or non-best)\n\n    Args:\n        target_route ('str'): Route to check\n        cluster_list_length ('int'): Length of cluster list\n        best_route ('bool'): Whether to use best or non-best path\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cluster_list_length_of_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1144"
    }
  },
  "verify_coherentDSP_in_state": {
    "iosxr": {
      "doc": " Verify coherentDSP state\n\n        Args:\n            device (`obj`): Device object\n            dsp (`str`): CoherentDSP port\n            controller_state (`str`): Expected controller state\n            derived_state (`str`): Expected derived state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_coherentDSP_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L68"
    }
  },
  "verify_communities_in_route": {
    "junos": {
      "doc": "Verify communities exist in show route\n\n    Args:\n        route ('str'): Route to check\n        expected_community ('str'): Expected community in route\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_communities_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2319"
    }
  },
  "verify_config_exists_in_routing_options": {
    "junos": {
      "doc": " Verify maximum-path exists in configuration\n\n        Args:\n            device (`obj`): Device object\n            regex (`str`): Config to search\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "running_config.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_config_exists_in_routing_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/verify.py#L22"
    }
  },
  "verify_config_register": {
    "iosxe": {
      "doc": " Check current config register value\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value of config register\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L158"
    }
  },
  "verify_configuration_ddos_protection_no_output": {
    "junos": {
      "doc": " Verifies there is no otuput via show configuration system ddos-protection\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "configuration.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_configuration_ddos_protection_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/verify.py#L51"
    }
  },
  "verify_configuration_hostname": {
    "junos": {
      "doc": " Verifies slot state via show configuration system host-name\n\n    Args:\n        device (obj): Device object\n        expected_hostname (str): Expected hostname\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "configuration.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_configuration_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/verify.py#L15"
    }
  },
  "verify_connectivity": {
    "com": {
      "doc": null,
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_connectivity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L23"
    }
  },
  "verify_current_image": {
    "com": {
      "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_current_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L373"
    },
    "iosxr": {
      "asr9k": {
        "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
        "module_name": "verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_current_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/asr9k/verify.py#L5"
      },
      "ncs5k": {
        "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
        "module_name": "verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_current_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs5k/verify.py#L5"
      }
    }
  },
  "verify_ddos_statistics": {
    "junos": {
      "doc": "Verify statictis via show ddos-protection statistics\n\n    Args:\n        device (object): Device object\n        text (str): Given description of the key\n        expected_value (str): Expected value \n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "ddos.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ddos_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ddos/verify.py#L15"
    }
  },
  "verify_default_route_protocol": {
    "junos": {
      "doc": " Verifies if route is displayed in output of show route command\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): ipv4/ipv6 default route\n            ip_type ('str'): Either ipv4/ipv6\n            inet_type ('str'): type of ip\n            expect_output ('bool'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            subnet_mask_number ('bool'): Flag, to include/exclude subnet masknumber in comparison\n            protocol ('str'): Type of protocol (ex.ospf,ospf3,ect)\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_default_route_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L374"
    }
  },
  "verify_device_connection": {
    "com": {
      "doc": "Verify device connectivity and reconnect if needed\n        Args:\n            device ('obj'): Device Object\n            reconnect ('bool'): flag to reconnect in case device is not connected\n            reconnect_max_time ('int'): maximum time to reconnect\n                                        Default to 900 secs\n            reconnect_interval ('int'): interval of sleep after detecting device is not connected\n                            if not provided, executes the cmd on device\n    Returns:\n        (`bool`) : Return True(device is connected)/False(device is not connected)\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L518"
    }
  },
  "verify_device_connection_state": {
    "com": {
      "doc": "Verify device's Unicon machine state\n        Args:\n            device ('obj'): Device Object\n            reconnect ('bool'): flag to reconnect in case state cannot be detected\n            reconnect_max_time ('int'): maximum time to reconnect\n                                        Default to 900 secs\n            reconnect_interval ('int'): interval of sleep after state detection issue\n                            if not provided, executes the cmd on device\n    Returns:\n        (`str` or None) : Return Unicon machine state\n                          if could not detected, return None\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_connection_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L455"
    }
  },
  "verify_device_tracking_counters_interface": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            interface('str'): interface name\n            message_type('str'): message type - can be one of [received, received_broadcast_multicast, bridged, broadcast_multicast_to_unicast, limited_broadcast_to_local]\n            protocol('str'): protocol\n            message('str'): message type\n            count('int'): number of packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L805"
    }
  },
  "verify_device_tracking_counters_vlan": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            message_type('str'): message type - can be one of [received, received_broadcast_multicast, bridged, broadcast_multicast_to_unicast, limited_broadcast_to_local]\n            protocol('str'): protocol\n            message('str'): message type\n            count('int'): number of packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L678"
    }
  },
  "verify_device_tracking_counters_vlan_dropped": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            feature('str'): feature\n            protocol('str'): protocol\n            message('str'): message type\n            num_dropped('int'): number of dropped packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan_dropped",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L721"
    }
  },
  "verify_device_tracking_counters_vlan_faults": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            faults('list('str')'): list of faults\n            max_time('int', optional): max check time. Defaults to 10\n            check_interval('int', optional): check intervals. Defaults to 5\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan_faults",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L763"
    }
  },
  "verify_device_tracking_policies": {
    "iosxe": {
      "doc": " Verify device tracking policies\n\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str'): sisf features. Default \"Device-tracking\"\n            max_time('int',optional): max check time. Defaults to 20\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L83"
    }
  },
  "verify_device_tracking_policy_configuration": {
    "iosxe": {
      "doc": " Verify device-tracking policy configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            security_level('str'): security level, default='guard'\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            device_role('str', optional): device role. Defaults to None\n            data_glean('str', optional): data glean. Defaults to None\n            prefix_glean('str', optional): prefix glean. Defaults to None\n            neighbor_discovery('str', optional): neighbor discovery (gleaning | not gleaning). Defaults to None\n            dhcp6('str', optional): dhcp6 (gleaning | not gleaning). Defaults to None\n            arp('str', optional): arp (gleaning | not gleaning). Defaults to None\n            dhcp4('str', optional): dhcp6 (gleaning | not gleaning). Defaults to None\n            ipv4_limit_address_count('int', optional): ipv4 address count limit. Defaults to None\n            ipv6_limit_address_count('int', optional): ipv6 address count limit. Defaults to None\n            cache_guard('str', optional): cache guard. Defaults to None\n            tracking('str', optional): tracking. Defaults to None\n            max_time('int',optional): max check time. Defaults to 1\n            check_interval('int',optional): check intervals. Defaults to 1\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_policy_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L148"
    }
  },
  "verify_diff_timestamp": {
    "junos": {
      "doc": "\n    Verify the difference between time on two logs\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('float'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_diff_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L96"
    }
  },
  "verify_dns_packets": {
    "iosxe": {
      "doc": " Analyze the DNS packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address('str'): The captured IP address\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "dns.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dns_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/verify.py#L11"
    }
  },
  "verify_empty_device_tracking_database": {
    "iosxe": {
      "doc": " Verify ip mac binding count in device tracking database\n\n        Args:\n            device('obj'): device object\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_empty_device_tracking_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L397"
    }
  },
  "verify_empty_device_tracking_policies": {
    "iosxe": {
      "doc": " Verify device tracking policies is empty\n\n        Args:\n            device('obj'): device object\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_empty_device_tracking_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L125"
    }
  },
  "verify_enable_password": {
    "iosxe": {
      "doc": " To verify enable password\n    Args:\n        device (`obj`):   Device object\n        password (`str`): password\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed enabling\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enable_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L115"
    }
  },
  "verify_enough_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the disk\n        Args:\n            device ('obj'): Device Object\n            required_size ('int'): required file size\n            directory ('str'): directory to check file size\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n        True if enough space, false otherwise\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enough_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L428"
    }
  },
  "verify_enough_server_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check disk space, scp or sftp\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            required_space ('int'): required total disk space (Optional)\n            directory ('str'): directory to check file size (Optional)\n            timeout('int'): timeout in seconds (Optional, default 300)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n        Returns:\n            True if enough space, False otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enough_server_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L38"
    }
  },
  "verify_extended_community_color": {
    "iosxe": {
      "doc": " Verify color exists in 'show ip bgp {address_family} rd {rd} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            rd ('str'): Route distinguisher\n            route ('str'): Route to check\n            expected_color ('str'): Color value\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_extended_community_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1663"
    }
  },
  "verify_file_details_exists": {
    "junos": {
      "doc": " Verify file details exists\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n            invert ('bool', optional): Invert to check for file absense, default: False\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_details_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L22"
    }
  },
  "verify_file_exists": {
    "apic": {
      "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/verify.py#L8"
    },
    "ios": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L19"
    },
    "iosxe": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L95"
    },
    "iosxr": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L51"
    },
    "nxos": {
      "aci": {
        "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_file_exists",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/platform/verify.py#L9"
      },
      "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L104"
    }
  },
  "verify_file_exists_on_server": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            size ('int'): expected file size in bytes, if not provided will only check\n                file existence with name (Optional)\n            timeout('int'): timeout in seconds (Optional)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n            max_tries ('int;): max number of attempts (Optional)\n        Returns:\n            True if enough space, false otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L120"
    }
  },
  "verify_file_size": {
    "junos": {
      "doc": " Verify specified file size\n\n    Args:\n        device (obj): Device object\n        root_path (str): Root path\n        file (str): File name\n        file_size (int): File size\n        max_time (int, optional): Maximum sleep time. Defaults to 30.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L161"
    }
  },
  "verify_file_size_stable": {
    "nxos": {
      "doc": "\n    Args\n        Verify if the file size is stable, not changing\n        device ('obj'): Device Object\n        file ('str'): file path to check the size\n        max_tries('int'): number of tries to check file stability, defaults 3\n        delay_seconds ('int'): time delay between tries in seconds, defaults 2\n    Returns\n        True if file size is stable, false otherwise\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size_stable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L142"
    }
  },
  "verify_file_size_stable_on_server": {
    "com": {
      "doc": "Verify size stability of given file on the server\n        Args:\n            device ('obj'): Device object\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            timeout ('int'): timeout in seconds\n            fu_session ('obj'): existing FileUtils object to reuse\n            max_tries ('int'): number of tries to check file stability, defaults 3\n            delay ('int'): time delay between tries in seconds, defaults 2\n        Returns:\n            True if file size is stable, false otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size_stable_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L235"
    }
  },
  "verify_files_copied_on_standby": {
    "nxos": {
      "doc": "\n        Verify files transfered successfully to the standby\n        Args:\n            device (`obj`): Device object\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n        Returns:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_files_copied_on_standby",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L186"
    }
  },
  "verify_firewall_counter": {
    "junos": {
      "doc": " Verify counter is not 0\n\n        Args:\n            device (`obj`): Device object\n            filters (`str`): Firewall filter argument\n            counter_name (`str`): Firewall counter name argument\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L119"
    }
  },
  "verify_firewall_filter": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_filter (str): Filter to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L16"
    }
  },
  "verify_firewall_log": {
    "junos": {
      "doc": " Verify show firewall log has output\n\n        Args:\n            device ('obj'): Device object\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L170"
    }
  },
  "verify_firewall_packets": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_packet_count (int): Expected packets to find\n        filter (str): Filter to check\n        counter_name (str): Counter name to check\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L61"
    }
  },
  "verify_firmware_upgrade_status": {
    "apic": {
      "doc": " Verifies that all nodes are in the provided status.\n\n    Args:\n        device (obj): Device to execute on\n        status (str): Expected status\n        firmware_group (str, optional): group to filter by. Defaults to None.\n        max_time (int, optional): Max time to verify. Defaults to 90.\n        check_interval (int, optional): How often to recheck. Defaults to 15.\n\n    Returns:\n        (bool): True if all nodes in the expected status\n                False if some nodes are not in the expected status\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firmware_upgrade_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/verify.py#L9"
    }
  },
  "verify_flow_cache_record_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            expected_source_address ('str'): Source address to match\n            expected_destination_address ('str'): Destination address to match\n            format ('bool'): Format output or not\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_cache_record_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L116"
    }
  },
  "verify_flow_exporter_records_added_and_sent_are_equal": {
    "iosxe": {
      "doc": " Verifies that flow exporter records added and sent are equal\n\n        Args:\n            device ('obj'): Device to use\n            exporter ('str'): Exporter name\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_exporter_records_added_and_sent_are_equal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L52"
    }
  },
  "verify_flow_with_source_and_destination_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            source_address ('str'): Source address to match\n            destination_address ('str'): Destination address to match\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_with_source_and_destination_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L13"
    }
  },
  "verify_hardware_active_ESP_changed": {
    "iosxe": {
      "doc": " Verify active ESP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_active_ESP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L85"
    }
  },
  "verify_hardware_active_RP_changed": {
    "iosxe": {
      "doc": " Verify active RP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_active_RP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L57"
    }
  },
  "verify_hardware_fan_speed_increase": {
    "iosxe": {
      "doc": " Verify fan speed increase\n\n        Args:\n            curr_fans (`list`): current fans\n            prev_fans (`list`): previous fans\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_fan_speed_increase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L24"
    }
  },
  "verify_hardware_redundancy_states": {
    "iosxe": {
      "doc": " Verify redundancy operational state is sso\n        Manual Swact is enabled and\n        Peer state is STANDBY HOT\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): verified result\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_redundancy_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L253"
    }
  },
  "verify_hardware_slot_exist": {
    "iosxe": {
      "doc": " Verify hardware slot exists\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_slot_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L142"
    }
  },
  "verify_hardware_slot_removed": {
    "iosxe": {
      "doc": " Verify hardware slot has removed\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_slot_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L111"
    }
  },
  "verify_hardware_spa_exist": {
    "iosxe": {
      "doc": " Verify spa exists\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_spa_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L211"
    }
  },
  "verify_hardware_spa_removed": {
    "iosxe": {
      "doc": " Verify spa has removed\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_spa_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L169"
    }
  },
  "verify_hello_interval_holdtime": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_hello_interval (int): Expected Hello interval\n        expected_hold_time(int): Expected Holdtime\n        interface(str): Address that passed in show command\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hello_interval_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L332"
    }
  },
  "verify_hostname": {
    "iosxr": {
      "doc": " Verify hostname is matched with expected name\n\n        Args:\n            device (`obj`): Device object\n            expected_hostname (`str`): Expected hostname\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "running_config.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/verify.py#L15"
    }
  },
  "verify_igp_metric_in_ldp": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_metric (str): Expected IGP metric value\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_igp_metric_in_ldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L298"
    }
  },
  "verify_installed_pies": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            installed_packages (`list`): List of packages to verify that exist\n            max_time (`int`): Maximum time to wait while checking for pies installed\n                              Default 300 seconds (Optional)\n          check_interval (`int`): Time interval while checking for pies installed\n                                  Default 30 seconds (Optional)\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_installed_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L130"
    }
  },
  "verify_interface_bundled_interfaces_mode": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): Interfaces list\n            port_channel (`str`): Port channel interface\n            lacp_id (`int`): lacp ID\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_bundled_interfaces_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L571"
    }
  },
  "verify_interface_config_carrier_delay": {
    "iosxe": {
      "doc": "Verify interface carrier_delay config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify has carrier delay\n                           False if verify no carrier delay\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L32"
    }
  },
  "verify_interface_config_no_shutdown": {
    "iosxe": {
      "doc": "Verify interface doesn't have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_no_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L242"
    }
  },
  "verify_interface_config_ospf_bfd": {
    "iosxe": {
      "doc": "Verify interface ospf bfd config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L72"
    }
  },
  "verify_interface_config_rejected": {
    "iosxe": {
      "doc": " Verify if it fails when trying to configure an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            True: Rejected configuration \n            False: Accepted configuration\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_rejected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L722"
    }
  },
  "verify_interface_config_shutdown": {
    "iosxe": {
      "doc": "Verify interface have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L207"
    }
  },
  "verify_interface_data": {
    "junos": {
      "doc": " Verifies interface data based on different criterias\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_physical_description ('str'): expected physical description\n            expected_logical_description ('str'): expected logical description\n            expected_crc_errors ('str'): expected crc errors\n            extensive ('str'): Flag to check extensive in command\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_data",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L860"
    }
  },
  "verify_interface_description_in_running_config": {
    "iosxe": {
      "doc": "Verify interface description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L762"
    }
  },
  "verify_interface_description_in_show_interfaces": {
    "iosxe": {
      "doc": "Verify interface description in show interfaces <interface>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_description_in_show_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L797"
    }
  },
  "verify_interface_errors": {
    "iosxe": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_value (`int`, Optional): Expected errors values\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L824"
    },
    "iosxr": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_value (`int`, Optional): Expected errors values. Defaults to None\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L149"
    },
    "junos": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_error_dict (`dict`, Optional): Expected errors dict. Defaults to None\n            expected_value (`int`, Optional): Expected errors values. Defaults to None\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            all (`bool`, Optional): False if single output error to verify. Default to True.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L504"
    }
  },
  "verify_interface_hold_time": {
    "junos": {
      "doc": " Verify the hold time of an interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_hold_time ('str'): Hold time to check for\n            position ('str'): Position to check for. Options are 'up' or 'down'\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_hold_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L812"
    }
  },
  "verify_interface_in_state": {
    "iosxr": {
      "doc": " Verify interface state and ip\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interfaces name\n            verify_status (`bool`): To verify interface status\n            oper_status (`str`): Expected oper status\n            line_protocol (`str`): Expected line protocol status\n            verify_ip (`bool`): To verify interface ip\n            ip (`str`): Expected interface ip\n            subnet (`str`): Expected interface ip subnet\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L60"
    }
  },
  "verify_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            flag (`bool`): True if verify present \n                           False if verify not present\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L339"
    }
  },
  "verify_interface_load_balance": {
    "junos": {
      "doc": " Verify logical interface load balance\n\n        Args:\n            device (`obj`): Device object\n            load_balance_interfaces (`list`): List of interfaces to check load balance\n            interface (`str`): Pass interface in show command\n            zero_bps_interfaces (`list`): List of interfaces to check zero as bps value\n            traffic_upper_limit_interfaces (`list`): List of interfaces to check upper limit value\n            traffic_upper_limit (`int`): Upper limit bps value\n            expected_tolerance (`int`): Expected tolerance in load balance of interfaces\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n            extensive (`bool`): Execute show command with extensive\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L220"
    }
  },
  "verify_interface_minimum_links": {
    "junos": {
      "doc": " Verify the minimum links needed via show interfaces {interface} extensive\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name    \n            expected_num_of_links('int'): Expected minimum links needed\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_minimum_links",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1044"
    }
  },
  "verify_interface_minumum_bandwidth": {
    "junos": {
      "doc": " Verify the minimum bandwidth needed via show interfaces {interface} extensive\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_bandwidth('str'): Expected minimum bandwidth needed\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_minumum_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1088"
    }
  },
  "verify_interface_mtu": {
    "junos": {
      "doc": " Verify the interface mtu is the expected value via 'show interfaces {interface} extensive'           \n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_mtu('str'): Expected mtu           \n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1347"
    }
  },
  "verify_interface_mtu_packets": {
    "iosxe": {
      "doc": " Verify one mtu packet split into two packets\n\n        Args:\n            pkts (`obj`): Pcap object\n            peer_ip (`str`): Ping ip address\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_mtu_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L107"
    }
  },
  "verify_interface_no_error_counters": {
    "iosxe": {
      "doc": " Verify no error counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            counters (`list`): Extra counters to be checked\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_no_error_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L165"
    }
  },
  "verify_interface_output_pps": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify that the target\n        interfaces output-pps matches {target_expected_pps} and verify that all\n        other interfaces output-pps matches {non_target_expected_pps}.\n        {non_target_expected_pps} and {target_expected_pps} are strings that\n        contain integers with the possibly of \"<\" or \">\" to allow a range\".\n\n        Example:\n            uut.api.verify_interface_output_pps(\n                target_interface='ge-0/0/0',\n                target_expected_pps='0',\n                target_expected_pps_operator='>',\n                non_target_expected_pps_operator='0',\n                non_target_expected_pps='=='\n            )\n\n        Args:\n            target_interface ('str'): Interface to target\n            non_target_expected_pps ('str'): output-pps to expect on non target interfaces\n            target_expected_pps ('str'): output-pps to expect on the target interface\n            target_expected_pps_operator ('str'): Comparison operator\n            non_target_expected_pps_operator ('str'): Comparison operator\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L19"
    }
  },
  "verify_interface_output_pps_load_balance": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify\n        output-pps of interfaces is within tolerance\n\n        Example:\n            device.api.verify_interface_output_pps_load_balance(\n                interfaces=['ge-0/0/0.1', 'ge-0/0/1.1'],\n                expected_tolerance=10,\n                max_time=60,\n                check_interval=10)\n\n        Args:\n            Device ('obj'): Device object\n            interfaces ('list'): List of interfaces \n            expected_tolerance ('int'): Expected tolerance value\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_output_pps_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L126"
    }
  },
  "verify_interface_port_channel_in_no_use": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_in_no_use",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L664"
    }
  },
  "verify_interface_port_channel_status_bundled": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L615"
    }
  },
  "verify_interface_port_channel_status_changed": {
    "iosxe": {
      "doc": " Verify Port channel status\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            status (`str`): Interface status\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L499"
    }
  },
  "verify_interface_port_channel_status_down": {
    "iosxe": {
      "doc": " Verify Port Channel state is down\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n\n        Returns:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L469"
    }
  },
  "verify_interface_port_channel_status_up_and_interfaces_bundled": {
    "iosxe": {
      "doc": " Verify Port channel state and the bundled interfaces\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n            interface('str'): Interface name\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_up_and_interfaces_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L539"
    }
  },
  "verify_interface_pps": {
    "junos": {
      "doc": " Verify interface packets via show interfaces {interface} extensive\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            pps_type('str'): PPS type, \"Input\" or \"Output\"\n            pps_value('int'): PPS value\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1197"
    }
  },
  "verify_interface_protocol": {
    "junos": {
      "doc": " Verify protocol shown via show interfaces terse {interface}\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_protocol('str'): Expected protocol\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None            \n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1133"
    }
  },
  "verify_interface_secondary_addresses": {
    "iosxe": {
      "doc": " Verify secondary addresses are present in RIB\n\n        Args:\n            device (`obj`): Device object\n            connected_sec_addr (`str`): Secondary ip address for connected\n            local_sec_addr (`str`): Secondary ip address for local\n            vrf (`str`): Vrf name\n            address_family (`str`): Address family\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n        Returns:\n            list of address not in RIB\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L431"
    }
  },
  "verify_interface_state_admin_down": {
    "iosxe": {
      "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L312"
    },
    "iosxr": {
      "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L204"
    }
  },
  "verify_interface_state_admin_up": {
    "iosxe": {
      "doc": "Verify interface state is administratively up and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L884"
    },
    "iosxr": {
      "doc": "Verify interface state is administratively up and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L278"
    }
  },
  "verify_interface_state_down": {
    "iosxe": {
      "doc": "Verify interface state is down and and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L285"
    },
    "iosxr": {
      "doc": "Verify interface state is down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L241"
    }
  },
  "verify_interface_state_up": {
    "iosxe": {
      "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L260"
    },
    "iosxr": {
      "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L132"
    }
  },
  "verify_interface_total_queue_counters_dropped_packets": {
    "junos": {
      "doc": " Veirfy queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_packet_count ('dict'): Queue number as key and expected count as value\n            extensive ('str'): Flag to check extensive in command\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_total_queue_counters_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L598"
    }
  },
  "verify_interfaces_extensive_state": {
    "junos": {
      "doc": " Verify interfaces extensive\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name. Default to None\n            expected_oper_status (`str`): Expected oper state for interface\n                Default to 'Up'\n                ex.) expected_oper_status = 'Up'\n            max_time ('int'): Maximum time to keep checking. Default to 30 secs\n            check_interval ('int'): How often to check. Default to 10 secs\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_extensive_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L79"
    }
  },
  "verify_interfaces_input_output_policer_found": {
    "junos": {
      "doc": " Verify input and output policer value for interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            logical_interface ('str'): Logical interface name\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_input_output_policer_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L360"
    }
  },
  "verify_interfaces_queue_packets": {
    "junos": {
      "doc": " Verifies number of packets in an interface queue\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        queue (int): Queue number\n        expected_packets (int): Expected number of packets\n        packet_type (str, optional): Packet type to check for. Defaults to queued.\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_queue_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L430"
    }
  },
  "verify_interfaces_terse_no_ipv6": {
    "junos": {
      "doc": " Verify the hold time of an interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_interface('str'): Expected interface, default: None\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_terse_no_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L961"
    }
  },
  "verify_interfaces_terse_state": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_admin_state (`str`): Expected admin state for interface\n                ex.) expected_admin_state = 'up'\n            expected_link_state (`str`): Expected link state for interface\n                ex.) expected_link_state = 'down'\n            expected_oper_status (`str`): Expected oper state for interface\n                ex.) expected_oper_status = 'up'\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_terse_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L15"
    }
  },
  "verify_iox_disabled": {
    "iosxe": {
      "doc": " \n    verify_iox_disabled\n    Check show iox and confirm all services are not running\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_iox_disabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L97"
    }
  },
  "verify_iox_enabled": {
    "iosxe": {
      "doc": " \n    verify_iox_enabled\n    Check show iox and confirm all services are up and running\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_iox_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L62"
    }
  },
  "verify_ip_and_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing\n        from command 'show segment-routing mpls connected-prefix-sid-map local <address_family>' or\n        from command 'show segment-routing mpls connected-prefix-sid-map <address_family>'\n        Args:\n            device (`obj`): Device to be executed command\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0'\n            address_family (`str`): Address family\n            local (`bool`): Flag to check command with local\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_and_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L369"
    }
  },
  "verify_ip_and_sid_in_segment_routing_mapping_server": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing mapping server\n        from show segment-routing mpls mapping-server {address_family}'\n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0' \n            mapping_server (`str`): mapping server to check\n            ex.)\n                mapping_server = 'PREFIX_SID_EXPORT_MAP'   or\n                mapping_server = 'PREFIX_SID_REMOTE_EXPORT_MAP'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_and_sid_in_segment_routing_mapping_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L584"
    }
  },
  "verify_ip_bgp_route": {
    "iosxe": {
      "doc": " Verify state/pfxrcd exists in 'show ip bgp summary'\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): Route to check\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_state_pfxrcd ('str'): Expected State/Pfxrcd\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1788"
    }
  },
  "verify_ip_cef_nexthop_label": {
    "iosxe": {
      "doc": " Verify ip cef nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Vrf name\n            table (`str`): Not used on IOSXE\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L31"
    },
    "junos": {
      "doc": " Verify nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Not used on JuniperOS\n            table (`str`): Route table\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L32"
    }
  },
  "verify_ip_mac_binding_count": {
    "iosxe": {
      "doc": " Verify ip mac binding count in device tracking database\n\n        Args:\n            device('obj'): device object\n            origin('str'): binding table entry origin\n            expected('int'): expected number for specific type of entry\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L362"
    }
  },
  "verify_ip_mac_binding_in_network": {
    "iosxe": {
      "doc": " Verify the ip-mac binding is present on device\n\n        Args:\n            device('obj'): device object\n            ipAddr('str'): ip address\n            macAddr('str'): mac address (XXXX.XXXX.XXXX)\n            origin('str'): binding table entry origin\n            preflevel('int'): binding table entry preflevel\n            clientid('str', optional): client mac address (aiming for dhcp entry). Defaults to None\n            max_time('int', optional): max check time. Defaults to 60\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_in_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L325"
    }
  },
  "verify_ip_mac_binding_not_in_network": {
    "iosxe": {
      "doc": " Verify the ip-mac binding does not exist in the network\n\n        Args:\n            device('obj'): device object\n            macAddr('str'): mac address (XXXX.XXXX.XXXX)\n            ipAddr('str'): ip address\n            max_time('int',optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_not_in_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L291"
    }
  },
  "verify_ip_pim_vrf_neighbor": {
    "iosxe": {
      "doc": "Verify pim neighbors\n\n    Args:\n            device ('obj'): Device object\n            vrf (`str`): vrf id\n            neighbors (`list`): neighbors to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_pim_vrf_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L21"
    }
  },
  "verify_ip_precedence_ip_precedence": {
    "iosxe": {
      "doc": "Verify that all packets have mapped IP precedence value to EXP\n\n        Args:\n            packets ('obj'): Packets to analyze\n            exclude_src_ip ('str'): Source ip to exclude\n\n        Returns:\n            True / False\n            \n        Raises:\n            None\n    ",
      "module_name": "ip_precedence.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_precedence_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ip_precedence/verify.py#L9"
    }
  },
  "verify_ipv6_nd_raguard_configuration": {
    "iosxe": {
      "doc": " Verify ipv6 nd raguard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            device_role('str', optional): device role. Defaults to None\n            max_hop_limit('int', optional): maximum hop limit. Defaults to None\n            min_hop_limit('int', optional): minimum hop limit. Defaults to None\n            managed_config_flag('str', optional): managed config flag (on | off). Defaults to None\n            other_config_flag('str', optional): other config flag (on | off). Defaults to None\n            max_router_preference('str', optional): maximum router preference. Defaults to None\n            match_ra_prefix('str', optional): match ra prefix-list. Defaults to None\n            match_ipv6_access_list('str', optional): match ipv6 access-list. Defaults to None\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_nd_raguard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L451"
    }
  },
  "verify_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Verify the ipv6 nd raguard policies\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str', optional): sisf features. Defaults to \"RA guard\"\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L422"
    }
  },
  "verify_ipv6_neighbor_state": {
    "junos": {
      "doc": "Verify interface exists with expected state\n\n    Args:\n        device (obj): Device object\n        expected_interface (str): Interface to check for\n        expected_state (str): Expected interface state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ipv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ipv6/verify.py#L15"
    }
  },
  "verify_ipv6_source_guard_configuration": {
    "iosxe": {
      "doc": " Verify ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            validate_address('str', optional): validate address (yes | no). Defaults to None\n            validate_prefix('str', optional): validate prefix (yes | no). Defaults to None\n            permit('str', optional): permit traffic. Defaults to None\n            deny('str', optional): deny traffic. Defaults to None\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_source_guard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L589"
    }
  },
  "verify_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Verify the ipv6 source guard policies\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str'): sisf features. Defaults to \"Source guard\"\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L560"
    }
  },
  "verify_isis_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify ISIS neighbor state\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): ISIS neighbor interfaces\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_isis_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L12"
    }
  },
  "verify_junos_version": {
    "junos": {
      "doc": " Get the hostname from 'show version'\n\n        Args:\n            device ('obj'): device to use\n            expected_junos_version ('str'): Expected JUNOS version\n        \n        Returns:\n            hostname ('str'): Hostname\n\n        Raises:\n            N/A\n    ",
      "module_name": "version.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_junos_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/version/verify.py#L13"
    }
  },
  "verify_keywords_in_output": {
    "com": {
      "doc": "\n    Verify if keywords are in output\n\n    Args:\n        device(`obj`): device to use\n        max_time (`int`): Maximum time to keep checking. Default to 60 secs\n        check_interval (`int`): How often to check. Default to 10 secs\n        keywords (`list`, `str`): list of keywords to find\n        output (`str`): output of show command.\n        invert (`bool`): invert result. (check all keywords not in log)\n                         Default to False\n\n    Returns:\n        Boolean : if True, find the keywords in log\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_keywords_in_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3469"
    }
  },
  "verify_l2vpn_storm_control_configuration": {
    "iosxe": {
      "doc": " Verify storm-control configuration is applied\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            None\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_l2vpn_storm_control_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L23"
    }
  },
  "verify_lacp_interface": {
    "junos": {
      "doc": " Verify if there is expected_interface via show lacp interfaces {interface}            \n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_interface('str'): Expected interface\n            invert('bool'): Invert flag, default: False            \n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1272"
    }
  },
  "verify_lacp_interface_receive_state": {
    "junos": {
      "doc": "Verify the state of an lackp interface\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name. Will be used if expected_interface isn't set\n        expected_state (str): Expected state to check against. Defaults to None.\n        expected_interface (str, optional): Expected interface to check against. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_interface_receive_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L83"
    }
  },
  "verify_lacp_link_state": {
    "junos": {
      "doc": " Verify links of lag interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name (lag interface)\n            links (`list`): list of links for lag interface\n            state_name (`str`): state name where check\n            expected_state (`str`): expected state\n            max_time ('int'): Maximum time to keep checking\n                              Default to 30 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_link_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L16"
    }
  },
  "verify_lacp_role_activity": {
    "junos": {
      "doc": "Verify interfaces roles and activities via show lacp interfaces {interface}\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name. Will be used if expected_interface isn't set\n        role_activity_dicts (dict): Expected interfaces roles and activities.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_role_activity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L134"
    }
  },
  "verify_lag_links": {
    "junos": {
      "doc": " Verify links of lag interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name (lag interface)\n            expected_links (`list`): list of links to verify\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n        Returns:\n            result (`bool` or None): Verified result\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lag_links",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L148"
    }
  },
  "verify_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label\n        local_label (str): Database local label\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L241"
    }
  },
  "verify_ldp_interface": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): expected interface\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L197"
    }
  },
  "verify_ldp_neighbor": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_neighbor ('str'): expected neighbor address\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L153"
    }
  },
  "verify_ldp_overview": {
    "junos": {
      "doc": "Verifies ldp overview values as indicated\n\n    Args:\n        device (obj): device object\n        default_keepalive_interval (int): a number for interval; default is None\n        default_keepalive_holdtime (int): a number for holdtime; default is None \n        max_time (int): Maximum timeout time; default is 60\n        check_interval (int): Interval to check; default is 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L83"
    }
  },
  "verify_ldp_restart_state": {
    "junos": {
      "doc": "Verifies ldp restart state\n\n    Args:\n        device (obj): device object\n        expected_restart_state (str): Expected state for the restart value in ldp\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_restart_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L380"
    }
  },
  "verify_ldp_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        address (str): Neighbor address to check for; default to None\n        expected_address (str): Expected address; default to None\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L20"
    }
  },
  "verify_ldp_session_status": {
    "junos": {
      "doc": "Verifies ldp's restart state and helper mode\n\n    Args:\n        device (obj): device object\n        address (str): Address to use in show command\n        expected_restart_state (str): Expected state for the restart value in ldp\n        helper_mode (str): helper mode state\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_session_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L423"
    }
  },
  "verify_learned_protocol": {
    "junos": {
      "doc": "Verifies learned protocol and next hop agianst 'show route {address} extensive'\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        next_hop ('str'): next hop ip address\n        learn_protocol('str'): Learned protocol\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_learned_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1257"
    }
  },
  "verify_lldp_in_state": {
    "ios": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/verify.py#L9"
    },
    "iosxr": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/verify.py#L9"
    },
    "nxos": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/verify.py#L9"
    }
  },
  "verify_log_contain_keywords": {
    "junos": {
      "doc": "\n    Verify if keywords are in log messages\n\n    Args:\n        device(`obj`): device to use  \n        filename(`str`) : File name to check log\n        max_time (`int`): Maximum time to keep checking\n        check_interval (`int`): How often to check\n        filter (`bool`, optional): flag to use `match` to filter by keywords\n                                   Default to None\n        keywords (`list`, `str`): list of keywords to find\n        output (`str`): output of show command. Default to None\n        invert (`bool`): invert result. (check all keywords not in log)\n                         Default to False\n\n    Returns:  \n        Boolean : if True, find the keywords in log\n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_log_contain_keywords",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L184"
    }
  },
  "verify_log_exists": {
    "junos": {
      "doc": "\n    Verify log exists\n\n    Args:\n        device('obj'): device to use  \n        file_name('str') : File name to check log\n        expected_log ('str'): Expected log message\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        invert ('bool', 'optional'): Inverts to check if it doesn't exist\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_log_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L59"
    }
  },
  "verify_login_with_credentials": {
    "com": {
      "doc": "\n        Verify device is logged in with correct credentials and\n        can not be logged in with wrong credentials when start command is given.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n            invert ('bool', optional): True if device can't be logged in with wrong credentials. Default to False.\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_login_with_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2798"
    }
  },
  "verify_lsp_neighbor": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            expected_status ('str'): Expected neighbor lsp status\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            lsp_state_flag ('bool'): Flag for verifying Lsp state\n        \n        Returns:\n            True/False\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lsp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L14"
    }
  },
  "verify_metric_in_route": {
    "junos": {
      "doc": "Verify metric in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            expected_metric ('int'): Expected metric number\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_metric_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L750"
    }
  },
  "verify_metric_of_route": {
    "junos": {
      "doc": " Verify the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            expected_metric ('int'): Expected metric number\n            ip_address ('str'): IP address in show command.\n            active_tag (bool, optional): True if needs to verify metric of best path. Default to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2589"
    }
  },
  "verify_mfib_vrf_hardware_rate": {
    "iosxe": {
      "doc": "Verify mfib vrf hardware rate\n    Args:\n            device ('obj'): Device object\n            neighbors (`list`): neighbors to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mfib_vrf_hardware_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L175"
    }
  },
  "verify_mfib_vrf_summary": {
    "iosxe": {
      "doc": "Verify mfib vrf summary output\n\n    Args:\n            device ('obj'): Device object\n            vrf (`str`): vrf name\n            s_g (`int`): SSM group ip count\n            g (`int`):  SM group ip count\n            g_m (`int`): Bidir group ip count\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mfib_vrf_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L217"
    }
  },
  "verify_missing_device_tracking_policy_configuration": {
    "iosxe": {
      "doc": " Verify missing device-tracking policy configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            data_glean('bool', optional): data glean. Defaults to False\n            prefix_glean('bool', optional): prefix glean. Defaults to False\n            ipv4_limit_address_count('bool', optional): ipv4 address count limit. Defaults to False\n            ipv6_limit_address_count('bool', optional): ipv6 address count limit. Defaults to False\n            cache_guard('bool', optional): cache guard. Defaults to False\n            tracking('bool', optional): tracking. Defaults to False\n            max_time('int',optional): max check time. Defaults to 1\n            check_interval('int',optional): check intervals. Defaults to 1\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_device_tracking_policy_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L233"
    }
  },
  "verify_missing_ipv6_nd_raguard_configuration": {
    "iosxe": {
      "doc": " Verify missing ipv6 nd raguard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            max_hop_limit('bool', optional): maximum hop limit. Defaults to False\n            min_hop_limit('bool', optional): minimum hop limit. Defaults to False\n            managed_config_flag('bool', optional): managed config flag. Defaults to False\n            other_config_flag('bool', optional): other config flag. Defaults to False\n            max_router_preference('bool', optional): maximum router preference. Defaults to False\n            match_ra_prefix('bool', optional): match ra prefix-list. Defaults to False\n            match_ipv6_access_list('bool', optional): match ipv6 access-list. Defaults to False\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_ipv6_nd_raguard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L508"
    }
  },
  "verify_missing_ipv6_source_guard_configuration": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            validate_prefix('bool', optional): validate prefix. Defaults to False\n            permit('bool', optional): permit traffic. Defaults to False\n            deny('bool', optional): deny traffic. Defaults to False\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_ipv6_source_guard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L636"
    }
  },
  "verify_module_serial_num": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            expected_serial_num (`str`): Expected serial number\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_serial_num",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L18"
    }
  },
  "verify_module_status": {
    "iosxe": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L178"
    },
    "iosxr": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L95"
    },
    "nxos": {
      "doc": " Check status of slot using 'show module'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check module status\n            interval ('int'): Max interval to re-check module status\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L214"
    }
  },
  "verify_mpls_binding_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            ipv4 (`str`): ipv4 with prefix\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L152"
    },
    "iosxr": {
      "doc": " Verify local and remote binding labels for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            prefix (`str`): ipv4/ipv6\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L114"
    }
  },
  "verify_mpls_experimental_bits": {
    "com": {
      "doc": " Verify the first packet to have expected_dst_address has the\n        MPLS experiement bits set to expected_bit_value\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n        expected_bit_value (int): Expected bit value to check\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_experimental_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2120"
    }
  },
  "verify_mpls_forwarding_table_gid_counter": {
    "iosxe": {
      "doc": " Verifies counters for gid in mpls forwarding-table\n\n        Args:\n            prefix_type ('str')  : prefix type \n\t\t\tbytes_labeled_switched ('str') : counter value\n            max_time (`int`, optional): Max time, default: 20\n            check_interval (`int`, optional): Check interval, default: 10\n        Raises:\n            Exception\n\n        Returns\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_gid_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L682"
    }
  },
  "verify_mpls_forwarding_table_has_prefix_in_subnet_range": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_has_prefix_in_subnet_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L271"
    }
  },
  "verify_mpls_forwarding_table_local_label_for_subnet": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            min_range ('int'): Minimum label\n            max_range ('int'): Maximum label\n            in_range ('bool'): True to verify between min_range/max_range, False to verify outside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_local_label_for_subnet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L325"
    }
  },
  "verify_mpls_forwarding_table_outgoing_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label\n            same_as_local (`bool`):\n                True if verify outgoing labels with local label\n                False if verify outgoing labels with expected label\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L26"
    }
  },
  "verify_mpls_forwarding_table_vrf_mdt": {
    "iosxe": {
      "doc": " Verifies counters for mdt in mpls forwarding-table\n\n        Args:\n            vrf ('str')  : vrf name\n            prefix_type ('str') : prefix type \n\t\t\texpected_prefix ('str') : expected prefix \n\t\t\tbytes_labeled_switched ('str') : counter value\n            mdt_cnt ('int'): mdt data configured\n            max_time (`int`, optional): Max time, default: 20\n            check_interval (`int`, optional): Check interval, default: 10\n        Raises:\n            Exception\n\n        Returns\n            Boolean\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_vrf_mdt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L614"
    }
  },
  "verify_mpls_mldp_neighbor": {
    "iosxe": {
      "doc": "Verify mpls mldp neighbors\n\n    Args:\n            device ('obj'): Device object\n            neighbors (`dict`): neighbors contains interface,ip address.\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L66"
    }
  },
  "verify_mpls_mldp_root": {
    "iosxe": {
      "doc": "Verify mpls mldp root\n\n    Args:\n            device ('obj'): Device object\n            neighbors (`list`): neighbors to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mldp_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L132"
    }
  },
  "verify_mpls_mroute_groupip": {
    "iosxe": {
      "doc": "Verify SM, SSM group ip output\n\n    Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            groupip (`str`): multicast group ip\n            sourceip (`str`, optional): sourceip of the multicast group ip\n            flag (`str`, optional): flag\n            outgng_intf (`str`, optional): outgoing interface\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mroute_groupip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L273"
    }
  },
  "verify_mpls_ping": {
    "iosxe": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            mask (`str`):  mask of the ip address\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            vrf (`str`): vrf id\n            vc_id (`str`): vc id\n            tunnel_id (`str`): tunnel id\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L560"
    }
  },
  "verify_neighbor_state_went_down": {
    "junos": {
      "doc": " Verifies message in log\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface that went down\n            realm ('str'): ospf/ospf3 realm\n            fail_reason ('str'): Reason state changed from full to down\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_neighbor_state_went_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L239"
    }
  },
  "verify_next_hop_in_route": {
    "junos": {
      "doc": "Verify next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_next_hop ('str'): Next Hop address\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n            active_tag (bool, optional): True if needs to verify next hop of best path. Default to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1768"
    }
  },
  "verify_no_interface_errors": {
    "junos": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            type (`str`, Optional): Error type to check. Options are 'input', 'output', and None\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L730"
    }
  },
  "verify_no_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is not present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L402"
    }
  },
  "verify_no_isis_neighbor": {
    "iosxr": {
      "doc": " Verify ISIS neighbors not found\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_isis_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L66"
    }
  },
  "verify_no_log_output": {
    "junos": {
      "doc": "\n    Verify no log exists\n\n    Args:\n        device('obj'): device to use  \n        file_name('str') : File name to check log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        invert ('bool', 'optional'): Inverts to check if it doesn't exist\n        match ('str' or 'list', 'optional'): used in show log command to specify output\n        exclude ('str' or 'list', 'optional'): used in show log command to exclude output\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_log_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L114"
    }
  },
  "verify_no_mpls_header": {
    "com": {
      "doc": " Verify no mpls header\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n\n    Returns:\n        bool: True or False\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_mpls_header",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2571"
    }
  },
  "verify_no_ntp_association_configuration": {
    "iosxr": {
      "doc": " Verify no NTP association configuration on the device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ntp_association_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L287"
    }
  },
  "verify_no_ospf3_neigbor_output": {
    "junos": {
      "doc": " Verifies if ospf3 neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf3_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L117"
    }
  },
  "verify_no_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L861"
    }
  },
  "verify_no_ospf_neigbor_output": {
    "junos": {
      "doc": " Verifies ospf neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface being searched for\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L181"
    }
  },
  "verify_no_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospfv3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L609"
    }
  },
  "verify_node_reachable": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n\n        Returns:\n            boolean: True/False\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_node_reachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L16"
    }
  },
  "verify_node_state": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n            state (`str`): state to verify\n\n        Returns:\n            state ('str'): node state\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_node_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L51"
    }
  },
  "verify_ntp_association_with_server": {
    "iosxe": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L216"
    },
    "iosxr": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L191"
    }
  },
  "verify_ntp_leap_second": {
    "iosxe": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L148"
    },
    "iosxr": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L127"
    }
  },
  "verify_ntp_mode": {
    "junos": {
      "doc": " Verify a peer has expected ntp mode\n\n        Args:\n            device (`obj`): Device object\n            expected_mode (`str`): Expected mode\n            expected_peer (`str`): Expected peer IP\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/verify.py#L10"
    }
  },
  "verify_ntp_time": {
    "iosxe": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L170"
    },
    "iosxr": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L147"
    }
  },
  "verify_ntp_time_changed": {
    "iosxe": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L120"
    },
    "iosxr": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L103"
    }
  },
  "verify_opaque_type_7_prefix_and_flags": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_opaque_type_7_prefix_and_flags",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L727"
    }
  },
  "verify_optics_in_state": {
    "iosxr": {
      "doc": " Verify optics state\n\n        Args:\n            device (`obj`): Device object\n            optics (`str`): Optics port\n            rx_power (`float`): Expected RX power\n            controller_state (`str`): Expected controller state\n            led_state (`str`): Expected LED state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_optics_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L12"
    }
  },
  "verify_ospf3_database_prefix": {
    "junos": {
      "doc": "API for verifying ospf3 prefix exists in database\n\n    Args:\n        device (obj): device object\n        expected_prefix (string): prefix being searched for\n        ipaddress (string): IP address to use in show command. Defaults to None. \n        max_time (int, optional): maximum timeoute time. Defaults to 60.\n        check_interval (int, optional): check interval. Defaults to 10.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_database_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L659"
    }
  },
  "verify_ospf3_interface": {
    "junos": {
      "doc": " Verifies ospf3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L231"
    }
  },
  "verify_ospf3_interface_type": {
    "junos": {
      "doc": " Verifies ospf3 interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L17"
    }
  },
  "verify_ospf3_metric": {
    "junos": {
      "doc": "Verify the OSPF3 metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF3 metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L341"
    }
  },
  "verify_ospf3_neighbor_address": {
    "junos": {
      "doc": " Verifies ospf3 neighbors address\n        Args:\n            device ('obj'): device to use\n            max_time ('int'): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n            neighbor_address ('str'): neighbor_address\n            expected_state (`str`): expected neighbor state\n                                    Default to `Full`\n            expected_failure (`bool`): make result opposite\n                                       Default to False\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L963"
    }
  },
  "verify_ospf3_neighbor_instance_state_all": {
    "junos": {
      "doc": "Verifies all states of ospfv3 neighbor instance\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_state (str): Expected state to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_instance_state_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L933"
    }
  },
  "verify_ospf3_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf3 neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive('bool'): Flag to differentiate show commands. Defaults to False.            \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            \n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L161"
    }
  },
  "verify_ospf3_neighbor_state": {
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            neighbor_address ('str'): Neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L63"
    }
  },
  "verify_ospf3_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L389"
    }
  },
  "verify_ospf3_overview": {
    "junos": {
      "doc": " Verifies ospf3 overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L485"
    }
  },
  "verify_ospf3_route_nexthop": {
    "junos": {
      "doc": " Verifies nexthop of ospf3 route\n        Args:\n            device (`obj`): device to use\n            route (`str`): target route\n            expected_nexthop (`str`): expected nexthop of ospf3 route\n            max_time (`int`): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval (`int`): How often to check\n                                    Default to 10 secs\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1027"
    }
  },
  "verify_ospf_advertising_router_metric_in_database": {
    "junos": {
      "doc": " Verifies ospf advertising router metric in database\n\n        Args:\n            device ('obj'): Device to use\n            lsa_id: lsa_id to check\n            ospf_link_id ('str'): Ospf link id to check\n            expected_metric ('str'): Metric of desired ospf link\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_advertising_router_metric_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L806"
    }
  },
  "verify_ospf_database": {
    "junos": {
      "doc": " Verifies information from show ospf database\n\n    Args:\n        device ([obj]): Device object\n        lsa_type ([str], optional): LSA type to check. Defaults to None.\n        expected_lsa_id ([str], optional): Expected LSA ID to find. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        extensive (bool, optional): Extensive or not. Default to True.\n        invert (bool, optional): Inverts verification to check if criteria doesn't exist\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1217"
    }
  },
  "verify_ospf_database_contains_sid_neighbor_address_pairs": {
    "iosxe": {
      "doc": " Verifies the ospf database contains the sid and neighbor address pairs provided\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Ospf router id\n            pairs ('dict'): Get from 'get_ospf_sr_adj_sid_and_neighbor_address'\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_contains_sid_neighbor_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1449"
    }
  },
  "verify_ospf_database_flag": {
    "iosxe": {
      "doc": " Verify ospf database flag does (not) have expected value\n\n        Args:\n            device (`obj`): Device object\n            lsa_id (`str`): Link State ID\n            expected_flag (`str`): Expected flag value\n            has_flag (`bool`): True if expect to contain flag\n                               False if expect not to contain flag\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L25"
    }
  },
  "verify_ospf_database_lsa_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id {lsa_id}' against criteria\n\n    Args:\n        lsa_id ('str'): lsa_id to check\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        expected_node_id ('str'): Expected node ID to check for\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_lsa_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L918"
    }
  },
  "verify_ospf_in_state": {
    "iosxe": {
      "doc": " Verifies ospf process is enabled by checking if neighbors exist.\n        If a list of neighbors is passed it will also verify is those neighbors\n        have reached state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): If specified, function will verify the neighbors\n                               are listed.\n            state('str'): If specified, function will verify the neighbors are in\n                          state.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L277"
    }
  },
  "verify_ospf_interface": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L331"
    }
  },
  "verify_ospf_interface_cost": {
    "junos": {
      "doc": " Verifies ospf cost on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            cost_type ('str'): Cost type configured\n            expected_cost ('int'): Expected configured cost\n            instance ('str'): Instance to use\n            area ('str'): Area to use\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L22"
    }
  },
  "verify_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            subnet_mask ('str'): Subnet mask\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L716"
    }
  },
  "verify_ospf_interface_type": {
    "junos": {
      "doc": " Verifies ospf interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L288"
    }
  },
  "verify_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": "Verify OSPF max-metric configuration\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process ID\n            metric_value (`int`): Metric value to be configured\n            expected_state (`str`): State to check\n            max_time (int): Maximum wait time for the trigger,\n                             in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result(`bool`): verify result\n            state\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L91"
    }
  },
  "verify_ospf_metric": {
    "junos": {
      "doc": "Verify the OSPF metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L472"
    }
  },
  "verify_ospf_neighbor_address": {
    "junos": {
      "doc": " Verifies ospf neighbors address\n        Args:\n            device ('obj'): device to use\n            max_time ('int'): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n            neighbor_address ('str'): neighbor_address\n            expected_state (`str`): expected neighbor state\n                                    Default to `Full`\n            expected_failure (`bool`): flag to make result opposite\n                                       Default to False\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1278"
    }
  },
  "verify_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is in a specific state\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            state ('str'): State to verify the interfaces are in\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1389"
    }
  },
  "verify_ospf_neighbor_addresses_are_not_listed": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is not listed\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_addresses_are_not_listed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1420"
    }
  },
  "verify_ospf_neighbor_instance_state_all": {
    "junos": {
      "doc": "Verifies all states of ospf neighbor instance\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_state (str): Expected state to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_instance_state_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1465"
    }
  },
  "verify_ospf_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive ('bool'): Flag to differentiate show commands\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L403"
    }
  },
  "verify_ospf_neighbor_state": {
    "iosxe": {
      "doc": "Verify OSPF neighbor is state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State to check for neighbor\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False        \n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L152"
    },
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            neighbor_address ('str'): Neighbor address\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L126"
    }
  },
  "verify_ospf_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L526"
    }
  },
  "verify_ospf_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values don't exist\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L577"
    }
  },
  "verify_ospf_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1142"
    }
  },
  "verify_ospf_overview": {
    "junos": {
      "doc": " Verifies ospf overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L623"
    }
  },
  "verify_ospf_route_nexthop": {
    "junos": {
      "doc": " Verifies nexthop of ospf route\n        Args:\n            device (`obj`): device to use\n            route (`str`): target route\n            expected_nexthop (`str`): expected nexthop of ospf route\n            max_time (`int`): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval (`int`): How often to check\n                                    Default to 10 secs\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1341"
    }
  },
  "verify_ospf_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1106"
    }
  },
  "verify_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing gb SRGB Base value\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Router entry to look under\n            expected_srgb_base ('int'): Expected value for SRGB Base\n            expected_srgb_base ('int'): Expected value for SRGB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1141"
    }
  },
  "verify_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing lb SRLB Base value\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            router_id ('str'): Router entry to look under\n            expected_srlb_base ('int'): Expected value for SRLB Base\n            expected_srlb_range ('int'): Expected value for SRLB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1198"
    }
  },
  "verify_ospf_sid_database_prefixes_advertised": {
    "iosxe": {
      "doc": " Verifies prefixes advertised by advertising_router are only allowed_prefixes\n\n        Args:\n            device ('obj'): Device to execute command on\n            advertising_router ('str'): Advertising router id\n            allowed_prefixes ('list'): Prefixes allowed to be advertised.\n                                       Can be subset of full prefix.\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_sid_database_prefixes_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L406"
    }
  },
  "verify_ospf_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L675"
    }
  },
  "verify_ospf_sr_label_preference": {
    "iosxe": {
      "doc": " Verify SR label preference for a process id\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Process if\n            expected_preference ('bool'): Sr label preference that is expected\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_sr_label_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1088"
    }
  },
  "verify_ospf_tilfa_in_state_in_ospf": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in OSPF\n\n        Args:\n            device ('str'): Device object\n            interface ('str'): Interface name\n            process_id ('int'): Process id\n            max_time (int): Maximum wait time in seconds checking an ouput\n            check_interval (int): Wait time between iterations when looping\n\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_tilfa_in_state_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L876"
    }
  },
  "verify_ospf_two_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id ipaddress detail' contains expected_id_1 and expected_id_2\n\n    Args:\n        device ('obj'): device to use\n        expected_id_1 ('str'): expected router id\n        expected_id_2 ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check            \n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_two_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1179"
    }
  },
  "verify_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            expect_output ('str'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L537"
    }
  },
  "verify_ospfv3_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospfv3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L439"
    }
  },
  "verify_ospfv3_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L898"
    }
  },
  "verify_ospfv3_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L802"
    }
  },
  "verify_ospfv3_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L863"
    }
  },
  "verify_ospfv3_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time    \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:  \n            Boolean       \n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L303"
    }
  },
  "verify_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1045"
    }
  },
  "verify_pattern_in_output": {
    "iosxe": {
      "doc": "\n        Verifies pattern list in output in sequence\n        Args:\n            output (str): Output string in which pattern needs to be verified\n            pattern_list (list): List of patterns to verify in output\n        Returns:\n            bool\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pattern_in_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L61"
    }
  },
  "verify_pattern_in_show_logging": {
    "iosxe": {
      "doc": "Verifies the pattern in show logging output\n        Args:\n            device (`obj`): Device object\n            pattern_list (`list`): pattern list to be verified in the output\n            exclude (`str`, optional): String to exclude from show logging\n            include (`str`, optional): String to include from show logging\n            output (`list`, optional): output of show logging in list\n        Returns:\n            True if pattern list matches in show logging output\n            False if pattern list does not match in show logging output\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pattern_in_show_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L151"
    }
  },
  "verify_pcap_as_path": {
    "com": {
      "doc": " Verify pcap AS path values\n    Args:\n        pcap_location (obj): PCAP file location\n        layer (str): Given target route address\n        expected_as_path (str): Expected AS path value\n\n    Returns:\n        bool: True of False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3181"
    }
  },
  "verify_pcap_capability": {
    "com": {
      "doc": " Verify pcap AS path values\n    Args:\n        pcap_location (obj): PCAP file location\n        source (str): Source address\n        destination (str): Destination address\n        expected_capability (str or int): Expected capability in string or integer\n\n    Returns:\n        bool: True of False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_capability",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3285"
    }
  },
  "verify_pcap_dscp_bits": {
    "com": {
      "doc": "Verifies the dscp bits of packets in a capture file\n\n    Args:\n        pcap_location (str): Location of pcap file\n        expected_bits (str/int): Expeceted bits to find / Integer to be converted to bits\n        position (int, optional): Which packet to check. Defaults to 0.\n        expected_protocol (str, optional): Expected protocol to verify against. Defaults to None\n        expected_protocol_message_type (str, optional): Expected protocol message type. Defaults to None\n                                                        Eg.BGPOpen, BGPUpdate, BGPKeepAlive\n        expected_dst_port_number (int, optional): Expected destination port number to verify again. Defaults to None\n        expected_src_address (str, optional): Expected source IP address. Defaults to None\n        expected_dst_address (str, optional): Expected destination IP address. Defaults to None\n        check_all (bool, optional): Ignore position and check all packets until one is found that meets criteria. Defaults to False\n        expected_src_port_number (int, optional): Expected source port number to verify again. Defaults to None\n        port_and_or (str, optional): Whether to and/or the expected port number results. Defaults to 'and'\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_dscp_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2153"
    }
  },
  "verify_pcap_has_imcp_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcp destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmp destination reachable message in pcap\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_has_imcp_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1924"
    }
  },
  "verify_pcap_has_imcpv6_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcpv6 destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmpv6 destination reachable message in pcap\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_has_imcpv6_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1958"
    }
  },
  "verify_pcap_ldp_packet": {
    "com": {
      "doc": "Verifies expected type of a packet\n    Args:\n        pcap_location (str): Location of pcap file\n        expected_ldp_hello (bool): Expected LDPHello\n        expected_ldp_keepalive (bool): Expected LDPKeepAlive\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_ldp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4016"
    }
  },
  "verify_pcap_mpls_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_src_port_number(int): Expected source port number to verify again. Defaults to None\n        expected_dst_port_number (int): Expected destination port number to verify again. Defaults to None\n        port_and_or (str, optional): Whether to and/or the expected port number results. Defaults to 'and'\n        expected_inner_exp_bits (int): Expected inner Exp bits\n        expected_outer_exp_bits (int): Expected outer Exp bits\n        expected_tos (int): Expected tos value\n        expected_protocol_message_type (str, optional): Expected protocol message type. Defaults to None\n                                                        Eg.BGPOpen, BGPUpdate, BGPKeepAlive\n        expected_mpls_label (str): Expected mpls label\n        check_all (bool): Check all matching packets\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_mpls_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2413"
    }
  },
  "verify_pcap_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_protocol (str): Expected protocol in packet\n        expected_dst_port_number (int): Expected destination port number\n        expected_src_port_number (int): Expected source port number\n        expected_tos (int): Expected type of service(tos) value\n        expected_traffic_class (str): Expected traffic class\n        expected_fragment_flag (bool): Expected Fragment flag\n        check_all (bool): Check all matching packets\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2677"
    }
  },
  "verify_pcap_packet_destination_port": {
    "com": {
      "doc": "Verifies expected destination port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_destination_port (`str`): Expected destination port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_destination_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2383"
    }
  },
  "verify_pcap_packet_protocol": {
    "com": {
      "doc": "Verifies expected protocol of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_protocol (`str`): Expected protocol name\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2323"
    }
  },
  "verify_pcap_packet_source_port": {
    "com": {
      "doc": "Verifies expected source port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_source_port (`str`): Expected source port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_source_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2352"
    }
  },
  "verify_pcap_packet_type": {
    "com": {
      "doc": "Verifies expected type of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_type (`str`): Expected type\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2294"
    }
  },
  "verify_ping": {
    "aireos": {
      "doc": " Verify ping\n\n    Args:\n        device ('obj'): Device object\n        ip_addr ('str'): An ip address\n        max_time ('int'): Max time to execute; default is 30\n        check_interval ('int'): An interval to check again; default is 10\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/aireos/verify.py#L22"
    },
    "ios": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L461"
    },
    "iosxe": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            vrf (`str`): vrf id\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L467"
    },
    "iosxr": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L23"
    },
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            size {'str'}: Size value for ping command\n            tos {'str'}: tos value for ping command\n            ping_size {'str'}: data bytes expected\n            ttl ('int'): ttl value passed in command\n            wait ('int'): wait value passed in command\n            mpls_rsvp ('str'): MPLS RSVP value\n            loss_rate ('int'): Expected loss rate value\n            count ('int'): Count value for ping command\n            interface ('str'): source interface\n            source ('str'): Source IP address, default: None\n            rapid ('bool'): Appears in command or not, default: False\n            do_not_fragment ('bool'): Appears in command or not, default: False\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L15"
    }
  },
  "verify_ping_from_server": {
    "iosxe": {
      "doc": "Verify ping from server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address (`str`): IP address to ping\n            count (`int`): repeat ping count\n            interface (`str`): source ip/interface value\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "server.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/verify.py#L10"
    }
  },
  "verify_ping_one_iterations": {
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            size {'str'}: Size value for ping command\n            tos {'str'}: tos value for ping command\n            ping_size {'str'}: data bytes expected\n            ttl ('int'): ttl value passed in command\n            wait ('int'): wait value passed in command\n            mpls_rsvp ('str'): MPLS RSVP value\n            loss_rate ('int'): Expected loss rate value\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_one_iterations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L191"
    }
  },
  "verify_ping_packet_transmission": {
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address\n            count ('int'): Count value for ping command\n            expected_transmitted_rate ('int'): Expected transmitted rate\n            max_time (`int`, Optional): Max time, default: 30 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_packet_transmission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L139"
    }
  },
  "verify_policy_map_packet_count_match": {
    "iosxe": {
      "doc": " Compare the packets' count for the provided traffic flows\n\n        Args:\n            flows_dict (`dict`): Dictionary of traffic flows\n            class_map_out_packets_dict (`dict`): Dictionary of retrieved traffic flows packets count\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_packet_count_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L210"
    }
  },
  "verify_policy_map_packets_counting_up": {
    "iosxe": {
      "doc": "Verify packets are counting up\n\n        Args:\n            device (`obj`): Device object\n            packet_classes (`Dict`): list of packet classes\n                ex.)\n                    packet_classes: ['BGP_Class', 'OSPF_Class', 'LDP_Class']\n\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_packets_counting_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L427"
    }
  },
  "verify_policy_map_policy_map_configuration": {
    "iosxe": {
      "doc": " Verify policy map configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`List`): List of interfaces\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L172"
    }
  },
  "verify_policy_map_policy_map_configuration_policy_map_with_operational": {
    "iosxe": {
      "doc": " Compare configuration policy map with operational \n\n        Args:\n            configurational_container (`dict`): Dictionary of configurational container\n            operational_container (`dict`): Dictionary of operational container\n            table (`obj`): Table object\n            spaces ('str'): Spaces in table field\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configuration_policy_map_with_operational",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L338"
    }
  },
  "verify_policy_map_policy_map_configurational_operational_policy_map": {
    "iosxe": {
      "doc": "Verify configured policy map and operational state match\n\n        Args:\n            device (`obj`): Device object\n            configurational_out (`Dict`): Configurational status\n            interface (`str`): Interface name\n\n        Returns:\n            result(`bool`): Verify result\n            table(`obj`): Table result\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configurational_operational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L21"
    }
  },
  "verify_policy_map_row_added": {
    "iosxe": {
      "doc": "Add row to Table\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            parameter_value (`str`): Parameter value\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_row_added",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L137"
    }
  },
  "verify_policy_map_values": {
    "iosxe": {
      "doc": "Verify running configuration values to operational one and add Table row\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            config_key (`str`): Configuration key to check\n            oper_key (`str`): Operational key to check\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_values",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L95"
    }
  },
  "verify_port_channel_member_state": {
    "iosxe": {
      "doc": "Verifies interface list matches the bundle state\n    i.e. Does interface port-channel state match the bundle_state\n        Args:\n            device ('obj')    : device to use\n            port_channel ('str'): Port-channel interface (i.e. Port-channel5)\n            interfaces ('list'): List of member interfaces to check\n            bundle_state ('bootlean',optional): Bundle State to compare (default is True)\n            max_time ('int'): Max time to check status (Default is 60s)\n            check_interval ('int'): Loop interval (default is 10s)\n        Returns:\n            Boolean. True if interfaces list bundle state match bundle_state. False otherwise.\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_port_channel_member_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L922"
    }
  },
  "verify_ppm_transmissions": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        destination (str): route address\n        expected_distributed_values (list): list of boolean values describing transmission distributed\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        expected_interface (str, optional): Expected interface to check\n    ",
      "module_name": "ppm.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ppm_transmissions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ppm/verify.py#L14"
    }
  },
  "verify_preference_show_route": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            address ('str'): address to be ued in show command\n            preference ('int'): Preference name\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_preference_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3298"
    }
  },
  "verify_protocol_next_hop_in_route": {
    "junos": {
      "doc": "Verify protocol next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_protocol_next_hop ('str'): Protocol next Hop address\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_protocol_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1853"
    }
  },
  "verify_ptp_calibration_states": {
    "iosxe": {
      "doc": " Verify ptp parent values in show ptp parent command\n        Args:\n            device (`obj`): Device object\n            states ('str): PTP calibration state\n            domain ('str): PTP domain\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_calibration_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L245"
    }
  },
  "verify_ptp_clock": {
    "iosxe": {
      "doc": " Verify ptp clock values in show ptp clock command\n        Args:\n            device ('obj'): Device object\n            device_type ('str'): Clock type\n            domain ('int'): PTP domain\n            priority1 ('str'): PTP priority1\n            priority2 ('str'): PTP priority2\n            offset ('list'): PTP offset from master\n            dscp_event ('int'): PTP ip dscp event message (default value is 59)\n            dscp_general ('int'): PTP ip dscp general message ( default value is 47)\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L104"
    }
  },
  "verify_ptp_counters": {
    "iosxe": {
      "doc": " Verify ptp fed counter values in show ptp fed command\n        Args:\n            device ('obj'): Device object\n            interfaces ('list'): PTP interfaces\n            sync_trans ('list'): Sync messages transmitted\n            follow_trans ('int'): Follow up messages transmitted\n            sync_recv ('list'): Sync messages received\n            follow_recv ('str'): Follow up messages received\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L157"
    }
  },
  "verify_ptp_parent": {
    "iosxe": {
      "doc": " Verify ptp parent values in show ptp parent command\n        Args:\n            device (`obj`): Device object\n            priority1 ('str'): PTP priority1\n            priority2 ('str'): PTP priority2\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_parent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L204"
    }
  },
  "verify_ptp_platform_fed_results": {
    "iosxe": {
      "doc": " Verify ptp fed values in show ptp fed command\n        Args:\n            device ('obj'): Device object\n            interfaces ('list'): PTP interfaces\n            states ('list'): Expected states\n            clock_mode ('str'): Clock mode\n            delay_mech ('str'): PTP delay mechanism\n            domain ('int'): PTP domain\n            profile ('str'): PTP profile\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_platform_fed_results",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L55"
    }
  },
  "verify_ptp_states": {
    "iosxe": {
      "doc": " Verify ptp state convergence in show ptp port interface \n        Args:\n            device ('obj'): Device object\n            interface ('list'): PTP interface\n            states ('list'): Expected states\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L16"
    }
  },
  "verify_push_present_in_show_route": {
    "junos": {
      "doc": "Verify if Push value is present in 'show route {address} extensive'\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address for show command\n            push_value ('str'): Push value in show route {address} extensive command\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_push_present_in_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1333"
    }
  },
  "verify_rib_fib_lfib_consistency": {
    "iosxe": {
      "doc": " Verify the outgoing label for route are the same in:\n        - show ip route <route>\n        - show ip cef <route>\n        - show mpls forwarding-table <route>\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): Route or ipn\n            none_pattern (`list`): None label pattern\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rib_fib_lfib_consistency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L99"
    }
  },
  "verify_route_advertised_protocol_community": {
    "junos": {
      "doc": "Verify community has the given community_list against criteria\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Target route to check\n            community_list ('list(str)'): List of communities to verify\n            ip_address ('str'): IP address to check\n            protocol ('str'): Protocol name that passed in command\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking, default 60 seconds\n            check_interval ('int', optional): How often to check, default 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_advertised_protocol_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L438"
    }
  },
  "verify_route_all_as_length": {
    "junos": {
      "doc": "Verifies the as path length of all paths\n\n    Args:\n        device (object): Device object\n        route (str): Route to check path lengths of\n        expected_path_as_length (str): Expected AS path length\n        excluded_paths (list, optional): Paths to exclude from the count. Defaults to [].\n        max_time (int, optional): Max timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_all_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2849"
    }
  },
  "verify_route_as_length": {
    "junos": {
      "doc": " Verify the length as-path of best path and non best path\n\n        Args:\n            device (`obj`): Device object\n            route('str'): Target route address\n            expected_bestpath_as_length (`int`): Expected best path as length\n            expected_nonbestpath_as_length (`int`): Expected non best path as length, default: None\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2391"
    }
  },
  "verify_route_as_path_count": {
    "junos": {
      "doc": "Verify route as path count\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_count (int): Expected count to check against\n        excluded_paths (list, optional): Paths to exclude. Defaults to [].\n        best_path (bool, optional): Check the best path or the next, non-best path. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_internval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_as_path_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2771"
    }
  },
  "verify_route_best_path": {
    "junos": {
      "doc": " Verify Best path is toward $ip_address or with preference $preference\n\n        Args:\n            device (`obj`): Device object\n            target_route (`str`): Target route to check\n            ip_address (`str`): IP Address to verify is best path, default: None\n            preference (`int`): Preference of best path, default: None\n            active_tag (`str`, optional): Active tag to check, default: '*' (best path)\n            interface (`str`, optional): IP address in show command. Defaults to None. \n            extensive (`bool`, optional): 'extensive' added in the show command. Defaults to None.\n            expected_to (`str`, optional): Expected address that be towarded to. Defaults to None.\n            expected_med (`str`, optional): Expected med that be towarded to. Defaults to None.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1385"
    }
  },
  "verify_route_best_path_counter": {
    "junos": {
      "doc": " Verify best path counter\n\n        Args:\n            device ('str'): Device str\n            expected_count ('int'): Expected best path count\n            protocol ('str'): Protocol name. Default to None\n            ip_address ('str'): IP address. Default to None.\n            max_time (`int`, optional): Max time, defaults to 60 seconds\n            check_interval (`int`, optional): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3412"
    }
  },
  "verify_route_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of best path\n\n        Args:\n            device (`obj`): Device object\n            expected_metric (`int`): Expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1523"
    }
  },
  "verify_route_exists": {
    "junos": {
      "doc": " Verifies route exists via show route protocol bgp\n\n    Args:\n        device (obj): Device object\n        expected_route (str): Expected route\n        invert (bool): Default to False. Set to True if verify route doesn't exist.\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.    \n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3255"
    }
  },
  "verify_route_flag": {
    "junos": {
      "doc": " Verify the IGP/EGP flag\n\n        Args:\n            device (`obj`): Device object\n            target_route ('str'): Route to check\n            expected_flag (`str`): Expected IGP flag\n            active_tag (`str`): Flag for 'best path'. Defaults to '*'.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1911"
    }
  },
  "verify_route_forwarding_table": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        expected_nh_index (str): Expected nh-index. Defaults to None\n        expected_netif (str): Expected netif. Defaults to None\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_forwarding_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3022"
    }
  },
  "verify_route_forwarding_type": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_forwarding_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1043"
    }
  },
  "verify_route_four_byte_as": {
    "junos": {
      "doc": " Verify best path counter\n\n        Args:\n            device ('str'): Device str\n            expected_as_path ('int'): Expected 4byte as path\n            peer_address ('str'): IP address.\n            target_address ('str', optional): IP address. Default to None\n            protocol_type ('str', optional): Protocol type. 'receive' or 'advertising'. Default to None\n            protocol ('str', optional): Protocol in command. Defaults to 'bgp'\n            no_protocol_type ('bool', optional): Used to differentiate show commands. Default to False\n            max_time (`int`, optional): Max time, defaults to 60 seconds\n            check_interval (`int`, optional): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None    \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_four_byte_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3503"
    }
  },
  "verify_route_has_as_path": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        expected_as_path (str): Expected AS path\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n        invert (bool, optional): Inverts to check if AS path doesn't exist. Defaults to False.\n        extensive (bool, optional): True if show command ends with 'extensive'. Defaults to False.\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n        peer_addrress ('str', optional): Address used in show command. Defaults to None. \n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2109"
    }
  },
  "verify_route_has_as_path_length": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        expected_as_path_length (int): Expected AS path length\n        protocol_type (str, optional): Protocol type in show command, e.g., advertising-protocol\n                                        or receive-protocol. Defaults to 'receive'.\n        peer_address (str, optional): Peer address used in show command. Defaults to None.\n        target_address (str, optional): Target address used in show command. Defaults to None.\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_as_path_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2203"
    }
  },
  "verify_route_has_no_output": {
    "junos": {
      "doc": "Verify route has no output\n\n    Args:\n        target_route ('str'): Route to check\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n        protocol ('str', optional): Protocol to check. Defaults to None.\n        invert ('bool', optional): Invert the operation. Defaults to False\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                         or receive-protocol. Default to None.\n        peer_address ('str', optional): Address used in command. Defaults to None. \n        target_address ('str', optional): Address used in command. Defaults to None. \n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1701"
    }
  },
  "verify_route_instance_exists": {
    "junos": {
      "doc": "Verifies a route instance exists\n\n    Args:\n        devices (obj): Device object\n        instance_name (str): Instance name\n        expected_instance_name (str): Expected instance name to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_instance_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3598"
    }
  },
  "verify_route_instance_type": {
    "junos": {
      "doc": "Verifies route instance type\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_type (str): Expected instance type\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_instance_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3565"
    }
  },
  "verify_route_is_advertised_or_received": {
    "junos": {
      "doc": " Verify the route is advertised\n\n        Args:\n            device ('obj'): Device object\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            expected_route ('str'): Expected route\n            address ('str'): IP address\n            target_address ('str'): Address used in show command\n            protocol ('str', optional): Protocol name that passed in command. Defaults to 'bgp'\n            extensive ('bool', optional): True means the show command contains 'extensive'. Defaults to False. \n            invert ('bool', optional): True means to verify not advertised or received. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60\n            check_interval ('int', optional): How often to check. Default to 10.     \n\n        Returns:\n            True/False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_is_advertised_or_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L935"
    }
  },
  "verify_route_known_via": {
    "iosxe": {
      "doc": " Verify route known via\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            known_via ('str'): Known via value\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_known_via",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L685"
    },
    "iosxr": {
      "doc": " Verify route known via\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            known_via ('str'): Known via value\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_known_via",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/routing/verify.py#L11"
    }
  },
  "verify_route_logical_system_has_no_output": {
    "junos": {
      "doc": "Verify route logical system has no output\n\n    Args:\n        logical_name ('str'): Logical system name\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n        invert ('bool', optional): Invert the operation. Defaults to False\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_logical_system_has_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3466"
    }
  },
  "verify_route_map": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            route_map_name (`str`): Route map name\n            expected_acl_name (`str`): Access-list name\n            expected_ip_next_hop (`str`): Next-hop ip\n            pbr_sequence_num (`str`): PBR Sequence number\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L15"
    }
  },
  "verify_route_non_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of non best path\n\n        Args:\n            device (`obj`): Device object\n            non_expected_metric (`int`): Not expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_non_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1613"
    }
  },
  "verify_route_output_empty": {
    "junos": {
      "doc": "Verifies if output is empty or not via 'show route protocol {protocol}'\n\n    Args:\n        addr_list('list'): List to verify\n        protocol ('str'): Protocol type to check in show route\n        ip_address ('str'): Address to use in show command\n        invert(bool, optional): Flips from verying \n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_output_empty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3664"
    }
  },
  "verify_route_peer_as": {
    "junos": {
      "doc": "Verify a BGP route's peer as\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_peer_as (str): Expected peer as to check for\n        best_path (bool, optional): Whether to check the best route or not. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Checkout interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3091"
    }
  },
  "verify_route_push_label": {
    "junos": {
      "doc": " Verifies there is Push expected_label in the table_name via show route ip_address\n\n    Args:\n        device (obj): Device object\n        table_name (str): Given table name\n        expected_label (str): Expected label\n        ip_address (str): IP address used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_push_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3148"
    }
  },
  "verify_route_same_as_peer_local": {
    "junos": {
      "doc": "Verifies a route's Peer AS and Local AS are the same\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        best_path (bool): Whether to check the best path or not\n        invert (bool, optional): Invert to check if they're different. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_same_as_peer_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2913"
    }
  },
  "verify_route_table_label": {
    "junos": {
      "doc": " Verify the out label\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label. Defaults to None.\n            php_label (`str`): php label. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1212"
    }
  },
  "verify_route_table_label_output": {
    "junos": {
      "doc": " Verifies there is path via show route table table_name label label_name\n\n    Args:\n        device (obj): Device object\n        table_name (str): Table name used in show command. Defaults to 'mpls.0'\n        label_name (str): Given label used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_label_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3201"
    }
  },
  "verify_route_table_mpls_label": {
    "junos": {
      "doc": "Verifies mpls label based on table name\n\n    Args:\n        device ('str'): Device object\n        table ('str'): Table name\n        label ('bool'): label for show command\n        expected_mpls_label('str'): Expected MPLS label\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2027"
    }
  },
  "verify_route_table_output_interface": {
    "junos": {
      "doc": " Verify the route table output interface\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label\n            table (`str`): Table name, Default mpls.0\n            output_interface (`str`): Output interface. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2975"
    }
  },
  "verify_route_table_route_exists": {
    "junos": {
      "doc": "Verifies a route exists in the route table\n\n    Args:\n        device (obj): Device object\n        route (str): Route table route name\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_route_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3632"
    }
  },
  "verify_routing_accepted_message": {
    "junos": {
      "doc": "Verify accepted message of route\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_message (str): Expected message to verify against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_accepted_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2274"
    }
  },
  "verify_routing_interface_preference": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            protocol ('str'): Protocol name\n            ip_address ('str'): IP address , default: None\n            interface ('str'): Interface name\n            preference ('int'): Preference value\n            extensive ('bool'): Check with extensive command\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_interface_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L200"
    }
  },
  "verify_routing_ip_bgp_neighbors_routes_exists": {
    "iosxe": {
      "doc": " Verify if the initial_route provided exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            expected_result ('bool'): expected result to check\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_bgp_neighbors_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L498"
    }
  },
  "verify_routing_ip_exist": {
    "junos": {
      "doc": " Verify routing ip exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): Destination address to check existence\n            protocol ('str'): Protocol name\n            extensive_protocol ('bool'): If show command includes extensive\n            max_time (`int`): Max time, default: 60\n            metric (`int`): Metric of routing protocol\n            check_interval (`int`): Check interval, default: 10\n            extensive ('bool'): Is extensive\n            exact ('bool'): Is exact\n            protocol_type ('str'): Protocol type \n            command_address ('str'): Address to run command with\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L283"
    }
  },
  "verify_routing_ip_routes": {
    "iosxe": {
      "doc": " Verify ip route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output provided as argument\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L353"
    }
  },
  "verify_routing_local_and_connected_route": {
    "iosxe": {
      "doc": " Verify there is local and connected route registered for the vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n        Returns:\n            (`dict`): Interface dict contain ip route info\n            False\n        Raises:\n            None\n     ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_local_and_connected_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L294"
    }
  },
  "verify_routing_neighbors_advertised_routes_exists": {
    "iosxe": {
      "doc": " Verify if neighbors advertised routes exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            output ('list'): list of neighbors advertised routes (get_bgp_neighbors_advertised_routes)\n        Returns:\n            True\n            False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_neighbors_advertised_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L556"
    }
  },
  "verify_routing_no_ospf_metric_match": {
    "junos": {
      "doc": "Verify that no OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_no_ospf_metric_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L683"
    }
  },
  "verify_routing_ospf_metric_match_or_greater": {
    "junos": {
      "doc": "Verify that all OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ospf_metric_match_or_greater",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L717"
    }
  },
  "verify_routing_route": {
    "junos": {
      "doc": "Verify show route exists against critera\n\n    Args:\n        route ('str'): Route to check\n        expected_protocol_name ('str'): Expected protol in route\n        expected_community ('str'): Expected community in route\n        extensive ('bool): Whether to use extensive or not\n        expected_table_name ('str'): Table name to check for\n        expected_active_tag ('str'): Route table active tag to check, default: '*'\n        expected_tag ('str'): Route table tag to check for\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L500"
    }
  },
  "verify_routing_route_ip_on_interface": {
    "iosxe": {
      "doc": " Verify routes match the configured IP address in running config\n\n        Args:\n            device (`obj`): Device object\n            interface_dict (`dict`): Interface dict contain ip route info. Get from libs/routing/verify.py::verify_routing_local_and_connected_route\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_route_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L327"
    }
  },
  "verify_routing_routes": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        addr_list('list'): List to verify\n        protocol ('str'): Protocol type to check in show route\n        contains ('boolean'): flag to check if addr_list is contained/excluded\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L609"
    }
  },
  "verify_routing_static_routes": {
    "iosxe": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output from 'show ip route static'\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L426"
    },
    "junos": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): destination ip address\n            to ('str'): to value\n            not_to ('str'): not to value\n            known_via ('str'): known via value\n            tag ('str'): Tag value\n            preference ('str'): Preference value\n            protocol_name ('str'): Protocol name\n            extensive ('bool'): if command with extensive at the end\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L96"
    }
  },
  "verify_routing_subnet_entry": {
    "iosxe": {
      "doc": " Verify route entry is present in\n        'show ip route vrf {vrf} {prefix}'/'show ip route {prefix}'\n\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): prefix\n            max_time ('int', optional): maximum time to wait in seconds, \n                default is 30\n            check_interval ('int', optional): how often to check in seconds, \n                default is 10\n            vrf ('str', optional): VRF name, default None\n        Returns:\n            Result('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_subnet_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L793"
    }
  },
  "verify_rsvp_neighbor": {
    "junos": {
      "doc": "\n    Verify there is a neighbor\n\n    Args:\n        device (`obj`): Device object\n        expected_ipaddress (`str`): The IP address that is expected in the output \n        max_time (`int`): Max time, default: 30\n        check_interval (`int`): Check interval, default: 10\n    Returns:\n        result (`bool`): Verified result \n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rsvp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L78"
    }
  },
  "verify_rsvp_session_state": {
    "junos": {
      "doc": " Verify RSVP session state\n\n    Args:\n        device (obj): device object\n        expected_state (str): Expected state\n        session_name (str, optional): Session name. Defaults to None.\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rsvp_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L170"
    }
  },
  "verify_rt_destination": {
    "junos": {
      "doc": "Verify rt destination\n\n        Args:\n            device ('obj'): Device to use\n            target_route ('str'): target route address\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n            interface ('str', optional): expected interface address. Default to None.\n            extensive(bool, optional): True if show command has extensive. Defaults to False.\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rt_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2698"
    }
  },
  "verify_segment_routing_dynamic_metric_type": {
    "iosxe": {
      "doc": " Verify segment-routing metric type under dynamic path with active state\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_type (`str`): Expected metric type\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_dynamic_metric_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L242"
    }
  },
  "verify_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing gb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L532"
    },
    "iosxr": {
      "doc": " Verify segment routing global block range\n\n        Args:\n            device (`obj`): Device object\n            expected_label_min (`int`): Segment routing global block start\n            expected_label_max (`int`): Segment routing global block end\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L17"
    }
  },
  "verify_segment_routing_label_by_traceroute": {
    "iosxr": {
      "doc": " Verify Segment routing label by traceroute\n\n        Args:\n            device (`obj`): Device object\n            traceroute_address ('str): Traceroute address\n            process_id ('str'): Router ISIS process ID\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_label_by_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L64"
    }
  },
  "verify_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing lb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L480"
    }
  },
  "verify_segment_routing_operation": {
    "iosxr": {
      "doc": " Verify Segment routing operation\n\n        Args:\n            device (`obj`): Device object\n            loopback_interface (`str`): Loopback interface\n            label_min (`int`): Segment routing global block start\n            prefix_sid_index (`int`): Prefix-sid index\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_operation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L15"
    }
  },
  "verify_segment_routing_policy_attributes": {
    "iosxe": {
      "doc": " Verify segment-routing policy attributes is as expected\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_bsid (`int`): Expected Binding SID\n            expected_mode (`str`): Expected allocation mode\n            expected_state (`str`): Expected binding state\n            policy_dict (`dict`): Policy dict from parser output \n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n            sid (`int`): Binding sid\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_attributes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L19"
    }
  },
  "verify_segment_routing_policy_hops": {
    "iosxe": {
      "doc": " Verify segment-routing policy hops with order and extract labels\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            segment_list (`list`): Segment list to verify\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n            path_type (`int`): Tath Type, default: explicit\n        Returns\n            result (`bool`): Verified result\n            labels (`list`): Hops labels\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L154"
    }
  },
  "verify_segment_routing_policy_state": {
    "iosxe": {
      "doc": " Verify segment-routing policy state is as expected (Admin/Operational)\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name, if not specified will verify all\n            expected_admin (`str`): Expected admin state\n            expected_oper (`str`): Expected operational state\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L95"
    }
  },
  "verify_segment_routing_traffic_eng_policies": {
    "iosxe": {
      "doc": " Verifies configured traffic_eng policies have expected configurations\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            expected_admin_status ('str'): Expected admin status\n            expected_oper_status ('str'): Expected operational status\n            expected_metric_type ('str'): Expected metric type\n            expected_path_accumulated_metric ('int'): Expected path accumulated metric\n            expected_path_status ('str'): Expected path status\n            expected_affinity_type ('str'): Expected affinity type\n            expected_affinities ('list'): Expected affinities\n            expected_preference ('int'): Expected preference path \n            expected_endpoint_ip ('str'): Expected Endpoint IP\n            max_time ('int'): Maximum amount of time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_traffic_eng_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L681"
    }
  },
  "verify_services_accounting_aggregation": {
    "junos": {
      "doc": " Verify if there are errors in 'show services accounting errors'\n\n    Args:\n        device (obj): Device object\n        expected_source_address ('str'): expected source address\n        expected_destination_address ('str'): expected destination address\n        expected_snmp_interface ('str'): expected snmp interface\n        expected_mpls_label1 ('str'): expected mpls label1\n        expected_mpls_label2 ('str'): expected mpls label2\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_aggregation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L227"
    }
  },
  "verify_services_accounting_errors": {
    "junos": {
      "doc": " Verify if there are errors in 'show services accounting errors'\n\n    Args:\n        device (obj): Device object\n        expected_service_set_dropped ('str'): service set dropped\n        expected_active_timeout_failures ('str'): active timeout failures\n        expected_export_packet_failures ('str'): exported packet failures\n        expected_flow_creation_failures ('str'): flow creation failures\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L163"
    }
  },
  "verify_services_accounting_flow": {
    "junos": {
      "doc": " Verify 'show services accounting flow' against criteria\n\n    Args:\n        device (obj): Device object\n        expected_flow_packets_ten_second_rate (str): flow packets ten second rate\n        expected_active_flows (str): expected active flows\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Inverts the API\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L101"
    }
  },
  "verify_services_accounting_flow_active": {
    "junos": {
      "doc": "Verify accounting flow active count\n\n    Args:\n        device (obj): Device object\n        expected_count (int/str): Expected count\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L17"
    }
  },
  "verify_services_accounting_flow_no_output": {
    "junos": {
      "doc": " Verify no output in 'show services accounting flow'\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L350"
    }
  },
  "verify_services_accounting_status": {
    "junos": {
      "doc": " Verify 'show services accounting status' against criteria\n\n    Args:\n        device (obj): Device object\n        expected_export_format (str): Session address\n        route_record_threshold (str): Expected session state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L47"
    }
  },
  "verify_services_accounting_status_no_output": {
    "junos": {
      "doc": " Verify no output in 'show services accounting status'\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_status_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L310"
    }
  },
  "verify_session_state_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if session state matches expected state\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            address_families ('list')         : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n            neighbor_address ('str')          : Address family to be searched under\n            expected_session_state  ('str')   : List of expected state\n            vrf_name ('str')                  : VRF value\n            max_time ('int'): max time\n            check_interval ('int'): check interval\n        Returns: \n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_session_state_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L630"
    }
  },
  "verify_show_boot_variable": {
    "ios": {
      "doc": " Verifies by issue 'show boot' on the device\n        Args:\n            None\n        Return: the output\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L82"
    }
  },
  "verify_show_ospf3_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf3 database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval (`int`,optional): Check interval, default: 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf3_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L718"
    }
  },
  "verify_show_ospf_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L963"
    }
  },
  "verify_show_ospf_route_network_extensive": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf_route_network_extensive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1004"
    }
  },
  "verify_show_ospfv3_database": {
    "junos": {
      "doc": " Verify data in show ospf3 database\n\n    Args:\n        device (obj): Device object\n        advertising_router (str, optional): Advertising router to check. Defaults to None.\n        lsa_type (str, optional): LSA Type to check for. Defaults to None.\n        expected_node_id (str, optional): Expected node ID to check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospfv3_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L758"
    }
  },
  "verify_show_run_aaa": {
    "iosxe": {
      "doc": "\n    Verify that the configurations available in show run aaa\n    Args:\n        device ('obj'): Device object\n        config_list ('list'): List of configuration command details\n        timeout ('int): timeout value for the command execution\n           ex.)\n               cmd1 = '''aaa group server radius Test-VRf\n                        server name Test-radius\n                        ip vrf forwarding Mgmt-vrf\n                        ip radius source-interface GigabitEthernet0/0\n                        '''\n                cmd2 = '''\n                        aaa group server radius Test-radius\n                        server name Test-server\n                        ip vrf forwarding Mgmt-vrf\n                        '''\n                cmd3 = 'aaa group server radius rad1'\n\n               config_list = [cmd1, cmd2, cmd3]\n    Returns:\n        True - if provided commands are available in 'show run aaa'\n        False - if any of the provided commands are not available in 'show run aaa'\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_run_aaa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L14"
    }
  },
  "verify_sid_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            sid (`int`): SID value\n            code (`str`): Check for codes in output\n                ex.) code = 'L'\n            ip_address (`str`): IP address to check in output\n            avoid_codes (`list`): List of codes to avoid\n                ex.)\n                    avoid_codes = ['L', 'C']\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            output ('list'): Pass output as reference - modifies the calling output\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L498"
    }
  },
  "verify_sid_in_ospf_pairs": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf pairs\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            pairs = [{'sid': 10, 'prefix':'172.16.1.1/32', 'codes': 'M'}, {...}]\n\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_ospf_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1264"
    }
  },
  "verify_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if SID is found in segment-routing\n        from command 'show segment-routing mpls connected-prefix-sid-map ipv4' or\n        from command 'show segment-routing mpls connected-prefix-sid-map local ipv4'\n        \n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family name\n            local (`bool`): Flag to check command with local\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L294"
    }
  },
  "verify_sid_is_advertised_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is advertised in ospf\n        from command 'show ip ospf database opaque-area adv-router {router_id}'\n\n        Args:\n            device (`obj`): Device to be executed command\n            router_id (`str`): Router ID\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_is_advertised_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L798"
    }
  },
  "verify_simulation": {
    "virl": {
      "doc": "Verify if simulation exists\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            max_time (`int`): maximum wait time in seconds. Default: 60\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 10\n            exist (`Bool`): True if simulation exists. False for opposite check.\n\n        Returns:\n            Bool: True/False\n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L92"
    }
  },
  "verify_single_ospf3_neighbor_address": {
    "junos": {
      "doc": " Verifies single ospf3 neighbor exists\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): ospf neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_single_ospf3_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1075"
    }
  },
  "verify_single_ospf_neighbor_address": {
    "junos": {
      "doc": " Verifies single ospf neighbor exists\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): ospf neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_single_ospf_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1388"
    }
  },
  "verify_smallest_stratum_ntp_system_peer": {
    "iosxe": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L20"
    },
    "iosxr": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L17"
    }
  },
  "verify_snmp_statistics": {
    "junos": {
      "doc": " Verify snmp statistics\n\n        Args:\n            device (`obj`): Device object\n            expected_output_counter (`str`): Expected output counter\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n            invert('bool'): True if negative scenario to verify\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_snmp_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/verify.py#L53"
    }
  },
  "verify_snmp_target": {
    "junos": {
      "doc": " Verify snmp target\n\n        Args:\n            device (`obj`): Device object\n            expected_target (`str`): Expected target IP\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_snmp_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/verify.py#L12"
    }
  },
  "verify_source_of_best_path": {
    "junos": {
      "doc": "Verify the source of the best path\n\n    Args:\n        target_route ('str'): Route to check\n        expected_best_path ('str'): Best path address\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_source_of_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1089"
    }
  },
  "verify_specific_route": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        device ('obj'): device to use\n        address('str'): address to search for\n        learn_protocol('str'): Learned protocol\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_specific_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L829"
    }
  },
  "verify_state": {
    "iosxe": {
      "doc": "Trigger Pre-Processor:\n        * verify state:\n    ",
      "module_name": "prepostprocessor.processors",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prepostprocessor/processors.py#L49"
    }
  },
  "verify_static_arp": {
    "iosxe": {
      "doc": " Verify static arp entry is present in ARP table\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L13"
    }
  },
  "verify_status_of_segment_routing": {
    "iosxe": {
      "doc": " Verifies if state matches expected_state state in segment-routing\n        from command 'show segment-routing mpls state'\n\n        Args:\n            device (`obj`): Device to be executed command\n            state (`str`): Expected state\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_status_of_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L343"
    }
  },
  "verify_synced_ntp_server": {
    "iosxr": {
      "doc": " Verify synched NTP server\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`list`): list of Server peer IP address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 1200\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 30\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_synced_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L247"
    }
  },
  "verify_syslog_bgp_peer_down": {
    "iosxe": {
      "doc": " Verify log for bgp peer down message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_bgp_peer_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L201"
    }
  },
  "verify_syslog_bgp_peer_up": {
    "iosxe": {
      "doc": " Verify log for bgp peer up message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_bgp_peer_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L169"
    }
  },
  "verify_syslog_interface_link_down": {
    "iosxe": {
      "doc": " Verify link down message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_link_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L274"
    }
  },
  "verify_syslog_interface_link_up": {
    "iosxe": {
      "doc": " Verify link up message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_link_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L233"
    }
  },
  "verify_syslog_interface_shut": {
    "iosxe": {
      "doc": " Verify log for interface shut message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_shut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L9"
    }
  },
  "verify_syslog_interface_up": {
    "iosxe": {
      "doc": " Verify log for interface up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L48"
    }
  },
  "verify_syslog_ospf_neighbor_down": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor down message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_ospf_neighbor_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L129"
    }
  },
  "verify_syslog_ospf_neighbor_up": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_ospf_neighbor_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L88"
    }
  },
  "verify_tacacs_packet": {
    "iosxe": {
      "doc": "Validating Authentication, Authorization and Accounting json data\n    with the verifydict data\n        Args:\n            tacacs_json_dict: parsed tacacs packet data\n            verfifydict:  dict having authentication or accounting or\n                        authorization attributes to verify\n        Returns:\n            final_verify: dict contains authentication or accounting or\n            authorization bool values\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tacacs_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1040"
    }
  },
  "verify_task_replication": {
    "junos": {
      "doc": " Verifies task replication info\n\n        Args:\n            device (`obj`): device to use\n            expected_state (`str`): expected state of stateful replication to verify\n            expected_re_mode (`str`): expected re mode to verify\n            expected_protcols (`list`, Optional): specify protocols to check\n                                                  Default to None\n            expected_protcols_sync_status (`list`, Optional): specify protocol sync status which corresponding to expected_protocols\n                                                              Default to None\n            output (`str`, optional): output of show task replication\n                                      Default to None\n            max_time (`int`): Maximum time to keep checking\n                              Default to 60 secs\n            check_interval (`int`): How often to check\n                                    Default to 15 secs\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "task.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_task_replication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/task/verify.py#L21"
    }
  },
  "verify_ted_interface": {
    "junos": {
      "doc": " Verifies ted interface exists\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use in show command\n            expected_interface ('str'): expected interface\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ted.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ted_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ted/verify.py#L16"
    }
  },
  "verify_template_bind": {
    "iosxe": {
      "doc": "\n    check if template is bound to an interface\n    Arg:\n        device('obj'):Name of the dut\n        interface('str'): switch interface\n        template_name('str'): template name\n        method(`str`, optional): {static|dynamic}. Default value is dynamic.\n    returns:\n            True if given template is bound to an interface with given method type\n            False otherwise\n    ",
      "module_name": "dot1x.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_template_bind",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/verify.py#L16"
    }
  },
  "verify_test_aaa_cmd": {
    "iosxe": {
      "doc": " To verify radius connectivity with test aaa command\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius server group name\n        username (`str`): username\n        password (`str`): password\n        path (`str`): legacy/new-code\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_test_aaa_cmd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L93"
    }
  },
  "verify_traceroute": {
    "iosxe": {
      "doc": " Verify traceroute if it matches expected_output_label_list or expected_hop_list\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            ignore_last_label ('bool'): Ignore last label in expected_output_label_list,\n            ignore_first_label ('bool'): Ignore first label in expected_output_label_list\n            expected_output_label_list ('list'): Expected output label list of first hop\n                ex.) \n                    expected_output_label_list = ['16052','16062','16063','39']\n            expected_hop_list ('list'): Expected hop list\n                ex.) \n                    expected_hop_list = ['10.19.198.29', '10.169.14.129', '10.169.14.34', '192.168.1.1']\n            check_first_hop ('bool'): flag to check all labels only from first hop's labels. \n                                      if False, all top label from each hop will be checked.\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How long to wait between checks\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L62"
    }
  },
  "verify_traceroute_final_hop": {
    "junos": {
      "doc": " Verifies the final hop is expected_final_hop via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address passed in command\n            expected_final_hop ('str'): Expected final hop\n            source ('str'): address used in command. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n            check_interval ('int', optional): How often to check. Default to 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_final_hop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L65"
    }
  },
  "verify_traceroute_first_hop_address": {
    "iosxe": {
      "doc": " Verify if first hop ip address is expected one\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            expected_hop_address ('str'): Expected next hop ip address\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_first_hop_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L17"
    }
  },
  "verify_traceroute_intermediate_hop": {
    "junos": {
      "doc": " Verifies the intermediate hop is expected_intermediate_hop via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address passed in command\n            expected_intermediate_hop ('str'): Expected intermediate hop\n            source ('str'): address used in command. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n            check_interval ('int', optional): How often to check. Default to 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_intermediate_hop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L136"
    }
  },
  "verify_traceroute_number_of_hops": {
    "junos": {
      "doc": " Verifies the number of hops is expected_amount via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            expected_amount ('int'): Expected number of hops in output\n            ip_address ('str'): IP address passed in command\n            max_time ('int', optional): Maximum time to keep checking. Default to 100\n            check_interval ('int', optional): How often to check. Default to 30\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_number_of_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L15"
    }
  },
  "verify_traffic_statistics_data": {
    "junos": {
      "doc": " Verify queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_input_packet ('str'): input packet\n            expected_output_packet ('str'): output packet\n            invert ('bool'): Check the invert way, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traffic_statistics_data",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L655"
    }
  },
  "verify_tunnel_stats": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            tunnel_id (`str`): Tunnel id\n            direction (`str`): Traffic direction\n            tx_packets (`int`): Transmit packets\n            pkt_rate (`str`): Frames per seconds\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 3\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L102"
    }
  },
  "verify_tunnel_status": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            tunnel_id (`str`): Tunnel id\n            expected_tunnel_status (`str`): Tunnel status, Default is up\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L59"
    }
  },
  "verify_tunnels_state": {
    "iosxe": {
      "doc": " Verifies if the tunnels created are up\n\n        Args:\n            prot ('str')  : state of the prot\n\t\t\tstate ('str') : state of the tunnel\n\t\t\ttunnels ('list') : list of tunnels to be checked\n\n        Raises:\n            Exception\n\n        Returns\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnels_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L415"
    }
  },
  "verify_vc_destination_sect": {
    "iosxe": {
      "doc": " Verifies the required field in destionation section of VC detail\n\n        Args:\n            destination_peer ('str')  : Address of the Peer VC\n            vc_id ('str') : vc id of the circuit\n\t\t\tvc_state ('str') : state of the VC\n\t\t\toutput_interface ('str') : output interface of the VC\n            preferred_path('str') : Preferred path of the vc\n            preferred_path_state ('str') : Preferred path state of the vc\n            Parsed_output: output of the section passed\n        Raises:\n            Exception\n\n        Returns\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vc_destination_sect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L481"
    }
  },
  "verify_vc_state": {
    "iosxe": {
      "doc": "Verify VC state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State of the VC\n            destination_address (`str`): Destination address of the vc\n            vc_id ('str'): VC id \n        Returns:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vc_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L196"
    }
  },
  "verify_vpls_same_interface_for_l2vpn_and_l3vpn": {
    "iosxe": {
      "doc": " Verify that subinterface for L3VPN vrf and service instance for L2VPN bridge-domain belong to same interface\n\n        Args:\n            device('obj'): device object \n            vrf ('str'): vrf name\n            bridge_domain_id ('int'): bridge-domain id\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.vpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vpls_same_interface_for_l2vpn_and_l3vpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/vpls/verify.py#L23"
    }
  },
  "verify_vpn_route_targets": {
    "iosxe": {
      "doc": " Verify route target are imported, exported or both\n\n        Args:\n            device ('obj'): Device object\n            route_targets ('list'): list of route targets to check\n                ex.)\n                    [\n                        '65109:4005',\n                        '65109:4006'\n                    ]\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            address_family ('str'): address family to check\n            vrf ('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vpn_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpn/verify.py#L17"
    }
  },
  "verify_vrf_advertised_routes": {
    "iosxe": {
      "doc": " Verify if each VRF/route distinguisher have at least one advertised route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be search under in advertised routes\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L25"
    }
  },
  "verify_vrf_description_in_running_config": {
    "iosxe": {
      "doc": "Verify vrf description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            Exception\n            KeyError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L287"
    }
  },
  "verify_vrf_description_in_show_ip_vrf_detail": {
    "iosxe": {
      "doc": "Verify vrf description in show ip vrf detail <vrf>\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n            Exception\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_description_in_show_ip_vrf_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L252"
    }
  },
  "verify_vrf_received_routes": {
    "iosxe": {
      "doc": " Verify if each neighbor has at least one received route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be searched under in received routes\n            received_routes ('dict'): Advertised routes from command:\n                 'show bgp {address_family} all neighbors {neighbor} routes\n\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_received_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L181"
    }
  },
  "verify_vrf_routes_in_bgp_table": {
    "iosxe": {
      "doc": " Verify that each VRF and route distinguisher has at least one route in BGP table\n\n        Args:\n            device ('obj'): Device object\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            address_family ('address_family'): Address family\n            routes_dict ('dict'): Parsed output from command 'show ip bgp all'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_routes_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L109"
    }
  },
  "web_interaction": {
    "com": {
      "doc": "\n    Returns result of user choice after changes in physical world.\n\n    Use-case:\n\n    There are rare cases when a result must be manually determined by a human.\n    Such as a test that relies upon changes that happen in the physical world.\n    For these cases this utility that allows a user to decide the result.\n\n    This api web_interaction can pause test execution and notify a user via email\n    that input is required. This email has a link to a webpage hosted by WebInteraction\n    that has a form for the user to submit to give a result.\n\n    Args:\n        subject (str) : A brief description of the interaction.\n        message (str) : This is the message that describes to the\n                        user what the test is and how they determine\n                        the result.\n        section_name (ref) : Reference to section or step that called interaction.\n                        This provides the name of the test to the user,\n                        as well as the APIs to return a test result.\n\n        [optional args]\n        from_address(str): The email address that the notification will be sent from.\n                           Defaults to the user login.\n        to_address(str): The email address that the notification will be sent to.\n                         Defaults to the user login.\n\n    Returns:\n        result (str)\n        Eg. aborted, blocked, errored, failed, passed, passx, skipped\n\n    Note:\n        You can apply additional arguments to webinteraction api.\n        List of arguments for the api can be found at the link below:\n        https://pubhub.devnetcloud.com/media/pyats/docs/aetest/results.html?highlight=webinteraction#interaction-results\n        In this api, section_name is equal to section in the above docs.\n\n    Blitz example:\n\n        - api:\n              function: web_interaction\n              common_api: True\n              alias: To wait, till manual work is done.\n              arguments:\n                subject: \"Testing web interaction api\"\n                message: \"Message for the user about how to assess this test\"\n                section_name: \"%VARIABLES{section}\"  #section ref can be passed like this.\n                from_address: \"example@cisco.com\"\n              result_status: \"passx\"\n              include:\n                  - \"passx\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "web_interaction",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3921"
    }
  },
  "write_erase_reload_device": {
    "iosxe": {
      "doc": "Execute 'write erase' on device, reload and apply basic configuration.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            static_route_ip (`str`): IP address for static route configuration\n            config_sleep (`int`): Time to wait after applying mgmt IP configuration\n            vrf (`str`): VRF to use for management IP operations\n            via_mgmt(`str`): Via to use to reach the device mgt IP.\n            post_reconnect_time(`int`): Maximum time to wait after reload before configuring\n\n\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L186"
    }
  },
  "write_erase_reload_device_without_reconfig": {
    "ios": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/utils.py#L5"
    },
    "iosxe": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L25"
    },
    "nxos": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#L20"
    }
  }
}