{
  "analyze_core_by_bingopy": {
    "nxos": {
      "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            clear_cores (`bool`): To clear cores before generating core. Default to True\n            service (`str`): service to generate core\n            remote_server (`str`): remote server name in testbed yaml\n            remote_user (`str`, optional): userid on remote server\n            remote_pass (`str`, optional): password of userid on remote server\n            remote_location (`str`): Location of saving core file\n            remote_via: (`str`, optional): specify connection to get ip\n                                 if not specified, use active connection one\n            vrf (`str`): VRF for copying file to remote server\n                         Defaults to management\n            private_image_tree (`str`, optional): Tree location for private image\n            private_image_process_path (`str`, optional): Process path for private image\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n            clear_cores (`Bool`, optional): clear cores if TRUE. Defaults to True\n            max_time (`int`, optional): Maximum time to wait. \n                                        Defaults to 360 seconds\n            check_interval (`int`, optional): Time interval while checking.\n                                              Defaults to 10 seconds\n            bloggered (`bool`, optional): if use bloggered command\n                                          if False, use kill -6 command instead\n                                          Defaults to True\n            source_location (`str`, optional): source file location for BingoPy\n                                               Defaults to /auto/andatc/independent/shellrc-files/current/rc/.bashrc.build\n            bingopy_location (`str`, optional): bingopy location\n                                                Defaults to /ws/xianqin-sjc/bingo/blogger_core.pl\n\n        Returns:\n            out (`str`): Output of BingoPy\n    ",
      "module_name": "bingopy.bingopy",
      "uid": "analyze_core_by_bingopy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/bingopy/bingopy.py#L16"
    }
  },
  "analyze_core_by_ucd": {
    "linux": {
      "doc": " analyze core by UCD\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            core_file (`str`): core file name with path to analyze by UCD\n            gdb_command (`str`, optional): gdb command in GDB\n                                           Defaults to `bt full`\n            ucd_command (`str`, optional): ucd command with path and options\n                                           Defaults to `/ws/cvanka-sjc/ucd/ucd -c`\n            timeout (`int`, optional): timeout to expire for device.receive()\n                                       Defaults to 300 seconds\n\n        Returns:\n            out (`str`): Output of UCD\n    ",
      "module_name": "ucd.ucd",
      "uid": "analyze_core_by_ucd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/ucd/ucd.py#L9"
    }
  },
  "analyze_rate": {
    "com": {
      "doc": " Get the traffic rate and the corresponding unit\n\n        Args:\n            rate (`str`): Passed rate as a string\n\n        Returns:\n            rate (`int`): Traffic rate\n            rate_unit (`str`): Traffic rate unit\n            original_rate (`str`): Original Traffic rate\n    ",
      "module_name": "utils",
      "uid": "analyze_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L587"
    }
  },
  "analyze_udp_in_mpls_packets": {
    "iosxe": {
      "doc": " Analyze passed packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address ('str'): Destination IP address\n            ttl (`int`): Time to live\n            packet_count (`int`): Packet count to check during\n                packet analysis\n            destination_port (`int`): Destination port start \"traceroute\"\n        Returns:\n            pkt count\n        Raises:\n            None \n    ",
      "module_name": "udp.get",
      "uid": "analyze_udp_in_mpls_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udp/get.py#L10"
    }
  },
  "apic_rest_delete": {
    "apic": {
      "doc": "DELETE REST Command to delete information from the device\n\n        Args:\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n        \n        Raise:\n            None\n    ",
      "module_name": "utils",
      "uid": "apic_rest_delete",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L117"
    }
  },
  "apic_rest_get": {
    "apic": {
      "doc": "GET REST Command to retrieve information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            query_target {self|children|subtree}: \n                                'self': (default) MO itself\n                                'children': just the MO's child objects\n                                'subtree': MO and its child objects\n            rsp_subtree {no|children|full}: Specifies child object level \n                                            included in the response\n                                            'no': (default) the response\n                                                   does not include any children\n                                            'children': return only the child \n                                                        objects\n                                            'full': includes the full tree \n                                                    structure\n            rsp_prop_include {all|naming-only|config-only}:\n                                'all': all properties of the objects\n                                'naming-only': only the naming properties\n                                'config-only': only configurable properties\n            rsp_subtree_include (`string`): specify additional contained objects \n                                          or options to be included\n            rsp_subtree_class (`string`) : specify classes\n            query_target_filter (`string`): filter expression\n            expected_status_code (`int`): Expected result\n\n        Returns:\n            Output from REST API\n        \n        Raise:\n            None\n    ",
      "module_name": "utils",
      "uid": "apic_rest_get",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L9"
    }
  },
  "apic_rest_post": {
    "apic": {
      "doc": "POST REST Command to configure information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            payload (`dict`): Dictionary containing the information to send via\n                            the post\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n        \n        Raise:\n            None\n    ",
      "module_name": "utils",
      "uid": "apic_rest_post",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L75"
    }
  },
  "bits_to_netmask": {
    "com": {
      "doc": " Convert bits to netmask\n        Args:\n            bits ('int'): bits to converts\n            ex.) bits = 32\n        Raise:\n            None\n        Returns:\n            Net mask\n    ",
      "module_name": "utils",
      "uid": "bits_to_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L828"
    }
  },
  "change_configuration_using_jinja_templates": {
    "com": {
      "doc": "Use Jinja templates to change the device configuration\n\n        Args:\n            device (`obj`): Device object\n            template (`obj`): Jinja template to be used in configuration\n            parameters (`dict`): Dictionary of all the parameters\n                                 to be passed to the Jinja template\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "jinja.configure",
      "uid": "change_configuration_using_jinja_templates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/configure.py#L11"
    }
  },
  "change_hostname": {
    "iosxe": {
      "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "change_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L291"
    }
  },
  "change_power_cycler_state": {
    "com": {
      "doc": " Turn on the power cycler\n        Args:\n            device ('obj'): Device object\n            powercycler ('obj'): Powercycler object\n            state ('str'): Power cycler state on/off\n            outlets ('str'): Power cycler outlets\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "uid": "change_power_cycler_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L126"
    }
  },
  "check_traffic_drop_count": {
    "iosxe": {
      "doc": "Check for the drop count\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            drop_count (`str`): Expected drop count\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "uid": "check_traffic_drop_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L337"
    }
  },
  "check_traffic_expected_rate": {
    "iosxe": {
      "doc": "Check the expected rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            expected_rate (`str`): Traffic expected received rate\n            tolerance (`str`): Traffic loss tolerance percentage\n            traffic_gen (`str`): Traffic generating device\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "uid": "check_traffic_expected_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L150"
    }
  },
  "check_traffic_transmitted_rate": {
    "iosxe": {
      "doc": "Check transmitted rate was set correctly or not\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "uid": "check_traffic_transmitted_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L60"
    }
  },
  "clear_bgp_neighbors_soft": {
    "iosxe": {
      "doc": " Reset connection to a BGP neighbor or to all neighbors, diretion in or out\n        Args:\n            device ('obj') : Device object\n            direction ('str'): Direction type:\n                ex.)\n                    direction = \"in\"\n                    direction = \"out\"\n            neighbor (`str`): Neighbor address\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "uid": "clear_bgp_neighbors_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L39"
    }
  },
  "clear_interface_config": {
    "iosxe": {
      "doc": " Clears interface config\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to clear\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "clear_interface_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L650"
    }
  },
  "clear_interface_counters": {
    "iosxe": {
      "doc": " Clear interface counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "clear_interface_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L59"
    }
  },
  "clear_interface_interfaces": {
    "iosxe": {
      "doc": " clear interface configuration\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "clear_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L985"
    }
  },
  "clear_ip_bgp_vrf_af_soft": {
    "iosxe": {
      "doc": " BGP soft clear using vrf, address family and AS number\n\n        Args:\n            device ('obj'): device object\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            as_number ('int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "uid": "clear_ip_bgp_vrf_af_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L12"
    }
  },
  "clear_ospf_trace_log": {
    "junos": {
      "doc": "\n    Clear log ospf_trace_log\n\n    Args:\n        device (`obj`): Device object\n        ospf_trace_log(`str`): OSPF trace log\n\n    Returns:\n        None\n    ",
      "module_name": "ospf.configure",
      "uid": "clear_ospf_trace_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L74"
    }
  },
  "clear_packet_buffer": {
    "iosxe": {
      "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "clear_packet_buffer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L224"
    }
  },
  "compare_archive_config_dicts": {
    "iosxe": {
      "doc": " Checks for differences between two 'show archive' dictionaries\n\n        Args:\n            dict1('dict'): first dictionary\n            dict2('dict'): seconds dictionary\n\n        Returns:\n            list of commands that are different between the two configs\n        Raises:\n            None\n    ",
      "module_name": "archive.verify",
      "uid": "compare_archive_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/verify.py#L9"
    }
  },
  "compare_config_dicts": {
    "com": {
      "doc": " Compare two configuration dicts and return the differences\n\n        Args:\n            a (`dict`): Configuration dict\n            b (`dict`): Configuration dict\n            exclude (`list`): List of item to ignore. Supports Regex.\n                              Regex must begins with ( )\n        Returns:\n            out (`str`): differences\n    ",
      "module_name": "utils",
      "uid": "compare_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L234"
    }
  },
  "compare_metric_of_route": {
    "junos": {
      "doc": " Compare the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            ip_address ('str'): IP address in show command.\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "compare_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2638"
    }
  },
  "compared_with_running_config": {
    "com": {
      "doc": " Show difference between given config and current config\n        Args:\n            config ('dict'): Config to compare with\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "uid": "compared_with_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1237"
    }
  },
  "config_acl_on_interface": {
    "iosxe": {
      "doc": " Configures acl on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n    ",
      "module_name": "acl.configure",
      "uid": "config_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L89"
    }
  },
  "config_extended_acl": {
    "iosxe": {
      "doc": " Configure extended ACL on device\n\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            protocol ('str'): protocol\n            src_ip ('str'): source start ip\n            src_step ('str'): increment step for source ip\n            src_wildcard ('str'): source wildcard\n            dst_ip ('str'): destination start ip\n            dst_step ('str'): increment step for destination ip\n            dst_wildcard ('str'): destination wildcard\n            dst_port ('str'): Acl destination port\n            entries ('int'): Acl entries\n\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "acl.configure",
      "uid": "config_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L13"
    }
  },
  "config_interface_carrier_delay": {
    "iosxe": {
      "doc": " Configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            delay (`int`): Delay time in second\n            delay_type (`str`): Delay type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L293"
    }
  },
  "config_interface_mtu": {
    "iosxe": {
      "doc": " Config MTU on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mtu_bytes (`int`): MTU bytes\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L378"
    }
  },
  "config_interface_negotiation": {
    "iosxe": {
      "doc": " Config negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L90"
    }
  },
  "config_interface_ospf": {
    "iosxe": {
      "doc": " Config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): Ospf process id\n            area ('int'): Ospf area code\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_interface_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L444"
    }
  },
  "config_interface_subinterface_and_secondary_addresses": {
    "iosxe": {
      "doc": " Configure sub-interface and secondary addresses on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sub_interface_num (`int`): Subinterface to be added to\n                                 interface name\n            ip_address(`str`): IP addressed to be configured on interface\n            prefix(`str`): prefix to be used in configuration\n            encap_type (`str`): Encapsulation type\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_interface_subinterface_and_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L537"
    }
  },
  "config_ip_on_interface": {
    "iosxe": {
      "doc": " Configure IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): IP addressed to be configured on interface\n            mask (`str`): Mask address to be used in configuration\n            eth_encap_type (`str`): Encapsulation type\n            eth_encap_val (`str`): Encapsulation value\n            sub_interface (`str`): Subinterface to be added to interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "config_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L476"
    }
  },
  "config_mac_aging_time": {
    "iosxe": {
      "doc": " Config mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n            aging_time (`int`): mac aging-time\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "uid": "config_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L12"
    }
  },
  "config_mac_learning": {
    "iosxe": {
      "doc": " Config mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "uid": "config_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L70"
    }
  },
  "config_mpls_ldp_on_interface": {
    "iosxe": {
      "doc": " Config ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L15"
    },
    "junos": {
      "doc": " Config ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L12"
    }
  },
  "configure_arp_timeout": {
    "iosxe": {
      "doc": " Config arp timeout on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            timeout (`int`): timeout in second\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "uid": "configure_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L12"
    }
  },
  "configure_bfd_on_interface": {
    "iosxe": {
      "doc": " Configures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            interval ('str'): interval\n            min_rx ('str'): min_rx\n            multiplier ('str'): multiplier\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "uid": "configure_bfd_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L12"
    }
  },
  "configure_bgp_additional_paths": {
    "iosxe": {
      "doc": " Configure additional_paths on bgp router\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L745"
    }
  },
  "configure_bgp_address_advertisement": {
    "iosxe": {
      "doc": " Configure address advertisement on router bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            ip_address ('str'): ip address\n            mask ('str'): mask\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_address_advertisement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L804"
    }
  },
  "configure_bgp_advertise_additional_paths": {
    "iosxe": {
      "doc": " Configures advertisement for additional paths\n\n        Args:\n            device ('obj'): device to configure\n            bgp_as ('str'): router bgp number\n            neighbor ('str'): neighbor to advertise to\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_advertise_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L773"
    }
  },
  "configure_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Configures import path selection on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n            type('str'): type of selection to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L25"
    }
  },
  "configure_bgp_neighbor": {
    "iosxe": {
      "doc": " Configures bgp neighbor on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_as('str'): neighbor_as to configure\n            neighbor_address('str'): address of neighbor\n            source_interface('str'): used to configure update-source on neighbor\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L95"
    }
  },
  "configure_bgp_neighbor_activate": {
    "iosxe": {
      "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            steps('obj')               : Context manager steps\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L424"
    }
  },
  "configure_bgp_neighbor_as_override": {
    "iosxe": {
      "doc": " Configure AS override in VRF\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_neighbor_as_override",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L709"
    }
  },
  "configure_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " Configure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L650"
    }
  },
  "configure_bgp_router_id": {
    "iosxe": {
      "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            router_id('str'): router_id of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L60"
    }
  },
  "configure_bgp_soo_on_inbound_from_neighbor": {
    "iosxe": {
      "doc": " Configures extended community SoO on inbound from neighbor using soo_rt\n\n        Args:\n            device('obj'): device to execute on\n            soo_rt('str'): route to configure SoO with\n            bgp_as('str'): what router bgp to configure on\n            vrf('str'): what vrf to configure on\n            neighbor_address('str'): what neighbor to configure on\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_bgp_soo_on_inbound_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L160"
    }
  },
  "configure_by_jinja2": {
    "com": {
      "doc": " Configure using Jinja template\n\n        Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "jinja.utils",
      "uid": "configure_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/utils.py#L20"
    }
  },
  "configure_cdp": {
    "ios": {
      "doc": " \n        Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L11"
    },
    "iosxe": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L11"
    },
    "iosxr": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L11"
    },
    "nxos": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L9"
    }
  },
  "configure_community_list_community_list_permit": {
    "iosxe": {
      "doc": " Configure community list permit\n\n        Args:\n            device ('obj'): Device object\n            community_list('list'): community list which contains dictionary\n                dictionary contains following 3 keys:\n                    seq ('int'): sequence number\n                    permit ('str'): permit value\n                    community ('str'): community value - Optional\n                ex.)\n                    [ \n                        {\n                            'seq': 1,\n                            'permit': 'deny',\n                            'community': 62000:1\n                        },\n                        {   \n                            'seq': 1,\n                            'permit': 'permit'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'deny',\n                            'community': '62000:2'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'permit'\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "community_list.configure",
      "uid": "configure_community_list_community_list_permit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/community_list/configure.py#L15"
    }
  },
  "configure_control_plane_control_plane_policy": {
    "iosxe": {
      "doc": " Configure control plane policy\n\n        Args:\n            device ('obj'): Device object\n            config('list'): List of commands to configure\n                ex.)\n                    [\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': False\n                        },\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': True\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring control plane policy\n\n    ",
      "module_name": "control_plane.configure",
      "uid": "configure_control_plane_control_plane_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/control_plane/configure.py#L11"
    }
  },
  "configure_device": {
    "com": {
      "doc": "shut interface\n\n        Args:\n            device (`obj`): Device object\n            config (`str`): Configuration to apply\n            config_timeout ('int'): Timeout value in sec, Default Value is 150 sec\n    ",
      "module_name": "utils",
      "uid": "configure_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L754"
    }
  },
  "configure_interface_description": {
    "iosxe": {
      "doc": "configure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description(`str`): Description\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1050"
    }
  },
  "configure_interface_directed_broadcast": {
    "iosxe": {
      "doc": " Configures directed-broadcast on interface\n\n        Args:\n            device ('obj'): device to run on\n            interfaces ('list'): list of interfaces to configure\n            configure ('bool'): config/unconfig\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_directed_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L712"
    }
  },
  "configure_interface_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L866"
    }
  },
  "configure_interface_l3_port_channel": {
    "iosxe": {
      "doc": " Configure Port channel and lag interfaces\n\n        Args:\n            target (`str`): Target device to configure on\n            port_channel (`str`): Port Channel Interface\n            neighbor_address (`str`): Peer IP address\n            neighbor_netmask(`str`): Peer address Net-mask\n            interfaces(`List`): List of interfaces to configure\n            testbed (`obj`): Testbed object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_l3_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L752"
    }
  },
  "configure_interface_monitor_session": {
    "iosxe": {
      "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            monitor_config (`list`): list of monitor session configuration\n                ex.) \n                    monitor_config = [{\n                            'session_name': 1,\n                            'session_type': 'erspan-source',\n                            'interface': 'GigabitEthernet10',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        },\n                        {\n                            'session_name': 2,\n                            'session_type': 'erspan-destination',\n                            'interface': 'GigabitEthernet11',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                        }\n                    ]\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1107"
    }
  },
  "configure_interface_passive": {
    "iosxr": {
      "doc": " Configure Interface passive\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_passive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L42"
    }
  },
  "configure_interface_point_to_point": {
    "iosxr": {
      "doc": " Configure Interface point to point\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_point_to_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L12"
    }
  },
  "configure_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Configures switchport on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan ('str'): access_vlan to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L677"
    }
  },
  "configure_interfaces_shutdown": {
    "ios": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L9"
    },
    "iosxe": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L811"
    },
    "iosxr": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L72"
    },
    "nxos": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L9"
    }
  },
  "configure_interfaces_unshutdown": {
    "ios": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L24"
    },
    "iosxe": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L826"
    },
    "iosxr": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L87"
    },
    "nxos": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L24"
    }
  },
  "configure_isis_md5_authentication": {
    "iosxr": {
      "doc": " Configure MD5 authentication\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            hello_password ('str'): Authentication password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "uid": "configure_isis_md5_authentication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L147"
    }
  },
  "configure_isis_metric": {
    "iosxr": {
      "doc": " Configure ISIS metric\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            metric ('str'): Metric value\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "uid": "configure_isis_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L111"
    }
  },
  "configure_isis_metric_style": {
    "iosxr": {
      "doc": " Configure ISIS metric style\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n            metric_style ('str'): Metric style\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "uid": "configure_isis_metric_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L41"
    }
  },
  "configure_isis_net_address": {
    "iosxr": {
      "doc": " Configure ISIS network address\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            net_address ('str'): Net Address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "uid": "configure_isis_net_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L12"
    }
  },
  "configure_isis_prefix_sid": {
    "iosxr": {
      "doc": " Configure ISIS prefix-sid\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            prefix_sid ('str'): Prefix-Sid\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "uid": "configure_isis_prefix_sid",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L74"
    }
  },
  "configure_l2vpn_storm_control": {
    "iosxe": {
      "doc": " Configures storm control under service instance\n\n        Args:\n            device('obj'): device to configure\n            interface('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "uid": "configure_l2vpn_storm_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L13"
    }
  },
  "configure_lacp_on_interface": {
    "iosxe": {
      "doc": " Configure LACP on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            min_max_bundle (`int`): Number of minimum/maximum bundles\n            minumum_bundle (`bool`): True if configuring minimum-bundle\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_lacp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L909"
    }
  },
  "configure_lldp": {
    "ios": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L8"
    },
    "iosxe": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L8"
    },
    "iosxr": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L8"
    },
    "nxos": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L8"
    }
  },
  "configure_maximum_prefix_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure maximum prefix to router bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            maximum_prefix ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'maximum_prefix': maximum prefix number\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.6,\n                        'maximum_prefix': 5,\n                    }\n                ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: maximum_prefix is not a list\n\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_maximum_prefix_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L271"
    }
  },
  "configure_no_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Enables bgp neighbors if provided otherwise it enabled the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_id ('int'): router bgp_id to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors('list'): Libs with BGP neighbors\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_no_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L623"
    }
  },
  "configure_no_shut_ospf": {
    "iosxe": {
      "doc": " Configure no shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_no_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L82"
    }
  },
  "configure_ntp_iburst": {
    "iosxe": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L108"
    },
    "iosxr": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L89"
    }
  },
  "configure_ntp_master": {
    "iosxe": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L77"
    },
    "iosxr": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L60"
    }
  },
  "configure_ntp_server": {
    "iosxe": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L129"
    },
    "iosxr": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n            auth_key ('list'): Authentication key number corresponding\n                               to server ip\n                ex.)\n                   auth_key = [\n                        '1',\n                        '2',\n                   ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L110"
    }
  },
  "configure_ospf_cost": {
    "iosxe": {
      "doc": "configure ospf cost\n\n        Args:\n            device (`obj`): Device object\n            ospf_cost (`int`): Ospf cost value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L245"
    }
  },
  "configure_ospf_interface_metric_cost": {
    "junos": {
      "doc": " Configure ospf interface metric cost\n\n        Args:\n            device ('obj'): Device to configure\n            interface ('str'): Interface to configure\n            area ('str'): Area\n            cost_type ('str'): Cost type\n            cost ('int'): Cost\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_interface_metric_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L44"
    }
  },
  "configure_ospf_max_metric_router_lsa_on_startup": {
    "iosxe": {
      "doc": "Configure max-metric router-lsa on start-up\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            metric_value (`int`): Metric value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_max_metric_router_lsa_on_startup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L22"
    }
  },
  "configure_ospf_networks": {
    "iosxe": {
      "doc": " Configures ospf on networks\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            ip_address ('list'): List of ip_address' to configure\n            netmask ('str'): Netmask to use\n            area ('str'): Area to configure under\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L275"
    }
  },
  "configure_ospf_passive_interface": {
    "iosxe": {
      "doc": "Configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): ospf process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L162"
    },
    "junos": {
      "doc": "configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            area (`str`): IP address of area\n\n        Returns:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L12"
    }
  },
  "configure_prefix_list_prefix_list": {
    "iosxe": {
      "doc": " Configures prefix-list on device\n\n        Args:\n            device('obj'): device to configure on\n            prefix_list('list'): prefix list which contains dictionary\n                dictionary contains following 3 keys:\n                    prefix_list ('str'): prefix list value\n                    seq ('int'): sequence number\n                    route ('str'): IP address\n                ex.)\n                   [ {\n                        'prefix_list': 1,\n                        'seq': 5,\n                        'route': '172.16.0.0/24'\n                    },\n                    {\n                        'prefix_list': 2,\n                        'seq': 5,\n                        'route': '172.16.1.0/24'\n                    },\n                    {\n                        'direction': 'in',\n                        'permit': 'deny',\n                        'route': '10.94.12.1',\n                        'comparison_operator': '<',\n                        'comparison_value': 36\n                    } \n                    ]\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "uid": "configure_prefix_list_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L16"
    }
  },
  "configure_prefix_list_prefix_list_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure prefix list to bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            prefix_list ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'prefix_list': prefix,\n                    'direction': direction\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.4',\n                        'prefix_list': 'in'\n                        'direction': 'in'\n                    },\n                    {\n                        'neighbor': '192.168.1.5',\n                        'prefix_list': 'out'\n                        'direction': 'out'\n                    }\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: prefix_list is not a list\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_prefix_list_prefix_list_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L205"
    }
  },
  "configure_route_map_route_map": {
    "iosxe": {
      "doc": " Configures route-map on device\n\n        Args:\n            device('obj'): device to configure on\n            route_map('list'): route-map list which contains dictionary\n                dictionary contains following 6 keys:\n                    seq ('int'): sequence number\n                    route_map ('str'): route-map name\n                    prefix_list ('str'): prefix-list value\n                    set_community ('str'): set community value\n                    match_community ('str'): match community value\n                    set_as_path ('str') : set as-path values\n                ex.)\n                    [\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test_out',\n                        'match_community': 2\n                    },\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test',\n                        'set_community': '62000:1'\n                    },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring route map\n    ",
      "module_name": "route_map.configure",
      "uid": "configure_route_map_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/route_map/configure.py#L12"
    }
  },
  "configure_route_map_route_map_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure route map to bgp neighbors\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            vrf_address_family ('str'): address family for vrf\n            route_map ('list'): route map list which contains dictionary\n                dictionary contains following 5 keys:\n                    neighbor ('str'): neighbor value\n                    route_map ('str'): route-map name\n                    direction ('str'): direction type\n            ex.)\n                [\n                    {\n                        'neighbor': '192.168.60.10',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.60.11',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.6.10',\n                        'route_map': 'community_test_in',\n                        'direction': 'in'\n                    },\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: route_map is not a list\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_route_map_route_map_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L329"
    }
  },
  "configure_routing_ip_route": {
    "iosxe": {
      "doc": " Configure ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "uid": "configure_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L16"
    }
  },
  "configure_routing_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            destination_address('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "uid": "configure_routing_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L118"
    }
  },
  "configure_segment_routing_gb_range": {
    "iosxr": {
      "doc": " Add segment routing\n\n        Args:\n            device ('obj'): Device object\n            label_min (`int`): Segment routing global block start\n            label_max (`int`): Segment routing global block end\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "uid": "configure_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L12"
    }
  },
  "configure_segment_routing_prefix_sid_index": {
    "iosxr": {
      "doc": " Configure segment routing prefix-sid index\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface (`str`): Interface to configure\n            prefix_sid_index (`int`): Prefix-sid index\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "uid": "configure_segment_routing_prefix_sid_index",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L69"
    }
  },
  "configure_segment_routing_sr_prefer": {
    "iosxr": {
      "doc": " Configure segment routing sr prefer\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "uid": "configure_segment_routing_sr_prefer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L40"
    }
  },
  "configure_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Configures shut/enable on bgp neighbors if provided otherwise the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_as ('int'): router bgp_as to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors ('list'): List of neighbors to shut/enable\n            noshut ('bool'): does the opposite of shut if True\n        Returns:        \n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n\n    ",
      "module_name": "bgp.configure",
      "uid": "configure_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L464"
    }
  },
  "configure_shut_ospf": {
    "iosxe": {
      "doc": " Configure shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "configure_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L54"
    }
  },
  "configure_static_arp": {
    "iosxe": {
      "doc": " Configure static arp\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "uid": "configure_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L75"
    }
  },
  "configure_subinterfaces_for_vlan_range": {
    "iosxe": {
      "doc": " Configures multiple subinterfaces looping through vlan range\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Physical interface to configure\n            vlan_id_start ('int'): Start of vlan range\n            vlan_id_step ('int'): Size of vlan range step\n            vlan_id_count ('int'): How many steps for vlan range\n            netmask ('str'): Netmask to configure\n            network_start ('str'): Start of network\n            network_step ('str'): Size of network step\n            ospf_network_type ('str'): Ospf network type to configure\n\n        Raises:\n            SubCommandFailure\n\n        Returns:\n            list of configured interfaces\n\n    ",
      "module_name": "interface.configure",
      "uid": "configure_subinterfaces_for_vlan_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1173"
    }
  },
  "configure_syslog_server": {
    "iosxe": {
      "doc": " Configure Syslog servers\n\n        Args:\n            device ('obj') : Device to be configured server\n            server ('str'): Syslog server to be configured            \n            steps ('obj'): Context manager object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "syslog.configure",
      "uid": "configure_syslog_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/configure.py#L8"
    }
  },
  "configure_tacacs_server": {
    "iosxe": {
      "doc": " Configure tacacs server\n\n        Args:\n            device ('obj'): Device object\n            server_config('list'): List of configuration for server\n                dictionary contains following 3 keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type ('int'): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                ex.)\n                    [\n                        {\n                            'host': '192.168.21.1',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                        },\n                        {\n                            'host': '192.168.21.2',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.2'\n                        }\n                    ] \n                        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ",
      "module_name": "server.configure",
      "uid": "configure_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#L12"
    }
  },
  "configure_vrf_description": {
    "iosxe": {
      "doc": "Configure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description(`str`): Description\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "uid": "configure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L13"
    }
  },
  "configure_vrf_on_interface": {
    "iosxe": {
      "doc": " Configure interface to use VRF\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface\n            vrf ('str'): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "configure_vrf_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1019"
    }
  },
  "convert_server_to_linux_device": {
    "com": {
      "doc": "\n    Args\n        converts a server block to a device object\n        device ('obj'): Device object\n        server ('str'): server hostname\n\n    Returns:\n        A Device object that can be connected\n    ",
      "module_name": "utils",
      "uid": "convert_server_to_linux_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1180"
    }
  },
  "copy_data_to_device": {
    "linux": {
      "doc": " Copies data into a device and creates a file to store that data.\n        Args:\n            data ('str'): The data to be copied\n            destination ('str'): Folder of where to store file\n            filename ('str'): Name of the file created. If left none then a \n                random name will be generated\n        Raise:\n            Exception: Permission Denied, File Creation Failed\n        Returns:\n            Path (str): path of created file\n    ",
      "module_name": "platform.utils",
      "uid": "copy_data_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L123"
    }
  },
  "copy_file_from_tftp_ftp": {
    "com": {
      "doc": "Copy file to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): File name\n            pro (`str`): Transfer protocol\n        Returns:\n            None\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "copy_file_from_tftp_ftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L439"
    }
  },
  "copy_file_to_running_config": {
    "ios": {
      "doc": " Restore config from local file using copy function\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L43"
    },
    "iosxe": {
      "doc": " Restore config from local file using copy function\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L43"
    }
  },
  "copy_from_device": {
    "com": {
      "doc": "\n    Copy file from device to linux server (Works for sftp and ftp)\n        Args:\n            device ('Device'): Device object\n            remote_path ('str'): remote file path to copy to on the server\n            local_path ('str'): local file path to copy from the device\n            server ('str'): hostname or address of the server\n            protocol('str'): file transfer protocol to be used\n            vrf ('str'): vrf to use (optional)\n            timeout('int'): timeout value in seconds, default 300\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "copy_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L918"
    }
  },
  "copy_issu_image_to_disk": {
    "iosxe": {
      "doc": " Copy image from a server to disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            address ('str'): Server address\n            path ('str'): Path on server\n            protocol ('str'): Transfer protocol\n            image ('str'): Image name\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n            wait_time_after_copy ('int'): Wait time after file copy\n            overwrite ('bool'): Flag to overwrite existing file\n        Raises:\n            Exception: Failed copying ISSU image to disk\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "copy_issu_image_to_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L71"
    }
  },
  "copy_pcap_file": {
    "com": {
      "doc": "Copy pcap filename to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): Pcap filename\n            command ('str'): cli command to copy file from remote\n                             server to local server\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "copy_pcap_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L255"
    }
  },
  "copy_to_device": {
    "com": {
      "doc": "\n    Copy file from linux server to device\n        Args:\n            device ('Device'): Device object\n            remote_path ('str'): remote file path on the server\n            local_path ('str'): local file path to copy to on the device\n            server ('str'): hostname or address of the server\n            protocol('str'): file transfer protocol to be used\n            vrf ('str'): vrf to use (optional)\n            timeout('int'): timeout value in seconds, default 300\n            compact('bool'): compress image option for n9k, defaults False\n            username('str'): Username to be used during copy operation\n            password('str'): Password to be used during copy operation\n            use_kstack('bool'): Use faster version of copy, defaults False\n                                Not supported with a file transfer protocol\n                                prompting for a username and password\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L844"
    }
  },
  "copy_to_server": {
    "com": {
      "doc": " Copy file from directory to server\n\n        Args:\n            testbed ('obj'): Testbed object\n            protocol ('str'): Transfer protocol\n            server ('str'): Server name in testbed yaml or server ip address\n            local_path ('str'): File to copy, including path\n            remote_path ('str'): Where to save the file, including file name\n            timeout('int'): timeout value in seconds, default 300\n            fu_session ('obj'): existing FileUtils object to reuse\n            quiet ('bool'): quiet mode -- does not print copy progress\n        Returns:\n            None\n\n        Raises:\n            Exception\n    ",
      "module_name": "utils",
      "uid": "copy_to_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L375"
    }
  },
  "default_interface": {
    "iosxe": {
      "doc": " configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L957"
    },
    "junos": {
      "doc": " Reset junos interface configuration \n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L13"
    }
  },
  "delete_file_on_device": {
    "junos": {
      "doc": " Deletes file on device\n\n    Args:\n        device (obj): Device object\n        file_name ('str'): File name\n    ",
      "module_name": "utils",
      "uid": "delete_file_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L197"
    }
  },
  "delete_file_on_server": {
    "com": {
      "doc": " delete the file from server\n    Args:\n        testbed ('obj'): testbed object containing the server info\n        server ('str\"): server address or hostname\n        path ('str'): file path on server\n        protocol ('str'): protocol used for deletion, defaults to sftp\n        timeout ('int'):  connection timeout\n    Returns:\n        None\n    ",
      "module_name": "utils",
      "uid": "delete_file_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1135"
    }
  },
  "delete_local_file": {
    "iosxe": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "delete_local_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L31"
    }
  },
  "delete_unprotected_files": {
    "iosxe": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L253"
    },
    "nxos": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L97"
    }
  },
  "destroy_connection": {
    "com": {
      "doc": " Destroy connection device\n        Args:\n            device ('obj'): Device object\n\n    ",
      "module_name": "utils",
      "uid": "destroy_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L743"
    }
  },
  "diff_configuration": {
    "com": {
      "doc": " Show difference between two configurations\n        Args:\n            config1 ('str'): Configuration one\n            config2 ('str'): Configuration two\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "uid": "diff_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1254"
    }
  },
  "disable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Disables bfd on ospf protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "uid": "disable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L74"
    }
  },
  "downgrade_issu_image_on_router": {
    "iosxe": {
      "doc": " Execute software downgrade on router\n        Args:\n            device ('obj'): Device object\n            upgraded_image ('str'): Name of current installed image\n            downgrade_image ('str'): Name of image to be used in downgrade\n            disk ('str'): Disk name            \n            timeout ('int'): Timeout in seconds\n        Raise:\n            SubCommandFailure: Failed downgrading image on device\n            ConnectionError: Failed reconnecting to device\n        Returns:\n            None\n\n    ",
      "module_name": "issu.configure",
      "uid": "downgrade_issu_image_on_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L368"
    }
  },
  "dynamic_diff_create_running_config": {
    "com": {
      "doc": " Creates a merged running config from template dynamic diff with\n        variables replaced by mapping and merged with base config\n        Args:\n            mapping ('dict'): Variable to interface mapping\n            ex.) {'{{ int_1 }}': 'Ethernet2/1-48', '{{ int_2 }}': 'Ethernet5'}\n            template ('str'): Content of the dynamic diff template\n            base_config ('str'): Content of the base config\n        Raise:\n            None\n        Returns:\n            Config ('str'): The merged running config from template\n    ",
      "module_name": "utils",
      "uid": "dynamic_diff_create_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1324"
    }
  },
  "dynamic_diff_parameterized_running_config": {
    "com": {
      "doc": " Parameterize device interface from the configuration and return the parameterized configuration\n        with respect to the mapping.\n        Args:\n            base_config ('str'): Content of the base config\n            mapping ('dict'): Interface to variable mapping\n            ex.) {'Ethernet2/1-48': '{{ int_1 }}', 'Ethernet5': '{{ int_2 }}'}\n            running_config ('str'): The running config. If set to None, running config will be retrieved\n                from currently connected device\n        Raise:\n            None\n        Returns:\n            Templated Config ('str'): The config that is parameterized\n    ",
      "module_name": "utils",
      "uid": "dynamic_diff_parameterized_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1276"
    }
  },
  "enable_backtrace": {
    "nxos": {
      "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to enable backtrace\n            module (`int`): module number for LCs\n            frame_count (`int`): number of backtraces\n        Returns:\n            out (`str`): Output of command\n    ",
      "module_name": "n9k.debug.debug",
      "uid": "enable_backtrace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/debug/debug.py#L11"
    }
  },
  "enable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Enabled bfd on ospf protocol on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "uid": "enable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L52"
    }
  },
  "enable_bfd_static_route": {
    "iosxe": {
      "doc": " Enables bfd static route on device\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n            ip_address ('str'): ip address of destination\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling bfd static rout on device\n    ",
      "module_name": "bfd.configure",
      "uid": "enable_bfd_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L96"
    }
  },
  "enable_routing_debug_static_route": {
    "iosxe": {
      "doc": " Enables debug route on device\n\n        Args:\n            device ('str'): Device str\n            route ('str'): route\n            mask (str): mask the ip address\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "uid": "enable_routing_debug_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L163"
    }
  },
  "escape_ansi": {
    "com": {
      "doc": null,
      "module_name": "utils",
      "uid": "escape_ansi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L166"
    }
  },
  "execute_change_boot_variable": {
    "nxos": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n            timeout ('int'): Timeout in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_change_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L17"
    }
  },
  "execute_clear_line": {
    "com": {
      "doc": " Executes 'clear line <port>' to clear busy console port on device\n        Args:\n            device ('obj'): Device object\n            alias ('str'): Alias used for console port connection\n                           Default: 'cli'\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "uid": "execute_clear_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L21"
    }
  },
  "execute_copy_run_to_start": {
    "com": {
      "doc": " Execute copy running-config to startup-config\n        Args:\n            device ('obj'): Device object\n            command_timeout ('int'): Timeout value in sec, Default Value is 300 sec\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n            copy_vdc_all ('boolean'): Copy on all VDCs or not, Default Value is False\n    ",
      "module_name": "execute",
      "uid": "execute_copy_run_to_start",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L355"
    }
  },
  "execute_copy_to_running_config": {
    "com": {
      "doc": " Copying file to running-config on device\n        Args:\n            device ('obj'): Device object\n            file ('str'): String object to copy to device\n    ",
      "module_name": "execute",
      "uid": "execute_copy_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L335"
    }
  },
  "execute_deactivate_pie": {
    "iosxr": {
      "doc": " De-activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "uid": "execute_deactivate_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L85"
    }
  },
  "execute_delete_boot_variable": {
    "iosxe": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System image to delete as boot variable\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_delete_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L26"
    }
  },
  "execute_install_package": {
    "iosxe": {
      "doc": " Installs package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            install_timeout (\"int\"): Maximum time for install. Default 660\n            reconnect_max_time (\"int\"): Maximum time for reconnect. Default 120\n            reconnect_interval (\"int\"): Time between reconnect attempts. Default 30\n\n            _install (\"bool\"): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "uid": "execute_install_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L137"
    }
  },
  "execute_install_pie": {
    "iosxr": {
      "doc": " Installs and activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image_dir (`str`): Directory where pie file is located in\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n            _install (`bool`): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "uid": "execute_install_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L15"
    }
  },
  "execute_power_cycle_device": {
    "com": {
      "doc": "Powercycle a device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "execute",
      "uid": "execute_power_cycle_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L75"
    }
  },
  "execute_reload": {
    "com": {
      "doc": " Reload device\n        Args:\n            device ('obj'): Device object\n            prompt_recovery ('bool'): Enable/Disable prompt recovery feature\n            reload_creds ('str'): Credential name defined in the testbed yaml file to be used during reload\n            sleep_after_reload ('int'): Time to sleep after reload in seconds, default: 120\n            timeout ('int'): reload timeout value, defaults 800 seconds.\n    ",
      "module_name": "execute",
      "uid": "execute_reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L306"
    }
  },
  "execute_remove_inactive_pies": {
    "iosxr": {
      "doc": " Removes given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            remove_timeout (`str`): Maximum time to execute command\n                                    Default 300 seconds (Optional)\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "uid": "execute_remove_inactive_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L109"
    }
  },
  "execute_set_boot_variable": {
    "iosxe": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System image to set as boot variable\n            timeout ('int'): Max time to set boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_set_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L44"
    }
  },
  "execute_set_config_register": {
    "iosxe": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L62"
    },
    "iosxr": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n                             Default 60 seconds (Optional)\n    ",
      "module_name": "platform.execute",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L133"
    }
  },
  "execute_uninstall_package": {
    "iosxe": {
      "doc": " Uninstalls package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            timeout (\"int\"): maximum time for install\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "uid": "execute_uninstall_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L234"
    }
  },
  "execute_write_erase": {
    "iosxe": {
      "doc": " Execute 'write erase' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for write erase to complete in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L80"
    },
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L47"
    }
  },
  "execute_write_erase_boot": {
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "uid": "execute_write_erase_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L76"
    }
  },
  "execute_write_memory": {
    "iosxe": {
      "doc": " Execute 'write memory' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for write memory to complete in seconds\n    ",
      "module_name": "platform.execute",
      "uid": "execute_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L117"
    }
  },
  "export_packet_capture": {
    "iosxe": {
      "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n            protocol (`str`): Protocal name\n            path (`str`): Path to export\n            username (`str`): user name\n            password (`str`): password\n\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "export_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L163"
    }
  },
  "free_up_disk_space": {
    "com": {
      "doc": "Delete files to create space on device except protected files\n    Args:\n        device ('Obj') : Device object\n        destination ('str') : Destination directory, i.e bootflash:/\n        required_size ('int') : Check if enough space to fit given size in bytes.\n                                If this number is negative it will be assumed\n                                the required size is not available.\n        skip_deletion ('bool') : Only performs checks, no deletion\n        protected_files ('list') : List of file patterns that wont be deleted\n        compact ('bool'): Compact option for n9k, used for size estimation,\n                          default False\n        min_free_space_percent ('int'): Minimum acceptable free disk space %.\n                                        Optional,\n        dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n         True if there is enough space after the operation, False otherwise\n    ",
      "module_name": "execute",
      "uid": "free_up_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L150"
    }
  },
  "get_acl_hit_counts": {
    "iosxe": {
      "doc": " Get ACL(access-list) hit counts\n\n        Args:\n            device(`obj`): Device object\n            name(`str`): Access-list name\n            source_network(`str`): source network\n            destination_network(`str`): destination network\n            output(`str`): output of show access-lists\n            parsed_output(`str`): parsed_output from show access-lists\n        Returns:\n            List:\n            [[str, int]]\n\n            Example:\n            [['acl1', 100]]\n        Raises:\n            None\n    ",
      "module_name": "acl.get",
      "uid": "get_acl_hit_counts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/get.py#L15"
    }
  },
  "get_active_outgoing_interface": {
    "junos": {
      "doc": " Get active outgoing interface value\n\n        Args:\n            device (`obj`): Device object\n            destination_address (`str`): Destination address value\n            extensive ('bool'): Try command with extensive \n        Returns:\n            Interface name\n    ",
      "module_name": "routing.get",
      "uid": "get_active_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L14"
    }
  },
  "get_address_without_netmask": {
    "junos": {
      "doc": " Get interface ip address without mask\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            return_all ('bool'): return List of values. Defaults to False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_address_without_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L124"
    }
  },
  "get_archive_config_differences": {
    "iosxe": {
      "doc": " Gets the archive differences between {file1} and {file2}\n\n        Args:\n            device ('obj'): Device object\n            file1('str'): file1 to get diff from\n            file2('str'): file2 to get diff from\n\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n    ",
      "module_name": "archive.get",
      "uid": "get_archive_config_differences",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L35"
    }
  },
  "get_archive_config_incremental_diffs": {
    "iosxe": {
      "doc": " Gets the archive incremental diffs from file\n\n        Args:\n            device ('obj'): Device object\n            file('str'): file to get diff from\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "archive.get",
      "uid": "get_archive_config_incremental_diffs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L11"
    }
  },
  "get_arp_table_count": {
    "iosxe": {
      "doc": "\n    Get arp table count\n\n    Args:\n        device(`obj`): Device str\n    Returns:\n        arp table count\n    ",
      "module_name": "arp.get",
      "uid": "get_arp_table_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#L14"
    }
  },
  "get_available_space": {
    "iosxe": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L178"
    },
    "iosxr": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L115"
    },
    "nxos": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L66"
    }
  },
  "get_bgp_advertised_route_count": {
    "iosxe": {
      "doc": " Returns number of advertised routes under neighbor\n\n        Args:\n            device('obj'): device to use\n            neighbor ('str'): neighbor to search under\n            route ('str'): route to search for\n        Returns:\n            number of advertised routes ('int')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_advertised_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1661"
    }
  },
  "get_bgp_as": {
    "iosxr": {
      "doc": " Get bgp id from show running-config\n\n        Args:\n            device ('obj'): device object\n            instance ('str'): instance name\n        Returns:\n            str: bgp_as\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/get.py#L16"
    }
  },
  "get_bgp_best_routes": {
    "iosxe": {
      "doc": " Get best routes to neighbor\n\n        Args:\n            device('obj): device to use\n            address_family('str'): address_family to search under\n            rd('str'): vrf route distinguisher\n            neighbor_address('str'): ip_address of neighbor to search under\n            vrf('str'): vrf to search under\n        Returns:\n            list of routes\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L668"
    }
  },
  "get_bgp_current_as_path": {
    "iosxe": {
      "doc": " Learn current AS path from show command\n        Args:\n            device ('obj')         : Device object\n            vrf ('str')       : VRF name\n            address_family ('str') : Address family\n        Returns:\n            String: neighbor\n            String: AS path\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_current_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L773"
    }
  },
  "get_bgp_external_internal_neighbor_count": {
    "iosxe": {
      "doc": " \n        Get counter of internals bgp neighbors (iBGP) \n        and externals bgp neighbors (eBGP)\n        Args:\n            device ('obj'): Device object\n        Returns:\n            ibgp_count ('int'): Counter of internal bgps (iBGP)\n            ebgp_count ('int'): Number of external bgps (eBGP)\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_external_internal_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1315"
    }
  },
  "get_bgp_id": {
    "iosxe": {
      "doc": " Get bgp id\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n        Returns:\n            integer: bgp_id\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1010"
    }
  },
  "get_bgp_last_reset_list": {
    "iosxe": {
      "doc": " Get last reset list from - show ip bgp all neighbors\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            key_list(`list`): result list\n            table(`obj`): table to display\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_last_reset_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L130"
    }
  },
  "get_bgp_mpls_labels": {
    "iosxe": {
      "doc": " Returns BGP mpls labels\n\n        args:\n            device ('obj'): Device to use\n            route ('str'): Route to check mpls label\n\n        raises:\n            N/A\n\n        returns:\n            str\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_mpls_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1726"
    }
  },
  "get_bgp_neighbor_capabilities": {
    "iosxe": {
      "doc": " Get neighbor capabilities \n        Args:            \n            vrf ('str')               : VRF name\n            device ('obg')            : Device object\n            output ('dict')           : Parsed output\n            address_family ('str')    : Address family to be verified\n            neighbor_address ('str')          : Neighbor address\n            vrf ('str')               : VRF name\n        Returns:\n            Capabilities\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbor_capabilities",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L813"
    }
  },
  "get_bgp_neighbor_prefixes_count": {
    "junos": {
      "doc": "\n    Get bgp neighbor accepted, received or advertised prefixes count\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "uid": "get_bgp_neighbor_prefixes_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L598"
    }
  },
  "get_bgp_neighbor_session_state": {
    "iosxe": {
      "doc": " Get session state from device\n\n        Args:\n            device ('obj')           : Device object\n            vrf ('str')              : VRF name\n            address_family           : Address family\n            neighbor_address ('str')         : Neighbor interface address\n            output ('dict')          : Parsed output\n            address_families ('list')        : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n        Returns:\n            Session state\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbor_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L857"
    }
  },
  "get_bgp_neighbors": {
    "iosxe": {
      "doc": " Gets bgp neighbors that is under {address_family}\n        and optionally {vrf} \n            - show ip bgp {address_family} all summary\n            - show ip bgp {address_family} vrf {vrf} summary\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            vrf('str'): vrf to search under. If empty it will search \n                        under all\n\n        Returns:\n            list - Neighbor ip_address'\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1108"
    }
  },
  "get_bgp_neighbors_advertised": {
    "iosxe": {
      "doc": "Retrieve advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): address of neighbor\n    \n        Returns:\n            Dictionary\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L631"
    }
  },
  "get_bgp_neighbors_advertised_routes": {
    "iosxe": {
      "doc": " Get advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor IP address\n\n        Returns:\n            Dictionary of advertised neighbors\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L339"
    }
  },
  "get_bgp_neighbors_from_running_config": {
    "iosxe": {
      "doc": " Returns a list of configured bgp neighbors from running-config\n\n        args:\n            device ('obj'): Device to use\n            address_family ('str'): Address family bgp neighbors are under\n            vrf ('str'): Vrf bgp neighbors are under\n\n        raises:\n            N/A\n\n        returns:\n            List\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1703"
    }
  },
  "get_bgp_neighbors_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are in {state} - show \n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you want \n                             search for/against\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1152"
    }
  },
  "get_bgp_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are NOT in {state} - show\n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you dont\n                             want to find neighbors with\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1252"
    }
  },
  "get_bgp_networks_from_neighbor": {
    "iosxe": {
      "doc": " Gets bgp networks from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            networks ('list')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_networks_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1558"
    }
  },
  "get_bgp_peer_prefixes": {
    "junos": {
      "doc": "Return a dictionary of BGP prefix value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n\n    Returns:\n        dict: Dictionary of prefix values\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_peer_prefixes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L18"
    }
  },
  "get_bgp_route_ext_community": {
    "iosxe": {
      "doc": " Get route extended community\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            route('route'): route to search under\n            vrf('str'): if getting route via vrf\n            rd('str'): if getting route via rd\n        Returns:\n            extended community\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_route_ext_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1050"
    }
  },
  "get_bgp_route_from_neighbors": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor_address ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n        Returns:\n            Dictionary of neighbor routes\n        Raises:\n            KeyError: A key is missing in dictionary\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_route_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L275"
    }
  },
  "get_bgp_routes_list": {
    "iosxe": {
      "doc": " Returns a list of routes from BGP table\n\n        Args:\n            device ('obj'): Device object\n            vrf ('vrf'): VRF name\n            address_family ('str'): Address family\n\n        Raises:\n            None\n\n        Returns:\n            list object with unique routes from BGP table\n            False\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_routes_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1358"
    }
  },
  "get_bgp_routing_table": {
    "iosxe": {
      "doc": " Get parsed dict of the BGP routing table executing one of the following commands\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp'\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            Parsed dictionary of BGP routing table\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_routing_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1412"
    }
  },
  "get_bgp_running_config": {
    "iosxe": {
      "doc": " Get parsed running BGP config\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): Address familly\n            vrf ('str'): VRF name\n        Returns:\n            Dictionary\n                Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1490"
    }
  },
  "get_bgp_session_count": {
    "iosxe": {
      "doc": " Get bgp sesion count on state (established, idle, active)\n\n    Args:\n        device(`str`): Device str\n        in_state ('str'): Get bgp count only of neighbors in state\n    Returns:\n        Integer: bgp session count\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1271"
    }
  },
  "get_bgp_state_pfx_rcd": {
    "iosxe": {
      "doc": " Get State/PfxRcd value from the device\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            State/PfxRcd value\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_state_pfx_rcd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L232"
    }
  },
  "get_bgp_status_codes_from_neighbor": {
    "iosxe": {
      "doc": " Gets status_codes from route under neighbor\n\n        Args: \n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            route ('str'): route to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            status_codes ('str')\n            None\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_status_codes_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1600"
    }
  },
  "get_bgp_summary": {
    "iosxe": {
      "doc": " Get neighbors from show bgp summary command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            all_summary ('bool'): check all summary    \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L572"
    }
  },
  "get_boot_variables": {
    "iosxe": {
      "cat9500": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L11"
      },
      "cat9k": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L11"
      },
      "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
      "module_name": "platform.get",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L230"
    }
  },
  "get_bridge_domain_bridge_domain_interfaces": {
    "iosxe": {
      "doc": " Get list of interfaces using bridge-domain id\n\n        Args:\n            bridge_domain_id('int'): bridge-domain id to get interfaces\n            device ('obj'): Device object\n\n        Returns:\n            list of interfaces\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "uid": "get_bridge_domain_bridge_domain_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L52"
    }
  },
  "get_bridge_domain_bridge_domain_mac_count": {
    "iosxe": {
      "doc": " Get bridge domain mac count\n\n        Args:\n            device(`obj`): Device object \n            timeout_parse ('int'): Timeout in seconds for command device.parse('show bridge-domain')\n        Returns:\n            integer: mac count\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "uid": "get_bridge_domain_bridge_domain_mac_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L13"
    }
  },
  "get_bundled_interface": {
    "iosxe": {
      "doc": " Pick up Port channel bundled interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port Channel Interface\n            exclude_interface ('str'): interface to skip\n\n        Returns:\n            String: Interface\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_bundled_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L735"
    }
  },
  "get_cdp_neighbors_info": {
    "ios": {
      "doc": " \n        Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/get.py#L10"
    },
    "iosxe": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/get.py#L10"
    },
    "iosxr": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/get.py#L10"
    },
    "nxos": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/get.py#L10"
    }
  },
  "get_cef_internal_primary_interface": {
    "iosxe": {
      "doc": " Get cef internal output primary interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_internal_primary_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L501"
    }
  },
  "get_cef_internal_primary_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_internal_primary_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L251"
    }
  },
  "get_cef_internal_repair_interface": {
    "iosxe": {
      "doc": " Get cef internal output repair interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_internal_repair_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L563"
    }
  },
  "get_cef_internal_repair_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_internal_repair_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L132"
    }
  },
  "get_cef_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address \n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L85"
    }
  },
  "get_cef_registred_label_to_prefix": {
    "iosxe": {
      "doc": " Get registered label to prefix in CEF\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            output ('dict'): Optional. Parsed output from command 'show ip cef {prefix} detail'\n            vrf ('str'): Optional. VRF name. Default: 'default'\n            address_family ('str'): Optional. Family name. Default: 'ipv4'\n            interface ('str'): Optional. Interface name\n            nexthop_address ('str'): Optional. Nexthop address\n        Returns:\n            int: Registered label\n        Raises:\n            ValueError: Found more than on registered label\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_registred_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L387"
    }
  },
  "get_cef_repair_path_of_route": {
    "iosxe": {
      "doc": " Get 'repair path' of route\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Return:\n            tuple: (\n                String: Repair path IP address,\n                String: Repair path Interface\n            )\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "uid": "get_cef_repair_path_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L18"
    }
  },
  "get_chassis_cpu_util": {
    "junos": {
      "doc": "Returns chassis cpu utilization\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section (str): cpu utilization, defaults to cpu-idle-5sec\n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "uid": "get_chassis_cpu_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L37"
    }
  },
  "get_chassis_memory_util": {
    "junos": {
      "doc": "Returns chassis memory utilization\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        str: Memory utilization percentage\n    ",
      "module_name": "chassis.get",
      "uid": "get_chassis_memory_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L13"
    }
  },
  "get_class_of_service_classifiers": {
    "junos": {
      "doc": " Get list of classifiers based interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            classifiers: list\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "uid": "get_class_of_service_classifiers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L46"
    }
  },
  "get_class_of_service_shaping_rate": {
    "junos": {
      "doc": " Get shapping rate based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            shaping_rate: Staping rate value\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "uid": "get_class_of_service_shaping_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L16"
    }
  },
  "get_config_commands_from_running_config": {
    "ios": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L154"
    },
    "iosxe": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L152"
    }
  },
  "get_config_dict": {
    "com": {
      "doc": " Cast config to Configuration dict\n\n        Args:\n            config ('str'): config string\n        Returns:\n            Configuration dict\n    ",
      "module_name": "utils",
      "uid": "get_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L221"
    }
  },
  "get_config_from_file": {
    "iosxe": {
      "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration \n    ",
      "module_name": "utils",
      "uid": "get_config_from_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L50"
    }
  },
  "get_config_register": {
    "iosxe": {
      "doc": "Get current config-register setting on the device\n        Args:\n            device (`obj`): Device object\n            next_reload (`bool`): Determine if returning next-reload value\n        Returns:\n            config-register value or None\n    ",
      "module_name": "platform.get",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L270"
    },
    "iosxr": {
      "doc": "Get config-regsiter on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            config-register or None\n    ",
      "module_name": "platform.get",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L64"
    }
  },
  "get_configuration_mpls_label_switched_path_name": {
    "junos": {
      "doc": " Get path name from show configuration protocols mpls label-switched-path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): File to check\n\n    Returns:\n        str or None: Configured primary name\n    ",
      "module_name": "configuration.get",
      "uid": "get_configuration_mpls_label_switched_path_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L12"
    }
  },
  "get_configuration_mpls_paths": {
    "junos": {
      "doc": " Get all paths from show configuration protocols mpls path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): Path to check\n\n    Returns:\n        List or None: All path addresses\n    ",
      "module_name": "configuration.get",
      "uid": "get_configuration_mpls_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L46"
    }
  },
  "get_configured_bgp_peers": {
    "iosxe": {
      "doc": " Get configured BGP peers\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): AS number\n            router_bgp_address_family ('str'): Address family of router bgp\n            vrf ('str'): VRf name\n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_configured_bgp_peers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1450"
    }
  },
  "get_connection": {
    "com": {
      "doc": "\n        Get connection object.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n\n        Returns:\n            Connection object\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "get_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2518"
    }
  },
  "get_current_active_pies": {
    "iosxr": {
      "doc": "Gets the current active pies on a device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            List of active pies on the device\n    ",
      "module_name": "platform.get",
      "uid": "get_current_active_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L174"
    }
  },
  "get_current_system_datetime": {
    "iosxe": {
      "doc": " Returns current time of system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            current time ('str')\n        Raises:\n            None\n    ",
      "module_name": "system.get",
      "uid": "get_current_system_datetime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/get.py#L12"
    }
  },
  "get_delta_time_from_outputs": {
    "com": {
      "doc": " Get delta time from Time source of two outputs\n        Time source example: 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n\n        Args:\n            output_before ('str'): Text output from show command\n            output_after ('str'): Text output from show command\n        Returns:\n            Time delta in seconds\n    ",
      "module_name": "utils",
      "uid": "get_delta_time_from_outputs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L570"
    }
  },
  "get_dict_items": {
    "com": {
      "doc": " Get one or any of dict items\n        Args:\n            name (`dict`): dict data\n            key (`str|int|list`): key in dict. one or any\n            contains (`str`): filter with Dq by this keyword\n            regex (`bool`): if use regex for contains\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n            headers (`bool`): if return contains headers, or not\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): list of one or of dict key/value items\n\n        Example:\n\n            bgp = {\n                'id': '65000',\n                'shutdown': False,\n                'address_family': {\n                    'ipv4': {\n                        'total_neighbor': 3,\n                        'neighbors': {\n                            '10.1.1.1': {\n                                'status': 'up',\n                                'routes': 10,\n                            },\n                            '10.2.2.2': {\n                                'status': 'down',\n                                'routes': '20',\n                            },\n                            '10.3.3.3': {\n                                'status': 'up',\n                                'routes': 30\n                            }\n                        }\n                    }\n                }\n            }\n\n            Some examples with above structure data.\n\n            >>> dev.api.get_dict_items(bgp, 'neighbors')\n            [['10.1.1.1'], ['10.2.2.2'], ['10.3.3.3']]\n\n            >>> dev.api.get_dict_items(bgp, ['id', 'shutdown'])\n            [['65000', False]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], 'ipv4')\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], '10.1.1.1')\n            [['10.1.1.1', 10, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'])\n            [[10], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_str=True)\n            [['10'], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_num=True)\n            [[10], [20]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            (Speceial case) if only one item in list, it will return value without list.\n            >>> dev.api.get_dict_items(bgp, 'routes', '10.1.1.1')\n            10\n\n    ",
      "module_name": "utils",
      "uid": "get_dict_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1519"
    }
  },
  "get_diffs_platform": {
    "iosxe": {
      "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.get",
      "uid": "get_diffs_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L62"
    }
  },
  "get_file_size": {
    "iosxe": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L130"
    },
    "iosxr": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L85"
    },
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            int\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L64"
    },
    "nxos": {
      "doc": "\n        Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L12"
    }
  },
  "get_file_size_from_server": {
    "com": {
      "doc": " Get file size from the server\n    Args:\n        device ('Obj'): Device object\n        server ('str'): server address or hostname\n        path ('str'): file path on server to check\n        protocol ('srt'): protocol used to check file size\n        timeout ('int'): check size timeout in seconds\n        fu_session ('obj'): existing FileUtils object to reuse\n    Returns:\n         integer representation of file size in bytes\n    ",
      "module_name": "utils",
      "uid": "get_file_size_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L959"
    }
  },
  "get_file_timestamp": {
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "uid": "get_file_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L209"
    }
  },
  "get_flows_src_dst_address_pairs": {
    "iosxe": {
      "doc": " Gets flows under flow_monitor and returns source and destination address pairs\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor name\n\n        Raises:\n            N/A\n\n        Returns:\n            [('source_address', 'destination_address'), ...]\n    ",
      "module_name": "flow.get",
      "uid": "get_flows_src_dst_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/get.py#L12"
    }
  },
  "get_hardware_all_fans_speed": {
    "iosxe": {
      "doc": " Get fan speed for all fans \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            fans (`list`): Fans info\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_all_fans_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L22"
    }
  },
  "get_hardware_esp_slot": {
    "iosxe": {
      "doc": " Get ESP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): ESP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): ESP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_esp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L119"
    }
  },
  "get_hardware_inserted_sfp": {
    "iosxe": {
      "doc": " Get newly inserted SFP\n\n        Args:\n            device (`obj`): Device object\n            prev_slots (`dict`): Previous sfp slot dict\n            sfp_descr (`str`): SFP descr\n            intf_type (`str`): Interface type\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_inserted_sfp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L212"
    }
  },
  "get_hardware_interface_sfp_descr": {
    "iosxe": {
      "doc": " Get interface SFP descr\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Returns:\n            descr (`str`): Interface SFP descr\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_interface_sfp_descr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L300"
    }
  },
  "get_hardware_rp_slot": {
    "iosxe": {
      "doc": " Get RP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): RP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): RP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_rp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L64"
    }
  },
  "get_hardware_sfp_slot_dict": {
    "iosxe": {
      "doc": " Get SFP slot dict\n\n        Args:\n            device (`obj`): Device object\n            sfp_descr (`str`): SFP descr\n        Returns:\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_sfp_slot_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L247"
    }
  },
  "get_hardware_slot_state": {
    "iosxe": {
      "doc": " Get slot state\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): Slot\n        Returns:\n            state (`str`): Slot state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "uid": "get_hardware_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L174"
    }
  },
  "get_inserted_interface_by_media_type": {
    "iosxe": {
      "doc": " Get newly inserted interface by media type\n\n        Args:\n            device (`obj`): Device object\n            media_type (`str`): media type\n\n        Returns:\n            interface (`str`): interface name\n    ",
      "module_name": "interface.get",
      "uid": "get_inserted_interface_by_media_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L39"
    }
  },
  "get_interface_address_mask_running_config": {
    "iosxe": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Not used in IOSXE. Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L766"
    },
    "junos": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L21"
    }
  },
  "get_interface_carrier_delay": {
    "iosxe": {
      "doc": " Get interface carrier delay\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            delay_type ('str'): Carrier delay type: 'up', 'down'\n\n        Returns:\n            None\n            delay in seconds ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L477"
    }
  },
  "get_interface_connected_adjacent_router_interfaces": {
    "iosxe": {
      "doc": " Get list of connected interfaces from adjacents routers\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            List: EthernetInterface objects\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_connected_adjacent_router_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L705"
    }
  },
  "get_interface_information": {
    "ios": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L16"
    },
    "iosxe": {
      "doc": " Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L989"
    },
    "iosxr": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L51"
    },
    "nxos": {
      "doc": " Get interface information from device for a  interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L17"
    }
  },
  "get_interface_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1719"
    },
    "iosxe": {
      "doc": " Get interface and device\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L538"
    }
  },
  "get_interface_interfaces_ldp_enabled": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show mpls interfaces details'\n\n        Args:\n            device ('str'): Device str\n            vrf ('str'): Vrf name\n        Returns:\n            interface list\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "uid": "get_interface_interfaces_ldp_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L87"
    }
  },
  "get_interface_interfaces_under_vrf": {
    "iosxe": {
      "doc": " Get interfaces configured under specific Vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n\n        Returns:\n            interfaces (`list`): List of interfaces\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_interfaces_under_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L572"
    }
  },
  "get_interface_ip_address": {
    "iosxe": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Used only for junos api\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L314"
    },
    "iosxr": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L16"
    },
    "junos": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            return_all ('bool'): return List of values\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L62"
    }
  },
  "get_interface_ip_and_mask": {
    "iosxe": {
      "doc": " Get interface ip address and mask\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            prefix (`bool`): return ip with prefix if True\n                             otherwise return ip and mask\n\n        Returns:\n            Tuple: (None, None)\n            Tuple: (str: interface ip address, str: interface mask)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ip_and_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L503"
    }
  },
  "get_interface_ipv4_address": {
    "ios": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L40"
    },
    "iosxe": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1013"
    },
    "iosxr": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L75"
    },
    "nxos": {
      "doc": " Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L40"
    }
  },
  "get_interface_logical_output_bps": {
    "junos": {
      "doc": "Get logical output bps of a logical interface\n\n    Args:\n        device ('obj'): device object\n        logical_interface ('str'): Logical interface to check output bps\n        interface ('str'): interface name to pass in show command\n        extensive ('bool'): Use extensive in show command\n        output_dict ('dict'): Pass if dictionary already exist\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_logical_output_bps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L369"
    }
  },
  "get_interface_loopback_ip_address": {
    "iosxe": {
      "doc": " Gets all loopback interface ip_address' up to number specified\n\n        Args:\n            device ('obj'): device to use\n            num ('int'): max number of loopback interfaces to get ip_address from\n\n        Returns:\n            list: [(interface with Loopback address, ip_address), ...]\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_loopback_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L356"
    }
  },
  "get_interface_mac_address": {
    "iosxe": {
      "doc": " Get interface mac address from device\n\n        Args:\n            device (`obj`): Device object\n            interface(`str`): Interface name\n\n        Returns:\n            None\n            interface mac address\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L209"
    }
  },
  "get_interface_mtu_config_range": {
    "iosxe": {
      "doc": " Get MTU config range\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            range_dict (`dict`): MTU range dict\n                ex: {'min':30, 'max':360, range: '30-360'}\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_mtu_config_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L178"
    }
  },
  "get_interface_mtu_size": {
    "iosxe": {
      "doc": " Get interface MTU\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            mtu (`int`): mtu bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_mtu_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L154"
    }
  },
  "get_interface_netmask": {
    "iosxe": {
      "doc": " Get netmask of ip address' class\n\n        Args:\n            ip_address ('str'): ipv4 address\n\n        Returns:\n            ip address mask\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L942"
    }
  },
  "get_interface_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L212"
    }
  },
  "get_interface_output_pps": {
    "junos": {
      "doc": " Retrieve output pps value from interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n\n        Returns:\n            Output pps value\n    ",
      "module_name": "monitor.get",
      "uid": "get_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/get.py#L22"
    }
  },
  "get_interface_packet_counter": {
    "iosxe": {
      "doc": " Returns packet counters for given interface\n\n        Args:\n            device ('obj') : Device object\n            interface ('str'): Interface name\n            output ('dict'): Parsed output from 'show interfaces' command\n\n        Returns\n            counter: number of output packet\n\n            if any error or no counter_field was found return None\n            - to separate 0 packet and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_packet_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L631"
    }
  },
  "get_interface_packet_input_rate": {
    "iosxe": {
      "doc": " Get rate from in_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_packet_input_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L897"
    }
  },
  "get_interface_packet_output_rate": {
    "iosxe": {
      "doc": " Get rate from out_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n            field ('str'): Used for get_interface_packet_input_rate\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_packet_output_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L808"
    }
  },
  "get_interface_port_channel_members": {
    "iosxe": {
      "doc": " Get interface members\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n\n        Returns:\n            interface members\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_port_channel_members",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L966"
    }
  },
  "get_interface_qlimit_bytes": {
    "iosxe": {
      "doc": " Get interface qlimit in bytes\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            qlimit_bytes (`int`): Interface qlimit_bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_qlimit_bytes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L270"
    }
  },
  "get_interface_queue_counters_dropped": {
    "junos": {
      "doc": " Get queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_counters_dropped",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L337"
    }
  },
  "get_interface_queue_counters_queued_packets": {
    "junos": {
      "doc": " Get queued packets based on queue number\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_counters_queued_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L474"
    }
  },
  "get_interface_queue_counters_trans_packets": {
    "junos": {
      "doc": " Get queue counters transmitter based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_counters_trans_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L437"
    }
  },
  "get_interface_queue_counters_transmitted_byte_rate": {
    "junos": {
      "doc": " Get queue counters transmitted byte rate based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_counters_transmitted_byte_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L571"
    }
  },
  "get_interface_queue_red_dropped_packets": {
    "junos": {
      "doc": " Get red-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            red_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_red_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L312"
    }
  },
  "get_interface_queue_rl_dropped_packets": {
    "junos": {
      "doc": " Get rl-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            rl_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_rl_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L287"
    }
  },
  "get_interface_queue_tail_dropped_packets": {
    "junos": {
      "doc": " Get tail-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            tail_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_queue_tail_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L262"
    }
  },
  "get_interface_running_config": {
    "iosxe": {
      "doc": " Get interface configuration from show running-config interface {interface}\n        \n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n\n        Return:\n            Dictionary with running interface configuration\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L603"
    }
  },
  "get_interface_speed": {
    "junos": {
      "doc": "Get speed of an interface\n\n    Args:\n        device (obj): device object\n        interface (str): interface name\n        bit_size (str): desired return size (gbps/mbps/kbps)\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L151"
    }
  },
  "get_interface_statistics_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface statistics\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_statistics_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L237"
    }
  },
  "get_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Returns access_vlan id for interface on device\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n\n        Returns:\n            str access_vlan\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L918"
    }
  },
  "get_interface_traffic_input_pps": {
    "junos": {
      "doc": "Get interface input pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_traffic_input_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L541"
    }
  },
  "get_interface_traffic_output_pps": {
    "junos": {
      "doc": "Get interface output pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_traffic_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L511"
    }
  },
  "get_interface_with_mask": {
    "iosxe": {
      "doc": " Gets interface:ip_address with specific mask\n\n        Args:\n            device('obj'): device to use\n            netmask('str'): netmask the interface must have\n            address_family('str'): address_family to search under\n\n        Returns:\n            (None, None)\n            (interface('str'), ip_address('str'))\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_with_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L411"
    }
  },
  "get_interface_with_up_state": {
    "iosxe": {
      "doc": " Get a interface which is up\n\n        Args:\n            device ('obj'): Device object\n            interface_type ('str'): Interface type\n            virtual_interface ('bool'): Flag for logical interface\n                               if is None, return physical or logical\n                               if is True, return only logical\n                               if is False, return only physical\n        Returns:\n            None\n            interface name ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_with_up_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L444"
    }
  },
  "get_interface_without_service_policy": {
    "iosxe": {
      "doc": " Find a interface without service-policy\n\n        Args:\n            device (`obj`): Device object\n            interface_type (`str`): Interface type\n            virtual_interface ('bool'): flag for matching virtual interfaces\n\n        Returns:\n            None\n            interface (`str`): Interface name\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_interface_without_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L233"
    }
  },
  "get_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n\n    ",
      "module_name": "utils",
      "uid": "get_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1657"
    }
  },
  "get_ip_bgp_neighbors": {
    "iosxe": {
      "doc": " Get Ip Bgp neighbors from the following commands:\n            'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}',\n            'show ip bgp {address_family} vrf {vrf} neighbors',\n            'show ip bgp {address_family} neighbors {neighbor}',\n            'show ip bgp {address_family} neighbors',\n            'show ip bgp {address_family} all neighbors {route}'           \n            'show ip bgp neighbors {neighbor}',\n            'show ip bgp neighbors'\n\n        Args:\n            device ('obj')         : Device object \n            address_family ('str') : Address family\n            vrf ('str')            : Vrf name\n            neighbor ('neighbor')  : Neighbor address\n        Returns:\n            Dictionary\n        Raises:\n            None\n        \n    ",
      "module_name": "bgp.get",
      "uid": "get_ip_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L938"
    }
  },
  "get_ip_bgp_route": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            routes Dictionary\n    ",
      "module_name": "bgp.get",
      "uid": "get_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L429"
    }
  },
  "get_ip_bgp_route_nexthop_color": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n       return list of nexthop and color community\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            list of nexthop and color community\n            ex.) [['192.168.1.1', '100'], ['192.168.2.2', '200']]\n    ",
      "module_name": "bgp.get",
      "uid": "get_ip_bgp_route_nexthop_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L498"
    }
  },
  "get_ip_bgp_summary": {
    "iosxe": {
      "doc": "Execute from the following commands:\n        'show ip bgp {address_family} summary',\n        'show ip bgp {address_family} vrf {vrf} summary',\n        'show ip bgp {address_family} rd {rd} summary',\n        'show ip bgp all summary',\n        'show ip bgp {address_family} all summary'\n        and retrieve neighbor address and AS number\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "uid": "get_ip_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L176"
    }
  },
  "get_issu_free_space_on_disk": {
    "iosxe": {
      "doc": " Get free space information on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return:            \n            Integer: Free space on disk in bytes\n        Raises: \n            SubCommandFailure: Failed getting free space info on device\n    ",
      "module_name": "issu.get",
      "uid": "get_issu_free_space_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L39"
    }
  },
  "get_issu_space_info_on_disk": {
    "iosxe": {
      "doc": " Get free and total space on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return: \n            list: \n                bytes_total ('int'): Total space on disk in bytes\n                bytes_free ('int'): Free space on disk in bytes\n        Raise:\n            SubCommandFailure: Failed executing dir command\n    ",
      "module_name": "issu.get",
      "uid": "get_issu_space_info_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L6"
    }
  },
  "get_jinja_template": {
    "com": {
      "doc": " Gets the jinja template specified\n\n        Args:\n            templates_dir ('str'): Templates directory\n            template_name ('str'): Template name\n\n        Returns:\n            ('obj') jinja template\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "jinja.get",
      "uid": "get_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L6"
    }
  },
  "get_l2vpn_interface_under_service_instance": {
    "iosxe": {
      "doc": " Gets interface under service instance 'service_instance_id' using command\n        'show ethernet service instance'\n\n        Args:\n            device ('obj'): Device object\n            service_instance_id ('int'): service instance id\n    \n        Returns:\n            interface\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "l2vpn.get",
      "uid": "get_l2vpn_interface_under_service_instance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L18"
    }
  },
  "get_l2vpn_storm_control_discard_packet_count": {
    "iosxe": {
      "doc": "Get current storm control discard packet count\n        \n            Args:\n                device ('Obj'): Device object\n                service_instance_id ('int'): L2VPN service instance id\n                interface ('str'): Interface name\n\n            Returns:\n                None\n\n            Raises:\n                None\n                \n        ",
      "module_name": "l2vpn.get",
      "uid": "get_l2vpn_storm_control_discard_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L48"
    }
  },
  "get_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label. Defaults to input\n        local_label (str): Database local label. Defaults to None\n\n    Returns:\n        ldp_label ('str'): Will return one value\n    ",
      "module_name": "ldp.get",
      "uid": "get_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L19"
    }
  },
  "get_ldp_database_session_label": {
    "junos": {
      "doc": " Gets ldp prefix\n\n    Args:\n        device (obj): Device object\n        address (str): IP address\n        expected_ldp_prefix (str): Expected LDP prefix value\n        expected_ldp_database_type (str): Expected LDP database type. Default is 'Input label database'\n    \n    Returns:\n        (str): database session label\n    ",
      "module_name": "ldp.get",
      "uid": "get_ldp_database_session_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L63"
    }
  },
  "get_list_items": {
    "com": {
      "doc": " Get one or any of list items\n        Args:\n            name (`list`): list data\n            index (`int`): number of index for list to get\n            index_end (`int`): end number of index for list to get\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): one or any of list items\n\n        Example:\n\n        >>> dev.api.get_list_items([1,2,3], 0)\n        1\n\n        >>> dev.api.get_list_items([[1,4],2,3], 0)\n        [1, 4]\n\n        >>> dev.api.get_list_items([[1,4],2,3], 1, to_str=True)\n        '2'\n\n        >>> dev.api.get_list_items([[1,4],2,'3'], 2, to_str=True)\n        '3'\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 2, to_num=True)\n        3\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 1, 2)\n        [2, '3']\n\n    ",
      "module_name": "utils",
      "uid": "get_list_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1465"
    }
  },
  "get_lldp_neighbors_info": {
    "ios": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/get.py#L11"
    },
    "iosxe": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/get.py#L10"
    },
    "iosxr": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/get.py#L11"
    },
    "nxos": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/get.py#L11"
    }
  },
  "get_log_message_time": {
    "junos": {
      "doc": " Gets the timestamp of a log message\n\n    Args:\n        device (obj): Device object\n        message (str): Message\n        file_name (str): File to check. Defaults to 'messages'\n\n    Returns:\n        (datetime): Timestamp object\n    ",
      "module_name": "log.get",
      "uid": "get_log_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/get.py#L15"
    }
  },
  "get_logging_logs": {
    "iosxe": {
      "doc": " Returns list of entries in the logging system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            list of enteries from logging system\n        Raises:\n            None\n    ",
      "module_name": "logging.get",
      "uid": "get_logging_logs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#L12"
    }
  },
  "get_longest_server_address": {
    "com": {
      "doc": "\n    get the longest server address from the devices's testbed\n    Args:\n        device ('obj'): Device object\n    Returns:\n        the longest address in the testbed\n    ",
      "module_name": "utils",
      "uid": "get_longest_server_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1116"
    }
  },
  "get_mac_aging_timer": {
    "iosxe": {
      "doc": " Get Aging-Timer from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            aging_time (`int`): aging-time in second\n            None \n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "uid": "get_mac_aging_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L12"
    }
  },
  "get_mac_table": {
    "iosxe": {
      "doc": " Get mac table from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            mac_table (`dict`): mac table dict\n            None: When nothing has been found\n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "uid": "get_mac_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L34"
    }
  },
  "get_module_info": {
    "iosxr": {
      "doc": " Get a module's information\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            key (`str`): Key name\n        Returns:\n            field (`str`): Field value\n    ",
      "module_name": "platform.get",
      "uid": "get_module_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L14"
    }
  },
  "get_mpls_forwarding_table_key_value_pairs": {
    "iosxe": {
      "doc": " Gets all key:value pairs from the mpls forwarding table\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_forwarding_table_key_value_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L207"
    }
  },
  "get_mpls_interface_ldp_configured": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show run'\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            interface address\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_interface_ldp_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L113"
    }
  },
  "get_mpls_label_stack": {
    "iosxe": {
      "doc": " Get mpls Label Stack\n        using 'show mpls forwarding-table labels {label} detail'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n            prefix ('str'): Prefix value\n        Returns:\n            stack ('list'): Label stack\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L51"
    }
  },
  "get_mpls_ldp_peer_state": {
    "iosxe": {
      "doc": " Gets the ldp peer state under specified interface\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n        Returns:\n            ldp peer state ('str')\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_ldp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L160"
    }
  },
  "get_mpls_ldp_session_count": {
    "iosxe": {
      "doc": " Get mpls ldp seesion count\n\n        Args:\n            device(`str`): Device str\n        Returns:\n            int: session count\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_ldp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L134"
    }
  },
  "get_mpls_out_label": {
    "junos": {
      "doc": " Get out label information from mpls\n\n    Args:\n        device (obj): device object\n        name (str): lsp name\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_out_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L17"
    }
  },
  "get_mpls_outgoing_label": {
    "iosxe": {
      "doc": " Get mpls outgoing label \n        using 'show mpls forwarding-table labels {label}'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n        Returns:\n            out_label ('str'): Outgoing label\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L24"
    }
  },
  "get_mpls_record_routes": {
    "junos": {
      "doc": " Get mpls record routes\n\n    Args:\n        device (obj): device object\n        name (str): mpls name to check\n        purge_self (bool, optional): Purge <self> from record routes? Defaults to True.\n        \n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "uid": "get_mpls_record_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L41"
    }
  },
  "get_neighbor_address": {
    "com": {
      "doc": "Get the neighbor address in a subnet /30\n\n        Args:\n            ip (`str`): Ip address to get the neighbor for\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "get_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L310"
    }
  },
  "get_neighbor_interface_and_device": {
    "iosxe": {
      "doc": " Get neighbor interface and device from topology\n\n        Args:\n            device (`obj`): Device object\n            interface_alias (`str`): interface alias\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_neighbor_interface_and_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L83"
    }
  },
  "get_neighbor_interface_and_device_by_link": {
    "iosxe": {
      "doc": " Get neighbor interface and device by link\n\n        Args:\n            device (`obj`): Device object\n            link_name (`str`): link name\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_neighbor_interface_and_device_by_link",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L113"
    }
  },
  "get_neighboring_device_interface": {
    "iosxe": {
      "doc": " Get neighbor device interface\n\n        Args:\n            device ('obj'): Device object\n            testbed ('obj'): Testbed object\n            interface ('str'): interface name\n\n        Returns:\n            Dictionary: topology\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_neighboring_device_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L662"
    }
  },
  "get_node_list": {
    "virl": {
      "doc": "Get node list\n\n        Args:\n            device (`obj`): Device object\n            simulation_name: simulation name\n\n        Returns:\n            list: node list\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "uid": "get_node_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L70"
    }
  },
  "get_node_summary": {
    "virl": {
      "doc": "Get node summary\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n            dict: node summary info\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "uid": "get_node_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L42"
    }
  },
  "get_ntp_md5_peer": {
    "iosxe": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L110"
    },
    "iosxr": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L101"
    }
  },
  "get_ntp_outgoing_interface": {
    "iosxe": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L59"
    },
    "iosxr": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L55"
    }
  },
  "get_ntp_packet": {
    "iosxe": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L213"
    },
    "iosxr": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L178"
    }
  },
  "get_ntp_servers": {
    "iosxe": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L25"
    },
    "iosxr": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L23"
    }
  },
  "get_ntp_source_interface_ip": {
    "iosxe": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L43"
    },
    "iosxr": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L39"
    }
  },
  "get_ntp_system_peer": {
    "iosxe": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L153"
    },
    "iosxr": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L142"
    }
  },
  "get_ntp_system_peer_vrf": {
    "iosxe": {
      "doc": " Get a ntp system peer's vrf name\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            vrf (`str`): vrf name\n    ",
      "module_name": "ntp.get",
      "uid": "get_ntp_system_peer_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L191"
    }
  },
  "get_ospf_area_of_interface": {
    "iosxe": {
      "doc": " Get area value of an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            vrf ('str'): VRF name\n            process_id ('str'): Process id\n            address_family ('str'): Address family\n        Returns:\n            area ('str'): If area found\n            None: If area not found\n        Raises:\n            ValueError: Command found more than one area\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_area_of_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L181"
    }
  },
  "get_ospf_database_checksum": {
    "junos": {
      "doc": " Get ospf data base checksum data in a list\n\n    Args:\n        device (obj): Device object\n        lsa_type (str, optional): LSA type to check for. Defaults to None.\n\n    Returns:\n        list: List of checksums\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_database_checksum",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L93"
    }
  },
  "get_ospf_global_block_range": {
    "iosxe": {
      "doc": " Get global block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Global range minimum\n                int: Global range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_global_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L569"
    }
  },
  "get_ospf_interface_affinity_bits": {
    "iosxe": {
      "doc": " Get affinity bits value of an ospf interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            bits ('str'): Affinity bits\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_interface_affinity_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L826"
    }
  },
  "get_ospf_interface_and_area": {
    "junos": {
      "doc": " Retrieve interface for ospf on junos device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            interface and area value dictionary\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_interface_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L15"
    }
  },
  "get_ospf_interfaces": {
    "iosxe": {
      "doc": " Retrieve interface for ospf using BGP AS number\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n\n        Returns:\n            List of interfaces\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L491"
    }
  },
  "get_ospf_local_block_range": {
    "iosxe": {
      "doc": " Get local block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Local range minimum\n                int: Local range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_local_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L609"
    }
  },
  "get_ospf_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        destination_address (str): Destination address\n    ",
      "module_name": "routing.get",
      "uid": "get_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L178"
    }
  },
  "get_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Gets the ospf neighbors address' in state\n\n        Args:\n            device ('obj'): Device to use\n            state ('str'): full/sub-string of the state you want\n                           search for\n\n        Returns:\n            ('list'): of ospf neighbor address' in state\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L763"
    }
  },
  "get_ospf_neighbors": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L382"
    }
  },
  "get_ospf_neighbors_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n            state ('str'): full/sub-string of the state you want \n                           search for\n            in_state ('bool'): Check if state is in state provided\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L290"
    }
  },
  "get_ospf_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            state ('str'): full/sub-string of the state you want \n                           search against\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L363"
    }
  },
  "get_ospf_neighbors_using_interface": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are under the specified interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n\n        Returns:\n            list of ospf neighbor ip_addresses\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_neighbors_using_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L400"
    }
  },
  "get_ospf_process_id_and_area": {
    "iosxe": {
      "doc": " Get ospf process id and area\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            address_family (`str`): Address family name\n\n        Returns:\n            None if error occured\n            tuple: ospf process number and area\n                ex.) (1234, ['0.0.0.4', '0.0.0.8'])\n                First element that is 1234 is process number\n                Second element that is ['0.0.0.4', '0.0.0.8'] is list of areas\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_process_id_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L521"
    }
  },
  "get_ospf_process_id_on_interface": {
    "iosxe": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L861"
    },
    "iosxr": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ospf/get.py#L20"
    }
  },
  "get_ospf_process_number": {
    "iosxe": {
      "doc": " Get ospf process number\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            output ('dict'): Output from parser otherwise will get from device\n\n        Returns:\n            None if error occured\n            str: ospf process number\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_process_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L244"
    }
  },
  "get_ospf_router_id": {
    "iosxe": {
      "doc": " Get ospf router-id - show ip protocols\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            instance ('str'): instance value\n        Returns:\n            str: single router id\n            None: if empty\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L42"
    },
    "junos": {
      "doc": " Retrieve ospf router id\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L130"
    }
  },
  "get_ospf_router_self_originate_metric": {
    "iosxe": {
      "doc": " Get the OSPF advertised metric value\n\n        Args:\n            device ('obj'): Device object\n            vrf (`str`): Vrf value - Default\n            ospf_process_id (`int`): OSPF process ID\n\n        Returns:\n            Dictionary for metric\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_router_self_originate_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L32"
    }
  },
  "get_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRGB Base' and 'SRGB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('int'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRGB Base value, ('dict'): Output from parser)\n            if cannot filter due to lack of arguments:\n                ([{key:value},{key:value}], ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L706"
    }
  },
  "get_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRLB Base' and 'SRLB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRLB Base value, ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L649"
    }
  },
  "get_ospf_session_count": {
    "iosxe": {
      "doc": " Get ospf seesion count\n\n        Args:\n            device(`str`): Device str\n        \n        Returns:\n            integer: ospf session count\n        \n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L464"
    }
  },
  "get_ospf_spf_scheduled_time": {
    "junos": {
      "doc": "\n    Get OSPF spf scheduled time in log 'Jun 12 03:32:19.068983 OSPF SPF scheduled for topology default in 8s' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_spf_scheduled_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L42"
    }
  },
  "get_ospf_spf_start_time": {
    "junos": {
      "doc": "\n    Get OSPF spf start time in log 'Jun 12 03:40:19.068983 Starting full SPF for topology default' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_spf_start_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L67"
    }
  },
  "get_ospf_sr_adj_sid_and_neighbor_address": {
    "iosxe": {
      "doc": " Gets adjacency sids and corresponding neighbor address.\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            neighbor_addresses ('list'): If provided, function will only return adj-sid/neighbor_address\n                                         pairs that exist in the list\n\n        Returns:\n            {(192.168.0.1, 123), (192.168.0.2, 231), ...}\n    ",
      "module_name": "ospf.get",
      "uid": "get_ospf_sr_adj_sid_and_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L794"
    }
  },
  "get_peer_bgp_address": {
    "junos": {
      "doc": " Retrieve peer's ip address for 'show bpg neighbor' command\n\n        Args:\n            device ('obj'): Device object\n            address_family('str'): Mandatory field (ipv4, ipv6)\n\n        Returns:\n            an ip address\n    ",
      "module_name": "bgp.get",
      "uid": "get_peer_bgp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L74"
    }
  },
  "get_peer_restart_flags_received": {
    "junos": {
      "doc": " Retrieve peer restart flags received\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): Neighbor IP address\n\n        Returns:\n            List of peer restart flags received\n    ",
      "module_name": "bgp.get",
      "uid": "get_peer_restart_flags_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L120"
    }
  },
  "get_pfe_count": {
    "junos": {
      "doc": "Returns count of count_type\n\n    Args:\n        device (obj): Device object\n        count_type (str): Which count to return. Ex: bfd, arp, atm-oam\n\n    Return:\n        str: Count for given count_type\n    ",
      "module_name": "pfe.get",
      "uid": "get_pfe_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/pfe/get.py#L14"
    }
  },
  "get_platform_core": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L29"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L312"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L216"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L124"
    }
  },
  "get_platform_cpu_load": {
    "ios": {
      "doc": "Get cpu load on device\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L100"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L385"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load   (`int`): Cpu load (5 mins average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L254"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L156"
    }
  },
  "get_platform_cpu_load_detail": {
    "ios": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L156"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L442"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'netconf': 0.0,\n                                         'bgp': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L314"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L209"
    }
  },
  "get_platform_default_dir": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L10"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L295"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L197"
    },
    "junos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `file list` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/platform/get.py#L10"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L107"
    }
  },
  "get_platform_logging": {
    "ios": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): Override show command\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n        Returns:\n            logs     (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L64"
    },
    "iosxe": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): Override show command\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n        Returns:\n            logs     (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L347"
    },
    "linux": {
      "doc": "Get logging messages\n\n        Args:\n            device          (`obj`): Device object\n            command         (`str`): Override show command\n            files          (`list`): List of syslog files\n            keywords       (`list`): List of keywords to match\n            timeout         (`int`): timeout (default: 300 secs)\n            output          (`str`): Not Available on this platform\n            prompt_pattern  (`str`): Prompt pattern\n            error_patterns (`list`): Error patterns. if not specified, [](empty) is default.\n        Returns:\n            logs           (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/get.py#L10"
    }
  },
  "get_platform_memory_usage": {
    "iosxe": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L500"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to 'dynamic'\n            output         (`str`): Output of show command\n                                    Default to None\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L374"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `all_mem_alloc`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L261"
    }
  },
  "get_platform_memory_usage_detail": {
    "iosxe": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L577"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `dynamic`\n            output         (`str`): Output of show command\n                                    Deault to None\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L453"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `all_mem_alloc`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'libvirtd': 0.0012294695662956926,\n                                            'inotifywait': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L328"
    }
  },
  "get_platform_standby_rp": {
    "iosxe": {
      "doc": " Get standby router slot on device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds retrieving router information\n            interval ('int'): Interval in seconds retrieving router information\n        Raise:\n            None\n        Return:\n            Integer: Number of RP\n    ",
      "module_name": "platform.get",
      "uid": "get_platform_standby_rp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L19"
    }
  },
  "get_policy_map_class_maps": {
    "iosxe": {
      "doc": " Get class map dictionary\n\n        Args:\n            device (`obj`): Device object\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n        Returns:\n            class map dictionary\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_class_maps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L290"
    }
  },
  "get_policy_map_configurational_policy_map": {
    "iosxe": {
      "doc": " Get policy-map running configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces\n\n        Returns:\n            policy-map configurational dictionary\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_configurational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L60"
    }
  },
  "get_policy_map_operational_policy_map_on_interface": {
    "iosxe": {
      "doc": " Get operational policy-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            Device output parsed dictionary\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_operational_policy_map_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L123"
    }
  },
  "get_policy_map_policy_map_ip_precedence": {
    "iosxe": {
      "doc": " Gets policy-map ip precedence per stream\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            stream ip precedece ('dict')\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_policy_map_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L202"
    }
  },
  "get_policy_map_policy_map_packet_count": {
    "iosxe": {
      "doc": " Get policy-map packet count\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            class_map_out_packets: Packet count\n\n        Raises:\n            KeyError\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_policy_map_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L144"
    }
  },
  "get_policy_map_running_policy_map": {
    "iosxe": {
      "doc": " Get running policy-map configuration\n\n        Args:\n            device (`obj`): Device object\n            policy_map (`str`): Policy map name\n\n        Returns:\n            None\n\n        Raises:\n            SchemaUnsupportedKeyError\n    ",
      "module_name": "policy_map.get",
      "uid": "get_policy_map_running_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L25"
    }
  },
  "get_processes_five_seconds_cpu_usage": {
    "iosxe": {
      "doc": " Get average CPU usage for last 5 seconds\n\n        Args:\n            device ('obj'): Device objecte\n\n        Returns:\n            CPU usage for last 5 seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "processes.get",
      "uid": "get_processes_five_seconds_cpu_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/processes/get.py#L4"
    }
  },
  "get_protocols_bgp_process": {
    "iosxe": {
      "doc": " Returns bgp process id from show protocols\n\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            bgp process id\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "uid": "get_protocols_bgp_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L14"
    }
  },
  "get_redundancy_operational_state": {
    "iosxe": {
      "doc": " Get redundancy states of device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            String: Redundancy state\n            None\n        Raises:\n            None\n    ",
      "module_name": "redundancy.get",
      "uid": "get_redundancy_operational_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/get.py#L10"
    }
  },
  "get_route_advertising_label": {
    "junos": {
      "doc": "Get the label with given table_name via\n        'show route advertising-protocol {protocol} {ip_address} {route} detail'\n\n        Args:\n            device ('obj'): Device to use\n            protocol ('str'): Protocol used in show command\n            ip_address ('str'): IP address used in show command\n            route ('str'): Route used in show command\n            table_name ('str'): Label inet\n\n        Returns:\n            str\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.get",
      "uid": "get_route_advertising_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L248"
    }
  },
  "get_route_as_path": {
    "junos": {
      "doc": "\n    Get the AS path via 'show route target_route extensive'\n\n    Args:\n        device (obj): Device object\n        target_route (str): Address used in show command\n    ",
      "module_name": "routing.get",
      "uid": "get_route_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L521"
    }
  },
  "get_route_destination_address": {
    "junos": {
      "doc": "Get destination address that matches criteria\n\n    Args:\n        device (obj): device object\n        extensive (bool): Show extensive output. Defaults to None.\n        prefix (str, optional): Route prefix. Defaults to None.\n        protocol (str, optional): Route protocol. Defaults to None.\n        interface (str, optional): Route interface. Defaults to None.\n\n    Returns:\n        str: The destination address\n    ",
      "module_name": "routing.get",
      "uid": "get_route_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L73"
    }
  },
  "get_route_table_output_interface": {
    "junos": {
      "doc": "Get route table output interface\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_interface (str)\n    ",
      "module_name": "routing.get",
      "uid": "get_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L303"
    }
  },
  "get_route_table_output_label": {
    "junos": {
      "doc": "Get route table output label\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_label (str)\n    ",
      "module_name": "routing.get",
      "uid": "get_route_table_output_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L348"
    }
  },
  "get_route_table_switched_path_destination_address": {
    "junos": {
      "doc": " Get route table switched path destination address\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        name (str): switched path label\n\n    Returns:\n        str or None: metric value\n    ",
      "module_name": "routing.get",
      "uid": "get_route_table_switched_path_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L143"
    }
  },
  "get_router_ospf_section_running_config": {
    "iosxe": {
      "doc": " Get router OSPF section from running-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "uid": "get_router_ospf_section_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L430"
    }
  },
  "get_router_ospf_section_startup_config": {
    "iosxe": {
      "doc": " Get router OSPF section from startup-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "uid": "get_router_ospf_section_startup_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L447"
    }
  },
  "get_routes": {
    "iosxe": {
      "doc": " Retrieve all routes in specific protocal - show ip route\n\n        Args:\n            device ('obj'): Device object\n            protocol_codes ('str'): Protocol codes\n                If not provided, it will get all protocal routes\n        Returns:\n            routes ('list'): List of routes\n    ",
      "module_name": "routing.get",
      "uid": "get_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L34"
    }
  },
  "get_routing_best_path_peer_id": {
    "junos": {
      "doc": "Get routing best path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_best_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L451"
    }
  },
  "get_routing_best_routes": {
    "junos": {
      "doc": "Return a list of best routes\n\n    Args:\n        device (object): Device object\n        address (str): Address to check\n        protocol (str): Protocol to check\n        active_tag (str, optional): Active tag. Defaults to \"*\".\n\n    Returns:\n        list: List of best routes\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L214"
    }
  },
  "get_routing_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name. Default is None.\n        ip_address (str): IP address name. Default is None.\n        extensive (bool): Run with extensive command.\n        expected_metric_2 (bool): Flag for checking metric2\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L392"
    }
  },
  "get_routing_mpls_label": {
    "iosxe": {
      "doc": " Get registered MPLS label to prefix \n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf (`vrf`): VRF name\n            output ('dict'): Optional. Parsed output of command 'show ip route {prefix}'\n        Returns:\n            int: registered MPLS label\n        Raises:\n            None\n\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L267"
    }
  },
  "get_routing_nonbest_path_peer_id": {
    "junos": {
      "doc": "Get routing nonbest path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_nonbest_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L484"
    }
  },
  "get_routing_ospf_routes": {
    "iosxe": {
      "doc": " Retrieve all ospf routes - show ip route\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            routes ('list'): List of ospf routes\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_ospf_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L20"
    }
  },
  "get_routing_outgoing_interface": {
    "iosxe": {
      "doc": " Execute 'show ip cef <address>' and retrieve the outgoing interface\n\n        Args:\n            device (`obj`): Device object\n            ip_address ('str'): ip_address\n            vrf ('str'): vrf to search under\n            address_family ('str'): address_family to search under\n\n        Returns:\n            ('list'): [interface name, ip_address]\n\n        Raises:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L74"
    }
  },
  "get_routing_repair_path_information": {
    "iosxe": {
      "doc": " Get 'repair path' information under route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n        Returns:\n            tuple : (\n                next_hop ('str'): Next hop ip\n                outgoing_interface ('str'): Outgoing interface name\n            )            \n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_repair_path_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L227"
    }
  },
  "get_routing_route_count": {
    "iosxe": {
      "doc": " Get route count for all vrfs\n\n        Args:\n            device(`str`): Device str\n            vrf ('str'): VRF name\n\n        Returns:\n            int: route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L120"
    }
  },
  "get_routing_route_count_all_vrf": {
    "iosxe": {
      "doc": " Get route count for every VRF\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            Integer: Route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_route_count_all_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L155"
    }
  },
  "get_routing_routes": {
    "iosxe": {
      "doc": "Execute 'show ip route vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            address_family (`str`): Address family name\n\n        Returns:\n            Dictionary: received routes\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n\n    ",
      "module_name": "routing.get",
      "uid": "get_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L191"
    }
  },
  "get_rsvp_hello_sent": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            sent_count_flag ('bool'): Flag for getting Hello: sent value\n        \n        Returns:\n            sent_count: Value obtained from the Hello: send value\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.get",
      "uid": "get_rsvp_hello_sent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/get.py#L12"
    }
  },
  "get_running_config": {
    "ios": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L117"
    },
    "iosxe": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L115"
    }
  },
  "get_running_config_dict": {
    "asa": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/asa/running_config/get.py#L12"
    },
    "ios": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L37"
    },
    "iosxe": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L35"
    },
    "iosxr": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L33"
    },
    "junos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/get.py#L12"
    },
    "nxos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L14"
    }
  },
  "get_running_config_hostname": {
    "ios": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L62"
    },
    "iosxe": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L60"
    },
    "iosxr": {
      "doc": " Get device hostname\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L14"
    }
  },
  "get_running_config_section": {
    "ios": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L137"
    },
    "iosxe": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L135"
    }
  },
  "get_running_config_section_dict": {
    "ios": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L85"
    },
    "iosxe": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L83"
    }
  },
  "get_running_image": {
    "iosxe": {
      "cat9500": {
        "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "platform.get",
        "uid": "get_running_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L57"
      },
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L157"
    },
    "iosxr": {
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L43"
    },
    "nxos": {
      "doc": "\n        Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            kickstart (`str`): Kickstart image\n            system (`str`): System image\n    ",
      "module_name": "platform.get",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L38"
    }
  },
  "get_segment_routing_accumulated_path_metric": {
    "iosxe": {
      "doc": " Get accumulated path metric for a preference path\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            preference ('int'): Preference path\n\n        Returns:\n            accumulated_metric (None, 'int'): Accumulated path metric\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_accumulated_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L226"
    }
  },
  "get_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Gets segement-routing global block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L207"
    }
  },
  "get_segment_routing_labels_from_bgp": {
    "iosxe": {
      "doc": " Gets segement-routing labels from bgp table\n\n        Args:\n            device (`obj`): device to use\n            route (`str`): route to check\n            vrf (`vrf`): VRF name\n            best_path (`bool`): only best path returned\n\n        Returns:\n            ('list'): list of segment routing labels\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_labels_from_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L261"
    }
  },
  "get_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Gets segement-routing local block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L187"
    }
  },
  "get_segment_routing_policy_active_path_hop_labels": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            policy ('str'): Policy name\n            policy_dict ('dict'): Policy dict from parser output\n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            ignore_first_label (`bool`): flag to ignore first label\n        Returns:\n            labels ('list'): Hop labels\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_policy_active_path_hop_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L22"
    }
  },
  "get_segment_routing_policy_in_state": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            expected_admin ('str'): Expected admin state\n            expected_oper ('str'): Expected operational state\n            expected_color (`str`): Expected color\n            expected_endpoint (`str`): Expected end-point address\n        Returns:\n            policy ('str'): Policy name\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_policy_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L108"
    }
  },
  "get_segment_routing_sid_map_configuration": {
    "iosxe": {
      "doc": " Get Segment routing SID map configuration\n\n        Args:\n            device ('str'): Device str\n            address_family ('str'): Address family\n        Returns:\n            Dictionary with ip address as key and sid as value\n            ex.)\n                {\n                    '192.168.1.1': '1',\n                    '192.168.1.2': '2'\n                }\n    ",
      "module_name": "segment_routing.get",
      "uid": "get_segment_routing_sid_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L147"
    }
  },
  "get_show_run_bgp_dict": {
    "iosxe": {
      "doc": " Parse router bgp section from show running-config to a dictionary\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            Dictionary following below schema:\n            {\n                'bgp_as': int,\n                    Any(): {\n                        Any(): {\n                            'neighbor': str,\n                            'neighbors': list\n                            'remote_as': int}}}\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "uid": "get_show_run_bgp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L34"
    }
  },
  "get_simulations": {
    "virl": {
      "doc": "Get simulations list\n\n        Args:\n            device (`obj`): Device object\n            connection_alias (`str`): connection alias\n\n        Returns:\n            list: list of simulation names\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "uid": "get_simulations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L12"
    }
  },
  "get_snmp_cli_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from CLI\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n            out (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                        \"load_average\": {\n                            \"status\": \"healthy\",\n                            \"1_min\": 0.07,\n                            \"5_min\": 0.02,\n                            \"15_min\": 0.0\n                        },\n                        \"memory\": {\n                            \"status\": \"healthy\",\n                            \"total\": 964676,\n                            \"used\": 575896,\n                            \"used_percentage\": 60,\n                            \"free\": 388780,\n                            \"free_percentage\": 40,\n                            \"committed\": 869972,\n                            \"committed_percentage\": 90\n                        },\n                        \"cpu\": {\n                            \"0\": {\n                                \"user\": 3.4,\n                                \"system\": 0.8,\n                                \"nice_process\": 0.0,\n                                \"idle\": 95.69,\n                                \"irq\": 0.0,\n                                \"sirq\": 0.1,\n                                \"waiting\": 0.0\n                            }\n                        }}}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "uid": "get_snmp_cli_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L159"
    }
  },
  "get_snmp_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from SNMP device\n\n        Args:\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n        Returns:\n            snmp_dict (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                     \"used\": 575640,\n                     \"free\": 389036,\n                     \"1_min\": 3,\n                     \"5_min\": 4,\n                     \"15_min\": 0,\n                     \"committed\": 869368}}\n    ",
      "module_name": "snmp.get",
      "uid": "get_snmp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L105"
    }
  },
  "get_snmp_id_slot_map": {
    "iosxe": {
      "doc": " Get id-slot mapping from SNMP server\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oids (`list`): Oid codes\n            version (`str`): SNMP version\n        Returns:\n            id_slot_map (`dict`): Id slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "uid": "get_snmp_id_slot_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L49"
    }
  },
  "get_snmp_snmpwalk": {
    "iosxe": {
      "doc": " Get snmpwalk output from SNMP device\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`): SNMP version\n            option (`str`): Optional command\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "uid": "get_snmp_snmpwalk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L13"
    }
  },
  "get_startup_config_dict": {
    "iosxe": {
      "doc": " Get section information from show startup-config\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "startup_config.get",
      "uid": "get_startup_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/startup_config/get.py#L13"
    }
  },
  "get_syslog_first_bgp_down_message": {
    "iosxe": {
      "doc": " Get first BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_first_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L169"
    }
  },
  "get_syslog_first_bgp_up_message": {
    "iosxe": {
      "doc": " Get first BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_first_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L275"
    }
  },
  "get_syslog_first_ospf_down_message": {
    "iosxe": {
      "doc": " Get first OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_first_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L107"
    }
  },
  "get_syslog_first_ospf_up_message": {
    "iosxe": {
      "doc": " Get first OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_first_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L218"
    }
  },
  "get_syslog_last_bgp_down_message": {
    "iosxe": {
      "doc": " Get last BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_last_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L150"
    }
  },
  "get_syslog_last_bgp_up_message": {
    "iosxe": {
      "doc": " Get last BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_last_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L258"
    }
  },
  "get_syslog_last_ospf_down_message": {
    "iosxe": {
      "doc": " Get last OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_last_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L83"
    }
  },
  "get_syslog_last_ospf_up_message": {
    "iosxe": {
      "doc": " Get last OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_last_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L196"
    }
  },
  "get_syslog_maximum_bgp_down_time": {
    "iosxe": {
      "doc": " Get maximum BGP down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from show logging\n        Returns:\n            BGP down time in seconds\n        Raises:\n            ValueError\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_maximum_bgp_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L303"
    }
  },
  "get_syslog_maximum_ospf_down_time": {
    "iosxe": {
      "doc": " Get maximum OSPF down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from Syslog server\n            server ('str'): Syslog server address\n        Returns:\n            Integer: OSPF down time in seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_maximum_ospf_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L12"
    }
  },
  "get_syslog_message_time": {
    "iosxe": {
      "doc": " Get message time\n        Args:\n            message ('str'): Line from show logging command\n            regex ('str'): Regex to extract time from line\n        Returns:\n            datetime: Time extracted from message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "uid": "get_syslog_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L47"
    }
  },
  "get_system_connections_sessions": {
    "com": {
      "doc": " Get list of system connections via show system connections\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of system connection sessions\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "get_system_connections_sessions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2587"
    }
  },
  "get_system_current_time": {
    "junos": {
      "doc": "Return system timestamp\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        (Datetime): Return system timestamp\n    ",
      "module_name": "system.get",
      "uid": "get_system_current_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L42"
    }
  },
  "get_system_uptime": {
    "junos": {
      "doc": "Return system uptime\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        str: Returns system uptime in seconds\n    ",
      "module_name": "system.get",
      "uid": "get_system_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L16"
    }
  },
  "get_system_users": {
    "com": {
      "doc": " Get list of users via show system user\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of username and ip address pairs\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "get_system_users",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2554"
    }
  },
  "get_time_source_from_output": {
    "com": {
      "doc": " Parse out 'Time Source' value from output\n        Time source output example : 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n                                     'Time source is NTP, *12:33:45.355 EST Fri Feb 7 2020'\n\n        Args:\n            output ('str'): Text output from command\n        Returns:\n            Datetime object\n            Format : datetime(year, month, day, hour, minute, second, microseconds)\n    ",
      "module_name": "utils",
      "uid": "get_time_source_from_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L532"
    }
  },
  "get_tolerance_min_max": {
    "com": {
      "doc": "\n       Get minimum and maximum tolerance range\n\n        Args:\n            value(int): value to find minumum and maximum range\n            expected_tolerance ('int'): Expected tolerance precentage\n\n        Returns:\n            minimum and maximum value of tolerance\n    ",
      "module_name": "utils",
      "uid": "get_tolerance_min_max",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1914"
    }
  },
  "get_total_space": {
    "iosxe": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L206"
    },
    "iosxr": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L149"
    },
    "nxos": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L89"
    }
  },
  "get_traceroute_mpls_label_to_prefix": {
    "iosxe": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L65"
    },
    "iosxr": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L63"
    }
  },
  "get_traceroute_parsed_output": {
    "iosxe": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L16"
    },
    "iosxr": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L16"
    }
  },
  "get_traffic_rates": {
    "iosxe": {
      "doc": "Retrieve the formated traffic rates and tolerance margin\n\n        Args:\n            expected_rate (`str`): Expected traffic rate\n            tolerance (`str`): Tolerance margin\n\n        Returns:\n            expected_rate, expected_rate_unit, original_rate, tolerance_margin\n        Raise:\n            Exception: Failed analyzing rate\n    ",
      "module_name": "traffic.checks",
      "uid": "get_traffic_rates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L391"
    }
  },
  "get_unconfig_line": {
    "com": {
      "doc": " unconfigure specific line\n\n        Args:\n            config_dict (`str`): Config dict\n            line (`str`): line to unconfig\n        Returns:\n            unconfig (`list`): list of unconfig strings\n    ",
      "module_name": "utils",
      "uid": "get_unconfig_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L197"
    }
  },
  "get_unused_loopback_interface": {
    "iosxe": {
      "doc": " Gets the first un-used loopback interface\n\n        Args:\n            device ('obj'): device to use\n\n        returns:\n            string: first unused loopback\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "uid": "get_unused_loopback_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L386"
    }
  },
  "get_username_password": {
    "com": {
      "doc": " Gets the username and password to use to log into the device console.\n    ",
      "module_name": "utils",
      "uid": "get_username_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1211"
    }
  },
  "get_valid_config_from_running_config": {
    "ios": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L190"
    },
    "iosxe": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L188"
    },
    "iosxr": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L57"
    },
    "nxos": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L38"
    }
  },
  "get_vlan_info": {
    "ios": {
      "doc": " Api method to call parser and return device vlan information\n        Args:\n                device ('obj'): Device object\n        Returns:\n                Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/vlan/get.py#L18"
    },
    "iosxe": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/get.py#L12"
    },
    "iosxr": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/vlan/get.py#L17"
    },
    "nxos": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/vlan/get.py#L17"
    }
  },
  "get_vrf_interface": {
    "iosxe": {
      "doc": " Gets the subinterfaces for vrf\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n\n        Returns:\n            interfaces('list'): List of interfaces under specified vrf\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "uid": "get_vrf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L85"
    }
  },
  "get_vrf_route_distinguisher": {
    "iosxe": {
      "doc": " Get default route distinguisher from show command\n\n        Args:\n            vrf ('str')     : VRF value\n            device ('obj')  : Device object\n\n        Returns:\n            route_distinguisher ('str'): Route distinguisher value\n            False\n\n        Raises:\n            Exception\n    ",
      "module_name": "vrf.get",
      "uid": "get_vrf_route_distinguisher",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L37"
    }
  },
  "get_vrf_route_targets": {
    "iosxe": {
      "doc": " Get route target value from a device\n\n        Args:\n            address_family ('str'): address family value\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            vrf('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n\n        Returns:\n            Route target value\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "uid": "get_vrf_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L110"
    }
  },
  "get_vrf_vrfs": {
    "iosxe": {
      "doc": " Get all vrfs from device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            out ('dict'): Vrf dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "uid": "get_vrf_vrfs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L12"
    }
  },
  "has_configuration": {
    "com": {
      "doc": " Verifies if configuration is present\n        Args:\n            configuration_dict ('dict'): Dictionary containing configuration\n            configuration ('str'): Configuration to be verified\n        Returns:\n            True if configuration is found\n    ",
      "module_name": "utils",
      "uid": "has_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L332"
    }
  },
  "int_to_mask": {
    "com": {
      "doc": " Convert int to mask\n        Args:\n            mask_int ('int'): prefix length is convert to mask\n        Returns:\n            mask value\n    ",
      "module_name": "utils",
      "uid": "int_to_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L350"
    }
  },
  "is_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Verifies that import path selection of type is in running\n        config\n\n        Args:\n            device('obj'): device to use\n            vrf('str'): vrf name\n            selection_type('str'): import path selection type to verify\n            max_time('int'): max time to wait\n            check_interval('int'): how often to check        \n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L276"
    }
  },
  "is_bgp_neighbor_authentication_key_configured": {
    "junos": {
      "doc": "\n    Verify that all of bgp neighbors have Authentication key is configured\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_neighbor_authentication_key_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L395"
    }
  },
  "is_bgp_neighbors_enabled": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is enabled and in either Idle or Active\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_neighbors_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L882"
    }
  },
  "is_bgp_neighbors_established": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is established\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_neighbors_established",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L910"
    }
  },
  "is_bgp_neighbors_shutdown": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is shutdown\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_neighbors_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L854"
    }
  },
  "is_bgp_neighbors_state": {
    "iosxe": {
      "doc": " Verifies BGP neighbor is in state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            state('regex str'): regex to match\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_neighbors_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L816"
    }
  },
  "is_bgp_running": {
    "junos": {
      "doc": "\n    Verify if bgp is running\n\n    Args:\n        device('obj'): device to use\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "uid": "is_bgp_running",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L359"
    }
  },
  "is_current_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check current boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "uid": "is_current_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L33"
    }
  },
  "is_eem_applet_configured": {
    "iosxe": {
      "doc": " Verify if EEM applet is configured in running config\n\n        Args:\n            device ('obj') : Device object\n            applet_name ('str') : Applet name\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "eem.verify",
      "uid": "is_eem_applet_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/verify.py#L7"
    }
  },
  "is_interface_changed_state_log": {
    "iosxe": {
      "doc": " Verify interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "is_interface_changed_state_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L146"
    }
  },
  "is_interface_igp_sync_mpls_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L86"
    },
    "iosxr": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L54"
    }
  },
  "is_interface_igp_sync_ospf_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show ip ospf mpls ldp interface'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf      ('str')        : vrf name\n            address_family ('str')  : Interface address family (ipv4 or ipv6)\n            instance ('str')        : Instance number\n            area_address ('str')    : Area address\n            device                  : Device to be executed command\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Raises:\n            Exception\n\n        Returns\n            None\n\n    ",
      "module_name": "ospf.verify",
      "uid": "is_interface_igp_sync_ospf_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L341"
    }
  },
  "is_interface_present_running_config": {
    "iosxe": {
      "doc": " Verify if interface is present in running-config\n        Args:\n            device ('obj')      : Device object\n            interface ('str')   : Interface\n\n        Raises:\n            SubCommandFailure\n            Exception\n        Returns\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "uid": "is_interface_present_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L694"
    }
  },
  "is_interface_traffic_flowing_at_rate": {
    "iosxe": {
      "doc": " Verify if interface traffic is flowing at generated rate\n        Args:\n            interface_rate ('float'): Interface rate\n            tgn_tx_rate ('float'): Generated rate\n            tolerance ('float'): Margin of error in percentage \n\n        Returns:\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "uid": "is_interface_traffic_flowing_at_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L740"
    }
  },
  "is_issu_in_state": {
    "iosxe": {
      "doc": " Verify if ISSU is in state for a specific slot\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot for which we need to check ISSU state\n            expected_state ('str'): Acceptable ISSU states are:\n                                        - loadversion\n                                        - runversion\n                                        - acceptversion\n                                        - commitversion\n            max_time ('int'): Max time checking issu state\n            interval ('int': Interval checking\n        Raise:\n            None\n        Return\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "uid": "is_issu_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L55"
    }
  },
  "is_issu_rollback_timer_in_state": {
    "iosxe": {
      "doc": " Verify if issu rollback timer is in state\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot name\n            expected_state ('str'): Expected state ('active', 'inactive')\n            max_time ('int'): Max time checking \n            interval ('int'): Check interfal\n        Return:\n            True\n            False\n        Raise:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "issu.verify",
      "uid": "is_issu_rollback_timer_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L101"
    }
  },
  "is_issu_terminal_state_reached_on_slot": {
    "iosxe": {
      "doc": " Verify if a slot has reached\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot to check\n            max_time ('int'): Max time checking\n            interval ('int'): Interval of checking\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "uid": "is_issu_terminal_state_reached_on_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L18"
    }
  },
  "is_l2vpn_storm_control_packet_count_increased": {
    "iosxe": {
      "doc": " Verify packet count has increased\n        \n            Args:\n                intial_discard_packets ('dict'): previous dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234234,\n                            'unicast': 123123\n                        }\n                current_discard_packets ('dict'): current dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234534,\n                            'unicast': 123523\n                        }\n            Returns:\n                True\n                False\n            Raises:\n                None\n        ",
      "module_name": "l2vpn.verify",
      "uid": "is_l2vpn_storm_control_packet_count_increased",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L126"
    }
  },
  "is_logging_bfd_down_logged": {
    "iosxe": {
      "doc": " Verifies bfd is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "uid": "is_logging_bfd_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L61"
    }
  },
  "is_logging_ospf_neighbor_down_logged": {
    "iosxe": {
      "doc": " Verifies ospf neighbor is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "uid": "is_logging_ospf_neighbor_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L84"
    }
  },
  "is_logging_ospf_spf_logged": {
    "junos": {
      "doc": "\n    Verify SPF change log\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('int'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "uid": "is_logging_ospf_spf_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L14"
    }
  },
  "is_logging_static_route_down_logged": {
    "iosxe": {
      "doc": " Verifies static route is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "uid": "is_logging_static_route_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L108"
    }
  },
  "is_logging_string_matching_regex_logged": {
    "iosxe": {
      "doc": " Verifies string that matches regex is logged - ignoring logs from before passed timestamp\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n           regex ('str'): regex string to match\n\n        Returns:\n            timestamp of command if found else False ('str') \n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "uid": "is_logging_string_matching_regex_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L17"
    }
  },
  "is_mpls_ldp_neighbor_in_state": {
    "iosxe": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L191"
    },
    "iosxr": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L159"
    }
  },
  "is_next_reload_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check next boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "uid": "is_next_reload_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L16"
    }
  },
  "is_ntp_clock_synchronized": {
    "iosxe": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L78"
    },
    "iosxr": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L71"
    }
  },
  "is_ospf_neighbor_established_on_interface": {
    "iosxe": {
      "doc": " Verify OSPF is established on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): Maximum wait time\n            check_interval (`int`): Check interval\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "uid": "is_ospf_neighbor_established_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L193"
    }
  },
  "is_ospf_neighbor_state_changed_log": {
    "iosxe": {
      "doc": " Verify ospf interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "ospf.verify",
      "uid": "is_ospf_neighbor_state_changed_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L225"
    }
  },
  "is_ospf_shutdown": {
    "iosxe": {
      "doc": " Verifies ospf is shutdown by verifying there are\n        no neighbors\n\n        Args:\n            device('obj'): device to use\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            interface ('str'): Interface name\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "uid": "is_ospf_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L243"
    }
  },
  "is_ospf_tilfa_enabled_in_sr": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in SR\n\n    Args:\n        device ('str'): Device object\n        interface ('str'): Interface name\n        process_id ('int'): Process id\n        area ('str'): Ospf area\n        neighbor_address ('str'): Neighbor address\n        max_time (int): Maximum wait time in seconds checking an ouput\n        check_interval (int): Wait time between iterations when looping\n        output ('dict'): Parsed output of command 'show ip ospf segment-routing protected-adjacencies'\n    Raises:\n        None\n    Returns:\n        True/False\n    ",
      "module_name": "ospf.verify",
      "uid": "is_ospf_tilfa_enabled_in_sr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L952"
    }
  },
  "is_platform_slot_in_state": {
    "iosxe": {
      "doc": " Verify if slot is in state\n\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot number\n            state ('str'): State being checked\n            max_time ('int'): Max time checking\n            interval ('int'): Interval checking\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "uid": "is_platform_slot_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L20"
    }
  },
  "is_process_started": {
    "linux": {
      "doc": " Checks if a trex process is running right now.\n        Args:\n            name (str): Name of the process to search for\n        Raise:\n            None\n        Returns:\n            Running (bool): Whether or not the process is running\n    ",
      "module_name": "platform.utils",
      "uid": "is_process_started",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L268"
    }
  },
  "is_push_present_in_route": {
    "junos": {
      "doc": "Check if Push is presnt in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "is_push_present_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L883"
    }
  },
  "is_redundancy_state_in_state": {
    "iosxe": {
      "doc": " Verify if redundancy state is in state:\n        Args:\n            device ('obj'): Device object\n            output ('dict'): Parsed output of show redundancy state\n            expected_state ('str'): Expected state\n            max_time ('int'): Max time in seconds to check redundancy state\n            check_interval ('int'): Interval in seconds between each check\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "redundancy.verify",
      "uid": "is_redundancy_state_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/verify.py#L16"
    }
  },
  "is_route_in_bgp_table": {
    "iosxe": {
      "doc": " Verify if route is in BGP table\n        Args:\n            device ('obj')          : Device object\n            address_family('str')   : Address family to be used in show command\n            default_rd('str')       : Route distinguisher from VRF list\n            default_vrf('str')      : Default VRF name\n            routes_dict ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "uid": "is_route_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1490"
    }
  },
  "is_router_bgp_configured_with_four_octet": {
    "iosxe": {
      "doc": " Verifies that router bgp has been enabled with four\n        octet capability and is in the established state\n\n        Args:\n            device('obj'): device to check\n            vrf('vrf'): vrf to check under\n            neighbor_address('str'): neighbor address to match\n            max_time('int'): maximum time to wait\n            check_interval('int'): how often to check\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "is_router_bgp_configured_with_four_octet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L228"
    }
  },
  "is_routing_repair_path_in_cef": {
    "iosxe": {
      "doc": " Verify 'repair path' is presente in express forwarding\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds retrieving and checking output\n            check_interval ('int')\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "cef.verify",
      "uid": "is_routing_repair_path_in_cef",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L17"
    }
  },
  "is_routing_repair_path_in_route_database": {
    "iosxe": {
      "doc": " Verify if 'repair path' is present in route database\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "is_routing_repair_path_in_route_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L654"
    }
  },
  "is_routing_route_targets_present": {
    "iosxe": {
      "doc": " Verify route target is present\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): address family to check\n            routes ('list'): list of routes to compare\n                ex.) routes = ['192.168.1.1', '192.168.1.2']\n            ignore_routes ('list'): list of routes to ignore with type\n                ex.) ignore_routes = ['L', 'B', 'C']\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "is_routing_route_targets_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L613"
    }
  },
  "is_snmp_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in snmp server\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "uid": "is_snmp_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L131"
    }
  },
  "is_syslog_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in Syslog server.\n        It needs a output from a tcpdump command\n\n        Args:                        \n            device ('obj'): Device object\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "uid": "is_syslog_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L312"
    }
  },
  "is_type_10_opaque_area_link_states_originated": {
    "iosxe": {
      "doc": " Verifies if Type 10 opaque area link states are originated\n        from command 'show ip ospf database opaque-area self-originate'\n\n        Args:\n            device (`obj`): Device to be executed command\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "uid": "is_type_10_opaque_area_link_states_originated",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L662"
    }
  },
  "is_version_image_installed": {
    "iosxe": {
      "doc": " Verify if image is installed on device\n        Args:\n            device ('str'): Device object\n            image ('str'): Image being verified\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "version.verify",
      "uid": "is_version_image_installed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/version/verify.py#L8"
    }
  },
  "issu_acceptversion": {
    "iosxe": {
      "doc": " Execute issu acceptversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu acceptversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "issu_acceptversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L291"
    }
  },
  "issu_commitversion": {
    "iosxe": {
      "doc": " Execute issu commitversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu commitversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "issu_commitversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L315"
    }
  },
  "issu_loadversion": {
    "iosxe": {
      "doc": " Execute issu loadversion command on device\n        Args:\n            device ('obj'): Device object\n            standby_slot ('int'): Standby slot number\n            disk ('str'): Disk name\n            image ('str'): Image name\n            timeout ('int'): Time out in seconds\n        Raise:\n            Exception: Failed to load version on device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "issu_loadversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L233"
    }
  },
  "issu_runversion": {
    "iosxe": {
      "doc": " Execute issu runversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception Failed to reconnect to device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "issu_runversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L263"
    }
  },
  "kill_processes": {
    "linux": {
      "doc": " Kills the processes with given PIDs \n        Args:\n            pids ('list'): List of PIDs\n            ex.) pids = [12, 15, 16]\n        Raise:\n            None\n        Returns:\n            Failed (list): List of pids that failed to be killed\n    ",
      "module_name": "platform.utils",
      "uid": "kill_processes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L63"
    }
  },
  "launch_simulation": {
    "virl": {
      "doc": "launch simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            simulation_data (`str`): simulation data \n            connection_alias (`str`): connection_alias\n\n        Returns:\n            result: result of launching simulation\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "uid": "launch_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L12"
    }
  },
  "learn_process_pids": {
    "linux": {
      "doc": " Finds the PIDs of processes that match the search\n        Args:\n            search ('str'): The name of the processes to find\n        Raise:\n            None\n        Returns:\n            PIDs ('list'): [pid]\n            ex.) PIDs = ['123', '456']\n    ",
      "module_name": "platform.utils",
      "uid": "learn_process_pids",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L43"
    }
  },
  "learn_routem_configs": {
    "linux": {
      "doc": " Gets the current running config on device\n        Args:\n            output_config ('bool'): Specifies whether the config\n            or path of the config is outputted \n        Raise:\n            None\n        Returns:\n            Config ('dict'): {pid: config}\n            ex.) Config = {'123': 'config'}\n    ",
      "module_name": "platform.utils",
      "uid": "learn_routem_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L10"
    }
  },
  "load_dict_from_json_file": {
    "com": {
      "doc": " load python dictionary from a JSON file\n        Args:\n            filename (`string`): JSON file name\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.load_dict_from_json_file('merged_dict')\n        {\n            'a': {\n                'b': 1,\n            },\n            'c': {\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "uid": "load_dict_from_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2372"
    }
  },
  "load_jinja": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            device (`obj`): Device object\n            vrf_name (`str`): Vrf name to be used in configuration\n            bandwidth (`int`): In bps, bandwidth for traffic flow\n            packet_size (`int`): Config packet size\n            ref_packet_size (`int`): Refrenced packet size\n            time_interval (`float`): In seconds, used for calculating bc\n            ipp4_bps (`int`): In bps, bandwidth for IPP4 traffic\n            ipp2_bw_percent (`int`): In percents, bandwidth for IPP2 traffic\n            ipp0_bw_percent (`int`): In percents, bandwidth for IPP0 traffic\n            interface (`str`): Where to apply the configured policies\n\n        Returns:\n            out\n    ",
      "module_name": "utils",
      "uid": "load_jinja",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L483"
    }
  },
  "load_jinja_template": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            path (`str`): Path to file directory\n            file (`str`): File name\n            kwargs (`dict`): Key value pairs\n        Returns:\n            out (`str`): Rendered template\n    ",
      "module_name": "jinja.get",
      "uid": "load_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L33"
    }
  },
  "mask_to_int": {
    "com": {
      "doc": " Convert mask to int\n        Args:\n            mask ('str'):  mask to int\n        Returns:\n            int value\n    ",
      "module_name": "utils",
      "uid": "mask_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L365"
    }
  },
  "modify_filename": {
    "com": {
      "doc": " Truncation is done such that protocol:/directory/image should not\n        exceed the limited characters.\n        This for older devices, where it does not allow netboot from rommon,\n        if image length is more than provided limit (63 characters by default).\n        Returns truncated image name, if protocol:/directory/image length\n        exceeds limit, else image return without any change\n        Args:\n            device\n            file ('str'): the file to be processed\n            directory ('str'): the directory where the image will be copied\n            protocol ('str'): the protocol used in the url\n            server ('str'): server address used in calculation, if not provided then it\n                            will take the longest server address from the testbed\n            append_hostname ('bool'): option to append hostname to the end of the file\n            check_image_length ('bool'): option to check the name length exceeds the limit\n            limit ('int'): character limit of the url, default 63\n            unique_file_name\uff08'bool'): append a six digit random number to the end of\n                                        file name to make it unique\n            new_name ('str'): replace original file name with new_name\n\n        Raises:\n            ValueError\n        Returns:\n            truncated image name\n            ",
      "module_name": "utils",
      "uid": "modify_filename",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1025"
    }
  },
  "netmask_to_bits": {
    "com": {
      "doc": " Convert netmask to bits\n        Args:\n            net_mask ('str'): Net mask IP address\n            ex.) net_mask = '255.255.255.255'\n        Raise:\n            None\n        Returns:\n            Net mask bits\n    ",
      "module_name": "utils",
      "uid": "netmask_to_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L815"
    }
  },
  "number_to_string": {
    "com": {
      "doc": " Converts from number(integer|float) to number(string)\n        Args:\n            number (`int|float`): number (integer|float)\n        Raise:\n            Exception\n        Returns:\n            ret_str ('str'): number (string)\n\n        Example:\n\n        >>> dev.api.number_to_string(1)\n        '1'\n\n        >>> dev.api.number_to_string(1.1)\n        '1.1'\n\n        >>> dev.api.number_to_string('1')\n        '1'\n\n        >>> dev.api.number_to_string('1.1')\n        '1.1'\n\n    ",
      "module_name": "utils",
      "uid": "number_to_string",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1411"
    }
  },
  "nxapi_method_nxapi_cli": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - output_schema, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json_rpc, json, xml\n\n            command_type (str): Type of command:\n                - cli, cli_ascii, cli_array, cli_show, cli_show_ascii,\n                  cli_conf, bash\n\n            # Optional depending on above arguments\n            error_action (str): Action to take if error:\n                - stop_on_error, continue_on_error, rollback_on_error\n            chunk (bool): True to chunk output else False\n            sid (str): SID from previous chunk to get the next chunk\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "uid": "nxapi_method_nxapi_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L134"
    }
  },
  "nxapi_method_nxapi_rest": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-REST (DME)\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - convert, convert-with-dn, convert-for-replace, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            # For convert action\n            input_type (str): Specify input type:\n                - cli, model\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "uid": "nxapi_method_nxapi_rest",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L8"
    }
  },
  "nxapi_method_restconf": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - send, convert\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json, xml\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "uid": "nxapi_method_restconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L224"
    }
  },
  "perform_issu": {
    "iosxe": {
      "doc": " Execute ISSU on device\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name on disk\n            disk ('str'): Disk where is located image\n            timeout ('int'): Timeout in second for each section\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "perform_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L115"
    }
  },
  "ping_interface_success_rate": {
    "iosxe": {
      "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "ping_interface_success_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L250"
    }
  },
  "pkill_process": {
    "linux": {
      "doc": " pkills the process with the given name \n        Args:\n            name ('str'): Name of the running process\n            ex.) name = 't-rex'\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "uid": "pkill_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L83"
    }
  },
  "prepare_issu": {
    "iosxe": {
      "doc": " Prepare image and check device before starting issu process\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name\n            path ('str'): Path on dsetr\n            overwrite ('bool'): Flag to overwrite existing file\n            protocol ('str'): Protocol to be used on copying image to device\n            address ('str'): Address of server from where image will be copied.\n            disks ('list'): List of disks where image will be copied\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n        Raises:\n            Exception: Failed preparing ISSU image\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "uid": "prepare_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L35"
    }
  },
  "question_mark": {
    "com": {
      "doc": " Verify if ? works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "question_mark",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L112"
    }
  },
  "question_mark_retrieve": {
    "com": {
      "doc": " Retrieve output after pressing ? on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            output (`str`): Output\n    ",
      "module_name": "utils",
      "uid": "question_mark_retrieve",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L131"
    }
  },
  "read_data_from_device": {
    "linux": {
      "doc": " Reads text data from device and returns it as output\n        Args:\n            location ('str'): Path to the text file\n        Raises:\n            FileNotFoundError: File Does not Exist\n        Returns:\n            Data ('str'): Text data read from the device\n    ",
      "module_name": "platform.utils",
      "uid": "read_data_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L175"
    }
  },
  "reconnect_device": {
    "com": {
      "doc": " Reconnect device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds trying to connect to device\n            interval ('int'): Interval in seconds of checking connection\n            sleep_disconnect ('int'): Waiting time after device disconnection\n        Raise:\n            ConnectionError\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "reconnect_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L769"
    }
  },
  "reconnect_device_with_new_credentials": {
    "com": {
      "doc": " Reconnect device\n    Args:\n        device ('obj'): Device object\n        max_time ('int'): Max time in seconds trying to connect to device\n        interval ('int'): Interval in seconds of checking connection\n        sleep_disconnect ('int'): Waiting time after device disconnection\n    Raise:\n        ConnectionError\n    Returns:\n        N/A\n    ",
      "module_name": "utils",
      "uid": "reconnect_device_with_new_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L702"
    }
  },
  "reload_issu_slot": {
    "iosxe": {
      "doc": " Reload slot on device\n        Args:\n            device ('obj'): Device object\n            slot ('str'):  Slot to be reloaded\n            wait_time ('int'): Time to wait in seconds after slot reload\n        Raise:\n            Exception\n    ",
      "module_name": "issu.configure",
      "uid": "reload_issu_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L343"
    }
  },
  "remove_arp_timeout": {
    "iosxe": {
      "doc": " Remove arp timeout configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "uid": "remove_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L50"
    }
  },
  "remove_bgp_configuration": {
    "iosxe": {
      "doc": " Remove bgp configuration\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "uid": "remove_bgp_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L687"
    }
  },
  "remove_eem_applet": {
    "iosxe": {
      "doc": " Remove EEM applet from running config\n\n        Args:\n            device ('obj'): Device object\n            applet_name ('str'): Applet name\n        Raises:\n            SubCommandFailure\n        Returns:\n            None\n    ",
      "module_name": "eem.configure",
      "uid": "remove_eem_applet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/configure.py#L14"
    }
  },
  "remove_interface_carrier_delay": {
    "iosxe": {
      "doc": " Remove interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "remove_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L331"
    }
  },
  "remove_interface_configured_service_policy": {
    "iosxe": {
      "doc": " Remove any service policy configured under interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to remove service policy from\n            out (`dict`): Show run interface <interface> output\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "remove_interface_configured_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L595"
    }
  },
  "remove_interface_negotiation": {
    "iosxe": {
      "doc": " Remove negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "remove_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L124"
    }
  },
  "remove_interface_ospf_bfd": {
    "iosxe": {
      "doc": " Remove interface ospf bfd on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "remove_interface_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L355"
    }
  },
  "remove_mpls_ldp_from_interface": {
    "iosxe": {
      "doc": " Remove ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L38"
    },
    "junos": {
      "doc": " Remove ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L33"
    }
  },
  "remove_ntp_server": {
    "iosxe": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L50"
    },
    "iosxr": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L33"
    }
  },
  "remove_ntp_system_peer": {
    "iosxe": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L12"
    },
    "iosxr": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L12"
    }
  },
  "remove_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": " Remove max-metric from running-config under ospf\n\n        Args:\n            device (`obj`): Device object \n            ospf_process_id (`str`): Router OSPF id\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "remove_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L112"
    }
  },
  "remove_ospf_passive_interface": {
    "iosxe": {
      "doc": "Remove passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "uid": "remove_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L204"
    }
  },
  "remove_routing_ip_route": {
    "iosxe": {
      "doc": " Remove ip route on device\n\n        Args:\n            device ('str'): Device str\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "uid": "remove_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L67"
    }
  },
  "remove_running_config": {
    "ios": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L107"
    },
    "iosxe": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L107"
    }
  },
  "remove_subscriber": {
    "iosxe": {
      "doc": " Remove subscriber\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): BGP AS\n            bridge_id ('str'): Bridge Id\n            bridge_interface ('str'): Bridge interface\n            vpn_id ('str'): VPN id\n            vpn_interface ('str'): VPN interface\n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "subscriber.configure",
      "uid": "remove_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/subscriber/configure.py#L12"
    }
  },
  "remove_tacacs_server": {
    "ios": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L133"
    },
    "iosxe": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L133"
    }
  },
  "repeat_command_save_output": {
    "com": {
      "doc": "\n        Execute the {command} on the device and store the output to file, can\n        repeat the same command with {command_count} and a sleep interval with\n        {command_interval}.\n\n        Args:\n            command ('str'): Command to run on device\n            command_interval ('int'): Waiting between command calls\n            command_count ('int'): Number of times to call command\n            report_file ('str'): File name to store in archive\n\n        Raises:\n            Parser and python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "repeat_command_save_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1836"
    }
  },
  "request_chassis_routing_engine_master_switch": {
    "junos": {
      "doc": "Run request chassis routing-engine master switch\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "uid": "request_chassis_routing_engine_master_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L11"
    }
  },
  "request_routing_engine_login_other_routing_engine": {
    "junos": {
      "doc": "Run request routing-engine login other-routing-engine\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "uid": "request_routing_engine_login_other_routing_engine",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L27"
    }
  },
  "reset_interface": {
    "iosxe": {
      "doc": " Reset interface configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "reset_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L32"
    }
  },
  "restart_routing": {
    "junos": {
      "doc": "API for restarting routing\n\n    Args:\n        device (obj): Restarts routing process\n\n    Returns:\n        None\n    ",
      "module_name": "routing.configure",
      "uid": "restart_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/configure.py#L11"
    }
  },
  "restore_running_config": {
    "ios": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L75"
    },
    "iosxe": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L75"
    }
  },
  "save_dict_to_json_file": {
    "com": {
      "doc": " merge a list of Python dictionaries into one dictionary\n        and save the dictionary to a JSON file\n        If same key exists in data(dicts) which will be merged, \n        the key will be overridden.\n\n        Args:\n            data (`list`): list of dictionaries\n            filename (`string`): filename to save\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.save_dict_to_file(data=[dict1, dict2], 'merged_dict')\n        {\n            'a': {        # came from `dict1`\n                'b': 1,\n            },\n            'c': {        # came from `dict2`\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "uid": "save_dict_to_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2331"
    }
  },
  "save_info_to_file": {
    "com": {
      "doc": " save information to a file in runtime directory\n        Args:\n            filename ('str'): Log file name\n            parameters ('list'): Parameters list\n            header ('list'): Header list\n            separator ('str'): Separator for the parameters\n\n            example for traffic loss:\n                parameters = ['TC1', 'PE1-PE2-1000pps', '0.0', 'PASSED']\n                header = ['uid', 'flows', 'outage', 'result']\n                save_info_to_file('logs.txt', parameters, header=header)\n\n                - in logs.txt\n                uid,flows,outage,result\n                TC1,PE1-PE2-1000pps,0.0,PASSED\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "save_info_to_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1351"
    }
  },
  "save_running_config": {
    "ios": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L22"
    },
    "iosxe": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L22"
    }
  },
  "save_running_config_configuration": {
    "iosxe": {
      "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "save_running_config_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L313"
    }
  },
  "search_running_config": {
    "ios": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L18"
    },
    "iosxe": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L16"
    }
  },
  "send_email": {
    "com": {
      "doc": "\n        Send an email from execution server where pyATS runs. \n        Plain or HTML email can be sent.\n\n        Args:\n            from_email (list/str): list or string-list of addresses to be used\n                                   in the generated email's \"From:\" field.\n            to_email(list/str): list or string-list of addresses to be used\n                                in the generated email's \"To:\" field.\n            subject (str): alternate subject for the report email\n            body (string): message body in the email\n            attachments (list): list of attachments paths\n            html_email (bool): flag to enable alternative email format\n            html_body (string): html content\n\n        Raises:\n            python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "send_email",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1882"
    }
  },
  "set_clock": {
    "iosxe": {
      "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "set_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L329"
    }
  },
  "set_traffic_transmit_rate": {
    "iosxe": {
      "doc": "Set stream transmit rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Failed to set transmit rate\n    ",
      "module_name": "traffic.checks",
      "uid": "set_traffic_transmit_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L17"
    }
  },
  "shut_interface": {
    "iosxe": {
      "doc": " Shut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L157"
    },
    "junos": {
      "doc": " Shut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L47"
    }
  },
  "shut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Shut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "interface.configure",
      "uid": "shut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L214"
    }
  },
  "shutdown_interface": {
    "iosxe": {
      "doc": " Shutdown a bundled Interface\n\n        Args:\n            device (`obj`): Device object\n            member (`str`): Bundled interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "shutdown_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L842"
    }
  },
  "slugify": {
    "com": {
      "doc": " update all special characters in string to underscore\n        Args:\n            word (`str`): string which you want to convert special characters in the word to underscore\n        Raise:\n            Exception\n        Returns:\n            word\n\n        Example:\n\n        >>> dev.api.slugify('Ethernet1/1.100')\n        Ethernet1_1_100\n\n        >>> dev.api.slugify('2020-05-26_14:15:36.555')\n        2020_05_26_14_15_36_555\n\n    ",
      "module_name": "utils",
      "uid": "slugify",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1815"
    }
  },
  "start_packet_capture": {
    "iosxe": {
      "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "start_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L79"
    }
  },
  "start_perf": {
    "nxos": {
      "doc": " start perf in shell mode\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to set for Perf\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n        Returns:\n            ret_dict (`dict`): Dictionary\n            \n        example:\n        ret_dict = {\n            `service_pid`: '8086',\n            `perf_pid`: '15026',\n        }\n    ",
      "module_name": "flamegraph.flamegraph",
      "uid": "start_perf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L15"
    }
  },
  "start_routem_process": {
    "linux": {
      "doc": " Starts the routem executable with the provided config\n        Args:\n            config ('str'): Path to config file or raw config data\n            routem_executable ('str'): Path to routem executable file \n            config_save_location ('str'): Path of folder of where to save the config\n                file if raw config data is passed into the first argument\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "uid": "start_routem_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L194"
    }
  },
  "start_trex_process": {
    "linux": {
      "doc": " Starts a trex process on the device\n        Args:\n            location (str): folder location of where the trex executable is at\n        Raise:\n            FileNotFoundError\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "uid": "start_trex_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L250"
    }
  },
  "stop_packet_capture": {
    "iosxe": {
      "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "uid": "stop_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L135"
    }
  },
  "stop_perf_and_generate_svg": {
    "nxos": {
      "doc": " stop perf in shell mode and then copy to remote and generate svg file\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            perf_pid (`str`): Perf process id\n            perf_filename (`str`): Perf filename\n            perf_save_local_bash (`str`): Location to save perf file in shell\n            perf_save_local_nxos (`str`): Location to save perf file in NXOS\n            vrf: VRF for copying file to remote server\n            perf_save_remote_user (`str`): userid on remote server\n            perf_save_remote_pass (`str`): password of userid on remote server\n            perf_save_remote_server (`str`): remote server name in testbed yaml\n            perf_save_remote_via (`via`): specify connection to get ip\n                                          if not specified, use active connection one\n            svg_filename (`str`): svg filename\n            svg_archive_location (`str`): svg archive location\n            remote_flamegraph_location (`str`): flamegraph location on remote server\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n\n        Returns:\n            svg_location (`str`): location of svg file\n\n    ",
      "module_name": "flamegraph.flamegraph",
      "uid": "stop_perf_and_generate_svg",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L55"
    }
  },
  "stop_simulation": {
    "virl": {
      "doc": "Stop simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n\n            result: result of GET command\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "uid": "stop_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L45"
    }
  },
  "string_to_number": {
    "com": {
      "doc": " Converts from number(string) to number(integer)\n        Args:\n            word (`str`): number (string)\n        Raise:\n            Exception\n        Returns:\n            ret_num ('int|float'): number (integer|float)\n\n        Example:\n\n        >>> dev.api.string_to_number('1')\n        1\n\n        >>> dev.api.string_to_number('1.1')\n        1.1\n\n    ",
      "module_name": "utils",
      "uid": "string_to_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1381"
    }
  },
  "tabber": {
    "com": {
      "doc": " Verify if tab works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "uid": "tabber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L75"
    }
  },
  "time_to_int": {
    "com": {
      "doc": " Cast time string to int in second\n\n        Args:\n            time(`str`): time string\n        Returns:\n            out(`int`): time in second\n    ",
      "module_name": "utils",
      "uid": "time_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L171"
    }
  },
  "tokens": [
    "apic",
    "asa",
    "com",
    "ios",
    "iosxe",
    "cat9500",
    "cat9k",
    "iosxr",
    "junos",
    "linux",
    "nxos",
    "virl"
  ],
  "trex_copy_json": {
    "linux": {
      "doc": " Copies trex json config data to the trex folder\n        Args:\n            json (str): the json config in text form or path to json file on\n                local machine\n            destination (str): folder of where to put trex-config.json in\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "uid": "trex_copy_json",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L223"
    }
  },
  "trex_save_configuration": {
    "linux": {
      "doc": " Save configuration of the currently running Trex instance using its API\n        Args:\n            None\n        Raise:\n            FileNotFoundError\n        Returns:\n            str\n    ",
      "module_name": "platform.utils",
      "uid": "trex_save_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L95"
    }
  },
  "unconfig_interface_mtu": {
    "iosxe": {
      "doc": " Remove MTU config from interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "unconfig_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L413"
    }
  },
  "unconfig_mac_aging_time": {
    "iosxe": {
      "doc": " Unconfig mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "uid": "unconfig_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L43"
    }
  },
  "unconfig_mac_learning": {
    "iosxe": {
      "doc": " Unconfig mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "uid": "unconfig_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L96"
    }
  },
  "unconfigure_cdp": {
    "ios": {
      "doc": "\n        Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L41"
    },
    "iosxe": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L41"
    },
    "iosxr": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L20"
    },
    "nxos": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "cdp.configure",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L18"
    }
  },
  "unconfigure_interface_description": {
    "iosxe": {
      "doc": "unconfigure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "unconfigure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1080"
    }
  },
  "unconfigure_lldp": {
    "ios": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L18"
    },
    "iosxe": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L17"
    },
    "iosxr": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L17"
    },
    "nxos": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L17"
    }
  },
  "unconfigure_vrf_description": {
    "iosxe": {
      "doc": "Unconfigure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure            \n    ",
      "module_name": "vrf.configure",
      "uid": "unconfigure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L40"
    }
  },
  "unit_convert": {
    "com": {
      "doc": " Get value with given corresponding unit.\n        If not unit is given, value will be converted to value without unit\n\n        Args:\n            value (`str`): value with unit like `10M`\n            unit (`str`): unit type like `K`, `M`, `G`\n\n        Returns:\n            new_value (`float`): value after converting to given unit\n\n        Examples:\n            >>> dev.api.unit_convert('123K', 'M')\n            0.123\n\n            >>> dev.api.unit_convert('100M', 'K')\n            100000.0\n\n            >>> dev.api.unit_convert('100M')\n            100000000.0\n    ",
      "module_name": "utils",
      "uid": "unit_convert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L641"
    }
  },
  "unshut_interface": {
    "iosxe": {
      "doc": " Unshut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L185"
    },
    "junos": {
      "doc": " Unshut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L74"
    }
  },
  "unshut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Unshut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "uid": "unshut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L254"
    }
  },
  "verify_acl_applied": {
    "iosxe": {
      "doc": " Verify if access list is correctly applied\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access list name\n            applied_config ('str'): Output from acl.configure.config_extended_acl\n        Raises:\n            None\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "acl.verify",
      "uid": "verify_acl_applied",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L11"
    }
  },
  "verify_arp_packets": {
    "iosxe": {
      "doc": " Verify arp packets sent interval\n\n        Args:\n            pkts (`obj`): Pcap object\n            timeout (`str`): ARP timeout interval\n            tolerance (`int`): Delay tolerance\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "uid": "verify_arp_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L55"
    }
  },
  "verify_best_path_is_towards_to_interface": {
    "junos": {
      "doc": "Verify best path towards to given interface\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): Route name. Default to None.\n            protocol ('str'): Protocol name. Default to None.\n            expected_ip_address ('str'): Expected IP address. Default to None.\n            expected_target_route ('str'): Expected target route. Default to None.\n            expected_via ('str'): Expected via interface. Default to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_best_path_is_towards_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2463"
    }
  },
  "verify_bfd_configuration": {
    "iosxe": {
      "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface bfd is configured on\n            interval ('str'): interval to verify\n            state ('str'): state to verify\n            protocols ('list'): protocols to verify\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "uid": "verify_bfd_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L14"
    }
  },
  "verify_bfd_session": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        session_address (str): Session address\n        expected_session_state (str): Expected session state\n        expected_session_multiplier (str): Expected session multiplier\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        expected_interface (str, optional): Expected interface to check\n    ",
      "module_name": "bfd.verify",
      "uid": "verify_bfd_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L14"
    }
  },
  "verify_bgp_active_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp active holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected active holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_active_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L311"
    }
  },
  "verify_bgp_address_received": {
    "iosxe": {
      "doc": " Verifies that address is recieved from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address ('str'): address to verify\n\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_address_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1541"
    }
  },
  "verify_bgp_all_neighbor_status": {
    "junos": {
      "doc": "\n    Verify all bgp peer states\n\n    Args:\n        device('obj'): device to use\n        expected_state('str') : Expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_all_neighbor_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L467"
    }
  },
  "verify_bgp_as_in_as_path": {
    "iosxe": {
      "doc": " Verify if a route has an AS number in its AS path\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route to be verified\n            bgp_as ('str'): AS number to be verified in route AS path\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n            output ('str'): Parsed output of one of the following commands:\n                * 'show ip bgp {address_family} vrf {vrf}'\n                * 'show ip bgp {address_family}'\n                * 'show ip bgp'\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_as_in_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L993"
    }
  },
  "verify_bgp_as_path_prepend": {
    "iosxe": {
      "doc": " Verify if AS value is added at the beginning of the AS path on route\n        Args:\n            route_dict ('obj')      : Dict containing all routes on device\n            as_path_prepend ('int') : AS number to be checked on route\n            as_path ('int')         : AS path on route            \n            route ('str')           : Route beeing checked\n            steps ('obj')           : Context manager step\n        Returns:\n            None\n        \n        Raises:\n            pyATS Results\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_as_path_prepend",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L370"
    }
  },
  "verify_bgp_config_operational_state_neighbors": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n            'show ip bgp {address_family} vrf {vrf} neighbors'\n            'show ip bgp {address_family} all neighbors'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_neighbors ('dict'): Parsed output from: \n                'show ip bgp {address_family} vrf {vrf} neighbors'\n                'show ip bgp {address_family} all neighbors'\n            vrf ('str'): VRF name to be verified\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_config_operational_state_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1115"
    }
  },
  "verify_bgp_config_operational_state_summary": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n\n            'show ip bgp {address_family} vrf {vrf} summary'\n            'show ip bgp {address_family} all summary'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_summary ('dict'): Parsed output from:\n                'show ip bgp {address_family} vrf {vrf} summary'\n                'show ip bgp {address_family} all summary'\n            vrf ('str'): VRF name\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_config_operational_state_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1239"
    }
  },
  "verify_bgp_configuration_and_operation_state": {
    "iosxe": {
      "doc": " Verify bgp configuration is matched with operational state\n        - \"ipv4 vrf xxxx\" and \"vpnv4\" in running config are in \n          \"VPNv4 Unicast\" address family in bgp all summary\n        - \"l2vpn vpls\" in running config are in \n          \"L2VPN Vpls\" address family in bgp all summary\n        - BGP AS number is same as configured\n        - All configured neighbors exist and the status can be checked\n\n        Args:\n            device ('obj'): Device object\n            sr_dict(`dict`): Parsed output from libs.bgp.get.get_show_run_bgp_dict\n            sm_dict(`dict`): Parsed output of command 'show ip bgp all summary'\n        Returns:\n            result(`bool`): verified result\n            info(`str`): compared information\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_configuration_and_operation_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L46"
    }
  },
  "verify_bgp_each_path": {
    "iosxe": {
      "doc": " Verify each endpoint is same 'show ip bgp vrf {vrf} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            vrf ('str'): VRF name\n            route ('str'): Route to check\n            expected_endpoint_ip ('str', None): Expected endpoint ip\n            expected_metric ('str'): Expected metric ip\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_each_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1716"
    }
  },
  "verify_bgp_error_message": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_message('str'): Expected message\n        expected_error_message('str') : Expected error message\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_error_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L192"
    }
  },
  "verify_bgp_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L259"
    }
  },
  "verify_bgp_l2vpn_evpn_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify BGP l2vpn evpn neighbor state\n\n        Args:\n            device (`obj`): Device object\n            neighbor (`str`): Neighbor IP\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_l2vpn_evpn_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L12"
    }
  },
  "verify_bgp_last_error": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_error('str') : Expected last error\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_last_error",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L140"
    }
  },
  "verify_bgp_last_reset": {
    "iosxe": {
      "doc": " Verify last reset is always greater than previous value\n\n        Args:\n            prev_list(`list`): list of previous last reset value\n            curr_list(`list`): list of current last reset value\n        Returns:\n            result(`bool`): verified result\n            table(`obj`): table to display\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_last_reset",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L171"
    }
  },
  "verify_bgp_neighbor_exist": {
    "iosxe": {
      "doc": " Verify bgp neighbor exists in 'show ip bgp {address_family} summary'\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address_family ('str'): address family\n            vrf ('str'): vrf\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1622"
    },
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp {address_family} summary'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            address_family ('str'): Address family\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): Verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L59"
    }
  },
  "verify_bgp_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp neighbors {nbr}'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            vrf ('str'): Vrf\n            address_family ('str'): Address family\n            expected_state ('str'): Expected state\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L96"
    }
  },
  "verify_bgp_not_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        not_expected_state('str') : Not expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_not_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L81"
    }
  },
  "verify_bgp_peer_as": {
    "junos": {
      "doc": "\n    Verify bgp peer AS number\n\n    Args:\n        device('obj'): device to use\n        peer_address('str'): Peer interface\n        expected_peer_as ('int'): Expected peer AS number\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L860"
    }
  },
  "verify_bgp_peer_import_value": {
    "junos": {
      "doc": "Verifies BGP peer import value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        expected_import_value (str): Expected import value to check against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peer_import_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L742"
    }
  },
  "verify_bgp_peer_option": {
    "junos": {
      "doc": "\n    Verify bgp peer's bgp option\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface\n        protocol('str'): protocol name\n        expected_bgp_option('str') : Expected peer bgp-option flag\n        invert (bool, optional): True if output does not contain expected_bgp_option. Defaults to False.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peer_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L797"
    }
  },
  "verify_bgp_peer_prefixes_match": {
    "junos": {
      "doc": "Verifies whether BGP peer prefixes match or not\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        active (bool, optional): Check active prefix. Defaults to True.\n        received (bool, optional): Check received prefix. Defaults to True.\n        accepted (bool, optional): Check accepted prefix. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peer_prefixes_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L671"
    }
  },
  "verify_bgp_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_state('str') : Expected peer state\n        check_peer('boolean'): pass True if want to check peer address; default False\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L17"
    }
  },
  "verify_bgp_peers_are_present": {
    "iosxe": {
      "doc": " Verify if BGP peers are present\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary\n            bgp_peers ('dict'): Dictionary containing peer details - Neigbor and AS number\n                ex.)\n                    bgp_peers = {\n                        '192.168.1.1': 65532,\n                        '192.168.1.2': 65532,\n                    }\n        Returns:\n            True\n            False\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_peers_are_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1041"
    }
  },
  "verify_bgp_rd_table": {
    "iosxe": {
      "doc": "Verify BGP table on neighbors\n\n        Args:\n            device ('obj')             : Device object\n            address_family ('str')     : Address family to be used in show command\n            routes_list ('dict')       : Routes to be verified \n            vrf ('str')           : VRF value \n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_rd_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L417"
    }
  },
  "verify_bgp_route_is_advertised": {
    "iosxe": {
      "doc": " Verify if a route is advertised for a VRF and Router Distinguisher\n\n        Args:\n            vrf('str')                  : VRF name to be verified\n            address_family('str')       : Address family \n            neighbor_address ('str')            : Neighbor interface address\n            default_rd('str')           : Route distinguisher from VRF list\n            default_vrf('str')          : VRF from VRF list\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n        Returns:\n            True\n            False\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_route_is_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1362"
    }
  },
  "verify_bgp_route_is_received": {
    "iosxe": {
      "doc": " Verify if VRF and Router Distinguisher have at least one received route\n        Args:\n            device ('obj')              : Device object\n            address_family ('str')      : Address family to be used in show command\n            vrf ('str')                 : VRF name to be verified \n            neighbor_address ('str')   : Neighbor interface address\n            default_rd ('str')          : Route distinguisher from VRF list\n            default_vrf ('str')         : Default VRF name\n            address_family ('str')      : Address family\n            received_routes ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_route_is_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1432"
    }
  },
  "verify_bgp_routes_from_neighbors": {
    "iosxe": {
      "doc": " Verify if routes are advertised by a particular source\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            route ('str'): IP address\n            source_address ('str'): source address to check in output\n            rr_loopback ('list'): loopback address list to check in output for route reflactor device\n            ex.)\n                loopback1 = '192.168.36.40'\n                loopback2 = '192.168.36.41'\n                rr_loopback = [ loopback1, loopback2 ]\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_routes_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L938"
    }
  },
  "verify_bgp_routes_have_community": {
    "iosxe": {
      "doc": " Verify routes have community or not\n\n        Args:\n            device ('str'): Device str\n            neighbor ('str'): neighbor address\n            community ('str'): community name to search\n            vrf ('str'): vrf name\n            rd_export ('str'): rd export value\n            check_not_match ('bool'): flag check community match or not\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_routes_have_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L723"
    }
  },
  "verify_bgp_soo_on_route": {
    "iosxe": {
      "doc": " Verifies soo exists on route \n\n        Args:\n            Required:\n                device('obj'): device to verify on\n                address_family('str'): address_family to verify under\n                route('str'): route to verify\n            \n            One or the other:\n                vrf('str'): verify using vrf\n                rd('str'): verify using rd\n\n            Optional:\n                timeout('obj'): timeout object to override default\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_soo_on_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L316"
    }
  },
  "verify_bgp_status_codes_exist": {
    "iosxe": {
      "doc": " Verifies status exists in status_codes\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            route ('str'): route to check under\n            status_codes ('str'): status codes from parser\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            check_all ('bool'): wether or not to check all status_codes passed or atleast one\n\n        Returns:\n            codes ('str') or None\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_status_codes_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1568"
    }
  },
  "verify_bgp_syslog": {
    "iosxe": {
      "doc": " Verify syslog messages don't contain BGP-5-ADJCHANGE mnemonic\n\n        Args:\n            device(`obj`): device object\n        Returns:\n            result (`str`): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_syslog",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L209"
    }
  },
  "verify_bgp_table_uut": {
    "iosxe": {
      "doc": "Verify BGP table on device under test\n\n        Args:                \n            device ('obj')             : Device object            \n            address_family ('str')     : Address family to be used in show command\n            vrf ('str')           : VRF value of neighbors\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            routes_list ('dict')       : Routes to be verified\n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_table_uut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L494"
    }
  },
  "verify_bgp_updown_time": {
    "junos": {
      "doc": "\n    Verify the up/down time of all neighbors is less than given_time\n\n    Args:\n        device('obj'): device to use\n        given_seconds('int') : Given time in seconds\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "uid": "verify_bgp_updown_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L511"
    }
  },
  "verify_boot_variable": {
    "iosxe": {
      "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System images\n    ",
      "module_name": "platform.verify",
      "uid": "verify_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L141"
    }
  },
  "verify_bundle_in_state": {
    "iosxr": {
      "doc": " Verify bundle state\n\n        Args:\n            device (`obj`): Device object\n            bundle (`str`): Bundle name\n            interface (`bool`): Bundle interface\n            status (`str`): Expected bundle status\n            link_state (`str`): Expected line state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_bundle_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L12"
    }
  },
  "verify_capabilities_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if capabilities of bgp neighbor matches expected capabilities\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            neighbor_address ('str')          : Address family to be searched under\n            expected_capabilities  ('list')   : List of expected capabilities\n            vrf_name ('str')                  : VRF name\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_capabilities_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L575"
    }
  },
  "verify_cdp_in_state": {
    "ios": {
      "doc": " \n        Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L9"
    },
    "iosxr": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/verify.py#L9"
    },
    "nxos": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/verify.py#L9"
    }
  },
  "verify_cef_internal_label_stack": {
    "iosxe": {
      "doc": " Verify stack is programmed for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            stack (`list`): Stack list to verify exists\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "cef.verify",
      "uid": "verify_cef_internal_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L58"
    }
  },
  "verify_cef_labels": {
    "iosxe": {
      "doc": " Verify first and last label on route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            expected_first_label ('str'): Expected first label\n            expected_last_label ('str'): Expected last label\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_cef_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L725"
    }
  },
  "verify_changes_platform": {
    "iosxe": {
      "doc": " Verify if there are changes between outputs from 'show platform'\n        Args:\n            device ('obj'): Device object\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n            max_time ('int'): Max time in seconds retrying\n            interval ('int'): Interval of each retry\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "uid": "verify_changes_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L62"
    }
  },
  "verify_class_of_service_interface": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_object_type (`str`, optional): Expected object type. Defaults to None\n            expected_object_name (`str`, optional): Expected object name. Defaults to None\n            max_time (`int`, optional): Maximum time to keep checking. Defaults to 60\n            check_interval (`int`, optional): How often to check. Defaults to 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "class_of_service.verify",
      "uid": "verify_class_of_service_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L68"
    }
  },
  "verify_class_of_service_object_exists": {
    "junos": {
      "doc": " Verifies class_of_service object exists\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface to check\n        expected_object (str): Object name to check for\n        invert (bool, optional): Whether to check if it doesn't exist or not. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "class_of_service.verify",
      "uid": "verify_class_of_service_object_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L14"
    }
  },
  "verify_cli_and_snmp_cpu_memory": {
    "iosxe": {
      "doc": " Verify CPU and Memory usage information from \n        CLI and SNMP are equivalent\n\n        Args:\n            device (`obj`): Device object\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n            load_tolerance (`int`): Tolerance for load information\n            memory_tolerance (`int`): Tolerance for memory information\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "uid": "verify_cli_and_snmp_cpu_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L15"
    }
  },
  "verify_cluster_exists_in_route": {
    "junos": {
      "doc": "Verifies cluster exists in route\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        protocol ('str'): Protocol to use in show command\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_cluster_exists_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3355"
    }
  },
  "verify_cluster_list_length_of_path": {
    "junos": {
      "doc": "Verify length of cluster list of path (best or non-best)\n\n    Args:\n        target_route ('str'): Route to check\n        cluster_list_length ('int'): Length of cluster list\n        best_route ('bool'): Whether to use best or non-best path\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_cluster_list_length_of_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1142"
    }
  },
  "verify_coherentDSP_in_state": {
    "iosxr": {
      "doc": " Verify coherentDSP state\n\n        Args:\n            device (`obj`): Device object\n            dsp (`str`): CoherentDSP port\n            controller_state (`str`): Expected controller state\n            derived_state (`str`): Expected derived state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "uid": "verify_coherentDSP_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L68"
    }
  },
  "verify_communities_in_route": {
    "junos": {
      "doc": "Verify communities exist in show route\n\n    Args:\n        route ('str'): Route to check\n        expected_community ('str'): Expected community in route\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_communities_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2314"
    }
  },
  "verify_config_exists_in_routing_options": {
    "junos": {
      "doc": " Verify maximum-path exists in configuration\n\n        Args:\n            device (`obj`): Device object\n            regex (`str`): Config to search\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "running_config.verify",
      "uid": "verify_config_exists_in_routing_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/verify.py#L22"
    }
  },
  "verify_config_register": {
    "iosxe": {
      "doc": " Check current config register value\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value of config register\n    ",
      "module_name": "platform.verify",
      "uid": "verify_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L158"
    }
  },
  "verify_connectivity": {
    "com": {
      "doc": null,
      "module_name": "verify",
      "uid": "verify_connectivity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L15"
    }
  },
  "verify_current_image": {
    "com": {
      "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
      "module_name": "verify",
      "uid": "verify_current_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L303"
    }
  },
  "verify_default_route_protocol": {
    "junos": {
      "doc": " Verifies if route is displayed in output of show route command\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): ipv4/ipv6 default route\n            ip_type ('str'): Either ipv4/ipv6\n            inet_type ('str'): type of ip\n            expect_output ('bool'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            subnet_mask_number ('bool'): Flag, to include/exclude subnet masknumber in comparison\n            protocol ('str'): Type of protocol (ex.ospf,ospf3,ect)\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_default_route_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L374"
    }
  },
  "verify_diff_timestamp": {
    "junos": {
      "doc": "\n    Verify the difference between time on two logs\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('float'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "utils",
      "uid": "verify_diff_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L96"
    }
  },
  "verify_dns_packets": {
    "iosxe": {
      "doc": " Analyze the DNS packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address('str'): The captured IP address\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "dns.verify",
      "uid": "verify_dns_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/verify.py#L11"
    }
  },
  "verify_enough_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the disk\n        Args:\n            device ('obj'): Device Object\n            required_size ('int'): required file size\n            directory ('str'): directory to check file size\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n        True if enough space, false otherwise\n    ",
      "module_name": "verify",
      "uid": "verify_enough_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L340"
    }
  },
  "verify_enough_server_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check disk space, scp or sftp\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            required_space ('int'): required total disk space (Optional)\n            directory ('str'): directory to check file size (Optional)\n            timeout('int'): timeout in seconds (Optional, default 300)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n        Returns:\n            True if enough space, False otherwise\n        ",
      "module_name": "verify",
      "uid": "verify_enough_server_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L30"
    }
  },
  "verify_extended_community_color": {
    "iosxe": {
      "doc": " Verify color exists in 'show ip bgp {address_family} rd {rd} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            rd ('str'): Route distinguisher\n            route ('str'): Route to check\n            expected_color ('str'): Color value\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_extended_community_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1663"
    }
  },
  "verify_file_details_exists": {
    "junos": {
      "doc": " Verify file details exists\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n            invert ('bool', optional): Invert to check for file absense, default: False\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "uid": "verify_file_details_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L22"
    }
  },
  "verify_file_exists": {
    "iosxe": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L95"
    },
    "iosxr": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L51"
    },
    "nxos": {
      "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
      "module_name": "platform.verify",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L97"
    }
  },
  "verify_file_exists_on_server": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            size ('int'): expected file size in bytes, if not provided will only check\n                file existence with name (Optional)\n            timeout('int'): timeout in seconds (Optional)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n            max_tries ('int;): max number of attempts (Optional)\n        Returns:\n            True if enough space, false otherwise\n        ",
      "module_name": "verify",
      "uid": "verify_file_exists_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L99"
    }
  },
  "verify_file_size": {
    "junos": {
      "doc": " Verify specified file size\n\n    Args:\n        device (obj): Device object\n        root_path (str): Root path\n        file (str): File name\n        file_size (int): File size\n        max_time (int, optional): Maximum sleep time. Defaults to 30.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "utils",
      "uid": "verify_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L161"
    }
  },
  "verify_file_size_stable": {
    "nxos": {
      "doc": "\n    Args\n        Verify if the file size is stable, not changing\n        device ('obj'): Device Object\n        file ('str'): file path to check the size\n        max_tries('int'): number of tries to check file stability, defaults 3\n        delay_seconds ('int'): time delay between tries in seconds, defaults 2\n    Returns\n        True if file size is stable, false otherwise\n    ",
      "module_name": "platform.verify",
      "uid": "verify_file_size_stable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L135"
    }
  },
  "verify_file_size_stable_on_server": {
    "com": {
      "doc": "Verify size stability of given file on the server\n        Args:\n            device ('obj'): Device object\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            timeout ('int'): timeout in seconds\n            fu_session ('obj'): existing FileUtils object to reuse\n            max_tries ('int'): number of tries to check file stability, defaults 3\n            delay ('int'): time delay between tries in seconds, defaults 2\n        Returns:\n            True if file size is stable, false otherwise\n        ",
      "module_name": "verify",
      "uid": "verify_file_size_stable_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L192"
    }
  },
  "verify_files_copied_on_standby": {
    "nxos": {
      "doc": "\n        Verify files transfered successfully to the standby\n        Args:\n            device (`obj`): Device object\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n        Returns:\n            None\n    ",
      "module_name": "platform.verify",
      "uid": "verify_files_copied_on_standby",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L179"
    }
  },
  "verify_firewall_counter": {
    "junos": {
      "doc": " Verify counter is not 0\n\n        Args:\n            device (`obj`): Device object\n            filters (`str`): Firewall filter argument\n            counter_name (`str`): Firewall counter name argument\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "uid": "verify_firewall_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L119"
    }
  },
  "verify_firewall_filter": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_filter (str): Filter to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "uid": "verify_firewall_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L16"
    }
  },
  "verify_firewall_log": {
    "junos": {
      "doc": " Verify show firewall log has output\n\n        Args:\n            device ('obj'): Device object\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "uid": "verify_firewall_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L170"
    }
  },
  "verify_firewall_packets": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_packet_count (int): Expected packets to find\n        filter (str): Filter to check\n        counter_name (str): Counter name to check\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "uid": "verify_firewall_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L61"
    }
  },
  "verify_flow_cache_record_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            expected_source_address ('str'): Source address to match\n            expected_destination_address ('str'): Destination address to match\n            format ('bool'): Format output or not\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "uid": "verify_flow_cache_record_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L116"
    }
  },
  "verify_flow_exporter_records_added_and_sent_are_equal": {
    "iosxe": {
      "doc": " Verifies that flow exporter records added and sent are equal\n\n        Args:\n            device ('obj'): Device to use\n            exporter ('str'): Exporter name\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "uid": "verify_flow_exporter_records_added_and_sent_are_equal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L52"
    }
  },
  "verify_flow_with_source_and_destination_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            source_address ('str'): Source address to match\n            destination_address ('str'): Destination address to match\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "uid": "verify_flow_with_source_and_destination_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L13"
    }
  },
  "verify_hardware_active_ESP_changed": {
    "iosxe": {
      "doc": " Verify active ESP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_active_ESP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L85"
    }
  },
  "verify_hardware_active_RP_changed": {
    "iosxe": {
      "doc": " Verify active RP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_active_RP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L57"
    }
  },
  "verify_hardware_fan_speed_increase": {
    "iosxe": {
      "doc": " Verify fan speed increase\n\n        Args:\n            curr_fans (`list`): current fans\n            prev_fans (`list`): previous fans\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_fan_speed_increase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L24"
    }
  },
  "verify_hardware_redundancy_states": {
    "iosxe": {
      "doc": " Verify redundancy operational state is sso\n        Manual Swact is enabled and\n        Peer state is STANDBY HOT\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): verified result\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_redundancy_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L253"
    }
  },
  "verify_hardware_slot_exist": {
    "iosxe": {
      "doc": " Verify hardware slot exists\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_slot_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L142"
    }
  },
  "verify_hardware_slot_removed": {
    "iosxe": {
      "doc": " Verify hardware slot has removed\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_slot_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L111"
    }
  },
  "verify_hardware_spa_exist": {
    "iosxe": {
      "doc": " Verify spa exists\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_spa_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L211"
    }
  },
  "verify_hardware_spa_removed": {
    "iosxe": {
      "doc": " Verify spa has removed\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "uid": "verify_hardware_spa_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L169"
    }
  },
  "verify_hello_interval_holdtime": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_hello_interval (int): Expected Hello interval\n        expected_hold_time(int): Expected Holdtime\n        interface(str): Address that passed in show command\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_hello_interval_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L332"
    }
  },
  "verify_hostname": {
    "iosxr": {
      "doc": " Verify hostname is matched with expected name\n\n        Args:\n            device (`obj`): Device object\n            expected_hostname (`str`): Expected hostname\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "running_config.verify",
      "uid": "verify_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/verify.py#L15"
    }
  },
  "verify_igp_metric_in_ldp": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_metric (str): Expected IGP metric value\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_igp_metric_in_ldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L298"
    }
  },
  "verify_installed_pies": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            installed_packages (`list`): List of packages to verify that exist\n            max_time (`int`): Maximum time to wait while checking for pies installed\n                              Default 300 seconds (Optional)\n          check_interval (`int`): Time interval while checking for pies installed\n                                  Default 30 seconds (Optional)\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "uid": "verify_installed_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L130"
    }
  },
  "verify_interface_bundled_interfaces_mode": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): Interfaces list\n            port_channel (`str`): Port channel interface\n            lacp_id (`int`): lacp ID\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_bundled_interfaces_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L570"
    }
  },
  "verify_interface_config_carrier_delay": {
    "iosxe": {
      "doc": "Verify interface carrier_delay config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify has carrier delay\n                           False if verify no carrier delay\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_config_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L31"
    }
  },
  "verify_interface_config_no_shutdown": {
    "iosxe": {
      "doc": "Verify interface doesn't have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_config_no_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L241"
    }
  },
  "verify_interface_config_ospf_bfd": {
    "iosxe": {
      "doc": "Verify interface ospf bfd config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_config_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L71"
    }
  },
  "verify_interface_config_rejected": {
    "iosxe": {
      "doc": " Verify if it fails when trying to configure an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            True: Rejected configuration \n            False: Accepted configuration\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_config_rejected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L721"
    }
  },
  "verify_interface_config_shutdown": {
    "iosxe": {
      "doc": "Verify interface have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_config_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L206"
    }
  },
  "verify_interface_description_in_running_config": {
    "iosxe": {
      "doc": "Verify interface description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L761"
    }
  },
  "verify_interface_description_in_show_interfaces": {
    "iosxe": {
      "doc": "Verify interface description in show interfaces <interface>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_description_in_show_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L796"
    }
  },
  "verify_interface_in_state": {
    "iosxr": {
      "doc": " Verify interface state and ip\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interfaces name\n            verify_status (`bool`): To verify interface status\n            oper_status (`str`): Expected oper status\n            line_protocol (`str`): Expected line protocol status\n            verify_ip (`bool`): To verify interface ip\n            ip (`str`): Expected interface ip\n            subnet (`str`): Expected interface ip subnet\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L58"
    }
  },
  "verify_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            flag (`bool`): True if verify present \n                           False if verify not present\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L338"
    }
  },
  "verify_interface_load_balance": {
    "junos": {
      "doc": " Verify logical interface load balance\n\n        Args:\n            device (`obj`): Device object\n            load_balance_interfaces (`list`): List of interfaces to check load balance\n            interface (`str`): Pass interface in show command\n            zero_bps_interfaces (`list`): List of interfaces to check zero as bps value\n            expected_tolerance (`int`): Expected tolerance in load balance of interfaces\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n            extensive (`bool`): Execute show command with extensive\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L79"
    }
  },
  "verify_interface_mtu_packets": {
    "iosxe": {
      "doc": " Verify one mtu packet split into two packets\n\n        Args:\n            pkts (`obj`): Pcap object\n            peer_ip (`str`): Ping ip address\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_mtu_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L106"
    }
  },
  "verify_interface_no_error_counters": {
    "iosxe": {
      "doc": " Verify no error counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            counters (`list`): Extra counters to be checked\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_no_error_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L164"
    }
  },
  "verify_interface_output_pps": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify that the target\n        interfaces output-pps matches {target_expected_pps} and verify that all\n        other interfaces output-pps matches {non_target_expected_pps}.\n        {non_target_expected_pps} and {target_expected_pps} are strings that\n        contain integers with the possibly of \"<\" or \">\" to allow a range\".\n\n        Example:\n            uut.api.verify_interface_output_pps(\n                target_interface='ge-0/0/0',\n                target_expected_pps='0',\n                target_expected_pps_operator='>',\n                non_target_expected_pps_operator='0',\n                non_target_expected_pps='=='\n            )\n\n        Args:\n            target_interface ('str'): Interface to target\n            non_target_expected_pps ('str'): output-pps to expect on non target interfaces\n            target_expected_pps ('str'): output-pps to expect on the target interface\n            target_expected_pps_operator ('str'): Comparison operator\n            non_target_expected_pps_operator ('str'): Comparison operator\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "uid": "verify_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L19"
    }
  },
  "verify_interface_output_pps_load_balance": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify\n        output-pps of interfaces is within tolerance\n\n        Example:\n            device.api.verify_interface_output_pps_load_balance(\n                interfaces=['ge-0/0/0.1', 'ge-0/0/1.1'],\n                expected_tolerance=10,\n                max_time=60,\n                check_interval=10)\n\n        Args:\n            Device ('obj'): Device object\n            interfaces ('list'): List of interfaces \n            expected_tolerance ('int'): Expected tolerance value\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "uid": "verify_interface_output_pps_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L117"
    }
  },
  "verify_interface_port_channel_in_no_use": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_port_channel_in_no_use",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L663"
    }
  },
  "verify_interface_port_channel_status_bundled": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_port_channel_status_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L614"
    }
  },
  "verify_interface_port_channel_status_changed": {
    "iosxe": {
      "doc": " Verify Port channel status\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            status (`str`): Interface status\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_port_channel_status_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L498"
    }
  },
  "verify_interface_port_channel_status_down": {
    "iosxe": {
      "doc": " Verify Port Channel state is down\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n\n        Returns:\n            N/A\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_port_channel_status_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L468"
    }
  },
  "verify_interface_port_channel_status_up_and_interfaces_bundled": {
    "iosxe": {
      "doc": " Verify Port channel state and the bundled interfaces\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n            interface('str'): Interface name\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_port_channel_status_up_and_interfaces_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L538"
    }
  },
  "verify_interface_secondary_addresses": {
    "iosxe": {
      "doc": " Verify secondary addresses are present in RIB\n\n        Args:\n            device (`obj`): Device object\n            connected_sec_addr (`str`): Secondary ip address for connected\n            local_sec_addr (`str`): Secondary ip address for local\n            vrf (`str`): Vrf name\n            address_family (`str`): Address family\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n        Returns:\n            list of address not in RIB\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L430"
    }
  },
  "verify_interface_state_admin_down": {
    "iosxe": {
      "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_state_admin_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L311"
    }
  },
  "verify_interface_state_down": {
    "iosxe": {
      "doc": "Verify interface state is down and and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_state_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L284"
    }
  },
  "verify_interface_state_up": {
    "iosxe": {
      "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interface_state_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L259"
    }
  },
  "verify_interfaces_input_output_policer_found": {
    "junos": {
      "doc": " Verify input and output policer value for interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            logical_interface ('str'): Logical interface name\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interfaces_input_output_policer_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L188"
    }
  },
  "verify_interfaces_queue_packets": {
    "junos": {
      "doc": " Verifies number of packets in an interface queue\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        queue (int): Queue number\n        expected_packets (int): Expected number of packets\n        packet_type (str, optional): Packet type to check for. Defaults to queued.\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interfaces_queue_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L250"
    }
  },
  "verify_interfaces_terse_state": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_admin_state (`str`): Expected admin state for interface\n                ex.) expected_admin_state = 'up'\n            expected_link_state (`str`): Expected link state for interface\n                ex.) expected_link_state = 'down'\n            expected_oper_status (`str`): Expected oper state for interface\n                ex.) expected_oper_status = 'up'\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "uid": "verify_interfaces_terse_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L16"
    }
  },
  "verify_ip_and_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing\n        from command 'show segment-routing mpls connected-prefix-sid-map local <address_family>' or\n        from command 'show segment-routing mpls connected-prefix-sid-map <address_family>'\n        Args:\n            device (`obj`): Device to be executed command\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0'\n            address_family (`str`): Address family\n            local (`bool`): Flag to check command with local\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_ip_and_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L369"
    }
  },
  "verify_ip_and_sid_in_segment_routing_mapping_server": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing mapping server\n        from show segment-routing mpls mapping-server {address_family}'\n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0' \n            mapping_server (`str`): mapping server to check\n            ex.)\n                mapping_server = 'PREFIX_SID_EXPORT_MAP'   or\n                mapping_server = 'PREFIX_SID_REMOTE_EXPORT_MAP'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_ip_and_sid_in_segment_routing_mapping_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L584"
    }
  },
  "verify_ip_bgp_route": {
    "iosxe": {
      "doc": " Verify state/pfxrcd exists in 'show ip bgp summary'\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): Route to check\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_state_pfxrcd ('str'): Expected State/Pfxrcd\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1788"
    }
  },
  "verify_ip_cef_nexthop_label": {
    "iosxe": {
      "doc": " Verify ip cef nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Vrf name\n            table (`str`): Not used on IOSXE\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L31"
    },
    "junos": {
      "doc": " Verify nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Not used on JuniperOS\n            table (`str`): Route table\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L32"
    }
  },
  "verify_ip_precedence_ip_precedence": {
    "iosxe": {
      "doc": "Verify that all packets have mapped IP precedence value to EXP\n\n        Args:\n            packets ('obj'): Packets to analyze\n            exclude_src_ip ('str'): Source ip to exclude\n\n        Returns:\n            True / False\n            \n        Raises:\n            None\n    ",
      "module_name": "ip_precedence.verify",
      "uid": "verify_ip_precedence_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ip_precedence/verify.py#L9"
    }
  },
  "verify_isis_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify ISIS neighbor state\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): ISIS neighbor interfaces\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "uid": "verify_isis_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L12"
    }
  },
  "verify_l2vpn_storm_control_configuration": {
    "iosxe": {
      "doc": " Verify storm-control configuration is applied\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            None\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.verify",
      "uid": "verify_l2vpn_storm_control_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L23"
    }
  },
  "verify_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label\n        local_label (str): Database local label\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L241"
    }
  },
  "verify_ldp_interface": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): expected interface\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L197"
    }
  },
  "verify_ldp_neighbor": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_neighbor ('str'): expected neighbor address\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L153"
    }
  },
  "verify_ldp_overview": {
    "junos": {
      "doc": "Verifies ldp overview values as indicated\n\n    Args:\n        device (obj): device object\n        default_keepalive_interval (int): a number for interval; default is None\n        default_keepalive_holdtime (int): a number for holdtime; default is None \n        max_time (int): Maximum timeout time; default is 60\n        check_interval (int): Interval to check; default is 10\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L83"
    }
  },
  "verify_ldp_restart_state": {
    "junos": {
      "doc": "Verifies ldp restart state\n\n    Args:\n        device (obj): device object\n        expected_restart_state (str): Expected state for the restart value in ldp\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_restart_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L380"
    }
  },
  "verify_ldp_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        address (str): Neighbor address to check for; default to None\n        expected_address (str): Expected address; default to None\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L20"
    }
  },
  "verify_ldp_session_status": {
    "junos": {
      "doc": "Verifies ldp's restart state and helper mode\n\n    Args:\n        device (obj): device object\n        address (str): Address to use in show command\n        expected_restart_state (str): Expected state for the restart value in ldp\n        helper_mode (str): helper mode state\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "uid": "verify_ldp_session_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L423"
    }
  },
  "verify_learned_protocol": {
    "junos": {
      "doc": "Verifies learned protocol and next hop agianst 'show route {address} extensive'\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        next_hop ('str'): next hop ip address\n        learn_protocol('str'): Learned protocol\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_learned_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1255"
    }
  },
  "verify_lldp_in_state": {
    "ios": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/verify.py#L9"
    },
    "iosxr": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/verify.py#L9"
    },
    "nxos": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/verify.py#L9"
    }
  },
  "verify_log_exists": {
    "junos": {
      "doc": "\n    Verify log exists\n\n    Args:\n        device('obj'): device to use  \n        file_name('str') : File name to check log\n        expected_log ('str'): Expected log message\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        invert ('bool', 'optional'): Inverts to check if it doesn't exist\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "uid": "verify_log_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L59"
    }
  },
  "verify_login_with_credentials": {
    "com": {
      "doc": "\n        Verify device is logged in with correct credentials and\n        can not be logged in with wrong credentials when start command is given.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n            invert ('bool', optional): True if device can't be logged in with wrong credentials. Default to False.\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "uid": "verify_login_with_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2476"
    }
  },
  "verify_lsp_neighbor": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            expected_status ('str'): Expected neighbor lsp status\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            lsp_state_flag ('bool'): Flag for verifying Lsp state\n        \n        Returns:\n            True/False\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.verify",
      "uid": "verify_lsp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L14"
    }
  },
  "verify_metric_in_route": {
    "junos": {
      "doc": "Verify metric in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            expected_metric ('int'): Expected metric number\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_metric_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L750"
    }
  },
  "verify_metric_of_route": {
    "junos": {
      "doc": " Verify the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            expected_metric ('int'): Expected metric number\n            ip_address ('str'): IP address in show command.\n            active_tag (bool, optional): True if needs to verify metric of best path. Default to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2584"
    }
  },
  "verify_module_serial_num": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            expected_serial_num (`str`): Expected serial number\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "uid": "verify_module_serial_num",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L18"
    }
  },
  "verify_module_status": {
    "iosxe": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n    ",
      "module_name": "platform.verify",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L178"
    },
    "iosxr": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n    ",
      "module_name": "platform.verify",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L95"
    },
    "nxos": {
      "doc": " Check status of slot using 'show module'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check module status\n            interval ('int'): Max interval to re-check module status\n    ",
      "module_name": "platform.verify",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L207"
    }
  },
  "verify_mpls_binding_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            ipv4 (`str`): ipv4 with prefix\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L146"
    },
    "iosxr": {
      "doc": " Verify local and remote binding labels for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            prefix (`str`): ipv4/ipv6\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L114"
    }
  },
  "verify_mpls_experimental_bits": {
    "com": {
      "doc": " Verify the first packet to have expected_dst_address has the\n        MPLS experiement bits set to expected_bit_value\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n        expected_bit_value (int): Expected bit value to check\n    ",
      "module_name": "utils",
      "uid": "verify_mpls_experimental_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1940"
    }
  },
  "verify_mpls_forwarding_table_has_prefix_in_subnet_range": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_mpls_forwarding_table_has_prefix_in_subnet_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L221"
    }
  },
  "verify_mpls_forwarding_table_local_label_for_subnet": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            min_range ('int'): Minimum label\n            max_range ('int'): Maximum label\n            in_range ('bool'): True to verify between min_range/max_range, False to verify outside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_mpls_forwarding_table_local_label_for_subnet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L275"
    }
  },
  "verify_mpls_forwarding_table_outgoing_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label\n            same_as_local (`bool`):\n                True if verify outgoing labels with local label\n                False if verify outgoing labels with expected label\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_mpls_forwarding_table_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L21"
    }
  },
  "verify_neighbor_state_went_down": {
    "junos": {
      "doc": " Verifies message in log\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface that went down\n            realm ('str'): ospf/ospf3 realm\n            fail_reason ('str'): Reason state changed from full to down\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_neighbor_state_went_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L232"
    }
  },
  "verify_next_hop_in_route": {
    "junos": {
      "doc": "Verify next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_next_hop ('str'): Next Hop address\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n            active_tag (bool, optional): True if needs to verify next hop of best path. Default to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1764"
    }
  },
  "verify_no_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is not present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "uid": "verify_no_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L401"
    }
  },
  "verify_no_isis_neighbor": {
    "iosxr": {
      "doc": " Verify ISIS neighbors not found\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "uid": "verify_no_isis_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L66"
    }
  },
  "verify_no_mpls_header": {
    "com": {
      "doc": " Verify no mpls header\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n    \n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_no_mpls_header",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2298"
    }
  },
  "verify_no_ntp_association_configuration": {
    "iosxr": {
      "doc": " Verify no NTP association configuration on the device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_no_ntp_association_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L287"
    }
  },
  "verify_no_ospf3_neigbor_output": {
    "junos": {
      "doc": " Verifies if ospf3 neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_no_ospf3_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L110"
    }
  },
  "verify_no_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_no_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L854"
    }
  },
  "verify_no_ospf_neigbor_output": {
    "junos": {
      "doc": " Verifies ospf neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface being searched for\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_no_ospf_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L174"
    }
  },
  "verify_no_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospfv3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_no_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L602"
    }
  },
  "verify_node_reachable": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n\n        Returns:\n            boolean: True/False\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "uid": "verify_node_reachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L16"
    }
  },
  "verify_node_state": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n            state (`str`): state to verify\n\n        Returns:\n            state ('str'): node state\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "uid": "verify_node_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L51"
    }
  },
  "verify_ntp_association_with_server": {
    "iosxe": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L212"
    },
    "iosxr": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L191"
    }
  },
  "verify_ntp_leap_second": {
    "iosxe": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L144"
    },
    "iosxr": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L127"
    }
  },
  "verify_ntp_time": {
    "iosxe": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L166"
    },
    "iosxr": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L147"
    }
  },
  "verify_ntp_time_changed": {
    "iosxe": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L116"
    },
    "iosxr": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L103"
    }
  },
  "verify_opaque_type_7_prefix_and_flags": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_opaque_type_7_prefix_and_flags",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L727"
    }
  },
  "verify_optics_in_state": {
    "iosxr": {
      "doc": " Verify optics state\n\n        Args:\n            device (`obj`): Device object\n            optics (`str`): Optics port\n            rx_power (`float`): Expected RX power\n            controller_state (`str`): Expected controller state\n            led_state (`str`): Expected LED state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "uid": "verify_optics_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L12"
    }
  },
  "verify_ospf3_database_prefix": {
    "junos": {
      "doc": "API for verifying ospf3 prefix exists in database\n\n    Args:\n        device (obj): device object\n        expected_prefix (string): prefix being searched for\n        ipaddress (string): IP address to use in show command. Defaults to None. \n        max_time (int, optional): maximum timeoute time. Defaults to 60.\n        check_interval (int, optional): check interval. Defaults to 10.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_database_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L652"
    }
  },
  "verify_ospf3_interface": {
    "junos": {
      "doc": " Verifies ospf3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L224"
    }
  },
  "verify_ospf3_interface_type": {
    "junos": {
      "doc": " Verifies ospf3 interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L17"
    }
  },
  "verify_ospf3_metric": {
    "junos": {
      "doc": "Verify the OSPF3 metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF3 metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L334"
    }
  },
  "verify_ospf3_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf3 neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive('bool'): Flag to differentiate show commands. Defaults to False.            \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            \n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L154"
    }
  },
  "verify_ospf3_neighbor_state": {
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L63"
    }
  },
  "verify_ospf3_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L382"
    }
  },
  "verify_ospf3_overview": {
    "junos": {
      "doc": " Verifies ospf3 overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospf3_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L478"
    }
  },
  "verify_ospf_advertising_router_metric_in_database": {
    "junos": {
      "doc": " Verifies ospf advertising router metric in database\n\n        Args:\n            device ('obj'): Device to use\n            lsa_id: lsa_id to check\n            ospf_link_id ('str'): Ospf link id to check\n            expected_metric ('str'): Metric of desired ospf link\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_advertising_router_metric_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L799"
    }
  },
  "verify_ospf_database": {
    "junos": {
      "doc": " Verifies information from show ospf database\n\n    Args:\n        device ([obj]): Device object\n        lsa_type ([str], optional): LSA type to check. Defaults to None.\n        expected_lsa_id ([str], optional): Expected LSA ID to find. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        extensive (bool, optional): Extensive or not. Default to True.\n        invert (bool, optional): Inverts verification to check if criteria doesn't exist\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1210"
    }
  },
  "verify_ospf_database_contains_sid_neighbor_address_pairs": {
    "iosxe": {
      "doc": " Verifies the ospf database contains the sid and neighbor address pairs provided\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Ospf router id\n            pairs ('dict'): Get from 'get_ospf_sr_adj_sid_and_neighbor_address'\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_database_contains_sid_neighbor_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1449"
    }
  },
  "verify_ospf_database_flag": {
    "iosxe": {
      "doc": " Verify ospf database flag does (not) have expected value\n\n        Args:\n            device (`obj`): Device object\n            lsa_id (`str`): Link State ID\n            expected_flag (`str`): Expected flag value\n            has_flag (`bool`): True if expect to contain flag\n                               False if expect not to contain flag\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_database_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L25"
    }
  },
  "verify_ospf_database_lsa_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id {lsa_id}' against criteria\n\n    Args:\n        lsa_id ('str'): lsa_id to check\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        expected_node_id ('str'): Expected node ID to check for\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_database_lsa_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L911"
    }
  },
  "verify_ospf_in_state": {
    "iosxe": {
      "doc": " Verifies ospf process is enabled by checking if neighbors exist.\n        If a list of neighbors is passed it will also verify is those neighbors\n        have reached state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): If specified, function will verify the neighbors\n                               are listed.\n            state('str'): If specified, function will verify the neighbors are in\n                          state.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L277"
    }
  },
  "verify_ospf_interface": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L324"
    }
  },
  "verify_ospf_interface_cost": {
    "junos": {
      "doc": " Verifies ospf cost on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            cost_type ('str'): Cost type configured\n            expected_cost ('int'): Expected configured cost\n            instance ('str'): Instance to use\n            area ('str'): Area to use\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_interface_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L22"
    }
  },
  "verify_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            subnet_mask ('str'): Subnet mask\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L709"
    }
  },
  "verify_ospf_interface_type": {
    "junos": {
      "doc": " Verifies ospf interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L281"
    }
  },
  "verify_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": "Verify OSPF max-metric configuration\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process ID\n            metric_value (`int`): Metric value to be configured\n            expected_state (`str`): State to check\n            max_time (int): Maximum wait time for the trigger,\n                             in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result(`bool`): verify result\n            state\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L91"
    }
  },
  "verify_ospf_metric": {
    "junos": {
      "doc": "Verify the OSPF metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L465"
    }
  },
  "verify_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is in a specific state\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            state ('str'): State to verify the interfaces are in\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1389"
    }
  },
  "verify_ospf_neighbor_addresses_are_not_listed": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is not listed\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbor_addresses_are_not_listed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1420"
    }
  },
  "verify_ospf_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive ('bool'): Flag to differentiate show commands\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L396"
    }
  },
  "verify_ospf_neighbor_state": {
    "iosxe": {
      "doc": "Verify OSPF neighbor is state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State to check for neighbor\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False        \n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L152"
    },
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L126"
    }
  },
  "verify_ospf_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L519"
    }
  },
  "verify_ospf_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values don't exist\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L570"
    }
  },
  "verify_ospf_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1135"
    }
  },
  "verify_ospf_overview": {
    "junos": {
      "doc": " Verifies ospf overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L616"
    }
  },
  "verify_ospf_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1099"
    }
  },
  "verify_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing gb SRGB Base value\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Router entry to look under\n            expected_srgb_base ('int'): Expected value for SRGB Base\n            expected_srgb_base ('int'): Expected value for SRGB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1141"
    }
  },
  "verify_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing lb SRLB Base value\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            router_id ('str'): Router entry to look under\n            expected_srlb_base ('int'): Expected value for SRLB Base\n            expected_srlb_range ('int'): Expected value for SRLB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1198"
    }
  },
  "verify_ospf_sid_database_prefixes_advertised": {
    "iosxe": {
      "doc": " Verifies prefixes advertised by advertising_router are only allowed_prefixes\n\n        Args:\n            device ('obj'): Device to execute command on\n            advertising_router ('str'): Advertising router id\n            allowed_prefixes ('list'): Prefixes allowed to be advertised.\n                                       Can be subset of full prefix.\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_sid_database_prefixes_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L406"
    }
  },
  "verify_ospf_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L668"
    }
  },
  "verify_ospf_sr_label_preference": {
    "iosxe": {
      "doc": " Verify SR label preference for a process id\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Process if\n            expected_preference ('bool'): Sr label preference that is expected\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_sr_label_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1088"
    }
  },
  "verify_ospf_tilfa_in_state_in_ospf": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in OSPF\n\n        Args:\n            device ('str'): Device object\n            interface ('str'): Interface name\n            process_id ('int'): Process id\n            max_time (int): Maximum wait time in seconds checking an ouput\n            check_interval (int): Wait time between iterations when looping\n\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_tilfa_in_state_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L876"
    }
  },
  "verify_ospf_two_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id ipaddress detail' contains expected_id_1 and expected_id_2\n\n    Args:\n        device ('obj'): device to use\n        expected_id_1 ('str'): expected router id\n        expected_id_2 ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check            \n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_ospf_two_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1172"
    }
  },
  "verify_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            expect_output ('str'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L530"
    }
  },
  "verify_ospfv3_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospfv3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L432"
    }
  },
  "verify_ospfv3_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L891"
    }
  },
  "verify_ospfv3_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L795"
    }
  },
  "verify_ospfv3_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L856"
    }
  },
  "verify_ospfv3_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time    \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:  \n            Boolean       \n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_ospfv3_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L296"
    }
  },
  "verify_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1038"
    }
  },
  "verify_pcap_dscp_bits": {
    "com": {
      "doc": "Verifies the dscp bits of packets in a capture file\n\n    Args:\n        pcap_location (str): Location of pcap file\n        expected_bits (str/int): Expeceted bits to find / Integer to be converted to bits\n        position (int, optional): Which packet to check. Defaults to 0.\n        expected_protocol (str, optional): Expected protocol to verify against. Defaults to None\n        expected_dst_port_number (int, optional): Expected destination port number to verify again. Defaults to None\n        expected_src_address (str, optional): Expected source IP address. Defaults to None\n        check_all (bool, optional): Ignore position and check all packets until one is found that meets criteria. Defaults to False\n        expected_src_port_number (int, optional): Expected source port number to verify again. Defaults to None\n        port_and_or (str, optional): Whether to and/or the expected port number results. Defaults to 'and'\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_dscp_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1972"
    }
  },
  "verify_pcap_has_imcp_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcp destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmp destination reachable message in pcap\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_has_imcp_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1746"
    }
  },
  "verify_pcap_has_imcpv6_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcpv6 destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmpv6 destination reachable message in pcap\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_has_imcpv6_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1780"
    }
  },
  "verify_pcap_mpls_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_inner_exp_bits (int): Expected inner Exp bits\n        expected_outer_exp_bits (int): Expected outer Exp bits\n        expected_tos (int): Expected tos value\n        expected_mpls_label (str): Expected mpls label\n        check_all (bool): Check all matching packets\n    \n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_mpls_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2205"
    }
  },
  "verify_pcap_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_protocol (str): Expected protocol in packet\n        expected_dst_port_number (int): Expected destination port number\n        expected_src_port_number (int): Expected source port number\n        expected_tos (int): Expected tos value\n        expected_traffic_class (str): Expected traffic class\n        check_all (bool): Check all matching packets\n    \n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2399"
    }
  },
  "verify_pcap_packet_destination_port": {
    "com": {
      "doc": "Verifies expected destination port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_destination_port (`str`): Expected destination port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_packet_destination_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2176"
    }
  },
  "verify_pcap_packet_protocol": {
    "com": {
      "doc": "Verifies expected protocol of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_protocol (`str`): Expected protocol name\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_packet_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2118"
    }
  },
  "verify_pcap_packet_source_port": {
    "com": {
      "doc": "Verifies expected source port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_source_port (`str`): Expected source port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_packet_source_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2147"
    }
  },
  "verify_pcap_packet_type": {
    "com": {
      "doc": "Verifies expected type of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_type (`str`): Expected type\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "uid": "verify_pcap_packet_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2089"
    }
  },
  "verify_ping": {
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            ttl ('int'): ttl value passed in command\n            wait ('int'): wait value passed in command\n            mpls_rsvp ('str'): MPLS RSVP value\n            loss_rate ('int'): Expected loss rate value\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L15"
    }
  },
  "verify_ping_from_server": {
    "iosxe": {
      "doc": "Verify ping from server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address (`str`): IP address to ping\n            count (`int`): repeat ping count\n            interface (`str`): source ip/interface value\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "server.verify",
      "uid": "verify_ping_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/verify.py#L10"
    }
  },
  "verify_policy_map_packet_count_match": {
    "iosxe": {
      "doc": " Compare the packets' count for the provided traffic flows\n\n        Args:\n            flows_dict (`dict`): Dictionary of traffic flows\n            class_map_out_packets_dict (`dict`): Dictionary of retrieved traffic flows packets count\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_packet_count_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L210"
    }
  },
  "verify_policy_map_packets_counting_up": {
    "iosxe": {
      "doc": "Verify packets are counting up\n\n        Args:\n            device (`obj`): Device object\n            packet_classes (`Dict`): list of packet classes\n                ex.)\n                    packet_classes: ['BGP_Class', 'OSPF_Class', 'LDP_Class']\n\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_packets_counting_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L427"
    }
  },
  "verify_policy_map_policy_map_configuration": {
    "iosxe": {
      "doc": " Verify policy map configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`List`): List of interfaces\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_policy_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L172"
    }
  },
  "verify_policy_map_policy_map_configuration_policy_map_with_operational": {
    "iosxe": {
      "doc": " Compare configuration policy map with operational \n\n        Args:\n            configurational_container (`dict`): Dictionary of configurational container\n            operational_container (`dict`): Dictionary of operational container\n            table (`obj`): Table object\n            spaces ('str'): Spaces in table field\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_policy_map_configuration_policy_map_with_operational",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L338"
    }
  },
  "verify_policy_map_policy_map_configurational_operational_policy_map": {
    "iosxe": {
      "doc": "Verify configured policy map and operational state match\n\n        Args:\n            device (`obj`): Device object\n            configurational_out (`Dict`): Configurational status\n            interface (`str`): Interface name\n\n        Returns:\n            result(`bool`): Verify result\n            table(`obj`): Table result\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_policy_map_configurational_operational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L21"
    }
  },
  "verify_policy_map_row_added": {
    "iosxe": {
      "doc": "Add row to Table\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            parameter_value (`str`): Parameter value\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_row_added",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L137"
    }
  },
  "verify_policy_map_values": {
    "iosxe": {
      "doc": "Verify running configuration values to operational one and add Table row\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            config_key (`str`): Configuration key to check\n            oper_key (`str`): Operational key to check\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "uid": "verify_policy_map_values",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L95"
    }
  },
  "verify_preference_show_route": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            address ('str'): address to be ued in show command\n            preference ('int'): Preference name\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_preference_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3293"
    }
  },
  "verify_protocol_next_hop_in_route": {
    "junos": {
      "doc": "Verify protocol next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_protocol_next_hop ('str'): Protocol next Hop address\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_protocol_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1849"
    }
  },
  "verify_push_present_in_show_route": {
    "junos": {
      "doc": "Verify if Push value is present in 'show route {address} extensive'\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address for show command\n            push_value ('str'): Push value in show route {address} extensive command\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_push_present_in_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1331"
    }
  },
  "verify_rib_fib_lfib_consistency": {
    "iosxe": {
      "doc": " Verify the outgoing label for route are the same in:\n        - show ip route <route>\n        - show ip cef <route>\n        - show mpls forwarding-table <route>\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): Route or ipn\n            none_pattern (`list`): None label pattern\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "routing.verify",
      "uid": "verify_rib_fib_lfib_consistency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L99"
    }
  },
  "verify_route_advertised_protocol_community": {
    "junos": {
      "doc": "Verify community has the given community_list against criteria\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Target route to check\n            community_list ('list(str)'): List of communities to verify\n            ip_address ('str'): IP address to check\n            protocol ('str'): Protocol name that passed in command\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking, default 60 seconds\n            check_interval ('int', optional): How often to check, default 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_advertised_protocol_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L438"
    }
  },
  "verify_route_all_as_length": {
    "junos": {
      "doc": "Verifies the as path length of all paths\n\n    Args:\n        device (object): Device object\n        route (str): Route to check path lengths of\n        expected_path_as_length (str): Expected AS path length\n        excluded_paths (list, optional): Paths to exclude from the count. Defaults to [].\n        max_time (int, optional): Max timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_all_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2844"
    }
  },
  "verify_route_as_length": {
    "junos": {
      "doc": " Verify the length as-path of best path and non best path\n\n        Args:\n            device (`obj`): Device object\n            route('str'): Target route address\n            expected_bestpath_as_length (`int`): Expected best path as length\n            expected_nonbestpath_as_length (`int`): Expected non best path as length, default: None\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2386"
    }
  },
  "verify_route_as_path_count": {
    "junos": {
      "doc": "Verify route as path count\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_count (int): Expected count to check against\n        excluded_paths (list, optional): Paths to exclude. Defaults to [].\n        best_path (bool, optional): Check the best path or the next, non-best path. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_internval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_as_path_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2766"
    }
  },
  "verify_route_best_path": {
    "junos": {
      "doc": " Verify Best path is toward $ip_address or with preference $preference\n\n        Args:\n            device (`obj`): Device object\n            target_route (`str`): Target route to check\n            ip_address (`str`): IP Address to verify is best path, default: None\n            preference (`int`): Preference of best path, default: None\n            active_tag (`str`, optional): Active tag to check, default: '*' (best path)\n            interface (`str`, optional): IP address in show command. Defaults to None. \n            extensive (`bool`, optional): 'extensive' added in the show command. Defaults to None.\n            expected_to (`str`, optional): Expected address that be towarded to. Defaults to None.\n            expected_med (`str`, optional): Expected med that be towarded to. Defaults to None.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1383"
    }
  },
  "verify_route_best_path_counter": {
    "junos": {
      "doc": " Verify best path counter\n\n        Args:\n            device ('str'): Device str\n            expected_count ('int'): Expected best path count\n            protocol ('str'): Protocol name. Default to None\n            ip_address ('str'): IP address. Default to None.\n            max_time (`int`, optional): Max time, defaults to 60 seconds\n            check_interval (`int`, optional): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_best_path_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3407"
    }
  },
  "verify_route_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of best path\n\n        Args:\n            device (`obj`): Device object\n            expected_metric (`int`): Expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1519"
    }
  },
  "verify_route_exists": {
    "junos": {
      "doc": " Verifies route exists via show route protocol bgp\n\n    Args:\n        device (obj): Device object\n        expected_route (str): Expected route\n        invert (bool): Default to False. Set to True if verify route doesn't exist.\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.    \n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3250"
    }
  },
  "verify_route_flag": {
    "junos": {
      "doc": " Verify the IGP/EGP flag\n\n        Args:\n            device (`obj`): Device object\n            target_route ('str'): Route to check\n            expected_flag (`str`): Expected IGP flag\n            active_tag (`str`): Flag for 'best path'. Defaults to '*'.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1907"
    }
  },
  "verify_route_forwarding_table": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        expected_nh_index (str): Expected nh-index. Defaults to None\n        expected_netif (str): Expected netif. Defaults to None\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_forwarding_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3017"
    }
  },
  "verify_route_forwarding_type": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_forwarding_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1041"
    }
  },
  "verify_route_has_as_path": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        expected_as_path (str): Expected AS path\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n        invert (bool, optional): Inverts to check if AS path doesn't exist. Defaults to False.\n        extensive (bool, optional): True if show command ends with 'extensive'. Defaults to False.\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n        peer_addrress ('str', optional): Address used in show command. Defaults to None. \n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_has_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2105"
    }
  },
  "verify_route_has_as_path_length": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        expected_as_path_length (int): Expected AS path length\n        protocol_type (str, optional): Protocol type in show command, e.g., advertising-protocol\n                                        or receive-protocol. Defaults to 'receive'.\n        peer_address (str, optional): Peer address used in show command. Defaults to None.\n        target_address (str, optional): Target address used in show command. Defaults to None.\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_has_as_path_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2198"
    }
  },
  "verify_route_has_no_output": {
    "junos": {
      "doc": "Verify route has no output\n\n    Args:\n        target_route ('str'): Route to check\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n        protocol ('str', optional): Protocol to check. Defaults to None.\n        invert ('bool', optional): Invert the operation. Defaults to False\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                         or receive-protocol. Default to None.\n        peer_address ('str', optional): Address used in command. Defaults to None. \n        target_address ('str', optional): Address used in command. Defaults to None. \n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_has_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1697"
    }
  },
  "verify_route_is_advertised_or_received": {
    "junos": {
      "doc": " Verify the route is advertised\n\n        Args:\n            device ('obj'): Device object\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            expected_route ('str'): Expected route\n            address ('str'): IP address\n            target_address ('str'): Address used in show command\n            protocol ('str', optional): Protocol name that passed in command. Defaults to 'bgp'\n            extensive ('bool', optional): True means the show command contains 'extensive'. Defaults to False. \n            invert ('bool', optional): True means to verify not advertised or received. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60\n            check_interval ('int', optional): How often to check. Default to 10.     \n\n        Returns:\n            True/False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_is_advertised_or_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L935"
    }
  },
  "verify_route_known_via": {
    "iosxe": {
      "doc": " Verify route known via\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            known_via ('str'): Known via value\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_known_via",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L685"
    }
  },
  "verify_route_non_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of non best path\n\n        Args:\n            device (`obj`): Device object\n            non_expected_metric (`int`): Not expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_non_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1609"
    }
  },
  "verify_route_peer_as": {
    "junos": {
      "doc": "Verify a BGP route's peer as\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_peer_as (str): Expected peer as to check for\n        best_path (bool, optional): Whether to check the best route or not. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Checkout interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3086"
    }
  },
  "verify_route_push_label": {
    "junos": {
      "doc": " Verifies there is Push expected_label in the table_name via show route ip_address\n\n    Args:\n        device (obj): Device object\n        table_name (str): Given table name\n        expected_label (str): Expected label\n        ip_address (str): IP address used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_push_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3143"
    }
  },
  "verify_route_same_as_peer_local": {
    "junos": {
      "doc": "Verifies a route's Peer AS and Local AS are the same\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        best_path (bool): Whether to check the best path or not\n        invert (bool, optional): Invert to check if they're different. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_same_as_peer_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2908"
    }
  },
  "verify_route_table_label": {
    "junos": {
      "doc": " Verify the out label\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label. Defaults to None.\n            php_label (`str`): php label. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_table_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1210"
    }
  },
  "verify_route_table_label_output": {
    "junos": {
      "doc": " Verifies there is path via show route table table_name label label_name\n\n    Args:\n        device (obj): Device object\n        table_name (str): Table name used in show command. Defaults to 'mpls.0'\n        label_name (str): Given label used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_table_label_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3196"
    }
  },
  "verify_route_table_mpls_label": {
    "junos": {
      "doc": "Verifies mpls label based on table name\n\n    Args:\n        device ('str'): Device object\n        table ('str'): Table name\n        label ('bool'): label for show command\n        expected_mpls_label('str'): Expected MPLS label\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_table_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2023"
    }
  },
  "verify_route_table_output_interface": {
    "junos": {
      "doc": " Verify the route table output interface\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label\n            table (`str`): Table name, Default mpls.0\n            output_interface (`str`): Output interface. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2970"
    }
  },
  "verify_routing_accepted_message": {
    "junos": {
      "doc": "Verify accepted message of route\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_message (str): Expected message to verify against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_accepted_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2269"
    }
  },
  "verify_routing_interface_preference": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            protocol ('str'): Protocol name\n            ip_address ('str'): IP address , default: None\n            interface ('str'): Interface name\n            preference ('int'): Preference value\n            extensive ('bool'): Check with extensive command\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_interface_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L200"
    }
  },
  "verify_routing_ip_bgp_neighbors_routes_exists": {
    "iosxe": {
      "doc": " Verify if the initial_route provided exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            expected_result ('bool'): expected result to check\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_ip_bgp_neighbors_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L498"
    }
  },
  "verify_routing_ip_exist": {
    "junos": {
      "doc": " Verify routing ip exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): Destination address to check existence\n            protocol ('str'): Protocol name\n            extensive_protocol ('bool'): If show command includes extensive\n            max_time (`int`): Max time, default: 60\n            metric (`int`): Metric of routing protocol\n            check_interval (`int`): Check interval, default: 10\n            extensive ('bool'): Is extensive\n            exact ('bool'): Is exact\n            protocol_type ('str'): Protocol type \n            command_address ('str'): Address to run command with\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_ip_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L283"
    }
  },
  "verify_routing_ip_routes": {
    "iosxe": {
      "doc": " Verify ip route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output provided as argument\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_ip_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L353"
    }
  },
  "verify_routing_local_and_connected_route": {
    "iosxe": {
      "doc": " Verify there is local and connected route registered for the vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n        Returns:\n            (`dict`): Interface dict contain ip route info\n            False\n        Raises:\n            None\n     ",
      "module_name": "routing.verify",
      "uid": "verify_routing_local_and_connected_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L294"
    }
  },
  "verify_routing_neighbors_advertised_routes_exists": {
    "iosxe": {
      "doc": " Verify if neighbors advertised routes exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            output ('list'): list of neighbors advertised routes (get_bgp_neighbors_advertised_routes)\n        Returns:\n            True\n            False\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_neighbors_advertised_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L556"
    }
  },
  "verify_routing_no_ospf_metric_match": {
    "junos": {
      "doc": "Verify that no OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_no_ospf_metric_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L683"
    }
  },
  "verify_routing_ospf_metric_match_or_greater": {
    "junos": {
      "doc": "Verify that all OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_ospf_metric_match_or_greater",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L717"
    }
  },
  "verify_routing_route": {
    "junos": {
      "doc": "Verify show route exists against critera\n\n    Args:\n        route ('str'): Route to check\n        expected_protocol_name ('str'): Expected protol in route\n        expected_community ('str'): Expected community in route\n        extensive ('bool): Whether to use extensive or not\n        expected_table_name ('str'): Table name to check for\n        expected_active_tag ('str'): Route table active tag to check, default: '*'\n        expected_tag ('str'): Route table tag to check for\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L500"
    }
  },
  "verify_routing_route_ip_on_interface": {
    "iosxe": {
      "doc": " Verify routes match the configured IP address in running config\n\n        Args:\n            device (`obj`): Device object\n            interface_dict (`dict`): Interface dict contain ip route info. Get from libs/routing/verify.py::verify_routing_local_and_connected_route\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_route_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L327"
    }
  },
  "verify_routing_routes": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        addr_list('list'): List to verify\n        protocol ('str'): Protocol type to check in show route\n        contains ('boolean'): flag to check if addr_list is contained/excluded\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L609"
    }
  },
  "verify_routing_static_routes": {
    "iosxe": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output from 'show ip route static'\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L426"
    },
    "junos": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): destination ip address\n            to ('str'): to value\n            not_to ('str'): not to value\n            known_via ('str'): known via value\n            tag ('str'): Tag value\n            preference ('str'): Preference value\n            protocol_name ('str'): Protocol name\n            extensive ('bool'): if command with extensive at the end\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L96"
    }
  },
  "verify_rsvp_neighbor": {
    "junos": {
      "doc": "\n    Verify there is a neighbor\n\n    Args:\n        device (`obj`): Device object\n        expected_ipaddress (`str`): The IP address that is expected in the output \n        max_time (`int`): Max time, default: 30\n        check_interval (`int`): Check interval, default: 10\n    Returns:\n        result (`bool`): Verified result \n    ",
      "module_name": "rsvp.verify",
      "uid": "verify_rsvp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L78"
    }
  },
  "verify_rsvp_session_state": {
    "junos": {
      "doc": " Verify RSVP session state\n\n    Args:\n        device (obj): device object\n        expected_state (str): Expected state\n        session_name (str, optional): Session name. Defaults to None.\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "rsvp.verify",
      "uid": "verify_rsvp_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L170"
    }
  },
  "verify_rt_destination": {
    "junos": {
      "doc": "Verify rt destination\n\n        Args:\n            device ('obj'): Device to use\n            target_route ('str'): target route address\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n            interface ('str', optional): expected interface address. Default to None.\n            extensive(bool, optional): True if show command has extensive. Defaults to False.\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_rt_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2693"
    }
  },
  "verify_segment_routing_dynamic_metric_type": {
    "iosxe": {
      "doc": " Verify segment-routing metric type under dynamic path with active state\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_type (`str`): Expected metric type\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_dynamic_metric_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L242"
    }
  },
  "verify_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing gb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L532"
    },
    "iosxr": {
      "doc": " Verify segment routing global block range\n\n        Args:\n            device (`obj`): Device object\n            expected_label_min (`int`): Segment routing global block start\n            expected_label_max (`int`): Segment routing global block end\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L17"
    }
  },
  "verify_segment_routing_label_by_traceroute": {
    "iosxr": {
      "doc": " Verify Segment routing label by traceroute\n\n        Args:\n            device (`obj`): Device object\n            traceroute_address ('str): Traceroute address\n            process_id ('str'): Router ISIS process ID\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_label_by_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L64"
    }
  },
  "verify_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing lb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L480"
    }
  },
  "verify_segment_routing_operation": {
    "iosxr": {
      "doc": " Verify Segment routing operation\n\n        Args:\n            device (`obj`): Device object\n            loopback_interface (`str`): Loopback interface\n            label_min (`int`): Segment routing global block start\n            prefix_sid_index (`int`): Prefix-sid index\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_operation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L15"
    }
  },
  "verify_segment_routing_policy_attributes": {
    "iosxe": {
      "doc": " Verify segment-routing policy attributes is as expected\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_bsid (`int`): Expected Binding SID\n            expected_mode (`str`): Expected allocation mode\n            expected_state (`str`): Expected binding state\n            policy_dict (`dict`): Policy dict from parser output \n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n            sid (`int`): Binding sid\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_policy_attributes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L19"
    }
  },
  "verify_segment_routing_policy_hops": {
    "iosxe": {
      "doc": " Verify segment-routing policy hops with order and extract labels\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            segment_list (`list`): Segment list to verify\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n            path_type (`int`): Tath Type, default: explicit\n        Returns\n            result (`bool`): Verified result\n            labels (`list`): Hops labels\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_policy_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L154"
    }
  },
  "verify_segment_routing_policy_state": {
    "iosxe": {
      "doc": " Verify segment-routing policy state is as expected (Admin/Operational)\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name, if not specified will verify all\n            expected_admin (`str`): Expected admin state\n            expected_oper (`str`): Expected operational state\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_policy_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L95"
    }
  },
  "verify_segment_routing_traffic_eng_policies": {
    "iosxe": {
      "doc": " Verifies configured traffic_eng policies have expected configurations\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            expected_admin_status ('str'): Expected admin status\n            expected_oper_status ('str'): Expected operational status\n            expected_metric_type ('str'): Expected metric type\n            expected_path_accumulated_metric ('int'): Expected path accumulated metric\n            expected_path_status ('str'): Expected path status\n            expected_affinity_type ('str'): Expected affinity type\n            expected_affinities ('list'): Expected affinities\n            expected_preference ('int'): Expected preference path \n            expected_endpoint_ip ('str'): Expected Endpoint IP\n            max_time ('int'): Maximum amount of time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_segment_routing_traffic_eng_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L681"
    }
  },
  "verify_session_state_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if session state matches expected state\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            address_families ('list')         : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n            neighbor_address ('str')          : Address family to be searched under\n            expected_session_state  ('str')   : List of expected state\n            vrf_name ('str')                  : VRF value\n            max_time ('int'): max time\n            check_interval ('int'): check interval\n        Returns: \n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "uid": "verify_session_state_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L630"
    }
  },
  "verify_show_ospf3_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf3 database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval (`int`,optional): Check interval, default: 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_show_ospf3_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L711"
    }
  },
  "verify_show_ospf_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_show_ospf_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L956"
    }
  },
  "verify_show_ospf_route_network_extensive": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_show_ospf_route_network_extensive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L997"
    }
  },
  "verify_show_ospfv3_database": {
    "junos": {
      "doc": " Verify data in show ospf3 database\n\n    Args:\n        device (obj): Device object\n        advertising_router (str, optional): Advertising router to check. Defaults to None.\n        lsa_type (str, optional): LSA Type to check for. Defaults to None.\n        expected_node_id (str, optional): Expected node ID to check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf3.verify",
      "uid": "verify_show_ospfv3_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L751"
    }
  },
  "verify_sid_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            sid (`int`): SID value\n            code (`str`): Check for codes in output\n                ex.) code = 'L'\n            ip_address (`str`): IP address to check in output\n            avoid_codes (`list`): List of codes to avoid\n                ex.)\n                    avoid_codes = ['L', 'C']\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            output ('list'): Pass output as reference - modifies the calling output\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_sid_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L498"
    }
  },
  "verify_sid_in_ospf_pairs": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf pairs\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            pairs = [{'sid': 10, 'prefix':'172.16.1.1/32', 'codes': 'M'}, {...}]\n\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_sid_in_ospf_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1264"
    }
  },
  "verify_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if SID is found in segment-routing\n        from command 'show segment-routing mpls connected-prefix-sid-map ipv4' or\n        from command 'show segment-routing mpls connected-prefix-sid-map local ipv4'\n        \n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family name\n            local (`bool`): Flag to check command with local\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L294"
    }
  },
  "verify_sid_is_advertised_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is advertised in ospf\n        from command 'show ip ospf database opaque-area adv-router {router_id}'\n\n        Args:\n            device (`obj`): Device to be executed command\n            router_id (`str`): Router ID\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "uid": "verify_sid_is_advertised_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L798"
    }
  },
  "verify_simulation": {
    "virl": {
      "doc": "Verify if simulation exists\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            max_time (`int`): maximum wait time in seconds. Default: 60\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 10\n            exist (`Bool`): True if simulation exists. False for opposite check.\n\n        Returns:\n            Bool: True/False\n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "uid": "verify_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L92"
    }
  },
  "verify_smallest_stratum_ntp_system_peer": {
    "iosxe": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L20"
    },
    "iosxr": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L17"
    }
  },
  "verify_source_of_best_path": {
    "junos": {
      "doc": "Verify the source of the best path\n\n    Args:\n        target_route ('str'): Route to check\n        expected_best_path ('str'): Best path address\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "uid": "verify_source_of_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1087"
    }
  },
  "verify_specific_route": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        device ('obj'): device to use\n        address('str'): address to search for\n        learn_protocol('str'): Learned protocol\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "uid": "verify_specific_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L829"
    }
  },
  "verify_state": {
    "iosxe": {
      "doc": "Trigger Pre-Processor:\n        * verify state:\n    ",
      "module_name": "prepostprocessor.processors",
      "uid": "verify_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prepostprocessor/processors.py#L49"
    }
  },
  "verify_static_arp": {
    "iosxe": {
      "doc": " Verify static arp entry is present in ARP table\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "uid": "verify_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L13"
    }
  },
  "verify_status_of_segment_routing": {
    "iosxe": {
      "doc": " Verifies if state matches expected_state state in segment-routing\n        from command 'show segment-routing mpls state'\n\n        Args:\n            device (`obj`): Device to be executed command\n            state (`str`): Expected state\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "uid": "verify_status_of_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L343"
    }
  },
  "verify_synced_ntp_server": {
    "iosxr": {
      "doc": " Verify synched NTP server\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`list`): list of Server peer IP address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 1200\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 30\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "uid": "verify_synced_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L247"
    }
  },
  "verify_syslog_bgp_peer_down": {
    "iosxe": {
      "doc": " Verify log for bgp peer down message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_bgp_peer_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L201"
    }
  },
  "verify_syslog_bgp_peer_up": {
    "iosxe": {
      "doc": " Verify log for bgp peer up message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_bgp_peer_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L169"
    }
  },
  "verify_syslog_interface_link_down": {
    "iosxe": {
      "doc": " Verify link down message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_interface_link_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L274"
    }
  },
  "verify_syslog_interface_link_up": {
    "iosxe": {
      "doc": " Verify link up message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_interface_link_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L233"
    }
  },
  "verify_syslog_interface_shut": {
    "iosxe": {
      "doc": " Verify log for interface shut message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_interface_shut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L9"
    }
  },
  "verify_syslog_interface_up": {
    "iosxe": {
      "doc": " Verify log for interface up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_interface_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L48"
    }
  },
  "verify_syslog_ospf_neighbor_down": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor down message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_ospf_neighbor_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L129"
    }
  },
  "verify_syslog_ospf_neighbor_up": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "uid": "verify_syslog_ospf_neighbor_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L88"
    }
  },
  "verify_ted_interface": {
    "junos": {
      "doc": " Verifies ted interface exists\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use in show command\n            expected_interface ('str'): expected interface\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ted.verify",
      "uid": "verify_ted_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ted/verify.py#L16"
    }
  },
  "verify_traceroute": {
    "iosxe": {
      "doc": " Verify traceroute if it matches expected_output_label_list or expected_hop_list\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            ignore_last_label ('bool'): Ignore last label in expected_output_label_list,\n            ignore_first_label ('bool'): Ignore first label in expected_output_label_list\n            expected_output_label_list ('list'): Expected output label list of first hop\n                ex.) \n                    expected_output_label_list = ['16052','16062','16063','39']\n            expected_hop_list ('list'): Expected hop list\n                ex.) \n                    expected_hop_list = ['10.19.198.29', '10.169.14.129', '10.169.14.34', '192.168.1.1']\n            check_first_hop ('bool'): flag to check all labels only from first hop's labels. \n                                      if False, all top label from each hop will be checked.\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How long to wait between checks\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "uid": "verify_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L62"
    }
  },
  "verify_traceroute_first_hop_address": {
    "iosxe": {
      "doc": " Verify if first hop ip address is expected one\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            expected_hop_address ('str'): Expected next hop ip address\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "uid": "verify_traceroute_first_hop_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L17"
    }
  },
  "verify_traceroute_number_of_hops": {
    "junos": {
      "doc": " Verifies the number of hops is expected_amount via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            expected_amount ('int'): Expected number of hops in output\n            ip_address ('str'): IP address passed in command\n            max_time ('int', optional): Maximum time to keep checking. Default to 100\n            check_interval ('int', optional): How often to check. Default to 30\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "uid": "verify_traceroute_number_of_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L15"
    }
  },
  "verify_vpls_same_interface_for_l2vpn_and_l3vpn": {
    "iosxe": {
      "doc": " Verify that subinterface for L3VPN vrf and service instance for L2VPN bridge-domain belong to same interface\n\n        Args:\n            device('obj'): device object \n            vrf ('str'): vrf name\n            bridge_domain_id ('int'): bridge-domain id\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.vpls.verify",
      "uid": "verify_vpls_same_interface_for_l2vpn_and_l3vpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/vpls/verify.py#L23"
    }
  },
  "verify_vpn_route_targets": {
    "iosxe": {
      "doc": " Verify route target are imported, exported or both\n\n        Args:\n            device ('obj'): Device object\n            route_targets ('list'): list of route targets to check\n                ex.)\n                    [\n                        '65109:4005',\n                        '65109:4006'\n                    ]\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            address_family ('str'): address family to check\n            vrf ('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "vpn.verify",
      "uid": "verify_vpn_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpn/verify.py#L17"
    }
  },
  "verify_vrf_advertised_routes": {
    "iosxe": {
      "doc": " Verify if each VRF/route distinguisher have at least one advertised route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be search under in advertised routes\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "uid": "verify_vrf_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L25"
    }
  },
  "verify_vrf_description_in_running_config": {
    "iosxe": {
      "doc": "Verify vrf description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            Exception\n            KeyError\n    ",
      "module_name": "vrf.verify",
      "uid": "verify_vrf_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L287"
    }
  },
  "verify_vrf_description_in_show_ip_vrf_detail": {
    "iosxe": {
      "doc": "Verify vrf description in show ip vrf detail <vrf>\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n            Exception\n    ",
      "module_name": "vrf.verify",
      "uid": "verify_vrf_description_in_show_ip_vrf_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L252"
    }
  },
  "verify_vrf_received_routes": {
    "iosxe": {
      "doc": " Verify if each neighbor has at least one received route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be searched under in received routes\n            received_routes ('dict'): Advertised routes from command:\n                 'show bgp {address_family} all neighbors {neighbor} routes\n\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.verify",
      "uid": "verify_vrf_received_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L181"
    }
  },
  "verify_vrf_routes_in_bgp_table": {
    "iosxe": {
      "doc": " Verify that each VRF and route distinguisher has at least one route in BGP table\n\n        Args:\n            device ('obj'): Device object\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            address_family ('address_family'): Address family\n            routes_dict ('dict'): Parsed output from command 'show ip bgp all'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "uid": "verify_vrf_routes_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L109"
    }
  },
  "write_erase_reload_device": {
    "iosxe": {
      "doc": "Execute 'write erase' on device, reload and apply basic configuration.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            static_route_ip (`str`): IP address for static route configuration\n            config_sleep (`int`): Time to wait after applying mgmt IP configuration\n            vrf (`str`): VRF to use for management IP operations\n            via_mgmt(`str`): Via to use to reach the device mgt IP.\n            post_reconnect_time(`int`): Maximum time to wait after reload before configuring\n\n\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "uid": "write_erase_reload_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L186"
    }
  },
  "write_erase_reload_device_without_reconfig": {
    "ios": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/utils.py#L5"
    },
    "iosxe": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L25"
    },
    "nxos": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n    ",
      "module_name": "platform.utils",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#L19"
    }
  }
}