{
  "Verify_AccessLists": {
    "ios": {
      "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>",
      "groups": [],
      "schema": "{Any  (str) *: {'name': <class 'str'>, 'type': <class 'str'>, 'acl_type': <class 'str'>, Optional  (str) per_user: <class 'bool'>, Optional  (str) aces: {Any  (str) *: {'name': <class 'str'>, 'matches': {Optional  (str) l2: {'eth': {'destination_mac_address': <class 'str'>, 'source_mac_address': <class 'str'>, Optional  (str) ether_type: <class 'str'>, Optional  (str) cos: <class 'int'>, Optional  (str) vlan: <class 'int'>, Optional  (str) protocol_family: <class 'str'>, Optional  (str) lsap: <class 'str'>}}, Optional  (str) l3: {Any  (str) *: {Optional  (str) dscp: <class 'str'>, Optional  (str) ttl: <class 'int'>, Optional  (str) ttl_operator: <class 'str'>, 'protocol': <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) precedence_code: <class 'int'>, Optional  (str) destination_network: {Any  (str) *: {'destination_network': <class 'str'>}}, Optional  (str) source_network: {Any  (str) *: {'source_network': <class 'str'>}}}}, Optional  (str) l4: {Any  (str) *: {Optional  (str) type: <class 'int'>, Optional  (str) code: <class 'int'>, Optional  (str) acknowledgement_number: <class 'int'>, Optional  (str) data_offset: <class 'int'>, Optional  (str) reserved: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) window_size: <class 'int'>, Optional  (str) urgent_pointer: <class 'int'>, Optional  (str) options: <class 'int'>, Optional  (str) options_name: <class 'str'>, Optional  (str) established: <class 'bool'>, Optional  (str) source_port: {Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}, Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'str'>}}, Optional  (str) destination_port: {Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}, Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'int'>}}, Optional  (str) msg_type: <class 'str'>}}}, 'actions': {'forwarding': <class 'str'>, Optional  (str) logging: <class 'str'>}, Optional  (str) statistics: {'matched_packets': Or (<class 'int'>, <class 'str'>)}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show access-lists\n                  show access-lists <acl>",
      "groups": [],
      "schema": "{Any  (str) *: {'name': <class 'str'>, 'type': <class 'str'>, 'acl_type': <class 'str'>, Optional  (str) per_user: <class 'bool'>, Optional  (str) aces: {Any  (str) *: {'name': <class 'str'>, 'matches': {Optional  (str) l2: {'eth': {'destination_mac_address': <class 'str'>, 'source_mac_address': <class 'str'>, Optional  (str) ether_type: <class 'str'>, Optional  (str) cos: <class 'int'>, Optional  (str) vlan: <class 'int'>, Optional  (str) protocol_family: <class 'str'>, Optional  (str) lsap: <class 'str'>}}, Optional  (str) l3: {Any  (str) *: {Optional  (str) dscp: <class 'str'>, Optional  (str) ttl: <class 'int'>, Optional  (str) ttl_operator: <class 'str'>, 'protocol': <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) precedence_code: <class 'int'>, Optional  (str) destination_network: {Any  (str) *: {'destination_network': <class 'str'>}}, Optional  (str) source_network: {Any  (str) *: {'source_network': <class 'str'>}}}}, Optional  (str) l4: {Any  (str) *: {Optional  (str) type: <class 'int'>, Optional  (str) code: <class 'int'>, Optional  (str) acknowledgement_number: <class 'int'>, Optional  (str) data_offset: <class 'int'>, Optional  (str) reserved: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) window_size: <class 'int'>, Optional  (str) urgent_pointer: <class 'int'>, Optional  (str) options: <class 'int'>, Optional  (str) options_name: <class 'str'>, Optional  (str) established: <class 'bool'>, Optional  (str) source_port: {Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}, Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'str'>}}, Optional  (str) destination_port: {Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}, Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'int'>}}, Optional  (str) msg_type: <class 'str'>}}}, 'actions': {'forwarding': <class 'str'>, Optional  (str) logging: <class 'str'>}, Optional  (str) statistics: {'matched_packets': Or (<class 'int'>, <class 'str'>)}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py"
    },
    "nxos": {
      "doc": " Parser for\n        'show access-lists'\n        'show access-lists {acl}'\n    ",
      "groups": [],
      "schema": "{Any  (str) *: {'name': <class 'str'>, 'type': <class 'str'>, Optional  (str) aces: {Any  (str) *: {'name': <class 'str'>, 'matches': {Optional  (str) l2: {'eth': {'destination_mac_address': <class 'str'>, 'source_mac_address': <class 'str'>, Optional  (str) ether_type: <class 'str'>, Optional  (str) vlan: <class 'int'>, Optional  (str) mac_protocol_number: <class 'str'>}}, Optional  (str) l3: {Any  (str) *: {'protocol': <class 'str'>, Optional  (str) ttl: <class 'int'>, Optional  (str) ttl_operator: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) precedence_code: <class 'int'>, 'destination_network': {Any  (str) *: {'destination_network': <class 'str'>}}, 'source_network': {Any  (str) *: {'source_network': <class 'str'>}}}}, Optional  (str) l4: {Any  (str) *: {Optional  (str) type: <class 'int'>, Optional  (str) code: <class 'int'>, Optional  (str) acknowledgement_number: <class 'int'>, Optional  (str) data_offset: <class 'int'>, Optional  (str) reserved: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) window_size: <class 'int'>, Optional  (str) urgent_pointer: <class 'int'>, Optional  (str) options: <class 'int'>, Optional  (str) options_name: <class 'str'>, Optional  (str) established: <class 'bool'>, Optional  (str) source_port: {Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'str'>}, Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}}, Optional  (str) destination_port: {Optional  (str) operator: {'operator': <class 'str'>, 'port': <class 'str'>}, Optional  (str) range: {'lower_port': <class 'int'>, 'upper_port': <class 'int'>}}}}}, 'actions': {'forwarding': <class 'str'>, Optional  (str) logging: <class 'str'>}, Optional  (str) statistics: {'matched_packets': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_acl.py"
    }
  },
  "Verify_AccessSession": {
    "ios": {
      "doc": "Parser for show access-session",
      "groups": [],
      "schema": "{'session_count': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'client': {Any  (str) *: {'client': <class 'str'>, 'method': <class 'str'>, 'domain': <class 'str'>, 'status': <class 'str'>, 'session': {Any  (str) *: {'session_id': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_access_session.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show access-session",
      "groups": [],
      "schema": "{'session_count': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'client': {Any  (str) *: {'client': <class 'str'>, 'method': <class 'str'>, 'domain': <class 'str'>, 'status': <class 'str'>, 'session': {Any  (str) *: {'session_id': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_access_session.py"
    }
  },
  "Verify_AdminDiagChassis": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for admin show diag chassis",
      "groups": [],
      "schema": "{Optional  (str) device_family: <class 'str'>, Optional  (str) device_series: <class 'str'>, Optional  (str) num_line_cards: <class 'int'>, Optional  (str) chassis_feature: <class 'str'>, Optional  (str) controller_family: <class 'str'>, Optional  (str) controller_type: <class 'str'>, 'rack_num': <class 'int'>, Optional  (str) sn: <class 'str'>, 'pid': <class 'str'>, 'vid': <class 'str'>, Optional  (str) desc: <class 'str'>, 'clei': <class 'str'>, Optional  (str) eci: <class 'str'>, Optional  (str) pca: <class 'str'>, Optional  (str) top_assy_num: <class 'str'>, Optional  (str) main: {'board_type': <class 'str'>, 'part': <class 'str'>, 'dev': <class 'str'>, 'serial_number': <class 'str'>}, Optional  (str) part_number: <class 'str'>, Optional  (str) part_revision: <class 'str'>, Optional  (str) hw_version: <class 'str'>, Optional  (str) top_assembly_block: {Optional  (str) serial_number: <class 'str'>, 'part_number': <class 'str'>, Optional  (str) part_revision: <class 'str'>, Optional  (str) revision: <class 'str'>, Optional  (str) mfg_deviation: <class 'str'>, Optional  (str) hw_version: <class 'str'>, Optional  (str) mfg_bits: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_Archive": {
    "ios": {
      "doc": " Parser for show archive ",
      "groups": [],
      "schema": "{'archive': {Optional  (str) total: <class 'int'>, Optional  (str) max_archive_configurations: <class 'int'>, Optional  (str) most_recent_file: <class 'str'>, Optional  (str) error: <class 'str'>, Any  (str) *: {'file': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for show archive ",
      "groups": [],
      "schema": "{'archive': {Optional  (str) total: <class 'int'>, Optional  (str) max_archive_configurations: <class 'int'>, Optional  (str) most_recent_file: <class 'str'>, Optional  (str) error: <class 'str'>, Any  (str) *: {'file': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py"
    }
  },
  "Verify_Arp": {
    "asa": {
      "doc": "Parser for\n        * show arp\n    ",
      "groups": [],
      "schema": "{Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, 'link_layer_address': <class 'str'>, 'age': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_arp.py"
    },
    "ios": {
      "doc": " Parser for show arp",
      "groups": [],
      "schema": "{Optional  (str) global_static_table: {Any  (str) *: {'ip_address': <class 'str'>, 'mac_address': <class 'str'>, 'encap_type': <class 'str'>, 'age': <class 'str'>, 'protocol': <class 'str'>}}, Optional  (str) interfaces: {Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'origin': <class 'str'>, 'age': <class 'str'>, 'type': <class 'str'>, 'protocol': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) global_static_table: {Any  (str) *: {'ip_address': <class 'str'>, 'mac_address': <class 'str'>, 'encap_type': <class 'str'>, 'age': <class 'str'>, 'protocol': <class 'str'>}}, Optional  (str) interfaces: {Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'origin': <class 'str'>, 'age': <class 'str'>, 'type': <class 'str'>, 'protocol': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py"
    },
    "junos": {
      "doc": " Parser for:\n            * show arp\n    ",
      "groups": [],
      "schema": "{'arp-table-information': {'arp-entry-count': <class 'str'>, 'arp-table-entry': ListOf  (dict) {'arp-table-entry-flags': <class 'str'>, 'hostname': <class 'str'>, 'interface-name': <class 'str'>, 'ip-address': <class 'str'>, 'mac-address': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_arp.py"
    }
  },
  "Verify_BgpAll": {
    "ios": {
      "doc": "Parser for show bgp all",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) vrf_route_identifier: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) af_private_import_to_address_family: <class 'str'>, Optional  (str) pfx_count: <class 'int'>, Optional  (str) pfx_limit: <class 'int'>, Optional  (str) routes: {Optional  (Any) Any  (str) *: {Optional  (str) index: {Optional  (Any) Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) localpref: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show bgp all'\n        * 'show bgp {address_family} all'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) vrf_route_identifier: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) af_private_import_to_address_family: <class 'str'>, Optional  (str) pfx_count: <class 'int'>, Optional  (str) pfx_limit: <class 'int'>, Optional  (str) routes: {Optional  (Any) Any  (str) *: {Optional  (str) index: {Optional  (Any) Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) localpref: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_BgpAllClusterIds": {
    "ios": {
      "doc": "\n       Parser for show bgp all cluster-ids\n       Executing 'show vrf detail | inc \\(VRF' to collect vrf names.\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) cluster_id: <class 'str'>, Optional  (str) configured_id: <class 'str'>, Optional  (str) reflection_all_configured: <class 'str'>, Optional  (str) reflection_intra_cluster_configured: <class 'str'>, Optional  (str) reflection_intra_cluster_used: <class 'str'>, Optional  (str) list_of_cluster_ids: {Any  (str) *: {Optional  (str) num_neighbors: <class 'int'>, Optional  (str) client_to_client_reflection_configured: <class 'str'>, Optional  (str) client_to_client_reflection_used: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show bgp all cluster-ids\" ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) cluster_id: <class 'str'>, Optional  (str) configured_id: <class 'str'>, Optional  (str) reflection_all_configured: <class 'str'>, Optional  (str) reflection_intra_cluster_configured: <class 'str'>, Optional  (str) reflection_intra_cluster_used: <class 'str'>, Optional  (str) list_of_cluster_ids: {Any  (str) *: {Optional  (str) num_neighbors: <class 'int'>, Optional  (str) client_to_client_reflection_configured: <class 'str'>, Optional  (str) client_to_client_reflection_used: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_BgpAllDampeningFlapStatistics": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp all dampening flap-statistics\n        parser class implements detail parsing mechanisms for cli,xml output.",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) network: {Any  (str) *: {'peer': <class 'str'>, 'flaps': <class 'int'>, 'duration': <class 'str'>, 'current_penalty': <class 'int'>, 'suppress_limit': <class 'int'>, 'reuse_limit': <class 'int'>, 'best': <class 'bool'>, Optional  (str) status: <class 'str'>, Optional  (str) reuse_time: <class 'str'>, Optional  (str) pathtype: <class 'str'>}}, Optional  (str) history_paths: <class 'int'>, Optional  (str) dampened_paths: <class 'int'>, Optional  (str) dampening_enabled: <class 'bool'>, Optional  (str) route_identifier: {Any  (str) *: {Optional  (str) network: {Any  (str) *: {'peer': <class 'str'>, 'flaps': <class 'int'>, 'duration': <class 'str'>, Optional  (str) reuse_time: <class 'str'>, 'current_penalty': <class 'int'>, 'suppress_limit': <class 'int'>, 'reuse_limit': <class 'int'>, 'best': <class 'bool'>, Optional  (str) status: <class 'str'>, Optional  (str) pathtype: <class 'str'>}}, 'history_paths': <class 'int'>, 'dampened_paths': <class 'int'>, 'dampening_enabled': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpAllDampeningFlapStatistics_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp all dampening flap-statistics\n        parser class implements detail parsing mechanisms for cli,xml output.",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) network: {Any  (str) *: {'peer': <class 'str'>, 'flaps': <class 'int'>, 'duration': <class 'str'>, 'current_penalty': <class 'int'>, 'suppress_limit': <class 'int'>, 'reuse_limit': <class 'int'>, 'best': <class 'bool'>, Optional  (str) status: <class 'str'>, Optional  (str) reuse_time: <class 'str'>, Optional  (str) pathtype: <class 'str'>}}, Optional  (str) history_paths: <class 'int'>, Optional  (str) dampened_paths: <class 'int'>, Optional  (str) dampening_enabled: <class 'bool'>, Optional  (str) route_identifier: {Any  (str) *: {Optional  (str) network: {Any  (str) *: {'peer': <class 'str'>, 'flaps': <class 'int'>, 'duration': <class 'str'>, Optional  (str) reuse_time: <class 'str'>, 'current_penalty': <class 'int'>, 'suppress_limit': <class 'int'>, 'reuse_limit': <class 'int'>, 'best': <class 'bool'>, Optional  (str) status: <class 'str'>, Optional  (str) pathtype: <class 'str'>}}, 'history_paths': <class 'int'>, 'dampened_paths': <class 'int'>, 'dampening_enabled': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpAllDetail": {
    "ios": {
      "doc": "Parser for show bgp all detail",
      "groups": [],
      "schema": "{'instance': {'default': {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) paths: <class 'str'>, Optional  (str) available_path: <class 'str'>, Optional  (str) best_path: <class 'str'>, Optional  (str) table_version: <class 'str'>, Optional  (str) nlri_data: {Optional  (str) route-type: <class 'str'>, Optional  (str) rd: <class 'str'>, Optional  (str) esi: <class 'str'>, Optional  (str) eti: <class 'str'>, Optional  (str) mac_len: <class 'str'>, Optional  (str) mac: <class 'str'>, Optional  (str) ip_len: <class 'str'>, Optional  (str) ip_prefix: <class 'str'>, Optional  (str) orig_rtr_len: <class 'str'>, Optional  (str) orig_rtr_id: <class 'str'>, Optional  (str) mcast_src_len: <class 'str'>, Optional  (str) mcast_src: <class 'str'>, Optional  (str) mcast_group_len: <class 'str'>, Optional  (str) mcast_group_addr: <class 'str'>, Optional  (str) max_resp_time: <class 'str'>, Optional  (str) subnet: <class 'str'>}, Optional  (str) index: {Any  (str) *: {Optional  (str) mpls_labels: {'in': <class 'str'>, 'out': <class 'str'>}, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_igp_metric: <class 'str'>, Optional  (str) gateway: <class 'str'>, Optional  (str) route_info: <class 'str'>, Optional  (str) route_status: <class 'str'>, Optional  (str) imported_path_from: <class 'str'>, Optional  (str) imported_safety_path: <class 'bool'>, Optional  (str) next_hop_via: <class 'str'>, Optional  (str) update_group: Any  (str) *, Optional  (str) status_codes: <class 'str'>, Optional  (str) origin_codes: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) inaccessible: <class 'bool'>, Optional  (str) localpref: <class 'int'>, Optional  (str) atomic_aggregate: <class 'bool'>, Optional  (str) weight: <class 'str'>, Optional  (str) originator: <class 'str'>, Optional  (str) refresh_epoch: <class 'int'>, Optional  (str) recipient_pathid: <class 'str'>, Optional  (str) transfer_pathid: <class 'str'>, Optional  (str) aggregated_by_as: <class 'str'>, Optional  (str) aggregated_by_address: <class 'str'>, Optional  (str) community: <class 'str'>, Optional  (str) igmpmld: {Optional  (str) version: <class 'str'>, Optional  (str) filter_mode: <class 'str'>}, Optional  (str) ext_community: <class 'str'>, Optional  (str) recursive_via_connected: <class 'bool'>, Optional  (str) agi_version: <class 'int'>, Optional  (str) ve_block_size: <class 'int'>, Optional  (str) label_base: <class 'int'>, Optional  (str) cluster_list: <class 'str'>, Optional  (str) pmsi: {Optional  (str) tun_type: <class 'str'>, Optional  (str) vni: <class 'str'>, Optional  (str) tun_id: {Optional  (str) tun_endpoint: <class 'str'>, Optional  (str) local: <class 'bool'>}}, Optional  (str) evpn: {Optional  (str) ext_community: <class 'str'>, Optional  (str) encap: <class 'str'>, Optional  (str) evpn_esi: <class 'str'>, Optional  (str) local_vtep: <class 'str'>, Optional  (str) gateway_address: <class 'str'>, Optional  (str) label: <class 'int'>, Optional  (str) router_mac: <class 'str'>, Optional  (str) recursive_via_connected: <class 'bool'>}, Optional  (str) binding_sid: {Optional  (str) sid: <class 'str'>, Optional  (str) color: <class 'str'>, Optional  (str) state: <class 'str'>}, Optional  (str) local_vxlan_vtep: {Optional  (str) encap: <class 'str'>, Optional  (str) local_router_mac: <class 'str'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) vrf: <class 'str'>, Optional  (str) vni: <class 'str'>, Optional  (str) bdi: <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show bgp all detail'\n        * 'show bgp vrf {vrf} {route}'\n        * 'show bgp {address_family} vrf {vrf} {route}'\n        * 'show bgp {address_family} {route}'\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{'instance': {'default': {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) paths: <class 'str'>, Optional  (str) available_path: <class 'str'>, Optional  (str) best_path: <class 'str'>, Optional  (str) table_version: <class 'str'>, Optional  (str) nlri_data: {Optional  (str) route-type: <class 'str'>, Optional  (str) rd: <class 'str'>, Optional  (str) esi: <class 'str'>, Optional  (str) eti: <class 'str'>, Optional  (str) mac_len: <class 'str'>, Optional  (str) mac: <class 'str'>, Optional  (str) ip_len: <class 'str'>, Optional  (str) ip_prefix: <class 'str'>, Optional  (str) orig_rtr_len: <class 'str'>, Optional  (str) orig_rtr_id: <class 'str'>, Optional  (str) mcast_src_len: <class 'str'>, Optional  (str) mcast_src: <class 'str'>, Optional  (str) mcast_group_len: <class 'str'>, Optional  (str) mcast_group_addr: <class 'str'>, Optional  (str) max_resp_time: <class 'str'>, Optional  (str) subnet: <class 'str'>}, Optional  (str) index: {Any  (str) *: {Optional  (str) mpls_labels: {'in': <class 'str'>, 'out': <class 'str'>}, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_igp_metric: <class 'str'>, Optional  (str) gateway: <class 'str'>, Optional  (str) route_info: <class 'str'>, Optional  (str) route_status: <class 'str'>, Optional  (str) imported_path_from: <class 'str'>, Optional  (str) imported_safety_path: <class 'bool'>, Optional  (str) next_hop_via: <class 'str'>, Optional  (str) update_group: Any  (str) *, Optional  (str) status_codes: <class 'str'>, Optional  (str) origin_codes: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) inaccessible: <class 'bool'>, Optional  (str) localpref: <class 'int'>, Optional  (str) atomic_aggregate: <class 'bool'>, Optional  (str) weight: <class 'str'>, Optional  (str) originator: <class 'str'>, Optional  (str) refresh_epoch: <class 'int'>, Optional  (str) recipient_pathid: <class 'str'>, Optional  (str) transfer_pathid: <class 'str'>, Optional  (str) aggregated_by_as: <class 'str'>, Optional  (str) aggregated_by_address: <class 'str'>, Optional  (str) community: <class 'str'>, Optional  (str) igmpmld: {Optional  (str) version: <class 'str'>, Optional  (str) filter_mode: <class 'str'>}, Optional  (str) ext_community: <class 'str'>, Optional  (str) recursive_via_connected: <class 'bool'>, Optional  (str) agi_version: <class 'int'>, Optional  (str) ve_block_size: <class 'int'>, Optional  (str) label_base: <class 'int'>, Optional  (str) cluster_list: <class 'str'>, Optional  (str) pmsi: {Optional  (str) tun_type: <class 'str'>, Optional  (str) vni: <class 'str'>, Optional  (str) tun_id: {Optional  (str) tun_endpoint: <class 'str'>, Optional  (str) local: <class 'bool'>}}, Optional  (str) evpn: {Optional  (str) ext_community: <class 'str'>, Optional  (str) encap: <class 'str'>, Optional  (str) evpn_esi: <class 'str'>, Optional  (str) local_vtep: <class 'str'>, Optional  (str) gateway_address: <class 'str'>, Optional  (str) label: <class 'int'>, Optional  (str) router_mac: <class 'str'>, Optional  (str) recursive_via_connected: <class 'bool'>}, Optional  (str) binding_sid: {Optional  (str) sid: <class 'str'>, Optional  (str) color: <class 'str'>, Optional  (str) state: <class 'str'>}, Optional  (str) local_vxlan_vtep: {Optional  (str) encap: <class 'str'>, Optional  (str) local_router_mac: <class 'str'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) vrf: <class 'str'>, Optional  (str) vni: <class 'str'>, Optional  (str) bdi: <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_BgpAllNeighbors": {
    "ios": {
      "doc": "\n    Parser for show bgp all neighbors\n    ",
      "groups": [],
      "schema": "{Optional  (str) list_of_neighbors: <class 'list'>, 'vrf': {Any  (str) *: {'neighbor': {Any  (str) *: {'remote_as': Or (<class 'int'>, <class 'str'>), 'link': <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) description: <class 'str'>, 'shutdown': <class 'bool'>, Optional  (str) bgp_version: <class 'int'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) no_prepend: <class 'bool'>, Optional  (str) replace_as: <class 'bool'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) down_time: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_write: <class 'str'>, Optional  (str) current_time: <class 'str'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) neighbor_version: <class 'str'>, Optional  (str) output_queue_size: <class 'int'>, Optional  (str) index: <class 'int'>, Optional  (str) advertise_bit: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) update_group_member: <class 'int'>, Optional  (str) community_attribute_sent: <class 'bool'>, Optional  (str) extended_community_attribute_sent: <class 'bool'>, Optional  (str) suppress_ldp_signaling: <class 'bool'>, Optional  (str) slow_peer_detection: <class 'bool'>, Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>, Optional  (str) refresh_epoch: <class 'int'>, Optional  (str) max_nlri: <class 'int'>, Optional  (str) min_nlri: <class 'int'>, Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>, Optional  (str) dynamic_slow_peer_recovered: <class 'str'>, Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>, Optional  (str) last_received_refresh_start_of_rib: <class 'str'>, Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>, Optional  (str) last_received_refresh_end_of_rib: <class 'str'>, Optional  (str) refresh_out: <class 'int'>, Optional  (str) refresh_in: <class 'int'>, Optional  (str) prefix_activity_counters: {'sent': {Any  (str) *: Any  (str) *}, 'received': {Any  (str) *: Any  (str) *}}, Optional  (str) local_policy_denied_prefixes_counters: {'outbound': {Any  (str) *: Any  (str) *}, 'inbound': {Any  (str) *: Any  (str) *}}, Optional  (str) refresh_activity_counters: {'sent': {Any  (str) *: <class 'int'>}, 'received': {Any  (str) *: <class 'int'>}}}}, Optional  (str) bgp_negotiated_keepalive_timers: {'keepalive_interval': <class 'int'>, 'hold_time': <class 'int'>, Optional  (str) min_holdtime: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Optional  (str) remote_restart_timer: <class 'int'>, Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>, Any  (str) *: <class 'str'>}, Optional  (str) bgp_neighbor_session: {Optional  (str) sessions: <class 'int'>, Optional  (str) stateful_switchover: <class 'str'>}, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {'sent': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'received': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'in_queue_depth': <class 'int'>, 'out_queue_depth': <class 'int'>}, Optional  (str) multisession_messages: {Any  (str) *: {'sent': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'received': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'in_queue_depth': <class 'int'>, 'out_queue_depth': <class 'int'>}}}, Optional  (str) bgp_session_transport: {'min_time_between_advertisement_runs': <class 'int'>, Optional  (str) address_tracking_status: <class 'str'>, Optional  (str) rib_route_ip: <class 'str'>, Optional  (str) tcp_path_mtu_discovery: <class 'str'>, 'connection': {'established': <class 'int'>, 'dropped': <class 'int'>, 'last_reset': <class 'str'>, Optional  (str) reset_reason: <class 'str'>}, Optional  (str) transport: {'local_port': <class 'str'>, 'local_host': <class 'str'>, 'foreign_port': <class 'str'>, 'foreign_host': <class 'str'>, Optional  (str) mss: <class 'int'>}, Optional  (str) graceful_restart: <class 'str'>, Optional  (str) gr_restart_time: <class 'int'>, Optional  (str) gr_stalepath_time: <class 'int'>, Optional  (str) connection_state: <class 'str'>, Optional  (str) io_status: <class 'int'>, Optional  (str) unread_input_bytes: <class 'int'>, Optional  (str) ecn_connection: <class 'str'>, Optional  (str) minimum_incoming_ttl: <class 'int'>, Optional  (str) outgoing_ttl: <class 'int'>, Optional  (str) connection_tableid: <class 'int'>, Optional  (str) maximum_output_segment_queue_size: <class 'int'>, Optional  (str) enqueued_packets: {'retransmit_packet': <class 'int'>, 'input_packet': <class 'int'>, 'mis_ordered_packet': <class 'int'>}, Optional  (str) iss: <class 'int'>, Optional  (str) snduna: <class 'int'>, Optional  (str) sndnxt: <class 'int'>, Optional  (str) irs: <class 'int'>, Optional  (str) rcvnxt: <class 'int'>, Optional  (str) sndwnd: <class 'int'>, Optional  (str) snd_scale: <class 'int'>, Optional  (str) maxrcvwnd: <class 'int'>, Optional  (str) rcvwnd: <class 'int'>, Optional  (str) rcv_scale: <class 'int'>, Optional  (str) delrcvwnd: <class 'int'>, Optional  (str) srtt: <class 'int'>, Optional  (str) rtto: <class 'int'>, Optional  (str) rtv: <class 'int'>, Optional  (str) krtt: <class 'int'>, Optional  (str) min_rtt: <class 'int'>, Optional  (str) max_rtt: <class 'int'>, Optional  (str) ack_hold: <class 'int'>, Optional  (str) uptime: <class 'int'>, Optional  (str) sent_idletime: <class 'int'>, Optional  (str) receive_idletime: <class 'int'>, Optional  (str) status_flags: <class 'str'>, Optional  (str) option_flags: <class 'str'>, Optional  (str) ip_precedence_value: <class 'int'>, Optional  (str) datagram: {Optional  (str) datagram_sent: {'value': <class 'int'>, 'retransmit': <class 'int'>, 'fastretransmit': <class 'int'>, 'partialack': <class 'int'>, 'second_congestion': <class 'int'>, 'with_data': <class 'int'>, 'total_data': <class 'int'>}, 'datagram_received': {'value': <class 'int'>, 'out_of_order': <class 'int'>, 'with_data': <class 'int'>, 'total_data': <class 'int'>}}, Optional  (str) packet_fast_path: <class 'int'>, Optional  (str) packet_fast_processed: <class 'int'>, Optional  (str) packet_slow_path: <class 'int'>, Optional  (str) fast_lock_acquisition_failures: <class 'int'>, Optional  (str) lock_slow_path: <class 'int'>, Optional  (str) tcp_semaphore: <class 'str'>, Optional  (str) tcp_semaphore_status: <class 'str'>, Optional  (str) sso: <class 'bool'>, Optional  (str) tcp_connection: <class 'bool'>}, Optional  (str) bgp_event_timer: {'starts': {Any  (str) *: <class 'int'>}, 'wakeups': {Any  (str) *: <class 'int'>}, 'next': {Any  (str) *: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{Optional  (str) list_of_neighbors: <class 'list'>, 'vrf': {Any  (str) *: {'neighbor': {Any  (str) *: {'remote_as': Or (<class 'int'>, <class 'str'>), 'link': <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) description: <class 'str'>, 'shutdown': <class 'bool'>, Optional  (str) bgp_version: <class 'int'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) no_prepend: <class 'bool'>, Optional  (str) replace_as: <class 'bool'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) down_time: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_write: <class 'str'>, Optional  (str) current_time: <class 'str'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) neighbor_version: <class 'str'>, Optional  (str) output_queue_size: <class 'int'>, Optional  (str) index: <class 'int'>, Optional  (str) advertise_bit: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) update_group_member: <class 'int'>, Optional  (str) community_attribute_sent: <class 'bool'>, Optional  (str) extended_community_attribute_sent: <class 'bool'>, Optional  (str) suppress_ldp_signaling: <class 'bool'>, Optional  (str) slow_peer_detection: <class 'bool'>, Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>, Optional  (str) refresh_epoch: <class 'int'>, Optional  (str) max_nlri: <class 'int'>, Optional  (str) min_nlri: <class 'int'>, Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>, Optional  (str) dynamic_slow_peer_recovered: <class 'str'>, Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>, Optional  (str) last_received_refresh_start_of_rib: <class 'str'>, Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>, Optional  (str) last_received_refresh_end_of_rib: <class 'str'>, Optional  (str) refresh_out: <class 'int'>, Optional  (str) refresh_in: <class 'int'>, Optional  (str) prefix_activity_counters: {'sent': {Any  (str) *: Any  (str) *}, 'received': {Any  (str) *: Any  (str) *}}, Optional  (str) local_policy_denied_prefixes_counters: {'outbound': {Any  (str) *: Any  (str) *}, 'inbound': {Any  (str) *: Any  (str) *}}, Optional  (str) refresh_activity_counters: {'sent': {Any  (str) *: <class 'int'>}, 'received': {Any  (str) *: <class 'int'>}}}}, Optional  (str) bgp_negotiated_keepalive_timers: {'keepalive_interval': <class 'int'>, 'hold_time': <class 'int'>, Optional  (str) min_holdtime: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Optional  (str) remote_restart_timer: <class 'int'>, Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>, Any  (str) *: <class 'str'>}, Optional  (str) bgp_neighbor_session: {Optional  (str) sessions: <class 'int'>, Optional  (str) stateful_switchover: <class 'str'>}, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {'sent': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'received': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'in_queue_depth': <class 'int'>, 'out_queue_depth': <class 'int'>}, Optional  (str) multisession_messages: {Any  (str) *: {'sent': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'received': {'opens': <class 'int'>, 'updates': <class 'int'>, 'notifications': <class 'int'>, 'keepalives': <class 'int'>, 'route_refresh': <class 'int'>, 'total': <class 'int'>}, 'in_queue_depth': <class 'int'>, 'out_queue_depth': <class 'int'>}}}, Optional  (str) bgp_session_transport: {'min_time_between_advertisement_runs': <class 'int'>, Optional  (str) address_tracking_status: <class 'str'>, Optional  (str) rib_route_ip: <class 'str'>, Optional  (str) tcp_path_mtu_discovery: <class 'str'>, 'connection': {'established': <class 'int'>, 'dropped': <class 'int'>, 'last_reset': <class 'str'>, Optional  (str) reset_reason: <class 'str'>}, Optional  (str) transport: {'local_port': <class 'str'>, 'local_host': <class 'str'>, 'foreign_port': <class 'str'>, 'foreign_host': <class 'str'>, Optional  (str) mss: <class 'int'>}, Optional  (str) graceful_restart: <class 'str'>, Optional  (str) gr_restart_time: <class 'int'>, Optional  (str) gr_stalepath_time: <class 'int'>, Optional  (str) connection_state: <class 'str'>, Optional  (str) io_status: <class 'int'>, Optional  (str) unread_input_bytes: <class 'int'>, Optional  (str) ecn_connection: <class 'str'>, Optional  (str) minimum_incoming_ttl: <class 'int'>, Optional  (str) outgoing_ttl: <class 'int'>, Optional  (str) connection_tableid: <class 'int'>, Optional  (str) maximum_output_segment_queue_size: <class 'int'>, Optional  (str) enqueued_packets: {'retransmit_packet': <class 'int'>, 'input_packet': <class 'int'>, 'mis_ordered_packet': <class 'int'>}, Optional  (str) iss: <class 'int'>, Optional  (str) snduna: <class 'int'>, Optional  (str) sndnxt: <class 'int'>, Optional  (str) irs: <class 'int'>, Optional  (str) rcvnxt: <class 'int'>, Optional  (str) sndwnd: <class 'int'>, Optional  (str) snd_scale: <class 'int'>, Optional  (str) maxrcvwnd: <class 'int'>, Optional  (str) rcvwnd: <class 'int'>, Optional  (str) rcv_scale: <class 'int'>, Optional  (str) delrcvwnd: <class 'int'>, Optional  (str) srtt: <class 'int'>, Optional  (str) rtto: <class 'int'>, Optional  (str) rtv: <class 'int'>, Optional  (str) krtt: <class 'int'>, Optional  (str) min_rtt: <class 'int'>, Optional  (str) max_rtt: <class 'int'>, Optional  (str) ack_hold: <class 'int'>, Optional  (str) uptime: <class 'int'>, Optional  (str) sent_idletime: <class 'int'>, Optional  (str) receive_idletime: <class 'int'>, Optional  (str) status_flags: <class 'str'>, Optional  (str) option_flags: <class 'str'>, Optional  (str) ip_precedence_value: <class 'int'>, Optional  (str) datagram: {Optional  (str) datagram_sent: {'value': <class 'int'>, 'retransmit': <class 'int'>, 'fastretransmit': <class 'int'>, 'partialack': <class 'int'>, 'second_congestion': <class 'int'>, 'with_data': <class 'int'>, 'total_data': <class 'int'>}, 'datagram_received': {'value': <class 'int'>, 'out_of_order': <class 'int'>, 'with_data': <class 'int'>, 'total_data': <class 'int'>}}, Optional  (str) packet_fast_path: <class 'int'>, Optional  (str) packet_fast_processed: <class 'int'>, Optional  (str) packet_slow_path: <class 'int'>, Optional  (str) fast_lock_acquisition_failures: <class 'int'>, Optional  (str) lock_slow_path: <class 'int'>, Optional  (str) tcp_semaphore: <class 'str'>, Optional  (str) tcp_semaphore_status: <class 'str'>, Optional  (str) sso: <class 'bool'>, Optional  (str) tcp_connection: <class 'bool'>}, Optional  (str) bgp_event_timer: {'starts': {Any  (str) *: <class 'int'>}, 'wakeups': {Any  (str) *: <class 'int'>}, 'next': {Any  (str) *: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_BgpAllNexthopDatabase": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp all nexthop-database\n        parser class implements detail parsing mechanisms for cli,xml output.",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'af_nexthop_trigger_enable': <class 'bool'>, 'nexthop_trigger_delay_critical': <class 'int'>, 'nexthop_trigger_delay_non_critical': <class 'int'>, Optional  (str) next_hop: {Any  (str) *: {Optional  (str) refcount: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) multipath: <class 'str'>, Optional  (str) igp_cost: <class 'int'>, Optional  (str) igp_route_type: <class 'int'>, Optional  (str) igp_preference: <class 'int'>, Optional  (str) attached: <class 'bool'>, Optional  (str) local: <class 'bool'>, Optional  (str) reachable: <class 'bool'>, Optional  (str) labeled: <class 'bool'>, Optional  (str) filtered: <class 'bool'>, Optional  (str) pending_update: <class 'bool'>, Optional  (str) resolve_time: <class 'str'>, Optional  (str) rib_route: <class 'str'>, Optional  (str) metric_next_advertise: <class 'str'>, Optional  (str) rnh_epoch: <class 'int'>, Optional  (str) attached_nexthop: {Any  (str) *: {'attached_nexthop_interface': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpAllNexthopDatabase_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp all nexthop-database\n        parser class implements detail parsing mechanisms for cli,xml output.",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'af_nexthop_trigger_enable': <class 'bool'>, 'nexthop_trigger_delay_critical': <class 'int'>, 'nexthop_trigger_delay_non_critical': <class 'int'>, Optional  (str) next_hop: {Any  (str) *: {Optional  (str) refcount: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) multipath: <class 'str'>, Optional  (str) igp_cost: <class 'int'>, Optional  (str) igp_route_type: <class 'int'>, Optional  (str) igp_preference: <class 'int'>, Optional  (str) attached: <class 'bool'>, Optional  (str) local: <class 'bool'>, Optional  (str) reachable: <class 'bool'>, Optional  (str) labeled: <class 'bool'>, Optional  (str) filtered: <class 'bool'>, Optional  (str) pending_update: <class 'bool'>, Optional  (str) resolve_time: <class 'str'>, Optional  (str) rib_route: <class 'str'>, Optional  (str) metric_next_advertise: <class 'str'>, Optional  (str) rnh_epoch: <class 'int'>, Optional  (str) attached_nexthop: {Any  (str) *: {'attached_nexthop_interface': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpAllSummary": {
    "ios": {
      "doc": "\n    Parser for show bgp All Summary\n    ",
      "groups": [],
      "schema": "{'bgp_id': Or (<class 'int'>, <class 'str'>), 'vrf': {Any  (str) *: {Optional  (str) neighbor: {Any  (str) *: {'address_family': {Any  (str) *: {'version': <class 'int'>, 'as': Or (<class 'int'>, <class 'str'>), 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'tbl_ver': <class 'int'>, 'input_queue': <class 'int'>, 'output_queue': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) routing_table_version: <class 'int'>, Optional  (str) prefixes: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) path: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) cache_entries: {Any  (str) *: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}}, Optional  (str) entries: {Any  (str) *: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}}, Optional  (str) community_entries: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) attribute_entries: <class 'str'>, Optional  (str) total_memory: <class 'int'>, Optional  (str) activity_prefixes: <class 'str'>, Optional  (str) activity_paths: <class 'str'>, Optional  (str) scan_interval: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show bgp all summary'\n        * 'show bgp {address_family} all summary'\n        * 'show bgp vrf {vrf} all summary'\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{'bgp_id': Or (<class 'int'>, <class 'str'>), 'vrf': {Any  (str) *: {Optional  (str) neighbor: {Any  (str) *: {'address_family': {Any  (str) *: {'version': <class 'int'>, 'as': Or (<class 'int'>, <class 'str'>), 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'tbl_ver': <class 'int'>, 'input_queue': <class 'int'>, 'output_queue': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) routing_table_version: <class 'int'>, Optional  (str) prefixes: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) path: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) cache_entries: {Any  (str) *: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}}, Optional  (str) entries: {Any  (str) *: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}}, Optional  (str) community_entries: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) attribute_entries: <class 'str'>, Optional  (str) total_memory: <class 'int'>, Optional  (str) activity_prefixes: <class 'str'>, Optional  (str) activity_paths: <class 'str'>, Optional  (str) scan_interval: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_BgpInstanceAfGroupConfiguration": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp instance af-group configuration",
      "groups": [],
      "schema": "{'instance': {Any  (str) *: {'pp_name': {Any  (str) *: {Optional  (str) default_originate: <class 'bool'>, Optional  (str) address_family: <class 'str'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) default_originate_inherit: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'int'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'str'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) next_hop_self_inherit: <class 'str'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_in_inherit: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) route_map_name_out_inherit: <class 'str'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_client_inherit: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) send_comm_ebgp: <class 'bool'>, Optional  (str) send_comm_ebgp_inherit: <class 'str'>, Optional  (str) send_ext_comm_ebgp: <class 'bool'>, Optional  (str) send_ext_comm_ebgp_inherit: <class 'str'>, Optional  (str) soo: <class 'str'>, Optional  (str) soo_inherit: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'str'>, Optional  (str) soft_reconfiguration_inherit: <class 'str'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_inherit: <class 'str'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) as_override_inherit: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceAllAll_vrf_type_all": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) router_identifier: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) vrf_state: <class 'str'>, Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) generic_scan_interval: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) processed_prefix: <class 'int'>, Optional  (str) processed_paths: <class 'int'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) prefix: {Any  (str) *: {Optional  (str) index: {Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) locprf: <class 'str'>, Optional  (str) weight: <class 'str'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceAllAll_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 9,
        "interval": 10
      },
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) router_identifier: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) vrf_state: <class 'str'>, Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) generic_scan_interval: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) processed_prefix: <class 'int'>, Optional  (str) processed_paths: <class 'int'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) prefix: {Any  (str) *: {Optional  (str) index: {Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) locprf: <class 'str'>, Optional  (str) weight: <class 'str'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceAllAll_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 9,
        "interval": 10
      },
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) router_identifier: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) vrf_state: <class 'str'>, Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) generic_scan_interval: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) processed_prefix: <class 'int'>, Optional  (str) processed_paths: <class 'int'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) prefix: {Any  (str) *: {Optional  (str) index: {Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) locprf: <class 'str'>, Optional  (str) weight: <class 'str'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_vrf_type_all": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 6,
        "interval": 15
      },
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_all": {
    "iosxr": {
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_vrf_type_all": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_yang_vrf_type_all": {
    "iosxr": {
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_yang_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceProcessDetail_yang_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) operation_mode: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) as_system_number_format: <class 'str'>, Optional  (str) as_number: Or (<class 'int'>, <class 'str'>), Optional  (str) default_cluster_id: <class 'str'>, Optional  (str) active_cluster_id: <class 'str'>, Optional  (str) fast_external_fallover: <class 'bool'>, Optional  (str) platform_rlimit_max: <class 'int'>, Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>, Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) default_local_preference: <class 'int'>, Optional  (str) default_keepalive: <class 'int'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) update_delay: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) bgp_speaker_process: <class 'int'>, Optional  (str) node: <class 'str'>, Optional  (str) restart_count: <class 'int'>, Optional  (str) sent_updates: <class 'int'>, Optional  (str) received_updates: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) enforce_first_as: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) vrf_info: {Any  (str) *: {Optional  (str) total: <class 'int'>, Optional  (str) nbrs_estab: <class 'int'>, Optional  (str) cfg: <class 'int'>}}, Optional  (str) att: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) memory_used: <class 'int'>}}, Optional  (str) pool: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) message_logging_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) bmp_pool_summary: {Any  (str) *: {Optional  (str) alloc: <class 'int'>, Optional  (str) free: <class 'int'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) client_to_client_reflection: <class 'bool'>, Optional  (str) dynamic_med: <class 'bool'>, Optional  (str) dynamic_med_int: <class 'str'>, Optional  (str) dynamic_med_timer: <class 'str'>, Optional  (str) dynamic_med_periodic_timer: <class 'str'>, Optional  (str) scan_interval: <class 'str'>, Optional  (str) total_prefixes_scanned: <class 'str'>, Optional  (str) prefix_scanned_per_segment: <class 'str'>, Optional  (str) num_of_scan_segments: <class 'str'>, Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>, Optional  (str) main_table_version: <class 'str'>, Optional  (str) table_version_synced_to_rib: <class 'str'>, Optional  (str) table_version_acked_by_rib: <class 'str'>, Optional  (str) rib_has_not_converged: <class 'str'>, Optional  (str) rib_table_prefix_limit_reached: <class 'str'>, Optional  (str) rib_table_prefix_limit_ver: <class 'str'>, Optional  (str) permanent_network: <class 'str'>, Optional  (str) current_vrf: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) bgp_table_version: <class 'str'>, Optional  (str) attribute_download: <class 'str'>, Optional  (str) label_retention_timer_value: <class 'str'>, Optional  (str) soft_reconfig_entries: <class 'str'>, Optional  (str) table_bit_field_size: <class 'str'>, Optional  (str) chunk_elememt_size: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) thread: {Any  (str) *: {Optional  (str) triggers: {Any  (str) *: {Optional  (str) ver: <class 'int'>, Optional  (str) tbl_ver: <class 'int'>, Optional  (str) trig_tid: <class 'int'>}}}}, Optional  (str) remote_local: {Any  (str) *: {Optional  (str) allocated: <class 'int'>, Optional  (str) freed: <class 'int'>}}, Optional  (str) prefixes_path: {Any  (str) *: {Optional  (str) number: <class 'int'>, Optional  (str) mem_used: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceSessionGroupConfiguration": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp instance session-group configuration",
      "groups": [],
      "schema": "{'instance': {Any  (str) *: {'peer_session': {Any  (str) *: {Optional  (str) remote_as: <class 'int'>, Optional  (str) remote_as_inherit: <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) description_inherit: <class 'str'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) ebgp_multihop_inherit: <class 'str'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_no_prepend: <class 'bool'>, Optional  (str) local_dual_as: <class 'bool'>, Optional  (str) local_replace_as: <class 'bool'>, Optional  (str) local_as_inherit: <class 'str'>, Optional  (str) password_text: <class 'str'>, Optional  (str) password_text_inherit: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) shutdown_inherit: <class 'str'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) ps_minimum_holdtime: <class 'int'>, Optional  (str) timers_inherit: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) update_source_inherit: <class 'str'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) suppress_4byteas_inherit: <class 'str'>, Optional  (str) fall_over_bfd: <class 'bool'>, Optional  (str) fall_over_bfd_inherit: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) disable_connected_check_inherit: <class 'str'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) transport_connection_mode_inherit: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceSummary_vrf_type_all": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 6,
        "interval": 15
      },
      "parameters": {
        "vrf_type": "all"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) non_stop_routing: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'int'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) operation_mode: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) vrf_state: <class 'str'>, Optional  (str) process: {Any  (str) *: {'rcvtblver': <class 'int'>, 'brib_rib': <class 'int'>, 'labelver': <class 'int'>, 'importver': <class 'int'>, 'sendtblver': <class 'int'>, 'standbyver': <class 'int'>}}}}, Optional  (str) neighbor: {Any  (str) *: {'remote_as': Or (<class 'int'>, <class 'str'>), 'address_family': {Any  (str) *: {'tbl_ver': <class 'int'>, 'spk': <class 'int'>, 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'input_queue': <class 'int'>, 'output_queue': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceSummary_vrf_type_vrf_af_type_ipv4_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 4,
        "interval": 5
      },
      "parameters": {
        "af_type": "ipv4 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) non_stop_routing: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'int'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) operation_mode: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) vrf_state: <class 'str'>, Optional  (str) process: {Any  (str) *: {'rcvtblver': <class 'int'>, 'brib_rib': <class 'int'>, 'labelver': <class 'int'>, 'importver': <class 'int'>, 'sendtblver': <class 'int'>, 'standbyver': <class 'int'>}}}}, Optional  (str) neighbor: {Any  (str) *: {'remote_as': Or (<class 'int'>, <class 'str'>), 'address_family': {Any  (str) *: {'tbl_ver': <class 'int'>, 'spk': <class 'int'>, 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'input_queue': <class 'int'>, 'output_queue': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstanceSummary_vrf_type_vrf_af_type_ipv6_unicast": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 4,
        "interval": 5
      },
      "parameters": {
        "af_type": "ipv6 unicast",
        "vrf_type": "vrf"
      },
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) local_as: Or (<class 'int'>, <class 'str'>), Optional  (str) bgp_vrf: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) non_stop_routing: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) generic_scan_interval: <class 'int'>, Optional  (str) nsr_initial_initsync_version: <class 'int'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) operation_mode: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) instance_number: <class 'str'>, Optional  (str) vrf_state: <class 'str'>, Optional  (str) process: {Any  (str) *: {'rcvtblver': <class 'int'>, 'brib_rib': <class 'int'>, 'labelver': <class 'int'>, 'importver': <class 'int'>, 'sendtblver': <class 'int'>, 'standbyver': <class 'int'>}}}}, Optional  (str) neighbor: {Any  (str) *: {'remote_as': Or (<class 'int'>, <class 'str'>), 'address_family': {Any  (str) *: {'tbl_ver': <class 'int'>, 'spk': <class 'int'>, 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'input_queue': <class 'int'>, 'output_queue': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpInstances": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp instances",
      "groups": [],
      "schema": "{'instance': {Any  (str) *: {'bgp_id': Or (<class 'int'>, <class 'str'>), 'instance_id': <class 'int'>, 'placed_grp': <class 'str'>, Optional  (str) num_vrfs: <class 'int'>, Optional  (str) address_families: <class 'list'>}}, Optional  (str) number_of_bgp_instances: <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n           show bgp ipv4 mvpn",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_1": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "1",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_2": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "2",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_3": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "3",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "4",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_5": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "5",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "6",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_all_route_type_7": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "7",
        "vrf": "all"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_1": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "1",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_2": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "2",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_3": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "3",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "4",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_5": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "5",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "6",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnRouteType_vrf_default_route_type_7": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "parameters": {
        "route_type": "7",
        "vrf": "default"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpIpMvpnSaadDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp ipv4 mvpn sa-ad detail\n        show bgp ipv4 mvpn sa-ad detail vrf <vrf>\n        show bgp ipv4 mvpn sa-ad detail vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 10
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'prefixversion': <class 'int'>, Optional  (str) totalpaths: <class 'int'>, 'bestpathnr': <class 'int'>, Optional  (str) mpath: <class 'str'>, Optional  (str) on_newlist: <class 'bool'>, Optional  (str) on_xmitlist: <class 'bool'>, Optional  (str) suppressed: <class 'bool'>, Optional  (str) needsresync: <class 'bool'>, Optional  (str) locked: <class 'bool'>, 'path': {Any  (str) *: {Optional  (str) pathnr: <class 'int'>, 'pathtype': <class 'str'>, Optional  (str) policyincomplete: <class 'bool'>, 'pathvalid': <class 'bool'>, 'pathbest': <class 'bool'>, Optional  (str) pathdeleted: <class 'bool'>, Optional  (str) pathstaled: <class 'bool'>, Optional  (str) pathhistory: <class 'bool'>, Optional  (str) pathovermaxaslimit: <class 'bool'>, Optional  (str) pathmultipath: <class 'bool'>, Optional  (str) pathnolabeledrnh: <class 'bool'>, 'ipnexthop': <class 'str'>, Optional  (str) nexthop_status: <class 'str'>, 'nexthopmetric': <class 'int'>, 'neighbor': <class 'str'>, 'neighborid': <class 'str'>, Optional  (str) origin: <class 'str'>, 'localpref': <class 'int'>, 'weight': <class 'int'>, Optional  (str) inlabel: <class 'int'>, Optional  (str) extcommunity: <class 'list'>, Optional  (str) advertisedto: <class 'list'>, Optional  (str) originatorid: <class 'str'>, Optional  (str) clusterlist: <class 'list'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpn": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp l2vpn evpn",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) router_identifier: <class 'str'>, Optional  (str) local_as: <class 'int'>, Optional  (str) generic_scan_interval: <class 'str'>, Optional  (str) non_stop_routing: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) rd_version: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) local_router_id: <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) nsr_initial_initsync_version: <class 'str'>, Optional  (str) nsr_initial_init_ver_status: <class 'str'>, Optional  (str) nsr_issu_sync_group_versions: <class 'str'>, Optional  (str) scan_interval: <class 'int'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) aggregate_address_ipv4_address: <class 'str'>, Optional  (str) aggregate_address_ipv4_mask: <class 'str'>, Optional  (str) aggregate_address_as_set: <class 'bool'>, Optional  (str) aggregate_address_summary_only: <class 'bool'>, Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>, Optional  (str) v6_aggregate_address_as_set: <class 'bool'>, Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>, Optional  (str) processed_prefix: <class 'int'>, Optional  (str) processed_paths: <class 'int'>, Optional  (str) prefixes: {Any  (str) *: {'index': {Any  (str) *: {Optional  (str) next_hop: <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) path_type: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) localprf: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n           show bgp l2vpn evpn\n           show bgp l2vpn evpn vrf <vrf>\n           show bgp l2vpn evpn vrf all",
      "exclude": [
        "table_version",
        "prefix"
      ],
      "groups": [],
      "iteration": {
        "attempt": 20,
        "interval": 20
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'address_family': {Any  (str) *: {'af_name': <class 'str'>, 'table_version': <class 'str'>, 'router_id': <class 'str'>, 'rd': {Any  (str) *: {Optional  (str) rd_val: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'path': {Any  (str) *: {'pathnr': <class 'int'>, Optional  (str) metric: <class 'str'>, Optional  (str) statuscode: <class 'str'>, Optional  (str) bestcode: <class 'str'>, Optional  (str) typecode: <class 'str'>, 'ipnexthop': <class 'str'>, 'weight': <class 'str'>, Optional  (str) path: <class 'str'>, 'origin': <class 'str'>, 'localpref': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnAdvertised": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        * 'show bgp l2vpn evpn advertised'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'neighbor': {Any  (str) *: {'address_family': {Any  (str) *: {'advertised': {Any  (str) *: {'index': {Any  (str) *: {'neighbor': <class 'str'>, 'neighbor_router_id': <class 'str'>, 'flags': <class 'list'>, 'rx_path_id': <class 'int'>, 'local_path_id': <class 'int'>, 'version': <class 'int'>, 'inbound_attributes': {'nexthop': <class 'str'>, 'community_attributes': <class 'str'>, Optional  (str) origin: <class 'str'>, Optional  (str) aspath: <class 'str'>, Optional  (str) community: <class 'list'>, Optional  (str) extended_community: <class 'list'>}, 'outbound_attributes': {'nexthop': <class 'str'>, 'community_attributes': <class 'str'>, Optional  (str) origin: <class 'str'>, Optional  (str) aspath: <class 'str'>, Optional  (str) community: <class 'list'>, Optional  (str) extended_community: <class 'list'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnNeighbors": {
    "iosxr": {
      "doc": "Parser for show bgp l2vpn evpn neighbors\n                  show bgp l2vpn evpn neighbors <neighbor>\n    ",
      "groups": [],
      "schema": "{'instance': {Any  (str) *: {Optional  (str) vrf: {Any  (str) *: {'neighbor': {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) local_as_no_prepend: <class 'bool'>, Optional  (str) local_as_replace_as: <class 'bool'>, Optional  (str) local_as_dual_as: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) min_acceptable_hold_time: <class 'int'>, Optional  (str) link_state: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) session_state_reason: <class 'str'>, Optional  (str) nsr_state: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) last_read_before_reset: <class 'str'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) last_write: <class 'str'>, Optional  (str) attempted: <class 'int'>, Optional  (str) written: <class 'int'>, Optional  (str) second_last_write: <class 'str'>, Optional  (str) second_attempted: <class 'int'>, Optional  (str) second_written: <class 'int'>, Optional  (str) last_write_before_reset: <class 'str'>, Optional  (str) last_write_attempted: <class 'int'>, Optional  (str) last_write_written: <class 'int'>, Optional  (str) second_last_write_before_reset: <class 'str'>, Optional  (str) second_last_write_before_attempted: <class 'int'>, Optional  (str) second_last_write_before_written: <class 'int'>, Optional  (str) last_write_pulse_rcvd: <class 'str'>, Optional  (str) last_full_not_set_pulse_count: <class 'int'>, Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>, Optional  (str) socket_status: <class 'str'>, Optional  (str) last_write_thread_event_before_reset: <class 'str'>, Optional  (str) last_write_thread_event_second_last: <class 'str'>, Optional  (str) last_ka_expiry_before_reset: <class 'str'>, Optional  (str) last_ka_expiry_before_second_last: <class 'str'>, Optional  (str) last_ka_error_before_reset: <class 'str'>, Optional  (str) last_ka_error_ka_not_sent: <class 'str'>, Optional  (str) last_ka_start_before_reset: <class 'str'>, Optional  (str) last_ka_start_before_second_last: <class 'str'>, Optional  (str) precedence: <class 'str'>, Optional  (str) non_stop_routing: <class 'bool'>, Optional  (str) tcp_initial_sync: <class 'str'>, Optional  (str) tcp_initial_sync_phase_two: <class 'str'>, Optional  (str) tcp_initial_sync_done: <class 'str'>, Optional  (str) enforcing_first_as: <class 'str'>, Optional  (str) multiprotocol_capability: <class 'str'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) hold_time: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}, Optional  (str) bgp_negotiated_capabilities: {Any  (str) *: <class 'str'>}, Optional  (str) message_stats_input_queue: <class 'int'>, Optional  (str) message_stats_output_queue: <class 'int'>, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) minimum_time_between_adv_runs: <class 'int'>, Optional  (str) inbound_message: <class 'str'>, Optional  (str) outbound_message: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) update_group: <class 'str'>, Optional  (str) filter_group: <class 'str'>, Optional  (str) refresh_request_status: <class 'str'>, Optional  (str) route_refresh_request_received: <class 'int'>, Optional  (str) route_refresh_request_sent: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) best_paths: <class 'int'>, Optional  (str) exact_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_prefixes_denied: <class 'int'>, Optional  (str) cummulative_no_no_policy: <class 'int'>, Optional  (str) cummulative_no_failed_rt_match: <class 'int'>, Optional  (str) cummulative_no_by_orf_policy: <class 'int'>, Optional  (str) cummulative_no_by_policy: <class 'int'>, Optional  (str) prefix_advertised: <class 'int'>, Optional  (str) prefix_suppressed: <class 'int'>, Optional  (str) prefix_withdrawn: <class 'int'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'str'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) eor_status: <class 'str'>, Optional  (str) last_ack_version: <class 'int'>, Optional  (str) last_synced_ack_version: <class 'int'>, Optional  (str) outstanding_version_objects_current: <class 'int'>, Optional  (str) outstanding_version_objects_max: <class 'int'>, Optional  (str) additional_paths_operation: <class 'str'>, Optional  (str) additional_routes_local_label: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) send_multicast_attributes: <class 'bool'>, Optional  (str) soo: <class 'str'>}}, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) state: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) connections_established: <class 'int'>, Optional  (str) connections_dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_host: <class 'str'>, Optional  (str) local_port: <class 'str'>, Optional  (str) if_handle: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) mss: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp l2vpn evpn neighbors",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbor': {Any  (str) *: {'neighbor': <class 'str'>, 'remoteas': <class 'int'>, Optional  (str) localas: <class 'int'>, Optional  (str) link: <class 'str'>, Optional  (str) index: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) remote_id: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) up: <class 'bool'>, Optional  (str) retry: <class 'str'>, Optional  (str) elapsedtime: <class 'str'>, Optional  (str) connectedif: <class 'str'>, Optional  (str) bfd: <class 'bool'>, Optional  (str) ttlsecurity: <class 'bool'>, Optional  (str) password: <class 'bool'>, Optional  (str) passiveonly: <class 'bool'>, Optional  (str) localas_inactive: <class 'bool'>, Optional  (str) remote_privateas: <class 'bool'>, 'lastread': <class 'str'>, 'holdtime': <class 'int'>, 'keepalivetime': <class 'int'>, Optional  (str) lastwrite: <class 'str'>, Optional  (str) keepalive: <class 'str'>, 'msgrecvd': <class 'int'>, 'notificationsrcvd': <class 'int'>, 'recvbufbytes': <class 'int'>, 'msgsent': <class 'int'>, 'notificationssent': <class 'int'>, 'sentbytesoutstanding': <class 'int'>, Optional  (str) totalbytessent: <class 'int'>, 'connsestablished': <class 'int'>, 'connsdropped': <class 'int'>, Optional  (str) resettime: <class 'str'>, Optional  (str) resetreason: <class 'str'>, Optional  (str) peerresettime: <class 'str'>, Optional  (str) peerresetreason: <class 'str'>, Optional  (str) capsnegotiated: <class 'bool'>, Optional  (str) capmpadvertised: <class 'bool'>, Optional  (str) caprefreshadvertised: <class 'bool'>, Optional  (str) capgrdynamicadvertised: <class 'bool'>, Optional  (str) capmprecvd: <class 'bool'>, Optional  (str) caprefreshrecvd: <class 'bool'>, Optional  (str) capgrdynamicrecvd: <class 'bool'>, Optional  (str) capolddynamicadvertised: <class 'bool'>, Optional  (str) capolddynamicrecvd: <class 'bool'>, Optional  (str) caprradvertised: <class 'bool'>, Optional  (str) caprrrecvd: <class 'bool'>, Optional  (str) capoldrradvertised: <class 'bool'>, Optional  (str) capoldrrrecvd: <class 'bool'>, Optional  (str) capas4advertised: <class 'bool'>, Optional  (str) capas4recvd: <class 'bool'>, Optional  (str) af: {Any  (str) *: {'af_advertised': <class 'bool'>, 'af_recvd': <class 'bool'>, 'af_name': <class 'str'>}}, Optional  (str) capgradvertised: <class 'bool'>, Optional  (str) capgrrecvd: <class 'bool'>, Optional  (str) graf: {Any  (str) *: {Optional  (str) gr_af_name: <class 'str'>, Optional  (str) gr_adv: <class 'bool'>, Optional  (str) gr_recv: <class 'bool'>, Optional  (str) gr_fwd: <class 'bool'>}}, Optional  (str) grrestarttime: <class 'int'>, Optional  (str) grstaletiem: <class 'int'>, Optional  (str) grrecvdrestarttime: <class 'int'>, Optional  (str) capextendednhadvertised: <class 'bool'>, Optional  (str) capextendednhrecvd: <class 'bool'>, Optional  (str) capextendednhaf: {Any  (str) *: {Optional  (str) capextendednh_af_name: <class 'str'>}}, Optional  (str) epe: <class 'bool'>, Optional  (str) firstkeepalive: <class 'bool'>, 'openssent': <class 'int'>, 'opensrecvd': <class 'int'>, 'updatessent': <class 'int'>, 'updatesrecvd': <class 'int'>, 'keepalivesent': <class 'int'>, 'keepaliverecvd': <class 'int'>, 'rtrefreshsent': <class 'int'>, 'rtrefreshrecvd': <class 'int'>, 'capabilitiessent': <class 'int'>, 'capabilitiesrecvd': <class 'int'>, 'bytessent': <class 'int'>, 'bytesrecvd': <class 'int'>, Optional  (str) peraf: {Any  (str) *: {Optional  (str) per_af_name: <class 'str'>, Optional  (str) tableversion: <class 'int'>, Optional  (str) neighbortableversion: <class 'int'>, Optional  (str) pfxrecvd: <class 'int'>, Optional  (str) pfxbytes: <class 'int'>, Optional  (str) insoftreconfigallowed: <class 'bool'>, Optional  (str) sendcommunity: <class 'bool'>, Optional  (str) sendextcommunity: <class 'bool'>, Optional  (str) asoverride: <class 'bool'>, Optional  (str) peerascheckdisabled: <class 'bool'>, Optional  (str) rrconfigured: <class 'bool'>, Optional  (str) pfxbytes: <class 'int'>}}, Optional  (str) localaddr: <class 'str'>, Optional  (str) localport: <class 'int'>, Optional  (str) remoteaddr: <class 'str'>, Optional  (str) remoteport: <class 'int'>, Optional  (str) fd: <class 'int'>, Optional  (str) enhanced_error_processing: {Optional  (str) error_processing: <class 'bool'>, Optional  (str) discarded_attr: <class 'int'>}, Optional  (str) last_error_length_sent: <class 'int'>, Optional  (str) reset_error_value_sent: <class 'int'>, Optional  (str) reset_error_sent_major: <class 'int'>, Optional  (str) reset_error_sent_minor: <class 'int'>, Optional  (str) last_error_length_received: <class 'int'>, Optional  (str) reset_error_value_received: <class 'int'>, Optional  (str) reset_error_received_major: <class 'int'>, Optional  (str) reset_error_received_minor: <class 'int'>, Optional  (str) accepted_prefixes: <class 'int'>, Optional  (str) memory_consumed_in_bytes: <class 'int'>, Optional  (str) received_prefixes: <class 'int'>, Optional  (str) sent_prefixes: <class 'int'>, Optional  (str) advertise_gw_ip: <class 'bool'>, Optional  (str) outbound_route_map: <class 'str'>, Optional  (str) last_end_of_rib_sent: <class 'str'>, Optional  (str) last_end_of_rib_received: <class 'str'>, Optional  (str) first_convergence: <class 'str'>, Optional  (str) convergence_routes_sent: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnRouteType_route_type_1": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp l2vpn evpn route-type <route_type>\n        show bgp l2vpn evpn route-type <route_type> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 20,
        "interval": 20
      },
      "parameters": {
        "route_type": "1"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rd': {Any  (str) *: {Optional  (str) rd: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, Optional  (str) rd_vniid: <class 'int'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'prefixversion': <class 'int'>, Optional  (str) totalpaths: <class 'int'>, 'bestpathnr': <class 'int'>, Optional  (str) mpath: <class 'str'>, Optional  (str) on_newlist: <class 'bool'>, Optional  (str) on_xmitlist: <class 'bool'>, Optional  (str) suppressed: <class 'bool'>, Optional  (str) needsresync: <class 'bool'>, Optional  (str) locked: <class 'bool'>, 'path': {Any  (str) *: {Optional  (str) pathnr: <class 'int'>, Optional  (str) policyincomplete: <class 'bool'>, Optional  (str) pathtype: <class 'str'>, 'pathvalid': <class 'bool'>, 'pathbest': <class 'bool'>, Optional  (str) pathdeleted: <class 'bool'>, Optional  (str) pathstaled: <class 'bool'>, Optional  (str) pathhistory: <class 'bool'>, Optional  (str) pathovermaxaslimit: <class 'bool'>, Optional  (str) pathmultipath: <class 'bool'>, Optional  (str) pathnolabeledrnh: <class 'bool'>, Optional  (str) imported_from: <class 'str'>, Optional  (str) gateway_ip: <class 'str'>, Optional  (str) as_path: <class 'str'>, 'ipnexthop': <class 'str'>, 'nexthopmetric': <class 'int'>, 'neighbor': <class 'str'>, 'neighborid': <class 'str'>, Optional  (str) inaccessible: <class 'bool'>, 'origin': <class 'str'>, 'localpref': <class 'int'>, 'weight': <class 'int'>, Optional  (str) inlabel: <class 'int'>, Optional  (str) extcommunity: <class 'list'>, Optional  (str) advertisedto: <class 'list'>, Optional  (str) originatorid: <class 'str'>, Optional  (str) clusterlist: <class 'list'>, Optional  (str) pmsi_tunnel_attribute: {Optional  (str) flags: <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) tunnel_type: <class 'str'>, Optional  (str) tunnel_id: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnRouteType_route_type_2": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp l2vpn evpn route-type <route_type>\n        show bgp l2vpn evpn route-type <route_type> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 20,
        "interval": 20
      },
      "parameters": {
        "route_type": "2"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rd': {Any  (str) *: {Optional  (str) rd: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, Optional  (str) rd_vniid: <class 'int'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'prefixversion': <class 'int'>, Optional  (str) totalpaths: <class 'int'>, 'bestpathnr': <class 'int'>, Optional  (str) mpath: <class 'str'>, Optional  (str) on_newlist: <class 'bool'>, Optional  (str) on_xmitlist: <class 'bool'>, Optional  (str) suppressed: <class 'bool'>, Optional  (str) needsresync: <class 'bool'>, Optional  (str) locked: <class 'bool'>, 'path': {Any  (str) *: {Optional  (str) pathnr: <class 'int'>, Optional  (str) policyincomplete: <class 'bool'>, Optional  (str) pathtype: <class 'str'>, 'pathvalid': <class 'bool'>, 'pathbest': <class 'bool'>, Optional  (str) pathdeleted: <class 'bool'>, Optional  (str) pathstaled: <class 'bool'>, Optional  (str) pathhistory: <class 'bool'>, Optional  (str) pathovermaxaslimit: <class 'bool'>, Optional  (str) pathmultipath: <class 'bool'>, Optional  (str) pathnolabeledrnh: <class 'bool'>, Optional  (str) imported_from: <class 'str'>, Optional  (str) gateway_ip: <class 'str'>, Optional  (str) as_path: <class 'str'>, 'ipnexthop': <class 'str'>, 'nexthopmetric': <class 'int'>, 'neighbor': <class 'str'>, 'neighborid': <class 'str'>, Optional  (str) inaccessible: <class 'bool'>, 'origin': <class 'str'>, 'localpref': <class 'int'>, 'weight': <class 'int'>, Optional  (str) inlabel: <class 'int'>, Optional  (str) extcommunity: <class 'list'>, Optional  (str) advertisedto: <class 'list'>, Optional  (str) originatorid: <class 'str'>, Optional  (str) clusterlist: <class 'list'>, Optional  (str) pmsi_tunnel_attribute: {Optional  (str) flags: <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) tunnel_type: <class 'str'>, Optional  (str) tunnel_id: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnRouteType_route_type_4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp l2vpn evpn route-type <route_type>\n        show bgp l2vpn evpn route-type <route_type> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 20,
        "interval": 20
      },
      "parameters": {
        "route_type": "4"
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rd': {Any  (str) *: {Optional  (str) rd: <class 'str'>, Optional  (str) rd_vrf: <class 'str'>, Optional  (str) rd_vniid: <class 'int'>, 'prefix': {Any  (str) *: {'nonipprefix': <class 'str'>, 'prefixversion': <class 'int'>, Optional  (str) totalpaths: <class 'int'>, 'bestpathnr': <class 'int'>, Optional  (str) mpath: <class 'str'>, Optional  (str) on_newlist: <class 'bool'>, Optional  (str) on_xmitlist: <class 'bool'>, Optional  (str) suppressed: <class 'bool'>, Optional  (str) needsresync: <class 'bool'>, Optional  (str) locked: <class 'bool'>, 'path': {Any  (str) *: {Optional  (str) pathnr: <class 'int'>, Optional  (str) policyincomplete: <class 'bool'>, Optional  (str) pathtype: <class 'str'>, 'pathvalid': <class 'bool'>, 'pathbest': <class 'bool'>, Optional  (str) pathdeleted: <class 'bool'>, Optional  (str) pathstaled: <class 'bool'>, Optional  (str) pathhistory: <class 'bool'>, Optional  (str) pathovermaxaslimit: <class 'bool'>, Optional  (str) pathmultipath: <class 'bool'>, Optional  (str) pathnolabeledrnh: <class 'bool'>, Optional  (str) imported_from: <class 'str'>, Optional  (str) gateway_ip: <class 'str'>, Optional  (str) as_path: <class 'str'>, 'ipnexthop': <class 'str'>, 'nexthopmetric': <class 'int'>, 'neighbor': <class 'str'>, 'neighborid': <class 'str'>, Optional  (str) inaccessible: <class 'bool'>, 'origin': <class 'str'>, 'localpref': <class 'int'>, 'weight': <class 'int'>, Optional  (str) inlabel: <class 'int'>, Optional  (str) extcommunity: <class 'list'>, Optional  (str) advertisedto: <class 'list'>, Optional  (str) originatorid: <class 'str'>, Optional  (str) clusterlist: <class 'list'>, Optional  (str) pmsi_tunnel_attribute: {Optional  (str) flags: <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) tunnel_type: <class 'str'>, Optional  (str) tunnel_id: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpL2vpnEvpnSummary": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show bgp l2vpn evpn summary",
      "exclude": [],
      "groups": [
        "trm"
      ],
      "iteration": {
        "attempt": 20,
        "interval": 30
      },
      "schema": "{'instance': {Any  (str) *: {'vrf': {Any  (str) *: {'vrf_name_out': <class 'str'>, 'vrf_router_id': <class 'str'>, 'vrf_local_as': <class 'int'>, 'address_family': {Any  (str) *: {'tableversion': <class 'int'>, 'configuredpeers': <class 'int'>, 'capablepeers': <class 'int'>, 'totalnetworks': <class 'int'>, 'totalpaths': <class 'int'>, 'memoryused': <class 'int'>, 'numberattrs': <class 'int'>, 'bytesattrs': <class 'int'>, 'numberpaths': <class 'int'>, 'bytespaths': <class 'int'>, 'numbercommunities': <class 'int'>, 'bytescommunities': <class 'int'>, 'numberclusterlist': <class 'int'>, 'bytesclusterlist': <class 'int'>, 'dampening': <class 'str'>, 'neighbor': {Any  (str) *: {'neighbor': <class 'str'>, 'version': <class 'int'>, 'msgrecvd': <class 'int'>, 'msgsent': <class 'int'>, 'neighbortableversion': <class 'int'>, 'inq': <class 'int'>, 'outq': <class 'int'>, 'remoteas': <class 'int'>, 'time': <class 'str'>, 'state': <class 'str'>, Optional  (str) prefixreceived: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "groups": [],
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpLabels_xml_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'table_version': <class 'int'>, 'router_id': <class 'str'>, Optional  (str) prefix: {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}, Optional  (str) route_distinguisher: {Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, 'prefix': {Any  (str) *: {'index': {Any  (str) *: {'status': <class 'str'>, 'best_path': <class 'bool'>, Optional  (str) type: <class 'str'>, Optional  (str) status_code: <class 'str'>, Optional  (str) best_code: <class 'str'>, Optional  (str) type_code: <class 'str'>, 'nexthop': <class 'str'>, 'in_label': <class 'str'>, 'out_label': <class 'str'>, Optional  (str) vpn: <class 'str'>, Optional  (str) hold_down: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpOpenconfigYang_yang": {
    "iosxr": {
      "doc": null,
      "exclude": [],
      "groups": [],
      "schema": "{'bgp_pid': <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) use_multiple_paths: {'ebgp_max_paths': <class 'int'>, 'ibgp_max_paths': <class 'int'>}, 'vrf': {Any  (str) *: {'router_id': <class 'str'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) neighbor: {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) session_state: <class 'str'>, Optional  (str) bgp_neighbor_counters: {'messages': {Optional  (str) sent: {Optional  (str) updates: <class 'int'>, Optional  (str) notifications: <class 'int'>}, Optional  (str) received: {Optional  (str) updates: <class 'int'>, Optional  (str) notifications: <class 'int'>}}}, Optional  (str) nbr_ebgp_multihop: <class 'bool'>, Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) bgp_session_transport: {'transport': {Optional  (str) local_port: <class 'str'>, Optional  (str) local_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>}}}}, Optional  (str) address_family: {Any  (str) *: {'enabled': <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    },
    "nxos": {
      "doc": null,
      "exclude": [],
      "groups": [],
      "schema": "{'bgp_pid': <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) use_multiple_paths: {'ebgp_max_paths': <class 'int'>, 'ibgp_max_paths': <class 'int'>}, 'vrf': {Any  (str) *: {'router_id': <class 'str'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) log_neighbor_changes: <class 'bool'>, Optional  (str) neighbor: {Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) send_community: <class 'str'>, Optional  (str) input_queue: <class 'int'>, Optional  (str) output_queue: <class 'int'>, Optional  (str) session_state: <class 'str'>, Optional  (str) bgp_neighbor_counters: {'messages': {Optional  (str) sent: {Optional  (str) updates: <class 'int'>, Optional  (str) notifications: <class 'int'>}, Optional  (str) received: {Optional  (str) updates: <class 'int'>, Optional  (str) notifications: <class 'int'>}}}, Optional  (str) nbr_ebgp_multihop: <class 'bool'>, Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) bgp_session_transport: {'transport': {Optional  (str) local_port: <class 'str'>, Optional  (str) local_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) prefixes_received: <class 'int'>, Optional  (str) prefixes_sent: <class 'int'>, Optional  (str) active: <class 'bool'>}}}}, Optional  (str) address_family: {Any  (str) *: {'enabled': <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPeerPolicy": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp peer-policy <peer_policy>\n        Executing 'show running-config bgp | inc peer-policy' to collect\n        configured peer-policy names.\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "schema": "{'peer_policy': {Any  (str) *: {Optional  (str) send_community: <class 'bool'>, Optional  (str) send_ext_community: <class 'bool'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'bool'>, Optional  (str) site_of_origin: <class 'bool'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) inherited_vrf_default: <class 'str'>, Optional  (str) next_hop_self: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPeerSession": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp peer-session <peer_session>\n        Executing 'show running-config bgp | inc peer-session' to collect\n        configured peer-session names.\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "schema": "{'peer_session': {Any  (str) *: {Optional  (str) shutdown: <class 'bool'>, Optional  (str) update_source: <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) password: <class 'bool'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_limit: <class 'int'>, Optional  (str) disable_connectivity_check: <class 'bool'>, Optional  (str) suppress_capabilities: <class 'bool'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive: <class 'int'>, Optional  (str) remote_as: <class 'bool'>, Optional  (str) local_as: <class 'bool'>, Optional  (str) bfd: <class 'bool'>, Optional  (str) inherited_vrf_default: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPeerTemplate": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp peer-template <peer_template>\n       Executing 'show running-config bgp | inc peer' to colllect\n       configured peer-template names.\n    ",
      "groups": [
        "bgp"
      ],
      "schema": "{'peer_template': {Any  (str) *: {Optional  (str) remote_as: <class 'int'>, Optional  (str) inherit_template: <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) bfd_live_detection: <class 'bool'>, Optional  (str) num_hops_bgp_peer: <class 'int'>, Optional  (str) tcp_md5_auth: <class 'str'>, Optional  (str) nbr_transport_connection_mode: <class 'str'>, Optional  (str) nbr_local_as_cmd: <class 'str'>, Optional  (str) private_as_updates: <class 'bool'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPeerTemplateCmd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp peer-template\n    parser class implements detail parsing mechanisms for cli,xml output.",
      "groups": [],
      "schema": "{'template': {Any  (str) *: {Optional  (str) source_interface: <class 'str'>, Optional  (str) low_mem_exempt: <class 'bool'>, Optional  (str) logging_neighbor_events: <class 'bool'>, Optional  (str) external_bgp_peer_hops_limit: <class 'int'>, Optional  (str) passive_only: <class 'bool'>, Optional  (str) local_as_inactive: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) vrf: {Any  (str) *: {'inheriting_peer': {Any  (str) *: {'inheriting_peer': <class 'str'>}}}}, 'address_family': {Any  (str) *: {Optional  (str) condition_map: <class 'str'>, Optional  (str) advertise_map: <class 'str'>, Optional  (str) advertise_map_status: <class 'str'>, Optional  (str) in_soft_reconfig_allowed: <class 'bool'>, Optional  (str) send_community: <class 'bool'>, Optional  (str) send_ext_community: <class 'bool'>, Optional  (str) local_nexthop: <class 'str'>, Optional  (str) third_party_nexthop: <class 'bool'>, Optional  (str) max_pfx: <class 'int'>, Optional  (str) soo: <class 'str'>, Optional  (str) weight: <class 'int'>, Optional  (str) allow_as_in: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) peer_as_check_disabled: <class 'bool'>, Optional  (str) rr_configured: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) unsuppress_map: <class 'str'>, Optional  (str) in_policy: {Any  (str) *: {'type': <class 'str'>, 'name': <class 'str'>}}, Optional  (str) out_policy: {Any  (str) *: {'type': <class 'str'>, 'name': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPeerTemplateCmd_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp peer-template\n    parser class implements detail parsing mechanisms for cli,xml output.",
      "groups": [],
      "schema": "{'template': {Any  (str) *: {Optional  (str) source_interface: <class 'str'>, Optional  (str) low_mem_exempt: <class 'bool'>, Optional  (str) logging_neighbor_events: <class 'bool'>, Optional  (str) external_bgp_peer_hops_limit: <class 'int'>, Optional  (str) passive_only: <class 'bool'>, Optional  (str) local_as_inactive: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) vrf: {Any  (str) *: {'inheriting_peer': {Any  (str) *: {'inheriting_peer': <class 'str'>}}}}, 'address_family': {Any  (str) *: {Optional  (str) condition_map: <class 'str'>, Optional  (str) advertise_map: <class 'str'>, Optional  (str) advertise_map_status: <class 'str'>, Optional  (str) in_soft_reconfig_allowed: <class 'bool'>, Optional  (str) send_community: <class 'bool'>, Optional  (str) send_ext_community: <class 'bool'>, Optional  (str) local_nexthop: <class 'str'>, Optional  (str) third_party_nexthop: <class 'bool'>, Optional  (str) max_pfx: <class 'int'>, Optional  (str) soo: <class 'str'>, Optional  (str) weight: <class 'int'>, Optional  (str) allow_as_in: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) peer_as_check_disabled: <class 'bool'>, Optional  (str) rr_configured: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) unsuppress_map: <class 'str'>, Optional  (str) in_policy: {Any  (str) *: {'type': <class 'str'>, 'name': <class 'str'>}}, Optional  (str) out_policy: {Any  (str) *: {'type': <class 'str'>, 'name': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 multicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 unicast",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv4_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv4_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv4 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv6_multicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 multicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv6_unicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output",
      "exclude": [],
      "groups": [],
      "parameters": {
        "address_family": "ipv6 unicast"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) rpm_handle_count: <class 'int'>, Optional  (str) route_map: {Any  (str) *: {Any  (str) *: {'action': <class 'str'>, 'seq_num': <class 'int'>, 'total_accept_count': <class 'int'>, 'total_reject_count': <class 'int'>, Optional  (str) command: {'compare_count': <class 'int'>, 'match_count': <class 'int'>, 'command': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpProcessVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp process vrf all\n        show bgp process vrf <vrf>\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{Optional  (str) bgp_pid: <class 'int'>, Optional  (str) bgp_protocol_started_reason: <class 'str'>, Optional  (str) bgp_performance_mode: <class 'str'>, Optional  (str) bgp_tag: <class 'str'>, Optional  (str) bgp_protocol_state: <class 'str'>, Optional  (str) bgp_isolate_mode: <class 'str'>, Optional  (str) bgp_mmode: <class 'str'>, Optional  (str) bgp_memory_state: <class 'str'>, Optional  (str) bgp_asformat: <class 'str'>, Optional  (str) segment_routing_global_block: <class 'str'>, Optional  (str) num_attr_entries: <class 'int'>, Optional  (str) hwm_attr_entries: <class 'int'>, Optional  (str) bytes_used: <class 'int'>, Optional  (str) entries_pending_delete: <class 'int'>, Optional  (str) hwm_entries_pending_delete: <class 'int'>, Optional  (str) bgp_paths_per_hwm_attr: <class 'int'>, Optional  (str) bgp_as_path_entries: <class 'int'>, Optional  (str) bytes_used_as_path_entries: <class 'int'>, Optional  (str) vrf: {Any  (str) *: {'vrf_id': <class 'str'>, 'vrf_state': <class 'str'>, Optional  (str) vnid: <class 'str'>, Optional  (str) topo_id: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) vtep_virtual_ip: <class 'str'>, Optional  (str) vtep_vip_r: <class 'str'>, Optional  (str) router_mac: <class 'str'>, Optional  (str) vip_derived_mac: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) conf_router_id: <class 'str'>, Optional  (str) confed_id: <class 'int'>, Optional  (str) cluster_id: <class 'str'>, 'num_conf_peers': <class 'int'>, 'num_pending_conf_peers': <class 'int'>, 'num_established_peers': <class 'int'>, Optional  (str) vrf_rd: <class 'str'>, Optional  (str) vrf_evpn_rd: <class 'str'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) peers: {Any  (str) *: {'active_peers': <class 'int'>, 'routes': <class 'int'>, 'paths': <class 'int'>, 'networks': <class 'int'>, 'aggregates': <class 'int'>}}, Optional  (str) redistribution: {Any  (str) *: {Optional  (str) route_map: <class 'str'>}}, Optional  (str) export_rt_list: <class 'str'>, Optional  (str) import_rt_list: <class 'str'>, Optional  (str) evpn_export_rt_list: <class 'str'>, Optional  (str) evpn_import_rt_list: <class 'str'>, Optional  (str) mvpn_export_rt_list: <class 'str'>, Optional  (str) mvpn_import_rt_list: <class 'str'>, Optional  (str) label_mode: <class 'str'>, Optional  (str) aggregate_label: <class 'str'>, Optional  (str) allocate_index: <class 'str'>, Optional  (str) route_reflector: <class 'bool'>, Optional  (str) next_hop_trigger_delay: {'critical': <class 'int'>, 'non_critical': <class 'int'>}, Optional  (str) import_default_map: <class 'str'>, Optional  (str) import_default_prefix_limit: <class 'int'>, Optional  (str) import_default_prefix_count: <class 'int'>, Optional  (str) export_default_map: <class 'str'>, Optional  (str) export_default_prefix_limit: <class 'int'>, Optional  (str) export_default_prefix_count: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpProcessVrfAll_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp process vrf all\n        show bgp process vrf <vrf>\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) bgp_pid: <class 'int'>, Optional  (str) bgp_protocol_started_reason: <class 'str'>, Optional  (str) bgp_performance_mode: <class 'str'>, Optional  (str) bgp_tag: <class 'str'>, Optional  (str) bgp_protocol_state: <class 'str'>, Optional  (str) bgp_isolate_mode: <class 'str'>, Optional  (str) bgp_mmode: <class 'str'>, Optional  (str) bgp_memory_state: <class 'str'>, Optional  (str) bgp_asformat: <class 'str'>, Optional  (str) segment_routing_global_block: <class 'str'>, Optional  (str) num_attr_entries: <class 'int'>, Optional  (str) hwm_attr_entries: <class 'int'>, Optional  (str) bytes_used: <class 'int'>, Optional  (str) entries_pending_delete: <class 'int'>, Optional  (str) hwm_entries_pending_delete: <class 'int'>, Optional  (str) bgp_paths_per_hwm_attr: <class 'int'>, Optional  (str) bgp_as_path_entries: <class 'int'>, Optional  (str) bytes_used_as_path_entries: <class 'int'>, Optional  (str) vrf: {Any  (str) *: {'vrf_id': <class 'str'>, 'vrf_state': <class 'str'>, Optional  (str) vnid: <class 'str'>, Optional  (str) topo_id: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) vtep_virtual_ip: <class 'str'>, Optional  (str) vtep_vip_r: <class 'str'>, Optional  (str) router_mac: <class 'str'>, Optional  (str) vip_derived_mac: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) conf_router_id: <class 'str'>, Optional  (str) confed_id: <class 'int'>, Optional  (str) cluster_id: <class 'str'>, 'num_conf_peers': <class 'int'>, 'num_pending_conf_peers': <class 'int'>, 'num_established_peers': <class 'int'>, Optional  (str) vrf_rd: <class 'str'>, Optional  (str) vrf_evpn_rd: <class 'str'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) peers: {Any  (str) *: {'active_peers': <class 'int'>, 'routes': <class 'int'>, 'paths': <class 'int'>, 'networks': <class 'int'>, 'aggregates': <class 'int'>}}, Optional  (str) redistribution: {Any  (str) *: {Optional  (str) route_map: <class 'str'>}}, Optional  (str) export_rt_list: <class 'str'>, Optional  (str) import_rt_list: <class 'str'>, Optional  (str) evpn_export_rt_list: <class 'str'>, Optional  (str) evpn_import_rt_list: <class 'str'>, Optional  (str) mvpn_export_rt_list: <class 'str'>, Optional  (str) mvpn_import_rt_list: <class 'str'>, Optional  (str) label_mode: <class 'str'>, Optional  (str) aggregate_label: <class 'str'>, Optional  (str) allocate_index: <class 'str'>, Optional  (str) route_reflector: <class 'bool'>, Optional  (str) next_hop_trigger_delay: {'critical': <class 'int'>, 'non_critical': <class 'int'>}, Optional  (str) import_default_map: <class 'str'>, Optional  (str) import_default_prefix_limit: <class 'int'>, Optional  (str) import_default_prefix_count: <class 'int'>, Optional  (str) export_default_map: <class 'str'>, Optional  (str) export_default_prefix_limit: <class 'int'>, Optional  (str) export_default_prefix_count: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpProcessVrfAll_yang": {
    "nxos": {
      "doc": "Parser for:\n        show bgp process vrf all\n        show bgp process vrf <vrf>\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) bgp_pid: <class 'int'>, Optional  (str) bgp_protocol_started_reason: <class 'str'>, Optional  (str) bgp_performance_mode: <class 'str'>, Optional  (str) bgp_tag: <class 'str'>, Optional  (str) bgp_protocol_state: <class 'str'>, Optional  (str) bgp_isolate_mode: <class 'str'>, Optional  (str) bgp_mmode: <class 'str'>, Optional  (str) bgp_memory_state: <class 'str'>, Optional  (str) bgp_asformat: <class 'str'>, Optional  (str) segment_routing_global_block: <class 'str'>, Optional  (str) num_attr_entries: <class 'int'>, Optional  (str) hwm_attr_entries: <class 'int'>, Optional  (str) bytes_used: <class 'int'>, Optional  (str) entries_pending_delete: <class 'int'>, Optional  (str) hwm_entries_pending_delete: <class 'int'>, Optional  (str) bgp_paths_per_hwm_attr: <class 'int'>, Optional  (str) bgp_as_path_entries: <class 'int'>, Optional  (str) bytes_used_as_path_entries: <class 'int'>, Optional  (str) vrf: {Any  (str) *: {'vrf_id': <class 'str'>, 'vrf_state': <class 'str'>, Optional  (str) vnid: <class 'str'>, Optional  (str) topo_id: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) vtep_virtual_ip: <class 'str'>, Optional  (str) vtep_vip_r: <class 'str'>, Optional  (str) router_mac: <class 'str'>, Optional  (str) vip_derived_mac: <class 'str'>, Optional  (str) router_id: <class 'str'>, Optional  (str) conf_router_id: <class 'str'>, Optional  (str) confed_id: <class 'int'>, Optional  (str) cluster_id: <class 'str'>, 'num_conf_peers': <class 'int'>, 'num_pending_conf_peers': <class 'int'>, 'num_established_peers': <class 'int'>, Optional  (str) vrf_rd: <class 'str'>, Optional  (str) vrf_evpn_rd: <class 'str'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) table_state: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) advertise_inactive_routes: <class 'bool'>, Optional  (str) ebgp_max_paths: <class 'int'>, Optional  (str) ibgp_max_paths: <class 'int'>, Optional  (str) total_paths: <class 'int'>, Optional  (str) total_prefixes: <class 'int'>, Optional  (str) peers: {Any  (str) *: {'active_peers': <class 'int'>, 'routes': <class 'int'>, 'paths': <class 'int'>, 'networks': <class 'int'>, 'aggregates': <class 'int'>}}, Optional  (str) redistribution: {Any  (str) *: {Optional  (str) route_map: <class 'str'>}}, Optional  (str) export_rt_list: <class 'str'>, Optional  (str) import_rt_list: <class 'str'>, Optional  (str) evpn_export_rt_list: <class 'str'>, Optional  (str) evpn_import_rt_list: <class 'str'>, Optional  (str) mvpn_export_rt_list: <class 'str'>, Optional  (str) mvpn_import_rt_list: <class 'str'>, Optional  (str) label_mode: <class 'str'>, Optional  (str) aggregate_label: <class 'str'>, Optional  (str) allocate_index: <class 'str'>, Optional  (str) route_reflector: <class 'bool'>, Optional  (str) next_hop_trigger_delay: {'critical': <class 'int'>, 'non_critical': <class 'int'>}, Optional  (str) import_default_map: <class 'str'>, Optional  (str) import_default_prefix_limit: <class 'int'>, Optional  (str) import_default_prefix_count: <class 'int'>, Optional  (str) export_default_map: <class 'str'>, Optional  (str) export_default_prefix_limit: <class 'int'>, Optional  (str) export_default_prefix_count: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp vrf <vrf>> <address_family>",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 10,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'bgp_table_version': <class 'int'>, 'local_router_id': <class 'str'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) default_vrf: <class 'str'>, Optional  (str) aggregate_address_ipv4_address: <class 'str'>, Optional  (str) aggregate_address_ipv4_mask: <class 'str'>, Optional  (str) aggregate_address_as_set: <class 'bool'>, Optional  (str) aggregate_address_summary_only: <class 'bool'>, Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>, Optional  (str) v6_aggregate_address_as_set: <class 'bool'>, Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>, Optional  (str) prefixes: {Any  (str) *: {'index': {Any  (str) *: {'next_hop': <class 'str'>, Optional  (str) status_codes: <class 'str'>, Optional  (str) path_type: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) localprf: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) path: <class 'str'>, Optional  (str) origin_codes: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAllDampeningParameters": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for 'show bgp vrf <WROD> all dampening parameters",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) dampening: <class 'str'>, Optional  (str) dampening_route_map: <class 'str'>, Optional  (str) dampening_half_life_time: <class 'str'>, Optional  (str) dampening_reuse_time: <class 'str'>, Optional  (str) dampening_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_penalty: <class 'str'>, Optional  (str) route_distinguisher: {Optional  (Any) Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, Optional  (str) rd_vni_id: <class 'str'>, Optional  (str) dampening_route_map: <class 'str'>, Optional  (str) dampening_half_life_time: <class 'str'>, Optional  (str) dampening_reuse_time: <class 'str'>, Optional  (str) dampening_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_penalty: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAllDampeningParameters_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for 'show bgp vrf <WROD> all dampening parameters",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) dampening: <class 'str'>, Optional  (str) dampening_route_map: <class 'str'>, Optional  (str) dampening_half_life_time: <class 'str'>, Optional  (str) dampening_reuse_time: <class 'str'>, Optional  (str) dampening_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_penalty: <class 'str'>, Optional  (str) route_distinguisher: {Optional  (Any) Any  (str) *: {Optional  (str) rd_vrf: <class 'str'>, Optional  (str) rd_vni_id: <class 'str'>, Optional  (str) dampening_route_map: <class 'str'>, Optional  (str) dampening_half_life_time: <class 'str'>, Optional  (str) dampening_reuse_time: <class 'str'>, Optional  (str) dampening_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_time: <class 'str'>, Optional  (str) dampening_max_suppress_penalty: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAllNextHopDatabase": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp vrf all all nexthop-database",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 6,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'af_nexthop_trigger_enable': <class 'bool'>, 'nexthop_trigger_delay_critical': <class 'int'>, 'nexthop_trigger_delay_non_critical': <class 'int'>, Optional  (str) next_hop: {Any  (str) *: {Optional  (str) refcount: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) multipath: <class 'str'>, Optional  (str) igp_cost: <class 'int'>, Optional  (str) igp_route_type: <class 'int'>, Optional  (str) igp_preference: <class 'int'>, Optional  (str) attached: <class 'bool'>, Optional  (str) local: <class 'bool'>, Optional  (str) reachable: <class 'bool'>, Optional  (str) labeled: <class 'bool'>, Optional  (str) filtered: <class 'bool'>, Optional  (str) pending_update: <class 'bool'>, Optional  (str) resolve_time: <class 'str'>, Optional  (str) rib_route: <class 'str'>, Optional  (str) metric_next_advertise: <class 'str'>, Optional  (str) rnh_epoch: <class 'int'>, Optional  (str) attached_nexthop: {Any  (str) *: {'attached_nexthop_interface': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAllSummary": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp vrf <WORD> all summary",
      "exclude": [],
      "groups": [
        "bgp",
        "evpn",
        "native",
        "trm"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) neighbor: {Any  (str) *: {'address_family': {Any  (str) *: {'neighbor_table_version': <class 'int'>, 'as': <class 'int'>, 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'tbl_ver': <class 'int'>, 'inq': <class 'int'>, 'outq': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, 'state': <class 'str'>, Optional  (str) prefix_received: <class 'str'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) local_as: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) config_peers: <class 'int'>, Optional  (str) capable_peers: <class 'int'>, Optional  (str) prefixes: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) path: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) attribute_entries: <class 'str'>, Optional  (str) as_path_entries: <class 'str'>, Optional  (str) community_entries: <class 'str'>, Optional  (str) clusterlist_entries: <class 'str'>, Optional  (str) dampening: <class 'bool'>, Optional  (str) history_paths: <class 'int'>, Optional  (str) dampened_paths: <class 'int'>, Optional  (str) soft_reconfig_recvd_paths: <class 'int'>, Optional  (str) soft_reconfig_identical_paths: <class 'int'>, Optional  (str) soft_reconfig_combo_paths: <class 'int'>, Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>, Optional  (str) soft_reconfig_bytes: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllAllSummary_xml": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bgp vrf <WORD> all summary",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) neighbor: {Any  (str) *: {'address_family': {Any  (str) *: {'neighbor_table_version': <class 'int'>, 'as': <class 'int'>, 'msg_rcvd': <class 'int'>, 'msg_sent': <class 'int'>, 'tbl_ver': <class 'int'>, 'inq': <class 'int'>, 'outq': <class 'int'>, 'up_down': <class 'str'>, 'state_pfxrcd': <class 'str'>, 'state': <class 'str'>, Optional  (str) prefix_received: <class 'str'>, Optional  (str) route_identifier: <class 'str'>, Optional  (str) local_as: <class 'int'>, Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) config_peers: <class 'int'>, Optional  (str) capable_peers: <class 'int'>, Optional  (str) prefixes: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) path: {'total_entries': <class 'int'>, 'memory_usage': <class 'int'>}, Optional  (str) attribute_entries: <class 'str'>, Optional  (str) as_path_entries: <class 'str'>, Optional  (str) community_entries: <class 'str'>, Optional  (str) clusterlist_entries: <class 'str'>, Optional  (str) dampening: <class 'bool'>, Optional  (str) history_paths: <class 'int'>, Optional  (str) dampened_paths: <class 'int'>, Optional  (str) soft_reconfig_recvd_paths: <class 'int'>, Optional  (str) soft_reconfig_identical_paths: <class 'int'>, Optional  (str) soft_reconfig_combo_paths: <class 'int'>, Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>, Optional  (str) soft_reconfig_bytes: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllNeighbors_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'neighbor': {Any  (str) *: {'remote_as': <class 'int'>, Optional  (str) local_as: <class 'str'>, Optional  (str) peer_fab_type: <class 'str'>, Optional  (str) link: <class 'str'>, Optional  (str) peer_index: <class 'int'>, Optional  (str) description: <class 'str'>, Optional  (str) bgp_version: <class 'int'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) state_reason: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) up_time: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) retry_time: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) bfd_live_detection: <class 'bool'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) nbr_local_as_cmd: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) last_read: <class 'str'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) hold_time: <class 'int'>, Optional  (str) last_written: <class 'str'>, Optional  (str) keepalive_timer: <class 'str'>}, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) inherit_peer_session: <class 'str'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) tcp_md5_auth: <class 'str'>, Optional  (str) tcp_md5_auth_config: <class 'str'>, Optional  (str) received_messages: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) received_bytes_queue: <class 'int'>, Optional  (str) sent_messages: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) sent_bytes_queue: <class 'int'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) nbr_ebgp_multihop: <class 'bool'>, Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) send_community: <class 'str'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) reset_by: <class 'str'>, Optional  (str) attempts: <class 'int'>, Optional  (str) established: <class 'int'>, Optional  (str) dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_port: <class 'str'>, Optional  (str) local_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) fd: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) bgp_negotiated_capabilities: {Optional  (str) route_refresh: <class 'str'>, Optional  (str) route_refresh_old: <class 'str'>, Optional  (str) vpnv4_unicast: <class 'str'>, Optional  (str) vpnv6_unicast: <class 'str'>, Optional  (str) ipv4_mvpn: <class 'str'>, Optional  (str) graceful_restart: <class 'str'>, Optional  (str) enhanced_refresh: <class 'str'>, Optional  (str) multisession: <class 'str'>, Optional  (str) stateful_switchover: <class 'str'>, Optional  (str) dynamic_capability: <class 'str'>, Optional  (str) dynamic_capability_old: <class 'str'>}, Optional  (str) graceful_restart_paramters: {Optional  (str) address_families_advertised_to_peer: <class 'str'>, Optional  (str) address_families_advertised_from_peer: <class 'str'>, Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>, Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>, Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) session_state: <class 'str'>, Optional  (str) state_reason: <class 'str'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soo: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) third_party_nexthop: <class 'bool'>, Optional  (str) as_override_count: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) path: {Optional  (str) total_entries: <class 'int'>, Optional  (str) memory_usage: <class 'int'>, Optional  (str) accepted_paths: <class 'int'>}, Optional  (str) inherit_peer_policy: {Any  (str) *: {Optional  (str) inherit_peer_seq: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfAllNeighbors_yang_vrf_default": {
    "nxos": {
      "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ",
      "exclude": [],
      "groups": [],
      "schema": "{'neighbor': {Any  (str) *: {'remote_as': <class 'int'>, Optional  (str) local_as: <class 'str'>, Optional  (str) peer_fab_type: <class 'str'>, Optional  (str) link: <class 'str'>, Optional  (str) peer_index: <class 'int'>, Optional  (str) description: <class 'str'>, Optional  (str) bgp_version: <class 'int'>, Optional  (str) router_id: <class 'str'>, Optional  (str) session_state: <class 'str'>, Optional  (str) state_reason: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) up_time: <class 'str'>, Optional  (str) peer_group: <class 'str'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) retry_time: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) bfd_live_detection: <class 'bool'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) nbr_local_as_cmd: <class 'str'>, Optional  (str) last_read: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) bgp_negotiated_keepalive_timers: {Optional  (str) last_read: <class 'str'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) hold_time: <class 'int'>, Optional  (str) last_written: <class 'str'>, Optional  (str) keepalive_timer: <class 'str'>}, Optional  (str) minimum_advertisement_interval: <class 'int'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) inherit_peer_session: <class 'str'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) ebgp_multihop: <class 'bool'>, Optional  (str) tcp_md5_auth: <class 'str'>, Optional  (str) tcp_md5_auth_config: <class 'str'>, Optional  (str) received_messages: <class 'int'>, Optional  (str) received_notifications: <class 'int'>, Optional  (str) received_bytes_queue: <class 'int'>, Optional  (str) sent_messages: <class 'int'>, Optional  (str) sent_notifications: <class 'int'>, Optional  (str) sent_bytes_queue: <class 'int'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) remove_private_as: <class 'bool'>, Optional  (str) nbr_ebgp_multihop: <class 'bool'>, Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) route_reflector_cluster_id: <class 'int'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper_only: <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, Optional  (str) allow_own_as: <class 'int'>, Optional  (str) send_community: <class 'str'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) bgp_session_transport: {Optional  (str) connection: {Optional  (str) mode: <class 'str'>, Optional  (str) last_reset: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) reset_by: <class 'str'>, Optional  (str) attempts: <class 'int'>, Optional  (str) established: <class 'int'>, Optional  (str) dropped: <class 'int'>}, Optional  (str) transport: {Optional  (str) local_port: <class 'str'>, Optional  (str) local_host: <class 'str'>, Optional  (str) foreign_port: <class 'str'>, Optional  (str) foreign_host: <class 'str'>, Optional  (str) fd: <class 'str'>, Optional  (str) passive_mode: <class 'str'>}}, Optional  (str) bgp_neighbor_counters: {Optional  (str) messages: {Optional  (str) sent: {Any  (str) *: <class 'int'>}, Optional  (str) received: {Any  (str) *: <class 'int'>}}}, Optional  (str) bgp_negotiated_capabilities: {Optional  (str) route_refresh: <class 'str'>, Optional  (str) route_refresh_old: <class 'str'>, Optional  (str) vpnv4_unicast: <class 'str'>, Optional  (str) vpnv6_unicast: <class 'str'>, Optional  (str) ipv4_mvpn: <class 'str'>, Optional  (str) graceful_restart: <class 'str'>, Optional  (str) enhanced_refresh: <class 'str'>, Optional  (str) multisession: <class 'str'>, Optional  (str) stateful_switchover: <class 'str'>, Optional  (str) dynamic_capability: <class 'str'>, Optional  (str) dynamic_capability_old: <class 'str'>}, Optional  (str) graceful_restart_paramters: {Optional  (str) address_families_advertised_to_peer: <class 'str'>, Optional  (str) address_families_advertised_from_peer: <class 'str'>, Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>, Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>, Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) bgp_table_version: <class 'int'>, Optional  (str) session_state: <class 'str'>, Optional  (str) state_reason: <class 'str'>, Optional  (str) neighbor_version: <class 'int'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soo: <class 'str'>, Optional  (str) soft_configuration: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) third_party_nexthop: <class 'bool'>, Optional  (str) as_override_count: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>, Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>, Optional  (str) path: {Optional  (str) total_entries: <class 'int'>, Optional  (str) memory_usage: <class 'int'>, Optional  (str) accepted_paths: <class 'int'>}, Optional  (str) inherit_peer_policy: {Any  (str) *: {Optional  (str) inherit_peer_seq: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_BgpVrfDbVrfAll": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show bgp vrf-db vrf all'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'id': <class 'str'>, 'rd': <class 'str'>, 'ref': <class 'int'>, 'afs': <class 'list'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_Boot": {
    "ios": {
      "doc": "Parser for show boot",
      "groups": [],
      "schema": "{Optional  (str) current_boot_variable: <class 'str'>, Optional  (str) next_reload_boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>, Optional  (str) enable_break: <class 'bool'>, Optional  (str) boot_mode: <class 'str'>, Optional  (str) ipxe_timeout: <class 'int'>, Optional  (str) active: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) standby: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) boot_path_list: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) private_config_file: <class 'str'>, Optional  (str) enable_break: <class 'bool'>, Optional  (str) manual_boot: <class 'bool'>, Optional  (str) helper_path_list: <class 'str'>, Optional  (str) auto_upgrade: <class 'bool'>, Optional  (str) auto_upgrade_path: <class 'str'>, Optional  (str) boot_optimization: <class 'bool'>, Optional  (str) nvram_buffer_size: <class 'int'>, Optional  (str) timeout_config_download: <class 'str'>, Optional  (str) config_download_via_dhcp: <class 'bool'>, Optional  (str) next_boot: <class 'bool'>, Optional  (str) allow_dev_key: <class 'bool'>, Optional  (str) switches: {Any  (str) *: {'boot_path_list': <class 'str'>, 'config_file': <class 'str'>, 'private_config_file': <class 'str'>, 'enable_break': <class 'bool'>, 'manual_boot': <class 'bool'>, Optional  (str) helper_path_list: <class 'str'>, 'auto_upgrade': <class 'bool'>, Optional  (str) auto_upgrade_path: <class 'str'>, Optional  (str) boot_optimization: <class 'bool'>, Optional  (str) nvram_buffer_size: <class 'int'>, Optional  (str) timeout_config_download: <class 'str'>, Optional  (str) config_download_via_dhcp: <class 'bool'>, Optional  (str) next_boot: <class 'bool'>, Optional  (str) allow_dev_key: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9400": {
        "doc": "Parser for show boot",
        "groups": [],
        "schema": "{'boot_variable': <class 'str'>, 'manual_boot': <class 'bool'>, 'baud_variable': <class 'str'>, 'enable_break': <class 'bool'>, 'boot_mode': <class 'str'>, 'ipxe_timeout': <class 'str'>, 'config_file': <class 'str'>, 'standby_boot_variable': <class 'str'>, 'standby_manual_boot': <class 'bool'>, 'standby_baud_variable': <class 'str'>, 'standby_enable_break': <class 'bool'>, 'standby_boot_mode': <class 'str'>, 'standby_ipxe_timeout': <class 'str'>, 'standby_config_file': <class 'str'>}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9400/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show boot",
      "groups": [],
      "schema": "{Optional  (str) current_boot_variable: <class 'str'>, Optional  (str) next_reload_boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>, Optional  (str) enable_break: <class 'bool'>, Optional  (str) boot_mode: <class 'str'>, Optional  (str) ipxe_timeout: <class 'int'>, Optional  (str) active: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) standby: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) boot_path_list: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) private_config_file: <class 'str'>, Optional  (str) enable_break: <class 'bool'>, Optional  (str) manual_boot: <class 'bool'>, Optional  (str) helper_path_list: <class 'str'>, Optional  (str) auto_upgrade: <class 'bool'>, Optional  (str) auto_upgrade_path: <class 'str'>, Optional  (str) boot_optimization: <class 'bool'>, Optional  (str) nvram_buffer_size: <class 'int'>, Optional  (str) timeout_config_download: <class 'str'>, Optional  (str) config_download_via_dhcp: <class 'bool'>, Optional  (str) next_boot: <class 'bool'>, Optional  (str) allow_dev_key: <class 'bool'>, Optional  (str) switches: {Any  (str) *: {'boot_path_list': <class 'str'>, 'config_file': <class 'str'>, 'private_config_file': <class 'str'>, 'enable_break': <class 'bool'>, 'manual_boot': <class 'bool'>, Optional  (str) helper_path_list: <class 'str'>, 'auto_upgrade': <class 'bool'>, Optional  (str) auto_upgrade_path: <class 'str'>, Optional  (str) boot_optimization: <class 'bool'>, Optional  (str) nvram_buffer_size: <class 'int'>, Optional  (str) timeout_config_download: <class 'str'>, Optional  (str) config_download_via_dhcp: <class 'bool'>, Optional  (str) next_boot: <class 'bool'>, Optional  (str) allow_dev_key: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show boot",
      "exclude": [],
      "groups": [],
      "schema": "{'current_boot_variable': {Optional  (str) sup_number: {Any  (str) *: {Optional  (str) kickstart_variable: <class 'str'>, Optional  (str) system_variable: <class 'str'>, Optional  (str) boot_poap: <class 'str'>}}, Optional  (str) kickstart_variable: <class 'str'>, Optional  (str) system_variable: <class 'str'>, Optional  (str) boot_poap: <class 'str'>}, 'next_reload_boot_variable': {Optional  (str) sup_number: {Any  (str) *: {Optional  (str) kickstart_variable: <class 'str'>, Optional  (str) system_variable: <class 'str'>, Optional  (str) boot_poap: <class 'str'>}}, Optional  (str) kickstart_variable: <class 'str'>, Optional  (str) system_variable: <class 'str'>, Optional  (str) boot_poap: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_Bootvar": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show bootvar",
      "groups": [
        "platform"
      ],
      "schema": "{Optional  (str) current_boot_variable: <class 'str'>, Optional  (str) next_reload_boot_variable: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, Optional  (str) active: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) next_reload_configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) standby: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) next_reload_configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) standby_manual_boot: <class 'bool'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "doc": "Parser for show bootvar",
      "groups": [],
      "schema": "{Optional  (str) current_boot_variable: <class 'str'>, Optional  (str) next_reload_boot_variable: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, Optional  (str) active: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) next_reload_configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) manual_boot: <class 'bool'>}, Optional  (str) standby: {Optional  (str) configuration_register: <class 'str'>, Optional  (str) next_reload_configuration_register: <class 'str'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) standby_manual_boot: <class 'bool'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_CheckpointSummary": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show checkpoint summary",
      "exclude": [],
      "groups": [],
      "schema": "{'checkpoint': {Any  (str) *: {'created_by': <class 'str'>, 'created_time': <class 'str'>, 'size': <class 'int'>, 'description': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_checkpoint.py"
    }
  },
  "Verify_ConfigurationSystemNtpSet": {
    "junos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for: show configuration system ntp | display set ",
      "groups": [
        "junos"
      ],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address': {Any  (str) *: {'type': {Any  (str) *: {'address': <class 'str'>, 'type': <class 'str'>, 'vrf': <class 'str'>}}, 'isconfigured': {Any  (str) *: {'address': <class 'str'>, 'isconfigured': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py"
    }
  },
  "Verify_ControllersFiaDiagshellL2showLocation": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        * show controller fia diagshell {diagshell_unit} 'l2 show' location {location}\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'nodes': {Any  (str) *: {'vlan': {Any  (str) *: {'mac': {Any  (str) *: {'encap_id': <class 'str'>, 'gport': <class 'str'>, Optional  (str) trunk: <class 'int'>, Optional  (str) static: <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py"
    }
  },
  "Verify_CryptoPkiCertificates": {
    "ios": {
      "doc": "Parser for show crypto pki certificates <WORD>",
      "groups": [],
      "schema": "{'trustpoints': {Any  (str) *: {'associated_trustpoints': {Any  (str) *: {'status': <class 'str'>, 'serial_number_in_hex': <class 'str'>, 'usage': <class 'str'>, Optional  (str) storage: <class 'str'>, 'issuer': {Optional  (str) cn: <class 'str'>, Optional  (str) o: <class 'str'>}, 'subject': {Optional  (str) name: <class 'str'>, Optional  (str) serial_number: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) cn: <class 'str'>, Optional  (str) o: <class 'str'>}, Optional  (str) crl_distribution_points: <class 'str'>, 'validity_date': {'start_date': <class 'str'>, 'end_date': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_crypto.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show crypto pki certificates <WORD>",
      "exclude": [],
      "groups": [],
      "schema": "{'trustpoints': {Any  (str) *: {'associated_trustpoints': {Any  (str) *: {'status': <class 'str'>, 'serial_number_in_hex': <class 'str'>, 'usage': <class 'str'>, Optional  (str) storage: <class 'str'>, 'issuer': {Optional  (str) cn: <class 'str'>, Optional  (str) o: <class 'str'>}, 'subject': {Optional  (str) name: <class 'str'>, Optional  (str) serial_number: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) cn: <class 'str'>, Optional  (str) o: <class 'str'>}, Optional  (str) crl_distribution_points: <class 'str'>, 'validity_date': {'start_date': <class 'str'>, 'end_date': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_crypto.py"
    }
  },
  "Verify_Dir": {
    "ios": {
      "c7600": {
        "doc": "\n    parser for command: dir\n    ",
        "groups": [],
        "schema": "{'dir': {'dir': <class 'str'>, Any  (str) *: {'files': {Any  (str) *: {Optional  (str) index: <class 'str'>, Optional  (str) permissions: <class 'str'>, 'size': <class 'str'>, Optional  (str) last_modified_date: <class 'str'>}}, Optional  (str) bytes_total: <class 'str'>, Optional  (str) bytes_free: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py"
      },
      "cat6k": {
        "doc": "\n    Parser for command:\n        * dir\n    ",
        "groups": [],
        "schema": "{'dir': {'dir': <class 'str'>, Any  (str) *: {'files': {Any  (str) *: {Optional  (str) index: <class 'str'>, Optional  (str) permissions: <class 'str'>, 'size': <class 'str'>, Optional  (str) last_modified_date: <class 'str'>}}, Optional  (str) bytes_total: <class 'str'>, Optional  (str) bytes_free: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for dir\n    ",
      "exclude": [],
      "groups": [
        "platform"
      ],
      "schema": "{'dir': {'dir': <class 'str'>, Any  (str) *: {Optional  (str) files: {Any  (str) *: {Optional  (str) index: <class 'str'>, Optional  (str) permissions: <class 'str'>, 'size': <class 'str'>, Optional  (str) last_modified_date: <class 'str'>}}, Optional  (str) bytes_total: <class 'str'>, Optional  (str) bytes_free: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for dir\n    parser class - implements detail parsing mechanisms for cli output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'dir': {'dir': <class 'str'>, Any  (str) *: {Optional  (str) files: {Any  (str) *: {Optional  (str) index: <class 'str'>, Optional  (str) permissions: <class 'str'>, 'size': <class 'str'>, Optional  (str) last_modified_date: <class 'str'>}}, Optional  (str) bytes_total: <class 'str'>, Optional  (str) bytes_free: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for\n        * dir\n        * dir {directory}\n        * dir location {location}\n        * dir {directory} location {location}\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'dir': {'dir_name': <class 'str'>, 'total_bytes': <class 'str'>, 'total_free_bytes': <class 'str'>, Optional  (str) location: <class 'str'>, Optional  (str) files: {Any  (str) *: {Optional  (str) size: <class 'str'>, Optional  (str) date: <class 'str'>, Optional  (str) permission: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) time: <class 'str'>, Optional  (str) date: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for dir",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'disk_used_space': <class 'str'>, 'disk_free_space': <class 'str'>, 'disk_total_space': <class 'str'>, 'dir': <class 'str'>, Optional  (str) files: {Any  (str) *: {'size': <class 'str'>, 'date': <class 'str'>, 'time': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_Dot1x": {
    "ios": {
      "doc": "Parser for show dot1x",
      "groups": [],
      "schema": "{Optional  (str) system_auth_control: <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'pae': <class 'str'>, 'interface': <class 'str'>, Optional  (str) credentials: <class 'str'>, Optional  (str) port_control: <class 'str'>, Optional  (str) control_direction: <class 'str'>, Optional  (str) host_mode: <class 'str'>, Optional  (str) re_authentication: <class 'bool'>, Optional  (str) max_reauth_req: <class 'int'>, Optional  (str) max_req: <class 'int'>, Optional  (str) max_start: <class 'int'>, Optional  (str) timeout: {Optional  (str) server_timeout: <class 'int'>, Optional  (str) supp_timeout: <class 'int'>, Optional  (str) quiet_period: <class 'int'>, Optional  (str) tx_period: <class 'int'>, Optional  (str) auth_period: <class 'int'>, Optional  (str) held_period: <class 'int'>, Optional  (str) ratelimit_period: <class 'int'>, Optional  (str) start_period: <class 'int'>, Optional  (str) re_auth_period: <class 'int'>}, Optional  (str) authenticator: {'eap': {'profile': <class 'str'>}}, Optional  (str) supplicant: {'eap': {'profile': <class 'str'>}}, Optional  (str) clients: {Any  (str) *: {'client': <class 'str'>, 'eap_method': <class 'str'>, Optional  (str) session: {Any  (str) *: {'session_id': <class 'str'>, 'auth_sm_state': <class 'str'>, 'auth_bend_sm_state': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show dot1x",
      "groups": [],
      "schema": "{Optional  (str) system_auth_control: <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'pae': <class 'str'>, 'interface': <class 'str'>, Optional  (str) credentials: <class 'str'>, Optional  (str) port_control: <class 'str'>, Optional  (str) control_direction: <class 'str'>, Optional  (str) host_mode: <class 'str'>, Optional  (str) re_authentication: <class 'bool'>, Optional  (str) max_reauth_req: <class 'int'>, Optional  (str) max_req: <class 'int'>, Optional  (str) max_start: <class 'int'>, Optional  (str) timeout: {Optional  (str) server_timeout: <class 'int'>, Optional  (str) supp_timeout: <class 'int'>, Optional  (str) quiet_period: <class 'int'>, Optional  (str) tx_period: <class 'int'>, Optional  (str) auth_period: <class 'int'>, Optional  (str) held_period: <class 'int'>, Optional  (str) ratelimit_period: <class 'int'>, Optional  (str) start_period: <class 'int'>, Optional  (str) re_auth_period: <class 'int'>}, Optional  (str) authenticator: {'eap': {'profile': <class 'str'>}}, Optional  (str) supplicant: {'eap': {'profile': <class 'str'>}}, Optional  (str) clients: {Any  (str) *: {'client': <class 'str'>, 'eap_method': <class 'str'>, Optional  (str) session: {Any  (str) *: {'session_id': <class 'str'>, 'auth_sm_state': <class 'str'>, 'auth_bend_sm_state': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py"
    }
  },
  "Verify_Dot1xAllCount": {
    "ios": {
      "doc": "Parser for show dot1x all count",
      "groups": [],
      "schema": "{'sessions': {'authorized_clients': <class 'int'>, 'unauthorized_clients': <class 'int'>, 'total': <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show dot1x all count",
      "groups": [],
      "schema": "{'sessions': {'authorized_clients': <class 'int'>, 'unauthorized_clients': <class 'int'>, 'total': <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py"
    }
  },
  "Verify_Dot1xAllDetail": {
    "ios": {
      "doc": "Parser for show dot1x all details",
      "groups": [],
      "schema": "{Optional  (str) system_auth_control: <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'pae': <class 'str'>, 'interface': <class 'str'>, Optional  (str) credentials: <class 'str'>, Optional  (str) port_control: <class 'str'>, Optional  (str) control_direction: <class 'str'>, Optional  (str) host_mode: <class 'str'>, Optional  (str) re_authentication: <class 'bool'>, Optional  (str) max_reauth_req: <class 'int'>, Optional  (str) max_req: <class 'int'>, Optional  (str) max_start: <class 'int'>, Optional  (str) timeout: {Optional  (str) server_timeout: <class 'int'>, Optional  (str) supp_timeout: <class 'int'>, Optional  (str) quiet_period: <class 'int'>, Optional  (str) tx_period: <class 'int'>, Optional  (str) auth_period: <class 'int'>, Optional  (str) held_period: <class 'int'>, Optional  (str) ratelimit_period: <class 'int'>, Optional  (str) start_period: <class 'int'>, Optional  (str) re_auth_period: <class 'int'>}, Optional  (str) authenticator: {'eap': {'profile': <class 'str'>}}, Optional  (str) supplicant: {'eap': {'profile': <class 'str'>}}, Optional  (str) clients: {Any  (str) *: {'client': <class 'str'>, 'eap_method': <class 'str'>, Optional  (str) session: {Any  (str) *: {'session_id': <class 'str'>, 'auth_sm_state': <class 'str'>, 'auth_bend_sm_state': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show dot1x all details",
      "groups": [],
      "schema": "{Optional  (str) system_auth_control: <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'pae': <class 'str'>, 'interface': <class 'str'>, Optional  (str) credentials: <class 'str'>, Optional  (str) port_control: <class 'str'>, Optional  (str) control_direction: <class 'str'>, Optional  (str) host_mode: <class 'str'>, Optional  (str) re_authentication: <class 'bool'>, Optional  (str) max_reauth_req: <class 'int'>, Optional  (str) max_req: <class 'int'>, Optional  (str) max_start: <class 'int'>, Optional  (str) timeout: {Optional  (str) server_timeout: <class 'int'>, Optional  (str) supp_timeout: <class 'int'>, Optional  (str) quiet_period: <class 'int'>, Optional  (str) tx_period: <class 'int'>, Optional  (str) auth_period: <class 'int'>, Optional  (str) held_period: <class 'int'>, Optional  (str) ratelimit_period: <class 'int'>, Optional  (str) start_period: <class 'int'>, Optional  (str) re_auth_period: <class 'int'>}, Optional  (str) authenticator: {'eap': {'profile': <class 'str'>}}, Optional  (str) supplicant: {'eap': {'profile': <class 'str'>}}, Optional  (str) clients: {Any  (str) *: {'client': <class 'str'>, 'eap_method': <class 'str'>, Optional  (str) session: {Any  (str) *: {'session_id': <class 'str'>, 'auth_sm_state': <class 'str'>, 'auth_bend_sm_state': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py"
    }
  },
  "Verify_Dot1xAllStatistics": {
    "ios": {
      "doc": "Parser for show dot1x all statistics",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'statistics': {'rxinvalid': <class 'int'>, 'rxlenerr': <class 'int'>, 'rxtotal': <class 'int'>, 'txtotal': <class 'int'>, 'rxversion': <class 'int'>, 'lastrxsrcmac': <class 'str'>, Optional  (str) rxreq: <class 'int'>, Optional  (str) txreq: <class 'int'>, Optional  (str) txstart: <class 'int'>, Optional  (str) rxstart: <class 'int'>, Optional  (str) txlogoff: <class 'int'>, Optional  (str) rxlogoff: <class 'int'>, Optional  (str) txresp: <class 'int'>, Optional  (str) rxresp: <class 'int'>, Optional  (str) rxrespid: <class 'int'>, Optional  (str) txreqid: <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show dot1x all statistics",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'statistics': {'rxinvalid': <class 'int'>, 'rxlenerr': <class 'int'>, 'rxtotal': <class 'int'>, 'txtotal': <class 'int'>, 'rxversion': <class 'int'>, 'lastrxsrcmac': <class 'str'>, Optional  (str) rxreq: <class 'int'>, Optional  (str) txreq: <class 'int'>, Optional  (str) txstart: <class 'int'>, Optional  (str) rxstart: <class 'int'>, Optional  (str) txlogoff: <class 'int'>, Optional  (str) rxlogoff: <class 'int'>, Optional  (str) txresp: <class 'int'>, Optional  (str) rxresp: <class 'int'>, Optional  (str) rxrespid: <class 'int'>, Optional  (str) txreqid: <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py"
    },
    "nxos": {
      "doc": "Parser for:\n            show dot1x all statistics\n    ",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'statistics': {'txreq': <class 'int'>, 'rxlogoff': <class 'int'>, 'rxtotal': <class 'int'>, 'txtotal': <class 'int'>, 'rxversion': <class 'int'>, 'lastrxsrcmac': <class 'str'>, Optional  (str) rxlenerr: <class 'int'>, Optional  (str) txreq: <class 'int'>, Optional  (str) txreqid: <class 'int'>, Optional  (str) rxstart: <class 'int'>, Optional  (str) rxlogoff: <class 'int'>, Optional  (str) rxresp: <class 'int'>, Optional  (str) rxrespid: <class 'int'>, Optional  (str) txreqid: <class 'int'>, Optional  (str) rxinvalid: <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_dot1x.py"
    }
  },
  "Verify_Dot1xAllSummary": {
    "ios": {
      "doc": "Parser for show dot1x all summary",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'clients': {Any  (str) *: {'client': <class 'str'>, 'status': <class 'str'>, 'pae': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show dot1x all summary",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'clients': {Any  (str) *: {'client': <class 'str'>, 'status': <class 'str'>, 'pae': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py"
    },
    "nxos": {
      "doc": "Parser for:\n            show dot1x all summary\n    ",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'clients': {Any  (str) *: {'client': <class 'str'>, 'pae': <class 'str'>, 'status': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_dot1x.py"
    }
  },
  "Verify_EnvironmentAll": {
    "iosxe": {
      "asr1k": {
        "doc": "Parser for show environment all\n                  show environment all | include <WORD>",
        "groups": [],
        "schema": "{'sensor_list': {Any  (str) *: {'sensor': {Any  (str) *: {'location': <class 'str'>, 'state': <class 'str'>, 'reading': <class 'str'>}}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/asr1k/show_platform.py"
      },
      "c3850": {
        "doc": "Parser for show environment all",
        "groups": [],
        "schema": "{'switch': {Any  (str) *: {'fan': {Any  (str) *: {'state': <class 'str'>, Optional  (str) direction: <class 'str'>}}, 'power_supply': {Any  (str) *: {'state': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) serial_number: <class 'str'>, 'status': <class 'str'>, Optional  (str) system_power: <class 'str'>, Optional  (str) poe_power: <class 'str'>, Optional  (str) watts: <class 'str'>}}, 'system_temperature_state': <class 'str'>, Optional  (str) inlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) hotspot_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) asic_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c3850/show_platform.py"
      },
      "c9200": {
        "doc": "Parser for show environment all",
        "groups": [],
        "schema": "{'switch': {Any  (str) *: {'fan': {Any  (str) *: {'state': <class 'str'>, Optional  (str) direction: <class 'str'>, Optional  (str) speed: <class 'int'>}}, 'power_supply': {Any  (str) *: {Optional  (str) state: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) serial_number: <class 'str'>, 'status': <class 'str'>, Optional  (str) system_power: <class 'str'>, Optional  (str) poe_power: <class 'str'>, Optional  (str) watts: <class 'str'>}}, 'system_temperature_state': <class 'str'>, Optional  (str) inlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) outlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) hotspot_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) asic_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9200/show_platform.py"
      },
      "c9300": {
        "doc": "Parser for show environment all",
        "groups": [],
        "schema": "{'switch': {Any  (str) *: {'fan': {Any  (str) *: {'state': <class 'str'>, Optional  (str) direction: <class 'str'>, Optional  (str) speed: <class 'int'>}}, 'power_supply': {Any  (str) *: {'state': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) serial_number: <class 'str'>, 'status': <class 'str'>, Optional  (str) system_power: <class 'str'>, Optional  (str) poe_power: <class 'str'>, Optional  (str) watts: <class 'str'>}}, 'system_temperature_state': <class 'str'>, Optional  (str) inlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) outlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) hotspot_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) asic_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9300/show_platform.py"
      },
      "c9400": {
        "doc": "Parser for show environment all\n                  show environment all | include {include}",
        "groups": [],
        "schema": "{Optional  (str) critical_alarms: <class 'int'>, Optional  (str) major_alarms: <class 'int'>, Optional  (str) minor_alarms: <class 'int'>, 'sensor_list': {Any  (str) *: {'slot': {Any  (str) *: {'sensor': {Any  (str) *: {'state': <class 'str'>, 'reading': <class 'str'>, Optional  (str) threshold: {'minor': <class 'int'>, 'major': <class 'int'>, 'critical': <class 'int'>, 'shutdown': <class 'int'>, 'unit': <class 'str'>}}}}}}}, 'power_supply': {'slot': {Any  (str) *: {'model_no': <class 'str'>, 'type': <class 'str'>, 'capacity': <class 'str'>, 'status': <class 'str'>, 'fan_1_state': <class 'str'>, 'fan_2_state': <class 'str'>}}, 'current_configuration_mode': <class 'str'>, 'current_operating_state': <class 'str'>, 'currently_active': <class 'int'>, 'currently_available': <class 'int'>}, 'fantray': {'status': <class 'str'>, 'power_consumed_by_fantray_watts': <class 'int'>, 'fantray_airflow_direction': <class 'str'>, 'fantray_beacon_led': <class 'str'>, 'fantray_status_led': <class 'str'>, 'system': <class 'str'>}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9400/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show environment all'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'switch': {Any  (str) *: {Optional  (str) fan: {Any  (str) *: {'state': <class 'str'>, Optional  (str) direction: <class 'str'>}}, Optional  (str) power_supply: {Any  (str) *: {Optional  (str) state: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) serial_number: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) system_power: <class 'str'>, Optional  (str) poe_power: <class 'str'>, Optional  (str) watts: <class 'str'>, Optional  (str) temperature: <class 'str'>, Optional  (str) power_source: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) mode: <class 'str'>}}, Optional  (str) system_temperature_state: <class 'str'>, Optional  (str) inlet_temperature: {'value': Or (<class 'int'>, <class 'str'>), 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) hotspot_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) asic_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) outlet_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) system_temperature: {'value': <class 'str'>, 'state': <class 'str'>, 'yellow_threshold': <class 'str'>, 'red_threshold': <class 'str'>}, Optional  (str) redundant_power_system: {<class 'str'>: {'status': <class 'str'>, Optional  (str) serial_num: <class 'str'>, Optional  (str) port_num: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_ErrdisableRecovery": {
    "ios": {
      "doc": "Parser for show errdisable recovery",
      "groups": [],
      "schema": "{'timer_status': {Any  (str) *: <class 'bool'>}, 'bpduguard_timeout_recovery': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'errdisable_reason': <class 'str'>, 'time_left': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show errdisable recovery",
      "exclude": [],
      "groups": [],
      "schema": "{'timer_status': {Any  (str) *: <class 'bool'>}, 'bpduguard_timeout_recovery': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'errdisable_reason': <class 'str'>, 'time_left': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    },
    "nxos": {
      "doc": "Parser for show errdisable recovery",
      "groups": [],
      "schema": "{'errdisable_reason': {Any  (str) *: <class 'bool'>}, 'timer_interval': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py"
    }
  },
  "Verify_EtherchannelSummary": {
    "ios": {
      "doc": "Parser for :\n      show etherchannel summary",
      "groups": [],
      "schema": "{Optional  (str) number_of_lag_in_use: <class 'int'>, Optional  (str) number_of_aggregators: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) bundle_id: <class 'int'>, Optional  (str) protocol: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) oper_status: <class 'str'>, Optional  (str) activity: <class 'str'>, Optional  (str) members: {Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) bundled: <class 'bool'>, 'port_channel': {'port_channel_member': <class 'bool'>, Optional  (str) port_channel_int: <class 'str'>}}}, Optional  (str) port_channel: {'port_channel_member': <class 'bool'>, Optional  (str) port_channel_member_intfs: <class 'list'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show etherchannel summary\n      show etherchannel <port-channel> summary      \n      ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Optional  (str) number_of_lag_in_use: <class 'int'>, Optional  (str) number_of_aggregators: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) bundle_id: <class 'int'>, Optional  (str) protocol: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) oper_status: <class 'str'>, Optional  (str) activity: <class 'str'>, Optional  (str) members: {Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) bundled: <class 'bool'>, 'port_channel': {'port_channel_member': <class 'bool'>, Optional  (str) port_channel_int: <class 'str'>}}}, Optional  (str) port_channel: {'port_channel_member': <class 'bool'>, Optional  (str) port_channel_member_intfs: <class 'list'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_EthernetCfmMeps": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ethernet cfm peer meps",
      "exclude": [],
      "groups": [],
      "schema": "{'domain': {Any  (str) *: {'level': <class 'int'>, 'service': <class 'str'>, Optional  (str) mep_type: {Any  (str) *: {'interface': {Any  (str) *: {'mep_id': <class 'int'>, 'id': {Any  (str) *: {'mac_address': {Any  (str) *: {'st': <class 'str'>, 'port': <class 'str'>, 'up_down_time': <class 'str'>, 'ccm_rcvd': <class 'int'>, 'seq_err': <class 'int'>, 'rdi': <class 'int'>, 'error': <class 'int'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py"
    }
  },
  "Verify_EthernetTags": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ethernet tags\n    parser class - implements detail parsing mechanisms for cli and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {'sub_interface': {Any  (str) *: {Optional  (str) vlan_id: {Any  (str) *: {Optional  (str) status: <class 'str'>, 'mtu': <class 'str'>, Optional  (str) layer: <class 'str'>, 'outer_encapsulation_type': <class 'str'>, Optional  (str) inner_encapsulation_vlan_id: <class 'str'>, Optional  (str) inner_encapsulation_type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py"
    }
  },
  "Verify_EthernetTags_yang": {
    "iosxr": {
      "doc": "Parser for show ethernet tags\n    parser class - implements detail parsing mechanisms for cli and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {'sub_interface': {Any  (str) *: {Optional  (str) vlan_id: {Any  (str) *: {Optional  (str) status: <class 'str'>, 'mtu': <class 'str'>, Optional  (str) layer: <class 'str'>, 'outer_encapsulation_type': <class 'str'>, Optional  (str) inner_encapsulation_vlan_id: <class 'str'>, Optional  (str) inner_encapsulation_type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py"
    }
  },
  "Verify_EthernetTrunkDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ethernet trunk detail\n    parser class - implements detail parsing mechanisms for cli output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) dot1q_tunneling_ethertype: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py"
    }
  },
  "Verify_EvpnEviMac": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show evpn evi mac'\n        * 'show evpn evi vpn-id {vpn_id} mac'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vpn_id': {Any  (str) *: {'mac_address': {Any  (str) *: {Optional  (str) encap: <class 'str'>, 'ip_address': <class 'str'>, 'next_hop': <class 'str'>, 'label': Or (<class 'str'>, <class 'int'>), Optional  (str) sid: <class 'str'>, Optional  (str) sid_flags: <class 'int'>, Optional  (str) endpt_behavior: <class 'int'>, Optional  (str) sid_struct: {'block': <class 'int'>, 'node': <class 'int'>, 'func': <class 'int'>, 'arg': <class 'int'>}, Optional  (str) transposition: {'len': <class 'int'>, 'offset': <class 'int'>}, Optional  (str) ethernet_tag: <class 'int'>, Optional  (str) multipaths_resolved: <class 'str'>, Optional  (str) multipaths_internal_label: <class 'int'>, Optional  (str) multipaths_local_label: <class 'int'>, Optional  (str) local_static: <class 'str'>, Optional  (str) remote_static: <class 'str'>, Optional  (str) local_ethernet_segment: <class 'str'>, Optional  (str) ethernet_segment: <class 'str'>, Optional  (str) remote_ethernet_segment: <class 'str'>, Optional  (str) local_sequence_number: <class 'int'>, Optional  (str) remote_sequence_number: <class 'int'>, Optional  (str) local_encapsulation: <class 'str'>, Optional  (str) remote_encapsulation: <class 'str'>, Optional  (str) local_e_tree: <class 'str'>, Optional  (str) remote_e_tree: <class 'str'>, Optional  (str) remote_matching_e_tree_rt: <class 'str'>, Optional  (str) local_ac_id: <class 'str'>, Optional  (str) remote_ac_id: <class 'str'>, Optional  (str) esi_port_key: <class 'str'>, Optional  (str) source: <class 'str'>, Optional  (str) flush_requested: <class 'int'>, Optional  (str) flush_received: <class 'int'>, Optional  (str) flush_count: <class 'int'>, Optional  (str) flush_seq_id: <class 'int'>, Optional  (str) static: <class 'str'>, Optional  (str) soo_nexthop: <class 'str'>, Optional  (str) ext_flags: <class 'str'>, Optional  (str) bp_xcid: <class 'str'>, Optional  (str) stamped_xcid: <class 'str'>, Optional  (str) bp_ifh: <class 'str'>, Optional  (str) mac_state: <class 'str'>, Optional  (str) mac_producers: <class 'str'>, Optional  (str) local_router_mac: <class 'str'>, Optional  (str) l3_label: <class 'int'>, Optional  (str) object: {Any  (str) *: {Optional  (str) base_info: {'version': <class 'str'>, 'flags': <class 'str'>, 'type': <class 'int'>, 'reserved': <class 'int'>}, Optional  (str) num_events: <class 'int'>, Optional  (str) event_history: {Any  (str) *: {'time': <class 'str'>, 'event': <class 'str'>, 'flag_1': <class 'str'>, 'flag_2': <class 'str'>, 'code_1': <class 'str'>, 'code_2': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py"
    }
  },
  "Verify_EvpnInternalLabelDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        * show evpn internal-label detail\n        * show evpn internal-label detail location {location}\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) evi: {Any  (str) *: {'evi': <class 'int'>, 'esi': <class 'str'>, 'eth_tag': <class 'int'>, 'label': <class 'int'>, Optional  (str) mp_resolved: <class 'bool'>, Optional  (str) mp_info: <class 'str'>, Optional  (str) pathlists: {Optional  (str) mac: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) ead_es: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) ead_evi: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) summary: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}}}}, Optional  (str) vpn_id: {Any  (str) *: {'vpn_id': <class 'int'>, 'encap': <class 'str'>, 'esi': <class 'str'>, 'eth_tag': <class 'int'>, Optional  (str) label: <class 'int'>, Optional  (str) mp_resolved: <class 'bool'>, Optional  (str) mp_info: <class 'str'>, Optional  (str) mp_internal_label: <class 'int'>, Optional  (str) pathlists: {Optional  (str) mac: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) ead_es: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) ead_evi: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>}}}, Optional  (str) summary: {'nexthop': {Any  (str) *: {'label': <class 'int'>, Optional  (str) df_role: <class 'str'>, Optional  (str) value: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py"
    }
  },
  "Verify_FabricMulticastGlobals": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show fabric multicast globals",
      "groups": [],
      "schema": "{'multicast': {'globals': {'pruning': <class 'str'>, 'switch_role': <class 'str'>, 'fabric_control_seg': <class 'str'>, 'peer_fabric_ctrl_addr': <class 'str'>, 'advertise_vpc_rpf_routes': <class 'str'>, 'created_vni_list': <class 'str'>, 'fwd_encap': <class 'str'>, 'overlay_distributed_dr': <class 'bool'>, 'overlay_spt_only': <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_FabricMulticastIpL2Mroute_vni_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show fabric multicast ipv4 l2-mroute\n        show fabric multicast ipv4 l2-mroute vni <vni>\n        show fabric multicast ipv4 l2-mroute vni all",
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 40
      },
      "parameters": {
        "vni": "all"
      },
      "schema": "{'multicast': {'l2_mroute': {'vni': {Any  (str) *: {'vnid': <class 'str'>, Optional  (str) fabric_l2_mroutes: {'gaddr': {Any  (str) *: {'saddr': {Any  (str) *: {'interested_fabric_nodes': {Any  (str) *: {'node': <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_FabricMulticastIpSaAdRoute_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show fabric multicast ipv4 sa-ad-route\n        show fabric multicast ipv4 sa-ad-route vrf <vrf>\n        show fabric multicast ipv4 sa-ad-route vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 40
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'multicast': {'vrf': {Any  (str) *: {'vnid': <class 'str'>, Optional  (str) address_family: {Any  (str) *: {'sa_ad_routes': {'gaddr': {Any  (str) *: {'grp_len': <class 'int'>, 'saddr': {Any  (str) *: {'src_len': <class 'int'>, 'uptime': <class 'str'>, Optional  (str) interested_fabric_nodes: {Any  (str) *: {'uptime': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_Feature": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show feature",
      "groups": [],
      "schema": "{'feature': {Any  (str) *: {'instance': {Any  (str) *: {'state': <class 'str'>, Optional  (str) running: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py"
    }
  },
  "Verify_FeatureSet": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show feature-set",
      "groups": [],
      "schema": "{'feature': {Any  (str) *: {'instance': {Any  (str) *: {'state': <class 'str'>, Optional  (str) running: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py"
    }
  },
  "Verify_ForwardingDistributionMulticastRoute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show forwarding distribution multicast route\n        show forwarding distribution multicast route vrf <vrf>\n        show forwarding distribution multicast route vrf all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 40
      },
      "schema": "{'distribution': {'multicast': {'route': {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'num_groups': <class 'int'>, 'gaddr': {Any  (str) *: {'grp_len': <class 'int'>, 'saddr': {Any  (str) *: {'rpf_ifname': <class 'str'>, Optional  (str) src_len: <class 'int'>, Optional  (str) flags: <class 'str'>, 'rcv_packets': <class 'int'>, 'rcv_bytes': <class 'int'>, 'num_of_oifs': <class 'int'>, Optional  (str) oifs: {'oif_index': <class 'int'>, Any  (str) *: {Optional  (str) oif: <class 'str'>, Optional  (str) encap: <class 'str'>, Optional  (str) mem_l2_ports: <class 'str'>, Optional  (str) l2_oiflist_index: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py"
    }
  },
  "Verify_HsrpAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"'show hsrp all\" ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'interface': <class 'str'>, 'use_bia': <class 'bool'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) tracked_objects: {Any  (str) *: {Optional  (str) object_name: <class 'int'>, Optional  (str) status: <class 'str'>, Optional  (str) priority_decrement: <class 'int'>}}, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, 'upper_fwd_threshold': <class 'int'>, 'lower_fwd_threshold': <class 'int'>, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfged_hello_unit: <class 'str'>, Optional  (str) cfged_hello_interval: <class 'int'>, Optional  (str) cfged_hold_unit: <class 'str'>, Optional  (str) cfged_hold_interval: <class 'int'>}, Optional  (str) primary_ipv4_address: {Optional  (str) virtual_ip_learn: <class 'bool'>, Optional  (str) address: <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {Optional  (str) address: <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'bool'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, 'active_router': <class 'str'>, 'standby_router': <class 'str'>, 'virtual_mac_address': <class 'str'>, 'virtual_mac_address_status': <class 'str'>, Optional  (str) authentication: <class 'str'>, 'num_state_changes': <class 'int'>, 'last_state_change': <class 'str'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_priority: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) active_expire: <class 'float'>, Optional  (str) standby_expire: <class 'float'>, Optional  (str) secondary_vips: <class 'list'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) standby_mac_address: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py"
    }
  },
  "Verify_HsrpDelay": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for show hsrp delay ",
      "groups": [],
      "schema": "{Any  (str) *: {'delay': {'minimum_delay': <class 'int'>, 'reload_delay': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py"
    }
  },
  "Verify_HsrpDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show hsrp detail",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {'interface': <class 'str'>, Optional  (str) bfd: {'enabled': <class 'bool'>, 'detection_multiplier': <class 'int'>, 'interval': <class 'int'>}, Optional  (str) use_bia: <class 'bool'>, Optional  (str) delay: {'minimum_delay': <class 'int'>, 'reload_delay': <class 'int'>}, Optional  (str) redirects_disable: <class 'bool'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {Optional  (str) bfd: {'address': <class 'str'>, 'interface_name': <class 'str'>, Optional  (str) state: <class 'str'>}, Optional  (str) tracked_interfaces: {Any  (str) *: {'interface_name': <class 'str'>, 'priority_decrement': <class 'int'>}}, Optional  (str) tracked_objects: {'num_tracked_objects': <class 'int'>, 'num_tracked_objects_up': <class 'int'>, Any  (str) *: {'object_name': <class 'str'>, 'priority_decrement': <class 'int'>}}, Optional  (str) timers: {'hello_msec_flag': <class 'bool'>, 'hello_msec': <class 'int'>, Optional  (str) hello_sec: <class 'int'>, 'hold_msec_flag': <class 'bool'>, 'hold_msec': <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) authentication: <class 'str'>, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) statistics: {Optional  (str) last_resign_received: <class 'str'>, Optional  (str) last_resign_sent: <class 'str'>, Optional  (str) last_coup_received: <class 'str'>, Optional  (str) last_coup_sent: <class 'str'>, Optional  (str) num_state_changes: <class 'int'>, Optional  (str) last_state_change: <class 'str'>}, 'priority': <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_delay: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) num_of_slaves: <class 'int'>, Optional  (str) virtual_mac_address: <class 'str'>, 'group_number': <class 'int'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) standby_mac_address: <class 'str'>, Optional  (str) active_priority: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) active_state: <class 'str'>, Optional  (str) standby_state: <class 'str'>, Optional  (str) active_expire: <class 'str'>, Optional  (str) standby_expire: <class 'str'>, 'hsrp_router_state': <class 'str'>}}, Optional  (str) slave_groups: {Any  (str) *: {'follow': <class 'str'>, Optional  (str) bfd: {'address': <class 'str'>, 'interface_name': <class 'str'>}, Optional  (str) tracked_interfaces: {Any  (str) *: {'interface_name': <class 'str'>, 'priority_decrement': <class 'int'>}}, Optional  (str) tracked_objects: {'num_tracked_objects': <class 'int'>, 'num_tracked_objects_up': <class 'int'>, Any  (str) *: {'object_name': <class 'str'>, 'priority_decrement': <class 'int'>}}, Optional  (str) timers: {'hello_msec_flag': <class 'bool'>, 'hello_msec': <class 'int'>, Optional  (str) hello_sec: <class 'int'>, 'hold_msec_flag': <class 'bool'>, 'hold_msec': <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) authentication: <class 'str'>, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) statistics: {Optional  (str) last_resign_received: <class 'str'>, Optional  (str) last_resign_sent: <class 'str'>, Optional  (str) last_coup_received: <class 'str'>, Optional  (str) last_coup_sent: <class 'str'>, Optional  (str) num_state_changes: <class 'int'>, Optional  (str) last_state_change: <class 'str'>}, 'priority': <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_delay: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, 'group_number': <class 'int'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) active_priority: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) active_state: <class 'str'>, Optional  (str) standby_state: <class 'str'>, Optional  (str) active_expire: <class 'str'>, Optional  (str) standby_expire: <class 'str'>, 'hsrp_router_state': <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py"
    }
  },
  "Verify_HsrpSummary": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show hsrp summary",
      "exclude": [],
      "groups": [],
      "schema": "{'address_family': {Any  (str) *: {'state': {Any  (str) *: {'sessions': <class 'int'>, 'slaves': <class 'int'>, 'total': <class 'int'>}}, 'intf_total': <class 'int'>, 'intf_up': <class 'int'>, 'intf_down': <class 'int'>, 'vritual_addresses_total': <class 'int'>, 'virtual_addresses_active': <class 'int'>, 'virtual_addresses_inactive': <class 'int'>}}, 'num_tracked_objects': <class 'int'>, 'tracked_objects_up': <class 'int'>, 'tracked_objects_down': <class 'int'>, 'num_bfd_sessions': <class 'int'>, 'bfd_sessions_up': <class 'int'>, 'bfd_sessions_down': <class 'int'>, 'bfd_sessions_inactive': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show hsrp summary ",
      "exclude": [],
      "groups": [],
      "schema": "{'nsf': <class 'str'>, Optional  (str) nsf_time: <class 'int'>, 'global_hsrp_bfd': <class 'str'>, 'stats': {'total_groups': <class 'int'>, 'v1_ipv4': <class 'int'>, 'v2_ipv4': <class 'int'>, 'v2_ipv6': <class 'int'>, 'active': <class 'int'>, 'standby': <class 'int'>, 'listen': <class 'int'>, 'v6_active': <class 'int'>, 'v6_standby': <class 'int'>, 'v6_listen': <class 'int'>}, 'intf_total': <class 'int'>, 'total_packets': {'tx_pass': <class 'int'>, 'tx_fail': <class 'int'>, 'rx_good': <class 'int'>}, 'pkt_unknown_groups': <class 'int'>, 'total_mts_rx': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py"
    }
  },
  "Verify_InstallActive": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show install active",
      "exclude": [],
      "groups": [],
      "schema": "{'boot_images': {Optional  (str) kickstart_image: <class 'str'>, Optional  (str) system_image: <class 'str'>}, Optional  (str) active_packages: {Any  (str) *: {Optional  (str) active_package_name: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_InstallActiveSummary": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show install active summary",
      "exclude": [],
      "groups": [],
      "schema": "{'active_packages': Any  (str) *, Optional  (str) num_active_packages: <class 'int'>, Optional  (str) sdr: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_Interface": {
    "gaia": {
      "doc": "parser for   show interface <interface>\n                    show interfaces all",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'state': <class 'str'>, 'mac_addr': <class 'str'>, 'type': <class 'str'>, 'link_state': <class 'str'>, 'mtu': <class 'int'>, 'auto_negotiation': <class 'str'>, 'speed': <class 'str'>, 'ipv6_autoconfig': <class 'str'>, 'duplex': <class 'str'>, 'monitor_mode': <class 'str'>, 'link_speed': <class 'str'>, 'comments': <class 'str'>, 'ipv4_address': <class 'str'>, 'ipv6_address': <class 'str'>, 'ipv6_local_link_address': <class 'str'>, Optional  (str) alias: {Any  (str) *: {'state': <class 'str'>, 'ipv4_address': <class 'str'>}}, 'statistics': {'tx_bytes': <class 'int'>, 'tx_packets': <class 'int'>, 'tx_errors': <class 'int'>, 'tx_dropped': <class 'int'>, 'tx_overruns': <class 'int'>, 'tx_carrier': <class 'int'>, 'rx_bytes': <class 'int'>, 'rx_packets': <class 'int'>, 'rx_errors': <class 'int'>, 'rx_dropped': <class 'int'>, 'rx_overruns': <class 'int'>, 'rx_frame': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/gaia/show_interface.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show interface, show interface <interface>",
      "exclude": [],
      "groups": [
        "bgp",
        "evpn",
        "native",
        "vxlan",
        "multicast",
        "trm"
      ],
      "iteration": {
        "attempt": 25,
        "interval": 20
      },
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) types: <class 'str'>, Optional  (str) parent_interface: <class 'str'>, 'oper_status': <class 'str'>, Optional  (str) admin_state: <class 'str'>, Optional  (str) dedicated_interface: <class 'bool'>, Optional  (str) line_protocol: <class 'str'>, Optional  (str) autostate: <class 'bool'>, Optional  (str) link_state: <class 'str'>, Optional  (str) phys_address: <class 'str'>, Optional  (str) port_speed: <class 'str'>, Optional  (str) port_speed_unit: <class 'str'>, Optional  (str) mtu: <class 'int'>, 'enabled': <class 'bool'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) auto_negotiate: <class 'bool'>, Optional  (str) fec_mode: <class 'str'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) port_mode: <class 'str'>, Optional  (str) auto_mdix: <class 'str'>, Optional  (str) switchport_monitor: <class 'str'>, Optional  (str) efficient_ethernet: <class 'str'>, Optional  (str) last_link_flapped: <class 'str'>, Optional  (str) last_clear_counters: <class 'str'>, Optional  (str) interface_reset: <class 'int'>, Optional  (str) ethertype: <class 'str'>, Optional  (str) beacon: <class 'str'>, Optional  (str) medium: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) txload: <class 'str'>, Optional  (str) rxload: <class 'str'>, Optional  (str) delay: <class 'int'>, Optional  (str) media_type: <class 'str'>, Optional  (str) flow_control: {Optional  (str) receive: <class 'bool'>, Optional  (str) send: <class 'bool'>}, Optional  (str) port_channel: {Optional  (str) port_channel_member: <class 'bool'>, Optional  (str) port_channel_int: <class 'str'>, Optional  (str) port_channel_member_intfs: <class 'list'>}, Optional  (str) bandwidth: <class 'int'>, Optional  (str) counters: {Optional  (str) rate: {Optional  (str) load_interval: <class 'int'>, Optional  (str) in_rate: <class 'int'>, Optional  (str) in_rate_pkts: <class 'int'>, Optional  (str) out_rate: <class 'int'>, Optional  (str) out_rate_pkts: <class 'int'>, Optional  (str) in_rate_bps: <class 'int'>, Optional  (str) in_rate_pps: <class 'int'>, Optional  (str) out_rate_bps: <class 'int'>, Optional  (str) out_rate_pps: <class 'int'>}, Optional  (str) in_unicast_pkts: <class 'int'>, Optional  (str) in_multicast_pkts: <class 'int'>, Optional  (str) in_broadcast_pkts: <class 'int'>, Optional  (str) in_discards: <class 'int'>, Optional  (str) in_crc_errors: <class 'int'>, Optional  (str) in_oversize_frames: <class 'int'>, Optional  (str) in_pkts: <class 'int'>, Optional  (str) in_mac_pause_frames: <class 'int'>, Optional  (str) in_jumbo_packets: <class 'int'>, Optional  (str) in_storm_suppression_packets: <class 'int'>, Optional  (str) in_storm_suppression_bytes: <class 'int'>, Optional  (str) in_runts: <class 'int'>, Optional  (str) in_oversize_frame: <class 'int'>, Optional  (str) in_overrun: <class 'int'>, Optional  (str) in_underrun: <class 'int'>, Optional  (str) in_ignored: <class 'int'>, Optional  (str) in_watchdog: <class 'int'>, Optional  (str) in_bad_etype_drop: <class 'int'>, Optional  (str) in_unknown_protos: <class 'int'>, Optional  (str) in_if_down_drop: <class 'int'>, Optional  (str) in_with_dribble: <class 'int'>, Optional  (str) in_discard: <class 'int'>, Optional  (str) in_octets: <class 'int'>, Optional  (str) in_errors: <class 'int'>, Optional  (str) in_short_frame: <class 'int'>, Optional  (str) in_no_buffer: <class 'int'>, Optional  (str) out_pkts: <class 'int'>, Optional  (str) out_unicast_pkts: <class 'int'>, Optional  (str) out_multicast_pkts: <class 'int'>, Optional  (str) out_broadcast_pkts: <class 'int'>, Optional  (str) out_discard: <class 'int'>, Optional  (str) out_octets: <class 'int'>, Optional  (str) out_jumbo_packets: <class 'int'>, Optional  (str) out_errors: <class 'int'>, Optional  (str) out_collision: <class 'int'>, Optional  (str) out_deferred: <class 'int'>, Optional  (str) out_late_collision: <class 'int'>, Optional  (str) out_lost_carrier: <class 'int'>, Optional  (str) out_no_carrier: <class 'int'>, Optional  (str) out_babble: <class 'int'>, Optional  (str) last_clear: <class 'str'>, Optional  (str) tx: <class 'bool'>, Optional  (str) rx: <class 'bool'>, Optional  (str) out_mac_pause_frames: <class 'int'>}, Optional  (str) encapsulations: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) first_dot1q: <class 'str'>, Optional  (str) native_vlan: <class 'int'>}, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>, Optional  (str) route_tag: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_InterfaceBrief": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show interface brief",
      "groups": [],
      "schema": "{'interface': {Optional  (str) ethernet: {Any  (str) *: {Optional  (str) vlan: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) mode: <class 'str'>, 'status': <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) reason: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) bw: <class 'int'>, Optional  (str) port_ch: <class 'str'>}}, Optional  (str) port: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) ip_address: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) bw: <class 'int'>}}, Optional  (str) port_channel: {Any  (str) *: {Optional  (str) vlan: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) reason: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) bw: <class 'int'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) loopback: {Any  (str) *: {Optional  (str) status: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) bw: <class 'int'>, Optional  (str) description: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        * show interface brief\n        * show interface {interface} brief\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Optional  (str) ethernet: {Any  (str) *: {'vlan': <class 'str'>, 'type': <class 'str'>, 'mode': <class 'str'>, 'status': <class 'str'>, 'speed': <class 'str'>, 'reason': <class 'str'>, 'port_ch': <class 'str'>}}, Optional  (str) port: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) ip_address: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) mtu: <class 'int'>}}, Optional  (str) port_channel: {Any  (str) *: {Optional  (str) vlan: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) reason: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) loopback: {Any  (str) *: {Optional  (str) status: <class 'str'>, Optional  (str) description: <class 'str'>}}, Optional  (str) vlan: {Any  (str) *: {Optional  (str) type: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) reason: <class 'str'>}}, Optional  (str) nve: {Any  (str) *: {Optional  (str) mtu: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) reason: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_InterfaceSwitchport": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show interface switchport\n                show interface <interface> switchport",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {'switchport_status': <class 'str'>, Optional  (str) switchport_monitor: <class 'str'>, Optional  (str) switchport_mode: <class 'str'>, Optional  (str) access_vlan: <class 'int'>, 'switchport_enable': <class 'bool'>, Optional  (str) access_vlan_mode: <class 'str'>, Optional  (str) native_vlan: <class 'int'>, Optional  (str) native_vlan_mode: <class 'str'>, Optional  (str) trunk_vlans: <class 'str'>, Optional  (str) admin_priv_vlan_primary_host_assoc: <class 'str'>, Optional  (str) admin_priv_vlan_secondary_host_assoc: <class 'str'>, Optional  (str) admin_priv_vlan_primary_mapping: <class 'str'>, Optional  (str) admin_priv_vlan_secondary_mapping: <class 'str'>, Optional  (str) admin_priv_vlan_trunk_native_vlan: <class 'str'>, Optional  (str) admin_priv_vlan_trunk_encapsulation: <class 'str'>, Optional  (str) admin_priv_vlan_trunk_normal_vlans: <class 'str'>, Optional  (str) admin_priv_vlan_trunk_private_vlans: <class 'str'>, Optional  (str) operational_private_vlan: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_Interfaces": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "parser for show interfaces",
      "exclude": [],
      "groups": [
        "interface"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {Optional  (str) oper_status: <class 'str'>, Optional  (str) line_protocol: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) is_deleted: <class 'bool'>, Optional  (str) connected: <class 'bool'>, Optional  (str) err_disabled: <class 'bool'>, Optional  (str) suspended: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) link_state: <class 'str'>, Optional  (str) port_speed: <class 'str'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) link_type: <class 'str'>, Optional  (str) media_type: <class 'str'>, Optional  (str) mtu: <class 'int'>, Optional  (str) maximum_active_vcs: <class 'str'>, Optional  (str) vcs_per_vp: <class 'str'>, Optional  (str) vc_idle_disconnect_time: <class 'str'>, Optional  (str) vc_auto_creation: <class 'str'>, Optional  (str) current_vccs: <class 'str'>, Optional  (str) aal5_crc_errors: <class 'int'>, Optional  (str) aal5_oversized_sdus: <class 'int'>, Optional  (str) aal5_sar_timeouts: <class 'int'>, Optional  (str) vaccess_status: <class 'str'>, Optional  (str) vaccess_loopback: <class 'str'>, Optional  (str) base_pppoatm: <class 'str'>, Optional  (str) dtr_pulsed: <class 'str'>, Optional  (str) sub_mtu: <class 'int'>, Optional  (str) medium: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) txload: <class 'str'>, Optional  (str) rxload: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) phys_address: <class 'str'>, Optional  (str) delay: <class 'int'>, Optional  (str) carrier_delay: <class 'int'>, Optional  (str) carrier_delay_up: <class 'int'>, Optional  (str) carrier_delay_down: <class 'int'>, Optional  (str) keepalive: <class 'int'>, Optional  (str) auto_negotiate: <class 'bool'>, Optional  (str) arp_type: <class 'str'>, Optional  (str) arp_timeout: <class 'str'>, Optional  (str) last_input: <class 'str'>, Optional  (str) last_output: <class 'str'>, Optional  (str) output_hang: <class 'str'>, Optional  (str) autostate: <class 'bool'>, Optional  (str) tunnel_source_ip: <class 'str'>, Optional  (str) tunnel_source_interface: <class 'str'>, Optional  (str) tunnel_destination_ip: <class 'str'>, Optional  (str) tunnel_protocol: <class 'str'>, Optional  (str) tunnel_ttl: <class 'int'>, Optional  (str) tunnel_transport_mtu: <class 'int'>, Optional  (str) tunnel_transmit_bandwidth: <class 'int'>, Optional  (str) tunnel_receive_bandwidth: <class 'int'>, Optional  (str) tunnel_protection: <class 'str'>, Optional  (str) tunnel_profile: <class 'str'>, Optional  (str) queues: {Optional  (str) input_queue_size: <class 'int'>, Optional  (str) input_queue_max: <class 'int'>, Optional  (str) input_queue_drops: <class 'int'>, Optional  (str) input_queue_flushes: <class 'int'>, Optional  (str) total_output_drop: <class 'int'>, Optional  (str) queue_strategy: <class 'str'>, Optional  (str) output_queue_size: <class 'int'>, Optional  (str) output_queue_max: <class 'int'>, Optional  (str) threshold: <class 'int'>, Optional  (str) drops: <class 'int'>}, Optional  (str) flow_control: {Optional  (str) receive: <class 'bool'>, Optional  (str) send: <class 'bool'>}, Optional  (str) port_channel: {Optional  (str) port_channel_member: <class 'bool'>, Optional  (str) port_channel_int: <class 'str'>, Optional  (str) port_channel_member_intfs: <class 'list'>, Optional  (str) active_members: <class 'int'>, Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>}, Optional  (str) bandwidth: <class 'int'>, Optional  (str) counters: {Optional  (str) rate: {Optional  (str) load_interval: <class 'int'>, Optional  (str) in_rate: <class 'int'>, Optional  (str) in_rate_pkts: <class 'int'>, Optional  (str) out_rate: <class 'int'>, Optional  (str) out_rate_pkts: <class 'int'>, Optional  (str) in_rate_bps: <class 'int'>, Optional  (str) in_rate_pps: <class 'int'>, Optional  (str) out_rate_bps: <class 'int'>, Optional  (str) out_rate_pps: <class 'int'>}, Optional  (str) in_multicast_pkts: <class 'int'>, Optional  (str) in_broadcast_pkts: <class 'int'>, Optional  (str) in_crc_errors: <class 'int'>, Optional  (str) in_giants: <class 'int'>, Optional  (str) in_pkts: <class 'int'>, Optional  (str) in_frame: <class 'int'>, Optional  (str) in_runts: <class 'int'>, Optional  (str) in_overrun: <class 'int'>, Optional  (str) in_ignored: <class 'int'>, Optional  (str) in_watchdog: <class 'int'>, Optional  (str) in_with_dribble: <class 'int'>, Optional  (str) in_octets: <class 'int'>, Optional  (str) in_errors: <class 'int'>, Optional  (str) in_abort: <class 'int'>, Optional  (str) in_no_buffer: <class 'int'>, Optional  (str) in_throttles: <class 'int'>, Optional  (str) in_mac_pause_frames: <class 'int'>, Optional  (str) out_pkts: <class 'int'>, Optional  (str) out_octets: <class 'int'>, Optional  (str) out_multicast_pkts: <class 'int'>, Optional  (str) out_broadcast_pkts: <class 'int'>, Optional  (str) out_errors: <class 'int'>, Optional  (str) out_collision: <class 'int'>, Optional  (str) out_interface_resets: <class 'int'>, Optional  (str) out_unknown_protocl_drops: <class 'int'>, Optional  (str) out_babbles: <class 'int'>, Optional  (str) out_deferred: <class 'int'>, Optional  (str) out_underruns: <class 'int'>, Optional  (str) out_late_collision: <class 'int'>, Optional  (str) out_lost_carrier: <class 'int'>, Optional  (str) out_no_carrier: <class 'int'>, Optional  (str) out_babble: <class 'int'>, Optional  (str) out_mac_pause_frames: <class 'int'>, Optional  (str) out_buffer_failure: <class 'int'>, Optional  (str) out_buffers_swapped: <class 'int'>, Optional  (str) last_clear: <class 'str'>}, Optional  (str) encapsulations: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) first_dot1q: <class 'str'>, Optional  (str) second_dot1q: <class 'str'>, Optional  (str) native_vlan: <class 'int'>}, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>}, Optional  (str) unnumbered: {'interface_ref': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "parser for show interfaces\n                  show interfaces <interface>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {Optional  (str) oper_status: <class 'str'>, Optional  (str) line_protocol: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) is_deleted: <class 'bool'>, Optional  (str) connected: <class 'bool'>, Optional  (str) err_disabled: <class 'bool'>, Optional  (str) suspended: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) link_state: <class 'str'>, Optional  (str) port_speed: <class 'str'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) link_type: <class 'str'>, Optional  (str) media_type: <class 'str'>, Optional  (str) mtu: <class 'int'>, Optional  (str) maximum_active_vcs: <class 'str'>, Optional  (str) vcs_per_vp: <class 'str'>, Optional  (str) vc_idle_disconnect_time: <class 'str'>, Optional  (str) vc_auto_creation: <class 'str'>, Optional  (str) current_vccs: <class 'str'>, Optional  (str) aal5_crc_errors: <class 'int'>, Optional  (str) aal5_oversized_sdus: <class 'int'>, Optional  (str) aal5_sar_timeouts: <class 'int'>, Optional  (str) vaccess_status: <class 'str'>, Optional  (str) vaccess_loopback: <class 'str'>, Optional  (str) base_pppoatm: <class 'str'>, Optional  (str) dtr_pulsed: <class 'str'>, Optional  (str) sub_mtu: <class 'int'>, Optional  (str) medium: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) txload: <class 'str'>, Optional  (str) rxload: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) phys_address: <class 'str'>, Optional  (str) delay: <class 'int'>, Optional  (str) carrier_delay: <class 'int'>, Optional  (str) carrier_delay_up: <class 'int'>, Optional  (str) carrier_delay_down: <class 'int'>, Optional  (str) keepalive: <class 'int'>, Optional  (str) auto_negotiate: <class 'bool'>, Optional  (str) arp_type: <class 'str'>, Optional  (str) arp_timeout: <class 'str'>, Optional  (str) last_input: <class 'str'>, Optional  (str) last_output: <class 'str'>, Optional  (str) output_hang: <class 'str'>, Optional  (str) autostate: <class 'bool'>, Optional  (str) tunnel_source_ip: <class 'str'>, Optional  (str) tunnel_source_interface: <class 'str'>, Optional  (str) tunnel_destination_ip: <class 'str'>, Optional  (str) tunnel_protocol: <class 'str'>, Optional  (str) tunnel_ttl: <class 'int'>, Optional  (str) tunnel_transport_mtu: <class 'int'>, Optional  (str) tunnel_transmit_bandwidth: <class 'int'>, Optional  (str) tunnel_receive_bandwidth: <class 'int'>, Optional  (str) tunnel_protection: <class 'str'>, Optional  (str) tunnel_profile: <class 'str'>, Optional  (str) queues: {Optional  (str) input_queue_size: <class 'int'>, Optional  (str) input_queue_max: <class 'int'>, Optional  (str) input_queue_drops: <class 'int'>, Optional  (str) input_queue_flushes: <class 'int'>, Optional  (str) total_output_drop: <class 'int'>, Optional  (str) queue_strategy: <class 'str'>, Optional  (str) output_queue_size: <class 'int'>, Optional  (str) output_queue_max: <class 'int'>, Optional  (str) threshold: <class 'int'>, Optional  (str) drops: <class 'int'>}, Optional  (str) flow_control: {Optional  (str) receive: <class 'bool'>, Optional  (str) send: <class 'bool'>}, Optional  (str) port_channel: {Optional  (str) port_channel_member: <class 'bool'>, Optional  (str) port_channel_int: <class 'str'>, Optional  (str) port_channel_member_intfs: <class 'list'>, Optional  (str) active_members: <class 'int'>, Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>}, Optional  (str) bandwidth: <class 'int'>, Optional  (str) counters: {Optional  (str) rate: {Optional  (str) load_interval: <class 'int'>, Optional  (str) in_rate: <class 'int'>, Optional  (str) in_rate_pkts: <class 'int'>, Optional  (str) out_rate: <class 'int'>, Optional  (str) out_rate_pkts: <class 'int'>, Optional  (str) in_rate_bps: <class 'int'>, Optional  (str) in_rate_pps: <class 'int'>, Optional  (str) out_rate_bps: <class 'int'>, Optional  (str) out_rate_pps: <class 'int'>}, Optional  (str) in_multicast_pkts: <class 'int'>, Optional  (str) in_broadcast_pkts: <class 'int'>, Optional  (str) in_crc_errors: <class 'int'>, Optional  (str) in_giants: <class 'int'>, Optional  (str) in_pkts: <class 'int'>, Optional  (str) in_frame: <class 'int'>, Optional  (str) in_runts: <class 'int'>, Optional  (str) in_overrun: <class 'int'>, Optional  (str) in_ignored: <class 'int'>, Optional  (str) in_watchdog: <class 'int'>, Optional  (str) in_with_dribble: <class 'int'>, Optional  (str) in_octets: <class 'int'>, Optional  (str) in_errors: <class 'int'>, Optional  (str) in_abort: <class 'int'>, Optional  (str) in_no_buffer: <class 'int'>, Optional  (str) in_throttles: <class 'int'>, Optional  (str) in_mac_pause_frames: <class 'int'>, Optional  (str) out_pkts: <class 'int'>, Optional  (str) out_octets: <class 'int'>, Optional  (str) out_multicast_pkts: <class 'int'>, Optional  (str) out_broadcast_pkts: <class 'int'>, Optional  (str) out_errors: <class 'int'>, Optional  (str) out_collision: <class 'int'>, Optional  (str) out_interface_resets: <class 'int'>, Optional  (str) out_unknown_protocl_drops: <class 'int'>, Optional  (str) out_babbles: <class 'int'>, Optional  (str) out_deferred: <class 'int'>, Optional  (str) out_underruns: <class 'int'>, Optional  (str) out_late_collision: <class 'int'>, Optional  (str) out_lost_carrier: <class 'int'>, Optional  (str) out_no_carrier: <class 'int'>, Optional  (str) out_babble: <class 'int'>, Optional  (str) out_mac_pause_frames: <class 'int'>, Optional  (str) out_buffer_failure: <class 'int'>, Optional  (str) out_buffers_swapped: <class 'int'>, Optional  (str) last_clear: <class 'str'>}, Optional  (str) encapsulations: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) first_dot1q: <class 'str'>, Optional  (str) second_dot1q: <class 'str'>, Optional  (str) native_vlan: <class 'int'>}, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>}, Optional  (str) unnumbered: {'interface_ref': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "doc": "parser for show interfaces\n                  show interfaces <interface>",
      "groups": [],
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, Optional  (str) line_protocol: <class 'str'>, 'enabled': <class 'bool'>, Optional  (str) interface_state_transitions: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) phys_address: <class 'str'>, Optional  (str) layer2: <class 'bool'>, Optional  (str) description: <class 'str'>, 'mtu': <class 'int'>, 'bandwidth': <class 'int'>, Optional  (str) bandwidth_max: <class 'int'>, Optional  (str) port_speed: <class 'str'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) link_type: <class 'str'>, Optional  (str) media_type: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) txload: <class 'str'>, Optional  (str) rxload: <class 'str'>, Optional  (str) carrier_delay_up: <class 'int'>, Optional  (str) carrier_delay_down: <class 'int'>, Optional  (str) auto_negotiate: <class 'bool'>, Optional  (str) arp_type: <class 'str'>, Optional  (str) arp_timeout: <class 'str'>, Optional  (str) loopback: <class 'str'>, Optional  (str) last_link_flapped: <class 'str'>, Optional  (str) last_input: <class 'str'>, Optional  (str) last_output: <class 'str'>, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>}}, Optional  (str) encapsulations: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) first_dot1q: <class 'str'>, Optional  (str) second_dot1q: <class 'str'>, Optional  (str) outer_match: <class 'str'>, Optional  (str) ethertype: <class 'str'>, Optional  (str) mac_match: <class 'str'>, Optional  (str) dest: <class 'str'>}, Optional  (str) flow_control: {Optional  (str) receive: <class 'bool'>, Optional  (str) send: <class 'bool'>}, Optional  (str) port_channel: {Optional  (str) member_count: <class 'int'>, Optional  (str) members: {Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) state: <class 'str'>}}}, Optional  (str) counters: {Optional  (str) rate: {Optional  (str) load_interval: <class 'int'>, Optional  (str) in_rate: <class 'int'>, Optional  (str) in_rate_pkts: <class 'int'>, Optional  (str) out_rate: <class 'int'>, Optional  (str) out_rate_pkts: <class 'int'>}, Optional  (str) in_total_drops: <class 'int'>, Optional  (str) in_unknown_protos: <class 'int'>, Optional  (str) in_octets: <class 'int'>, Optional  (str) in_pkts: <class 'int'>, Optional  (str) in_multicast_pkts: <class 'int'>, Optional  (str) in_broadcast_pkts: <class 'int'>, Optional  (str) in_runts: <class 'int'>, Optional  (str) in_giants: <class 'int'>, Optional  (str) in_throttles: <class 'int'>, Optional  (str) in_parity: <class 'int'>, Optional  (str) in_frame_errors: <class 'int'>, Optional  (str) in_crc_errors: <class 'int'>, Optional  (str) in_frame: <class 'int'>, Optional  (str) in_overrun: <class 'int'>, Optional  (str) in_ignored: <class 'int'>, Optional  (str) in_errors: <class 'int'>, Optional  (str) in_abort: <class 'int'>, Optional  (str) in_drops: <class 'int'>, Optional  (str) in_queue_drops: <class 'int'>, Optional  (str) out_pkts: <class 'int'>, Optional  (str) out_octets: <class 'int'>, Optional  (str) out_total_drops: <class 'int'>, Optional  (str) out_broadcast_pkts: <class 'int'>, Optional  (str) out_multicast_pkts: <class 'int'>, Optional  (str) out_errors: <class 'int'>, Optional  (str) out_underruns: <class 'int'>, Optional  (str) out_applique: <class 'int'>, Optional  (str) out_resets: <class 'int'>, Optional  (str) out_buffer_failure: <class 'int'>, Optional  (str) out_buffers_swapped: <class 'int'>, Optional  (str) out_drops: <class 'int'>, Optional  (str) out_queue_drops: <class 'int'>, Optional  (str) last_clear: <class 'str'>, Optional  (str) carrier_transitions: <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "junos": {
      "doc": null,
      "groups": [],
      "schema": "{Optional  (str) @xmlns:junos: <class 'str'>, 'interface-information': {Optional  (str) @junos:style: <class 'str'>, Optional  (str) @xmlns: <class 'str'>, 'physical-interface': ListOf  (Schema) Schema  (dict) {Optional  (str) down-hold-time: <class 'str'>, Optional  (str) up-hold-time: <class 'str'>, Optional  (str) statistics-cleared: <class 'str'>, Optional  (str) active-alarms: {Optional  (str) interface-alarms: {Optional  (str) alarm-not-present: <class 'bool'>, Optional  (str) ethernet-alarm-link-down: <class 'bool'>}}, Optional  (str) active-defects: {Optional  (str) interface-alarms: {Optional  (str) alarm-not-present: <class 'bool'>, Optional  (str) ethernet-alarm-link-down: <class 'bool'>}}, Optional  (str) admin-status: {Optional  (str) #text: <class 'str'>, Optional  (str) @junos:format: <class 'str'>}, Optional  (str) bpdu-error: <class 'str'>, Optional  (str) clocking: <class 'str'>, Optional  (str) current-physical-address: <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) eth-switch-error: <class 'str'>, Optional  (str) ethernet-fec-mode: {Optional  (str) @junos:style: <class 'str'>, 'enabled_fec_mode': <class 'str'>}, Optional  (str) ethernet-fec-statistics: {Optional  (str) @junos:style: <class 'str'>, 'fec_ccw_count': <class 'str'>, 'fec_ccw_error_rate': <class 'str'>, 'fec_nccw_count': <class 'str'>, 'fec_nccw_error_rate': <class 'str'>}, Optional  (str) ethernet-pcs-statistics: {Optional  (str) @junos:style: <class 'str'>, 'bit-error-seconds': <class 'str'>, 'errored-blocks-seconds': <class 'str'>}, Optional  (str) hardware-physical-address: <class 'str'>, Optional  (str) if-config-flags: {Optional  (str) internal-flags: <class 'str'>, 'iff-snmp-traps': <class 'bool'>, Optional  (str) iff-hardware-down: <class 'bool'>}, Optional  (str) if-auto-negotiation: <class 'str'>, Optional  (str) if-device-flags: {'ifdf-present': <class 'bool'>, 'ifdf-running': <class 'bool'>, Optional  (str) ifdf-loopback: <class 'bool'>, Optional  (str) ifdf-down: <class 'bool'>}, Optional  (str) if-flow-control: <class 'str'>, Optional  (str) if-media-flags: {'ifmf-none': <class 'bool'>}, Optional  (str) if-remote-fault: <class 'str'>, Optional  (str) if-type: <class 'str'>, Optional  (str) ifd-specific-config-flags: {Optional  (str) internal-flags: <class 'str'>}, Optional  (str) interface-flapped: {'#text': <class 'str'>, Optional  (str) @junos:seconds: <class 'str'>}, Optional  (str) interface-transmit-statistics: <class 'str'>, Optional  (str) l2pt-error: <class 'str'>, Optional  (str) ld-pdu-error: <class 'str'>, Optional  (str) link-level-type: <class 'str'>, Optional  (str) link-type: <class 'str'>, Optional  (str) link-mode: <class 'str'>, Optional  (str) local-index: <class 'str'>, Optional  (str) logical-interface: ListOf  (Schema) Schema  (dict) {Optional  (str) address-family: ListOf  (Schema) Schema  (dict) {Optional  (str) address-family-flags: {Optional  (str) ifff-is-primary: <class 'bool'>, Optional  (str) ifff-no-redirects: <class 'bool'>, Optional  (str) ifff-none: <class 'bool'>, Optional  (str) ifff-sendbcast-pkt-to-re: <class 'bool'>, Optional  (str) internal-flags: <class 'bool'>, Optional  (str) ifff-primary: <class 'bool'>, Optional  (str) ifff-receive-ttl-exceeded: <class 'bool'>, Optional  (str) ifff-receive-options: <class 'bool'>, Optional  (str) ifff-encapsulation: <class 'str'>, Optional  (str) ifff-user-mtu: <class 'bool'>}, Optional  (str) address-family-name: <class 'str'>, Optional  (str) filter-information: <class 'str'>, Optional  (str) generation: <class 'str'>, Optional  (str) interface-address: Or ({Optional  (str) ifa-broadcast: <class 'str'>, Optional  (str) ifa-destination: <class 'str'>, Optional  (str) generation: <class 'str'>, 'ifa-flags': {Optional  (str) ifaf-current-default: <class 'bool'>, Optional  (str) ifaf-current-preferred: <class 'bool'>, Optional  (str) ifaf-current-primary: <class 'bool'>, Optional  (str) ifaf-is-primary: <class 'bool'>, Optional  (str) ifaf-is-preferred: <class 'bool'>, Optional  (str) ifaf-kernel: <class 'bool'>, Optional  (str) ifaf-preferred: <class 'bool'>, Optional  (str) ifaf-primary: <class 'bool'>, Optional  (str) ifaf-is-default: <class 'bool'>, Optional  (str) ifaf-none: <class 'bool'>, Optional  (str) ifaf-dest-route-down: <class 'bool'>}, Optional  (str) ifa-local: <class 'str'>}, ListOf  (dict) {Optional  (str) ifa-broadcast: <class 'str'>, Optional  (str) ifa-destination: <class 'str'>, Optional  (str) generation: <class 'str'>, 'ifa-flags': {Optional  (str) ifaf-current-default: <class 'bool'>, Optional  (str) ifaf-current-preferred: <class 'bool'>, Optional  (str) ifaf-current-primary: <class 'bool'>, Optional  (str) ifaf-is-primary: <class 'bool'>, Optional  (str) ifaf-is-preferred: <class 'bool'>, Optional  (str) ifaf-kernel: <class 'bool'>, Optional  (str) ifaf-preferred: <class 'bool'>, Optional  (str) ifaf-primary: <class 'bool'>, Optional  (str) ifaf-is-default: <class 'bool'>, Optional  (str) ifaf-none: <class 'bool'>, Optional  (str) ifaf-dest-route-down: <class 'bool'>}, Optional  (str) ifa-local: <class 'str'>}), Optional  (str) intf-curr-cnt: <class 'str'>, Optional  (str) intf-dropcnt: <class 'str'>, Optional  (str) intf-unresolved-cnt: <class 'str'>, Optional  (str) generation: <class 'str'>, Optional  (str) route-table: <class 'str'>, Optional  (str) max-local-cache: <class 'str'>, Optional  (str) maximum-labels: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) new-hold-limit: <class 'str'>, Optional  (str) policer-information: {Optional  (str) policer-input: <class 'str'>, Optional  (str) policer-output: <class 'str'>}}, Optional  (str) encapsulation: <class 'str'>, Optional  (str) filter-information: <class 'str'>, 'if-config-flags': {'iff-snmp-traps': <class 'bool'>, 'iff-up': <class 'bool'>, Optional  (str) internal-flags: <class 'str'>}, Optional  (str) lag-traffic-statistics: {Optional  (str) aggregate-member-info: {'aggregate-member-count': <class 'str'>}, Optional  (str) if-distribution-list-information: ListOf  (dict) {Optional  (str) if-list: ListOf  (dict) {Optional  (str) if-child-name: <class 'str'>, Optional  (str) if-status: <class 'str'>}, Optional  (str) list-status: <class 'str'>, Optional  (str) list-type: <class 'str'>}, Optional  (str) lag-adaptive-statistics: {'adaptive-adjusts': <class 'str'>, 'adaptive-scans': <class 'str'>, 'adaptive-updates': <class 'str'>}, Optional  (str) lag-bundle: Or (Schema  (dict) {Optional  (str) input-bps: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>}, ListOf  (Schema) Schema  (dict) {Optional  (str) input-bps: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>}), Optional  (str) lag-lacp-info: Or (Schema  (dict) {Optional  (str) lacp-port-key: <class 'str'>, Optional  (str) lacp-port-number: <class 'str'>, Optional  (str) lacp-port-priority: <class 'str'>, Optional  (str) lacp-role: <class 'str'>, Optional  (str) lacp-sys-priority: <class 'str'>, Optional  (str) lacp-system-id: <class 'str'>, Optional  (str) name: <class 'str'>}, ListOf  (Schema) Schema  (dict) {Optional  (str) lacp-port-key: <class 'str'>, Optional  (str) lacp-port-number: <class 'str'>, Optional  (str) lacp-port-priority: <class 'str'>, Optional  (str) lacp-role: <class 'str'>, Optional  (str) lacp-sys-priority: <class 'str'>, Optional  (str) lacp-system-id: <class 'str'>, Optional  (str) name: <class 'str'>}), Optional  (str) lag-lacp-statistics: Or (Schema  (dict) {Optional  (str) illegal-rx-packets: <class 'str'>, Optional  (str) lacp-rx-packets: <class 'str'>, Optional  (str) lacp-tx-packets: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) unknown-rx-packets: <class 'str'>}, ListOf  (Schema) Schema  (dict) {Optional  (str) illegal-rx-packets: <class 'str'>, Optional  (str) lacp-rx-packets: <class 'str'>, Optional  (str) lacp-tx-packets: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) unknown-rx-packets: <class 'str'>}), Optional  (str) lag-link: Or (Schema  (dict) {Optional  (str) input-bps: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>}, ListOf  (Schema) Schema  (dict) {Optional  (str) input-bps: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>}), Optional  (str) lag-marker: Or (Schema  (dict) {Optional  (str) illegal-rx-packets: <class 'str'>, Optional  (str) lacp-rx-packets: <class 'str'>, Optional  (str) lacp-tx-packets: <class 'str'>, Optional  (str) marker-response-tx-packets: <class 'str'>, Optional  (str) marker-rx-packets: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) unknown-rx-packets: <class 'str'>}, ListOf  (Schema) Schema  (dict) {Optional  (str) illegal-rx-packets: <class 'str'>, Optional  (str) lacp-rx-packets: <class 'str'>, Optional  (str) lacp-tx-packets: <class 'str'>, Optional  (str) marker-response-tx-packets: <class 'str'>, Optional  (str) marker-rx-packets: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) unknown-rx-packets: <class 'str'>})}, 'local-index': <class 'str'>, Optional  (str) logical-interface-bandwidth: <class 'str'>, 'name': <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) policer-overhead: <class 'str'>, Optional  (str) snmp-index: <class 'str'>, Optional  (str) traffic-statistics: {Optional  (str) @junos:style: <class 'str'>, 'input-packets': <class 'str'>, Optional  (str) input-bytes: <class 'str'>, 'output-packets': <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) ipv6-transit-statistics: {'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, 'output-bytes': <class 'str'>, 'output-packets': <class 'str'>}}, Optional  (str) transit-traffic-statistics: {'input-bps': <class 'str'>, 'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, 'input-pps': <class 'str'>, Optional  (str) ipv6-transit-statistics: {Optional  (str) input-bps: <class 'str'>, 'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, 'output-bytes': <class 'str'>, 'output-packets': <class 'str'>, Optional  (str) output-pps: <class 'str'>}, 'output-bps': <class 'str'>, 'output-bytes': <class 'str'>, 'output-packets': <class 'str'>, 'output-pps': <class 'str'>}}, Optional  (str) loopback: <class 'str'>, Optional  (str) minimum-links-in-aggregate: <class 'str'>, Optional  (str) minimum-bandwidth-in-aggregate: <class 'str'>, Optional  (str) lsi-traffic-statistics: {Optional  (str) @junos:style: <class 'str'>, 'input-bps': <class 'str'>, 'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, 'input-pps': <class 'str'>}, Optional  (str) mru: <class 'str'>, Optional  (str) mtu: <class 'str'>, Optional  (str) mac-rewrite-error: <class 'str'>, 'name': <class 'str'>, Optional  (str) oper-status: <class 'str'>, Optional  (str) pad-to-minimum-frame-size: <class 'str'>, Optional  (str) physical-interface-cos-information: {'physical-interface-cos-hw-max-queues': <class 'str'>, 'physical-interface-cos-use-max-queues': <class 'str'>}, Optional  (str) snmp-index: <class 'str'>, Optional  (str) sonet-mode: <class 'str'>, Optional  (str) source-filtering: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) stp-traffic-statistics: {Optional  (str) @junos:style: <class 'str'>, Optional  (str) stp-input-bytes-dropped: <class 'str'>, Optional  (str) stp-input-packets-dropped: <class 'str'>, Optional  (str) stp-output-bytes-dropped: <class 'str'>, Optional  (str) stp-output-packets-dropped: <class 'str'>}, Optional  (str) traffic-statistics: {Optional  (str) @junos:style: <class 'str'>, Optional  (str) input-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>, Optional  (str) ipv6-transit-statistics: {Optional  (str) input-bps: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-pps: <class 'str'>}}, Optional  (str) output-error-list: {Optional  (str) aged-packets: <class 'str'>, Optional  (str) carrier-transitions: <class 'str'>, Optional  (str) hs-link-crc-errors: <class 'str'>, Optional  (str) mtu-errors: <class 'str'>, Optional  (str) output-collisions: <class 'str'>, Optional  (str) output-drops: <class 'str'>, Optional  (str) output-errors: <class 'str'>, Optional  (str) output-fifo-errors: <class 'str'>, Optional  (str) output-resource-errors: <class 'str'>}, Optional  (str) ethernet-mac-statistics: {Optional  (str) @junos:style: <class 'str'>, Optional  (str) input-broadcasts: <class 'str'>, Optional  (str) input-bytes: <class 'str'>, Optional  (str) input-code-violations: <class 'str'>, Optional  (str) input-crc-errors: <class 'str'>, Optional  (str) input-fifo-errors: <class 'str'>, Optional  (str) input-fragment-frames: <class 'str'>, Optional  (str) input-jabber-frames: <class 'str'>, Optional  (str) input-mac-control-frames: <class 'str'>, Optional  (str) input-mac-pause-frames: <class 'str'>, Optional  (str) input-multicasts: <class 'str'>, Optional  (str) input-oversized-frames: <class 'str'>, Optional  (str) input-packets: <class 'str'>, Optional  (str) input-total-errors: <class 'str'>, Optional  (str) input-unicasts: <class 'str'>, Optional  (str) input-vlan-tagged-frames: <class 'str'>, Optional  (str) output-broadcasts: <class 'str'>, Optional  (str) input-multicasts: <class 'str'>, Optional  (str) output-bytes: <class 'str'>, Optional  (str) output-crc-errors: <class 'str'>, Optional  (str) output-fifo-errors: <class 'str'>, Optional  (str) output-mac-control-frames: <class 'str'>, Optional  (str) output-mac-pause-frames: <class 'str'>, Optional  (str) output-multicasts: <class 'str'>, Optional  (str) output-packets: <class 'str'>, Optional  (str) output-total-errors: <class 'str'>, Optional  (str) output-unicasts: <class 'str'>}, Optional  (str) ethernet-filter-statistics: {'input-packets': <class 'str'>, 'input-reject-count': <class 'str'>, 'input-reject-destination-address-count': <class 'str'>, 'input-reject-source-address-count': <class 'str'>, 'output-packet-error-count': <class 'str'>, 'output-packet-pad-count': <class 'str'>, 'output-packets': <class 'str'>, 'cam-destination-filter-count': <class 'str'>, 'cam-source-filter-count': <class 'str'>}, Optional  (str) cos-information: {Optional  (str) cos-stream-information: {'cos-direction': <class 'str'>, Optional  (str) cos-queue-configuration: ListOf  (dict) {'cos-queue-bandwidth': <class 'str'>, 'cos-queue-bandwidth-bps': <class 'str'>, 'cos-queue-buffer': <class 'str'>, 'cos-queue-buffer-bytes': <class 'str'>, 'cos-queue-forwarding-class': <class 'str'>, 'cos-queue-limit': <class 'str'>, 'cos-queue-number': <class 'str'>, 'cos-queue-priority': <class 'str'>}}}, Optional  (str) input-error-list: {Optional  (str) framing-errors: <class 'str'>, Optional  (str) input-discards: <class 'str'>, Optional  (str) input-drops: <class 'str'>, Optional  (str) input-errors: <class 'str'>, Optional  (str) input-fifo-errors: <class 'str'>, Optional  (str) input-giants: <class 'str'>, Optional  (str) input-l2-channel-errors: <class 'str'>, Optional  (str) input-l2-mismatch-timeouts: <class 'str'>, Optional  (str) input-l3-incompletes: <class 'str'>, Optional  (str) input-resource-errors: <class 'str'>, Optional  (str) input-runts: <class 'str'>}, Optional  (str) transit-traffic-statistics: {'input-bps': <class 'str'>, 'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, 'input-pps': <class 'str'>, Optional  (str) ipv6-transit-statistics: {Optional  (str) input-bps: <class 'str'>, 'input-bytes': <class 'str'>, 'input-packets': <class 'str'>, Optional  (str) input-pps: <class 'str'>, Optional  (str) output-bps: <class 'str'>, 'output-bytes': <class 'str'>, 'output-packets': <class 'str'>, Optional  (str) output-pps: <class 'str'>}, 'output-bps': <class 'str'>, 'output-bytes': <class 'str'>, 'output-packets': <class 'str'>, 'output-pps': <class 'str'>}, Optional  (str) pfe-information: {'destination-mask': <class 'str'>, 'destination-slot': <class 'str'>}, Optional  (str) ingress-queue-counters: {'interface-cos-short-summary': {'intf-cos-num-queues-in-use': <class 'str'>, 'intf-cos-num-queues-supported': <class 'str'>, 'intf-cos-queue-type': <class 'str'>}, 'queue': ListOf  (Schema) Schema  (dict) {Optional  (str) forwarding-class-name: <class 'str'>, 'queue-counters-queued-packets': <class 'str'>, 'queue-counters-total-drop-packets': <class 'str'>, 'queue-counters-trans-packets': <class 'str'>, 'queue-number': <class 'str'>, Optional  (str) forwarding-class-name: <class 'str'>}}, Optional  (str) queue-counters: {'interface-cos-short-summary': {'intf-cos-num-queues-in-use': <class 'str'>, 'intf-cos-num-queues-supported': <class 'str'>, 'intf-cos-queue-type': <class 'str'>}, 'queue': ListOf  (Schema) Schema  (dict) {Optional  (str) forwarding-class-name: <class 'str'>, 'queue-counters-queued-packets': <class 'str'>, 'queue-counters-total-drop-packets': <class 'str'>, 'queue-counters-trans-packets': <class 'str'>, 'queue-number': <class 'str'>, Optional  (str) forwarding-class-name: <class 'str'>}}, Optional  (str) queue-num-forwarding-class-name-map: ListOf  (dict) {'forwarding-class-name': <class 'str'>, 'queue-number': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py"
    }
  },
  "Verify_InterfacesAccounting": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ",
      "exclude": [],
      "groups": [
        "interface"
      ],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'accounting': {Any  (str) *: {'pkts_in': <class 'int'>, 'pkts_out': <class 'int'>, 'chars_in': <class 'int'>, 'chars_out': <class 'int'>, Optional  (str) rxbs: <class 'int'>, Optional  (str) rxps: <class 'int'>, Optional  (str) txbs: <class 'int'>, Optional  (str) txps: <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'accounting': {Any  (str) *: {'pkts_in': <class 'int'>, 'pkts_out': <class 'int'>, 'chars_in': <class 'int'>, 'chars_out': <class 'int'>, Optional  (str) rxbs: <class 'int'>, Optional  (str) rxps: <class 'int'>, Optional  (str) txbs: <class 'int'>, Optional  (str) txps: <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {'accounting': {Any  (str) *: {'pkts_in': <class 'int'>, 'pkts_out': <class 'int'>, 'chars_in': <class 'int'>, 'chars_out': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_InterfacesDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show interface detail\n                    show interface <interface> detail\n    ",
      "exclude": [],
      "groups": [
        "bgp"
      ],
      "iteration": {
        "attempt": 4,
        "interval": 5
      },
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, Optional  (str) types: <class 'str'>, Optional  (str) phys_address: <class 'str'>, Optional  (str) port_speed: <class 'str'>, Optional  (str) mtu: <class 'int'>, Optional  (str) line_protocol: <class 'str'>, Optional  (str) oper_status: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) auto_negotiate: <class 'bool'>, Optional  (str) duplex_mode: <class 'str'>, Optional  (str) location: <class 'str'>, Optional  (str) medium: <class 'str'>, Optional  (str) txload: <class 'str'>, Optional  (str) rxload: <class 'str'>, Optional  (str) last_input: <class 'str'>, Optional  (str) last_output: <class 'str'>, Optional  (str) last_link_flapped: <class 'str'>, Optional  (str) arp_type: <class 'str'>, Optional  (str) arp_timeout: <class 'str'>, Optional  (str) loopback_status: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) interface_state: <class 'int'>, Optional  (str) carrier_delay: <class 'str'>, Optional  (str) flow_control: {Optional  (str) flow_control_receive: <class 'bool'>, Optional  (str) flow_control_send: <class 'bool'>}, Optional  (str) bandwidth: <class 'int'>, Optional  (str) counters: {Optional  (str) rate: {Optional  (str) load_interval: <class 'int'>, Optional  (str) in_rate: <class 'int'>, Optional  (str) in_rate_pkts: <class 'int'>, Optional  (str) out_rate: <class 'int'>, Optional  (str) out_rate_pkts: <class 'int'>}, Optional  (str) in_discards: <class 'int'>, Optional  (str) in_unknown_protos: <class 'int'>, Optional  (str) in_octets: <class 'int'>, Optional  (str) in_pkts: <class 'int'>, Optional  (str) in_multicast_pkts: <class 'int'>, Optional  (str) in_broadcast_pkts: <class 'int'>, Optional  (str) in_runts: <class 'int'>, Optional  (str) in_giants: <class 'int'>, Optional  (str) in_throttles: <class 'int'>, Optional  (str) in_parity: <class 'int'>, Optional  (str) in_frame_errors: <class 'int'>, Optional  (str) in_crc_errors: <class 'int'>, Optional  (str) in_frame: <class 'int'>, Optional  (str) in_overrun: <class 'int'>, Optional  (str) in_ignored: <class 'int'>, Optional  (str) in_abort: <class 'int'>, Optional  (str) out_pkts: <class 'int'>, Optional  (str) out_octets: <class 'int'>, Optional  (str) out_discards: <class 'int'>, Optional  (str) out_broadcast_pkts: <class 'int'>, Optional  (str) out_multicast_pkts: <class 'int'>, Optional  (str) out_errors: <class 'int'>, Optional  (str) out_underruns: <class 'int'>, Optional  (str) out_applique: <class 'int'>, Optional  (str) out_resets: <class 'int'>, Optional  (str) out_buffer_failures: <class 'int'>, Optional  (str) out_buffer_swapped_out: <class 'int'>, Optional  (str) last_clear: <class 'str'>, Optional  (str) carrier_transitions: <class 'int'>}, Optional  (str) encapsulations: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) first_dot1q: <class 'str'>, Optional  (str) second_dot1q: <class 'str'>}, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_InterfacesSwitchport": {
    "ios": {
      "doc": "Parser for show interfaces switchport",
      "groups": [],
      "schema": "{Any  (str) *: {'switchport_enable': <class 'bool'>, 'switchport_mode': <class 'str'>, Optional  (str) operational_mode: <class 'str'>, Optional  (str) port_channel: {Optional  (str) port_channel_int: <class 'str'>, Optional  (str) port_channel_member_intfs: <class 'list'>, Optional  (str) port_channel_member: <class 'bool'>}, Optional  (str) encapsulation: {Optional  (str) administrative_encapsulation: <class 'str'>, Optional  (str) operational_encapsulation: <class 'str'>, Optional  (str) native_vlan: <class 'str'>, Optional  (str) native_vlan_name: <class 'str'>}, Optional  (str) negotiation_of_trunk: <class 'bool'>, Optional  (str) access_vlan: <class 'str'>, Optional  (str) access_vlan_name: <class 'str'>, Optional  (str) voice_vlan: <class 'str'>, Optional  (str) voice_vlan_name: <class 'str'>, Optional  (str) native_vlan_tagging: <class 'bool'>, Optional  (str) private_vlan: {Optional  (str) host_association: <class 'str'>, Optional  (str) mapping: <class 'str'>, Optional  (str) native_vlan: <class 'str'>, Optional  (str) native_vlan_tagging: <class 'bool'>, Optional  (str) encapsulation: <class 'str'>, Optional  (str) normal_vlans: <class 'str'>, Optional  (str) associations: <class 'str'>, Optional  (str) trunk_mappings: <class 'str'>, Optional  (str) operational: <class 'str'>}, Optional  (str) trunk_vlans: <class 'str'>, Optional  (str) pruning_vlans: <class 'str'>, Optional  (str) capture_mode: <class 'bool'>, Optional  (str) capture_vlans: <class 'str'>, Optional  (str) protected: <class 'bool'>, Optional  (str) unknown_unicast_blocked: <class 'bool'>, Optional  (str) unknown_multicast_blocked: <class 'bool'>, Optional  (str) appliance_trust: <class 'str'>, Optional  (str) admin_ethertype: <class 'str'>, Optional  (str) oper_ethertype: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "\n    parser for show interfaces switchport\n\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {'switchport_enable': <class 'bool'>, 'switchport_mode': <class 'str'>, Optional  (str) operational_mode: <class 'str'>, Optional  (str) port_channel: {Optional  (str) port_channel_int: <class 'str'>, Optional  (str) port_channel_member_intfs: <class 'list'>, Optional  (str) port_channel_member: <class 'bool'>}, Optional  (str) encapsulation: {Optional  (str) administrative_encapsulation: <class 'str'>, Optional  (str) operational_encapsulation: <class 'str'>, Optional  (str) native_vlan: <class 'str'>, Optional  (str) native_vlan_name: <class 'str'>}, Optional  (str) negotiation_of_trunk: <class 'bool'>, Optional  (str) access_vlan: <class 'str'>, Optional  (str) access_vlan_name: <class 'str'>, Optional  (str) voice_vlan: <class 'str'>, Optional  (str) voice_vlan_name: <class 'str'>, Optional  (str) native_vlan_tagging: <class 'bool'>, Optional  (str) private_vlan: {Optional  (str) host_association: <class 'str'>, Optional  (str) mapping: <class 'str'>, Optional  (str) native_vlan: <class 'str'>, Optional  (str) native_vlan_tagging: <class 'bool'>, Optional  (str) encapsulation: <class 'str'>, Optional  (str) normal_vlans: <class 'str'>, Optional  (str) associations: <class 'str'>, Optional  (str) trunk_mappings: <class 'str'>, Optional  (str) operational: <class 'str'>}, Optional  (str) trunk_vlans: <class 'str'>, Optional  (str) pruning_vlans: <class 'str'>, Optional  (str) capture_mode: <class 'bool'>, Optional  (str) capture_vlans: <class 'str'>, Optional  (str) protected: <class 'bool'>, Optional  (str) unknown_unicast_blocked: <class 'bool'>, Optional  (str) unknown_multicast_blocked: <class 'bool'>, Optional  (str) appliance_trust: <class 'str'>, Optional  (str) admin_ethertype: <class 'str'>, Optional  (str) oper_ethertype: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    }
  },
  "Verify_InterfacesTerse": {
    "junos": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n            - show interfaces terse\n            - show interfaces {interface} terse\n            - show interfaces terse {interface}\n    ",
      "exclude": [],
      "groups": [
        "junos"
      ],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, Optional  (str) link_state: <class 'str'>, Optional  (str) admin_state: <class 'str'>, Optional  (str) phys_address: <class 'str'>, 'enabled': <class 'bool'>, Optional  (str) protocol: {Any  (str) *: {Optional  (Any) Any  (str) *: {'local': <class 'str'>, Optional  (str) remote: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py"
    }
  },
  "Verify_InterfacesTrunk": {
    "ios": {
      "doc": "Parser for show interfaces trunk",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {'name': <class 'str'>, 'mode': <class 'str'>, 'encapsulation': <class 'str'>, 'status': <class 'str'>, 'native_vlan': <class 'str'>, 'vlans_allowed_on_trunk': <class 'str'>, 'vlans_allowed_active_in_mgmt_domain': <class 'str'>, 'vlans_in_stp_forwarding_not_pruned': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "parser for show interfaces trunk",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {'name': <class 'str'>, 'mode': <class 'str'>, 'encapsulation': <class 'str'>, 'status': <class 'str'>, 'native_vlan': <class 'str'>, 'vlans_allowed_on_trunk': <class 'str'>, 'vlans_allowed_active_in_mgmt_domain': <class 'str'>, 'vlans_in_stp_forwarding_not_pruned': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    }
  },
  "Verify_Inventory": {
    "generic": {
      "doc": "Parser for show inventory\n    ",
      "groups": [],
      "schema": "{'inventory_item_index': {<class 'int'>: {'name': <class 'str'>, 'description': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/generic/show_platform.py"
    },
    "ios": {
      "asr901": {
        "doc": "\n    Parser for:\n        * show inventory\n    ",
        "groups": [],
        "schema": "{Optional  (str) main: {Optional  (str) swstack: <class 'bool'>, Optional  (Any) Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}, Optional  (str) slot: {Any  (str) *: {Optional  (str) rp: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) lc: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) other: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/asr901/show_platform.py"
      },
      "c7600": {
        "doc": "\n    Parser for command:\n        * show inventory\n    ",
        "groups": [],
        "schema": "{'index': {Any  (str) *: {'name': <class 'str'>, 'descr': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py"
      },
      "cat6k": {
        "doc": "\n    Parser for:\n        * show inventory\n    ",
        "groups": [],
        "schema": "{'index': {Any  (str) *: {'name': <class 'str'>, 'descr': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for:\n        * show inventory\n    ",
      "exclude": [],
      "groups": [
        "platform"
      ],
      "schema": "{Optional  (str) main: {Optional  (str) swstack: <class 'bool'>, Optional  (Any) Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}, Optional  (str) slot: {Any  (str) *: {Optional  (str) rp: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) lc: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) other: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9300": {
        "doc": "\n    Parser for :\n        * show inventory\n    ",
        "groups": [],
        "schema": "{'index': {Any  (str) *: {'name': <class 'str'>, 'descr': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9300/show_platform.py"
      },
      "c9500": {
        "doc": " Parser for:\n        * 'show inventory'\n    ",
        "groups": [],
        "schema": "{'index': {Any  (str) *: {'name': <class 'str'>, 'descr': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show inventory'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) main: {Optional  (str) swstack: <class 'bool'>, Optional  (Any) Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}, Optional  (str) slot: {Any  (str) *: {Optional  (str) rp: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) lc: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}, Optional  (str) other: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>, Optional  (str) swstack_power: <class 'str'>, Optional  (str) swstack_power_sn: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) descr: <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) sn: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show inventory",
      "exclude": [],
      "groups": [],
      "schema": "{'module_name': {Any  (str) *: {'descr': <class 'str'>, 'pid': <class 'str'>, 'vid': <class 'str'>, Optional  (str) sn: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show inventory",
      "exclude": [],
      "groups": [],
      "schema": "{'name': {Any  (str) *: {'description': <class 'str'>, 'slot': <class 'str'>, Optional  (str) pid: <class 'str'>, Optional  (str) vid: <class 'str'>, Optional  (str) serial_number: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_IpArp": {
    "ios": {
      "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ",
      "groups": [],
      "schema": "{Optional  (str) global_static_table: {Any  (str) *: {'ip_address': <class 'str'>, 'mac_address': <class 'str'>, 'encap_type': <class 'str'>, 'age': <class 'str'>, 'protocol': <class 'str'>}}, Optional  (str) interfaces: {Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'origin': <class 'str'>, 'age': <class 'str'>, 'type': <class 'str'>, 'protocol': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py"
    },
    "iosxe": {
      "doc": "Parser for 'show ip arp,  show ip arp vrf <vrf>",
      "groups": [],
      "schema": "{Optional  (str) global_static_table: {Any  (str) *: {'ip_address': <class 'str'>, 'mac_address': <class 'str'>, 'encap_type': <class 'str'>, 'age': <class 'str'>, 'protocol': <class 'str'>}}, Optional  (str) interfaces: {Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'origin': <class 'str'>, 'age': <class 'str'>, 'type': <class 'str'>, 'protocol': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n\t\tshow ip arp\n\t\tshow ip arp vrf {vrf}\n\t\tshow ip arp vrf all\n\t",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) statistics: {Optional  (str) entries_total: <class 'int'>}, 'interfaces': {Any  (str) *: {'ipv4': {'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'age': <class 'str'>, 'origin': <class 'str'>, 'physical_interface': <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) flags: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py"
    }
  },
  "Verify_IpBgpAllDampeningParameters": {
    "ios": {
      "doc": "Parser for show ip bgp all dampening parameters",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) dampening_decay_time: <class 'int'>, Optional  (str) dampening_half_life_time: <class 'int'>, Optional  (str) dampening_reuse_time: <class 'int'>, Optional  (str) dampening_max_suppress_penalty: <class 'int'>, Optional  (str) dampening_suppress_time: <class 'int'>, Optional  (str) dampening_max_suppress_time: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show ip bgp all dampening parameters\" ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) dampening: <class 'bool'>, Optional  (str) dampening_decay_time: <class 'int'>, Optional  (str) dampening_half_life_time: <class 'int'>, Optional  (str) dampening_reuse_time: <class 'int'>, Optional  (str) dampening_max_suppress_penalty: <class 'int'>, Optional  (str) dampening_suppress_time: <class 'int'>, Optional  (str) dampening_max_suppress_time: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_IpBgpTemplatePeerPolicy": {
    "ios": {
      "doc": "Parser for show ip bgp template peer-policy <WORD>",
      "groups": [],
      "schema": "{'peer_policy': {Any  (str) *: {Optional  (str) local_policies: <class 'str'>, Optional  (str) inherited_polices: <class 'str'>, Optional  (str) local_disable_policies: <class 'str'>, Optional  (str) inherited_disable_polices: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'int'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'bool'>, Optional  (str) soo: <class 'str'>, Optional  (str) index: <class 'int'>, Optional  (str) inherited_policies: {Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'int'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'bool'>, Optional  (str) soo: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show ip bgp template peer-policy {template_name}\" ",
      "exclude": [],
      "groups": [],
      "schema": "{'peer_policy': {Any  (str) *: {Optional  (str) local_policies: <class 'str'>, Optional  (str) inherited_polices: <class 'str'>, Optional  (str) local_disable_policies: <class 'str'>, Optional  (str) inherited_disable_polices: <class 'str'>, Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'int'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'bool'>, Optional  (str) soo: <class 'str'>, Optional  (str) index: <class 'int'>, Optional  (str) inherited_policies: {Optional  (str) allowas_in: <class 'bool'>, Optional  (str) allowas_in_as_number: <class 'int'>, Optional  (str) as_override: <class 'bool'>, Optional  (str) default_originate: <class 'bool'>, Optional  (str) default_originate_route_map: <class 'str'>, Optional  (str) route_map_name_in: <class 'str'>, Optional  (str) route_map_name_out: <class 'str'>, Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) maximum_prefix_threshold: <class 'int'>, Optional  (str) maximum_prefix_restart: <class 'int'>, Optional  (str) maximum_prefix_warning_only: <class 'bool'>, Optional  (str) next_hop_self: <class 'bool'>, Optional  (str) route_reflector_client: <class 'bool'>, Optional  (str) send_community: <class 'str'>, Optional  (str) soft_reconfiguration: <class 'bool'>, Optional  (str) soo: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_IpBgpTemplatePeerSession": {
    "ios": {
      "doc": "Parser for show ip bgp template peer-session <WORD>",
      "groups": [],
      "schema": "{'peer_session': {Any  (str) *: {Optional  (str) local_policies: <class 'str'>, Optional  (str) inherited_polices: <class 'str'>, Optional  (str) fall_over_bfd: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) password_text: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) index: <class 'int'>, Optional  (str) inherited_session_commands: {Optional  (str) fall_over_bfd: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) password_text: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) update_source: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show ip bgp template peer-session {template_name}\" ",
      "exclude": [],
      "groups": [],
      "schema": "{'peer_session': {Any  (str) *: {Optional  (str) local_policies: <class 'str'>, Optional  (str) inherited_polices: <class 'str'>, Optional  (str) fall_over_bfd: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) password_text: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) update_source: <class 'str'>, Optional  (str) index: <class 'int'>, Optional  (str) inherited_session_commands: {Optional  (str) fall_over_bfd: <class 'bool'>, Optional  (str) suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) disable_connected_check: <class 'bool'>, Optional  (str) ebgp_multihop_enable: <class 'bool'>, Optional  (str) ebgp_multihop_max_hop: <class 'int'>, Optional  (str) local_as_as_no: <class 'int'>, Optional  (str) password_text: <class 'str'>, Optional  (str) remote_as: <class 'int'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) transport_connection_mode: <class 'str'>, Optional  (str) update_source: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py"
    }
  },
  "Verify_IpIgmpGroupsDetail": {
    "ios": {
      "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>, Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) v3_exp: <class 'str'>, Optional  (str) csr_exp: <class 'str'>, Optional  (str) forward: <class 'bool'>, Optional  (str) source_flags: <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>, Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) v3_exp: <class 'str'>, Optional  (str) csr_exp: <class 'str'>, Optional  (str) forward: <class 'bool'>, Optional  (str) source_flags: <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'group_mode': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) source: {Any  (str) *: {'v3_exp': <class 'str'>, 'csr_exp': <class 'str'>, 'forward': <class 'bool'>, Optional  (str) flags: <class 'str'>, 'up_time': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>, Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) v3_exp: <class 'str'>, Optional  (str) csr_exp: <class 'str'>, Optional  (str) forward: <class 'bool'>, Optional  (str) source_flags: <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>, Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) v3_exp: <class 'str'>, Optional  (str) csr_exp: <class 'str'>, Optional  (str) forward: <class 'bool'>, Optional  (str) source_flags: <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) expire: <class 'str'>, 'up_time': <class 'str'>, 'group_mode': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) source: {Any  (str) *: {'v3_exp': <class 'str'>, 'csr_exp': <class 'str'>, 'forward': <class 'bool'>, Optional  (str) flags: <class 'str'>, 'up_time': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py"
    }
  },
  "Verify_IpIgmpGroups_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {'total_entries': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'expire': <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) expire: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpGroups_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrfs': {Any  (str) *: {'total_entries': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'expire': <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) expire: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpInterface_vrf_all": {
    "ios": {
      "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) global_max_groups: <class 'int'>, Optional  (str) global_active_groups: <class 'int'>, 'interface': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) interface_address: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) host_version: <class 'int'>, Optional  (str) router_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) last_member_query_count: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) multicast: {Optional  (str) routing_enable: <class 'bool'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) designated_router: <class 'str'>, Optional  (str) routing_table: <class 'str'>, Optional  (str) dr_this_system: <class 'bool'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>, Optional  (str) joined_group: {Any  (str) *: {'number_of_users': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py"
    },
    "iosxe": {
      "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) global_max_groups: <class 'int'>, Optional  (str) global_active_groups: <class 'int'>, 'interface': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) interface_address: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) host_version: <class 'int'>, Optional  (str) router_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) last_member_query_count: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) multicast: {Optional  (str) routing_enable: <class 'bool'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) designated_router: <class 'str'>, Optional  (str) routing_table: <class 'str'>, Optional  (str) dr_this_system: <class 'bool'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>, Optional  (str) joined_group: {Any  (str) *: {'number_of_users': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {'groups_count': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'enable': <class 'bool'>, 'link_status': <class 'str'>, 'oper_status': <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) subnet: <class 'str'>, Optional  (str) querier: <class 'str'>, Optional  (str) querier_version: <class 'int'>, Optional  (str) expires: <class 'str'>, Optional  (str) next_query_sent_in: <class 'str'>, Optional  (str) membership_count: <class 'int'>, Optional  (str) old_membership_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) host_version: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_max_response_time: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) startup_query: {Optional  (str) configured_interval: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) count: <class 'int'>}, Optional  (str) last_member: {Optional  (str) mrt: <class 'int'>, Optional  (str) query_count: <class 'int'>}, Optional  (str) configured_group_timeout: <class 'int'>, Optional  (str) group_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) unsolicited_report_interval: <class 'int'>, Optional  (str) configured_robustness_variable: <class 'int'>, Optional  (str) robustness_variable: <class 'int'>, Optional  (str) link_local_groups_reporting: <class 'bool'>, Optional  (str) enable_refcount: <class 'int'>, Optional  (str) immediate_leave: <class 'bool'>, Optional  (str) vrf_name: <class 'str'>, Optional  (str) vrf_id: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) available_groups: <class 'int'>, Optional  (str) statistics: {Optional  (str) general: {'sent': {Optional  (str) v2_queries: <class 'int'>, Optional  (str) v2_reports: <class 'int'>, Optional  (str) v2_leaves: <class 'int'>, Optional  (str) v3_queries: <class 'int'>, Optional  (str) v3_reports: <class 'int'>}, 'received': {Optional  (str) v2_queries: <class 'int'>, Optional  (str) v2_reports: <class 'int'>, Optional  (str) v2_leaves: <class 'int'>, Optional  (str) v3_queries: <class 'int'>, Optional  (str) v3_reports: <class 'int'>}}, Optional  (str) errors: {'router_alert_check': <class 'int'>}}, Optional  (str) pim_dr: <class 'bool'>, Optional  (str) vpc_svi: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpInterface_vrf_default": {
    "ios": {
      "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) global_max_groups: <class 'int'>, Optional  (str) global_active_groups: <class 'int'>, 'interface': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) interface_address: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) host_version: <class 'int'>, Optional  (str) router_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) last_member_query_count: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) multicast: {Optional  (str) routing_enable: <class 'bool'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) designated_router: <class 'str'>, Optional  (str) routing_table: <class 'str'>, Optional  (str) dr_this_system: <class 'bool'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>, Optional  (str) joined_group: {Any  (str) *: {'number_of_users': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) global_max_groups: <class 'int'>, Optional  (str) global_active_groups: <class 'int'>, 'interface': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) interface_address: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) host_version: <class 'int'>, Optional  (str) router_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) last_member_query_count: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) multicast: {Optional  (str) routing_enable: <class 'bool'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) designated_router: <class 'str'>, Optional  (str) routing_table: <class 'str'>, Optional  (str) dr_this_system: <class 'bool'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>, Optional  (str) joined_group: {Any  (str) *: {'number_of_users': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{'vrfs': {Any  (str) *: {'groups_count': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'enable': <class 'bool'>, 'link_status': <class 'str'>, 'oper_status': <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) subnet: <class 'str'>, Optional  (str) querier: <class 'str'>, Optional  (str) querier_version: <class 'int'>, Optional  (str) expires: <class 'str'>, Optional  (str) next_query_sent_in: <class 'str'>, Optional  (str) membership_count: <class 'int'>, Optional  (str) old_membership_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) host_version: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_max_response_time: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) startup_query: {Optional  (str) configured_interval: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) count: <class 'int'>}, Optional  (str) last_member: {Optional  (str) mrt: <class 'int'>, Optional  (str) query_count: <class 'int'>}, Optional  (str) configured_group_timeout: <class 'int'>, Optional  (str) group_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) unsolicited_report_interval: <class 'int'>, Optional  (str) configured_robustness_variable: <class 'int'>, Optional  (str) robustness_variable: <class 'int'>, Optional  (str) link_local_groups_reporting: <class 'bool'>, Optional  (str) enable_refcount: <class 'int'>, Optional  (str) immediate_leave: <class 'bool'>, Optional  (str) vrf_name: <class 'str'>, Optional  (str) vrf_id: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) available_groups: <class 'int'>, Optional  (str) statistics: {Optional  (str) general: {'sent': {Optional  (str) v2_queries: <class 'int'>, Optional  (str) v2_reports: <class 'int'>, Optional  (str) v2_leaves: <class 'int'>, Optional  (str) v3_queries: <class 'int'>, Optional  (str) v3_reports: <class 'int'>}, 'received': {Optional  (str) v2_queries: <class 'int'>, Optional  (str) v2_reports: <class 'int'>, Optional  (str) v2_leaves: <class 'int'>, Optional  (str) v3_queries: <class 'int'>, Optional  (str) v3_reports: <class 'int'>}}, Optional  (str) errors: {'router_alert_check': <class 'int'>}}, Optional  (str) pim_dr: <class 'bool'>, Optional  (str) vpc_svi: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpLocalGroups_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) interface: {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpLocalGroups_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) interface: {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpIgmpSnooping": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip igmp snooping",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{Optional  (str) global_configuration: {Optional  (str) enabled: <class 'str'>, Optional  (str) v1v2_report_suppression: <class 'str'>, Optional  (str) v3_report_suppression: <class 'str'>, Optional  (str) link_local_groups_suppression: <class 'str'>, Optional  (str) vpc_multicast_optimization: <class 'str'>}, 'vlans': {Any  (str) *: {Optional  (str) ip_igmp_snooping: <class 'str'>, Optional  (str) lookup_mode: <class 'str'>, Optional  (str) v1v2_report_suppression: <class 'str'>, Optional  (str) v3_report_suppression: <class 'str'>, Optional  (str) link_local_groups_suppression: <class 'str'>, Optional  (str) igmp_querier: {Optional  (str) address: <class 'str'>, Optional  (str) version: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) robustness: <class 'int'>}, Optional  (str) switch_querier: <class 'str'>, Optional  (str) igmp_explicit_tracking: <class 'str'>, Optional  (str) v2_fast_leave: <class 'str'>, Optional  (str) router_ports_count: <class 'int'>, Optional  (str) groups_count: <class 'int'>, Optional  (str) vlan_vpc_function: <class 'str'>, Optional  (str) active_ports: <class 'list'>, Optional  (str) report_flooding: <class 'str'>, Optional  (str) report_flooding_interfaces: <class 'str'>, Optional  (str) group_address_for_proxy_leaves: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py"
    }
  },
  "Verify_IpInterface": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface",
      "exclude": [],
      "groups": [
        "interface"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'enabled': <class 'bool'>, 'oper_status': <class 'str'>, Optional  (str) ipv4: {Any  (str) *: {'ip': <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>, Optional  (str) broadcast_address: <class 'str'>}}, Optional  (str) mtu: <class 'int'>, Optional  (str) address_determined_by: <class 'str'>, Optional  (str) helper_address: Or (<class 'str'>, <class 'list'>), Optional  (str) directed_broadcast_forwarding: <class 'bool'>, Optional  (str) outbound_common_access_list: <class 'str'>, Optional  (str) outbound_access_list: <class 'str'>, Optional  (str) inbound_common_access_list: <class 'str'>, Optional  (str) inbound_access_list: <class 'str'>, Optional  (str) proxy_arp: <class 'bool'>, Optional  (str) local_proxy_arp: <class 'bool'>, Optional  (str) security_level: <class 'str'>, Optional  (str) split_horizon: <class 'bool'>, Optional  (str) icmp: {Optional  (str) redirects: <class 'str'>, Optional  (str) unreachables: <class 'str'>, Optional  (str) mask_replies: <class 'str'>}, Optional  (str) wccp: {Optional  (str) redirect_outbound: <class 'bool'>, Optional  (str) redirect_inbound: <class 'bool'>, Optional  (str) redirect_exclude: <class 'bool'>}, Optional  (str) ip_fast_switching: <class 'bool'>, Optional  (str) ip_flow_switching: <class 'bool'>, Optional  (str) ip_cef_switching: <class 'bool'>, Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>, Optional  (str) ip_null_turbo_vector: <class 'bool'>, Optional  (str) vrf: <class 'str'>, Optional  (str) unicast_routing_topologies: {'topology': {Any  (str) *: {'status': <class 'str'>}}}, Optional  (str) ip_multicast_fast_switching: <class 'bool'>, Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>, Optional  (str) ip_route_cache_flags: <class 'list'>, Optional  (str) router_discovery: <class 'bool'>, Optional  (str) ip_output_packet_accounting: <class 'bool'>, Optional  (str) ip_access_violation_accounting: <class 'bool'>, Optional  (str) tcp_ip_header_compression: <class 'bool'>, Optional  (str) rtp_ip_header_compression: <class 'bool'>, Optional  (str) probe_proxy_name_replies: <class 'bool'>, Optional  (str) policy_routing: <class 'bool'>, Optional  (str) network_address_translation: <class 'bool'>, Optional  (str) bgp_policy_mapping: <class 'bool'>, Optional  (str) input_features: <class 'list'>, Optional  (str) multicast_groups: <class 'list'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface\n                  show ip interface <interface>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'enabled': <class 'bool'>, 'oper_status': <class 'str'>, Optional  (str) ipv4: {Any  (str) *: {'ip': <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>, Optional  (str) broadcast_address: <class 'str'>}}, Optional  (str) mtu: <class 'int'>, Optional  (str) address_determined_by: <class 'str'>, Optional  (str) helper_address: Or (<class 'str'>, <class 'list'>), Optional  (str) directed_broadcast_forwarding: <class 'bool'>, Optional  (str) outbound_common_access_list: <class 'str'>, Optional  (str) outbound_access_list: <class 'str'>, Optional  (str) inbound_common_access_list: <class 'str'>, Optional  (str) inbound_access_list: <class 'str'>, Optional  (str) proxy_arp: <class 'bool'>, Optional  (str) local_proxy_arp: <class 'bool'>, Optional  (str) security_level: <class 'str'>, Optional  (str) split_horizon: <class 'bool'>, Optional  (str) icmp: {Optional  (str) redirects: <class 'str'>, Optional  (str) unreachables: <class 'str'>, Optional  (str) mask_replies: <class 'str'>}, Optional  (str) wccp: {Optional  (str) redirect_outbound: <class 'bool'>, Optional  (str) redirect_inbound: <class 'bool'>, Optional  (str) redirect_exclude: <class 'bool'>}, Optional  (str) ip_fast_switching: <class 'bool'>, Optional  (str) ip_flow_switching: <class 'bool'>, Optional  (str) ip_cef_switching: <class 'bool'>, Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>, Optional  (str) ip_null_turbo_vector: <class 'bool'>, Optional  (str) vrf: <class 'str'>, Optional  (str) unicast_routing_topologies: {'topology': {Any  (str) *: {'status': <class 'str'>}}}, Optional  (str) ip_multicast_fast_switching: <class 'bool'>, Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>, Optional  (str) ip_route_cache_flags: <class 'list'>, Optional  (str) router_discovery: <class 'bool'>, Optional  (str) ip_output_packet_accounting: <class 'bool'>, Optional  (str) ip_access_violation_accounting: <class 'bool'>, Optional  (str) tcp_ip_header_compression: <class 'bool'>, Optional  (str) rtp_ip_header_compression: <class 'bool'>, Optional  (str) probe_proxy_name_replies: <class 'bool'>, Optional  (str) policy_routing: <class 'bool'>, Optional  (str) network_address_translation: <class 'bool'>, Optional  (str) bgp_policy_mapping: <class 'bool'>, Optional  (str) input_features: <class 'list'>, Optional  (str) multicast_groups: <class 'list'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    }
  },
  "Verify_IpInterfaceBrief": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for: show ip interface brief",
      "exclude": [],
      "groups": [
        "interface"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface brief",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) protocol_status: <class 'str'>, Optional  (str) vrf_name: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface brief",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpInterfaceBriefPipeVlan": {
    "ios": {
      "doc": "Parser for: show ip interface brief | include Vlan",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n     show ip interface brief | include Vlan\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface brief | include Vlan",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) protocol_status: <class 'str'>, Optional  (str) vrf_name: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface brief | include Vlan",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpInterfaceBriefPipeVlan_yang": {
    "ios": {
      "doc": "Parser for: show ip interface brief | include Vlan",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "doc": "Parser for:\n     show ip interface brief | include Vlan\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "doc": "Parser for show ip interface brief | include Vlan",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) protocol_status: <class 'str'>, Optional  (str) vrf_name: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "nxos": {
      "doc": "Parser for show ip interface brief | include Vlan",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpInterfaceBriefVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface brief vrf all",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vrf: <class 'str'>, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpInterfaceBrief_yang": {
    "ios": {
      "doc": "Parser for: show ip interface brief",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_is_ok: <class 'str'>, Optional  (str) method: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) protocol: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "doc": "Parser for show ip interface brief",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) protocol_status: <class 'str'>, Optional  (str) vrf_name: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    },
    "nxos": {
      "doc": "Parser for show ip interface brief",
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {Optional  (str) vlan_id: {Optional  (Any) Any  (str) *: {'ip_address': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}, Optional  (str) ip_address: <class 'str'>, Optional  (str) interface_status: <class 'str'>, Optional  (str) ipaddress_extension: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpInterfaceVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip interface vrf all\n        show ip interface vrf <vrf>\n        show ip interface <interface> vrf all\n        show ip interface <interface> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{Any  (str) *: {'vrf': <class 'str'>, 'interface_status': <class 'str'>, 'iod': <class 'int'>, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>, Optional  (str) route_tag: <class 'str'>, Optional  (str) ip_subnet: <class 'str'>, Optional  (str) broadcast_address: <class 'str'>, Optional  (str) route_preference: <class 'str'>}, Optional  (str) unnumbered: {'interface_ref': <class 'str'>}, 'counters': {'unicast_packets_sent': <class 'int'>, 'unicast_packets_received': <class 'int'>, 'unicast_packets_forwarded': <class 'int'>, 'unicast_packets_originated': <class 'int'>, 'unicast_packets_consumed': <class 'int'>, 'unicast_bytes_sent': <class 'int'>, 'unicast_bytes_received': <class 'int'>, 'unicast_bytes_forwarded': <class 'int'>, 'unicast_bytes_originated': <class 'int'>, 'unicast_bytes_consumed': <class 'int'>, 'multicast_packets_sent': <class 'int'>, 'multicast_packets_received': <class 'int'>, 'multicast_packets_forwarded': <class 'int'>, 'multicast_packets_originated': <class 'int'>, 'multicast_packets_consumed': <class 'int'>, 'multicast_bytes_sent': <class 'int'>, 'multicast_bytes_received': <class 'int'>, 'multicast_bytes_forwarded': <class 'int'>, 'multicast_bytes_originated': <class 'int'>, 'multicast_bytes_consumed': <class 'int'>, 'broadcast_packets_sent': <class 'int'>, 'broadcast_packets_received': <class 'int'>, 'broadcast_packets_forwarded': <class 'int'>, 'broadcast_packets_originated': <class 'int'>, 'broadcast_packets_consumed': <class 'int'>, 'broadcast_bytes_sent': <class 'int'>, 'broadcast_bytes_received': <class 'int'>, 'broadcast_bytes_forwarded': <class 'int'>, 'broadcast_bytes_originated': <class 'int'>, 'broadcast_bytes_consumed': <class 'int'>, 'labeled_packets_sent': <class 'int'>, 'labeled_packets_received': <class 'int'>, 'labeled_packets_forwarded': <class 'int'>, 'labeled_packets_originated': <class 'int'>, 'labeled_packets_consumed': <class 'int'>, 'labeled_bytes_sent': <class 'int'>, 'labeled_bytes_received': <class 'int'>, 'labeled_bytes_forwarded': <class 'int'>, 'labeled_bytes_originated': <class 'int'>, 'labeled_bytes_consumed': <class 'int'>}}, Optional  (str) multicast_groups: <class 'list'>, Optional  (str) multicast_groups_address: <class 'str'>, 'ip_mtu': <class 'int'>, 'proxy_arp': <class 'str'>, 'local_proxy_arp': <class 'str'>, 'multicast_routing': <class 'str'>, 'icmp_redirects': <class 'str'>, 'directed_broadcast': <class 'str'>, Optional  (str) ip_forwarding: <class 'str'>, 'icmp_unreachable': <class 'str'>, 'icmp_port_unreachable': <class 'str'>, 'unicast_reverse_path': <class 'str'>, 'load_sharing': <class 'str'>, 'int_stat_last_reset': <class 'str'>, Optional  (str) wccp_redirect_outbound: <class 'str'>, Optional  (str) wccp_redirect_inbound: <class 'str'>, Optional  (str) wccp_redirect_exclude: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_IpMroute": {
    "ios": {
      "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) msdp_learned: <class 'bool'>, Optional  (str) rp: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) upstream_interface: {Any  (str) *: {'rpf_nbr': <class 'str'>}}, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) iif_lisp_rloc: <class 'str'>, Optional  (str) iif_lisp_group: <class 'str'>, Optional  (str) lisp_vrf: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>, 'state_mode': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) pkts: <class 'int'>, Optional  (str) vcd: <class 'str'>, Optional  (str) lisp_mcast_source: <class 'str'>, Optional  (str) lisp_mcast_group: <class 'str'>, Optional  (str) vxlan_version: <class 'str'>, Optional  (str) vxlan_vni: <class 'str'>, Optional  (str) vxlan_nxthop: <class 'str'>, Optional  (str) lisp_join_sender_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>}}}}, Optional  (str) extranet_rx_vrf_list: {Any  (str) *: {'e_src': <class 'str'>, 'e_grp': <class 'str'>, 'e_uptime': <class 'str'>, 'e_expire': <class 'str'>, Optional  (str) e_rp: <class 'str'>, 'e_oif_count': <class 'str'>, 'e_flags': <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n      show ip mroute\n      show ip mroute {group}\n      show ip mroute {group} {source}\n      show ip mroute verbose\n      show ip mroute {group} verbose\n      show ip mroute {group} {source} verbose\n      show ip mroute vrf {vrf}\n      show ip mroute vrf {vrf} {group}\n      show ip mroute vrf {vrf} {group} {source}\n      show ip mroute vrf {vrf} verbose\n      show ip mroute vrf {vrf} {group} verbose\n      show ip mroute vrf {vrf} {group} {source} verbose",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) msdp_learned: <class 'bool'>, Optional  (str) rp: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) upstream_interface: {Any  (str) *: {'rpf_nbr': <class 'str'>}}, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) iif_lisp_rloc: <class 'str'>, Optional  (str) iif_lisp_group: <class 'str'>, Optional  (str) lisp_vrf: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>, 'state_mode': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) pkts: <class 'int'>, Optional  (str) vcd: <class 'str'>, Optional  (str) lisp_mcast_source: <class 'str'>, Optional  (str) lisp_mcast_group: <class 'str'>, Optional  (str) vxlan_version: <class 'str'>, Optional  (str) vxlan_vni: <class 'str'>, Optional  (str) vxlan_nxthop: <class 'str'>, Optional  (str) lisp_join_sender_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>}}}}, Optional  (str) extranet_rx_vrf_list: {Any  (str) *: {'e_src': <class 'str'>, 'e_grp': <class 'str'>, 'e_uptime': <class 'str'>, 'e_expire': <class 'str'>, Optional  (str) e_rp: <class 'str'>, 'e_oif_count': <class 'str'>, 'e_flags': <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py"
    }
  },
  "Verify_IpMrouteStatic": {
    "ios": {
      "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'mroute': {Any  (str) *: {'path': {Any  (str) *: {'neighbor_address': <class 'str'>, Optional  (str) admin_distance: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'mroute': {Any  (str) *: {'path': {Any  (str) *: {'neighbor_address': <class 'str'>, Optional  (str) admin_distance: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py"
    }
  },
  "Verify_IpMrouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip mroute vrf all",
      "exclude": [],
      "groups": [
        "multicast",
        "trm"
      ],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) oil_count: <class 'int'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) internal: <class 'bool'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {Optional  (str) oil_uptime: <class 'str'>, Optional  (str) oil_flags: <class 'str'>, Optional  (str) flag: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py"
    }
  },
  "Verify_IpMsdpPeerVrf_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ip msdp peer vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'peer': {Any  (str) *: {'connect_source': <class 'str'>, 'peer_as': <class 'str'>, 'connect_source_address': <class 'str'>, Optional  (str) authentication: {'password': {'set': <class 'bool'>, Optional  (str) key: <class 'str'>}}, 'enable': <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) mesh_group: <class 'str'>, 'sa_limit': <class 'str'>, 'session_state': <class 'str'>, 'elapsed_time': <class 'str'>, Optional  (str) sa_filter: {Optional  (str) in: <class 'str'>, Optional  (str) out: <class 'str'>}, 'timer': {'connect_retry_interval': <class 'int'>, 'keepalive_interval': <class 'int'>, 'holdtime_interval': <class 'int'>}, 'statistics': {'last_message_received': <class 'str'>, Optional  (str) connection_attempts: <class 'int'>, Optional  (str) cache_lifetime: <class 'str'>, Optional  (str) established_transitions: <class 'int'>, 'discontinuity_time': <class 'str'>, 'port': {'local': <class 'int'>, 'remote': <class 'int'>}, 'error': {'rpf_failure': <class 'str'>}, 'received': {Optional  (str) keepalive: <class 'int'>, Optional  (str) notification: <class 'int'>, Optional  (str) sa_message: <class 'int'>, Optional  (str) sa_response: <class 'int'>, Optional  (str) sa_request: <class 'int'>, Optional  (str) total: <class 'int'>, Optional  (str) ctrl_message: <class 'int'>, Optional  (str) data_message: <class 'int'>}, 'sent': {Optional  (str) keepalive: <class 'int'>, Optional  (str) notification: <class 'int'>, Optional  (str) sa_message: <class 'int'>, Optional  (str) sa_response: <class 'int'>, Optional  (str) sa_request: <class 'int'>, Optional  (str) total: <class 'int'>, Optional  (str) ctrl_message: <class 'int'>, Optional  (str) data_message: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMsdpPeerVrf_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ip msdp peer vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'peer': {Any  (str) *: {'connect_source': <class 'str'>, 'peer_as': <class 'str'>, 'connect_source_address': <class 'str'>, Optional  (str) authentication: {'password': {'set': <class 'bool'>, Optional  (str) key: <class 'str'>}}, 'enable': <class 'bool'>, Optional  (str) description: <class 'str'>, Optional  (str) reset_reason: <class 'str'>, Optional  (str) mesh_group: <class 'str'>, 'sa_limit': <class 'str'>, 'session_state': <class 'str'>, 'elapsed_time': <class 'str'>, Optional  (str) sa_filter: {Optional  (str) in: <class 'str'>, Optional  (str) out: <class 'str'>}, 'timer': {'connect_retry_interval': <class 'int'>, 'keepalive_interval': <class 'int'>, 'holdtime_interval': <class 'int'>}, 'statistics': {'last_message_received': <class 'str'>, Optional  (str) connection_attempts: <class 'int'>, Optional  (str) cache_lifetime: <class 'str'>, Optional  (str) established_transitions: <class 'int'>, 'discontinuity_time': <class 'str'>, 'port': {'local': <class 'int'>, 'remote': <class 'int'>}, 'error': {'rpf_failure': <class 'str'>}, 'received': {Optional  (str) keepalive: <class 'int'>, Optional  (str) notification: <class 'int'>, Optional  (str) sa_message: <class 'int'>, Optional  (str) sa_response: <class 'int'>, Optional  (str) sa_request: <class 'int'>, Optional  (str) total: <class 'int'>, Optional  (str) ctrl_message: <class 'int'>, Optional  (str) data_message: <class 'int'>}, 'sent': {Optional  (str) keepalive: <class 'int'>, Optional  (str) notification: <class 'int'>, Optional  (str) sa_message: <class 'int'>, Optional  (str) sa_response: <class 'int'>, Optional  (str) sa_request: <class 'int'>, Optional  (str) total: <class 'int'>, Optional  (str) ctrl_message: <class 'int'>, Optional  (str) data_message: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMsdpSaCacheDetailVrf_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'sa_cache': {Any  (str) *: {'group': <class 'str'>, 'source_addr': <class 'str'>, 'up_time': <class 'str'>, 'expire': <class 'str'>, 'asn': <class 'int'>, 'peer_learned_from': <class 'str'>, 'origin_rp': {Any  (str) *: {'rp_address': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMsdpSaCacheDetailVrf_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'sa_cache': {Any  (str) *: {'group': <class 'str'>, 'source_addr': <class 'str'>, 'up_time': <class 'str'>, 'expire': <class 'str'>, 'asn': <class 'int'>, 'peer_learned_from': <class 'str'>, 'origin_rp': {Any  (str) *: {'rp_address': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMsdpSummary_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'local_as': <class 'int'>, 'originator_id': <class 'str'>, 'statistics': {'num_of_configured_peers': <class 'int'>, 'num_of_established_peers': <class 'int'>, 'num_of_shutdown_peers': <class 'int'>}, Optional  (str) peer: {Any  (str) *: {'session_state': <class 'str'>, 'peer_as': <class 'int'>, 'elapsed_time': <class 'str'>, 'address': <class 'str'>, 'statistics': {'last_message_received': <class 'str'>, 'num_of_sg_received': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMsdpSummary_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>",
      "exclude": [],
      "groups": [
        "msdp"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'local_as': <class 'int'>, 'originator_id': <class 'str'>, 'statistics': {'num_of_configured_peers': <class 'int'>, 'num_of_established_peers': <class 'int'>, 'num_of_shutdown_peers': <class 'int'>}, Optional  (str) peer: {Any  (str) *: {'session_state': <class 'str'>, 'peer_as': <class 'int'>, 'elapsed_time': <class 'str'>, 'address': <class 'str'>, 'statistics': {'last_message_received': <class 'str'>, 'num_of_sg_received': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_IpMulticast": {
    "ios": {
      "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'enable': <class 'bool'>, 'multipath': <class 'bool'>, 'route_limit': <class 'str'>, 'fallback_group_mode': <class 'str'>, 'multicast_bound_with_filter_autorp': <class 'int'>, Optional  (str) mo_frr: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'enable': <class 'bool'>, 'multipath': <class 'bool'>, 'route_limit': <class 'str'>, 'fallback_group_mode': <class 'str'>, 'multicast_bound_with_filter_autorp': <class 'int'>, Optional  (str) mo_frr: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py"
    }
  },
  "Verify_IpOspfDatabaseExternal": {
    "ios": {
      "doc": " Parser for \"show ip ospf database external\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'external': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, Optional  (str) flags: <class 'str'>, 'metric': <class 'int'>, 'forwarding_address': <class 'str'>, 'external_route_tag': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf database external'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'external': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, Optional  (str) flags: <class 'str'>, 'metric': <class 'int'>, 'forwarding_address': <class 'str'>, 'external_route_tag': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseExternalDetail_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'external': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, Optional  (str) flags: <class 'str'>, 'metric': <class 'int'>, 'forwarding_address': <class 'str'>, 'external_route_tag': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseExternalDetail_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>",
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'external': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, Optional  (str) flags: <class 'str'>, 'metric': <class 'int'>, 'forwarding_address': <class 'str'>, 'external_route_tag': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseNetwork": {
    "ios": {
      "doc": " Parser for \"show ip ospf database network\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'network': {'network_mask': <class 'str'>, 'attached_routers': {Any  (str) *: {}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf database network'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'network': {'network_mask': <class 'str'>, 'attached_routers': {Any  (str) *: {}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseNetworkDetail_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'network': {'network_mask': <class 'str'>, 'attached_routers': {Any  (str) *: {}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseNetworkDetail_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'network': {'network_mask': <class 'str'>, 'attached_routers': {Any  (str) *: {}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseOpaqueArea": {
    "ios": {
      "doc": " Parser for \"show ip ospf database opaque-area\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) opaque_type: <class 'int'>, 'opaque_id': <class 'int'>, Optional  (str) fragment_number: <class 'int'>}, 'body': {'opaque': {Optional  (str) mpls_te_router_id: <class 'str'>, Optional  (str) links: {Any  (str) *: {'link_id': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>}}}}, Optional  (str) num_of_links: <class 'int'>, Optional  (str) router_capabilities_tlv: {Any  (str) *: {'length': <class 'int'>, 'tlv_type': <class 'str'>, Optional  (str) information_capabilities: {Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper: <class 'bool'>, Optional  (str) stub_router: <class 'bool'>, Optional  (str) traffic_enginnering: <class 'bool'>, Optional  (str) p2p_over_lan: <class 'bool'>, Optional  (str) experimental_te: <class 'bool'>}}}, Optional  (str) sr_algorithm_tlv: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, Optional  (str) algorithm: {Optional  (str) spf: <class 'bool'>, Optional  (str) strict_spf: <class 'bool'>}}}, Optional  (str) sid_range_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, 'range_size': <class 'int'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'label': <class 'int'>, Optional  (str) local_interface_id: <class 'int'>, Optional  (str) remote_interface_id: <class 'int'>}}}}, Optional  (str) node_msd_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, 'sub_type': {'node_max_sid_depth_value': <class 'int'>}}}, Optional  (str) local_block_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'range_size': <class 'int'>, 'length': <class 'int'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'label': <class 'int'>}}}}, Optional  (str) extended_prefix_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'route_type': <class 'str'>, 'length': <class 'int'>, 'flags': <class 'str'>, 'prefix': <class 'str'>, 'af': <class 'int'>, Optional  (str) sub_tlvs: {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'flags': <class 'str'>, Optional  (str) mt_id: <class 'int'>, 'algo': <class 'str'>, 'sid': <class 'int'>}}}}, Optional  (str) extended_link_tlvs: {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'length': <class 'int'>, Optional  (str) link_name: <class 'str'>, 'link_type': <class 'int'>, 'tlv_type': <class 'str'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, Optional  (str) length: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) mt_id: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) label: <class 'int'>, Optional  (str) remote_interface_address: <class 'str'>, Optional  (str) local_interface_id: <class 'int'>, Optional  (str) remote_interface_id: <class 'int'>}}}}, Optional  (str) link_tlvs: {Any  (str) *: {Optional  (str) link_type: <class 'int'>, Optional  (str) link_name: <class 'str'>, Optional  (str) link_id: <class 'str'>, Optional  (str) te_metric: <class 'int'>, Optional  (str) max_bandwidth: <class 'int'>, Optional  (str) max_reservable_bandwidth: <class 'int'>, Optional  (str) admin_group: <class 'str'>, Optional  (str) igp_metric: <class 'int'>, Optional  (str) total_priority: <class 'int'>, Optional  (str) local_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) remote_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, Optional  (str) unknown_tlvs: {Any  (str) *: {'type': <class 'int'>, 'length': <class 'int'>, 'value': <class 'str'>}}, Optional  (str) extended_admin_group: {'length': <class 'int'>, Optional  (str) groups: {Any  (str) *: {'value': <class 'int'>}}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf database opaque-area'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) opaque_type: <class 'int'>, 'opaque_id': <class 'int'>, Optional  (str) fragment_number: <class 'int'>}, 'body': {'opaque': {Optional  (str) mpls_te_router_id: <class 'str'>, Optional  (str) links: {Any  (str) *: {'link_id': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>}}}}, Optional  (str) num_of_links: <class 'int'>, Optional  (str) router_capabilities_tlv: {Any  (str) *: {'length': <class 'int'>, 'tlv_type': <class 'str'>, Optional  (str) information_capabilities: {Optional  (str) graceful_restart: <class 'bool'>, Optional  (str) graceful_restart_helper: <class 'bool'>, Optional  (str) stub_router: <class 'bool'>, Optional  (str) traffic_enginnering: <class 'bool'>, Optional  (str) p2p_over_lan: <class 'bool'>, Optional  (str) experimental_te: <class 'bool'>}}}, Optional  (str) sr_algorithm_tlv: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, Optional  (str) algorithm: {Optional  (str) spf: <class 'bool'>, Optional  (str) strict_spf: <class 'bool'>}}}, Optional  (str) sid_range_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, 'range_size': <class 'int'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'label': <class 'int'>, Optional  (str) local_interface_id: <class 'int'>, Optional  (str) remote_interface_id: <class 'int'>}}}}, Optional  (str) node_msd_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'length': <class 'int'>, 'sub_type': {'node_max_sid_depth_value': <class 'int'>}}}, Optional  (str) local_block_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'range_size': <class 'int'>, 'length': <class 'int'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'label': <class 'int'>}}}}, Optional  (str) extended_prefix_tlvs: {Any  (str) *: {'tlv_type': <class 'str'>, 'route_type': <class 'str'>, 'length': <class 'int'>, 'flags': <class 'str'>, 'prefix': <class 'str'>, 'af': <class 'int'>, Optional  (str) sub_tlvs: {Any  (str) *: {'type': <class 'str'>, 'length': <class 'int'>, 'flags': <class 'str'>, Optional  (str) mt_id: <class 'int'>, 'algo': <class 'str'>, 'sid': <class 'int'>}}}}, Optional  (str) extended_link_tlvs: {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'length': <class 'int'>, Optional  (str) link_name: <class 'str'>, 'link_type': <class 'int'>, 'tlv_type': <class 'str'>, 'sub_tlvs': {Any  (str) *: {'type': <class 'str'>, Optional  (str) length: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) mt_id: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) label: <class 'int'>, Optional  (str) remote_interface_address: <class 'str'>, Optional  (str) local_interface_id: <class 'int'>, Optional  (str) remote_interface_id: <class 'int'>}}}}, Optional  (str) link_tlvs: {Any  (str) *: {Optional  (str) link_type: <class 'int'>, Optional  (str) link_name: <class 'str'>, Optional  (str) link_id: <class 'str'>, Optional  (str) te_metric: <class 'int'>, Optional  (str) max_bandwidth: <class 'int'>, Optional  (str) max_reservable_bandwidth: <class 'int'>, Optional  (str) admin_group: <class 'str'>, Optional  (str) igp_metric: <class 'int'>, Optional  (str) total_priority: <class 'int'>, Optional  (str) local_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) remote_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, Optional  (str) unknown_tlvs: {Any  (str) *: {'type': <class 'int'>, 'length': <class 'int'>, 'value': <class 'str'>}}, Optional  (str) extended_admin_group: {'length': <class 'int'>, Optional  (str) groups: {Any  (str) *: {'value': <class 'int'>}}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseOpaqueAreaDetail_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, 'opaque_type': <class 'int'>, 'opaque_id': <class 'int'>, Optional  (str) fragment_number: <class 'int'>, Optional  (str) mpls_te_router_id: <class 'str'>, Optional  (str) num_links: <class 'int'>}, 'body': {'opaque': {Optional  (str) link_tlvs: {Any  (str) *: {'link_type': <class 'int'>, 'link_name': <class 'str'>, 'link_id': <class 'str'>, 'te_metric': <class 'int'>, 'max_bandwidth': <class 'int'>, 'max_reservable_bandwidth': <class 'int'>, 'admin_group': <class 'str'>, Optional  (str) local_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) remote_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, Optional  (str) unknown_tlvs: {Any  (str) *: {'type': <class 'int'>, 'length': <class 'int'>, 'value': <class 'str'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseOpaqueAreaDetail_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, 'opaque_type': <class 'int'>, 'opaque_id': <class 'int'>, Optional  (str) fragment_number: <class 'int'>, Optional  (str) mpls_te_router_id: <class 'str'>, Optional  (str) num_links: <class 'int'>}, 'body': {'opaque': {Optional  (str) link_tlvs: {Any  (str) *: {'link_type': <class 'int'>, 'link_name': <class 'str'>, 'link_id': <class 'str'>, 'te_metric': <class 'int'>, 'max_bandwidth': <class 'int'>, 'max_reservable_bandwidth': <class 'int'>, 'admin_group': <class 'str'>, Optional  (str) local_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) remote_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, Optional  (str) unknown_tlvs: {Any  (str) *: {'type': <class 'int'>, 'length': <class 'int'>, 'value': <class 'str'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseRouter": {
    "ios": {
      "doc": " Parser for \"show ip ospf database router\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>, Optional  (str) as_boundary_router: <class 'bool'>, Optional  (str) area_border_router: <class 'bool'>}, 'body': {'router': {Optional  (str) flags: <class 'str'>, 'num_of_links': <class 'int'>, Optional  (str) links: {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'type': <class 'str'>, Optional  (str) num_mtid_metrics: <class 'int'>, Optional  (str) num_tos_metrics: <class 'int'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tos: <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf database router'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>, Optional  (str) as_boundary_router: <class 'bool'>, Optional  (str) area_border_router: <class 'bool'>}, 'body': {'router': {Optional  (str) flags: <class 'str'>, 'num_of_links': <class 'int'>, Optional  (str) links: {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'type': <class 'str'>, Optional  (str) num_mtid_metrics: <class 'int'>, Optional  (str) num_tos_metrics: <class 'int'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tos: <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseRouterDetail_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'router': {Optional  (str) flags: <class 'str'>, 'num_of_links': <class 'int'>, 'links': {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'type': <class 'str'>, 'num_tos_metrics': <class 'int'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'metric': <class 'int'>, 'tos': <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseRouterDetail_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'router': {Optional  (str) flags: <class 'str'>, 'num_of_links': <class 'int'>, 'links': {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'type': <class 'str'>, 'num_tos_metrics': <class 'int'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'metric': <class 'int'>, 'tos': <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseSummary": {
    "ios": {
      "doc": " Parser for \"show ip ospf database summary\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'summary': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'metric': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf database summary'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'summary': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'metric': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseSummaryDetail_vrf_all": {
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf database database-summary detail'\n        * \"show ip ospf {process_id} database database-summary detail\"\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'instance': {Any  (str) *: {Any  (str) *: {'router': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'network': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'summary_net': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'summary_asbr': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'type_5_ext': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'type_7_ext': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_link': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_area': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_as': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'total': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'summary': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, 'metric': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfDatabaseSummaryDetail_vrf_default": {
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf database database-summary detail'\n        * \"show ip ospf {process_id} database database-summary detail\"\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'instance': {Any  (str) *: {Any  (str) *: {'router': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'network': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'summary_net': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'summary_asbr': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'type_5_ext': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'type_7_ext': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_link': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_area': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'opaque_as': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}, 'total': {'count': <class 'int'>, 'delete': <class 'int'>, 'maxage': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, Optional  (str) maxage: <class 'bool'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>}, 'body': {'summary': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, 'metric': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfInterface_vrf_all": {
    "ios": {
      "doc": " Parser for \"show ip ospf interface\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf interface'\n        * 'show ip ospf interface {interface}'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface <interface>\n        show ip ospf interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {Optional  (str) link_scope_lsa_count: <class 'int'>, Optional  (str) link_scope_lsa_cksum_sum: <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'backbone_area_id': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfInterface_vrf_default": {
    "ios": {
      "doc": " Parser for \"show ip ospf interface\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf interface'\n        * 'show ip ospf interface {interface}'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, Optional  (str) interface_id: <class 'int'>, Optional  (str) attached: <class 'str'>, 'demand_circuit': <class 'bool'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, Optional  (str) if_cfg: <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) oob_resync_timeout: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) lls: <class 'bool'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) ti_lfa_protected: <class 'bool'>, Optional  (str) ipfrr_candidate: <class 'bool'>, Optional  (str) ipfrr_protected: <class 'bool'>, Optional  (str) stub_host: <class 'bool'>, Optional  (str) prefix_suppression: <class 'bool'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'type': <class 'str'>, 'helper': <class 'bool'>}}, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}, Optional  (str) teapp: {Optional  (str) topology_id: <class 'str'>, Any  (str) *: {Optional  (str) affinity: {'length': <class 'int'>, 'bits': <class 'str'>}, Optional  (str) extended_affinity: {'length': <class 'int'>, 'bits': <class 'str'>}}}, Optional  (str) sr_policy_manager: {'te_opaque_lsa': <class 'str'>}, Optional  (str) sr_mpls_enabled: <class 'bool'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface <interface>\n        show ip ospf interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {Optional  (str) link_scope_lsa_count: <class 'int'>, Optional  (str) link_scope_lsa_cksum_sum: <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'bfd': {'enable': <class 'bool'>}, 'backbone_area_id': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'str'>, 'ip_address': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'cost': <class 'int'>, 'index': <class 'int'>, 'if_cfg': <class 'bool'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) statistics: {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>, Optional  (str) total_neighbors: <class 'int'>, Optional  (str) num_nbrs_flooding: <class 'int'>, Optional  (str) num_nbrs_adjacent: <class 'int'>}, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {Optional  (str) key_chain: <class 'str'>}, Optional  (str) auth_trailer_key: {Optional  (str) key: <class 'str'>, Optional  (str) crypto_algorithm: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfMplsLdpInterface_vrf_all": {
    "ios": {
      "doc": " Parser for \"show ip ospf mpls ldp interface\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>}}, 'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, 'holddown_timer': <class 'bool'>, 'state': <class 'str'>, Optional  (str) state_info: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf mpls ldp interface'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>}}, 'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, 'holddown_timer': <class 'bool'>, 'state': <class 'str'>, Optional  (str) state_info: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface <interface>\n        show ip ospf mpls ldp interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}, Optional  (str) interfaces: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}, Optional  (str) virtual_links: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}, Optional  (str) sham_links: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfMplsLdpInterface_vrf_default": {
    "ios": {
      "doc": " Parser for \"show ip ospf mpls ldp interface\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>}}, 'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, 'holddown_timer': <class 'bool'>, 'state': <class 'str'>, Optional  (str) state_info: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf mpls ldp interface'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>}}, 'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, 'holddown_timer': <class 'bool'>, 'state': <class 'str'>, Optional  (str) state_info: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface <interface>\n        show ip ospf mpls ldp interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}, Optional  (str) interfaces: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}, Optional  (str) virtual_links: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}, Optional  (str) sham_links: {Any  (str) *: {'area': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, 'mpls': {'ldp': {'autoconfig': <class 'bool'>, 'autoconfig_area_id': <class 'str'>, 'igp_sync': <class 'bool'>, Optional  (str) required: <class 'bool'>, Optional  (str) achieved: <class 'bool'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfMplsTrafficEngLink": {
    "ios": {
      "doc": " Parser for \"show ip ospf mpls traffic-eng link\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'te': {'router_id': <class 'str'>}}, 'areas': {Any  (str) *: {'mpls': {'te': {'enable': <class 'bool'>, Optional  (str) total_links: <class 'int'>, Optional  (str) area_instance: <class 'int'>, Optional  (str) link_hash_bucket: {Any  (str) *: {'link_fragments': {Any  (str) *: {'link_instance': <class 'int'>, 'network_type': <class 'str'>, 'link_id': <class 'str'>, 'interface_address': <class 'str'>, 'te_admin_metric': <class 'int'>, 'igp_admin_metric': <class 'int'>, 'max_bandwidth': <class 'int'>, 'max_reservable_bandwidth': <class 'int'>, 'affinity_bit': <class 'str'>, 'total_priority': <class 'int'>, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf mpls traffic-eng link'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'te': {'router_id': <class 'str'>}}, 'areas': {Any  (str) *: {'mpls': {'te': {'enable': <class 'bool'>, Optional  (str) total_links: <class 'int'>, Optional  (str) area_instance: <class 'int'>, Optional  (str) link_hash_bucket: {Any  (str) *: {'link_fragments': {Any  (str) *: {'link_instance': <class 'int'>, 'network_type': <class 'str'>, 'link_id': <class 'str'>, 'interface_address': <class 'str'>, 'te_admin_metric': <class 'int'>, 'igp_admin_metric': <class 'int'>, 'max_bandwidth': <class 'int'>, 'max_reservable_bandwidth': <class 'int'>, 'affinity_bit': <class 'str'>, 'total_priority': <class 'int'>, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    }
  },
  "Verify_IpOspfNeighborDetail_vrf_all": {
    "ios": {
      "doc": " Parser for \"show ip ospf neighbor detail\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) sr_adj_label: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf neighbor detail'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) sr_adj_label: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfNeighborDetail_vrf_default": {
    "ios": {
      "doc": " Parser for \"show ip ospf neighbor detail\" ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) sr_adj_label: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf neighbor detail'\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) bfd_state: <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) sr_adj_label: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'interface': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) interface_id: <class 'str'>, Optional  (str) hello_options: <class 'str'>, Optional  (str) dbd_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'interfaces': {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}, Optional  (str) sham_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'last_state_change': <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, 'hello_options': <class 'str'>, 'dbd_options': <class 'str'>, 'last_non_hello_packet_received': <class 'str'>, 'dead_timer': <class 'str'>, Optional  (str) statistics: {Optional  (str) nbr_event_count: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfShamLinks_vrf_all": {
    "ios": {
      "doc": " Parser for 'show ip ospf sham-links' ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) demand_circuit: <class 'bool'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf sham-links'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) demand_circuit: <class 'bool'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>",
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'transit_area_id': <class 'str'>, 'backbone_area_id': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'name': <class 'str'>, 'link_state': <class 'str'>, Optional  (str) unnumbered_interface: <class 'str'>, Optional  (str) unnumbered_ip_address: <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'index': <class 'int'>, Optional  (str) nbr_total: <class 'int'>, Optional  (str) nbr_flood: <class 'int'>, Optional  (str) nbr_adjs: <class 'int'>, 'destination': <class 'str'>, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {'key_chain': <class 'str'>, Optional  (str) status: <class 'str'>}, Optional  (str) auth_trailer_key: {'crypto_algorithm': <class 'str'>}, Optional  (str) key_id: <class 'str'>}, 'cost': <class 'int'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) wait_timer: <class 'int'>, 'statistics': {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'instance': <class 'str'>, 'area': <class 'str'>, 'backbone_area_id': <class 'str'>, 'local': <class 'str'>, 'remote': <class 'str'>, 'state': <class 'str'>, 'dead_timer': <class 'str'>, 'hello_option': <class 'str'>, 'dbd_option': <class 'str'>, 'last_change': <class 'str'>, 'last_non_hello_received': <class 'str'>, 'statistics': {'nbr_event_count': <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfShamLinks_vrf_default": {
    "ios": {
      "doc": " Parser for 'show ip ospf sham-links' ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) demand_circuit: <class 'bool'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf sham-links'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) demand_circuit: <class 'bool'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'transit_area_id': <class 'str'>, 'backbone_area_id': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'name': <class 'str'>, 'link_state': <class 'str'>, Optional  (str) unnumbered_interface: <class 'str'>, Optional  (str) unnumbered_ip_address: <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'index': <class 'int'>, Optional  (str) nbr_total: <class 'int'>, Optional  (str) nbr_flood: <class 'int'>, Optional  (str) nbr_adjs: <class 'int'>, 'destination': <class 'str'>, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {'key_chain': <class 'str'>, Optional  (str) status: <class 'str'>}, Optional  (str) auth_trailer_key: {'crypto_algorithm': <class 'str'>}, Optional  (str) key_id: <class 'str'>}, 'cost': <class 'int'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) wait_timer: <class 'int'>, 'statistics': {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'instance': <class 'str'>, 'area': <class 'str'>, 'backbone_area_id': <class 'str'>, 'local': <class 'str'>, 'remote': <class 'str'>, 'state': <class 'str'>, 'dead_timer': <class 'str'>, 'hello_option': <class 'str'>, 'dbd_option': <class 'str'>, 'last_change': <class 'str'>, 'last_non_hello_received': <class 'str'>, 'statistics': {'nbr_event_count': <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfVirtualLinks_vrf_all": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'router_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, 'transmit_delay': <class 'int'>, 'state': <class 'str'>, 'demand_circuit': <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n        * 'show ip ospf virtual-links'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'router_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, 'transmit_delay': <class 'int'>, 'state': <class 'str'>, 'demand_circuit': <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>",
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'transit_area_id': <class 'str'>, 'backbone_area_id': <class 'str'>, 'router_id': <class 'str'>, 'name': <class 'str'>, 'link_state': <class 'str'>, Optional  (str) unnumbered_interface: <class 'str'>, Optional  (str) unnumbered_ip_address: <class 'str'>, 'interface': <class 'str'>, 'remote_addr': <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'index': <class 'int'>, Optional  (str) nbr_total: <class 'int'>, Optional  (str) nbr_flood: <class 'int'>, Optional  (str) nbr_adjs: <class 'int'>, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {'key_chain': <class 'str'>, Optional  (str) status: <class 'str'>}, Optional  (str) auth_trailer_key: {'crypto_algorithm': <class 'str'>}, Optional  (str) key_id: <class 'str'>}, 'cost': <class 'int'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) wait_timer: <class 'int'>, 'statistics': {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'dead_timer': <class 'str'>, 'hello_option': <class 'str'>, 'dbd_option': <class 'str'>, 'last_change': <class 'str'>, 'last_non_hello_received': <class 'str'>, 'statistics': {'nbr_event_count': <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpOspfVirtualLinks_vrf_default": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'router_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, 'transmit_delay': <class 'int'>, 'state': <class 'str'>, 'demand_circuit': <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for:\n        * 'show ip ospf virtual-links'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'router_id': <class 'str'>, 'transit_area_id': <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, 'transmit_delay': <class 'int'>, 'state': <class 'str'>, 'demand_circuit': <class 'bool'>, Optional  (str) cost: <class 'int'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) adjacency_state: <class 'str'>, Optional  (str) ttl_security: {'enable': <class 'bool'>, Optional  (str) hops: <class 'int'>}, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) last_retransmission_max_length: <class 'int'>, Optional  (str) last_retransmission_max_scan: <class 'int'>, Optional  (str) last_retransmission_scan_length: <class 'int'>, Optional  (str) last_retransmission_scan_time: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) retrans_qlen: <class 'int'>, Optional  (str) topology: {Any  (str) *: {'cost': <class 'int'>, 'disabled': <class 'bool'>, 'shutdown': <class 'bool'>, 'name': <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'transit_area_id': <class 'str'>, 'backbone_area_id': <class 'str'>, 'router_id': <class 'str'>, 'name': <class 'str'>, 'link_state': <class 'str'>, Optional  (str) unnumbered_interface: <class 'str'>, Optional  (str) unnumbered_ip_address: <class 'str'>, 'interface': <class 'str'>, 'remote_addr': <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'index': <class 'int'>, Optional  (str) nbr_total: <class 'int'>, Optional  (str) nbr_flood: <class 'int'>, Optional  (str) nbr_adjs: <class 'int'>, Optional  (str) authentication: {Optional  (str) auth_trailer_key_chain: {'key_chain': <class 'str'>, Optional  (str) status: <class 'str'>}, Optional  (str) auth_trailer_key: {'crypto_algorithm': <class 'str'>}, Optional  (str) key_id: <class 'str'>}, 'cost': <class 'int'>, 'state': <class 'str'>, 'interface_type': <class 'str'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) wait_timer: <class 'int'>, 'statistics': {'link_scope_lsa_count': <class 'int'>, 'link_scope_lsa_cksum_sum': <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'state': <class 'str'>, 'dead_timer': <class 'str'>, 'hello_option': <class 'str'>, 'dbd_option': <class 'str'>, 'last_change': <class 'str'>, 'last_non_hello_received': <class 'str'>, 'statistics': {'nbr_event_count': <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py"
    }
  },
  "Verify_IpPimBsrRouter": {
    "ios": {
      "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Optional  (str) bsr_candidate: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) priority: <class 'int'>}, Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) next_advertisment: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) interval: <class 'int'>}, Optional  (str) bsr: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) address_host: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) bsr_next_bootstrap: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Optional  (str) bsr_candidate: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) priority: <class 'int'>}, Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) next_advertisment: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) interval: <class 'int'>}, Optional  (str) bsr: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) address_host: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) bsr_next_bootstrap: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_IpPimDf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim df\n        show ip pim df vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) bidir: {Optional  (str) interface_df_election: {Optional  (Any) Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) df_bits: <class 'str'>, Optional  (str) metric_pref: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) group_range: <class 'str'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) df_address: <class 'str'>, Optional  (str) df_uptime: <class 'str'>, Optional  (str) interface_state: <class 'str'>, Optional  (str) winner_metric_pref: <class 'int'>, Optional  (str) winner_metric: <class 'int'>, Optional  (str) is_rpf: <class 'bool'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimGroupRange": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show ip pim group-range\n        show ip pim group-range vrf <vrf>",
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'sm': {Any  (str) *: {Any  (str) *: {Optional  (str) action: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) shared_tree_only: <class 'str'>, Optional  (str) range: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimInterface": {
    "ios": {
      "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) dr_priority: <class 'int'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) address: <class 'list'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) dr_priority: <class 'int'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) address: <class 'list'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, Optional  (str) link_status: <class 'str'>, Optional  (str) admin_status: <class 'str'>, Optional  (str) address: <class 'list'>, Optional  (str) ip_subnet: <class 'str'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) configured_dr_priority: <class 'int'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) hello_expiration: <class 'str'>, Optional  (str) neighbor_holdtime: <class 'int'>, Optional  (str) dr_delay: <class 'int'>, Optional  (str) bsr_border: <class 'bool'>, Optional  (str) genid: <class 'str'>, Optional  (str) hello_md5_ah_authentication: <class 'str'>, Optional  (str) neighbor_filter: <class 'str'>, Optional  (str) jp_inbound_policy: <class 'str'>, Optional  (str) jp_outbound_policy: <class 'str'>, Optional  (str) jp_interval: <class 'int'>, Optional  (str) jp_next_sending: <class 'int'>, Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) sm: {Optional  (str) passive: <class 'bool'>}, Optional  (str) vpc_svi: <class 'bool'>, Optional  (str) auto_enabled: <class 'bool'>, Optional  (str) statistics: {Optional  (str) general: {Optional  (str) hellos: <class 'str'>, Optional  (str) jps: <class 'str'>, Optional  (str) asserts: <class 'str'>, Optional  (str) grafts: <class 'str'>, Optional  (str) graft_acks: <class 'str'>, Optional  (str) df_offers: <class 'str'>, Optional  (str) df_winners: <class 'str'>, Optional  (str) df_backoffs: <class 'str'>, Optional  (str) df_passes: <class 'str'>}, Optional  (str) errors: {Optional  (str) checksum: <class 'int'>, Optional  (str) invalid_packet_types: <class 'int'>, Optional  (str) invalid_df_subtypes: <class 'int'>, Optional  (str) authentication_failed: <class 'int'>, Optional  (str) packet_length_errors: <class 'int'>, Optional  (str) bad_version_packets: <class 'int'>, Optional  (str) packets_from_self: <class 'int'>, Optional  (str) packets_from_non_neighbors: <class 'int'>, Optional  (str) packets_received_on_passiveinterface: <class 'int'>, Optional  (str) jps_received_on_rpf_interface: <class 'int'>, Optional  (str) joins_received_with_no_rp: <class 'int'>, Optional  (str) joins_received_with_wrong_rp: <class 'int'>, Optional  (str) joins_received_with_ssm_groups: <class 'int'>, Optional  (str) joins_received_with_bidir_groups: <class 'int'>, Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>, Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimInterfaceDetail": {
    "ios": {
      "doc": " Parser for:\n        show ip pim Interface detail\n        show ip pim vrf <vrf_name> interface detail",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) hello_interval: <class 'int'>, Optional  (str) hello_packets_in: <class 'int'>, Optional  (str) hello_packets_out: <class 'int'>, Optional  (str) oper_status: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) address: <class 'list'>, Optional  (str) multicast: {Optional  (str) switching: <class 'str'>, Optional  (str) packets_in: <class 'int'>, Optional  (str) packets_out: <class 'int'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) tag_switching: <class 'bool'>}, Optional  (str) pim_status: <class 'str'>, Optional  (str) version: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) sm: {Optional  (str) passive: <class 'bool'>}, Optional  (str) dm: {}, Optional  (str) dr_address: <class 'str'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) jp_interval: <class 'int'>, Optional  (str) state_refresh_processing: <class 'str'>, Optional  (str) state_refresh_origination: <class 'str'>, Optional  (str) nbma_mode: <class 'str'>, Optional  (str) atm_multipoint_signalling: <class 'str'>, Optional  (str) bsr_border: <class 'bool'>, Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>, Optional  (str) none_dr_join: <class 'bool'>, Optional  (str) neighbor_filter: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": null,
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) hello_interval: <class 'int'>, Optional  (str) hello_packets_in: <class 'int'>, Optional  (str) hello_packets_out: <class 'int'>, Optional  (str) oper_status: <class 'str'>, Optional  (str) enable: <class 'bool'>, Optional  (str) internet_protocol_processing: <class 'bool'>, Optional  (str) address: <class 'list'>, Optional  (str) multicast: {Optional  (str) switching: <class 'str'>, Optional  (str) packets_in: <class 'int'>, Optional  (str) packets_out: <class 'int'>, Optional  (str) ttl_threshold: <class 'int'>, Optional  (str) tag_switching: <class 'bool'>}, Optional  (str) pim_status: <class 'str'>, Optional  (str) version: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) sm: {Optional  (str) passive: <class 'bool'>}, Optional  (str) dm: {}, Optional  (str) dr_address: <class 'str'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) jp_interval: <class 'int'>, Optional  (str) state_refresh_processing: <class 'str'>, Optional  (str) state_refresh_origination: <class 'str'>, Optional  (str) nbma_mode: <class 'str'>, Optional  (str) atm_multipoint_signalling: <class 'str'>, Optional  (str) bsr_border: <class 'bool'>, Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>, Optional  (str) none_dr_join: <class 'bool'>, Optional  (str) neighbor_filter: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_IpPimInterfaceDf": {
    "ios": {
      "doc": "Parser for show ip pim [vrf <WORD>] interface df",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) bidir: {Optional  (str) interface_df_election: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) df_address: <class 'str'>, Optional  (str) df_uptime: <class 'str'>, Optional  (str) winner_metric: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip pim [vrf <WORD>] interface df",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) bidir: {Optional  (str) interface_df_election: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) df_address: <class 'str'>, Optional  (str) df_uptime: <class 'str'>, Optional  (str) winner_metric: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_IpPimNeighbor_vrf_all": {
    "ios": {
      "doc": "Parser for show ip pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "doc": "Parser for show ip pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>",
      "exclude": [],
      "groups": [
        "multicast"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {'bfd_status': <class 'bool'>, 'expiration': <class 'str'>, 'dr_priority': <class 'int'>, 'up_time': <class 'str'>, 'interface': <class 'str'>, 'bidir_capable': <class 'bool'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimNeighbor_vrf_default": {
    "ios": {
      "doc": "Parser for show ip pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip pim [vrf <WORD>] neighbor",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {'bfd_status': <class 'bool'>, 'expiration': <class 'str'>, 'dr_priority': <class 'int'>, 'up_time': <class 'str'>, 'interface': <class 'str'>, 'bidir_capable': <class 'bool'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimPolicyStaticticsRegisterPolicy": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim policy statictics register_policy\n        show ip pim policy statictics register_policy vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) sm: {Optional  (str) asm: {Optional  (str) accept_register: <class 'str'>, Optional  (str) register_policy: {Any  (str) *: {Optional  (str) total_accept_count: <class 'int'>, Optional  (str) total_reject_count: <class 'int'>, Any  (str) *: {Optional  (str) compare_count: <class 'int'>, Optional  (str) match_count: <class 'int'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimRoute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim route\n        show ip pim route vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) topology_tree_info: {Any  (str) *: {Optional  (str) group: <class 'str'>, Optional  (str) source_address: <class 'str'>, Optional  (str) is_rpt: <class 'bool'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) expiration: <class 'str'>, Optional  (str) incoming_interface: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) rpf_neighbor: <class 'str'>, Optional  (str) jp_holdtime_roundup: <class 'int'>, Optional  (str) oif: <class 'str'>, Optional  (str) oif_count: <class 'int'>, Optional  (str) oif_timeout_count: <class 'int'>, Optional  (str) oif_timeout: <class 'str'>, Optional  (str) immediate: <class 'str'>, Optional  (str) immediate_count: <class 'int'>, Optional  (str) immediate_timeout_count: <class 'int'>, Optional  (str) immediate_timeout: <class 'str'>, Optional  (str) timeout_interval: <class 'int'>, Optional  (str) sgr_prune_count: <class 'int'>, Optional  (str) sgr_prune: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimRpMapping": {
    "ios": {
      "doc": " Parser for:\n         show ip pim rp mapping\n         show ip pim vrf <vrf_name> rp mapping",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'rp_mappings': {Any  (str) *: {Optional  (str) group: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) rp_address_host: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) hold_time: <class 'int'>}}, 'rp_list': {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) bsr_version: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) info_source_type: <class 'str'>}}, Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {Optional  (str) policy_name: <class 'str'>, Optional  (str) override: <class 'bool'>}, Optional  (str) bidir: {}}}, Optional  (str) bsr: {'rp': {Optional  (str) rp_address: <class 'str'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) up_time: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": null,
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'rp_mappings': {Any  (str) *: {Optional  (str) group: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) rp_address_host: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) hold_time: <class 'int'>}}, 'rp_list': {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) bsr_version: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) info_source_type: <class 'str'>}}, Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {Optional  (str) policy_name: <class 'str'>, Optional  (str) override: <class 'bool'>}, Optional  (str) bidir: {}}}, Optional  (str) bsr: {'rp': {Optional  (str) rp_address: <class 'str'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) up_time: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_IpPimRp_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim rp\n        show ip pim rp vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 20,
        "interval": 20
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}, Optional  (str) bidir: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}}}, Optional  (str) bsr: {Optional  (str) bsr_candidate: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>}, Optional  (str) bsr: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) rp: {'up_time': <class 'str'>, 'group_policy': <class 'str'>, Optional  (str) rp_address: <class 'str'>}, Optional  (str) bsr_address: {Any  (str) *: {'priority': <class 'int'>, 'mode': <class 'str'>, 'address': <class 'str'>, 'policy': <class 'str'>}}, Optional  (str) bsr_next_bootstrap: <class 'str'>, Optional  (str) rp_candidate_policy: <class 'str'>, Optional  (str) rp_policy: <class 'str'>, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}, Optional  (str) autorp: {Optional  (str) announce_policy: <class 'str'>, Optional  (str) discovery_policy: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) bsr_next_discovery: <class 'str'>, Optional  (str) send_rp_announce: {Optional  (str) group: <class 'str'>, Optional  (str) scope: <class 'int'>, Optional  (str) group_list: <class 'str'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) rp_source: <class 'str'>}}, Optional  (str) rp_list: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) info_source_type: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) group_ranges: <class 'str'>}}, Optional  (str) rp_mappings: {Any  (str) *: {'group': <class 'str'>, 'rp_address': <class 'str'>, 'protocol': <class 'str'>, 'up_time': <class 'str'>, Optional  (str) expiration: <class 'str'>}}}, Optional  (str) sm: {Optional  (str) asm: {Optional  (str) anycast_rp: {Any  (str) *: {Optional  (str) anycast_address: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimRp_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim rp\n        show ip pim rp vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 18,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}, Optional  (str) bidir: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}}}, Optional  (str) bsr: {Optional  (str) bsr_candidate: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>}, Optional  (str) bsr: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) rp: {'up_time': <class 'str'>, 'group_policy': <class 'str'>, Optional  (str) rp_address: <class 'str'>}, Optional  (str) bsr_address: {Any  (str) *: {'priority': <class 'int'>, 'mode': <class 'str'>, 'address': <class 'str'>, 'policy': <class 'str'>}}, Optional  (str) bsr_next_bootstrap: <class 'str'>, Optional  (str) rp_candidate_policy: <class 'str'>, Optional  (str) rp_policy: <class 'str'>, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}, Optional  (str) autorp: {Optional  (str) announce_policy: <class 'str'>, Optional  (str) discovery_policy: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) bsr_next_discovery: <class 'str'>, Optional  (str) send_rp_announce: {Optional  (str) group: <class 'str'>, Optional  (str) scope: <class 'int'>, Optional  (str) group_list: <class 'str'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) rp_source: <class 'str'>}}, Optional  (str) rp_list: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) info_source_type: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) group_ranges: <class 'str'>}}, Optional  (str) rp_mappings: {Any  (str) *: {'group': <class 'str'>, 'rp_address': <class 'str'>, 'protocol': <class 'str'>, 'up_time': <class 'str'>, Optional  (str) expiration: <class 'str'>}}}, Optional  (str) sm: {Optional  (str) asm: {Optional  (str) anycast_rp: {Any  (str) *: {Optional  (str) anycast_address: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPimVrfDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip pim vrf detail\n        show ip pim vrf <vrf> detail",
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) sm: {Optional  (str) asm: {Optional  (str) register_source: <class 'str'>, Optional  (str) register_source_address: <class 'str'>, Optional  (str) sg_expiry_timer: {Optional  (str) sg_list: <class 'str'>, Optional  (str) infinity: <class 'bool'>, Optional  (str) sg_expiry_timer_configured: <class 'bool'>, Optional  (str) sg_expiry_timer: <class 'int'>, Optional  (str) config_version: <class 'int'>, Optional  (str) active_version: <class 'int'>}}}, Optional  (str) vrf_id: <class 'int'>, Optional  (str) table_id: <class 'str'>, Optional  (str) interface_count: <class 'int'>, Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) mvpn: {Optional  (str) enable: <class 'bool'>}, Optional  (str) state_limit: <class 'str'>, Optional  (str) register_rate_limit: <class 'str'>, Optional  (str) cli_vrf_done: <class 'bool'>, Optional  (str) cibtype_auto_enabled: <class 'bool'>, Optional  (str) vxlan_vni_id: <class 'int'>, Optional  (str) shared_tree_ranges: <class 'str'>, Optional  (str) pre_build_spt: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_IpPrefixList": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, 'protocol': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'prefix': <class 'str'>, 'masklength_range': <class 'str'>, 'sequence': <class 'int'>, 'action': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_prefix_list.py"
    }
  },
  "Verify_IpPrefixListDetail": {
    "ios": {
      "doc": "Parser for:\n        show ip prefix-list detail\n        show ipv6 prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) count: <class 'int'>, Optional  (str) range_entries: <class 'int'>, Optional  (str) sequences: <class 'str'>, Optional  (str) refcount: <class 'int'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) prefix: <class 'str'>, Optional  (str) masklength_range: <class 'str'>, Optional  (str) sequence: <class 'int'>, Optional  (str) hit_count: <class 'int'>, Optional  (str) refcount: <class 'int'>, Optional  (str) action: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_prefix_list.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ip prefix-list detail\n        show ipv6 prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) count: <class 'int'>, Optional  (str) range_entries: <class 'int'>, Optional  (str) sequences: <class 'str'>, Optional  (str) refcount: <class 'int'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) prefix: <class 'str'>, Optional  (str) masklength_range: <class 'str'>, Optional  (str) sequence: <class 'int'>, Optional  (str) hit_count: <class 'int'>, Optional  (str) refcount: <class 'int'>, Optional  (str) action: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_prefix_list.py"
    }
  },
  "Verify_IpProtocols": {
    "ios": {
      "doc": " Parser for \"show ip protocols\" ",
      "groups": [],
      "schema": "{'protocols': {Optional  (str) rip: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) instance: {Any  (str) *: {'distance': <class 'int'>, 'maximum_paths': <class 'int'>, Optional  (str) output_delay: <class 'int'>, 'send_version': Or (<class 'int'>, <class 'str'>), 'receive_version': Or (<class 'int'>, <class 'str'>), Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>, 'outgoing_update_filterlist': {'outgoing_update_filterlist': <class 'str'>, Optional  (str) interfaces: {Any  (str) *: {'filter': <class 'str'>, 'per_user': <class 'bool'>, 'default': <class 'str'>}}}, 'incoming_update_filterlist': {'incoming_update_filterlist': <class 'str'>, Optional  (str) interfaces: {Any  (str) *: {'filter': <class 'str'>, 'per_user': <class 'bool'>, 'default': <class 'str'>}}}, Optional  (str) incoming_route_metric: {'added': <class 'str'>, 'list': <class 'str'>}, Optional  (str) network: <class 'list'>, Optional  (str) default_redistribution_metric: <class 'int'>, 'redistribute': {Any  (str) *: {Optional  (Any) Any  (str) *: {Optional  (str) metric: <class 'int'>, Optional  (str) route_policy: <class 'int'>, Optional  (str) route_type: <class 'str'>}, Optional  (str) metric: <class 'int'>, Optional  (str) route_policy: <class 'int'>}}, Optional  (str) timers: {'update_interval': <class 'int'>, 'next_update': <class 'int'>, 'invalid_interval': <class 'int'>, 'holddown_interval': <class 'int'>, 'flush_interval': <class 'int'>}, Optional  (str) interfaces: {Any  (str) *: {Optional  (str) neighbors: {Any  (str) *: {Optional  (str) address: <class 'str'>}}, Optional  (str) summary_address: {Any  (str) *: {Optional  (str) metric: <class 'str'>}}, Optional  (str) filtered_per_user: <class 'int'>, Optional  (str) default_set: <class 'bool'>, Optional  (str) passive: <class 'bool'>, 'send_version': <class 'str'>, 'receive_version': <class 'str'>, 'triggered_rip': <class 'str'>, 'key_chain': <class 'str'>}}, Optional  (str) neighbors: {Any  (str) *: {'last_update': <class 'str'>, 'distance': <class 'int'>}}}}}}}}}, Optional  (str) eigrp: {'protocol_under_dev': <class 'bool'>}, Optional  (str) ospf: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'spf_control': {'paths': <class 'int'>}, Optional  (str) network: {Any  (str) *: {'netmask': <class 'str'>, 'area': <class 'str'>}}, 'preference': {'single_value': {'all': <class 'int'>}, Optional  (str) multi_values: {'granularity': {'detail': {'intra_area': <class 'int'>, 'inter_area': <class 'int'>}, Optional  (str) coarse: {'internal': <class 'int'>}}, 'external': <class 'int'>}}, 'router_id': <class 'str'>, Optional  (str) outgoing_filter_list: <class 'str'>, Optional  (str) incoming_filter_list: <class 'str'>, 'total_areas': <class 'int'>, 'total_stub_area': <class 'int'>, 'total_normal_area': <class 'int'>, 'total_nssa_area': <class 'int'>, Optional  (str) passive_interfaces: <class 'list'>, Optional  (str) routing_information_sources: {'gateway': {Any  (str) *: {'distance': <class 'int'>, 'last_update': <class 'str'>}}}, Optional  (str) areas: {Any  (str) *: {Optional  (str) configured_interfaces: <class 'list'>}}}}}}}}}, Optional  (str) application: {'outgoing_filter_list': <class 'str'>, 'incoming_filter_list': <class 'str'>, 'maximum_path': <class 'int'>, 'preference': {'single_value': {'all': <class 'int'>}}, 'update_frequency': <class 'int'>, 'invalid': <class 'int'>, 'holddown': <class 'int'>, 'flushed': <class 'int'>}, Optional  (str) bgp: {'instance': {'default': {'bgp_id': <class 'int'>, 'vrf': {'default': {'address_family': {'ipv4': {Optional  (str) outgoing_filter_list: <class 'str'>, Optional  (str) incoming_filter_list: <class 'str'>, 'igp_sync': <class 'bool'>, 'automatic_route_summarization': <class 'bool'>, Optional  (str) maximum_path: <class 'int'>, Optional  (str) preference: {'multi_values': {'external': <class 'int'>, 'local': <class 'int'>, 'internal': <class 'int'>}}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) route_map: <class 'str'>}}, Optional  (str) routing_information_sources: {Any  (str) *: {'neighbor_id': <class 'str'>, 'distance': <class 'int'>, 'last_update': <class 'str'>}}, Optional  (str) timers: {'update_interval': <class 'int'>, 'next_update': <class 'int'>}}}}}}}}, Optional  (str) isis: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'outgoing_filter_list': <class 'str'>, 'incoming_filter_list': <class 'str'>, Optional  (str) redistributing: <class 'str'>, Optional  (str) address_summarization: <class 'list'>, Optional  (str) maximum_path: <class 'int'>, 'preference': {'single_value': {'all': <class 'int'>}}, Optional  (str) configured_interfaces: <class 'list'>, Optional  (str) passive_interfaces: <class 'list'>, Optional  (str) routing_information_sources: {'gateway': {Any  (str) *: {'distance': <class 'int'>, 'last_update': <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show ip protocols\" ",
      "exclude": [],
      "groups": [],
      "schema": "{'protocols': {Optional  (str) rip: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) instance: {Any  (str) *: {'distance': <class 'int'>, 'maximum_paths': <class 'int'>, Optional  (str) output_delay: <class 'int'>, 'send_version': Or (<class 'int'>, <class 'str'>), 'receive_version': Or (<class 'int'>, <class 'str'>), Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>, 'outgoing_update_filterlist': {'outgoing_update_filterlist': <class 'str'>, Optional  (str) interfaces: {Any  (str) *: {'filter': <class 'str'>, 'per_user': <class 'bool'>, 'default': <class 'str'>}}}, 'incoming_update_filterlist': {'incoming_update_filterlist': <class 'str'>, Optional  (str) interfaces: {Any  (str) *: {'filter': <class 'str'>, 'per_user': <class 'bool'>, 'default': <class 'str'>}}}, Optional  (str) incoming_route_metric: {'added': <class 'str'>, 'list': <class 'str'>}, Optional  (str) network: <class 'list'>, Optional  (str) default_redistribution_metric: <class 'int'>, 'redistribute': {Any  (str) *: {Optional  (Any) Any  (str) *: {Optional  (str) metric: <class 'int'>, Optional  (str) route_policy: <class 'int'>, Optional  (str) route_type: <class 'str'>}, Optional  (str) metric: <class 'int'>, Optional  (str) route_policy: <class 'int'>}}, Optional  (str) timers: {'update_interval': <class 'int'>, 'next_update': <class 'int'>, 'invalid_interval': <class 'int'>, 'holddown_interval': <class 'int'>, 'flush_interval': <class 'int'>}, Optional  (str) interfaces: {Any  (str) *: {Optional  (str) neighbors: {Any  (str) *: {Optional  (str) address: <class 'str'>}}, Optional  (str) summary_address: {Any  (str) *: {Optional  (str) metric: <class 'str'>}}, Optional  (str) filtered_per_user: <class 'int'>, Optional  (str) default_set: <class 'bool'>, Optional  (str) passive: <class 'bool'>, 'send_version': <class 'str'>, 'receive_version': <class 'str'>, 'triggered_rip': <class 'str'>, 'key_chain': <class 'str'>}}, Optional  (str) neighbors: {Any  (str) *: {'last_update': <class 'str'>, 'distance': <class 'int'>}}}}}}}}}, Optional  (str) eigrp: {'protocol_under_dev': <class 'bool'>}, Optional  (str) ospf: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'spf_control': {'paths': <class 'int'>}, Optional  (str) network: {Any  (str) *: {'netmask': <class 'str'>, 'area': <class 'str'>}}, 'preference': {'single_value': {'all': <class 'int'>}, Optional  (str) multi_values: {'granularity': {'detail': {'intra_area': <class 'int'>, 'inter_area': <class 'int'>}, Optional  (str) coarse: {'internal': <class 'int'>}}, 'external': <class 'int'>}}, 'router_id': <class 'str'>, Optional  (str) outgoing_filter_list: <class 'str'>, Optional  (str) incoming_filter_list: <class 'str'>, 'total_areas': <class 'int'>, 'total_stub_area': <class 'int'>, 'total_normal_area': <class 'int'>, 'total_nssa_area': <class 'int'>, Optional  (str) passive_interfaces: <class 'list'>, Optional  (str) routing_information_sources: {'gateway': {Any  (str) *: {'distance': <class 'int'>, 'last_update': <class 'str'>}}}, Optional  (str) areas: {Any  (str) *: {Optional  (str) configured_interfaces: <class 'list'>}}}}}}}}}, Optional  (str) application: {'outgoing_filter_list': <class 'str'>, 'incoming_filter_list': <class 'str'>, 'maximum_path': <class 'int'>, 'preference': {'single_value': {'all': <class 'int'>}}, 'update_frequency': <class 'int'>, 'invalid': <class 'int'>, 'holddown': <class 'int'>, 'flushed': <class 'int'>}, Optional  (str) bgp: {'instance': {'default': {'bgp_id': <class 'int'>, 'vrf': {'default': {'address_family': {'ipv4': {Optional  (str) outgoing_filter_list: <class 'str'>, Optional  (str) incoming_filter_list: <class 'str'>, 'igp_sync': <class 'bool'>, 'automatic_route_summarization': <class 'bool'>, Optional  (str) maximum_path: <class 'int'>, Optional  (str) preference: {'multi_values': {'external': <class 'int'>, 'local': <class 'int'>, 'internal': <class 'int'>}}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) route_map: <class 'str'>}}, Optional  (str) routing_information_sources: {Any  (str) *: {'neighbor_id': <class 'str'>, 'distance': <class 'int'>, 'last_update': <class 'str'>}}, Optional  (str) timers: {'update_interval': <class 'int'>, 'next_update': <class 'int'>}}}}}}}}, Optional  (str) isis: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'outgoing_filter_list': <class 'str'>, 'incoming_filter_list': <class 'str'>, Optional  (str) redistributing: <class 'str'>, Optional  (str) address_summarization: <class 'list'>, Optional  (str) maximum_path: <class 'int'>, 'preference': {'single_value': {'all': <class 'int'>}}, Optional  (str) configured_interfaces: <class 'list'>, Optional  (str) passive_interfaces: <class 'list'>, Optional  (str) routing_information_sources: {'gateway': {Any  (str) *: {'distance': <class 'int'>, 'last_update': <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py"
    }
  },
  "Verify_IpRoute_protocol_bgp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ip route\n        show ip route vrf <vrf>",
      "exclude": [
        "uptime"
      ],
      "groups": [],
      "parameters": {
        "protocol": "bgp"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_IpRoute_protocol_ospf": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ip route\n        show ip route vrf <vrf>",
      "exclude": [
        "uptime"
      ],
      "groups": [],
      "parameters": {
        "protocol": "ospf"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_IpRoute_vrf_all": {
    "iosxe": {
      "doc": "Parser for :\n        show ip route\n        show ip route vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ",
      "exclude": [],
      "groups": [
        "multicast"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_IpRoute_vrf_default": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ip route\n        show ip route vrf <vrf>",
      "exclude": [
        "updated"
      ],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_IpStaticRouteMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ip static-route multicast vrf all",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {'mroute': {Any  (str) *: {'path': {Any  (str) *: {'neighbor_address': <class 'str'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) urib: <class 'bool'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py"
    }
  },
  "Verify_IpStaticRoute_vrf_all": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py"
    },
    "iosxe": {
      "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ",
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) rnh_active: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_netmask: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) rnh_active: <class 'bool'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py"
    }
  },
  "Verify_IpStaticRoute_vrf_default": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) owner_code: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) rnh_active: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_netmask: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) rnh_active: <class 'bool'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py"
    }
  },
  "Verify_Ipv4VrfAllInterface": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv4 vrf all interface\n                    show ipv4 vrf <vrf> interface",
      "groups": [],
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, 'int_status': <class 'str'>, 'vrf': <class 'str'>, 'vrf_id': <class 'str'>, Optional  (str) multicast_groups: <class 'list'>, Optional  (str) multicast_groups_address: <class 'str'>, Optional  (str) ipv4: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) secondary: <class 'bool'>, Optional  (str) route_tag: <class 'int'>}, Optional  (str) mtu: <class 'int'>, Optional  (str) mtu_available: <class 'int'>, Optional  (str) helper_address: <class 'str'>, Optional  (str) broadcast_forwarding: <class 'str'>, Optional  (str) out_access_list: <class 'str'>, Optional  (str) in_access_list: <class 'str'>, Optional  (str) in_common_access_list: <class 'str'>, Optional  (str) proxy_arp: <class 'str'>, Optional  (str) icmp_redirects: <class 'str'>, Optional  (str) icmp_unreachables: <class 'str'>, Optional  (str) icmp_replies: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) unnumbered: {Optional  (str) unnumbered_intf_ref: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_Ipv6IcmpNeighborDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>\n        show ipv6 icmp neighbor <interface> detail\n        show ipv6 icmp neighbor <interface> detail vrf all\n        show ipv6 icmp neighbor <interface> detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'neighbor_state': <class 'str'>, 'age': <class 'str'>, Optional  (str) physical_interface: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py"
    }
  },
  "Verify_Ipv6Interface": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 interface",
      "exclude": [],
      "groups": [
        "interface"
      ],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, 'enabled': <class 'bool'>, Optional  (str) autoconf: <class 'bool'>, 'ipv6': {Any  (str) *: {'ip': <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) origin: <class 'str'>, Optional  (str) anycast: <class 'bool'>, Optional  (str) eui_64: <class 'bool'>, Optional  (str) virtual: <class 'bool'>, Optional  (str) autoconf: {'valid_lifetime': <class 'int'>, 'preferred_lifetime': <class 'int'>}}, 'enabled': <class 'bool'>, Optional  (str) icmp: {Optional  (str) error_messages_limited: <class 'int'>, Optional  (str) redirects: <class 'bool'>, Optional  (str) unreachables: <class 'str'>}, Optional  (str) nd: {Optional  (str) suppress: <class 'bool'>, Optional  (str) dad_enabled: <class 'bool'>, Optional  (str) dad_attempts: <class 'int'>, Optional  (str) reachable_time: <class 'int'>, Optional  (str) using_time: <class 'int'>, Optional  (str) ns_retransmit_interval: <class 'int'>, Optional  (str) advertised_reachable_time: <class 'int'>, Optional  (str) advertised_retransmit_interval: <class 'int'>, Optional  (str) router_advertisements_interval: <class 'int'>, Optional  (str) router_advertisements_live: <class 'int'>, Optional  (str) advertised_default_router_preference: <class 'str'>, Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>, Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>}, Optional  (str) unnumbered: {'interface_ref': <class 'str'>}}, Optional  (str) mtu: <class 'int'>, Optional  (str) vrf: <class 'str'>, Optional  (str) addresses_config_method: <class 'str'>, Optional  (str) joined_group_addresses: <class 'list'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 interface",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, 'enabled': <class 'bool'>, Optional  (str) autoconf: <class 'bool'>, 'ipv6': {Any  (str) *: {'ip': <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) origin: <class 'str'>, Optional  (str) anycast: <class 'bool'>, Optional  (str) eui_64: <class 'bool'>, Optional  (str) virtual: <class 'bool'>, Optional  (str) autoconf: {'valid_lifetime': <class 'int'>, 'preferred_lifetime': <class 'int'>}}, 'enabled': <class 'bool'>, Optional  (str) icmp: {Optional  (str) error_messages_limited: <class 'int'>, Optional  (str) redirects: <class 'bool'>, Optional  (str) unreachables: <class 'str'>}, Optional  (str) nd: {Optional  (str) suppress: <class 'bool'>, Optional  (str) dad_enabled: <class 'bool'>, Optional  (str) dad_attempts: <class 'int'>, Optional  (str) reachable_time: <class 'int'>, Optional  (str) using_time: <class 'int'>, Optional  (str) ns_retransmit_interval: <class 'int'>, Optional  (str) advertised_reachable_time: <class 'int'>, Optional  (str) advertised_retransmit_interval: <class 'int'>, Optional  (str) router_advertisements_interval: <class 'int'>, Optional  (str) router_advertisements_live: <class 'int'>, Optional  (str) advertised_default_router_preference: <class 'str'>, Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>, Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>}, Optional  (str) unnumbered: {'interface_ref': <class 'str'>}}, Optional  (str) mtu: <class 'int'>, Optional  (str) vrf: <class 'str'>, Optional  (str) addresses_config_method: <class 'str'>, Optional  (str) joined_group_addresses: <class 'list'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py"
    },
    "iosxr": {
      "doc": "Parser for show ipv6 interface",
      "groups": [],
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, 'int_status': <class 'str'>, 'vrf': <class 'str'>, 'vrf_id': <class 'str'>, 'enabled': <class 'bool'>, 'ipv6_enabled': <class 'bool'>, Optional  (str) ipv6: {Any  (str) *: {Optional  (str) ipv6: <class 'str'>, Optional  (str) ipv6_prefix_length: <class 'str'>, Optional  (str) ipv6_status: <class 'str'>, Optional  (str) ipv6_route_tag: <class 'str'>, Optional  (str) ipv6_eui64: <class 'bool'>, Optional  (str) ipv6_subnet: <class 'str'>}, Optional  (str) ipv6_link_local: <class 'str'>, Optional  (str) ipv6_link_local_state: <class 'str'>, Optional  (str) ipv6_group_address: <class 'str'>, Optional  (str) ipv6_groups: <class 'list'>, Optional  (str) ipv6_mtu: <class 'str'>, Optional  (str) ipv6_mtu_available: <class 'str'>, Optional  (str) icmp_redirects: <class 'str'>, Optional  (str) icmp_unreachables: <class 'str'>, Optional  (str) nd_dad: <class 'str'>, Optional  (str) dad_attempts: <class 'str'>, Optional  (str) nd_reachable_time: <class 'str'>, Optional  (str) nd_cache_limit: <class 'str'>, Optional  (str) nd_adv_retrans_int: <class 'str'>, Optional  (str) nd_adv_duration: <class 'str'>, Optional  (str) nd_router_adv: <class 'str'>, Optional  (str) stateless_autoconfig: <class 'bool'>, Optional  (str) out_access_list: <class 'str'>, Optional  (str) in_access_list: <class 'str'>, Optional  (str) in_common_access_list: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) complete_protocol_adj: <class 'str'>, Optional  (str) complete_glean_adj: <class 'str'>, Optional  (str) incomplete_protocol_adj: <class 'str'>, Optional  (str) incomplete_glean_adj: <class 'str'>, Optional  (str) dropped_protocol_req: <class 'str'>, Optional  (str) dropped_glean_req: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_Ipv6InterfaceVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 interface vrf all\n        show ipv6 interface vrf <vrf>\n        show ipv6 interface <interface> vrf all\n        show ipv6 interface <interface> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{Any  (str) *: {'vrf': <class 'str'>, 'interface_status': <class 'str'>, 'iod': <class 'int'>, 'enabled': <class 'bool'>, Optional  (str) ipv6: {Any  (str) *: {Optional  (str) ip: <class 'str'>, Optional  (str) prefix_length: <class 'str'>, Optional  (str) anycast: <class 'bool'>, Optional  (str) status: <class 'str'>}, 'counters': {'unicast_packets_forwarded': <class 'int'>, 'unicast_packets_originated': <class 'int'>, 'unicast_packets_consumed': <class 'int'>, 'unicast_bytes_forwarded': <class 'int'>, 'unicast_bytes_originated': <class 'int'>, 'unicast_bytes_consumed': <class 'int'>, 'multicast_packets_forwarded': <class 'int'>, 'multicast_packets_originated': <class 'int'>, 'multicast_packets_consumed': <class 'int'>, 'multicast_bytes_forwarded': <class 'int'>, 'multicast_bytes_originated': <class 'int'>, 'multicast_bytes_consumed': <class 'int'>}, Optional  (str) ipv6_subnet: <class 'str'>, 'ipv6_link_local': <class 'str'>, 'ipv6_link_local_state': <class 'str'>, 'ipv6_ll_state': <class 'str'>, Optional  (str) ipv6_virtual_add: <class 'str'>, Optional  (str) ipv6_virtual_groups: <class 'list'>, Optional  (str) virtual_add: <class 'bool'>, Optional  (str) multicast_groups: <class 'bool'>, 'ipv6_multicast_routing': <class 'str'>, 'ipv6_report_link_local': <class 'str'>, 'ipv6_forwarding_feature': <class 'str'>, Optional  (str) ipv6_multicast_groups: <class 'list'>, Optional  (str) ipv6_multicast_entries: <class 'str'>, 'ipv6_mtu': <class 'int'>, 'ipv6_unicast_rev_path_forwarding': <class 'str'>, 'ipv6_load_sharing': <class 'str'>, 'ipv6_last_reset': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_Ipv6MldGroupsDetail": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {'up_time': <class 'str'>, 'filter_mode': <class 'str'>, 'host_mode': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) source: {Any  (str) *: {Optional  (str) expire: <class 'str'>, 'forward': <class 'bool'>, Optional  (str) flags: <class 'str'>, 'up_time': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {'up_time': <class 'str'>, 'filter_mode': <class 'str'>, 'host_mode': <class 'str'>, 'last_reporter': <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) source: {Any  (str) *: {Optional  (str) expire: <class 'str'>, 'forward': <class 'bool'>, Optional  (str) flags: <class 'str'>, 'up_time': <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py"
    }
  },
  "Verify_Ipv6MldGroups_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {'groups_count': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'expire': <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) expire: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6MldGroups_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{'vrfs': {Any  (str) *: {'groups_count': <class 'int'>, Optional  (str) interface: {Any  (str) *: {'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'expire': <class 'str'>, 'up_time': <class 'str'>, 'last_reporter': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) expire: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) last_reporter: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6MldInterface_vrf_all": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, 'interface': {Any  (str) *: {'oper_status': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) interface_adress: <class 'str'>, 'enable': <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py"
    },
    "iosxe": {
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, 'interface': {Any  (str) *: {'oper_status': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) interface_adress: <class 'str'>, 'enable': <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) count: <class 'int'>, Optional  (str) interface: {Any  (str) *: {'enable': <class 'bool'>, 'link_status': <class 'str'>, 'oper_status': <class 'str'>, Optional  (str) ipv6: {Any  (str) *: {'ip': <class 'str'>, 'prefix_length': <class 'str'>, 'status': <class 'str'>}}, Optional  (str) link_local: {'address': <class 'str'>, 'status': <class 'str'>, Optional  (str) ipv6_address: <class 'str'>}, Optional  (str) querier: <class 'str'>, Optional  (str) querier_version: <class 'int'>, Optional  (str) next_query_sent_in: <class 'str'>, Optional  (str) membership_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) host_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) configured_query_max_response_time: <class 'int'>, Optional  (str) startup_query: {Optional  (str) configured_interval: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) count: <class 'int'>}, Optional  (str) last_member: {Optional  (str) mrt: <class 'int'>, Optional  (str) query_count: <class 'int'>}, Optional  (str) group_timeout: <class 'int'>, Optional  (str) configured_group_timeout: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) unsolicited_report_interval: <class 'int'>, Optional  (str) robustness_variable: <class 'int'>, Optional  (str) configured_robustness_variable: <class 'int'>, Optional  (str) link_local_groups_reporting: <class 'bool'>, Optional  (str) immediate_leave: <class 'bool'>, Optional  (str) enable_refcount: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) available_groups: <class 'int'>, Optional  (str) statistics: {'sent': {Any  (str) *: <class 'int'>}, 'received': {Any  (str) *: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6MldInterface_vrf_default": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, 'interface': {Any  (str) *: {'oper_status': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) interface_adress: <class 'str'>, 'enable': <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, 'interface': {Any  (str) *: {'oper_status': <class 'str'>, 'interface_status': <class 'str'>, Optional  (str) interface_adress: <class 'str'>, 'enable': <class 'bool'>, Optional  (str) version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) last_member_query_interval: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) active_groups: <class 'int'>, Optional  (str) counters: {'joins': <class 'int'>, 'leaves': <class 'int'>}, Optional  (str) querier: <class 'str'>, Optional  (str) query_this_system: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) count: <class 'int'>, Optional  (str) interface: {Any  (str) *: {'enable': <class 'bool'>, 'link_status': <class 'str'>, 'oper_status': <class 'str'>, Optional  (str) ipv6: {Any  (str) *: {'ip': <class 'str'>, 'prefix_length': <class 'str'>, 'status': <class 'str'>}}, Optional  (str) link_local: {'address': <class 'str'>, 'status': <class 'str'>, Optional  (str) ipv6_address: <class 'str'>}, Optional  (str) querier: <class 'str'>, Optional  (str) querier_version: <class 'int'>, Optional  (str) next_query_sent_in: <class 'str'>, Optional  (str) membership_count: <class 'int'>, Optional  (str) version: <class 'int'>, Optional  (str) host_version: <class 'int'>, Optional  (str) query_interval: <class 'int'>, Optional  (str) configured_query_interval: <class 'int'>, Optional  (str) query_max_response_time: <class 'int'>, Optional  (str) configured_query_max_response_time: <class 'int'>, Optional  (str) startup_query: {Optional  (str) configured_interval: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) count: <class 'int'>}, Optional  (str) last_member: {Optional  (str) mrt: <class 'int'>, Optional  (str) query_count: <class 'int'>}, Optional  (str) group_timeout: <class 'int'>, Optional  (str) configured_group_timeout: <class 'int'>, Optional  (str) querier_timeout: <class 'int'>, Optional  (str) configured_querier_timeout: <class 'int'>, Optional  (str) unsolicited_report_interval: <class 'int'>, Optional  (str) robustness_variable: <class 'int'>, Optional  (str) configured_robustness_variable: <class 'int'>, Optional  (str) link_local_groups_reporting: <class 'bool'>, Optional  (str) immediate_leave: <class 'bool'>, Optional  (str) enable_refcount: <class 'int'>, Optional  (str) group_policy: <class 'str'>, Optional  (str) max_groups: <class 'int'>, Optional  (str) available_groups: <class 'int'>, Optional  (str) statistics: {'sent': {Any  (str) *: <class 'int'>}, 'received': {Any  (str) *: <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6MldLocalGroups_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) interface: {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'last_reported': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) last_reported: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6MldLocalGroups_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>",
      "groups": [],
      "schema": "{'vrfs': {Any  (str) *: {Optional  (str) interface: {Any  (str) *: {Optional  (str) join_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, Optional  (str) static_group: {Any  (str) *: {'group': <class 'str'>, 'source': <class 'str'>}}, 'group': {Any  (str) *: {Optional  (str) source: {Any  (str) *: {'last_reported': <class 'str'>, 'type': <class 'str'>}}, Optional  (str) last_reported: <class 'str'>, Optional  (str) type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py"
    }
  },
  "Verify_Ipv6Mroute": {
    "ios": {
      "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) msdp_learned: <class 'bool'>, Optional  (str) rp: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) upstream_interface: {Any  (str) *: {'rpf_nbr': <class 'str'>}}, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) iif_lisp_rloc: <class 'str'>, Optional  (str) iif_lisp_group: <class 'str'>, Optional  (str) lisp_vrf: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>, 'state_mode': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) pkts: <class 'int'>, Optional  (str) vcd: <class 'str'>, Optional  (str) lisp_mcast_source: <class 'str'>, Optional  (str) lisp_mcast_group: <class 'str'>, Optional  (str) vxlan_version: <class 'str'>, Optional  (str) vxlan_vni: <class 'str'>, Optional  (str) vxlan_nxthop: <class 'str'>, Optional  (str) lisp_join_sender_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>}}}}, Optional  (str) extranet_rx_vrf_list: {Any  (str) *: {'e_src': <class 'str'>, 'e_grp': <class 'str'>, 'e_uptime': <class 'str'>, 'e_expire': <class 'str'>, Optional  (str) e_rp: <class 'str'>, 'e_oif_count': <class 'str'>, 'e_flags': <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n      show ipv6 mroute\n       show ipv6 mroute vrf {vrf}\n      show ipv6 mroute {group}\n      show ipv6 mroute {group} {source}\n      show ipv6 mroute verbose\n      show ipv6 mroute {group} verbose\n      show ipv6 mroute {group} {source} verbose\n      show ipv6 mroute vrf {vrf} {group}\n      show ipv6 mroute vrf {vrf} {group} {source}\n      show ipv6 mroute vrf {vrf} verbose\n      show ipv6 mroute vrf {vrf} {group} verbose\n      show ipv6 mroute vrf {vrf} {group} {source} verbose",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 5,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) expire: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) msdp_learned: <class 'bool'>, Optional  (str) rp: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) upstream_interface: {Any  (str) *: {'rpf_nbr': <class 'str'>}}, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) rpf_info: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) iif_lisp_rloc: <class 'str'>, Optional  (str) iif_lisp_group: <class 'str'>, Optional  (str) lisp_vrf: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>, 'state_mode': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) pkts: <class 'int'>, Optional  (str) vcd: <class 'str'>, Optional  (str) lisp_mcast_source: <class 'str'>, Optional  (str) lisp_mcast_group: <class 'str'>, Optional  (str) vxlan_version: <class 'str'>, Optional  (str) vxlan_vni: <class 'str'>, Optional  (str) vxlan_nxthop: <class 'str'>, Optional  (str) lisp_join_sender_list: {Any  (str) *: {'uptime': <class 'str'>, 'expire': <class 'str'>}}}}, Optional  (str) extranet_rx_vrf_list: {Any  (str) *: {'e_src': <class 'str'>, 'e_grp': <class 'str'>, 'e_uptime': <class 'str'>, 'e_expire': <class 'str'>, Optional  (str) e_rp: <class 'str'>, 'e_oif_count': <class 'str'>, 'e_flags': <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py"
    }
  },
  "Verify_Ipv6MrouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 mroute vrf all",
      "exclude": [],
      "groups": [
        "multicast",
        "trm"
      ],
      "iteration": {
        "attempt": 12,
        "interval": 20
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) multicast_group: {Any  (str) *: {Optional  (str) source_address: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) oil_count: <class 'str'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) incoming_interface_list: {Any  (str) *: {Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) internal: <class 'bool'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {Optional  (str) oil_uptime: <class 'str'>, Optional  (str) oil_flags: <class 'str'>, Optional  (str) oif_rpf: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py"
    }
  },
  "Verify_Ipv6NdInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>\n        show ipv6 nd interface <interface>\n        show ipv6 nd interface <interface> vrf all\n        show ipv6 nd interface <interface> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'oper_status': <class 'str'>, 'enable': <class 'bool'>, 'ip': <class 'str'>, 'mac_extract': <class 'str'>, 'local_address': <class 'str'>, 'link_status': <class 'str'>, 'router_advertisement': {'interval': <class 'int'>, 'lifetime': <class 'int'>, 'managed_address_configuration': <class 'bool'>, 'other_stateful_configuration': <class 'bool'>, 'default_router_preference': <class 'str'>, 'current_hop_limit': <class 'int'>, 'mtu': <class 'int'>, 'reachable_time': <class 'int'>, 'retrans_timer': <class 'int'>, 'suppress': <class 'bool'>, 'suppress_mtu': <class 'bool'>, 'suppress_route_information': <class 'bool'>}, 'active_timers': {'last_neighbor_solicitation': <class 'str'>, 'last_neighbor_advertisement': <class 'str'>, 'last_router_advertisement': <class 'str'>, 'next_router_advertisement': <class 'str'>}, 'neighbor_solicitation': {'interval': <class 'int'>, 'retry_base': <class 'int'>, 'retry_interval': <class 'int'>, 'retry_attempts': <class 'int'>}, 'error_message': {'redirects': <class 'bool'>, 'unreachables': <class 'bool'>}, 'dad': {'maximum_attempts': <class 'int'>, 'current_attempt': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py"
    }
  },
  "Verify_Ipv6NeighborDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ipv6 neighbor detail\n        show ipv6 neighbor detail vrf all\n        show ipv6 neighbor detail vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'link_layer_address': <class 'str'>, 'age': <class 'str'>, Optional  (str) preference: <class 'int'>, 'origin': <class 'str'>, Optional  (str) physical_interface: <class 'str'>, Optional  (str) packet_count: <class 'int'>, Optional  (str) byte_count: <class 'int'>, Optional  (str) best: <class 'str'>, Optional  (str) throttled: <class 'str'>}}}}, 'adjacency_hit': {Any  (str) *: {'packet_count': <class 'int'>, 'byte_count': <class 'int'>}}, 'adjacency_statistics_last_updated_before': <class 'str'>, 'total_number_of_entries': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py"
    }
  },
  "Verify_Ipv6PimBsrCandidateRp": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) interval: <class 'int'>, Optional  (str) scope: <class 'str'>}, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) holdtime: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) interval: <class 'int'>, Optional  (str) scope: <class 'str'>}, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_Ipv6PimBsrElection": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Optional  (str) bsr_candidate: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) priority: <class 'int'>}, Optional  (str) bsr: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) scope_range_list: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>, Optional  (str) rpf_interface: <class 'str'>, Optional  (str) rpf_address: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'rp': {'bsr': {Optional  (str) bsr_candidate: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) priority: <class 'int'>}, Optional  (str) bsr: {Optional  (str) address: <class 'str'>, Optional  (str) hash_mask_length: <class 'int'>, Optional  (str) scope_range_list: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>, Optional  (str) rpf_interface: <class 'str'>, Optional  (str) rpf_address: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_Ipv6PimDf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim df\n        show ipv6 pim df vrf <vrf>",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) bidir: {Optional  (str) interface_df_election: {Optional  (Any) Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) metric_pref: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) group_range: <class 'str'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) df_address: <class 'str'>, Optional  (str) df_uptime: <class 'str'>, Optional  (str) interface_state: <class 'str'>, Optional  (str) winner_metric_pref: <class 'int'>, Optional  (str) winner_metric: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimGroupRange": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim group-range\n        show ipv6 pim group-range vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'sm': {Any  (str) *: {Any  (str) *: {Optional  (str) mode: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) shared_tree_only: <class 'str'>, Optional  (str) range: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimInterface": {
    "ios": {
      "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {'dr_priority': <class 'int'>, 'hello_interval': <class 'int'>, 'neighbor_count': <class 'int'>, 'pim_enabled': <class 'bool'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) address: <class 'list'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interface': {Any  (str) *: {'dr_priority': <class 'int'>, 'hello_interval': <class 'int'>, 'neighbor_count': <class 'int'>, 'pim_enabled': <class 'bool'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) address: <class 'list'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) oper_status: <class 'str'>, Optional  (str) link_status: <class 'str'>, Optional  (str) admin_status: <class 'str'>, Optional  (str) address: <class 'list'>, Optional  (str) dr_address: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) configured_dr_priority: <class 'int'>, Optional  (str) neighbor_count: <class 'int'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) hello_expiration: <class 'str'>, Optional  (str) neighbor_holdtime: <class 'int'>, Optional  (str) dr_delay: <class 'int'>, Optional  (str) bsr_border: <class 'bool'>, Optional  (str) genid: <class 'str'>, Optional  (str) hello_md5_ah_authentication: <class 'str'>, Optional  (str) neighbor_filter: <class 'str'>, Optional  (str) jp_inbound_policy: <class 'str'>, Optional  (str) jp_outbound_policy: <class 'str'>, Optional  (str) jp_interval: <class 'int'>, Optional  (str) jp_next_sending: <class 'int'>, Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) sm: {Optional  (str) passive: <class 'bool'>}, Optional  (str) vpc_svi: <class 'bool'>, Optional  (str) auto_enabled: <class 'bool'>, Optional  (str) statistics: {Optional  (str) last_reset: <class 'str'>, Optional  (str) general: {Optional  (str) hellos: <class 'str'>, Optional  (str) jps: <class 'str'>, Optional  (str) asserts: <class 'str'>, Optional  (str) grafts: <class 'str'>, Optional  (str) graft_acks: <class 'str'>, Optional  (str) df_offers: <class 'str'>, Optional  (str) df_winners: <class 'str'>, Optional  (str) df_backoffs: <class 'str'>, Optional  (str) df_passes: <class 'str'>}, Optional  (str) errors: {Optional  (str) checksum: <class 'int'>, Optional  (str) invalid_packet_types: <class 'int'>, Optional  (str) invalid_df_subtypes: <class 'int'>, Optional  (str) authentication_failed: <class 'int'>, Optional  (str) packet_length_errors: <class 'int'>, Optional  (str) bad_version_packets: <class 'int'>, Optional  (str) packets_from_self: <class 'int'>, Optional  (str) packets_from_non_neighbors: <class 'int'>, Optional  (str) packets_received_on_passiveinterface: <class 'int'>, Optional  (str) jps_received_on_rpf_interface: <class 'int'>, Optional  (str) joins_received_with_no_rp: <class 'int'>, Optional  (str) joins_received_with_wrong_rp: <class 'int'>, Optional  (str) joins_received_with_ssm_groups: <class 'int'>, Optional  (str) joins_received_with_bidir_groups: <class 'int'>, Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>, Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimNeighborDetail": {
    "ios": {
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    }
  },
  "Verify_Ipv6PimNeighbor_vrf_all": {
    "ios": {
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>",
      "exclude": [],
      "groups": [
        "multicast"
      ],
      "iteration": {
        "attempt": 18,
        "interval": 10
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) bfd_status: <class 'bool'>, Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) ecmp_redirect_capable: <class 'bool'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimNeighbor_vrf_default": {
    "ios": {
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) designated_router: <class 'bool'>, Optional  (str) default_dr_prioirty: <class 'bool'>, Optional  (str) proxy_capable: <class 'bool'>, Optional  (str) state_refresh_capable: <class 'bool'>, Optional  (str) genid_capable: <class 'bool'>, Optional  (str) dr_load_balancing_capable: <class 'bool'>, Optional  (str) version: <class 'str'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 18,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) bfd_status: <class 'bool'>, Optional  (str) expiration: <class 'str'>, Optional  (str) dr_priority: <class 'int'>, Optional  (str) up_time: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) bidir_capable: <class 'bool'>, Optional  (str) ecmp_redirect_capable: <class 'bool'>}, Optional  (str) secondary_address: <class 'list'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimRoute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim route\n        show ipv6 pim route vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) topology_tree_info: {Any  (str) *: {Optional  (str) group: <class 'str'>, Optional  (str) source_address: <class 'str'>, Optional  (str) is_rpt: <class 'bool'>, Optional  (str) rp_bit: <class 'bool'>, Optional  (str) expiration: <class 'str'>, Optional  (str) incoming_interface: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) rp_address: <class 'str'>, Optional  (str) rpf_neighbor: <class 'str'>, Optional  (str) jp_holdtime_roundup: <class 'int'>, Optional  (str) oif: <class 'str'>, Optional  (str) oif_count: <class 'int'>, Optional  (str) oif_timeout_count: <class 'int'>, Optional  (str) oif_timeout: <class 'str'>, Optional  (str) immediate: <class 'str'>, Optional  (str) immediate_count: <class 'int'>, Optional  (str) immediate_timeout_count: <class 'int'>, Optional  (str) immediate_timeout: <class 'str'>, Optional  (str) timeout_interval: <class 'int'>, Optional  (str) sgr_prune_count: <class 'int'>, Optional  (str) sgr_prune: <class 'str'>, Optional  (str) route_fabric_owned: <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimRp_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim rp\n        show ipv6 pim rp vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}, Optional  (str) bidir: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}}}, Optional  (str) bsr: {Optional  (str) bsr_candidate: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>}, Optional  (str) bsr: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) rp: {'up_time': <class 'str'>, 'group_policy': <class 'str'>, Optional  (str) rp_address: <class 'str'>}, Optional  (str) bsr_address: {Any  (str) *: {'priority': <class 'int'>, 'mode': <class 'str'>, 'address': <class 'str'>, 'policy': <class 'str'>}}, Optional  (str) bsr_next_bootstrap: <class 'str'>, Optional  (str) rp_candidate_policy: <class 'str'>, Optional  (str) rp_policy: <class 'str'>, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}, Optional  (str) autorp: {Optional  (str) announce_policy: <class 'str'>, Optional  (str) discovery_policy: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) bsr_next_discovery: <class 'str'>, Optional  (str) send_rp_announce: {Optional  (str) group: <class 'str'>, Optional  (str) scope: <class 'int'>, Optional  (str) group_list: <class 'str'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) rp_source: <class 'str'>}}, Optional  (str) rp_list: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) info_source_type: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) group_ranges: <class 'str'>}}, Optional  (str) rp_mappings: {Any  (str) *: {'group': <class 'str'>, 'rp_address': <class 'str'>, 'protocol': <class 'str'>, 'up_time': <class 'str'>, Optional  (str) expiration: <class 'str'>}}}, Optional  (str) sm: {Optional  (str) asm: {Optional  (str) anycast_rp: {Any  (str) *: {Optional  (str) anycast_address: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimRp_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 pim rp\n        show ipv6 pim rp vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) rp: {Optional  (str) static_rp: {Any  (str) *: {Optional  (str) sm: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}, Optional  (str) bidir: {'policy_name': <class 'str'>, Optional  (str) route_map: <class 'str'>}}}, Optional  (str) bsr: {Optional  (str) bsr_candidate: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>}, Optional  (str) bsr: {'priority': <class 'int'>, 'hash_mask_length': <class 'int'>, 'address': <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expires: <class 'str'>}, Optional  (str) rp: {'up_time': <class 'str'>, 'group_policy': <class 'str'>, Optional  (str) rp_address: <class 'str'>}, Optional  (str) bsr_address: {Any  (str) *: {'priority': <class 'int'>, 'mode': <class 'str'>, 'address': <class 'str'>, 'policy': <class 'str'>}}, Optional  (str) bsr_next_bootstrap: <class 'str'>, Optional  (str) rp_candidate_policy: <class 'str'>, Optional  (str) rp_policy: <class 'str'>, Optional  (str) rp_candidate_next_advertisement: <class 'str'>}, Optional  (str) autorp: {Optional  (str) announce_policy: <class 'str'>, Optional  (str) discovery_policy: <class 'str'>, Optional  (str) address: <class 'str'>, Optional  (str) bsr_next_discovery: <class 'str'>, Optional  (str) send_rp_announce: {Optional  (str) group: <class 'str'>, Optional  (str) scope: <class 'int'>, Optional  (str) group_list: <class 'str'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) rp_source: <class 'str'>}}, Optional  (str) rp_list: {Any  (str) *: {Optional  (str) address: <class 'str'>, Optional  (str) info_source_address: <class 'str'>, Optional  (str) info_source_type: <class 'str'>, Optional  (str) up_time: <class 'str'>, Optional  (str) expiration: <class 'str'>, Optional  (str) df_ordinal: <class 'int'>, Optional  (str) priority: <class 'int'>, Optional  (str) mode: <class 'str'>, Optional  (str) group_ranges: <class 'str'>}}, Optional  (str) rp_mappings: {Any  (str) *: {'group': <class 'str'>, 'rp_address': <class 'str'>, 'protocol': <class 'str'>, 'up_time': <class 'str'>, Optional  (str) expiration: <class 'str'>}}}, Optional  (str) sm: {Optional  (str) asm: {Optional  (str) anycast_rp: {Any  (str) *: {Optional  (str) anycast_address: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PimVrfAllDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 pim vrf all detail",
      "groups": [],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) vrf_id: <class 'int'>, Optional  (str) table_id: <class 'str'>, Optional  (str) interface_count: <class 'int'>, Optional  (str) bfd: {Optional  (str) enable: <class 'bool'>}, Optional  (str) state_limit: <class 'str'>, Optional  (str) register_rate_limit: <class 'str'>, Optional  (str) shared_tree_route_map: <class 'str'>, Optional  (str) shared_tree_route_ranges: <class 'str'>, Optional  (str) shared_tree_ranges: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_Ipv6PrefixList": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, 'protocol': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'prefix': <class 'str'>, 'masklength_range': <class 'str'>, 'sequence': <class 'int'>, 'action': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_prefix_list.py"
    }
  },
  "Verify_Ipv6PrefixListDetail": {
    "ios": {
      "doc": "Parser for show ipv6 prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) count: <class 'int'>, Optional  (str) range_entries: <class 'int'>, Optional  (str) sequences: <class 'str'>, Optional  (str) refcount: <class 'int'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) prefix: <class 'str'>, Optional  (str) masklength_range: <class 'str'>, Optional  (str) sequence: <class 'int'>, Optional  (str) hit_count: <class 'int'>, Optional  (str) refcount: <class 'int'>, Optional  (str) action: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_prefix_list.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 prefix-list detail",
      "groups": [],
      "schema": "{'prefix_set_name': {Any  (str) *: {'prefix_set_name': <class 'str'>, Optional  (str) protocol: <class 'str'>, Optional  (str) count: <class 'int'>, Optional  (str) range_entries: <class 'int'>, Optional  (str) sequences: <class 'str'>, Optional  (str) refcount: <class 'int'>, Optional  (str) prefixes: {Any  (str) *: {Optional  (str) prefix: <class 'str'>, Optional  (str) masklength_range: <class 'str'>, Optional  (str) sequence: <class 'int'>, Optional  (str) hit_count: <class 'int'>, Optional  (str) refcount: <class 'int'>, Optional  (str) action: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_prefix_list.py"
    }
  },
  "Verify_Ipv6RouteUpdated": {
    "ios": {
      "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated",
      "groups": [],
      "schema": "{'ipv6_unicast_routing_enabled': <class 'bool'>, 'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated",
      "exclude": [],
      "groups": [],
      "schema": "{'ipv6_unicast_routing_enabled': <class 'bool'>, 'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    }
  },
  "Verify_Ipv6Route_protocol_bgp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 route\n        show ipv6 route vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "protocol": "bgp"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_Ipv6Route_protocol_ospf": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 route\n        show ipv6 route vrf <vrf>",
      "exclude": [],
      "groups": [],
      "parameters": {
        "protocol": "ospf"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_Ipv6Route_vrf_all": {
    "iosxe": {
      "doc": "Parser for:\n        show ipv6 route\n        show ipv6 route vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ",
      "exclude": [],
      "groups": [
        "multicast"
      ],
      "iteration": {
        "attempt": 15,
        "interval": 5
      },
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_Ipv6Route_vrf_default": {
    "iosxe": {
      "doc": "Parser for:\n        show ipv6 route\n        show ipv6 route vrf <vrf>",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) net: <class 'str'>, Optional  (str) redist_via: <class 'str'>, Optional  (str) redist_via_tag: <class 'str'>, Optional  (str) update: {'from': <class 'str'>, 'interface': <class 'str'>, 'age': <class 'str'>}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) age: <class 'str'>, Optional  (str) from: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) share_count: <class 'str'>, Optional  (str) loading: <class 'str'>, Optional  (str) hops: <class 'str'>, Optional  (str) minimum_mtu: <class 'str'>, Optional  (str) reliability: <class 'str'>, Optional  (str) minimum_bandwidth: <class 'str'>, Optional  (str) total_delay: <class 'str'>, Optional  (str) vrf: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) ubest: <class 'int'>, Optional  (str) mbest: <class 'int'>, Optional  (str) process_id: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) hidden: <class 'bool'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) attached: <class 'bool'>, Optional  (str) active: <class 'bool'>, Optional  (str) direct: <class 'bool'>, Optional  (str) pervasive: <class 'bool'>, Optional  (str) all_best: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_status: <class 'str'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) next_hop_af: <class 'str'>, Optional  (str) best_ucast_nexthop: <class 'bool'>, Optional  (str) best_mcast_nexthop: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) stale: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) asymmetric: <class 'bool'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_Ipv6Routers": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show ipv6 routers\n        show ipv6 routers vrf all\n        show ipv6 routers vrf <vrf>",
      "exclude": [
        "last_update"
      ],
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'interface': <class 'str'>, 'neighbors': {Any  (str) *: {'ip': <class 'str'>, 'is_router': <class 'bool'>, 'last_update': <class 'str'>, 'current_hop_limit': <class 'int'>, 'addr_flag': <class 'int'>, 'other_flag': <class 'int'>, 'mtu': <class 'int'>, 'lifetime': <class 'int'>, 'preference': <class 'str'>, 'homeagent_flag': <class 'int'>, 'retransmission_time': <class 'int'>, 'reachable_time': <class 'int'>, Optional  (str) prefix: {Any  (str) *: {'autonomous_flag': <class 'int'>, 'onlink_flag': <class 'int'>, 'preferred_lifetime': <class 'int'>, 'valid_lifetime': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py"
    }
  },
  "Verify_Ipv6StaticDetail": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) tag: <class 'int'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) resolved_outgoing_interface: <class 'str'>, Optional  (str) resolved_paths_number: <class 'int'>, Optional  (str) rejected_by: <class 'str'>, Optional  (str) max_depth: <class 'int'>, Optional  (str) preference: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) track_state: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show ipv6 static detail\n       show ipv6 static vrf <vrf> detail\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) preference: <class 'int'>, Optional  (str) tag: <class 'int'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) resolved_outgoing_interface: <class 'str'>, Optional  (str) resolved_paths_number: <class 'int'>, Optional  (str) rejected_by: <class 'str'>, Optional  (str) max_depth: <class 'int'>, Optional  (str) preference: <class 'int'>, Optional  (str) tag: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) track_state: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py"
    }
  },
  "Verify_Ipv6StaticRouteMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 static-route multicast vrf all",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) mroute: {Any  (str) *: {Optional  (str) path: {Any  (str) *: {Optional  (str) neighbor_address: <class 'str'>, Optional  (str) nh_vrf: <class 'str'>, Optional  (str) reslv_tid: <class 'str'>, Optional  (str) interface_name: <class 'str'>, Optional  (str) rnh_status: <class 'str'>, Optional  (str) bfd_enable: <class 'bool'>, Optional  (str) vrf_id: <class 'str'>, Optional  (str) preference: <class 'str'>, Optional  (str) mroute_int: <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py"
    }
  },
  "Verify_Ipv6StaticRoute_vrf_all": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all",
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) resolved_tid: <class 'int'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) rnh_active: <class 'bool'>, Optional  (str) next_hop_vrf: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_netmask: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) resolved_tid: <class 'int'>, Optional  (str) preference: <class 'int'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) rnh_active: <class 'bool'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py"
    }
  },
  "Verify_Ipv6StaticRoute_vrf_default": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) resolved_tid: <class 'int'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) rnh_active: <class 'bool'>, Optional  (str) next_hop_vrf: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) next_hop_netmask: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) resolved_tid: <class 'int'>, Optional  (str) preference: <class 'int'>, Optional  (str) bfd_enabled: <class 'bool'>, Optional  (str) next_hop_vrf: <class 'str'>, Optional  (str) rnh_active: <class 'bool'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py"
    }
  },
  "Verify_Ipv6VrfAllInterface": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ipv6 vrf all interface",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 9,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'oper_status': <class 'str'>, 'int_status': <class 'str'>, 'vrf': <class 'str'>, 'vrf_id': <class 'str'>, 'enabled': <class 'bool'>, 'ipv6_enabled': <class 'bool'>, Optional  (str) ipv6: {Any  (str) *: {Optional  (str) ipv6: <class 'str'>, Optional  (str) ipv6_prefix_length: <class 'str'>, Optional  (str) ipv6_status: <class 'str'>, Optional  (str) ipv6_route_tag: <class 'str'>, Optional  (str) ipv6_eui64: <class 'bool'>, Optional  (str) ipv6_subnet: <class 'str'>}, Optional  (str) ipv6_link_local: <class 'str'>, Optional  (str) ipv6_link_local_state: <class 'str'>, Optional  (str) ipv6_group_address: <class 'str'>, Optional  (str) ipv6_groups: <class 'list'>, Optional  (str) ipv6_mtu: <class 'str'>, Optional  (str) ipv6_mtu_available: <class 'str'>, Optional  (str) icmp_redirects: <class 'str'>, Optional  (str) icmp_unreachables: <class 'str'>, Optional  (str) nd_dad: <class 'str'>, Optional  (str) dad_attempts: <class 'str'>, Optional  (str) nd_reachable_time: <class 'str'>, Optional  (str) nd_cache_limit: <class 'str'>, Optional  (str) nd_adv_retrans_int: <class 'str'>, Optional  (str) nd_adv_duration: <class 'str'>, Optional  (str) nd_router_adv: <class 'str'>, Optional  (str) stateless_autoconfig: <class 'bool'>, Optional  (str) out_access_list: <class 'str'>, Optional  (str) in_access_list: <class 'str'>, Optional  (str) in_common_access_list: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) complete_protocol_adj: <class 'str'>, Optional  (str) complete_glean_adj: <class 'str'>, Optional  (str) incomplete_protocol_adj: <class 'str'>, Optional  (str) incomplete_glean_adj: <class 'str'>, Optional  (str) dropped_protocol_req: <class 'str'>, Optional  (str) dropped_glean_req: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_IssuRollbackTimer": {
    "ios": {
      "doc": "Parser for show issu rollback-timer",
      "groups": [],
      "schema": "{'rollback_timer_state': <class 'str'>, Optional  (str) rollback_timer_reason: <class 'str'>, Optional  (str) rollback_timer_time: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_issu.py"
    },
    "iosxe": {
      "c9500": {
        "doc": "Parser for show issu rollback-timer",
        "groups": [],
        "schema": "{'rollback_timer_state': <class 'str'>, Optional  (str) rollback_timer_reason: <class 'str'>, Optional  (str) rollback_timer_time: <class 'str'>}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_issu.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show issu rollback-timer",
      "groups": [],
      "schema": "{'rollback_timer_state': <class 'str'>, Optional  (str) rollback_timer_reason: <class 'str'>, Optional  (str) rollback_timer_time: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py"
    }
  },
  "Verify_IssuStateDetail": {
    "ios": {
      "doc": "Parser for show issu state detail",
      "groups": [],
      "schema": "{'slot': {Any  (str) *: {Optional  (str) issu_in_progress: <class 'bool'>, Optional  (str) loadversion_time: <class 'str'>, Optional  (str) context: <class 'str'>, Optional  (str) last_operation: <class 'str'>, Optional  (str) rollback_state: <class 'str'>, Optional  (str) rollback_time: <class 'str'>, Optional  (str) rollback_reason: <class 'str'>, Optional  (str) original_rollback_image: <class 'str'>, Optional  (str) running_image: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) terminal_state_reached: <class 'bool'>, Optional  (str) runversion_executed: <class 'bool'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) primary_version: <class 'str'>, Optional  (str) secondary_version: <class 'str'>, Optional  (str) variable_store: <class 'str'>, Optional  (str) issu_state: <class 'str'>, Optional  (str) rp_state: <class 'str'>, Optional  (str) current_status: <class 'str'>, Optional  (str) previous_operation: <class 'str'>, Optional  (str) system_check: {Optional  (str) platform_issu_support: <class 'str'>, Optional  (str) standby_online: <class 'str'>, Optional  (str) autoboot_enabled: <class 'str'>, Optional  (str) sso_mode: <class 'str'>, Optional  (str) install_boot: <class 'str'>, Optional  (str) valid_boot_media: <class 'str'>, Optional  (str) opertional_mode: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_issu.py"
    },
    "iosxe": {
      "c9500": {
        "doc": "Parser for show issu state detail",
        "groups": [],
        "schema": "{'slot': {Any  (str) *: {Optional  (str) issu_in_progress: <class 'bool'>, Optional  (str) current_status: <class 'str'>, Optional  (str) previous_operation: <class 'str'>, Optional  (str) system_check: {Optional  (str) platform_issu_support: <class 'str'>, Optional  (str) standby_online: <class 'str'>, Optional  (str) autoboot_enabled: <class 'str'>, Optional  (str) sso_mode: <class 'str'>, Optional  (str) install_boot: <class 'str'>, Optional  (str) valid_boot_media: <class 'str'>}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_issu.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show issu state detail",
      "groups": [],
      "schema": "{'slot': {Any  (str) *: {Optional  (str) issu_in_progress: <class 'bool'>, Optional  (str) loadversion_time: <class 'str'>, Optional  (str) context: <class 'str'>, Optional  (str) last_operation: <class 'str'>, Optional  (str) rollback_state: <class 'str'>, Optional  (str) rollback_time: <class 'str'>, Optional  (str) rollback_reason: <class 'str'>, Optional  (str) original_rollback_image: <class 'str'>, Optional  (str) running_image: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) terminal_state_reached: <class 'bool'>, Optional  (str) runversion_executed: <class 'bool'>, Optional  (str) boot_variable: <class 'str'>, Optional  (str) primary_version: <class 'str'>, Optional  (str) secondary_version: <class 'str'>, Optional  (str) variable_store: <class 'str'>, Optional  (str) issu_state: <class 'str'>, Optional  (str) rp_state: <class 'str'>, Optional  (str) current_status: <class 'str'>, Optional  (str) previous_operation: <class 'str'>, Optional  (str) system_check: {Optional  (str) platform_issu_support: <class 'str'>, Optional  (str) standby_online: <class 'str'>, Optional  (str) autoboot_enabled: <class 'str'>, Optional  (str) sso_mode: <class 'str'>, Optional  (str) install_boot: <class 'str'>, Optional  (str) valid_boot_media: <class 'str'>, Optional  (str) opertional_mode: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py"
    }
  },
  "Verify_L2routeEvpnEternetSegmentAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show l2route evpn ethernet-segment all",
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 20
      },
      "schema": "{'evpn': {'ethernet_segment': {Any  (str) *: {'ethernet_segment': <class 'str'>, 'originating_rtr': <class 'str'>, 'prod_name': <class 'str'>, 'int_ifhdl': <class 'str'>, 'client_nfn': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2routeEvpnMac": {
    "iosxe": {
      "doc": " Parser for show l2route evpn mac\n                   show l2route evpn mac esi <esi>\n                   show l2route evpn mac mac-address <mac_addr>\n                   show l2route evpn mac mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac next-hop <next_hop>\n                   show l2route evpn mac next-hop <next_hop> esi <esi>\n                   show l2route evpn mac next-hop <next_hop> mac-address <mac_addr>\n                   show l2route evpn mac next-hop <next_hop> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac producer <producer>\n                   show l2route evpn mac producer <producer> esi <esi>\n                   show l2route evpn mac producer <producer> mac-address <mac_addr>\n                   show l2route evpn mac producer <producer> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac producer <producer> next-hop <next_hop>\n                   show l2route evpn mac producer <producer> next-hop <next_hop> esi <esi>\n                   show l2route evpn mac producer <producer> next-hop <next_hop> mac-address <mac_addr>\n                   show l2route evpn mac producer <producer> next-hop <next_hop> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac topology <evi_etag>\n                   show l2route evpn mac topology <evi_etag> esi <esi>\n                   show l2route evpn mac topology <evi_etag> mac-address <mac_addr>\n                   show l2route evpn mac topology <evi_etag> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac topology <evi_etag> next-hop <next_hop>\n                   show l2route evpn mac topology <evi_etag> next-hop <next_hop> esi <esi>\n                   show l2route evpn mac topology <evi_etag> next-hop <next_hop> mac-address <mac_addr>\n                   show l2route evpn mac topology <evi_etag> next-hop <next_hop> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac topology <evi_etag> producer <producer> mac-address <mac_addr>\n                   show l2route evpn mac topology <evi_etag> producer <producer> mac-address <mac_addr> esi <esi>\n                   show l2route evpn mac topology <evi_etag> producer <producer> next-hop <next_hop> mac-address <mac_addr> esi <esi>\n    ",
      "groups": [],
      "schema": "{'evi': {Any  (str) *: {'eth_tag': {Any  (str) *: {'producer': {Any  (str) *: {'mac_addr': {Any  (str) *: {'seq_number': <class 'int'>, 'next_hops': ListOf  (type) <class 'str'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2route.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for the following show commands:\n        show l2route evpn mac all\n        show l2route evpn mac evi <evi>\n    ",
      "groups": [],
      "schema": "{'topology': {Any  (str) *: {'mac_address': {Any  (str) *: {'prod': <class 'str'>, 'flags': <class 'str'>, 'seq_no': <class 'str'>, 'next_hops': <class 'str'>, Optional  (str) label: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py"
    }
  },
  "Verify_L2routeEvpnMacIpAll": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser class for show l2route evpn mac-ip all",
      "exclude": [],
      "groups": [],
      "schema": "{'topo_id': {Any  (str) *: {'mac_address': {Any  (str) *: {'ip_address': {Any  (str) *: {'producer': <class 'str'>, 'next_hop': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py"
    }
  },
  "Verify_L2routeFlAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show l2route fl all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 20
      },
      "schema": "{'topology': {'topo_id': {Any  (str) *: {Optional  (str) num_of_peer_id: <class 'int'>, 'peer_id': {Any  (str) *: {'topo_id': <class 'int'>, 'peer_id': <class 'int'>, 'flood_list': <class 'str'>, 'is_service_node': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2routeMacAllDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n            show l2route mac all detail",
      "exclude": [],
      "groups": [],
      "schema": "{'topology': {'topo_id': {Any  (str) *: {'mac': {Any  (str) *: {'mac_addr': <class 'str'>, 'prod_type': <class 'str'>, 'flags': <class 'str'>, 'seq_num': <class 'int'>, 'next_hop1': <class 'str'>, 'rte_res': <class 'str'>, 'fwd_state': <class 'str'>, Optional  (str) label: <class 'int'>, Optional  (str) peer_id: <class 'int'>, Optional  (str) res_pl: <class 'str'>, Optional  (str) sent_to: <class 'str'>, Optional  (str) soo: <class 'int'>, Optional  (str) esi: <class 'str'>, Optional  (str) encap: <class 'int'>, Optional  (str) pl_flag: <class 'bool'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2routeMacIpAllDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show l2route mac-ip all detail",
      "groups": [],
      "schema": "{'topology': {'topo_id': {Any  (str) *: {'mac_ip': {Any  (str) *: {'mac_addr': <class 'str'>, 'mac_ip_prod_type': <class 'str'>, Optional  (str) mac_ip_flags: <class 'str'>, Optional  (str) seq_num: <class 'int'>, 'next_hop1': <class 'str'>, 'host_ip': <class 'str'>, Optional  (str) sent_to: <class 'str'>, Optional  (str) soo: <class 'int'>, Optional  (str) l3_info: <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2routeSummary": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show l2route summary",
      "exclude": [],
      "groups": [
        "vxlan",
        "trm"
      ],
      "iteration": {
        "attempt": 30,
        "interval": 20
      },
      "schema": "{'summary': {'total_memory': <class 'int'>, 'numof_converged_tables': <class 'int'>, Optional  (str) table_name: {Any  (str) *: {'producer_name': {Any  (str) *: {'producer_name': <class 'str'>, 'id': <class 'int'>, 'objects': <class 'int'>, 'memory': <class 'int'>}, 'total_obj': <class 'int'>, 'total_mem': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2routeTopology": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser class for show l2route topology ",
      "exclude": [],
      "groups": [],
      "schema": "{'topo_id': {Any  (str) *: {'topo_name': {Any  (str) *: {Optional  (str) topo_type: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py"
    }
  },
  "Verify_L2routeTopologyDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show l2route topology detail",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 20
      },
      "schema": "{'topology': {'topo_id': {Any  (str) *: {'topo_name': {Any  (str) *: {'topo_name': <class 'str'>, Optional  (str) topo_type: <class 'str'>, Optional  (str) vni: <class 'int'>, Optional  (str) encap_type: <class 'int'>, Optional  (str) iod: <class 'int'>, Optional  (str) if_hdl: <class 'int'>, Optional  (str) vtep_ip: <class 'str'>, Optional  (str) emulated_ip: <class 'str'>, Optional  (str) emulated_ro_ip: <class 'str'>, Optional  (str) tx_id: <class 'int'>, Optional  (str) rcvd_flag: <class 'int'>, Optional  (str) rmac: <class 'str'>, Optional  (str) vrf_id: <class 'int'>, Optional  (str) vmac: <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) sub_flags: <class 'str'>, Optional  (str) prev_flags: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_L2vpnMacLearning": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser class for show l2vpn mac-learning <mac_type> all location <location>",
      "groups": [],
      "schema": "{'topo_id': {Any  (str) *: {'producer': {Any  (str) *: {'next_hop': {Any  (str) *: {'mac_address': {Any  (str) *: {Optional  (str) ip_address: <class 'list'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py"
    }
  },
  "Verify_LacpCounters": {
    "ios": {
      "doc": "Parser for :\n      show lacp counters",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'counters': {'lacp_in_pkts': <class 'int'>, 'lacp_out_pkts': <class 'int'>, 'lacp_pkts': <class 'int'>, Optional  (str) lacp_errors: <class 'int'>, 'marker_in_pkts': <class 'int'>, 'marker_out_pkts': <class 'int'>, Optional  (str) marker_response_in_pkts: <class 'int'>, Optional  (str) marker_response_out_pkts: <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show lacp counters",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'counters': {'lacp_in_pkts': <class 'int'>, 'lacp_out_pkts': <class 'int'>, 'lacp_pkts': <class 'int'>, Optional  (str) lacp_errors: <class 'int'>, 'marker_in_pkts': <class 'int'>, 'marker_out_pkts': <class 'int'>, Optional  (str) marker_response_in_pkts: <class 'int'>, Optional  (str) marker_response_out_pkts: <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    },
    "nxos": {
      "doc": "Parser for: show lacp counters",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'members': {Any  (str) *: {'interface': <class 'str'>, 'counters': {'lacp_in_pkts': <class 'int'>, 'lacp_out_pkts': <class 'int'>, 'lacp_errors': <class 'int'>, 'marker_resp_in_pkts': <class 'int'>, 'marker_resp_out_pkts': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py"
    }
  },
  "Verify_LacpInternal": {
    "ios": {
      "doc": "Parser for :\n      show lacp internal",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'oper_key': <class 'int'>, 'admin_key': <class 'int'>, 'port_num': <class 'int'>, 'lacp_port_priority': <class 'int'>, 'flags': <class 'str'>, Optional  (str) activity: <class 'str'>, 'state': <class 'str'>, 'bundled': <class 'bool'>, 'port_state': <class 'int'>, Optional  (str) lacp_interval: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show lacp internal",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'oper_key': <class 'int'>, 'admin_key': <class 'int'>, 'port_num': <class 'int'>, 'lacp_port_priority': <class 'int'>, 'flags': <class 'str'>, Optional  (str) activity: <class 'str'>, 'state': <class 'str'>, 'bundled': <class 'bool'>, 'port_state': <class 'int'>, Optional  (str) lacp_interval: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_LacpNeighbor": {
    "ios": {
      "doc": "Parser for :\n      show lacp neighbor",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'activity': <class 'str'>, 'oper_key': <class 'int'>, 'admin_key': <class 'int'>, 'port_num': <class 'int'>, 'partner_id': <class 'str'>, 'age': <class 'int'>, 'flags': <class 'str'>, 'lacp_port_priority': <class 'int'>, Optional  (str) port_state: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show lacp neighbor",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'activity': <class 'str'>, 'oper_key': <class 'int'>, 'admin_key': <class 'int'>, 'port_num': <class 'int'>, 'partner_id': <class 'str'>, 'age': <class 'int'>, 'flags': <class 'str'>, 'lacp_port_priority': <class 'int'>, Optional  (str) port_state: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    },
    "nxos": {
      "doc": "parser for: show lacp neighbor",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'members': {Any  (str) *: {'interface': <class 'str'>, 'activity': <class 'str'>, 'oper_key': <class 'int'>, 'port_num': <class 'int'>, 'partner_id': <class 'str'>, 'age': <class 'int'>, 'interval': <class 'str'>, 'lacp_port_priority': <class 'int'>, 'port_state': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py"
    }
  },
  "Verify_LacpSysId": {
    "ios": {
      "doc": "Parser for :\n       show lacp sys-id",
      "groups": [],
      "schema": "{'system_id_mac': <class 'str'>, 'system_priority': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show lacp sys-id",
      "groups": [],
      "schema": "{'system_id_mac': <class 'str'>, 'system_priority': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_LispDynamicEidDetail_instance_id_*": {
    "ios": {
      "doc": " Parser for \"show lisp all instance-id <instance_id> dynamic-eid detail\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'etr': {'local_eids': {Any  (str) *: {'dynamic_eids': {Any  (str) *: {'dynamic_eid_name': <class 'str'>, 'id': <class 'str'>, 'rlocs': <class 'str'>, Optional  (str) registering_more_specific: <class 'bool'>, Optional  (str) loopback_address: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) record_ttl: <class 'int'>, Optional  (str) site_based_multicast_map_notify_group: <class 'str'>, Optional  (str) proxy_reply: <class 'bool'>, Optional  (str) registration_interval: <class 'int'>, Optional  (str) global_map_server: <class 'bool'>, Optional  (str) num_of_roaming_dynamic_eid: <class 'int'>, Optional  (str) mapping_servers: {Any  (str) *: {Optional  (str) proxy_reply: <class 'bool'>}}, Optional  (str) last_dynamic_eid: {Any  (str) *: {'last_dynamic_eid_discovery_elaps_time': <class 'str'>, 'eids': {Any  (str) *: {'interface': <class 'str'>, 'uptime': <class 'str'>, 'last_activity': <class 'str'>, 'discovered_by': <class 'str'>}}}}, Optional  (str) eid_address: {Optional  (str) address_type: <class 'str'>, Optional  (str) virtual_network_id: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show lisp all instance-id <instance_id> dynamic-eid detail\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'etr': {'local_eids': {Any  (str) *: {'dynamic_eids': {Any  (str) *: {'dynamic_eid_name': <class 'str'>, 'id': <class 'str'>, 'rlocs': <class 'str'>, Optional  (str) registering_more_specific: <class 'bool'>, Optional  (str) loopback_address: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) weight: <class 'int'>, Optional  (str) record_ttl: <class 'int'>, Optional  (str) site_based_multicast_map_notify_group: <class 'str'>, Optional  (str) proxy_reply: <class 'bool'>, Optional  (str) registration_interval: <class 'int'>, Optional  (str) global_map_server: <class 'bool'>, Optional  (str) num_of_roaming_dynamic_eid: <class 'int'>, Optional  (str) mapping_servers: {Any  (str) *: {Optional  (str) proxy_reply: <class 'bool'>}}, Optional  (str) last_dynamic_eid: {Any  (str) *: {'last_dynamic_eid_discovery_elaps_time': <class 'str'>, 'eids': {Any  (str) *: {'interface': <class 'str'>, 'uptime': <class 'str'>, 'last_activity': <class 'str'>, 'discovered_by': <class 'str'>}}}}, Optional  (str) eid_address: {Optional  (str) address_type: <class 'str'>, Optional  (str) virtual_network_id: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispPlatform": {
    "ios": {
      "doc": " Parser for \"show lisp platform\" ",
      "groups": [],
      "schema": "{'parallel_lisp_instance_limit': <class 'int'>, 'rloc_forwarding_support': {'local': {'ipv4': <class 'str'>, 'ipv6': <class 'str'>, 'mac': <class 'str'>}, 'remote': {'ipv4': <class 'str'>, 'ipv6': <class 'str'>, 'mac': <class 'str'>}}, 'latest_supported_config_style': <class 'str'>, 'current_config_style': <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show lisp platform\" ",
      "groups": [
        "lisp"
      ],
      "schema": "{'parallel_lisp_instance_limit': <class 'int'>, 'rloc_forwarding_support': {'local': {'ipv4': <class 'str'>, 'ipv6': <class 'str'>, 'mac': <class 'str'>}, 'remote': {'ipv4': <class 'str'>, 'ipv6': <class 'str'>, 'mac': <class 'str'>}}, 'latest_supported_config_style': <class 'str'>, 'current_config_style': <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceDatabase_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp {lisp_id} instance-id <instance_id> <service> dabatase\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceDatabase_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp {lisp_id} instance-id <instance_id> <service> dabatase\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceDatabase_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp {lisp_id} instance-id <instance_id> <service> dabatase\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'instance_id': {<class 'int'>: {'eid_table': <class 'str'>, 'lsb': <class 'str'>, 'entries': {'total': <class 'int'>, 'no_route': <class 'int'>, 'inactive': <class 'int'>, 'eids': {<class 'str'>: {'eid': <class 'str'>, 'mask': <class 'int'>, Optional  (str) dynamic_eid: <class 'str'>, Optional  (str) locator_set: <class 'str'>, Optional  (str) no_route_to_prefix: <class 'bool'>, Optional  (str) proxy: <class 'bool'>, Optional  (str) sgt: <class 'int'>, Optional  (str) domain_id: <class 'str'>, Optional  (str) service_insertion: <class 'str'>, Optional  (str) auto_discover_rlocs: <class 'bool'>, Optional  (str) uptime: <class 'str'>, Optional  (str) last_change: <class 'str'>, Optional  (str) locators: {<class 'str'>: {'priority': <class 'int'>, 'weight': <class 'int'>, 'source': <class 'str'>, 'location': <class 'str'>, 'state': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceMapCache_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceMapCache_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceMapCache_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Any  (str) *: {'service': <class 'str'>, 'itr': {'map_cache': {Any  (str) *: {'vni': <class 'str'>, 'entries': <class 'int'>, 'mappings': {Any  (str) *: {'id': <class 'str'>, 'creation_time': <class 'str'>, 'time_to_live': <class 'str'>, 'via': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'vrf': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, Optional  (str) negative_mapping: {'map_reply_action': <class 'str'>}, Optional  (str) sgt: <class 'str'>, Optional  (str) encap_to_petr: <class 'bool'>, Optional  (str) encap_to_petr_iid: <class 'str'>, Optional  (str) positive_mapping: {'rlocs': {Any  (str) *: {'id': <class 'str'>, 'uptime': <class 'str'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, Optional  (str) encap_iid: <class 'str'>, 'locator_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceRlocMembers_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceRlocMembers_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceRlocMembers_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) rloc: {'total_entries': <class 'int'>, 'valid_entries': <class 'int'>, 'distribution': <class 'bool'>, 'members': {Any  (str) *: {'origin': <class 'str'>, 'valid': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerDetailInternal_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerDetailInternal_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerDetailInternal_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {Optional  (str) service: {Any  (str) *: {'map_server': {'sites': {Any  (str) *: {'site_id': <class 'str'>, 'allowed_configured_locators': <class 'str'>}}, Optional  (str) virtual_network_ids: {Any  (str) *: {'vni': <class 'str'>, 'mappings': {Any  (str) *: {'eid_id': <class 'str'>, 'eid_address': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'site_id': <class 'str'>, 'first_registered': <class 'str'>, 'last_registered': <class 'str'>, 'routing_table_tag': <class 'int'>, 'origin': <class 'str'>, Optional  (str) more_specifics_accepted: <class 'bool'>, 'merge_active': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'ttl': <class 'str'>, 'state': <class 'str'>, 'registration_errors': {'authentication_failures': <class 'int'>, 'allowed_locators_mismatch': <class 'int'>}, Optional  (str) mapping_records: {Any  (str) *: {'xtr_id': <class 'str'>, 'site_id': <class 'str'>, 'etr': <class 'str'>, 'eid': {'address_type': <class 'str'>, 'virtual_network_id': <class 'str'>, Optional  (str) ipv4: {'ipv4': <class 'str'>}, Optional  (str) ipv6: {'ipv6': <class 'str'>}, Optional  (str) ipv4_prefix: {'ipv4_prefix': <class 'str'>}, Optional  (str) ipv6_prefix: {'ipv6_prefix': <class 'str'>}}, 'ttl': <class 'str'>, 'time_to_live': <class 'int'>, 'creation_time': <class 'str'>, 'merge': <class 'bool'>, 'proxy_reply': <class 'bool'>, 'map_notify': <class 'bool'>, 'hash_function': <class 'str'>, 'nonce': <class 'str'>, 'state': <class 'str'>, 'security_capability': <class 'bool'>, 'sourced_by': <class 'str'>, 'locator': {Any  (str) *: {'local': <class 'bool'>, 'state': <class 'str'>, 'priority': <class 'int'>, 'weight': <class 'int'>, 'scope': <class 'str'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerSummary_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerSummary_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceServerSummary_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, 'service': {Any  (str) *: {'instance_id': {Any  (str) *: {'map_server': {Optional  (str) sites: {Any  (str) *: {'site_id': <class 'str'>, 'configured': <class 'int'>, 'registered': <class 'int'>, 'inconsistent': <class 'int'>}}, 'summary': {'number_configured_sites': <class 'int'>, 'number_registered_sites': <class 'int'>, Optional  (str) af_datum: {Any  (str) *: {'address_type': <class 'str'>, Optional  (str) number_configured_eids: <class 'int'>, Optional  (str) number_registered_eids: <class 'int'>}}, 'sites_with_inconsistent_registrations': <class 'int'>, Optional  (str) site_registration_limit: <class 'int'>, Optional  (str) site_registration_count: <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSmr_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSmr_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSmr_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {'instance_id': {Any  (str) *: {Optional  (str) smr: {'vrf': <class 'str'>, 'entries': <class 'int'>, 'prefixes': {Any  (str) *: {'producer': <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceStatistics_service_ethernet_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for\n    * show lisp service {service} statistics\n    * show lisp {lisp_id} service {service} statistics",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ethernet"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceStatistics_service_ipv4_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for\n    * show lisp service {service} statistics\n    * show lisp {lisp_id} service {service} statistics",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv4"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceStatistics_service_ipv6_instance_id_*": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for\n    * show lisp service {service} statistics\n    * show lisp {lisp_id} service {service} statistics",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "parameters": {
        "instance_id": "*",
        "service": "ipv6"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'last_cleared': <class 'str'>, 'control_packets': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'encapsulated': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'smr_based': {'in': <class 'int'>, 'out': <class 'int'>}, 'extranet_smr_cross_iid': {'in': <class 'int'>}, 'expired': {'on_queue': <class 'int'>, 'no_reply': <class 'int'>}, 'map_resolver_forwarded': <class 'int'>, 'map_server_forwarded': <class 'int'>}, 'map_reply': {'in': <class 'int'>, 'out': <class 'int'>, 'authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'non_authoritative': {'in': <class 'int'>, 'out': <class 'int'>}, 'negative': {'in': <class 'int'>, 'out': <class 'int'>}, 'rloc_probe': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_server_proxy_reply': {'out': <class 'int'>}}, 'wlc_map_subscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'wlc_map_unsubscribe': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_register': {'in': <class 'int'>, 'out': <class 'int'>, '5_sec': <class 'int'>, '1_min': <class 'int'>, '5_min': <class 'int'>, 'map_server_af_disabled': <class 'int'>, 'not_valid_site_eid_prefix': <class 'int'>, 'authentication_failures': <class 'int'>, 'disallowed_locators': <class 'int'>, 'misc': <class 'int'>}, 'wlc_map_registers': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'authentication_failures': <class 'int'>}, 'wlc_map_notify': {'in': <class 'int'>, 'out': <class 'int'>, 'ap': {'in': <class 'int'>, 'out': <class 'int'>}, 'client': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publish_subscribe': {'subscription_request': {'in': <class 'int'>, 'out': <class 'int'>, 'iid': {'in': <class 'int'>, 'out': <class 'int'>}, 'pub_refresh': {'in': <class 'int'>, 'out': <class 'int'>}, 'policy': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'subscription_status': {'in': <class 'int'>, 'out': <class 'int'>, 'end_of_publication': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_rejected': {'in': <class 'int'>, 'out': <class 'int'>}, 'subscription_removed': {'in': <class 'int'>, 'out': <class 'int'>}, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'solicit_subscription': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}, 'publication': {'in': <class 'int'>, 'out': <class 'int'>, 'failures': {'in': <class 'int'>, 'out': <class 'int'>}}}}, 'errors': {'mapping_rec_ttl_alerts': <class 'int'>, 'map_request_invalid_source_rloc_drops': <class 'int'>, 'map_register_invalid_source_rloc_drops': <class 'int'>, 'ddt_requests_failed': <class 'int'>, 'ddt_itr_map_requests': {'dropped': <class 'int'>, 'nonce_collision': <class 'int'>, 'bad_xtr_nonce': <class 'int'>}}, 'cache_related': {'cache_entries': {'created': <class 'int'>, 'deleted': <class 'int'>}, 'nsf_cef_replay_entry_count': <class 'int'>, 'rejected_eid_prefix_due_to_limit': <class 'int'>}, 'forwarding': {'data_signals': {'processed': <class 'int'>, 'dropped': <class 'int'>}, 'reachability_reports': {'count': <class 'int'>, 'dropped': <class 'int'>}, 'smr_signals': {'dropped': <class 'int'>}}, 'rloc_statistics': {'last_cleared': <class 'str'>, 'control_packets': {'rtr': {'map_requests_forwarded': <class 'int'>, 'map_notifies_forwarded': <class 'int'>}, 'ddt': {'map_requests': {'in': <class 'int'>, 'out': <class 'int'>}, 'map_referrals': {'in': <class 'int'>, 'out': <class 'int'>}}}, 'errors': {'map_request_format': <class 'int'>, 'map_reply_format': <class 'int'>, 'map_referral': <class 'int'>}}, 'misc_statistics': {'invalid': {'ip_version_drops': <class 'int'>, 'ip_header_drops': <class 'int'>, 'ip_proto_field_drops': <class 'int'>, 'packet_size_drops': <class 'int'>, 'lisp_control_port_drops': <class 'int'>, 'lisp_checksum_drops': <class 'int'>}, 'unsupported_lisp_packet_drops': <class 'int'>, 'unknown_packet_drops': <class 'int'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSummary_service_ethernet": {
    "ios": {
      "doc": "Parser for \"show lisp all service <service> summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for: \n        * show lisp service {service} summary\n        * show lisp {lisp_id} service {service} summary\n        * show lisp locator-table {locator_table} service {service} summary\n        * show lisp locator-table vrf {rloc_vrf} service {service} summary\n    ",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ethernet"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSummary_service_ipv4": {
    "ios": {
      "doc": "Parser for \"show lisp all service <service> summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for: \n        * show lisp service {service} summary\n        * show lisp {lisp_id} service {service} summary\n        * show lisp locator-table {locator_table} service {service} summary\n        * show lisp locator-table vrf {rloc_vrf} service {service} summary\n    ",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ipv4"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispServiceSummary_service_ipv6": {
    "ios": {
      "doc": "Parser for \"show lisp all service <service> summary\"",
      "groups": [],
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for: \n        * show lisp service {service} summary\n        * show lisp {lisp_id} service {service} summary\n        * show lisp locator-table {locator_table} service {service} summary\n        * show lisp locator-table vrf {rloc_vrf} service {service} summary\n    ",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ipv6"
      },
      "schema": "{'lisp_router_instances': {Any  (str) *: {'lisp_router_instance_id': <class 'int'>, Optional  (str) service: {Optional  (Any) Any  (str) *: {Optional  (str) virtual_network_ids: {Any  (str) *: {Optional  (str) vrf: <class 'str'>, 'interface': <class 'str'>, 'db_size': <class 'int'>, 'db_no_route': <class 'int'>, Optional  (str) rloc_status: <class 'str'>, 'cache_size': <class 'int'>, 'incomplete': <class 'str'>, 'cache_idle': <class 'str'>, 'lisp_role': {Any  (str) *: {'lisp_role_type': <class 'str'>}}}}, 'etr': {'summary': {'instance_count': <class 'int'>, 'total_eid_tables': <class 'int'>, 'total_db_entries': <class 'int'>, 'total_db_entries_inactive': <class 'int'>, Optional  (str) maximum_db_entries: <class 'int'>, 'total_map_cache_entries': <class 'int'>, Optional  (str) maximum_map_cache_entries: <class 'int'>, 'eid_tables_inconsistent_locators': <class 'int'>, 'eid_tables_incomplete_map_cache_entries': <class 'int'>, 'eid_tables_pending_map_cache_update_to_fib': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispService_service_ethernet": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ethernet"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispService_service_ipv4": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ipv4"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispService_service_ipv6": {
    "ios": {
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [],
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"",
      "groups": [
        "lisp"
      ],
      "parameters": {
        "service": "ipv6"
      },
      "schema": "{'lisp_id': {<class 'int'>: {'locator_table': <class 'str'>, 'itr': {'enabled': <class 'bool'>, 'proxy_itr_router': <class 'bool'>, Optional  (str) proxy_itr_rloc: <class 'str'>, Optional  (str) local_rloc_last_resort: <class 'str'>, Optional  (str) use_proxy_etr_rloc: <class 'list'>, 'solicit_map_request': <class 'str'>, 'max_smr_per_map_cache': <class 'str'>, 'multiple_smr_supression_time': <class 'int'>}, 'etr': {'enabled': <class 'bool'>, 'proxy_etr_router': <class 'bool'>, 'accept_mapping_data': <class 'str'>, 'map_cache_ttl': <class 'str'>}, Optional  (str) nat_traversal_router: <class 'bool'>, Optional  (str) mobility_first_hop_router: <class 'str'>, 'map_server': {'enabled': <class 'bool'>}, 'map_resolver': {'enabled': <class 'bool'>}, 'delegated_database_tree': <class 'str'>, 'mr_use_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, 'first_packet_petr': {'role': <class 'str'>, Optional  (str) locator_set: <class 'str'>}, Optional  (str) multiple_ip_per_mac: <class 'bool'>, Optional  (str) mcast_flood_access_tunnel: <class 'bool'>, Optional  (str) pub_sub: {'role': <class 'bool'>, Optional  (str) publishers: <class 'list'>, Optional  (str) subscribers: <class 'list'>}, Optional  (str) mapping_servers: {Any  (str) *: {'ms_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) map_resolvers: {Any  (str) *: {'mr_address': <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) xtr_id: <class 'str'>, Optional  (str) site_id: <class 'str'>, 'locator_status_algorithms': {'rloc_probe_algorithm': <class 'str'>, 'rloc_probe_on_route_change': <class 'bool'>, 'rloc_probe_member_change': <class 'str'>, 'lsb_reports': <class 'str'>, 'ipv4_rloc_min_mask_len': <class 'int'>, 'ipv6_rloc_min_mask_len': <class 'int'>}, 'map_cache': {'limit': <class 'int'>, 'activity_check_period': <class 'int'>, 'persistent': <class 'str'>}, 'database': {'dynamic_database_limit': <class 'int'>}, Optional  (str) source_locator_configuration: {'vlans': {Any  (str) *: {'address': <class 'str'>, 'interface': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_LispSession": {
    "ios": {
      "doc": " Parser for show lisp session",
      "groups": [],
      "schema": "{'vrf': {<class 'str'>: {'total': <class 'str'>, 'established': <class 'str'>, Optional  (str) peers: {<class 'str'>: ListOf  (dict) {Optional  (str) port: <class 'str'>, 'state': <class 'str'>, 'time': <class 'str'>, 'in': <class 'str'>, 'out': <class 'str'>, 'users': <class 'str'>, Optional  (str) rtt: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": " Parser for \"show lisp session\"",
      "exclude": [],
      "groups": [
        "lisp"
      ],
      "schema": "{'vrf': {<class 'str'>: {'total': <class 'str'>, 'established': <class 'str'>, Optional  (str) peers: {<class 'str'>: ListOf  (dict) {Optional  (str) port: <class 'str'>, 'state': <class 'str'>, 'time': <class 'str'>, 'in': <class 'str'>, 'out': <class 'str'>, 'users': <class 'str'>, Optional  (str) rtt: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py"
    }
  },
  "Verify_Lldp": {
    "ios": {
      "doc": "Parser for show lldp",
      "groups": [],
      "schema": "{'status': <class 'str'>, 'enabled': <class 'bool'>, 'hello_timer': <class 'int'>, 'hold_timer': <class 'int'>, 'reinit_timer': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show lldp",
      "exclude": [],
      "groups": [],
      "schema": "{'status': <class 'str'>, 'enabled': <class 'bool'>, 'hello_timer': <class 'int'>, 'hold_timer': <class 'int'>, 'reinit_timer': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py"
    },
    "iosxr": {
      "doc": "Parser for show lldp",
      "groups": [],
      "schema": "{'status': <class 'str'>, 'enabled': <class 'bool'>, 'hello_timer': <class 'int'>, 'hold_timer': <class 'int'>, 'reinit_delay': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py"
    },
    "junos": {
      "doc": " Parser for \"show lldp\"",
      "groups": [],
      "schema": "{'lldp-global-status': <class 'str'>, 'lldp-advertisement-interval': <class 'str'>, 'lldp-transmit-delay-interval': <class 'str'>, 'lldp-hold-time-interval': <class 'str'>, 'lldp-notification-interval': <class 'str'>, 'ptopo-configuration-trap-interval': <class 'str'>, 'ptopo-maximum-hold-time': <class 'str'>, 'lldp-med-global-status': <class 'str'>, 'lldp-port-id-subtype': <class 'str'>, Optional  (str) lldp-port-description-type: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_lldp.py"
    }
  },
  "Verify_LldpEntry": {
    "ios": {
      "doc": "Parser for show lldp entry [<WORD>|*]",
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'if_name': <class 'str'>, 'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) chassis_id: <class 'str'>, 'port_id': <class 'str'>, 'neighbor_id': <class 'str'>, Optional  (str) port_description: <class 'str'>, Optional  (str) system_description: <class 'str'>, Optional  (str) system_name: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) management_address: <class 'str'>, Optional  (str) auto_negotiation: <class 'str'>, Optional  (str) physical_media_capabilities: <class 'list'>, Optional  (str) unit_type: <class 'int'>, Optional  (str) vlan_id: <class 'int'>}}}}}}, Optional  (str) med_information: {Optional  (str) f/w_revision: <class 'str'>, Optional  (str) h/w_revision: <class 'str'>, Optional  (str) s/w_revision: <class 'str'>, Optional  (str) manufacturer: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) capabilities: <class 'list'>, 'device_type': <class 'str'>, Optional  (str) network_policy: {Any  (str) *: {'vlan': <class 'int'>, 'tagged': <class 'bool'>, 'layer_2_priority': <class 'int'>, 'dscp': <class 'int'>}}, Optional  (str) serial_number: <class 'str'>, Optional  (str) power_source: <class 'str'>, Optional  (str) power_priority: <class 'str'>, Optional  (str) wattage: <class 'float'>, 'location': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show lldp entry {* | word}",
      "exclude": [],
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'if_name': <class 'str'>, 'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) chassis_id: <class 'str'>, 'port_id': <class 'str'>, 'neighbor_id': <class 'str'>, Optional  (str) port_description: <class 'str'>, Optional  (str) system_description: <class 'str'>, Optional  (str) system_name: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) management_address: <class 'str'>, Optional  (str) auto_negotiation: <class 'str'>, Optional  (str) physical_media_capabilities: <class 'list'>, Optional  (str) unit_type: <class 'int'>, Optional  (str) vlan_id: <class 'int'>}}}}}}, Optional  (str) med_information: {Optional  (str) f/w_revision: <class 'str'>, Optional  (str) h/w_revision: <class 'str'>, Optional  (str) s/w_revision: <class 'str'>, Optional  (str) manufacturer: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) capabilities: <class 'list'>, 'device_type': <class 'str'>, Optional  (str) network_policy: {Any  (str) *: {'vlan': <class 'int'>, 'tagged': <class 'bool'>, 'layer_2_priority': <class 'int'>, 'dscp': <class 'int'>}}, Optional  (str) serial_number: <class 'str'>, Optional  (str) power_source: <class 'str'>, Optional  (str) power_priority: <class 'str'>, Optional  (str) wattage: <class 'float'>, 'location': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py"
    },
    "iosxr": {
      "doc": "Parser for show lldp entry *",
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) peer_mac: <class 'str'>, 'chassis_id': <class 'str'>, 'port_description': <class 'str'>, Optional  (str) system_name: <class 'str'>, Optional  (str) age: <class 'int'>, Optional  (str) system_description: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) neighbor_id: <class 'str'>, 'hold_time': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>}}, Optional  (str) management_address: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py"
    }
  },
  "Verify_LldpInterface": {
    "ios": {
      "doc": "Parser for show lldp interface [<WORD>]",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'tx': <class 'str'>, 'rx': <class 'str'>, 'tx_state': <class 'str'>, 'rx_state': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show lldp interface [<WORD>]",
      "exclude": [],
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'tx': <class 'str'>, 'rx': <class 'str'>, 'tx_state': <class 'str'>, 'rx_state': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py"
    },
    "iosxr": {
      "doc": "Parser for show lldp interface",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'tx': <class 'str'>, 'rx': <class 'str'>, 'tx_state': <class 'str'>, 'rx_state': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py"
    }
  },
  "Verify_LldpNeighborsDetail": {
    "ios": {
      "doc": "Parser for show lldp neighbors detail",
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'if_name': <class 'str'>, 'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) chassis_id: <class 'str'>, 'port_id': <class 'str'>, 'neighbor_id': <class 'str'>, Optional  (str) port_description: <class 'str'>, Optional  (str) system_description: <class 'str'>, Optional  (str) system_name: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) management_address: <class 'str'>, Optional  (str) auto_negotiation: <class 'str'>, Optional  (str) physical_media_capabilities: <class 'list'>, Optional  (str) unit_type: <class 'int'>, Optional  (str) vlan_id: <class 'int'>}}}}}}, Optional  (str) med_information: {Optional  (str) f/w_revision: <class 'str'>, Optional  (str) h/w_revision: <class 'str'>, Optional  (str) s/w_revision: <class 'str'>, Optional  (str) manufacturer: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) capabilities: <class 'list'>, 'device_type': <class 'str'>, Optional  (str) network_policy: {Any  (str) *: {'vlan': <class 'int'>, 'tagged': <class 'bool'>, 'layer_2_priority': <class 'int'>, 'dscp': <class 'int'>}}, Optional  (str) serial_number: <class 'str'>, Optional  (str) power_source: <class 'str'>, Optional  (str) power_priority: <class 'str'>, Optional  (str) wattage: <class 'float'>, 'location': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show lldp neighbors detail",
      "exclude": [],
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'if_name': <class 'str'>, 'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) chassis_id: <class 'str'>, 'port_id': <class 'str'>, 'neighbor_id': <class 'str'>, Optional  (str) port_description: <class 'str'>, Optional  (str) system_description: <class 'str'>, Optional  (str) system_name: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>, 'name': <class 'str'>}}, Optional  (str) management_address: <class 'str'>, Optional  (str) auto_negotiation: <class 'str'>, Optional  (str) physical_media_capabilities: <class 'list'>, Optional  (str) unit_type: <class 'int'>, Optional  (str) vlan_id: <class 'int'>}}}}}}, Optional  (str) med_information: {Optional  (str) f/w_revision: <class 'str'>, Optional  (str) h/w_revision: <class 'str'>, Optional  (str) s/w_revision: <class 'str'>, Optional  (str) manufacturer: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) capabilities: <class 'list'>, 'device_type': <class 'str'>, Optional  (str) network_policy: {Any  (str) *: {'vlan': <class 'int'>, 'tagged': <class 'bool'>, 'layer_2_priority': <class 'int'>, 'dscp': <class 'int'>}}, Optional  (str) serial_number: <class 'str'>, Optional  (str) power_source: <class 'str'>, Optional  (str) power_priority: <class 'str'>, Optional  (str) wattage: <class 'float'>, 'location': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py"
    },
    "iosxr": {
      "doc": "Parser for show lldp neighbors detail",
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {Optional  (str) peer_mac: <class 'str'>, 'chassis_id': <class 'str'>, 'port_description': <class 'str'>, Optional  (str) system_name: <class 'str'>, Optional  (str) age: <class 'int'>, Optional  (str) system_description: <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) neighbor_id: <class 'str'>, 'hold_time': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>}}, Optional  (str) management_address: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py"
    },
    "nxos": {
      "doc": "parser for lldp show neighbors detail",
      "groups": [],
      "schema": "{'total_entries': <class 'int'>, 'interfaces': {Any  (str) *: {'port_id': {Any  (str) *: {'neighbors': {Any  (str) *: {'chassis_id': <class 'str'>, Optional  (str) port_description: <class 'str'>, 'system_name': <class 'str'>, 'system_description': <class 'str'>, 'time_remaining': <class 'int'>, Optional  (str) capabilities: {Any  (str) *: {'name': <class 'str'>, Optional  (str) system: <class 'bool'>, Optional  (str) enabled: <class 'bool'>}}, 'management_address_v4': <class 'str'>, Optional  (str) management_address_v6: <class 'str'>, Optional  (str) system_capabilities: <class 'str'>, Optional  (str) enabled_capabilities: <class 'str'>, 'vlan_id': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py"
    }
  },
  "Verify_LldpTraffic": {
    "ios": {
      "doc": "Parser for show lldp traffic",
      "groups": [],
      "schema": "{'frame_in': <class 'int'>, 'frame_out': <class 'int'>, 'frame_error_in': <class 'int'>, 'frame_discard': <class 'int'>, 'tlv_discard': <class 'int'>, 'tlv_unknown': <class 'int'>, 'entries_aged_out': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show lldp traffic",
      "exclude": [],
      "groups": [],
      "schema": "{'frame_in': <class 'int'>, 'frame_out': <class 'int'>, 'frame_error_in': <class 'int'>, 'frame_discard': <class 'int'>, 'tlv_discard': <class 'int'>, 'tlv_unknown': <class 'int'>, 'entries_aged_out': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py"
    },
    "iosxr": {
      "doc": "Parser for show lldp traffic",
      "groups": [],
      "schema": "{'counters': {'frame_in': <class 'int'>, 'frame_out': <class 'int'>, 'frame_error_in': <class 'int'>, 'frame_discard': <class 'int'>, 'tlv_discard': <class 'int'>, 'tlv_unknown': <class 'int'>, 'entries_aged_out': <class 'int'>, Optional  (str) tlv_accepted: <class 'int'>, Optional  (str) last_clear: <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py"
    },
    "nxos": {
      "doc": "parser ofr show lldp traffic",
      "groups": [],
      "schema": "{'counters': {'total_frames_received': <class 'int'>, 'total_frames_transmitted': <class 'int'>, 'total_frames_received_in_error': <class 'int'>, 'total_frames_discarded': <class 'int'>, 'total_unrecognized_tlvs': <class 'int'>, 'total_entries_aged': <class 'int'>, Optional  (str) total_flap_count: <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py"
    }
  },
  "Verify_MacAddressTable": {
    "ios": {
      "doc": "Parser for show mac address-table",
      "groups": [],
      "schema": "{'mac_table': {'vlans': {Any  (str) *: {'vlan': Or (<class 'int'>, <class 'str'>), 'mac_addresses': {Any  (str) *: {'mac_address': <class 'str'>, Optional  (str) drop: {'drop': <class 'bool'>, 'entry_type': <class 'str'>}, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'entry_type': <class 'str'>, Optional  (str) protocols: <class 'list'>, Optional  (str) entry: <class 'str'>, Optional  (str) learn: <class 'str'>, Optional  (str) age: <class 'int'>}}}}}}}, Optional  (str) total_mac_addresses: <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show mac address-table",
      "groups": [],
      "schema": "{'mac_table': {'vlans': {Any  (str) *: {'vlan': Or (<class 'int'>, <class 'str'>), 'mac_addresses': {Any  (str) *: {'mac_address': <class 'str'>, Optional  (str) drop: {'drop': <class 'bool'>, 'entry_type': <class 'str'>}, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'entry_type': <class 'str'>, Optional  (str) protocols: <class 'list'>, Optional  (str) entry: <class 'str'>, Optional  (str) learn: <class 'str'>, Optional  (str) age: <class 'int'>}}}}}}}, Optional  (str) total_mac_addresses: <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py"
    },
    "nxos": {
      "doc": "Parser for show mac address-table",
      "groups": [],
      "schema": "{'mac_table': {'vlans': {Any  (str) *: {'vlan': <class 'str'>, 'mac_addresses': {Any  (str) *: {'mac_address': <class 'str'>, Optional  (str) entry: <class 'str'>, 'secure': <class 'str'>, 'ntfy': <class 'str'>, Optional  (str) drop: {'drop': <class 'bool'>, 'age': <class 'str'>, 'mac_type': <class 'str'>}, Optional  (str) interfaces: {Any  (str) *: {'interface': <class 'str'>, 'age': <class 'str'>, 'mac_type': <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py"
    }
  },
  "Verify_MacAddressTableAgingTime": {
    "ios": {
      "doc": "Parser for show mac address-table aging-time",
      "groups": [],
      "schema": "{'mac_aging_time': <class 'int'>, Optional  (str) vlans: {Any  (str) *: {'mac_aging_time': <class 'int'>, 'vlan': Or (<class 'int'>, <class 'str'>)}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show mac address-table aging-time",
      "groups": [],
      "schema": "{'mac_aging_time': <class 'int'>, Optional  (str) vlans: {Any  (str) *: {'mac_aging_time': <class 'int'>, 'vlan': Or (<class 'int'>, <class 'str'>)}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py"
    },
    "nxos": {
      "doc": "Parser for show mac address-table aging-time",
      "groups": [],
      "schema": "{'mac_aging_time': <class 'int'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py"
    }
  },
  "Verify_MacAddressTableLearning": {
    "ios": {
      "doc": "Parser for show mac address-table learning",
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {'mac_learning': <class 'bool'>, 'vlan': Or (<class 'int'>, <class 'str'>)}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show mac address-table learning",
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {'mac_learning': <class 'bool'>, 'vlan': Or (<class 'int'>, <class 'str'>)}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py"
    }
  },
  "Verify_MemoryStatistics": {
    "ios": {
      "doc": "Parser for show memory statistics",
      "groups": [],
      "schema": "{Optional  (str) tracekey: <class 'str'>, 'name': {Any  (str) *: {'head': <class 'str'>, 'total': <class 'int'>, 'used': <class 'int'>, 'free': <class 'int'>, 'lowest': <class 'int'>, 'largest': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_memory.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show memory statistics",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) tracekey: <class 'str'>, 'name': {Any  (str) *: {'head': <class 'str'>, 'total': <class 'int'>, 'used': <class 'int'>, 'free': <class 'int'>, 'lowest': <class 'int'>, 'largest': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_memory.py"
    }
  },
  "Verify_Module": {
    "ios": {
      "c7600": {
        "doc": "\n    Parser for command:\n        * show module\n    ",
        "groups": [],
        "schema": "{'slot': {Any  (str) *: {Optional  (str) rp: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}, Optional  (str) lc: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}, Optional  (str) other: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py"
      },
      "cat4k": {
        "doc": "Parser for show module",
        "groups": [],
        "schema": "{'chassis_type': <class 'str'>, 'power_consumed': <class 'str'>, 'mod': {Any  (str) *: {'slot': <class 'int'>, 'port': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) redundancy_status: <class 'str'>}}, Optional  (str) system_failures: {'power_supply': <class 'str'>}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat4k/show_platform.py"
      },
      "cat6k": {
        "doc": " Parser for commands:\n        * show module\n    ",
        "groups": [],
        "schema": "{'slot': {Any  (str) *: {Optional  (str) rp: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}, Optional  (str) lc: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}, Optional  (str) other: {'slot': <class 'int'>, 'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'hw_ver': <class 'str'>, 'status': <class 'str'>, 'serial_number': <class 'str'>, 'model': <class 'str'>}}}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py"
      },
      "doc": "Parser for show module",
      "groups": [],
      "schema": "{Optional  (str) switch: {Any  (str) *: {'port': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address': <class 'str'>, 'hw_ver': <class 'str'>, 'sw_ver': <class 'str'>}}, Optional  (str) module: {<class 'int'>: {'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial': <class 'str'>, 'mac_address': <class 'str'>, 'hw': <class 'str'>, 'fw': <class 'str'>, 'sw': <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_redundancy_mode: <class 'str'>, Optional  (str) configured_redundancy_mode: <class 'str'>}}, Optional  (str) number_of_mac_address: <class 'int'>, Optional  (str) chassis_mac_address_lower_range: <class 'str'>, Optional  (str) chassis_mac_address_upper_range: <class 'str'>, Optional  (str) switches: {<class 'int'>: {Optional  (str) module: {<class 'int'>: {'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial': <class 'str'>, 'mac_address': <class 'str'>, 'hw': <class 'str'>, 'fw': <class 'str'>, 'sw': <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_redundancy_mode: <class 'str'>, Optional  (str) configured_redundancy_mode: <class 'str'>}}}}, Optional  (str) chassis: {<class 'int'>: {'number_of_mac_address': <class 'int'>, 'chassis_mac_address_lower_range': <class 'str'>, 'chassis_mac_address_upper_range': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9400": {
        "doc": "Parser for show module",
        "groups": [],
        "schema": "{Optional  (str) switch: {Any  (str) *: {'port': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address': <class 'str'>, 'hw_ver': <class 'str'>, 'sw_ver': <class 'str'>}}, Optional  (str) module: {<class 'int'>: {'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial': <class 'str'>, 'mac_address': <class 'str'>, 'hw': <class 'str'>, 'fw': <class 'str'>, 'sw': <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_redundancy_mode: <class 'str'>, Optional  (str) configured_redundancy_mode: <class 'str'>, Optional  (str) redundancy_status: <class 'str'>}}, Optional  (str) number_of_mac_address: <class 'int'>, Optional  (str) chassis_mac_address_lower_range: <class 'str'>, Optional  (str) chassis_mac_address_upper_range: <class 'str'>}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9400/show_platform.py"
      },
      "cat4k": {
        "doc": "Parser for show module",
        "groups": [],
        "schema": "{'chassis_type': <class 'str'>, 'power_consumed': <class 'str'>, 'mod': {Any  (str) *: {'slot': <class 'int'>, 'port': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address_from': <class 'str'>, 'mac_address_to': <class 'str'>, 'hw_ver': <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) redundancy_status: <class 'str'>}}, Optional  (str) system_failures: {'power_supply': <class 'str'>}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/cat4k/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show module",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) switch: {Any  (str) *: {'port': <class 'str'>, 'model': <class 'str'>, 'serial_number': <class 'str'>, 'mac_address': <class 'str'>, 'hw_ver': <class 'str'>, 'sw_ver': <class 'str'>}}, Optional  (str) module: {<class 'int'>: {'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial': <class 'str'>, 'mac_address': <class 'str'>, 'hw': <class 'str'>, 'fw': <class 'str'>, 'sw': <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_redundancy_mode: <class 'str'>, Optional  (str) configured_redundancy_mode: <class 'str'>}}, Optional  (str) number_of_mac_address: <class 'int'>, Optional  (str) chassis_mac_address_lower_range: <class 'str'>, Optional  (str) chassis_mac_address_upper_range: <class 'str'>, Optional  (str) switches: {<class 'int'>: {Optional  (str) module: {<class 'int'>: {'ports': <class 'int'>, 'card_type': <class 'str'>, 'model': <class 'str'>, 'serial': <class 'str'>, 'mac_address': <class 'str'>, 'hw': <class 'str'>, 'fw': <class 'str'>, 'sw': <class 'str'>, 'status': <class 'str'>, Optional  (str) redundancy_role: <class 'str'>, Optional  (str) operating_redundancy_mode: <class 'str'>, Optional  (str) configured_redundancy_mode: <class 'str'>}}}}, Optional  (str) chassis: {<class 'int'>: {'number_of_mac_address': <class 'int'>, 'chassis_mac_address_lower_range': <class 'str'>, 'chassis_mac_address_upper_range': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show module",
      "exclude": [],
      "groups": [
        "bgp",
        "evpn",
        "native",
        "vxlan",
        "multicast",
        "trm"
      ],
      "schema": "{'slot': {'rp': {Any  (str) *: {Any  (str) *: {'ports': <class 'str'>, 'slot': <class 'str'>, Optional  (str) model: <class 'str'>, 'status': <class 'str'>, Optional  (str) software: <class 'str'>, Optional  (str) hardware: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) serial_number: <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) slot/world_wide_name: <class 'str'>}}}, Optional  (str) lc: {Optional  (Any) Any  (str) *: {Optional  (Any) Any  (str) *: {Optional  (str) ports: <class 'str'>, 'slot': <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) software: <class 'str'>, Optional  (str) hardware: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) serial_number: <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) slot/world_wide_name: <class 'str'>}}}}, Optional  (str) xbar: {Optional  (Any) Any  (str) *: {Optional  (str) ports: <class 'str'>, 'slot': <class 'str'>, Optional  (str) module_type: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) software: <class 'str'>, Optional  (str) hardware: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) serial_number: <class 'str'>}}, Optional  (str) lem: {Optional  (Any) Any  (str) *: {Optional  (str) ports: <class 'str'>, 'slot': <class 'str'>, Optional  (str) module_type: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) status: <class 'str'>, Optional  (str) software: <class 'str'>, Optional  (str) hardware: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) online_diag_status: <class 'str'>, Optional  (str) slot/world_wide_name: <class 'str'>, Optional  (str) serial_number: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_MribVrfRoute_vrf_all": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af\n    ",
      "groups": [],
      "parameters": {
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'multicast_group': {Any  (str) *: {'source_address': {Any  (str) *: {'uptime': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) mvpn_tid: <class 'str'>, Optional  (str) mvpn_remote_tid: <class 'str'>, Optional  (str) mvpn_payload: <class 'str'>, Optional  (str) mdt_ifh: <class 'str'>, Optional  (str) mt_slot: <class 'str'>, Optional  (str) incoming_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'flags': <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'flags': <class 'str'>, Optional  (str) location: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py"
    }
  },
  "Verify_MribVrfRoute_vrf_default": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'multicast_group': {Any  (str) *: {'source_address': {Any  (str) *: {'uptime': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>, Optional  (str) mvpn_tid: <class 'str'>, Optional  (str) mvpn_remote_tid: <class 'str'>, Optional  (str) mvpn_payload: <class 'str'>, Optional  (str) mdt_ifh: <class 'str'>, Optional  (str) mt_slot: <class 'str'>, Optional  (str) incoming_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'flags': <class 'str'>, Optional  (str) rpf_nbr: <class 'str'>}}, Optional  (str) outgoing_interface_list: {Any  (str) *: {'uptime': <class 'str'>, 'flags': <class 'str'>, Optional  (str) location: <class 'str'>}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py"
    }
  },
  "Verify_NtpAssociations": {
    "ios": {
      "doc": "Parser for show ntp associations",
      "groups": [],
      "schema": "{'peer': {Any  (str) *: {'local_mode': {Any  (str) *: {'remote': <class 'str'>, 'configured': <class 'bool'>, Optional  (str) refid: <class 'str'>, Optional  (str) local_mode: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>), Optional  (str) poll: <class 'int'>, Optional  (str) reach: <class 'int'>, Optional  (str) delay: <class 'float'>, Optional  (str) offset: <class 'float'>, Optional  (str) jitter: <class 'float'>, 'mode': <class 'str'>}}}}, 'clock_state': {'system_status': {'clock_state': <class 'str'>, Optional  (str) clock_stratum: <class 'int'>, Optional  (str) associations_address: <class 'str'>, Optional  (str) root_delay: <class 'float'>, Optional  (str) clock_offset: <class 'float'>, Optional  (str) clock_refid: <class 'str'>, Optional  (str) associations_local_mode: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py"
    },
    "iosxe": {
      "doc": "Parser for show ntp associations",
      "groups": [],
      "schema": "{'peer': {Any  (str) *: {'local_mode': {Any  (str) *: {'remote': <class 'str'>, 'configured': <class 'bool'>, Optional  (str) refid: <class 'str'>, Optional  (str) local_mode: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>), Optional  (str) poll: <class 'int'>, Optional  (str) reach: <class 'int'>, Optional  (str) delay: <class 'float'>, Optional  (str) offset: <class 'float'>, Optional  (str) jitter: <class 'float'>, 'mode': <class 'str'>}}}}, 'clock_state': {'system_status': {'clock_state': <class 'str'>, Optional  (str) clock_stratum: <class 'int'>, Optional  (str) associations_address: <class 'str'>, Optional  (str) root_delay: <class 'float'>, Optional  (str) clock_offset: <class 'float'>, Optional  (str) clock_refid: <class 'str'>, Optional  (str) associations_local_mode: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py"
    },
    "iosxr": {
      "doc": "Parser for show ntp associations",
      "groups": [],
      "schema": "{'peer': {Any  (str) *: {'local_mode': {Any  (str) *: {'remote': <class 'str'>, 'configured': <class 'bool'>, Optional  (str) refid: <class 'str'>, Optional  (str) local_mode: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>), Optional  (str) poll: <class 'int'>, Optional  (str) reach: <class 'int'>, Optional  (str) delay: <class 'float'>, Optional  (str) offset: <class 'float'>, Optional  (str) jitter: <class 'float'>, 'mode': <class 'str'>}}}}, 'clock_state': {'system_status': {'clock_state': <class 'str'>, Optional  (str) clock_stratum: <class 'int'>, Optional  (str) associations_address: <class 'str'>, Optional  (str) root_delay: <class 'float'>, Optional  (str) clock_offset: <class 'float'>, Optional  (str) clock_refid: <class 'str'>, Optional  (str) associations_local_mode: <class 'str'>}}, 'vrf': {Any  (str) *: {'address': {Any  (str) *: {'type': {Any  (str) *: {'address': <class 'str'>, 'type': <class 'str'>, 'vrf': <class 'str'>}}, 'isconfigured': {Any  (str) *: {'address': <class 'str'>, 'isconfigured': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py"
    },
    "junos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ntp associations",
      "exclude": [],
      "groups": [
        "junos"
      ],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{'peer': {Any  (str) *: {'local_mode': {Any  (str) *: {'remote': <class 'str'>, Optional  (str) refid: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) receive_time: <class 'int'>, Optional  (str) poll: <class 'int'>, Optional  (str) reach: <class 'int'>, Optional  (str) delay: <class 'float'>, Optional  (str) offset: <class 'float'>, Optional  (str) jitter: <class 'float'>, 'mode': <class 'str'>}}}}, 'clock_state': {'system_status': {'clock_state': <class 'str'>, Optional  (str) clock_stratum: <class 'int'>, Optional  (str) associations_address: <class 'str'>, Optional  (str) root_delay: <class 'float'>, Optional  (str) clock_offset: <class 'float'>, Optional  (str) clock_refid: <class 'str'>, Optional  (str) associations_local_mode: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py"
    }
  },
  "Verify_NtpPeerStatus": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ntp peer-status",
      "exclude": [],
      "groups": [
        "ntp"
      ],
      "schema": "{'total_peers': <class 'int'>, 'vrf': {Any  (str) *: {'peer': {Any  (str) *: {Optional  (str) clock_state: <class 'str'>, Optional  (str) mode: <class 'str'>, 'remote': <class 'str'>, Optional  (str) local: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) poll: <class 'int'>, Optional  (str) reach: <class 'int'>, Optional  (str) delay: <class 'float'>, Optional  (str) vrf: <class 'str'>}}}}, 'clock_state': {'system_status': {'clock_state': <class 'str'>, Optional  (str) clock_stratum: <class 'int'>, Optional  (str) associations_address: <class 'str'>, Optional  (str) root_delay: <class 'float'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py"
    }
  },
  "Verify_NtpPeers": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for: show ntp peers",
      "groups": [
        "ntp"
      ],
      "schema": "{'peer': {Any  (str) *: {'isconfigured': {Any  (str) *: {'address': <class 'str'>, 'type': <class 'str'>, 'isconfigured': <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py"
    }
  },
  "Verify_NtpStatus": {
    "ios": {
      "doc": "Parser for: show ntp status",
      "groups": [],
      "schema": "{'clock_state': {'system_status': {Optional  (str) status: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) refid: <class 'str'>, Optional  (str) assoc_id: <class 'int'>, Optional  (str) nom_freq: <class 'float'>, Optional  (str) act_freq: <class 'float'>, Optional  (str) precision: Or (<class 'int'>, <class 'str'>), Optional  (str) uptime: <class 'str'>, Optional  (str) resolution: <class 'int'>, Optional  (str) reftime: <class 'str'>, Optional  (str) offset: <class 'float'>, Optional  (str) rootdelay: <class 'float'>, Optional  (str) rootdispersion: <class 'float'>, Optional  (str) peerdispersion: <class 'float'>, Optional  (str) leap_status: <class 'str'>, Optional  (str) drift: <class 'str'>, Optional  (str) poll: <class 'int'>, Optional  (str) last_update: <class 'str'>, Optional  (str) leapsecond: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py"
    },
    "iosxe": {
      "doc": "Parser for: show ntp status",
      "groups": [],
      "schema": "{'clock_state': {'system_status': {Optional  (str) status: <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) refid: <class 'str'>, Optional  (str) assoc_id: <class 'int'>, Optional  (str) nom_freq: <class 'float'>, Optional  (str) act_freq: <class 'float'>, Optional  (str) precision: Or (<class 'int'>, <class 'str'>), Optional  (str) uptime: <class 'str'>, Optional  (str) resolution: <class 'int'>, Optional  (str) reftime: <class 'str'>, Optional  (str) offset: <class 'float'>, Optional  (str) rootdelay: <class 'float'>, Optional  (str) rootdispersion: <class 'float'>, Optional  (str) peerdispersion: <class 'float'>, Optional  (str) leap_status: <class 'str'>, Optional  (str) drift: <class 'str'>, Optional  (str) poll: <class 'int'>, Optional  (str) last_update: <class 'str'>, Optional  (str) leapsecond: <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py"
    },
    "iosxr": {
      "doc": "Parser for: show ntp status",
      "groups": [],
      "schema": "{'clock_state': {'system_status': {'status': <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) refid: <class 'str'>, Optional  (str) nom_freq: <class 'float'>, Optional  (str) act_freq: <class 'float'>, Optional  (str) precision: Or (<class 'int'>, <class 'str'>), Optional  (str) uptime: <class 'str'>, Optional  (str) resolution: <class 'int'>, Optional  (str) reftime: <class 'str'>, Optional  (str) offset: <class 'float'>, Optional  (str) rootdelay: <class 'float'>, Optional  (str) rootdispersion: <class 'float'>, Optional  (str) peerdispersion: <class 'float'>, Optional  (str) leap_status: <class 'str'>, Optional  (str) drift: <class 'str'>, Optional  (str) poll: <class 'int'>, Optional  (str) last_update: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py"
    },
    "junos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for: show ntp status",
      "exclude": [],
      "groups": [
        "junos"
      ],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{'clock_state': {'system_status': {Optional  (str) ass_id: <class 'int'>, Optional  (str) clock: <class 'str'>, Optional  (str) frequency: <class 'float'>, Optional  (str) jitter: <class 'float'>, Optional  (str) leap_status: <class 'str'>, Optional  (str) number_of_events: <class 'int'>, Optional  (str) offset: <class 'float'>, Optional  (str) peer: <class 'int'>, Optional  (str) poll: <class 'int'>, Optional  (str) precision: <class 'float'>, Optional  (str) processor: <class 'str'>, Optional  (str) recent_event: <class 'str'>, Optional  (str) refid: <class 'str'>, Optional  (str) reftime: <class 'str'>, Optional  (str) rootdelay: <class 'float'>, Optional  (str) rootdispersion: <class 'float'>, Optional  (str) stability: <class 'float'>, Optional  (str) state: <class 'int'>, 'status': <class 'str'>, Optional  (str) stratum: <class 'int'>, Optional  (str) synch_source: <class 'str'>, Optional  (str) system: <class 'str'>, Optional  (str) version: <class 'str'>, Optional  (str) leap: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py"
    }
  },
  "Verify_NveEthernetSegment": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve ethernet-segment",
      "exclude": [],
      "groups": [],
      "schema": "{'nve': {Any  (str) *: {'ethernet_segment': {'esi': {Any  (str) *: {'esi': <class 'str'>, 'if_name': <class 'str'>, 'es_state': <class 'str'>, 'po_state': <class 'str'>, 'nve_if_name': <class 'str'>, 'nve_state': <class 'str'>, 'host_reach_mode': <class 'str'>, 'active_vlans': <class 'str'>, Optional  (str) df_vlans: <class 'str'>, 'active_vnis': <class 'str'>, 'cc_failed_vlans': <class 'str'>, 'cc_timer_left': <class 'str'>, 'num_es_mem': <class 'int'>, Optional  (str) local_ordinal: <class 'int'>, 'df_timer_st': <class 'str'>, 'config_status': <class 'str'>, Optional  (str) df_list: <class 'str'>, 'es_rt_added': <class 'bool'>, 'ead_rt_added': <class 'bool'>, 'ead_evi_rt_timer_age': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show nve interface",
      "exclude": [],
      "groups": [],
      "schema": "{'interface': {Any  (str) *: {'state': <class 'str'>, Optional  (str) encapsulation: <class 'str'>, Optional  (str) source_interface: {Any  (str) *: {Optional  (str) primary: <class 'str'>, Optional  (str) secondary: <class 'str'>}}, Optional  (str) vpc_capability: {Any  (str) *: {Optional  (str) notified: <class 'bool'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_NveInterfaceDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve interface <nve> detail",
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 20
      },
      "schema": "{Any  (str) *: {'nve_name': <class 'str'>, Optional  (str) if_state: <class 'str'>, Optional  (str) encap_type: <class 'str'>, Optional  (str) vpc_capability: <class 'str'>, Optional  (str) local_rmac: <class 'str'>, Optional  (str) host_reach_mode: <class 'str'>, Optional  (str) source_if: <class 'str'>, Optional  (str) primary_ip: <class 'str'>, Optional  (str) anycast_if: <class 'str'>, Optional  (str) secondary_ip: <class 'str'>, Optional  (str) src_if_state: <class 'str'>, Optional  (str) ir_cap_mode: <class 'str'>, Optional  (str) adv_vmac: <class 'bool'>, Optional  (str) nve_flags: <class 'str'>, Optional  (str) nve_if_handle: <class 'int'>, Optional  (str) src_if_holddown_tm: <class 'int'>, Optional  (str) src_if_holdup_tm: <class 'int'>, Optional  (str) src_if_holddown_left: <class 'int'>, Optional  (str) multisite_convergence_time: <class 'int'>, Optional  (str) multisite_convergence_time_left: <class 'int'>, Optional  (str) vip_rmac: <class 'str'>, Optional  (str) vip_rmac_ro: <class 'str'>, Optional  (str) sm_state: <class 'str'>, Optional  (str) peer_forwarding_mode: <class 'bool'>, Optional  (str) dwn_strm_vni_cfg_mode: <class 'str'>, Optional  (str) src_intf_last_reinit_notify_type: <class 'str'>, Optional  (str) mcast_src_intf_last_reinit_notify_type: <class 'str'>, Optional  (str) multi_src_intf_last_reinit_notify_type: <class 'str'>, Optional  (str) multisite_bgw_if: <class 'str'>, Optional  (str) multisite_bgw_if_ip: <class 'str'>, Optional  (str) multisite_bgw_if_admin_state: <class 'str'>, Optional  (str) multisite_bgw_if_oper_state: <class 'str'>, Optional  (str) multisite_bgw_if_oper_state_down_reason: <class 'str'>, Optional  (str) multisite_dci_advertise_pip: <class 'bool'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveMultisiteDciLinks": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve multisite dci-links",
      "groups": [],
      "schema": "{'multisite': {Optional  (str) dci_links: {Any  (str) *: {'if_name': <class 'str'>, 'if_state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveMultisiteFabricLinks": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve multisite fabric-links",
      "groups": [],
      "schema": "{'multisite': {'fabric_links': {Any  (str) *: {'if_name': <class 'str'>, 'if_state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NvePeers": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show nve peers",
      "exclude": [],
      "groups": [
        "vxlan",
        "trm"
      ],
      "schema": "{Any  (str) *: {'nve_name': <class 'str'>, 'peer_ip': {Any  (str) *: {'peer_state': <class 'str'>, 'learn_type': <class 'str'>, 'uptime': <class 'str'>, 'router_mac': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveVni": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve vni",
      "groups": [],
      "schema": "{Any  (str) *: {'vni': {Any  (str) *: {'vni': <class 'int'>, 'mcast': <class 'str'>, 'vni_state': <class 'str'>, 'mode': <class 'str'>, 'type': <class 'str'>, 'flags': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveVniIngressReplication": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show nve vni Ingress-replication",
      "groups": [],
      "schema": "{Any  (str) *: {'vni': {Any  (str) *: {'vni': <class 'int'>, Optional  (str) repl_ip: {Any  (str) *: {Optional  (str) repl_ip: <class 'str'>, Optional  (str) source: <class 'str'>, Optional  (str) up_time: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_NveVniSummary": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show nve vni summary",
      "groups": [
        "vxlan",
        "trm"
      ],
      "schema": "{'vni': {'summary': {'cp_vni_count': <class 'int'>, 'cp_vni_up': <class 'int'>, 'cp_vni_down': <class 'int'>, 'dp_vni_count': <class 'int'>, 'dp_vni_up': <class 'int'>, 'dp_vni_down': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_OspfMplsTrafficEngLink": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf mpls traffic-eng link",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'mpls': {'te': {'router_id': <class 'str'>}}, 'areas': {Any  (str) *: {'mpls': {'te': {'enable': <class 'bool'>, Optional  (str) total_links: <class 'int'>, Optional  (str) area_instance: <class 'int'>, Optional  (str) link_fragments: {Any  (str) *: {'link_instance': <class 'int'>, 'network_type': <class 'str'>, 'link_id': <class 'str'>, 'interface_address': <class 'str'>, 'te_admin_metric': <class 'int'>, 'maximum_bandwidth': <class 'int'>, 'maximum_reservable_bandwidth': <class 'int'>, 'total_priority': <class 'int'>, 'out_interface_id': <class 'int'>, 'affinity_bit': <class 'str'>, 'total_extended_admin_group': <class 'int'>, 'unreserved_bandwidths': {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, 'extended_admin_groups': {Any  (str) *: {'value': <class 'int'>}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusive": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf vrf all-inclusive",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'router_id': <class 'str'>, 'role': <class 'str'>, 'nsr': {'enable': <class 'bool'>}, Optional  (str) maximum_interfaces: <class 'int'>, Optional  (str) redistribution: {Optional  (str) max_prefix: {Optional  (str) num_of_prefix: <class 'int'>, Optional  (str) prefix_thld: <class 'int'>, Optional  (str) warn_only: <class 'bool'>}, Optional  (str) connected: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) static: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) bgp: {'bgp_id': <class 'int'>, Optional  (str) metric: <class 'int'>}, Optional  (str) isis: {'isis_pid': <class 'str'>, Optional  (str) metric: <class 'int'>}}, Optional  (str) database_control: {'max_lsa': <class 'int'>}, Optional  (str) stub_router: {Optional  (str) always: {Optional  (str) always: <class 'bool'>, Optional  (str) include_stub: <class 'bool'>, Optional  (str) summary_lsa: <class 'bool'>, Optional  (str) external_lsa: <class 'bool'>, Optional  (str) summary_lsa_metric: <class 'int'>, Optional  (str) external_lsa_metric: <class 'int'>, Optional  (str) state: <class 'str'>}, Optional  (str) on_startup: {Optional  (str) on_startup: <class 'int'>, Optional  (str) include_stub: <class 'bool'>, Optional  (str) summary_lsa: <class 'bool'>, Optional  (str) summary_lsa_metric: <class 'int'>, Optional  (str) external_lsa: <class 'bool'>, Optional  (str) external_lsa_metric: <class 'int'>, 'state': <class 'str'>}, Optional  (str) on_switchover: {Optional  (str) on_switchover: <class 'int'>, Optional  (str) include_stub: <class 'bool'>, Optional  (str) summary_lsa: <class 'bool'>, Optional  (str) summary_lsa_metric: <class 'int'>, Optional  (str) external_lsa: <class 'bool'>, Optional  (str) external_lsa_metric: <class 'int'>, Optional  (str) state: <class 'str'>}, Optional  (str) on_procrestart: {Optional  (str) on_procrestart: <class 'int'>, Optional  (str) include_stub: <class 'bool'>, Optional  (str) summary_lsa: <class 'bool'>, Optional  (str) summary_lsa_metric: <class 'int'>, Optional  (str) external_lsa: <class 'bool'>, Optional  (str) external_lsa_metric: <class 'int'>, 'state': <class 'str'>}}, Optional  (str) spf_control: {Optional  (str) paths: <class 'str'>, 'throttle': {'spf': {'start': <class 'int'>, 'hold': <class 'int'>, 'maximum': <class 'int'>}, 'lsa': {'start': <class 'int'>, 'hold': <class 'int'>, 'maximum': <class 'int'>, 'interval': <class 'int'>, 'arrival': <class 'int'>, 'refresh_interval': <class 'int'>}}}, Optional  (str) mpls: {'ldp': {'ldp_igp_sync': <class 'bool'>, 'ldp_sync_status': <class 'str'>}}, Optional  (str) adjacency_stagger: {'disable': <class 'bool'>, 'initial_number': <class 'int'>, 'maximum_number': <class 'int'>, 'nbrs_forming': <class 'int'>, 'nbrs_full': <class 'int'>}, Optional  (str) graceful_restart: {Any  (str) *: {'enable': <class 'bool'>, 'type': <class 'str'>}}, Optional  (str) numbers: {Optional  (str) external_lsa: <class 'int'>, Optional  (str) external_lsa_checksum: <class 'str'>, Optional  (str) opaque_as_lsa: <class 'int'>, Optional  (str) opaque_as_lsa_checksum: <class 'str'>, Optional  (str) dc_bitless: <class 'int'>, Optional  (str) do_not_age: <class 'int'>}, Optional  (str) total_areas: <class 'int'>, Optional  (str) total_normal_areas: <class 'int'>, Optional  (str) total_stub_areas: <class 'int'>, Optional  (str) total_nssa_areas: <class 'int'>, Optional  (str) flood_pacing_interval_msec: <class 'int'>, Optional  (str) retransmission_pacing_interval: <class 'int'>, Optional  (str) external_flood_list_length: <class 'int'>, Optional  (str) snmp_trap: <class 'bool'>, Optional  (str) lsd_state: <class 'str'>, Optional  (str) lsd_revision: <class 'int'>, Optional  (str) segment_routing_global_block_default: <class 'str'>, Optional  (str) segment_routing_global_block_status: <class 'str'>, Optional  (str) strict_spf: <class 'bool'>, Optional  (str) flags: {Optional  (str) abr: <class 'bool'>, Optional  (str) asbr: <class 'bool'>}, Optional  (str) areas: {Any  (str) *: {'area_id': <class 'str'>, 'area_type': <class 'str'>, Optional  (str) summary: <class 'bool'>, Optional  (str) default_cost: <class 'int'>, Optional  (str) lsa_translation: <class 'str'>, Optional  (str) ranges: {Any  (str) *: {'prefix': <class 'str'>, 'advertise': <class 'bool'>}}, Optional  (str) rrr_enabled: <class 'bool'>, Optional  (str) topology_version: <class 'int'>, Optional  (str) statistics: {Optional  (str) spf_runs_count: <class 'int'>, Optional  (str) interfaces_count: <class 'int'>, Optional  (str) area_scope_lsa_count: <class 'int'>, Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>, Optional  (str) area_scope_opaque_lsa_count: <class 'int'>, Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) indication_lsa_count: <class 'int'>, Optional  (str) donotage_lsa_count: <class 'int'>, Optional  (str) flood_list_length: <class 'int'>, Optional  (str) lfa_interface_count: <class 'int'>, Optional  (str) lfa_revision: <class 'int'>, Optional  (str) lfa_per_prefix_interface_count: <class 'int'>, Optional  (str) nbrs_staggered_mode: <class 'int'>, Optional  (str) nbrs_full: <class 'int'>}}}, Optional  (str) ipfrr_per_prefix_tiebreakers: {Optional  (str) name: <class 'str'>, Optional  (str) no_tunnel: <class 'str'>, Optional  (str) node_protection: <class 'str'>, Optional  (str) line_card_disjoint: <class 'str'>, Optional  (str) lowest_metric: <class 'str'>, Optional  (str) primary_path: <class 'str'>, Optional  (str) downstream: <class 'str'>, Optional  (str) secondary_path: <class 'str'>, Optional  (str) srlg_disjoint: <class 'str'>, Optional  (str) post_convergence_path: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveDatabaseExternal": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show ospf vrf all-inclusive database external\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'external': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, Optional  (str) flags: <class 'str'>, 'metric': <class 'int'>, 'forwarding_address': <class 'str'>, 'external_route_tag': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveDatabaseNetwork": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show ospf vrf all-inclusive database network\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'network': {'network_mask': <class 'str'>, 'attached_routers': {Any  (str) *: {}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveDatabaseOpaqueArea": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show ospf vrf all-inclusive database opaque-area\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, 'opaque_type': <class 'int'>, 'opaque_id': <class 'int'>, Optional  (str) fragment_number: <class 'int'>, Optional  (str) mpls_te_router_id: <class 'str'>, Optional  (str) num_links: <class 'int'>}, 'body': {'opaque': {Optional  (str) num_of_links: <class 'int'>, Optional  (str) link_tlvs: {Any  (str) *: {'link_type': <class 'int'>, 'link_name': <class 'str'>, 'link_id': <class 'str'>, 'te_metric': <class 'int'>, 'max_bandwidth': <class 'int'>, Optional  (str) max_reservable_bandwidth: <class 'int'>, Optional  (str) admin_group: <class 'str'>, Optional  (str) igp_metric: <class 'int'>, Optional  (str) total_priority: <class 'int'>, Optional  (str) neighbor_address: <class 'str'>, Optional  (str) local_if_ipv4_addrs: {Any  (str) *: {}}, Optional  (str) remote_if_ipv4_addrs: {Optional  (str) remote_if_ipv4_addr: Or (<class 'str'>, {})}, Optional  (str) unreserved_bandwidths: {Any  (str) *: {'priority': <class 'int'>, 'unreserved_bandwidth': <class 'int'>}}, Optional  (str) unknown_tlvs: {Any  (str) *: {'type': <class 'int'>, 'length': <class 'int'>, 'value': <class 'str'>}}, Optional  (str) extended_admin_group: {'length': <class 'int'>, Optional  (str) groups: {Any  (str) *: {'value': <class 'int'>}}}}}, Optional  (str) extended_link_tlvs: {Any  (str) *: {'length': <class 'int'>, 'link_type': <class 'int'>, 'link_id': <class 'str'>, 'link_data': <class 'str'>, Optional  (str) sub_tlvs: {Any  (str) *: {'length': <class 'int'>, 'type': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) mt_id: <class 'str'>, Optional  (str) weight: <class 'int'>, Optional  (str) label: <class 'int'>, Optional  (str) local_interface_id: <class 'int'>, Optional  (str) remote_interface_id: <class 'int'>, Optional  (str) neighbor_address: <class 'str'>, Optional  (str) node_type: <class 'int'>, Optional  (str) value: <class 'int'>}}}}, Optional  (str) extended_prefix_tlvs: {Any  (str) *: {'length': <class 'int'>, Optional  (str) af: <class 'int'>, Optional  (str) prefix: <class 'str'>, Optional  (str) range_size: <class 'int'>, Optional  (str) flags: <class 'str'>, Optional  (str) sub_tlvs: {Any  (str) *: {'length': <class 'int'>, 'type': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) mt_id: <class 'str'>, Optional  (str) algo: <class 'int'>, Optional  (str) sid: <class 'int'>}}}}, Optional  (str) router_capabilities_tlv: {Any  (str) *: {'length': <class 'int'>, Optional  (str) information_capabilities: {Optional  (str) graceful_restart_helper: <class 'bool'>, Optional  (str) stub_router: <class 'bool'>, Optional  (str) capability_bits: <class 'str'>}}}, Optional  (str) sr_algorithm_tlv: {Any  (str) *: {'length': <class 'int'>, Optional  (str) algorithm: {Any  (str) *: <class 'bool'>}}}, Optional  (str) sid_range_tlvs: {Any  (str) *: {'length': <class 'int'>, 'tlv_type': <class 'str'>, 'range_size': <class 'int'>, Optional  (str) sub_tlvs: {Any  (str) *: {'length': <class 'int'>, 'type': <class 'str'>, Optional  (str) label: <class 'int'>}}}}, Optional  (str) node_msd_tlvs: {Any  (str) *: {'length': <class 'int'>, Optional  (str) node_type: <class 'int'>, Optional  (str) value: <class 'int'>}}, Optional  (str) local_block_tlvs: {Any  (str) *: {'length': <class 'int'>, Optional  (str) range_size: <class 'int'>, Optional  (str) sub_tlvs: {Any  (str) *: {'length': <class 'int'>, 'type': <class 'str'>, Optional  (str) label: <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveDatabaseRouter": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show ospf vrf all-inclusive database router\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ",
      "exclude": [
        "age",
        "checksum",
        "seq_num"
      ],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>, Optional  (str) as_boundary_router: <class 'bool'>, Optional  (str) area_border_router: <class 'bool'>}, 'body': {'router': {Optional  (str) flags: <class 'str'>, 'num_of_links': <class 'int'>, 'links': {Any  (str) *: {'link_id': <class 'str'>, 'link_data': <class 'str'>, 'type': <class 'str'>, 'num_tos_metrics': <class 'int'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) tos: <class 'int'>}}}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveDatabaseSummary": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show ospf vrf all-inclusive database summary\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) areas: {Any  (str) *: {'database': {'lsa_types': {Any  (str) *: {'lsa_type': <class 'int'>, 'lsas': {Any  (str) *: {'lsa_id': <class 'str'>, 'adv_router': <class 'str'>, 'ospfv2': {'header': {'option': <class 'str'>, 'option_desc': <class 'str'>, 'lsa_id': <class 'str'>, 'age': <class 'int'>, 'type': <class 'int'>, 'adv_router': <class 'str'>, 'seq_num': <class 'str'>, 'checksum': <class 'str'>, 'length': <class 'int'>, Optional  (str) routing_bit_enable: <class 'bool'>}, 'body': {'summary': {'network_mask': <class 'str'>, 'topologies': {Any  (str) *: {'mt_id': <class 'int'>, 'tos': <class 'int'>, 'metric': <class 'int'>}}}}}}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveInterface": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf vrf all-inclusive interface",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, 'demand_circuit': <class 'bool'>, 'process_id': <class 'str'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>, Optional  (str) interval: <class 'int'>, Optional  (str) min_interval: <class 'int'>, Optional  (str) multiplier: <class 'int'>, Optional  (str) mode: <class 'str'>}, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) mtu: <class 'int'>, Optional  (str) max_pkt_sz: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) ls_ack_list_length: <class 'int'>, Optional  (str) high_water_mark: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>, Optional  (str) multi_area_intf_count: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}}}, Optional  (str) virtual_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, 'demand_circuit': <class 'bool'>, 'process_id': <class 'str'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>, Optional  (str) interval: <class 'int'>, Optional  (str) min_interval: <class 'int'>, Optional  (str) multiplier: <class 'int'>, Optional  (str) mode: <class 'str'>}, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) mtu: <class 'int'>, Optional  (str) max_pkt_sz: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) ls_ack_list_length: <class 'int'>, Optional  (str) high_water_mark: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>, Optional  (str) multi_area_intf_count: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}}}, Optional  (str) sham_links: {Any  (str) *: {'name': <class 'str'>, 'enable': <class 'bool'>, 'line_protocol': <class 'bool'>, 'ip_address': <class 'str'>, 'demand_circuit': <class 'bool'>, 'process_id': <class 'str'>, 'router_id': <class 'str'>, 'interface_type': <class 'str'>, 'bfd': {'enable': <class 'bool'>, Optional  (str) interval: <class 'int'>, Optional  (str) min_interval: <class 'int'>, Optional  (str) multiplier: <class 'int'>, Optional  (str) mode: <class 'str'>}, Optional  (str) cost: <class 'int'>, Optional  (str) transmit_delay: <class 'int'>, Optional  (str) state: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) mtu: <class 'int'>, Optional  (str) max_pkt_sz: <class 'int'>, Optional  (str) dr_router_id: <class 'str'>, Optional  (str) dr_ip_addr: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>, Optional  (str) bdr_ip_addr: <class 'str'>, Optional  (str) hello_interval: <class 'int'>, Optional  (str) dead_interval: <class 'int'>, Optional  (str) wait_interval: <class 'int'>, Optional  (str) retransmit_interval: <class 'int'>, Optional  (str) passive: <class 'bool'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) flood_queue_length: <class 'int'>, Optional  (str) next: <class 'str'>, Optional  (str) last_flood_scan_length: <class 'int'>, Optional  (str) max_flood_scan_length: <class 'int'>, Optional  (str) last_flood_scan_time_msec: <class 'int'>, Optional  (str) max_flood_scan_time_msec: <class 'int'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) ls_ack_list_length: <class 'int'>, Optional  (str) high_water_mark: <class 'int'>, Optional  (str) total_dcbitless_lsa: <class 'int'>, Optional  (str) donotage_lsa: <class 'bool'>, Optional  (str) statistics: {Optional  (str) adj_nbr_count: <class 'int'>, Optional  (str) nbr_count: <class 'int'>, Optional  (str) num_nbrs_suppress_hello: <class 'int'>, Optional  (str) multi_area_intf_count: <class 'int'>}, Optional  (str) neighbors: {Any  (str) *: {Optional  (str) dr_router_id: <class 'str'>, Optional  (str) bdr_router_id: <class 'str'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveNeighborDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf vrf all-inclusive neighbor detail",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) total_neighbor_count: <class 'int'>, 'areas': {Any  (str) *: {Optional  (str) interfaces: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, Optional  (str) bfd_enable: <class 'bool'>, Optional  (str) bfd_mode: <class 'str'>, 'address': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) options: <class 'str'>, Optional  (str) lls_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) neighbor_uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) ls_ack_list_pending: <class 'int'>, Optional  (str) high_water_mark: <class 'int'>, Optional  (str) statistics: {Optional  (str) total_dbd_retrans: <class 'int'>, Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}, Optional  (str) virtual_links: {Any  (str) *: {'neighbors': {Any  (str) *: {'neighbor_router_id': <class 'str'>, 'address': <class 'str'>, 'priority': <class 'int'>, 'state': <class 'str'>, 'dr_ip_addr': <class 'str'>, 'bdr_ip_addr': <class 'str'>, Optional  (str) options: <class 'str'>, Optional  (str) lls_options: <class 'str'>, Optional  (str) dead_timer: <class 'str'>, Optional  (str) neighbor_uptime: <class 'str'>, Optional  (str) index: <class 'str'>, Optional  (str) first: <class 'str'>, Optional  (str) next: <class 'str'>, Optional  (str) ls_ack_list: <class 'str'>, Optional  (str) ls_ack_list_pending: <class 'int'>, Optional  (str) high_water_mark: <class 'int'>, Optional  (str) statistics: {Optional  (str) total_dbd_retrans: <class 'int'>, Optional  (str) nbr_event_count: <class 'int'>, Optional  (str) nbr_retrans_qlen: <class 'int'>, Optional  (str) total_retransmission: <class 'int'>, Optional  (str) last_retrans_scan_length: <class 'int'>, Optional  (str) last_retrans_max_scan_length: <class 'int'>, Optional  (str) last_retrans_scan_time_msec: <class 'int'>, Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>}}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveShamLinks": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf vrf all-inclusive sham-links",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'sham_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'local_id': <class 'str'>, 'remote_id': <class 'str'>, 'transit_area_id': <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, 'hello_timer': <class 'str'>, 'demand_circuit': <class 'bool'>, 'if_index': <class 'int'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) nsf: {'enable': <class 'bool'>, 'last_restart': <class 'str'>}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_OspfVrfAllInclusiveVirtualLinks": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show ospf vrf all-inclusive virtual-links",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {'areas': {Any  (str) *: {'virtual_links': {Any  (str) *: {'name': <class 'str'>, 'link_state': <class 'str'>, 'router_id': <class 'str'>, 'transit_area_id': <class 'str'>, 'hello_interval': <class 'int'>, 'dead_interval': <class 'int'>, 'wait_interval': <class 'int'>, 'retransmit_interval': <class 'int'>, 'transmit_delay': <class 'int'>, 'cost': <class 'int'>, 'state': <class 'str'>, 'demand_circuit': <class 'bool'>, Optional  (str) hello_timer: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) dcbitless_lsa_count: <class 'int'>, Optional  (str) donotage_lsa: <class 'str'>, Optional  (str) nsf: {'enable': <class 'bool'>, 'last_restart': <class 'str'>}, Optional  (str) authentication: {'auth_trailer_key': {'crypto_algorithm': <class 'str'>, Optional  (str) youngest_key_id: <class 'int'>}}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py"
    }
  },
  "Verify_PagpCounters": {
    "ios": {
      "doc": "Parser for :\n      show pagp counters",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'counters': {'information_in_pkts': <class 'int'>, 'information_out_pkts': <class 'int'>, 'pagp_errors': <class 'int'>, 'flush_in_pkts': <class 'int'>, 'flush_out_pkts': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show pagp counters",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'counters': {'information_in_pkts': <class 'int'>, 'information_out_pkts': <class 'int'>, 'pagp_errors': <class 'int'>, 'flush_in_pkts': <class 'int'>, 'flush_out_pkts': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_PagpInternal": {
    "ios": {
      "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'group_ifindex': <class 'int'>, 'partner_count': <class 'int'>, 'hello_interval': <class 'int'>, Optional  (str) timers: <class 'str'>, 'pagp_port_priority': <class 'int'>, 'flags': <class 'str'>, 'state': <class 'str'>, 'learn_method': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, 'group_ifindex': <class 'int'>, 'partner_count': <class 'int'>, 'hello_interval': <class 'int'>, Optional  (str) timers: <class 'str'>, 'pagp_port_priority': <class 'int'>, 'flags': <class 'str'>, 'state': <class 'str'>, 'learn_method': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_PagpNeighbor": {
    "ios": {
      "doc": "Parser for :\n      show pagp neighbor",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, Optional  (str) activity: <class 'str'>, 'partner_name': <class 'str'>, 'partner_id': <class 'str'>, 'partner_port': <class 'str'>, 'age': <class 'int'>, 'flags': <class 'str'>, 'group_cap': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n      show pagp neighbor",
      "groups": [],
      "schema": "{'interfaces': {Any  (str) *: {'name': <class 'str'>, 'protocol': <class 'str'>, 'members': {Any  (str) *: {'interface': <class 'str'>, Optional  (str) activity: <class 'str'>, 'partner_name': <class 'str'>, 'partner_id': <class 'str'>, 'partner_port': <class 'str'>, 'age': <class 'int'>, 'flags': <class 'str'>, 'group_cap': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py"
    }
  },
  "Verify_PimVrfInterfaceDetail_vrf_default_af_ipv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show pim vrf <vrf> <address_family> interface detail\n    For checking any output with the parser ,below mandatory key(s) have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv4"
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'oper_status': <class 'str'>, 'nbr_count': <class 'int'>, 'hello_interval': <class 'int'>, 'dr_priority': <class 'int'>, 'primary_address': <class 'str'>, 'address': <class 'list'>, 'flags': <class 'str'>, 'bfd': {'enable': <class 'bool'>, 'interval': <class 'float'>, 'detection_multiplier': <class 'int'>}, 'dr': <class 'str'>, 'propagation_delay': <class 'int'>, 'override_interval': <class 'int'>, 'hello_expiration': <class 'str'>, 'neighbor_filter': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PimVrfInterfaceDetail_vrf_default_af_ipv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show pim vrf <vrf> <address_family> interface detail\n    For checking any output with the parser ,below mandatory key(s) have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 10
      },
      "parameters": {
        "af": "ipv6"
      },
      "schema": "{'vrf': {Any  (str) *: {'interfaces': {Any  (str) *: {'address_family': {Any  (str) *: {'oper_status': <class 'str'>, 'nbr_count': <class 'int'>, 'hello_interval': <class 'int'>, 'dr_priority': <class 'int'>, 'primary_address': <class 'str'>, 'address': <class 'list'>, 'flags': <class 'str'>, 'bfd': {'enable': <class 'bool'>, 'interval': <class 'float'>, 'detection_multiplier': <class 'int'>}, 'dr': <class 'str'>, 'propagation_delay': <class 'int'>, 'override_interval': <class 'int'>, 'hello_expiration': <class 'str'>, 'neighbor_filter': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PimVrfMstatic_vrf_default_af_ipv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show pim vrf <vrf> <address_family> mstatic\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "groups": [],
      "parameters": {
        "af": "ipv4"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'mroute': {Any  (str) *: {'path': {Any  (str) *: {'neighbor_address': <class 'str'>, 'interface_name': <class 'str'>, 'admin_distance': <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PimVrfMstatic_vrf_default_af_ipv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show pim vrf <vrf> <address_family> mstatic\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "groups": [],
      "parameters": {
        "af": "ipv6"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'mroute': {Any  (str) *: {'path': {Any  (str) *: {'neighbor_address': <class 'str'>, 'interface_name': <class 'str'>, 'admin_distance': <class 'int'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PimVrfRpfSummary_vrf_default_af_ipv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show pim vrf <vrf> <address_family> rpf summary\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv4"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) isis_mcast_topology: <class 'bool'>, Optional  (str) mo_frr_flow_based: <class 'bool'>, Optional  (str) mo_frr_rib: <class 'bool'>, Optional  (str) rump_mu_rib: <class 'bool'>, Optional  (str) pim_rpfs_registered: <class 'str'>, Optional  (str) default_rpf_table: <class 'str'>, Optional  (str) rib_convergence_timeout: <class 'str'>, Optional  (str) rib_convergence_time_left: <class 'str'>, Optional  (str) multipath: <class 'bool'>, Optional  (str) table: {Any  (str) *: {'pim_rpf_registrations': <class 'int'>, 'rib_table_converged': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PimVrfRpfSummary_vrf_default_af_ipv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for show pim vrf <vrf> <address_family> rpf summary\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv6"
      },
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) isis_mcast_topology: <class 'bool'>, Optional  (str) mo_frr_flow_based: <class 'bool'>, Optional  (str) mo_frr_rib: <class 'bool'>, Optional  (str) rump_mu_rib: <class 'bool'>, Optional  (str) pim_rpfs_registered: <class 'str'>, Optional  (str) default_rpf_table: <class 'str'>, Optional  (str) rib_convergence_timeout: <class 'str'>, Optional  (str) rib_convergence_time_left: <class 'str'>, Optional  (str) multipath: <class 'bool'>, Optional  (str) table: {Any  (str) *: {'pim_rpf_registrations': <class 'int'>, 'rib_table_converged': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py"
    }
  },
  "Verify_PlacementProgramAll": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show placement program all",
      "exclude": [],
      "groups": [],
      "schema": "{'program': {Any  (str) *: {'instance': {Any  (str) *: {'group': <class 'str'>, 'jid': <class 'str'>, 'active': <class 'str'>, 'active_state': <class 'str'>, 'standby': <class 'str'>, 'standby_state': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py"
    }
  },
  "Verify_Platform": {
    "ios": {
      "doc": "Parser for Parser for show platform",
      "groups": [],
      "schema": "{Optional  (str) main: {Optional  (str) switch_mac_address: <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, Optional  (str) chassis: <class 'str'>, Optional  (str) swstack: <class 'bool'>}, 'slot': {Any  (str) *: {Optional  (str) rp: {Any  (str) *: {Optional  (str) sn: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) num_of_ports: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) hw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, Optional  (str) swstack_role: <class 'str'>, Optional  (str) swstack_priority: <class 'str'>, Optional  (str) ports: <class 'str'>, Optional  (str) role: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) priority: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) cpld_ver: <class 'str'>}}, Optional  (str) lc: {Any  (str) *: {Optional  (str) cpld_ver: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: <class 'str'>}}}}}, Optional  (str) other: {Any  (str) *: {Optional  (str) cpld_ver: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9500": {
        "doc": " Parser for:\n        * 'show platform'\n    ",
        "groups": [],
        "schema": "{'chassis': <class 'str'>, 'slot': {Any  (str) *: {Optional  (str) cpld_ver: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, 'insert_time': <class 'str'>, 'name': <class 'str'>, 'slot': <class 'str'>, 'state': <class 'str'>, Optional  (str) subslot: {Any  (str) *: {'insert_time': <class 'str'>, 'name': <class 'str'>, 'state': <class 'str'>, 'subslot': <class 'str'>}}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show platform\n    parser class - implements detail parsing mechanisms for cli output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) main: {Optional  (str) switch_mac_address: <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, Optional  (str) chassis: <class 'str'>, Optional  (str) swstack: <class 'bool'>}, 'slot': {Any  (str) *: {Optional  (str) rp: {Any  (str) *: {Optional  (str) sn: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) num_of_ports: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) hw_ver: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, Optional  (str) swstack_role: <class 'str'>, Optional  (str) swstack_priority: <class 'str'>, Optional  (str) ports: <class 'str'>, Optional  (str) role: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) priority: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) cpld_ver: <class 'str'>}}, Optional  (str) lc: {Any  (str) *: {Optional  (str) cpld_ver: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: <class 'str'>}}}}}, Optional  (str) other: {Any  (str) *: {Optional  (str) cpld_ver: <class 'str'>, Optional  (str) fw_ver: <class 'str'>, Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) slot: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: {Any  (str) *: {Any  (str) *: {Optional  (str) insert_time: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) subslot: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show platform",
      "exclude": [],
      "groups": [],
      "schema": "{'slot': {Any  (str) *: {Any  (str) *: {'name': <class 'str'>, 'state': <class 'str'>, 'config_state': <class 'str'>, 'full_slot': <class 'str'>, Optional  (str) redundancy_state: <class 'str'>, Optional  (str) plim: <class 'str'>, Optional  (str) subslot: {Optional  (Any) Any  (str) *: {Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) config_state: <class 'str'>, Optional  (str) redundancy_state: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_PlatformSoftwareSlotActiveMonitorMem": {
    "ios": {
      "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:",
      "groups": [],
      "schema": "{'memory': {'total': <class 'int'>, 'free': <class 'int'>, 'used': <class 'int'>, 'buff_cache': <class 'int'>}, 'swap': {'total': <class 'int'>, 'free': <class 'int'>, 'used': <class 'int'>, 'available_memory': <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:",
      "exclude": [],
      "groups": [],
      "schema": "{'memory': {'total': <class 'int'>, 'free': <class 'int'>, 'used': <class 'int'>, 'buff_cache': <class 'int'>}, 'swap': {'total': <class 'int'>, 'free': <class 'int'>, 'used': <class 'int'>, 'available_memory': <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_PlatformSoftwareStatusControl": {
    "ios": {
      "doc": "Parser for show platform software status control-processor brief",
      "groups": [],
      "schema": "{'slot': {Any  (str) *: {'load_average': {'status': <class 'str'>, '1_min': <class 'float'>, '5_min': <class 'float'>, '15_min': <class 'float'>}, 'memory': {'status': <class 'str'>, 'total': <class 'int'>, 'used': <class 'int'>, 'used_percentage': <class 'int'>, 'free': <class 'int'>, 'free_percentage': <class 'int'>, 'committed': <class 'int'>, 'committed_percentage': <class 'int'>}, 'cpu': {Any  (str) *: {'user': <class 'float'>, 'system': <class 'float'>, 'nice_process': <class 'float'>, 'idle': <class 'float'>, 'irq': <class 'float'>, 'sirq': <class 'float'>, 'waiting': <class 'float'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show platform software status control-processor brief",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 10
      },
      "schema": "{'slot': {Any  (str) *: {'load_average': {'status': <class 'str'>, '1_min': <class 'float'>, '5_min': <class 'float'>, '15_min': <class 'float'>}, 'memory': {'status': <class 'str'>, 'total': <class 'int'>, 'used': <class 'int'>, 'used_percentage': <class 'int'>, 'free': <class 'int'>, 'free_percentage': <class 'int'>, 'committed': <class 'int'>, 'committed_percentage': <class 'int'>}, 'cpu': {Any  (str) *: {'user': <class 'float'>, 'system': <class 'float'>, 'nice_process': <class 'float'>, 'idle': <class 'float'>, 'irq': <class 'float'>, 'sirq': <class 'float'>, 'waiting': <class 'float'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_PlatformVm": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show platform vm",
      "exclude": [],
      "groups": [],
      "schema": "{'node': {Any  (str) *: {'type': <class 'str'>, 'partner_name': <class 'str'>, 'sw_status': <class 'str'>, 'ip_address': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_Processes": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show processes <process>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 12,
        "interval": 5
      },
      "schema": "{'process': {Any  (str) *: {Optional  (str) pid: {Any  (str) *: {'pid': <class 'int'>, 'state': <class 'str'>, Optional  (str) pc: <class 'str'>, 'start_cnt': <class 'int'>, Optional  (str) tty: <class 'int'>, 'type': <class 'str'>, 'process': <class 'str'>}}, Optional  (str) state: <class 'str'>, Optional  (str) start_cnt: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) process: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_process.py"
    }
  },
  "Verify_ProtocolsAfiAllAll": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show protocols afi-all all",
      "exclude": [],
      "groups": [],
      "schema": "{'protocols': {Optional  (str) ospf: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) preference: {Optional  (str) single_value: {'all': <class 'int'>}, Optional  (str) multi_values: {'granularity': {'detail': {'intra_area': <class 'int'>, 'inter_area': <class 'int'>}}, 'external': <class 'int'>}}, 'router_id': <class 'str'>, Optional  (str) nsf: <class 'bool'>, Optional  (str) redistribution: {Optional  (str) connected: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) static: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) bgp: {'bgp_id': <class 'int'>, Optional  (str) metric: <class 'int'>}, Optional  (str) ospf: {'ospf_id': <class 'int'>, Optional  (str) metric: <class 'int'>}, Optional  (str) isis: {'isis_pid': <class 'str'>, Optional  (str) metric: <class 'int'>}}, Optional  (str) areas: {Any  (str) *: {'interfaces': <class 'list'>, Optional  (str) mpls: {Optional  (str) te: {Optional  (str) enable: <class 'bool'>}}}}}}}}}}}, Optional  (str) ospfv3: {'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {'instance': {Any  (str) *: {Optional  (str) preference: {Optional  (str) single_value: {'all': <class 'int'>}, Optional  (str) multi_values: {'granularity': {'detail': {'intra_area': <class 'int'>, 'inter_area': <class 'int'>}}, 'external': <class 'int'>}}, 'router_id': <class 'str'>, Optional  (str) nsf: <class 'bool'>, Optional  (str) redistribution: {Optional  (str) connected: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) static: {'enabled': <class 'bool'>, Optional  (str) metric: <class 'int'>}, Optional  (str) bgp: {'bgp_id': <class 'int'>, Optional  (str) metric: <class 'int'>}, Optional  (str) ospf: {'ospf_id': <class 'int'>, Optional  (str) metric: <class 'int'>}, Optional  (str) isis: {'isis_pid': <class 'str'>, Optional  (str) metric: <class 'int'>}}, Optional  (str) areas: {Any  (str) *: {'interfaces': <class 'list'>, Optional  (str) mpls: {Optional  (str) te: {Optional  (str) enable: <class 'bool'>}}}}}}}}}}}, Optional  (str) bgp: {'bgp_pid': <class 'int'>, Optional  (str) nsr: {'enable': <class 'bool'>, 'current_state': <class 'str'>}, Optional  (str) graceful_restart: {'enable': <class 'bool'>}, Optional  (str) address_family: {Any  (str) *: {Optional  (str) distance: {Optional  (str) external: <class 'int'>, Optional  (str) internal: <class 'int'>, Optional  (str) local: <class 'int'>}, Optional  (str) sourced_networks: <class 'list'>, Optional  (str) neighbors: {Any  (str) *: {'last_update': <class 'str'>, 'gr_enable': <class 'str'>, 'nsr_state': <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_protocol.py"
    }
  },
  "Verify_Redundancy": {
    "ios": {
      "c7600": {
        "doc": "\n    Parser for command:\n        * show redundancy\n    ",
        "groups": [],
        "schema": "{'red_sys_info': {'available_system_uptime': <class 'str'>, 'switchovers_system_experienced': <class 'str'>, 'standby_failures': <class 'str'>, 'last_switchover_reason': <class 'str'>, 'hw_mode': <class 'str'>, 'conf_red_mode': <class 'str'>, 'oper_red_mode': <class 'str'>, 'maint_mode': <class 'str'>, 'communications': <class 'str'>, Optional  (str) communications_reason: <class 'str'>}, 'slot': {Any  (str) *: {'curr_sw_state': <class 'str'>, 'uptime_in_curr_state': <class 'str'>, 'image_ver': <class 'str'>, Optional  (str) os: <class 'str'>, Optional  (str) platform: <class 'str'>, Optional  (str) image_id: <class 'str'>, Optional  (str) version: <class 'str'>, Optional  (str) boot: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, 'config_register': <class 'str'>, 'compiled_by': <class 'str'>, 'compiled_date': <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py"
      },
      "cat6k": {
        "doc": "\n    Parser for command:\n        * show redundancy\n    ",
        "groups": [],
        "schema": "{'red_sys_info': {'available_system_uptime': <class 'str'>, 'switchovers_system_experienced': <class 'str'>, 'standby_failures': <class 'str'>, 'last_switchover_reason': <class 'str'>, 'hw_mode': <class 'str'>, 'conf_red_mode': <class 'str'>, 'oper_red_mode': <class 'str'>, 'maint_mode': <class 'str'>, 'communications': <class 'str'>, Optional  (str) communications_reason: <class 'str'>}, 'slot': {Any  (str) *: {'curr_sw_state': <class 'str'>, 'uptime_in_curr_state': <class 'str'>, 'image_ver': <class 'str'>, Optional  (str) os: <class 'str'>, Optional  (str) platform: <class 'str'>, Optional  (str) image_id: <class 'str'>, Optional  (str) version: <class 'str'>, Optional  (str) boot: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, 'config_register': <class 'str'>, 'compiled_by': <class 'str'>, 'compiled_date': <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py"
      },
      "doc": "Parser for show redundancy\n    ",
      "groups": [],
      "schema": "{'red_sys_info': {'available_system_uptime': <class 'str'>, 'switchovers_system_experienced': <class 'str'>, 'standby_failures': <class 'str'>, 'last_switchover_reason': <class 'str'>, 'hw_mode': <class 'str'>, Optional  (str) conf_red_mode: <class 'str'>, Optional  (str) oper_red_mode: <class 'str'>, 'maint_mode': <class 'str'>, 'communications': <class 'str'>, Optional  (str) communications_reason: <class 'str'>}, 'slot': {Any  (str) *: {'curr_sw_state': <class 'str'>, 'uptime_in_curr_state': <class 'str'>, 'image_ver': <class 'str'>, Optional  (str) boot: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, 'config_register': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9500": {
        "doc": "Parser for show redundancy",
        "groups": [],
        "schema": "{'red_sys_info': {'available_system_uptime': <class 'str'>, 'switchovers_system_experienced': <class 'str'>, 'standby_failures': <class 'str'>, 'last_switchover_reason': <class 'str'>, 'hw_mode': <class 'str'>, 'conf_red_mode': <class 'str'>, 'oper_red_mode': <class 'str'>, 'maint_mode': <class 'str'>, 'communications': <class 'str'>, Optional  (str) communications_reason: <class 'str'>}, 'slot': {Any  (str) *: {'curr_sw_state': <class 'str'>, 'uptime_in_curr_state': <class 'str'>, 'image_ver': <class 'str'>, Optional  (str) boot: <class 'str'>, Optional  (str) config_register: <class 'str'>, 'compiled_by': <class 'str'>, 'compiled_date': <class 'str'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show redundancy\n    parser class - implements detail parsing mechanisms for cli output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'red_sys_info': {'available_system_uptime': <class 'str'>, 'switchovers_system_experienced': <class 'str'>, 'standby_failures': <class 'str'>, 'last_switchover_reason': <class 'str'>, 'hw_mode': <class 'str'>, 'conf_red_mode': <class 'str'>, 'oper_red_mode': <class 'str'>, 'maint_mode': <class 'str'>, 'communications': <class 'str'>, Optional  (str) communications_reason: <class 'str'>}, 'slot': {Any  (str) *: {'curr_sw_state': <class 'str'>, 'uptime_in_curr_state': <class 'str'>, 'image_ver': <class 'str'>, Optional  (str) boot: <class 'str'>, Optional  (str) config_file: <class 'str'>, Optional  (str) bootldr: <class 'str'>, Optional  (str) config_register: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show redundancy",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 5
      },
      "schema": "{'node': {Any  (str) *: {'role': <class 'str'>, Optional  (str) valid_partner: <class 'str'>, Optional  (str) ready: <class 'str'>, Optional  (str) group: {Any  (str) *: {'primary': <class 'str'>, 'backup': <class 'str'>, 'status': <class 'str'>}}, Optional  (str) primary_rmf_state: <class 'str'>, Optional  (str) primary_rmf_state_reason: <class 'str'>, 'last_reload_timestamp': <class 'str'>, 'time_since_last_reload': <class 'str'>, 'node_uptime': <class 'str'>, 'node_uptime_timestamp': <class 'str'>, 'node_uptime_in_seconds': <class 'int'>, Optional  (str) standby_node: <class 'str'>, Optional  (str) backup_process: <class 'str'>, Optional  (str) last_switchover_timepstamp: <class 'str'>, Optional  (str) time_since_last_switchover: <class 'str'>, Optional  (str) standby_node_timestamp: <class 'str'>, Optional  (str) time_since_standby_boot: <class 'str'>, Optional  (str) standby_node_not_ready: <class 'str'>, Optional  (str) time_since_standby_node_not_ready: <class 'str'>, Optional  (str) standby_node_ready: <class 'str'>, Optional  (str) time_since_standby_node_ready: <class 'str'>, Optional  (str) reload_cause: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_RedundancyStatus": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show redundancy status",
      "exclude": [],
      "groups": [],
      "schema": "{'redundancy_mode': {'administrative': <class 'str'>, 'operational': <class 'str'>}, Any  (str) *: {'redundancy_state': <class 'str'>, Optional  (str) supervisor_state: <class 'str'>, Optional  (str) internal_state: <class 'str'>}, Optional  (str) system_start_time: <class 'str'>, Optional  (str) system_uptime: <class 'str'>, Optional  (str) kernel_uptime: <class 'str'>, Optional  (str) active_supervisor_time: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_RedundancySummary": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show redundancy summary",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{'node': {Any  (str) *: {'type': <class 'str'>, Optional  (str) standby_node: <class 'str'>, Optional  (str) backup_node: <class 'str'>, Optional  (str) node_detail: <class 'str'>}}, Optional  (str) redundancy_communication: <class 'bool'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_RouteIpv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": null,
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {'route': <class 'str'>, 'active': <class 'bool'>, Optional  (str) ip: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) installed: {'date': <class 'str'>, 'for': <class 'str'>}, Optional  (str) redist_advertisers: {Any  (str) *: {'protoid': <class 'int'>, 'clientid': <class 'int'>}}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {'outgoing_interface': <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) metric: <class 'int'>}}, Optional  (str) next_hop_list: {<class 'int'>: {'index': <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) from: <class 'str'>, Optional  (str) table: <class 'str'>, Optional  (str) address_family: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) nexthop_in_vrf: <class 'str'>}}}}}}}, Optional  (str) last_resort: {Optional  (str) gateway: <class 'str'>, Optional  (str) to_network: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py"
    }
  },
  "Verify_RouteIpv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6",
      "exclude": [],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {'address_family': {Any  (str) *: {Optional  (str) routes: {Any  (str) *: {'route': <class 'str'>, 'active': <class 'bool'>, Optional  (str) ip: <class 'str'>, Optional  (str) mask: <class 'str'>, Optional  (str) route_preference: <class 'int'>, Optional  (str) metric: <class 'int'>, Optional  (str) source_protocol: <class 'str'>, Optional  (str) source_protocol_codes: <class 'str'>, Optional  (str) known_via: <class 'str'>, Optional  (str) distance: <class 'int'>, Optional  (str) type: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) installed: {'date': <class 'str'>, 'for': <class 'str'>}, Optional  (str) redist_advertisers: {Any  (str) *: {'protoid': <class 'int'>, 'clientid': <class 'int'>}}, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {'outgoing_interface': <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) metric: <class 'int'>}}, Optional  (str) next_hop_list: {<class 'int'>: {'index': <class 'int'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) updated: <class 'str'>, Optional  (str) metric: <class 'int'>, Optional  (str) from: <class 'str'>, Optional  (str) table: <class 'str'>, Optional  (str) address_family: <class 'str'>, Optional  (str) table_id: <class 'str'>, Optional  (str) nexthop_in_vrf: <class 'str'>}}}}}}}, Optional  (str) last_resort: {Optional  (str) gateway: <class 'str'>, Optional  (str) to_network: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py"
    }
  },
  "Verify_RouteMap": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show route-map",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'statements': {Any  (str) *: {'conditions': {Optional  (str) match_med_eq: <class 'int'>, Optional  (str) match_nexthop_in: <class 'str'>, Optional  (str) match_nexthop_in_v6: <class 'str'>, Optional  (str) match_route_type: <class 'str'>, Optional  (str) match_community_list: <class 'str'>, Optional  (str) match_ext_community_list: <class 'str'>, Optional  (str) match_as_path_list: <class 'str'>, Optional  (str) match_interface: <class 'str'>, Optional  (str) match_prefix_list: <class 'str'>, Optional  (str) match_access_list: <class 'str'>, Optional  (str) match_as_number_list: <class 'str'>, Optional  (str) match_prefix_list_v6: <class 'str'>, Optional  (str) match_access_list_v6: <class 'str'>, Optional  (str) match_tag_list: <class 'str'>}, 'actions': {Optional  (str) set_route_origin: <class 'str'>, Optional  (str) set_distance: <class 'int'>, Optional  (str) set_local_pref: <class 'int'>, Optional  (str) set_next_hop: <class 'list'>, Optional  (str) set_next_hop_v6: <class 'list'>, Optional  (str) set_med: <class 'int'>, Optional  (str) set_as_path_prepend: <class 'str'>, Optional  (str) set_as_path_group: <class 'list'>, Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>, Optional  (str) set_community: <class 'str'>, Optional  (str) set_community_additive: <class 'bool'>, Optional  (str) set_community_no_advertise: <class 'bool'>, Optional  (str) set_community_no_export: <class 'bool'>, Optional  (str) set_community_delete: <class 'str'>, Optional  (str) set_ext_community_rt: <class 'str'>, Optional  (str) set_ext_community_soo: <class 'str'>, Optional  (str) set_ext_community_vpn: <class 'str'>, Optional  (str) set_ext_community_rt_additive: <class 'bool'>, Optional  (str) set_ext_community_delete: <class 'str'>, Optional  (str) set_level: <class 'str'>, Optional  (str) set_weight: <class 'int'>, Optional  (str) set_metric_type: <class 'str'>, Optional  (str) set_metric: <class 'int'>, Optional  (str) set_level: <class 'str'>, 'clause': <class 'bool'>, 'route_disposition': <class 'str'>, Optional  (str) set_tag: <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_route_map.py"
    }
  },
  "Verify_RouteMapAll": {
    "ios": {
      "doc": "Parser for show route-map all",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'statements': {Any  (str) *: {'conditions': {Optional  (str) match_med_eq: <class 'int'>, Optional  (str) match_local_pref_eq: <class 'int'>, Optional  (str) match_nexthop_in: <class 'list'>, Optional  (str) match_nexthop_in_v6: <class 'list'>, Optional  (str) match_level_eq: <class 'str'>, Optional  (str) match_route_type: <class 'str'>, Optional  (str) match_community_list: <class 'str'>, Optional  (str) match_ext_community_list: <class 'str'>, Optional  (str) match_as_path_list: <class 'str'>, Optional  (str) match_interface: <class 'str'>, Optional  (str) match_prefix_list: <class 'str'>, Optional  (str) match_access_list: <class 'str'>, Optional  (str) match_as_number_list: <class 'str'>, Optional  (str) match_prefix_list_v6: <class 'str'>, Optional  (str) match_tag_list: <class 'str'>}, 'actions': {Optional  (str) set_route_origin: <class 'str'>, Optional  (str) set_distance: <class 'int'>, Optional  (str) set_local_pref: <class 'int'>, Optional  (str) set_next_hop: <class 'list'>, Optional  (str) set_next_hop_v6: <class 'list'>, Optional  (str) set_next_hop_self: <class 'bool'>, Optional  (str) set_as_path_prepend: <class 'str'>, Optional  (str) set_as_path_group: <class 'list'>, Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>, Optional  (str) set_community: <class 'str'>, Optional  (str) set_community_additive: <class 'bool'>, Optional  (str) set_community_no_advertise: <class 'bool'>, Optional  (str) set_community_no_export: <class 'bool'>, Optional  (str) set_community_delete: <class 'str'>, Optional  (str) set_ext_community_rt: <class 'list'>, Optional  (str) set_ext_community_soo: <class 'str'>, Optional  (str) set_ext_community_vpn: <class 'str'>, Optional  (str) set_ext_community_rt_additive: <class 'bool'>, Optional  (str) set_ext_community_delete: <class 'str'>, Optional  (str) set_level: <class 'str'>, Optional  (str) set_weight: <class 'int'>, Optional  (str) set_metric: <class 'int'>, Optional  (str) set_ospf_metric_type: <class 'str'>, Optional  (str) set_metric_type: <class 'str'>, 'route_disposition': <class 'str'>, Optional  (str) set_tag: <class 'str'>}, Optional  (str) policy_routing_matches: {'packets': <class 'int'>, 'bytes': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_route_map.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "\n    Parser for \n    * show route-map all\n    * show route-map {name}\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'statements': {Any  (str) *: {'conditions': {Optional  (str) match_med_eq: <class 'int'>, Optional  (str) match_local_pref_eq: <class 'int'>, Optional  (str) match_nexthop_in: <class 'list'>, Optional  (str) match_nexthop_in_v6: <class 'list'>, Optional  (str) match_level_eq: <class 'str'>, Optional  (str) match_route_type: <class 'str'>, Optional  (str) match_community_list: <class 'str'>, Optional  (str) match_ext_community_list: <class 'str'>, Optional  (str) match_as_path_list: <class 'str'>, Optional  (str) match_interface: <class 'str'>, Optional  (str) match_prefix_list: <class 'str'>, Optional  (str) match_access_list: <class 'str'>, Optional  (str) match_as_number_list: <class 'str'>, Optional  (str) match_prefix_list_v6: <class 'str'>, Optional  (str) match_tag_list: <class 'str'>}, 'actions': {Optional  (str) set_route_origin: <class 'str'>, Optional  (str) set_distance: <class 'int'>, Optional  (str) set_local_pref: <class 'int'>, Optional  (str) set_next_hop: <class 'list'>, Optional  (str) set_next_hop_v6: <class 'list'>, Optional  (str) set_next_hop_self: <class 'bool'>, Optional  (str) set_as_path_prepend: <class 'str'>, Optional  (str) set_as_path_group: <class 'list'>, Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>, Optional  (str) set_community: <class 'str'>, Optional  (str) set_community_additive: <class 'bool'>, Optional  (str) set_community_no_advertise: <class 'bool'>, Optional  (str) set_community_no_export: <class 'bool'>, Optional  (str) set_community_delete: <class 'str'>, Optional  (str) set_ext_community_rt: <class 'list'>, Optional  (str) set_ext_community_soo: <class 'str'>, Optional  (str) set_ext_community_vpn: <class 'str'>, Optional  (str) set_ext_community_rt_additive: <class 'bool'>, Optional  (str) set_ext_community_delete: <class 'str'>, Optional  (str) set_level: <class 'str'>, Optional  (str) set_weight: <class 'int'>, Optional  (str) set_metric: <class 'int'>, Optional  (str) set_ospf_metric_type: <class 'str'>, Optional  (str) set_metric_type: <class 'str'>, 'route_disposition': <class 'str'>, Optional  (str) set_tag: <class 'str'>}, Optional  (str) policy_routing_matches: {'packets': <class 'int'>, 'bytes': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_route_map.py"
    }
  },
  "Verify_RoutingIpv6VrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show routing ipv6 vrf all,\n            show routing ipv6 vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) bgp_distance_extern_as: <class 'int'>, Optional  (str) bgp_distance_internal_as: <class 'int'>, Optional  (str) bgp_distance_local: <class 'int'>, 'ip': {Any  (str) *: {'ubest_num': <class 'str'>, 'mbest_num': <class 'str'>, Optional  (str) attach: <class 'str'>, Optional  (str) best_route: {Any  (str) *: {Optional  (str) nexthop: {Any  (str) *: {Optional  (str) protocol: {Any  (str) *: {Optional  (str) route_table: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) preference: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) protocol_id: <class 'str'>, Optional  (str) attribute: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}, Optional  (str) routes: {Optional  (str) nexthop: {Any  (str) *: {Optional  (str) protocol: {Any  (str) *: {Optional  (str) route_table: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) preference: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) protocol_id: <class 'str'>, Optional  (str) attribute: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_RoutingVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show routing ip vrf all\n                show routing ip vrf <vrf>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 30,
        "interval": 10
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) bgp_distance_extern_as: <class 'int'>, Optional  (str) bgp_distance_internal_as: <class 'int'>, Optional  (str) bgp_distance_local: <class 'int'>, 'ip': {Any  (str) *: {'ubest_num': <class 'str'>, 'mbest_num': <class 'str'>, Optional  (str) attach: <class 'str'>, Optional  (str) best_route: {Any  (str) *: {Optional  (str) nexthop: {Any  (str) *: {Optional  (str) protocol: {Any  (str) *: {Optional  (str) route_table: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) preference: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) protocol_id: <class 'str'>, Optional  (str) attribute: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}, Optional  (str) routes: {Optional  (str) nexthop: {Any  (str) *: {Optional  (str) protocol: {Any  (str) *: {Optional  (str) route_table: <class 'str'>, Optional  (str) uptime: <class 'str'>, Optional  (str) interface: <class 'str'>, Optional  (str) preference: <class 'str'>, Optional  (str) metric: <class 'str'>, Optional  (str) protocol_id: <class 'str'>, Optional  (str) attribute: <class 'str'>, Optional  (str) tag: <class 'str'>, Optional  (str) mpls: <class 'bool'>, Optional  (str) mpls_vpn: <class 'bool'>, Optional  (str) evpn: <class 'bool'>, Optional  (str) segid: <class 'int'>, Optional  (str) tunnelid: <class 'str'>, Optional  (str) encap: <class 'str'>}}}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py"
    }
  },
  "Verify_RplRoutePolicy": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show rpl route-policy",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) description: <class 'str'>, 'statements': {Any  (str) *: {'conditions': {Optional  (str) match_med_eq: <class 'int'>, Optional  (str) match_origin_eq: <class 'str'>, Optional  (str) match_nexthop_in: <class 'str'>, Optional  (str) match_nexthop_in_v6: <class 'str'>, Optional  (str) match_local_pref_eq: <class 'str'>, Optional  (str) match_community_list: <class 'str'>, Optional  (str) match_ext_community_list: <class 'list'>, Optional  (str) match_ext_community_list_type: <class 'str'>, Optional  (str) match_as_path_list: <class 'str'>, Optional  (str) match_as_path_length: <class 'int'>, Optional  (str) match_as_path_length_oper: <class 'str'>, Optional  (str) match_level_eq: <class 'str'>, Optional  (str) match_area_eq: <class 'str'>, Optional  (str) match_prefix_list: <class 'str'>, Optional  (str) match_prefix_list_v6: <class 'str'>, Optional  (str) match_tag_list: <class 'str'>}, 'actions': {Optional  (str) set_route_origin: <class 'str'>, Optional  (str) set_local_pref: <class 'int'>, Optional  (str) set_next_hop: <class 'str'>, Optional  (str) set_next_hop_v6: <class 'str'>, Optional  (str) set_next_hop_self: <class 'bool'>, Optional  (str) set_med: <class 'int'>, Optional  (str) set_as_path_prepend: <class 'int'>, Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>, Optional  (str) set_community: <class 'list'>, Optional  (str) set_community_list: <class 'str'>, Optional  (str) set_community_no_export: <class 'bool'>, Optional  (str) set_community_no_advertise: <class 'bool'>, Optional  (str) set_community_additive: <class 'bool'>, Optional  (str) set_community_delete: <class 'str'>, Optional  (str) set_ext_community_rt: <class 'list'>, Optional  (str) set_ext_community_rt_additive: <class 'bool'>, Optional  (str) set_ext_community_soo: <class 'str'>, Optional  (str) set_ext_community_soo_additive: <class 'bool'>, Optional  (str) set_ext_community_vpn: <class 'str'>, Optional  (str) set_ext_community_delete: <class 'str'>, Optional  (str) set_ext_community_delete_type: <class 'str'>, Optional  (str) set_level: <class 'str'>, Optional  (str) set_metric_type: <class 'str'>, Optional  (str) set_metric: <class 'str'>, Optional  (str) set_ospf_metric_type: <class 'str'>, Optional  (str) set_ospf_metric: <class 'str'>, Optional  (str) set_tag: <class 'str'>, Optional  (str) set_weight: <class 'str'>, Optional  (str) actions: <class 'str'>, Optional  (str) set_spf_priority: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rpl.py"
    }
  },
  "Verify_RunningConfigBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show running-config bgp",
      "exclude": [],
      "groups": [],
      "schema": "{'bgp': {'instance': {'default': {'bgp_id': <class 'int'>, 'protocol_shutdown': <class 'bool'>, Optional  (str) ps_name: {Any  (str) *: {'ps_fall_over_bfd': <class 'bool'>, 'ps_suppress_four_byte_as_capability': <class 'bool'>, Optional  (str) ps_description: <class 'str'>, 'ps_disable_connected_check': <class 'bool'>, 'ps_ebgp_multihop': <class 'bool'>, Optional  (str) ps_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) ps_local_as_as_no: <class 'int'>, 'ps_local_as_no_prepend': <class 'bool'>, 'ps_local_as_dual_as': <class 'bool'>, 'ps_local_as_replace_as': <class 'bool'>, Optional  (str) ps_password_text: <class 'str'>, Optional  (str) ps_remote_as: <class 'int'>, 'ps_shutdown': <class 'bool'>, Optional  (str) ps_keepalive_interval: <class 'int'>, Optional  (str) ps_hodltime: <class 'int'>, Optional  (str) ps_transport_connection_mode: <class 'str'>, Optional  (str) ps_update_source: <class 'str'>}}, Optional  (str) pp_name: {Any  (str) *: {Optional  (str) pp_allowas_in: <class 'bool'>, Optional  (str) pp_allowas_in_as_number: <class 'int'>, Optional  (str) pp_as_override: <class 'bool'>, Optional  (str) pp_default_originate: <class 'bool'>, Optional  (str) pp_default_originate_route_map: <class 'str'>, Optional  (str) pp_route_map_name_in: <class 'str'>, Optional  (str) pp_route_map_name_out: <class 'str'>, Optional  (str) pp_maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) pp_maximum_prefix_threshold: <class 'int'>, Optional  (str) pp_maximum_prefix_restart: <class 'int'>, Optional  (str) pp_maximum_prefix_warning_only: <class 'bool'>, Optional  (str) pp_next_hop_self: <class 'bool'>, Optional  (str) pp_route_reflector_client: <class 'bool'>, Optional  (str) pp_send_community: <class 'str'>, 'pp_soft_reconfiguration': <class 'bool'>, Optional  (str) pp_soo: <class 'str'>}}, Optional  (str) peer_name: {Any  (str) *: {Optional  (str) peer_fall_over_bfd: <class 'bool'>, Optional  (str) peer_remote_as: <class 'int'>, Optional  (str) peer_password_text: <class 'str'>, Optional  (str) peer_af_name: {Any  (str) *: {Optional  (str) peer_af_send_community: <class 'str'>, Optional  (str) peer_maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) peer_maximum_prefix_threshold: <class 'int'>, Optional  (str) peer_maximum_prefix_warning_only: <class 'bool'>, Optional  (str) peer_next_hop_self: <class 'bool'>}}}}, 'vrf': {Any  (str) *: {Optional  (str) rd: <class 'str'>, Optional  (str) always_compare_med: <class 'bool'>, Optional  (str) bestpath_compare_routerid: <class 'bool'>, Optional  (str) bestpath_cost_community_ignore: <class 'bool'>, Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>, Optional  (str) cluster_id: <class 'str'>, Optional  (str) confederation_identifier: <class 'int'>, Optional  (str) confederation_peers_as: <class 'str'>, 'graceful_restart': <class 'bool'>, Optional  (str) graceful_restart_restart_time: <class 'int'>, Optional  (str) graceful_restart_stalepath_time: <class 'int'>, 'log_neighbor_changes': <class 'bool'>, Optional  (str) router_id: <class 'str'>, Optional  (str) keepalive_interval: <class 'int'>, Optional  (str) holdtime: <class 'int'>, 'enforce_first_as': <class 'bool'>, 'fast_external_fallover': <class 'bool'>, Optional  (str) default_choice_ipv4_unicast: <class 'str'>, Optional  (str) dynamic_med_interval: <class 'int'>, Optional  (str) shutdown: <class 'str'>, 'flush_routes': <class 'bool'>, 'isolate': <class 'bool'>, Optional  (str) disable_policy_batching_ipv4: <class 'str'>, Optional  (str) disable_policy_batching_ipv6: <class 'str'>, Optional  (str) af_name: {Any  (str) *: {Optional  (str) af_evpn_vni_rt_type: <class 'str'>, Optional  (str) af_evpn_vni_rt: <class 'str'>, Optional  (str) af_dampening: <class 'bool'>, Optional  (str) af_dampening_route_map: <class 'str'>, Optional  (str) af_dampening_half_life_time: <class 'int'>, Optional  (str) af_dampening_reuse_time: <class 'int'>, Optional  (str) af_dampening_suppress_time: <class 'int'>, Optional  (str) af_dampening_max_suppress_time: <class 'int'>, Optional  (str) af_default_originate: <class 'bool'>, Optional  (str) af_nexthop_route_map: <class 'str'>, Optional  (str) af_nexthop_trigger_enable: <class 'bool'>, Optional  (str) af_nexthop_trigger_delay_critical: <class 'int'>, Optional  (str) af_nexthop_trigger_delay_non_critical: <class 'int'>, Optional  (str) af_client_to_client_reflection: <class 'bool'>, Optional  (str) af_distance_extern_as: <class 'int'>, Optional  (str) af_distance_internal_as: <class 'int'>, Optional  (str) af_distance_local: <class 'int'>, Optional  (str) af_maximum_paths_ebgp: <class 'int'>, Optional  (str) af_maximum_paths_ibgp: <class 'int'>, Optional  (str) af_maximum_paths_eibgp: <class 'int'>, Optional  (str) af_additional_paths_send: <class 'bool'>, Optional  (str) af_additional_paths_receive: <class 'bool'>, Optional  (str) af_aggregate_address_ipv4_address: <class 'str'>, Optional  (str) af_aggregate_address_ipv4_mask: <class 'int'>, Optional  (str) af_aggregate_address_as_set: <class 'bool'>, Optional  (str) af_aggregate_address_summary_only: <class 'bool'>, Optional  (str) af_network_number: <class 'str'>, Optional  (str) af_network_mask: <class 'int'>, Optional  (str) af_network_route_map: <class 'str'>, Optional  (str) af_redist_isis: <class 'str'>, Optional  (str) af_redist_isis_metric: <class 'str'>, Optional  (str) af_redist_isis_route_policy: <class 'str'>, Optional  (str) af_redist_ospf: <class 'str'>, Optional  (str) af_redist_ospf_metric: <class 'str'>, Optional  (str) af_redist_ospf_route_policy: <class 'str'>, Optional  (str) af_redist_rip: <class 'str'>, Optional  (str) af_redist_rip_metric: <class 'str'>, Optional  (str) af_redist_rip_route_policy: <class 'str'>, Optional  (str) af_redist_static: <class 'bool'>, Optional  (str) af_redist_static_metric: <class 'str'>, Optional  (str) af_redist_static_route_policy: <class 'str'>, Optional  (str) af_redist_connected: <class 'bool'>, Optional  (str) af_redist_connected_metric: <class 'str'>, Optional  (str) af_redist_connected_route_policy: <class 'str'>, Optional  (str) af_v6_aggregate_address_ipv6_address: <class 'str'>, Optional  (str) af_v6_aggregate_address_as_set: <class 'bool'>, Optional  (str) af_v6_aggregate_address_summary_only: <class 'bool'>, Optional  (str) af_v6_network_number: <class 'str'>, Optional  (str) af_v6_network_route_map: <class 'str'>, Optional  (str) af_v6_allocate_label_all: <class 'bool'>, Optional  (str) af_retain_rt_all: <class 'bool'>, Optional  (str) af_label_allocation_mode: <class 'str'>, Optional  (str) af_advertise_pip: <class 'bool'>}}, Optional  (str) neighbor_id: {Any  (str) *: {Optional  (str) nbr_fall_over_bfd: <class 'bool'>, Optional  (str) nbr_suppress_four_byte_as_capability: <class 'bool'>, Optional  (str) nbr_description: <class 'str'>, Optional  (str) nbr_disable_connected_check: <class 'bool'>, Optional  (str) nbr_ebgp_multihop: <class 'bool'>, Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>, Optional  (str) nbr_inherit_peer_session: <class 'str'>, Optional  (str) nbr_local_as_as_no: <class 'int'>, Optional  (str) nbr_local_as_no_prepend: <class 'bool'>, Optional  (str) nbr_local_as_replace_as: <class 'bool'>, Optional  (str) nbr_local_as_dual_as: <class 'bool'>, Optional  (str) nbr_remote_as: <class 'int'>, Optional  (str) nbr_remove_private_as: <class 'bool'>, Optional  (str) nbr_shutdown: <class 'bool'>, Optional  (str) nbr_keepalive_interval: <class 'int'>, Optional  (str) nbr_holdtime: <class 'int'>, Optional  (str) nbr_update_source: <class 'str'>, Optional  (str) nbr_password_text: <class 'str'>, Optional  (str) nbr_transport_connection_mode: <class 'str'>, Optional  (str) nbr_peer_type: <class 'str'>, Optional  (str) nbr_inherit_peer: <class 'str'>, Optional  (str) nbr_af_name: {Any  (str) *: {Optional  (str) nbr_af_allowas_in: <class 'bool'>, Optional  (str) nbr_af_allowas_in_as_number: <class 'int'>, Optional  (str) nbr_af_inherit_peer_policy: <class 'str'>, Optional  (str) nbr_af_inherit_peer_seq: <class 'int'>, Optional  (str) nbr_af_maximum_prefix_max_prefix_no: <class 'int'>, Optional  (str) nbr_af_maximum_prefix_threshold: <class 'int'>, Optional  (str) nbr_af_maximum_prefix_restart: <class 'int'>, Optional  (str) nbr_af_maximum_prefix_warning_only: <class 'bool'>, Optional  (str) nbr_af_route_map_name_in: <class 'str'>, Optional  (str) nbr_af_route_map_name_out: <class 'str'>, Optional  (str) no_nbr_af_route_map_name_in: <class 'str'>, Optional  (str) no_nbr_af_route_map_name_out: <class 'str'>, Optional  (str) nbr_af_route_reflector_client: <class 'bool'>, Optional  (str) nbr_af_send_community: <class 'str'>, Optional  (str) nbr_af_rewrite_evpn_rt_asn: <class 'bool'>, Optional  (str) nbr_af_soft_reconfiguration: <class 'bool'>, Optional  (str) nbr_af_next_hop_self: <class 'bool'>, Optional  (str) nbr_af_as_override: <class 'bool'>, Optional  (str) nbr_af_default_originate: <class 'bool'>, Optional  (str) nbr_af_default_originate_route_map: <class 'str'>, Optional  (str) nbr_af_soo: <class 'str'>}}}}}}}}}, Optional  (str) vxlan: {'evpn': {Optional  (str) evpn_vni: {Any  (str) *: {Optional  (str) evpn_vni: <class 'int'>, Optional  (str) evpn_vni_rd: <class 'str'>, Optional  (str) evpn_vni_rt: {Any  (str) *: {Optional  (str) evpn_vni_rt: <class 'str'>, Optional  (str) evpn_vni_rt_type: <class 'str'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py"
    }
  },
  "Verify_RunningConfigMsdp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show run msdp [| sec <vrf> | inc <pip_str>]",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) global: {Optional  (str) timer: {'connect_retry_interval': <class 'int'>}, Optional  (str) originating_rp: <class 'str'>}, Optional  (str) peer: {Any  (str) *: {Optional  (str) connect_source: <class 'str'>, Optional  (str) peer_as: <class 'str'>, Optional  (str) description: <class 'str'>, Optional  (str) timer: {'keepalive_interval': <class 'int'>, 'holdtime_interval': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py"
    }
  },
  "Verify_RunningConfigNvOverlay": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "parser for:\n        show running-config nv overlay",
      "groups": [],
      "schema": "{Optional  (str) evpn_multisite_border_gateway: <class 'int'>, Optional  (str) multisite_convergence_time: <class 'int'>, Optional  (str) enabled_nv_overlay: <class 'bool'>, Any  (str) *: {Optional  (str) nve_name: <class 'str'>, Optional  (str) if_state: <class 'str'>, Optional  (str) host_reachability_protocol: <class 'str'>, Optional  (str) adv_vmac: <class 'bool'>, Optional  (str) source_if: <class 'str'>, Optional  (str) multisite_bgw_if: <class 'str'>, Optional  (str) vni: {Any  (str) *: {Optional  (str) vni: <class 'int'>, Optional  (str) associated_vrf: <class 'bool'>, Optional  (str) multisite_ingress_replication: <class 'bool'>, Optional  (str) multisite_ingress_replication_optimized: <class 'bool'>, Optional  (str) ingress_replication_protocol_bgp: <class 'bool'>, Optional  (str) mcast_group: <class 'str'>, Optional  (str) multisite_mcast_group: <class 'str'>, Optional  (str) suppress_arp: <class 'bool'>, Optional  (str) vni_type: <class 'str'>}}}, Optional  (str) multisite: {Optional  (str) dci_links: {Any  (str) *: {'if_name': <class 'str'>, 'if_state': <class 'str'>}}, Optional  (str) fabric_links: {Any  (str) *: {'if_name': <class 'str'>, 'if_state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py"
    }
  },
  "Verify_RunningConfigPim": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show running-config pim",
      "groups": [],
      "schema": "{Optional  (str) feature_pim: <class 'bool'>, Optional  (str) feature_pim6: <class 'bool'>, Optional  (str) vrf: {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) rp: {Optional  (str) autorp: {Optional  (str) send_rp_announce: {Optional  (str) interface: <class 'str'>, Optional  (str) group: <class 'str'>, Optional  (str) scope: <class 'int'>, Optional  (str) group_list: <class 'str'>, Optional  (str) route_map: <class 'str'>, Optional  (str) prefix_list: <class 'str'>, Optional  (str) interval: <class 'int'>, Optional  (str) bidir: <class 'bool'>}, Optional  (str) send_rp_discovery: {'interface': <class 'str'>, Optional  (str) scope: <class 'int'>}, Optional  (str) listener: <class 'bool'>}, Optional  (str) bsr: {Any  (str) *: {Optional  (str) interface: <class 'str'>, Optional  (str) policy: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) priority: <class 'int'>, Optional  (str) interval: <class 'int'>, Optional  (str) route_map: <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}, Optional  (str) static_rp: {Any  (str) *: {Optional  (str) policy_name: <class 'str'>, Optional  (str) override: <class 'bool'>, Optional  (str) policy: <class 'int'>, Optional  (str) bidir: <class 'bool'>, Optional  (str) route_map: <class 'str'>, Optional  (str) prefix_list: <class 'str'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py"
    }
  },
  "Verify_RunningConfigTrm": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show running-config | sec '^advertise evpn multicast'",
      "groups": [],
      "schema": "{Optional  (str) advertise_evpn_multicast: <class 'bool'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_trm.py"
    }
  },
  "Verify_RunningConfigVrf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show running-config vrf <vrf> | sec '^vrf' ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) vrf_name: <class 'str'>, Optional  (str) vni: <class 'int'>, Optional  (str) rd: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {Optional  (str) route_target: {Any  (str) *: {Optional  (str) rt_type: <class 'str'>, Optional  (str) protocol: {Any  (str) *: {Optional  (str) rt_evpn: <class 'bool'>, Optional  (str) rt_mvpn: <class 'bool'>}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py"
    }
  },
  "Verify_SdrDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show sdr detail",
      "exclude": [],
      "groups": [],
      "schema": "{'sdr_id': {Any  (str) *: {'sdr_name': <class 'str'>, Optional  (str) dsdrsc_node: <class 'str'>, Optional  (str) dsdrsc_partner_node: <class 'str'>, 'primary_node1': <class 'str'>, 'primary_node2': <class 'str'>, Optional  (str) mac_address: <class 'str'>, 'membership': {Any  (str) *: {'type': <class 'str'>, 'node_status': <class 'str'>, Optional  (str) red_state: <class 'str'>, 'partner_name': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    }
  },
  "Verify_SpanningTree": {
    "ios": {
      "doc": "Parser for show spanning-tree [mst|vlan <WORD>]",
      "groups": [],
      "schema": "{Any  (str) *: {Any  (str) *: {Any  (str) *: {Any  (str) *: {'priority': <class 'int'>, 'address': <class 'str'>, Optional  (str) cost: <class 'int'>, Optional  (str) port: <class 'int'>, Optional  (str) interface: <class 'str'>, Optional  (str) configured_bridge_priority: <class 'int'>, Optional  (str) sys_id_ext: <class 'int'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forward_delay': <class 'int'>, Optional  (str) aging_time: <class 'int'>}, 'interfaces': {Any  (str) *: {'role': <class 'str'>, 'port_state': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'port_num': <class 'int'>, 'type': <class 'str'>, Optional  (str) peer: <class 'str'>, Optional  (str) bound: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show spanning-tree [mst|vlan <WORD>]",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Any  (str) *: {Any  (str) *: {Any  (str) *: {'priority': <class 'int'>, 'address': <class 'str'>, Optional  (str) cost: <class 'int'>, Optional  (str) port: <class 'int'>, Optional  (str) interface: <class 'str'>, Optional  (str) configured_bridge_priority: <class 'int'>, Optional  (str) sys_id_ext: <class 'int'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forward_delay': <class 'int'>, Optional  (str) aging_time: <class 'int'>}, 'interfaces': {Any  (str) *: {'role': <class 'str'>, 'port_state': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'port_num': <class 'int'>, 'type': <class 'str'>, Optional  (str) peer: <class 'str'>, Optional  (str) bound: <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    }
  },
  "Verify_SpanningTreeDetail": {
    "ios": {
      "doc": "Parser for show spanning-tree detail",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) domain: <class 'str'>, Optional  (str) pvst_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) revision: <class 'int'>, Optional  (str) max_hop: <class 'int'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forwarding_delay': <class 'int'>, Optional  (str) hold_count: <class 'int'>, Any  (str) *: {Any  (str) *: {Optional  (str) mst_id: <class 'int'>, Optional  (str) vlan: <class 'str'>, Optional  (str) vlan_id: <class 'int'>, Optional  (str) hello_time: <class 'int'>, Optional  (str) max_age: <class 'int'>, Optional  (str) forwarding_delay: <class 'int'>, Optional  (str) hold_count: <class 'int'>, 'bridge_priority': <class 'int'>, 'bridge_sysid': <class 'int'>, 'bridge_address': <class 'str'>, Optional  (str) root_of_spanning_tree: <class 'bool'>, 'topology_change_flag': <class 'bool'>, 'topology_detected_flag': <class 'bool'>, 'hold_time': <class 'int'>, 'topology_changes': <class 'int'>, 'time_since_topology_change': <class 'str'>, Optional  (str) topology_from_port: <class 'str'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forwarding_delay': <class 'int'>, 'topology_change_times': <class 'int'>, 'notification_times': <class 'int'>, 'hello_timer': <class 'int'>, 'topology_change_timer': <class 'int'>, 'notification_timer': <class 'int'>, Optional  (str) aging_timer: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'status': <class 'str'>, 'name': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'port_num': <class 'int'>, 'port_identifier': <class 'str'>, 'designated_root_priority': <class 'int'>, 'designated_root_address': <class 'str'>, 'designated_path_cost': <class 'int'>, 'designated_port_id': <class 'str'>, 'designated_bridge_priority': <class 'int'>, 'designated_bridge_address': <class 'str'>, 'number_of_forward_transitions': <class 'int'>, 'message_age': <class 'int'>, 'forward_delay': <class 'int'>, 'hold': <class 'int'>, 'link_type': <class 'str'>, Optional  (str) internal: <class 'bool'>, Optional  (str) boundary: <class 'str'>, Optional  (str) peer: <class 'str'>, Optional  (str) loop_guard: <class 'bool'>, 'counters': {'bpdu_sent': <class 'int'>, 'bpdu_received': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show spanning-tree detail",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) domain: <class 'str'>, Optional  (str) pvst_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) revision: <class 'int'>, Optional  (str) max_hop: <class 'int'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forwarding_delay': <class 'int'>, Optional  (str) hold_count: <class 'int'>, Any  (str) *: {Any  (str) *: {Optional  (str) mst_id: <class 'int'>, Optional  (str) vlan: <class 'str'>, Optional  (str) vlan_id: <class 'int'>, Optional  (str) hello_time: <class 'int'>, Optional  (str) max_age: <class 'int'>, Optional  (str) forwarding_delay: <class 'int'>, Optional  (str) hold_count: <class 'int'>, 'bridge_priority': <class 'int'>, 'bridge_sysid': <class 'int'>, 'bridge_address': <class 'str'>, Optional  (str) root_of_spanning_tree: <class 'bool'>, 'topology_change_flag': <class 'bool'>, 'topology_detected_flag': <class 'bool'>, 'hold_time': <class 'int'>, 'topology_changes': <class 'int'>, 'time_since_topology_change': <class 'str'>, Optional  (str) topology_from_port: <class 'str'>, 'hello_time': <class 'int'>, 'max_age': <class 'int'>, 'forwarding_delay': <class 'int'>, 'topology_change_times': <class 'int'>, 'notification_times': <class 'int'>, 'hello_timer': <class 'int'>, 'topology_change_timer': <class 'int'>, 'notification_timer': <class 'int'>, Optional  (str) aging_timer: <class 'int'>, Optional  (str) interfaces: {Any  (str) *: {'status': <class 'str'>, 'name': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'port_num': <class 'int'>, 'port_identifier': <class 'str'>, 'designated_root_priority': <class 'int'>, 'designated_root_address': <class 'str'>, 'designated_path_cost': <class 'int'>, 'designated_port_id': <class 'str'>, 'designated_bridge_priority': <class 'int'>, 'designated_bridge_address': <class 'str'>, 'number_of_forward_transitions': <class 'int'>, 'message_age': <class 'int'>, 'forward_delay': <class 'int'>, 'hold': <class 'int'>, 'link_type': <class 'str'>, Optional  (str) internal: <class 'bool'>, Optional  (str) boundary: <class 'str'>, Optional  (str) peer: <class 'str'>, Optional  (str) loop_guard: <class 'bool'>, 'counters': {'bpdu_sent': <class 'int'>, 'bpdu_received': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    },
    "nxos": {
      "doc": "Parser for:\n            show spanning-tree detail\n    ",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) domain: <class 'str'>, Optional  (str) pvst_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) revision: <class 'int'>, Optional  (str) max_hop: <class 'int'>, 'hello_time': <class 'int'>, Optional  (str) fex_hello_time: <class 'int'>, 'max_age': <class 'int'>, 'forwarding_delay': <class 'int'>, Optional  (str) hold_count: <class 'int'>, Any  (str) *: {Any  (str) *: {'bridge_priority': <class 'int'>, 'bridge_sysid': <class 'int'>, 'bridge_address': <class 'str'>, 'topology_change_flag': <class 'bool'>, 'topology_detected_flag': <class 'bool'>, 'topology_changes': <class 'int'>, 'time_since_topology_change': <class 'str'>, 'times': {'hold': <class 'int'>, 'topology_change': <class 'int'>, 'notification': <class 'int'>, 'max_age': <class 'int'>, 'hello': <class 'int'>, 'forwarding_delay': <class 'int'>}, 'timers': {'hello': <class 'int'>, 'topology_change': <class 'int'>, 'notification': <class 'int'>}, Optional  (str) mst_id: <class 'int'>, Optional  (str) vlan: <class 'str'>, Optional  (str) vlan_id: <class 'int'>, Optional  (str) root_of_the_spanning_tree: <class 'bool'>, Optional  (str) topology_from_port: <class 'str'>, Optional  (str) aging_timer: <class 'int'>, 'interfaces': {Any  (str) *: {'status': <class 'str'>, 'name': <class 'str'>, Optional  (str) bridge_assurance_inconsistent: <class 'bool'>, Optional  (str) vpc_peer_link_inconsistent: <class 'bool'>, Optional  (str) topology_change: <class 'bool'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'port_num': <class 'int'>, 'port_identifier': <class 'str'>, 'designated_root_priority': <class 'int'>, 'designated_root_address': <class 'str'>, 'designated_path_cost': <class 'int'>, 'designated_port_id': <class 'str'>, 'designated_bridge_priority': <class 'int'>, 'designated_bridge_address': <class 'str'>, 'number_of_forward_transitions': <class 'int'>, 'timers': {'message_age': <class 'int'>, 'forward_delay': <class 'int'>, 'hold': <class 'int'>}, Optional  (str) port_type: <class 'str'>, 'link_type': <class 'str'>, Optional  (str) internal: <class 'bool'>, Optional  (str) peer_type: <class 'str'>, Optional  (str) root_guard: <class 'bool'>, Optional  (str) pvst_simulation: <class 'bool'>, 'counters': {'bpdu_sent': <class 'int'>, 'bpdu_received': <class 'int'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py"
    }
  },
  "Verify_SpanningTreeMstConfiguration": {
    "ios": {
      "doc": "Parser for show spanning-tree mst configuration ",
      "groups": [],
      "schema": "{'mstp': {'name': <class 'str'>, 'revision': <class 'int'>, 'instances_configured': <class 'int'>, 'mst_instances': {Any  (str) *: {'vlan_mapped': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show spanning-tree mst configuration",
      "exclude": [],
      "groups": [],
      "schema": "{'mstp': {'name': <class 'str'>, 'revision': <class 'int'>, 'instances_configured': <class 'int'>, 'mst_instances': {Any  (str) *: {'vlan_mapped': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    }
  },
  "Verify_SpanningTreeMstDetail": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'mst_instances': {Any  (str) *: {'mst_id': <class 'int'>, Optional  (str) vlan: <class 'str'>, 'bridge_address': <class 'str'>, 'bridge_priority': <class 'int'>, 'sysid': <class 'int'>, Optional  (str) root: <class 'str'>, Optional  (str) root_address: <class 'str'>, Optional  (str) root_priority: <class 'int'>, Optional  (str) operational: {'hello_time': <class 'int'>, 'forward_delay': <class 'int'>, 'max_age': <class 'int'>, 'tx_hold_count': <class 'int'>}, Optional  (str) configured: {'hello_time': <class 'int'>, 'forward_delay': <class 'int'>, 'max_age': <class 'int'>, 'max_hops': <class 'int'>}, 'interfaces': {Any  (str) *: {'status': <class 'str'>, Optional  (str) broken_reason: <class 'str'>, 'name': <class 'str'>, 'port_id': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'designated_root_priority': <class 'int'>, 'designated_root_address': <class 'str'>, 'designated_root_cost': <class 'int'>, Optional  (str) designated_regional_root_cost: <class 'int'>, Optional  (str) designated_regional_root_priority: <class 'int'>, Optional  (str) designated_regional_root_address: <class 'str'>, 'designated_bridge_priority': <class 'int'>, 'designated_bridge_address': <class 'str'>, 'designated_bridge_port_id': <class 'str'>, 'forward_transitions': <class 'int'>, 'message_expires': <class 'int'>, 'forward_delay': <class 'int'>, 'counters': {'bpdu_sent': <class 'int'>, 'bpdu_received': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show spanning-tree mst detail",
      "exclude": [],
      "groups": [],
      "schema": "{'mst_instances': {Any  (str) *: {'mst_id': <class 'int'>, Optional  (str) vlan: <class 'str'>, 'bridge_address': <class 'str'>, 'bridge_priority': <class 'int'>, 'sysid': <class 'int'>, Optional  (str) root: <class 'str'>, Optional  (str) root_address: <class 'str'>, Optional  (str) root_priority: <class 'int'>, Optional  (str) operational: {'hello_time': <class 'int'>, 'forward_delay': <class 'int'>, 'max_age': <class 'int'>, 'tx_hold_count': <class 'int'>}, Optional  (str) configured: {'hello_time': <class 'int'>, 'forward_delay': <class 'int'>, 'max_age': <class 'int'>, 'max_hops': <class 'int'>}, 'interfaces': {Any  (str) *: {'status': <class 'str'>, Optional  (str) broken_reason: <class 'str'>, 'name': <class 'str'>, 'port_id': <class 'str'>, 'cost': <class 'int'>, 'port_priority': <class 'int'>, 'designated_root_priority': <class 'int'>, 'designated_root_address': <class 'str'>, 'designated_root_cost': <class 'int'>, Optional  (str) designated_regional_root_cost: <class 'int'>, Optional  (str) designated_regional_root_priority: <class 'int'>, Optional  (str) designated_regional_root_address: <class 'str'>, 'designated_bridge_priority': <class 'int'>, 'designated_bridge_address': <class 'str'>, 'designated_bridge_port_id': <class 'str'>, 'forward_transitions': <class 'int'>, 'message_expires': <class 'int'>, 'forward_delay': <class 'int'>, 'counters': {'bpdu_sent': <class 'int'>, 'bpdu_received': <class 'int'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    }
  },
  "Verify_SpanningTreeSummary": {
    "ios": {
      "doc": "Parser for show show spanning-tree summary",
      "groups": [],
      "schema": "{Optional  (str) etherchannel_misconfig_guard: <class 'bool'>, Optional  (str) extended_system_id: <class 'bool'>, Optional  (str) portfast_default: <class 'bool'>, 'bpdu_guard': <class 'bool'>, Optional  (str) bpdu_filter: <class 'bool'>, Optional  (str) bridge_assurance: <class 'bool'>, Optional  (str) loop_guard: <class 'bool'>, Optional  (str) uplink_fast: <class 'bool'>, Optional  (str) backbone_fast: <class 'bool'>, Optional  (str) root_bridge_for: <class 'str'>, Optional  (str) pvst_simulation: <class 'bool'>, Optional  (str) pvst_simulation_status: <class 'str'>, Optional  (str) platform_pvst_simulation: <class 'bool'>, Optional  (str) configured_pathcost: {'method': <class 'str'>, Optional  (str) operational_value: <class 'str'>}, Optional  (str) mode: {Any  (str) *: {Any  (str) *: {'blocking': <class 'int'>, 'listening': <class 'int'>, 'learning': <class 'int'>, 'forwarding': <class 'int'>, 'stp_active': <class 'int'>}}}, 'total_statistics': {'blockings': <class 'int'>, 'listenings': <class 'int'>, 'learnings': <class 'int'>, 'forwardings': <class 'int'>, 'stp_actives': <class 'int'>, Optional  (str) num_of_msts: <class 'int'>, Optional  (str) num_of_vlans: <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show show spanning-tree summary",
      "exclude": [],
      "groups": [],
      "schema": "{Optional  (str) etherchannel_misconfig_guard: <class 'bool'>, Optional  (str) extended_system_id: <class 'bool'>, Optional  (str) portfast_default: <class 'bool'>, 'bpdu_guard': <class 'bool'>, Optional  (str) bpdu_filter: <class 'bool'>, Optional  (str) bridge_assurance: <class 'bool'>, Optional  (str) loop_guard: <class 'bool'>, Optional  (str) uplink_fast: <class 'bool'>, Optional  (str) backbone_fast: <class 'bool'>, Optional  (str) root_bridge_for: <class 'str'>, Optional  (str) pvst_simulation: <class 'bool'>, Optional  (str) pvst_simulation_status: <class 'str'>, Optional  (str) platform_pvst_simulation: <class 'bool'>, Optional  (str) configured_pathcost: {'method': <class 'str'>, Optional  (str) operational_value: <class 'str'>}, Optional  (str) mode: {Any  (str) *: {Any  (str) *: {'blocking': <class 'int'>, 'listening': <class 'int'>, 'learning': <class 'int'>, 'forwarding': <class 'int'>, 'stp_active': <class 'int'>}}}, 'total_statistics': {'blockings': <class 'int'>, 'listenings': <class 'int'>, 'learnings': <class 'int'>, 'forwardings': <class 'int'>, 'stp_actives': <class 'int'>, Optional  (str) num_of_msts: <class 'int'>, Optional  (str) num_of_vlans: <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py"
    },
    "nxos": {
      "doc": "Parser class for:\n            show spanning-tree summary\n    ",
      "groups": [],
      "schema": "{Optional  (str) root_bridge_for: <class 'str'>, Optional  (str) mst_type: <class 'str'>, 'port_type_default': <class 'bool'>, 'bpdu_guard': <class 'bool'>, 'bpdu_filter': <class 'bool'>, 'bridge_assurance': <class 'bool'>, 'loop_guard': <class 'bool'>, 'path_cost_method': <class 'str'>, Optional  (str) pvst_simulation: <class 'bool'>, Optional  (str) vpc_peer_switch: <class 'bool'>, Optional  (str) vpc_peer_switch_status: <class 'str'>, 'stp_lite': <class 'bool'>, Optional  (str) portfast_default: <class 'bool'>, Optional  (str) uplink_fast: <class 'bool'>, Optional  (str) backbone_fast: <class 'bool'>, 'mode': {Any  (str) *: {Any  (str) *: {'blocking': <class 'int'>, 'listening': <class 'int'>, 'learning': <class 'int'>, 'forwarding': <class 'int'>, 'stp_active': <class 'int'>}}}, Optional  (str) total_statistics: {'blockings': <class 'int'>, 'listenings': <class 'int'>, 'learnings': <class 'int'>, 'forwardings': <class 'int'>, 'stp_actives': <class 'int'>, Optional  (str) num_of_msts: <class 'int'>, Optional  (str) num_of_vlans: <class 'int'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py"
    }
  },
  "Verify_StackPower": {
    "ios": {
      "doc": "Parser for show stack-power",
      "groups": [],
      "schema": "{'power_stack': {Any  (str) *: {'mode': <class 'str'>, 'topology': <class 'str'>, 'total_power': <class 'int'>, 'reserved_power': <class 'int'>, 'allocated_power': <class 'int'>, Optional  (str) unused_power: <class 'int'>, Optional  (str) available_power: <class 'int'>, 'switch_num': <class 'int'>, 'power_supply_num': <class 'int'>, Optional  (str) power_stack_detail: {'stack_mode': <class 'str'>, 'stack_topology': <class 'str'>, 'switch': {Any  (str) *: {'power_budget': <class 'int'>, 'power_allocated': <class 'int'>, 'low_port_priority_value': <class 'int'>, 'high_port_priority_value': <class 'int'>, 'switch_priority_value': <class 'int'>, 'port_1_status': <class 'str'>, 'port_2_status': <class 'str'>, 'neighbor_on_port_1': <class 'str'>, 'neighbor_on_port_2': <class 'str'>}}}, Optional  (str) switches: {Any  (str) *: {'power_supply_a': Or (<class 'int'>, <class 'float'>), 'power_supply_b': Or (<class 'int'>, <class 'float'>), 'power_budget': Or (<class 'int'>, <class 'float'>), 'allocated_power': Or (<class 'int'>, <class 'float'>), 'available_power': Or (<class 'int'>, <class 'float'>), 'consumed_power_sys': Or (<class 'int'>, <class 'float'>), 'consumed_power_poe': Or (<class 'int'>, <class 'float'>)}}}}, Optional  (str) totals: {'total_allocated_power': Or (<class 'int'>, <class 'float'>), 'total_available_power': Or (<class 'int'>, <class 'float'>), 'total_consumed_power_sys': Or (<class 'int'>, <class 'float'>), 'total_consumed_power_poe': Or (<class 'int'>, <class 'float'>)}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_power.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for \n        * show stack-power\n        * show stack-power budgeting\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'power_stack': {Any  (str) *: {'mode': <class 'str'>, 'topology': <class 'str'>, 'total_power': <class 'int'>, 'reserved_power': <class 'int'>, 'allocated_power': <class 'int'>, Optional  (str) unused_power: <class 'int'>, Optional  (str) available_power: <class 'int'>, 'switch_num': <class 'int'>, 'power_supply_num': <class 'int'>, Optional  (str) power_stack_detail: {'stack_mode': <class 'str'>, 'stack_topology': <class 'str'>, 'switch': {Any  (str) *: {'power_budget': <class 'int'>, 'power_allocated': <class 'int'>, 'low_port_priority_value': <class 'int'>, 'high_port_priority_value': <class 'int'>, 'switch_priority_value': <class 'int'>, 'port_1_status': <class 'str'>, 'port_2_status': <class 'str'>, 'neighbor_on_port_1': <class 'str'>, 'neighbor_on_port_2': <class 'str'>}}}, Optional  (str) switches: {Any  (str) *: {'power_supply_a': Or (<class 'int'>, <class 'float'>), 'power_supply_b': Or (<class 'int'>, <class 'float'>), 'power_budget': Or (<class 'int'>, <class 'float'>), 'allocated_power': Or (<class 'int'>, <class 'float'>), 'available_power': Or (<class 'int'>, <class 'float'>), 'consumed_power_sys': Or (<class 'int'>, <class 'float'>), 'consumed_power_poe': Or (<class 'int'>, <class 'float'>)}}}}, Optional  (str) totals: {'total_allocated_power': Or (<class 'int'>, <class 'float'>), 'total_available_power': Or (<class 'int'>, <class 'float'>), 'total_consumed_power_sys': Or (<class 'int'>, <class 'float'>), 'total_consumed_power_poe': Or (<class 'int'>, <class 'float'>)}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_power.py"
    }
  },
  "Verify_StandbyAll": {
    "ios": {
      "doc": "Parser for show standby all",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) use_bia: <class 'bool'>, Optional  (str) redirects_disable: <class 'bool'>, Optional  (str) interface: <class 'str'>, Optional  (str) mac_refresh: <class 'int'>, Optional  (str) mac_next_refresh: <class 'int'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}, Optional  (str) slave_groups: {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show standby all",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 6,
        "interval": 10
      },
      "schema": "{Any  (str) *: {Optional  (str) use_bia: <class 'bool'>, Optional  (str) redirects_disable: <class 'bool'>, Optional  (str) interface: <class 'str'>, Optional  (str) mac_refresh: <class 'int'>, Optional  (str) mac_next_refresh: <class 'int'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}, Optional  (str) slave_groups: {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py"
    }
  },
  "Verify_StandbyAll_yang": {
    "ios": {
      "doc": "Parser for show standby all",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) use_bia: <class 'bool'>, Optional  (str) redirects_disable: <class 'bool'>, Optional  (str) interface: <class 'str'>, Optional  (str) mac_refresh: <class 'int'>, Optional  (str) mac_next_refresh: <class 'int'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}, Optional  (str) slave_groups: {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py"
    },
    "iosxe": {
      "doc": "Parser for show standby all",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) use_bia: <class 'bool'>, Optional  (str) redirects_disable: <class 'bool'>, Optional  (str) interface: <class 'str'>, Optional  (str) mac_refresh: <class 'int'>, Optional  (str) mac_next_refresh: <class 'int'>, 'address_family': {Any  (str) *: {'version': {Any  (str) *: {'groups': {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}, Optional  (str) slave_groups: {Any  (str) *: {'group_number': <class 'int'>, Optional  (str) follow: <class 'str'>, Optional  (str) hsrp_router_state: <class 'str'>, Optional  (str) hsrp_router_state_reason: <class 'str'>, Optional  (str) last_state_change: <class 'str'>, Optional  (str) authentication: <class 'str'>, Optional  (str) authentication_type: <class 'str'>, Optional  (str) tracked_objects: {Optional  (Any) Any  (str) *: {Optional  (str) object_name: <class 'int'>}}, Optional  (str) timers: {Optional  (str) hello_msec_flag: <class 'bool'>, Optional  (str) hello_msec: <class 'int'>, Optional  (str) hello_sec: <class 'int'>, Optional  (str) hold_msec_flag: <class 'bool'>, Optional  (str) hold_msec: <class 'int'>, Optional  (str) hold_sec: <class 'int'>, Optional  (str) cfgd_hello_msec: <class 'int'>, Optional  (str) cfgd_hold_msec: <class 'int'>, Optional  (str) next_hello_sent: <class 'float'>}, Optional  (str) primary_ipv4_address: {'address': <class 'str'>}, Optional  (str) secondary_ipv4_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) link_local_ipv6_address: {Optional  (str) address: <class 'str'>, Optional  (str) auto_configure: <class 'str'>}, Optional  (str) global_ipv6_addresses: {Any  (str) *: {'address': <class 'str'>}}, Optional  (str) priority: <class 'int'>, Optional  (str) preempt: <class 'bool'>, Optional  (str) preempt_min_delay: <class 'int'>, Optional  (str) preempt_reload_delay: <class 'int'>, Optional  (str) preempt_sync_delay: <class 'int'>, Optional  (str) statistics: {Optional  (str) num_state_changes: <class 'int'>}, Optional  (str) active_router_priority: <class 'int'>, Optional  (str) active_ip_address: <class 'str'>, Optional  (str) active_ipv6_address: <class 'str'>, Optional  (str) active_expires_in: <class 'float'>, Optional  (str) default_priority: <class 'int'>, Optional  (str) configured_priority: <class 'int'>, Optional  (str) session_name: <class 'str'>, Optional  (str) active_mac_address: <class 'str'>, Optional  (str) active_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address: <class 'str'>, Optional  (str) local_virtual_mac_default: <class 'str'>, Optional  (str) active_router: <class 'str'>, Optional  (str) standby_router: <class 'str'>, Optional  (str) standby_ip_address: <class 'str'>, Optional  (str) standby_ipv6_address: <class 'str'>, Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>, Optional  (str) local_virtual_mac_address_conf: <class 'str'>, Optional  (str) virtual_mac_address: <class 'str'>, Optional  (str) slave_group_number: <class 'int'>, Optional  (str) standby_priority: <class 'int'>, Optional  (str) standby_expires_in: <class 'float'>}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py"
    }
  },
  "Verify_StandbyDelay": {
    "ios": {
      "doc": "Parser for show standby delay",
      "groups": [],
      "schema": "{Any  (str) *: {'delay': {'minimum_delay': <class 'int'>, 'reload_delay': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show standby delay",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {'delay': {'minimum_delay': <class 'int'>, 'reload_delay': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py"
    }
  },
  "Verify_StandbyInternal": {
    "ios": {
      "doc": "Parser for show standby internal",
      "groups": [],
      "schema": "{'hsrp_common_process_state': <class 'str'>, Optional  (str) msgQ_size: <class 'int'>, Optional  (str) msgQ_max_size: <class 'int'>, 'hsrp_ipv4_process_state': <class 'str'>, 'hsrp_ipv6_process_state': <class 'str'>, 'hsrp_timer_wheel_state': <class 'str'>, Optional  (str) hsrp_ha_state: <class 'str'>, Optional  (str) v3_to_v4_transform: <class 'str'>, Optional  (str) virtual_ip_hash_table: {Any  (str) *: {Any  (str) *: {'ip': <class 'str'>, 'interface': <class 'str'>, 'group': <class 'int'>}}}, Optional  (str) mac_address_table: {Any  (str) *: {'interface': <class 'str'>, 'mac_address': <class 'str'>, 'group': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show standby internal",
      "exclude": [],
      "groups": [],
      "schema": "{'hsrp_common_process_state': <class 'str'>, Optional  (str) msgQ_size: <class 'int'>, Optional  (str) msgQ_max_size: <class 'int'>, 'hsrp_ipv4_process_state': <class 'str'>, 'hsrp_ipv6_process_state': <class 'str'>, 'hsrp_timer_wheel_state': <class 'str'>, Optional  (str) hsrp_ha_state: <class 'str'>, Optional  (str) v3_to_v4_transform: <class 'str'>, Optional  (str) virtual_ip_hash_table: {Any  (str) *: {Any  (str) *: {'ip': <class 'str'>, 'interface': <class 'str'>, 'group': <class 'int'>}}}, Optional  (str) mac_address_table: {Any  (str) *: {'interface': <class 'str'>, 'mac_address': <class 'str'>, 'group': <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_all": {
    "iosxr": {
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_all_af_ipv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv4",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_all_af_ipv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv6",
        "vrf": "all"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_default": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "exclude": [
        "install_date",
        "configure_date"
      ],
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_default_af_ipv4": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv4"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_StaticTopologyDetail_vrf_default_af_ipv6": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ",
      "exclude": [],
      "groups": [],
      "parameters": {
        "af": "ipv6"
      },
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) address_family: {Any  (str) *: {Optional  (str) table_id: <class 'str'>, Optional  (str) safi: <class 'str'>, Optional  (str) routes: {Any  (str) *: {Optional  (str) route: <class 'str'>, Optional  (str) next_hop: {Optional  (str) outgoing_interface: {Any  (str) *: {Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) active: <class 'bool'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}, Optional  (str) next_hop_list: {Any  (str) *: {Optional  (str) index: <class 'int'>, Optional  (str) active: <class 'bool'>, Optional  (str) next_hop: <class 'str'>, Optional  (str) outgoing_interface: <class 'str'>, Optional  (str) path_event: <class 'str'>, Optional  (str) tag: <class 'int'>, Optional  (str) path_version: <class 'int'>, Optional  (str) path_status: <class 'str'>, Optional  (str) metrics: <class 'int'>, Optional  (str) track: <class 'int'>, Optional  (str) explicit_path: <class 'str'>, Optional  (str) preference: <class 'int'>, Optional  (str) local_label: <class 'str'>}}}}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py"
    }
  },
  "Verify_Switch": {
    "ios": {
      "doc": "Parser for show switch",
      "groups": [],
      "schema": "{'switch': {'mac_address': <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, 'stack': {Any  (str) *: {'role': <class 'str'>, 'mac_address': <class 'str'>, 'priority': <class 'str'>, Optional  (str) hw_ver: <class 'str'>, 'state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show switch.",
      "groups": [],
      "schema": "{'switch': {'mac_address': <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, 'stack': {Any  (str) *: {'role': <class 'str'>, 'mac_address': <class 'str'>, 'priority': <class 'str'>, Optional  (str) hw_ver: <class 'str'>, 'state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_SwitchDetail": {
    "ios": {
      "doc": "Parser for show switch detail",
      "groups": [],
      "schema": "{'switch': {'mac_address': <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, 'stack': {Any  (str) *: {'role': <class 'str'>, 'mac_address': <class 'str'>, 'priority': <class 'str'>, Optional  (str) hw_ver: <class 'str'>, 'state': <class 'str'>, 'ports': {Any  (str) *: {'stack_port_status': <class 'str'>, 'neighbors_num': Or (<class 'int'>, <class 'str'>)}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show switch detail.",
      "exclude": [],
      "groups": [],
      "schema": "{'switch': {'mac_address': <class 'str'>, Optional  (str) mac_persistency_wait_time: <class 'str'>, 'stack': {Any  (str) *: {'role': <class 'str'>, 'mac_address': <class 'str'>, 'priority': <class 'str'>, Optional  (str) hw_ver: <class 'str'>, 'state': <class 'str'>, 'ports': {Any  (str) *: {'stack_port_status': <class 'str'>, 'neighbors_num': Or (<class 'int'>, <class 'str'>)}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    }
  },
  "Verify_SystemInternalL2fwderMac": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show system internal l2fwder Mac",
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {'mac_addresses': {Any  (str) *: {'mac_type': <class 'str'>, 'mac_aging_time': <class 'str'>, 'entry': <class 'str'>, 'secure': <class 'str'>, 'ntfy': <class 'str'>, 'ports': <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_system.py"
    }
  },
  "Verify_SystemRedundancyStatus": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show system redundancy status",
      "exclude": [],
      "groups": [],
      "schema": "{'redundancy_mode': {'administrative': <class 'str'>, 'operational': <class 'str'>}, Any  (str) *: {'redundancy_state': <class 'str'>, Optional  (str) supervisor_state: <class 'str'>, Optional  (str) internal_state: <class 'str'>}, Optional  (str) system_start_time: <class 'str'>, Optional  (str) system_uptime: <class 'str'>, Optional  (str) kernel_uptime: <class 'str'>, Optional  (str) active_supervisor_time: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_VdcCurrent": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for:\n        * show vdc current-vdc\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'current_vdc': {'id': <class 'str'>, 'name': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_VdcDetail": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vdc detail",
      "exclude": [],
      "groups": [],
      "schema": "{'vdc': {Any  (str) *: {'name': <class 'str'>, 'state': <class 'str'>, 'mac_address': <class 'str'>, 'ha_policy': <class 'str'>, 'dual_sup_ha_policy': <class 'str'>, 'boot_order': <class 'str'>, Optional  (str) cpu_share: <class 'str'>, Optional  (str) cpu_share_percentage: <class 'str'>, 'create_time': <class 'str'>, Optional  (str) reload_count: <class 'str'>, Optional  (str) uptime: <class 'str'>, 'restart_count': <class 'str'>, Optional  (str) restart_time: <class 'str'>, 'type': <class 'str'>, 'supported_linecards': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_VdcMembershipStatus": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vdc membership status",
      "exclude": [],
      "groups": [],
      "schema": "{'virtual_device': {Any  (str) *: {'membership': {Any  (str) *: {Any  (str) *: {'vd_ms_status': <class 'str'>, 'vd_ms_type': <class 'str'>}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_Version": {
    "apic": {
      "doc": " Parser class for:\n        * 'show version'\n    ",
      "groups": [],
      "schema": "{'pod': {Any  (str) *: {'node': {Any  (str) *: {'name': <class 'str'>, 'role': <class 'str'>, 'version': <class 'str'>, 'node': <class 'int'>, 'pod': <class 'int'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/apic/show_platform.py"
    },
    "generic": {
      "doc": "Parser for show version",
      "groups": [],
      "schema": "{'os': <class 'str'>, Optional  (str) os_flavor: <class 'str'>, 'version': <class 'str'>, Optional  (str) platform: <class 'str'>, Optional  (str) pid: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/generic/show_platform.py"
    },
    "ios": {
      "c7600": {
        "doc": "\n    parser for command: show version\n    ",
        "groups": [],
        "schema": "{'version': {'os': <class 'str'>, 'platform': <class 'str'>, 'version': <class 'str'>, 'image_id': <class 'str'>, 'compiled_by': <class 'str'>, 'compiled_date': <class 'str'>, 'rom': <class 'str'>, 'rom_version': <class 'str'>, Optional  (str) image: {'text_base': <class 'str'>, 'data_base': <class 'str'>}, 'bootldr_version': <class 'str'>, 'hostname': <class 'str'>, 'uptime': <class 'str'>, 'returned_to_rom_by': <class 'str'>, 'system_image': <class 'str'>, 'chassis': <class 'str'>, 'processor_type': <class 'str'>, 'main_mem': <class 'str'>, 'processor_board_id': <class 'str'>, 'cpu': {'name': <class 'str'>, 'speed': <class 'str'>, 'implementation': <class 'str'>, 'rev': <class 'str'>, 'l2_cache': <class 'str'>}, 'last_reset': <class 'str'>, Optional  (str) softwares: <class 'list'>, 'interfaces': {'virtual_ethernet': <class 'int'>, 'gigabit_ethernet': <class 'int'>, Optional  (str) serial: <class 'int'>}, 'memory': {'non_volatile_conf': <class 'int'>, 'packet_buffer': <class 'int'>, 'flash_internal_SIMM': <class 'int'>}, 'curr_config_register': <class 'str'>, Optional  (str) last_reload: {'type': <class 'str'>, 'reason': <class 'str'>}, Optional  (str) control_processor_uptime: <class 'str'>, Optional  (str) controller: {'type': <class 'str'>, 'counts': <class 'int'>, 'serial': <class 'int'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py"
      },
      "cat6k": {
        "doc": "\n    Parser for show version\n    ",
        "groups": [],
        "schema": "{'version': {'os': <class 'str'>, 'platform': <class 'str'>, 'version': <class 'str'>, 'image_id': <class 'str'>, 'compiled_by': <class 'str'>, 'compiled_date': <class 'str'>, 'rom': <class 'str'>, 'rom_version': <class 'str'>, Optional  (str) image: {'text_base': <class 'str'>, 'data_base': <class 'str'>}, 'bootldr_version': <class 'str'>, 'hostname': <class 'str'>, 'uptime': <class 'str'>, 'returned_to_rom_by': <class 'str'>, 'system_image': <class 'str'>, 'chassis': <class 'str'>, 'processor_type': <class 'str'>, 'main_mem': <class 'str'>, 'processor_board_id': <class 'str'>, 'cpu': {'name': <class 'str'>, 'speed': <class 'str'>, 'implementation': <class 'str'>, 'rev': <class 'str'>, 'l2_cache': <class 'str'>}, 'last_reset': <class 'str'>, Optional  (str) softwares: <class 'list'>, 'interfaces': {'virtual_ethernet': <class 'int'>, 'gigabit_ethernet': <class 'int'>, Optional  (str) serial: <class 'int'>}, 'memory': {'non_volatile_conf': <class 'int'>, 'packet_buffer': <class 'int'>, 'flash_internal_SIMM': <class 'int'>}, 'curr_config_register': <class 'str'>, Optional  (str) last_reload: {'type': <class 'str'>, 'reason': <class 'str'>}, Optional  (str) control_processor_uptime: <class 'str'>, Optional  (str) controller: {'type': <class 'str'>, 'counts': <class 'int'>, 'serial': <class 'int'>}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show version\n    ",
      "exclude": [],
      "groups": [
        "platform"
      ],
      "schema": "{'version': {Optional  (str) xe_version: <class 'str'>, 'version_short': <class 'str'>, 'platform': <class 'str'>, 'version': <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) build_label: <class 'str'>, 'image_id': <class 'str'>, 'rom': <class 'str'>, 'image_type': <class 'str'>, Optional  (str) installation_mode: <class 'str'>, Optional  (str) bootldr: <class 'str'>, 'hostname': <class 'str'>, 'uptime': <class 'str'>, Optional  (str) uptime_this_cp: <class 'str'>, Optional  (str) jawa_revision: <class 'str'>, Optional  (str) snowtrooper_revision: <class 'str'>, Optional  (str) running_default_software: <class 'bool'>, Optional  (str) processor_board_flash: <class 'str'>, Optional  (str) last_reload_type: <class 'str'>, Optional  (str) returned_to_rom_by: <class 'str'>, Optional  (str) returned_to_rom_at: <class 'str'>, Optional  (str) compiled_date: <class 'str'>, Optional  (str) location: <class 'str'>, Optional  (str) copyright_years: <class 'str'>, Optional  (str) sp_by: <class 'str'>, Optional  (str) compiled_by: <class 'str'>, Optional  (str) system_restarted_at: <class 'str'>, Optional  (str) system_image: <class 'str'>, Optional  (str) last_reload_reason: <class 'str'>, Optional  (str) license_type: <class 'str'>, Optional  (str) license_level: <class 'str'>, Optional  (str) next_reload_license_level: <class 'str'>, Optional  (str) air_license_level: <class 'str'>, Optional  (str) next_reload_air_license_level: <class 'str'>, Optional  (str) chassis: <class 'str'>, Optional  (str) processor_type: <class 'str'>, Optional  (str) chassis_sn: <class 'str'>, Optional  (str) rtr_type: <class 'str'>, Optional  (str) router_operating_mode: <class 'str'>, 'os': <class 'str'>, Optional  (str) curr_config_register: <class 'str'>, Optional  (str) license_udi: {Optional  (str) device_num: {Any  (str) *: {'pid': <class 'str'>, 'sn': <class 'str'>}}}, Optional  (str) next_config_register: <class 'str'>, Optional  (str) main_mem: <class 'str'>, Optional  (str) number_of_intfs: {Any  (str) *: <class 'str'>}, Optional  (str) mem_size: {Any  (str) *: <class 'str'>}, Optional  (str) disks: {Any  (str) *: {Optional  (str) disk_size: <class 'str'>, Optional  (str) type_of_disk: <class 'str'>}}, Optional  (str) switch_num: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) mb_assembly_num: <class 'str'>, Optional  (str) power_supply_part_nr: <class 'str'>, Optional  (str) mb_sn: <class 'str'>, Optional  (str) power_supply_sn: <class 'str'>, Optional  (str) model_rev_num: <class 'str'>, Optional  (str) mb_rev_num: <class 'str'>, Optional  (str) model_num: <class 'str'>, Optional  (str) db_assembly_num: <class 'str'>, Optional  (str) db_sn: <class 'str'>, Optional  (str) system_sn: <class 'str'>, Optional  (str) top_assembly_part_num: <class 'str'>, Optional  (str) top_assembly_rev_num: <class 'str'>, Optional  (str) system_fpga_version: <class 'str'>, Optional  (str) version_id: <class 'str'>, Optional  (str) clei_code_num: <class 'str'>, Optional  (str) db_rev_num: <class 'str'>, Optional  (str) hb_rev_num: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) sw_image: <class 'str'>, Optional  (str) ports: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, Optional  (str) active: <class 'bool'>}}, Optional  (str) processor: {Optional  (str) cpu_type: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) core: <class 'str'>, Optional  (str) l2_cache: <class 'str'>, Optional  (str) supervisor: <class 'str'>}, Optional  (str) license_package: {Any  (str) *: {'license_level': <class 'str'>, 'license_type': <class 'str'>, 'next_reload_license_level': <class 'str'>}}, Optional  (str) module: {Any  (str) *: {Any  (str) *: {Optional  (str) suite: <class 'str'>, Optional  (str) suite_current: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) suite_next_reboot: <class 'str'>}}}, Optional  (str) image: {'text_base': <class 'str'>, 'data_base': <class 'str'>}, Optional  (str) interfaces: {Optional  (str) virtual_ethernet: <class 'int'>, Optional  (str) fastethernet: <class 'int'>, 'gigabit_ethernet': <class 'int'>}, Optional  (str) revision: {Any  (str) *: <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py"
    },
    "iosxe": {
      "c9500": {
        "doc": "Parser for show version",
        "groups": [],
        "schema": "{'version': {Optional  (str) xe_version: <class 'str'>, 'version_short': <class 'str'>, 'os': <class 'str'>, Optional  (str) code_name: <class 'str'>, 'platform': <class 'str'>, 'version': <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) build_label: <class 'str'>, 'image_id': <class 'str'>, 'rom': <class 'str'>, 'bootldr_version': <class 'str'>, 'hostname': <class 'str'>, 'uptime': <class 'str'>, 'uptime_this_cp': <class 'str'>, 'returned_to_rom_by': <class 'str'>, 'system_image': <class 'str'>, 'last_reload_reason': <class 'str'>, 'chassis': <class 'str'>, 'processor_type': <class 'str'>, 'main_mem': <class 'str'>, 'processor_board_id': <class 'str'>, Optional  (str) curr_config_register: <class 'str'>, 'compiled_date': <class 'str'>, 'compiled_by': <class 'str'>, 'mac_address': <class 'str'>, 'mb_assembly_num': <class 'str'>, 'mb_sn': <class 'str'>, 'model_rev_num': <class 'str'>, 'mb_rev_num': <class 'str'>, 'model_num': <class 'str'>, Optional  (str) system_sn: <class 'str'>, Optional  (str) mem_size: {Any  (str) *: <class 'str'>}, Optional  (str) license_level: <class 'str'>, Optional  (str) next_reload_license_level: <class 'str'>, 'smart_licensing_status': <class 'str'>, Optional  (str) number_of_intfs: {Any  (str) *: <class 'str'>}, Optional  (str) disks: {Any  (str) *: {'disk_size': <class 'str'>}}}}",
        "source": {
          "class": "genie.harness.base.Template"
        },
        "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py"
      },
      "devices": [
        "uut"
      ],
      "doc": "Parser for show version\n    parser class - implements detail parsing mechanisms for cli output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'version': {Optional  (str) xe_version: <class 'str'>, 'version_short': <class 'str'>, 'platform': <class 'str'>, 'version': <class 'str'>, Optional  (str) label: <class 'str'>, Optional  (str) build_label: <class 'str'>, 'image_id': <class 'str'>, 'rom': <class 'str'>, 'image_type': <class 'str'>, Optional  (str) installation_mode: <class 'str'>, Optional  (str) bootldr: <class 'str'>, 'hostname': <class 'str'>, 'uptime': <class 'str'>, Optional  (str) uptime_this_cp: <class 'str'>, Optional  (str) jawa_revision: <class 'str'>, Optional  (str) snowtrooper_revision: <class 'str'>, Optional  (str) running_default_software: <class 'bool'>, Optional  (str) processor_board_flash: <class 'str'>, Optional  (str) last_reload_type: <class 'str'>, Optional  (str) returned_to_rom_by: <class 'str'>, Optional  (str) returned_to_rom_at: <class 'str'>, Optional  (str) compiled_date: <class 'str'>, Optional  (str) location: <class 'str'>, Optional  (str) copyright_years: <class 'str'>, Optional  (str) sp_by: <class 'str'>, Optional  (str) compiled_by: <class 'str'>, Optional  (str) system_restarted_at: <class 'str'>, Optional  (str) system_image: <class 'str'>, Optional  (str) last_reload_reason: <class 'str'>, Optional  (str) license_type: <class 'str'>, Optional  (str) license_level: <class 'str'>, Optional  (str) next_reload_license_level: <class 'str'>, Optional  (str) air_license_level: <class 'str'>, Optional  (str) next_reload_air_license_level: <class 'str'>, Optional  (str) chassis: <class 'str'>, Optional  (str) processor_type: <class 'str'>, Optional  (str) chassis_sn: <class 'str'>, Optional  (str) rtr_type: <class 'str'>, Optional  (str) router_operating_mode: <class 'str'>, 'os': <class 'str'>, Optional  (str) curr_config_register: <class 'str'>, Optional  (str) license_udi: {Optional  (str) device_num: {Any  (str) *: {'pid': <class 'str'>, 'sn': <class 'str'>}}}, Optional  (str) next_config_register: <class 'str'>, Optional  (str) main_mem: <class 'str'>, Optional  (str) number_of_intfs: {Any  (str) *: <class 'str'>}, Optional  (str) mem_size: {Any  (str) *: <class 'str'>}, Optional  (str) disks: {Any  (str) *: {Optional  (str) disk_size: <class 'str'>, Optional  (str) type_of_disk: <class 'str'>}}, Optional  (str) switch_num: {Any  (str) *: {Optional  (str) uptime: <class 'str'>, Optional  (str) mac_address: <class 'str'>, Optional  (str) mb_assembly_num: <class 'str'>, Optional  (str) power_supply_part_nr: <class 'str'>, Optional  (str) mb_sn: <class 'str'>, Optional  (str) power_supply_sn: <class 'str'>, Optional  (str) model_rev_num: <class 'str'>, Optional  (str) mb_rev_num: <class 'str'>, Optional  (str) model_num: <class 'str'>, Optional  (str) db_assembly_num: <class 'str'>, Optional  (str) db_sn: <class 'str'>, Optional  (str) system_sn: <class 'str'>, Optional  (str) top_assembly_part_num: <class 'str'>, Optional  (str) top_assembly_rev_num: <class 'str'>, Optional  (str) system_fpga_version: <class 'str'>, Optional  (str) version_id: <class 'str'>, Optional  (str) clei_code_num: <class 'str'>, Optional  (str) db_rev_num: <class 'str'>, Optional  (str) hb_rev_num: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) sw_image: <class 'str'>, Optional  (str) ports: <class 'str'>, Optional  (str) sw_ver: <class 'str'>, Optional  (str) active: <class 'bool'>}}, Optional  (str) processor: {Optional  (str) cpu_type: <class 'str'>, Optional  (str) speed: <class 'str'>, Optional  (str) core: <class 'str'>, Optional  (str) l2_cache: <class 'str'>, Optional  (str) supervisor: <class 'str'>}, Optional  (str) license_package: {Any  (str) *: {'license_level': <class 'str'>, 'license_type': <class 'str'>, 'next_reload_license_level': <class 'str'>}}, Optional  (str) module: {Any  (str) *: {Any  (str) *: {Optional  (str) suite: <class 'str'>, Optional  (str) suite_current: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) suite_next_reboot: <class 'str'>}}}, Optional  (str) image: {'text_base': <class 'str'>, 'data_base': <class 'str'>}, Optional  (str) interfaces: {Optional  (str) virtual_ethernet: <class 'int'>, Optional  (str) fastethernet: <class 'int'>, 'gigabit_ethernet': <class 'int'>}, Optional  (str) revision: {Any  (str) *: <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show version",
      "exclude": [],
      "groups": [],
      "schema": "{'operating_system': <class 'str'>, 'software_version': <class 'str'>, 'uptime': <class 'str'>, Optional  (str) image: <class 'str'>, Optional  (str) device_family: <class 'str'>, Optional  (str) processor: <class 'str'>, Optional  (str) processor_memory_bytes: <class 'str'>, Optional  (str) chassis_detail: <class 'str'>, Optional  (str) config_register: <class 'str'>, Optional  (str) rp_config_register: <class 'str'>, Optional  (str) main_mem: <class 'str'>, Optional  (str) built_by: <class 'str'>, Optional  (str) built_on: <class 'str'>, Optional  (str) built_host: <class 'str'>}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py"
    },
    "junos": {
      "doc": "Parser for show version",
      "groups": [],
      "schema": "{'software-information': {'host-name': <class 'str'>, 'junos-version': <class 'str'>, 'product-model': <class 'str'>, 'product-name': <class 'str'>, 'package-information': ListOf  (dict) {'comment': <class 'str'>, 'name': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_platform.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for :\n        show version\n        parser class implements detail parsing mechanisms for cli, xml and yang output.\n    ",
      "exclude": [],
      "groups": [],
      "schema": "{'platform': {Optional  (str) name: <class 'str'>, Optional  (str) reason: <class 'str'>, Optional  (str) system_version: <class 'str'>, Optional  (str) os: <class 'str'>, 'hardware': {Optional  (str) bootflash: <class 'str'>, Optional  (str) slot0: <class 'str'>, Optional  (str) chassis: <class 'str'>, Optional  (str) rp: <class 'str'>, Optional  (str) cpu: Or (<class 'str'>, None), Optional  (str) device_name: <class 'str'>, Optional  (str) memory: <class 'str'>, Optional  (str) model: <class 'str'>, Optional  (str) processor_board_id: <class 'str'>, Optional  (str) slots: <class 'str'>}, 'kernel_uptime': {Optional  (str) days: <class 'int'>, Optional  (str) hours: <class 'int'>, Optional  (str) minutes: <class 'int'>, Optional  (str) seconds: <class 'int'>}, 'software': {Optional  (str) bios_version: <class 'str'>, Optional  (str) bios_compile_time: <class 'str'>, Optional  (str) kickstart_version: <class 'str'>, Optional  (str) kickstart_compile_time: <class 'str'>, Optional  (str) kickstart_image_file: <class 'str'>, Optional  (str) system_version: <class 'str'>, Optional  (str) system_compile_time: <class 'str'>, Optional  (str) system_image_file: <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py"
    }
  },
  "Verify_Vlan": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {Optional  (str) vlan_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) type: <class 'str'>, Optional  (str) said: <class 'int'>, Optional  (str) mtu: <class 'int'>, Optional  (str) parent: <class 'str'>, Optional  (str) ring_no: <class 'str'>, Optional  (str) bridge_no: <class 'str'>, Optional  (str) stp: <class 'str'>, Optional  (str) bridge_mode: <class 'str'>, Optional  (str) trans1: <class 'int'>, Optional  (str) trans2: <class 'int'>, Optional  (str) remote_span_vlan: <class 'bool'>, Optional  (str) private_vlan: {Optional  (str) primary: <class 'bool'>, Optional  (str) association: <class 'list'>, Optional  (str) type: <class 'str'>, Optional  (str) ports: <class 'list'>}, Optional  (str) token_ring: {Optional  (str) are_hops: <class 'int'>, Optional  (str) ste_hops: <class 'int'>, Optional  (str) backup_crf: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan",
      "exclude": [],
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {Optional  (str) vlan_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) type: <class 'str'>, Optional  (str) said: <class 'int'>, Optional  (str) mtu: <class 'int'>, Optional  (str) parent: <class 'str'>, Optional  (str) ring_no: <class 'str'>, Optional  (str) bridge_no: <class 'str'>, Optional  (str) stp: <class 'str'>, Optional  (str) bridge_mode: <class 'str'>, Optional  (str) trans1: <class 'int'>, Optional  (str) trans2: <class 'int'>, Optional  (str) remote_span_vlan: <class 'bool'>, Optional  (str) private_vlan: {Optional  (str) primary: <class 'bool'>, Optional  (str) association: <class 'list'>, Optional  (str) type: <class 'str'>, Optional  (str) ports: <class 'list'>}, Optional  (str) token_ring: {Optional  (str) are_hops: <class 'int'>, Optional  (str) ste_hops: <class 'int'>, Optional  (str) backup_crf: <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan",
      "exclude": [],
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {Optional  (str) vlan_id: <class 'str'>, Optional  (str) name: <class 'str'>, Optional  (str) mode: <class 'str'>, Optional  (str) type: <class 'str'>, Optional  (str) state: <class 'str'>, Optional  (str) shutdown: <class 'bool'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) remote_span_vlan: <class 'bool'>, Optional  (str) private_vlan: {Optional  (str) primary: <class 'bool'>, Optional  (str) association: <class 'list'>, Optional  (str) type: <class 'str'>, Optional  (str) ports: <class 'list'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "Verify_VlanAccessMap": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'access_map_id': {Any  (str) *: {'access_map_sequence': {Any  (str) *: {Optional  (str) access_map_match_protocol: <class 'str'>, Optional  (str) access_map_match_protocol_value: <class 'str'>, Optional  (str) access_map_action_value: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan access-map",
      "exclude": [],
      "groups": [],
      "schema": "{'access_map_id': {Any  (str) *: {'access_map_sequence': {Any  (str) *: {Optional  (str) access_map_match_protocol: <class 'str'>, Optional  (str) access_map_match_protocol_value: <class 'str'>, Optional  (str) access_map_action_value: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan access-map",
      "exclude": [],
      "groups": [],
      "schema": "{'access_map_id': {Any  (str) *: {'access_map_sequence': {Any  (str) *: {Optional  (str) access_map_match_protocol: <class 'str'>, Optional  (str) access_map_match_protocol_value: <class 'str'>, Optional  (str) access_map_action_value: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "Verify_VlanFilter": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'access_map_tag': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan filter",
      "exclude": [],
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'access_map_tag': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan filter",
      "exclude": [],
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'access_map_tag': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "Verify_VlanIdVnSegment": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan id 1-3967 vn_segment",
      "groups": [],
      "schema": "{'vlans': {Any  (str) *: {Optional  (str) vlan_id: <class 'str'>, Optional  (str) vn_segment_id: <class 'int'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "Verify_VlanInterface": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan interface",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) encapsulation: <class 'str'>, Optional  (str) outer_vlan: <class 'int'>, Optional  (str) second_vlan: <class 'str'>, Optional  (str) service: <class 'str'>, Optional  (str) mtu: <class 'int'>, Optional  (str) linep_state: <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py"
    }
  },
  "Verify_VlanInternalInfo": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan internal info",
      "exclude": [],
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'vlan_configuration': <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "Verify_VlanMtu": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'vlan_mtu': <class 'str'>, 'vlan_min_mtu': <class 'str'>, 'vlan_max_mtu': <class 'str'>, 'mtu_mismatch': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan mtu",
      "exclude": [],
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'vlan_mtu': <class 'str'>, 'vlan_min_mtu': <class 'str'>, 'vlan_max_mtu': <class 'str'>, 'mtu_mismatch': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py"
    }
  },
  "Verify_VlanRemoteSpan": {
    "ios": {
      "doc": null,
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'vlan_is_remote_span': <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vlan remote-span",
      "exclude": [],
      "groups": [],
      "schema": "{'vlan_id': {Any  (str) *: {'vlan_is_remote_span': <class 'bool'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py"
    }
  },
  "Verify_Vrf": {
    "ios": {
      "doc": "Parser for show vrf",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) protocols: <class 'list'>, Optional  (str) interfaces: <class 'list'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py"
    },
    "iosxe": {
      "doc": " Parser for:\n            show vrf\n            show vrf {vrf}\n    ",
      "groups": [],
      "schema": "{'vrf': {Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) protocols: <class 'list'>, Optional  (str) interfaces: <class 'list'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf",
      "exclude": [],
      "groups": [],
      "schema": "{'vrfs': {Any  (str) *: {'vrf_id': <class 'int'>, 'vrf_state': <class 'str'>, 'reason': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py"
    }
  },
  "Verify_VrfAllDetail": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf all detail",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) vpn_id: <class 'str'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) vrf_mode: <class 'str'>, Optional  (str) description: <class 'str'>, 'address_family': {Any  (str) *: {Optional  (str) route_target: {Any  (str) *: {'route_target': <class 'str'>, 'rt_type': <class 'str'>}}, Optional  (str) route_policy: {Optional  (str) import: <class 'str'>, Optional  (str) export: <class 'str'>}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_vrf.py"
    }
  },
  "Verify_VrfAllInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf all interface\n                show vrf <vrf> interface <interface>\n                show vrf <vrf> interface\n                show vrf all interface <interface>",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 10,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'vrf': <class 'str'>, 'vrf_id': <class 'int'>, 'site_of_origin': <class 'str'>}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py"
    }
  },
  "Verify_VrfDetail": {
    "ios": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf detail",
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) vrf_id: <class 'int'>, Optional  (str) description: <class 'str'>, Optional  (str) being_deleted: <class 'bool'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) vpn_id: <class 'str'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) interface: {Any  (str) *: {'vrf': <class 'str'>}}, Optional  (str) flags: <class 'str'>, Optional  (str) cli_format: <class 'str'>, Optional  (str) support_af: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {'table_id': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) vrf_label: {Optional  (str) distribution_protocol: <class 'str'>, Optional  (str) allocation_mode: <class 'str'>, Optional  (str) label: <class 'int'>}, Optional  (str) route_targets: {Any  (str) *: {'route_target': <class 'str'>, 'rt_type': <class 'str'>}}, Optional  (str) import_from_global: {'import_from_global_map': <class 'str'>, 'prefix_limit': <class 'int'>}, Optional  (str) export_to_global: {'export_to_global_map': <class 'str'>, 'prefix_limit': <class 'int'>}, Optional  (str) import_route_map: <class 'str'>, Optional  (str) export_route_map: <class 'str'>, Optional  (str) routing_table_limit: {Optional  (str) routing_table_limit_number: <class 'int'>, 'routing_table_limit_action': {Optional  (str) enable_alert_percent: {'alert_percent_value': <class 'int'>}, Optional  (str) enable_alert_limit_number: {'alert_limit_number': <class 'int'>}, Optional  (str) enable_simple_alert: {'simple_alert': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for\n        * 'show vrf detail'\n        * 'show vrf detail <vrf>'",
      "exclude": [],
      "groups": [],
      "schema": "{Any  (str) *: {Optional  (str) vrf_id: <class 'int'>, Optional  (str) description: <class 'str'>, Optional  (str) being_deleted: <class 'bool'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) vpn_id: <class 'str'>, Optional  (str) interfaces: <class 'list'>, Optional  (str) interface: {Any  (str) *: {'vrf': <class 'str'>}}, Optional  (str) flags: <class 'str'>, Optional  (str) cli_format: <class 'str'>, Optional  (str) support_af: <class 'str'>, Optional  (str) address_family: {Any  (str) *: {'table_id': <class 'str'>, Optional  (str) flags: <class 'str'>, Optional  (str) vrf_label: {Optional  (str) distribution_protocol: <class 'str'>, Optional  (str) allocation_mode: <class 'str'>, Optional  (str) label: <class 'int'>}, Optional  (str) route_targets: {Any  (str) *: {'route_target': <class 'str'>, 'rt_type': <class 'str'>}}, Optional  (str) import_from_global: {'import_from_global_map': <class 'str'>, 'prefix_limit': <class 'int'>}, Optional  (str) export_to_global: {'export_to_global_map': <class 'str'>, 'prefix_limit': <class 'int'>}, Optional  (str) import_route_map: <class 'str'>, Optional  (str) export_route_map: <class 'str'>, Optional  (str) routing_table_limit: {Optional  (str) routing_table_limit_number: <class 'int'>, 'routing_table_limit_action': {Optional  (str) enable_alert_percent: {'alert_percent_value': <class 'int'>}, Optional  (str) enable_alert_limit_number: {'alert_limit_number': <class 'int'>}, Optional  (str) enable_simple_alert: {'simple_alert': <class 'bool'>}}}}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf <vrf> detail",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{Any  (str) *: {'vrf_id': <class 'int'>, Optional  (str) route_distinguisher: <class 'str'>, Optional  (str) vpn_id: <class 'str'>, 'max_routes': <class 'int'>, 'mid_threshold': <class 'int'>, 'state': <class 'str'>, 'address_family': {Any  (str) *: {'table_id': <class 'str'>, 'fwd_id': <class 'str'>, 'state': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py"
    }
  },
  "Verify_VrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vrf Interface",
      "exclude": [],
      "groups": [],
      "iteration": {
        "attempt": 3,
        "interval": 10
      },
      "schema": "{'vrf_interface': {Any  (str) *: {'vrf_name': <class 'str'>, 'vrf_id': <class 'str'>, 'site_of_origin': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py"
    }
  },
  "Verify_VtpStatus": {
    "ios": {
      "doc": "Parser for show vtp status ",
      "groups": [],
      "schema": "{'vtp': {Optional  (str) version_capable: <class 'list'>, 'version': <class 'str'>, Optional  (str) domain_name: <class 'str'>, 'pruning_mode': <class 'bool'>, 'traps_generation': <class 'bool'>, Optional  (str) device_id: <class 'str'>, Optional  (str) conf_last_modified_by: <class 'str'>, Optional  (str) conf_last_modified_time: <class 'str'>, Optional  (str) updater_id: <class 'str'>, Optional  (str) updater_interface: <class 'str'>, Optional  (str) updater_reason: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) maximum_vlans: <class 'int'>, Optional  (str) existing_vlans: <class 'int'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) md5_digest: <class 'str'>, Optional  (str) feature: {'vlan': {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>, Optional  (str) maximum_vlans: <class 'int'>, 'existing_vlans': <class 'int'>, 'existing_extended_vlans': <class 'int'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) primary_id: <class 'str'>, Optional  (str) primary_description: <class 'str'>, Optional  (str) md5_digest: <class 'str'>}, 'mst': {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) primary_id: <class 'str'>, Optional  (str) primary_description: <class 'str'>, Optional  (str) md5_digest: <class 'str'>}, Optional  (str) unknown: {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vtp.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vtp status ",
      "exclude": [],
      "groups": [],
      "schema": "{'vtp': {Optional  (str) version_capable: <class 'list'>, 'version': <class 'str'>, Optional  (str) domain_name: <class 'str'>, 'pruning_mode': <class 'bool'>, 'traps_generation': <class 'bool'>, Optional  (str) device_id: <class 'str'>, Optional  (str) conf_last_modified_by: <class 'str'>, Optional  (str) conf_last_modified_time: <class 'str'>, Optional  (str) updater_id: <class 'str'>, Optional  (str) updater_interface: <class 'str'>, Optional  (str) updater_reason: <class 'str'>, Optional  (str) operating_mode: <class 'str'>, Optional  (str) enabled: <class 'bool'>, Optional  (str) maximum_vlans: <class 'int'>, Optional  (str) existing_vlans: <class 'int'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) md5_digest: <class 'str'>, Optional  (str) feature: {'vlan': {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>, Optional  (str) maximum_vlans: <class 'int'>, 'existing_vlans': <class 'int'>, 'existing_extended_vlans': <class 'int'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) primary_id: <class 'str'>, Optional  (str) primary_description: <class 'str'>, Optional  (str) md5_digest: <class 'str'>}, 'mst': {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>, Optional  (str) configuration_revision: <class 'int'>, Optional  (str) primary_id: <class 'str'>, Optional  (str) primary_description: <class 'str'>, Optional  (str) md5_digest: <class 'str'>}, Optional  (str) unknown: {'enabled': <class 'bool'>, 'operating_mode': <class 'str'>}}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vtp.py"
    }
  },
  "Verify_Vxlan": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Parser for show vxlan",
      "groups": [],
      "schema": "{'vlan': {Any  (str) *: {'vni': <class 'str'>}}}",
      "source": {
        "class": "genie.harness.base.Template"
      },
      "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py"
    }
  },
  "testcases": [
    "Verify_AccessLists",
    "Verify_AccessSession",
    "Verify_AdminDiagChassis",
    "Verify_Archive",
    "Verify_Arp",
    "Verify_BgpAll",
    "Verify_BgpAllClusterIds",
    "Verify_BgpAllDampeningFlapStatistics",
    "Verify_BgpAllDampeningFlapStatistics_xml",
    "Verify_BgpAllDetail",
    "Verify_BgpAllNeighbors",
    "Verify_BgpAllNexthopDatabase",
    "Verify_BgpAllNexthopDatabase_xml",
    "Verify_BgpAllSummary",
    "Verify_BgpInstanceAfGroupConfiguration",
    "Verify_BgpInstanceAllAll_vrf_type_all",
    "Verify_BgpInstanceAllAll_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceAllAll_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstanceNeighborsDetail_vrf_type_all",
    "Verify_BgpInstanceNeighborsDetail_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceNeighborsDetail_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_all",
    "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceNeighborsDetail_yang_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstanceProcessDetail_vrf_type_all",
    "Verify_BgpInstanceProcessDetail_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceProcessDetail_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstanceProcessDetail_yang_vrf_type_all",
    "Verify_BgpInstanceProcessDetail_yang_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceProcessDetail_yang_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstanceSessionGroupConfiguration",
    "Verify_BgpInstanceSummary_vrf_type_all",
    "Verify_BgpInstanceSummary_vrf_type_vrf_af_type_ipv4_unicast",
    "Verify_BgpInstanceSummary_vrf_type_vrf_af_type_ipv6_unicast",
    "Verify_BgpInstances",
    "Verify_BgpIpMvpn",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_1",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_2",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_3",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_4",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_5",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_6",
    "Verify_BgpIpMvpnRouteType_vrf_all_route_type_7",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_1",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_2",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_3",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_4",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_5",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_6",
    "Verify_BgpIpMvpnRouteType_vrf_default_route_type_7",
    "Verify_BgpIpMvpnSaadDetail",
    "Verify_BgpL2vpnEvpn",
    "Verify_BgpL2vpnEvpnAdvertised",
    "Verify_BgpL2vpnEvpnNeighbors",
    "Verify_BgpL2vpnEvpnRouteType_route_type_1",
    "Verify_BgpL2vpnEvpnRouteType_route_type_2",
    "Verify_BgpL2vpnEvpnRouteType_route_type_4",
    "Verify_BgpL2vpnEvpnSummary",
    "Verify_BgpLabels_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpLabels_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpLabels_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpLabels_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpLabels_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpLabels_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpLabels_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpLabels_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpLabels_xml_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpLabels_xml_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpLabels_xml_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpLabels_xml_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpLabels_xml_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpLabels_xml_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpLabels_xml_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpLabels_xml_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpOpenconfigYang_yang",
    "Verify_BgpPeerPolicy",
    "Verify_BgpPeerSession",
    "Verify_BgpPeerTemplate",
    "Verify_BgpPeerTemplateCmd",
    "Verify_BgpPeerTemplateCmd_xml",
    "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsDampening_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsDampening_xml_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_all_address_family_ipv6_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv4_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv4_unicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv6_multicast",
    "Verify_BgpPolicyStatisticsRedistribute_xml_vrf_default_address_family_ipv6_unicast",
    "Verify_BgpProcessVrfAll",
    "Verify_BgpProcessVrfAll_xml",
    "Verify_BgpProcessVrfAll_yang",
    "Verify_BgpVrfAllAll",
    "Verify_BgpVrfAllAllDampeningParameters",
    "Verify_BgpVrfAllAllDampeningParameters_xml",
    "Verify_BgpVrfAllAllNextHopDatabase",
    "Verify_BgpVrfAllAllSummary",
    "Verify_BgpVrfAllAllSummary_xml",
    "Verify_BgpVrfAllNeighbors_vrf_default",
    "Verify_BgpVrfAllNeighbors_yang_vrf_default",
    "Verify_BgpVrfDbVrfAll",
    "Verify_Boot",
    "Verify_Bootvar",
    "Verify_CheckpointSummary",
    "Verify_ConfigurationSystemNtpSet",
    "Verify_ControllersFiaDiagshellL2showLocation",
    "Verify_CryptoPkiCertificates",
    "Verify_Dir",
    "Verify_Dot1x",
    "Verify_Dot1xAllCount",
    "Verify_Dot1xAllDetail",
    "Verify_Dot1xAllStatistics",
    "Verify_Dot1xAllSummary",
    "Verify_EnvironmentAll",
    "Verify_ErrdisableRecovery",
    "Verify_EtherchannelSummary",
    "Verify_EthernetCfmMeps",
    "Verify_EthernetTags",
    "Verify_EthernetTags_yang",
    "Verify_EthernetTrunkDetail",
    "Verify_EvpnEviMac",
    "Verify_EvpnInternalLabelDetail",
    "Verify_FabricMulticastGlobals",
    "Verify_FabricMulticastIpL2Mroute_vni_all",
    "Verify_FabricMulticastIpSaAdRoute_vrf_all",
    "Verify_Feature",
    "Verify_FeatureSet",
    "Verify_ForwardingDistributionMulticastRoute",
    "Verify_HsrpAll",
    "Verify_HsrpDelay",
    "Verify_HsrpDetail",
    "Verify_HsrpSummary",
    "Verify_InstallActive",
    "Verify_InstallActiveSummary",
    "Verify_Interface",
    "Verify_InterfaceBrief",
    "Verify_InterfaceSwitchport",
    "Verify_InterfacesTerse",
    "Verify_Interfaces",
    "Verify_InterfacesAccounting",
    "Verify_InterfacesDetail",
    "Verify_InterfacesSwitchport",
    "Verify_InterfacesTrunk",
    "Verify_Inventory",
    "Verify_IpArp",
    "Verify_IpBgpAllDampeningParameters",
    "Verify_IpBgpTemplatePeerPolicy",
    "Verify_IpBgpTemplatePeerSession",
    "Verify_IpIgmpGroupsDetail",
    "Verify_IpIgmpGroups_vrf_all",
    "Verify_IpIgmpGroups_vrf_default",
    "Verify_IpIgmpInterface_vrf_all",
    "Verify_IpIgmpInterface_vrf_default",
    "Verify_IpIgmpLocalGroups_vrf_all",
    "Verify_IpIgmpLocalGroups_vrf_default",
    "Verify_IpIgmpSnooping",
    "Verify_IpInterface",
    "Verify_IpInterfaceBrief",
    "Verify_IpInterfaceBriefPipeVlan",
    "Verify_IpInterfaceBriefPipeVlan_yang",
    "Verify_IpInterfaceBriefVrfAll",
    "Verify_IpInterfaceBrief_yang",
    "Verify_IpInterfaceVrfAll",
    "Verify_IpMroute",
    "Verify_IpMrouteStatic",
    "Verify_IpMrouteVrfAll",
    "Verify_IpMsdpPeerVrf_vrf_all",
    "Verify_IpMsdpPeerVrf_vrf_default",
    "Verify_IpMsdpSaCacheDetailVrf_vrf_all",
    "Verify_IpMsdpSaCacheDetailVrf_vrf_default",
    "Verify_IpMsdpSummary_vrf_all",
    "Verify_IpMsdpSummary_vrf_default",
    "Verify_IpMulticast",
    "Verify_IpOspfDatabaseExternal",
    "Verify_IpOspfDatabaseExternalDetail_vrf_all",
    "Verify_IpOspfDatabaseExternalDetail_vrf_default",
    "Verify_IpOspfDatabaseNetwork",
    "Verify_IpOspfDatabaseNetworkDetail_vrf_all",
    "Verify_IpOspfDatabaseNetworkDetail_vrf_default",
    "Verify_IpOspfDatabaseOpaqueArea",
    "Verify_IpOspfDatabaseOpaqueAreaDetail_vrf_all",
    "Verify_IpOspfDatabaseOpaqueAreaDetail_vrf_default",
    "Verify_IpOspfDatabaseRouter",
    "Verify_IpOspfDatabaseRouterDetail_vrf_all",
    "Verify_IpOspfDatabaseRouterDetail_vrf_default",
    "Verify_IpOspfDatabaseSummary",
    "Verify_IpOspfDatabaseSummaryDetail_vrf_all",
    "Verify_IpOspfDatabaseSummaryDetail_vrf_default",
    "Verify_IpOspfInterface_vrf_all",
    "Verify_IpOspfInterface_vrf_default",
    "Verify_IpOspfMplsLdpInterface_vrf_all",
    "Verify_IpOspfMplsLdpInterface_vrf_default",
    "Verify_IpOspfMplsTrafficEngLink",
    "Verify_IpOspfNeighborDetail_vrf_all",
    "Verify_IpOspfNeighborDetail_vrf_default",
    "Verify_IpOspfShamLinks_vrf_all",
    "Verify_IpOspfShamLinks_vrf_default",
    "Verify_IpOspfVirtualLinks_vrf_all",
    "Verify_IpOspfVirtualLinks_vrf_default",
    "Verify_IpPimBsrRouter",
    "Verify_IpPimDf",
    "Verify_IpPimGroupRange",
    "Verify_IpPimInterface",
    "Verify_IpPimInterfaceDetail",
    "Verify_IpPimInterfaceDf",
    "Verify_IpPimNeighbor_vrf_all",
    "Verify_IpPimNeighbor_vrf_default",
    "Verify_IpPimPolicyStaticticsRegisterPolicy",
    "Verify_IpPimRoute",
    "Verify_IpPimRpMapping",
    "Verify_IpPimRp_vrf_all",
    "Verify_IpPimRp_vrf_default",
    "Verify_IpPimVrfDetail",
    "Verify_IpPrefixList",
    "Verify_IpPrefixListDetail",
    "Verify_IpProtocols",
    "Verify_IpRoute_protocol_bgp",
    "Verify_IpRoute_protocol_ospf",
    "Verify_IpRoute_vrf_all",
    "Verify_IpRoute_vrf_default",
    "Verify_IpStaticRouteMulticast",
    "Verify_IpStaticRoute_vrf_all",
    "Verify_IpStaticRoute_vrf_default",
    "Verify_Ipv4VrfAllInterface",
    "Verify_Ipv6IcmpNeighborDetail",
    "Verify_Ipv6Interface",
    "Verify_Ipv6InterfaceVrfAll",
    "Verify_Ipv6MldGroupsDetail",
    "Verify_Ipv6MldGroups_vrf_all",
    "Verify_Ipv6MldGroups_vrf_default",
    "Verify_Ipv6MldInterface_vrf_all",
    "Verify_Ipv6MldInterface_vrf_default",
    "Verify_Ipv6MldLocalGroups_vrf_all",
    "Verify_Ipv6MldLocalGroups_vrf_default",
    "Verify_Ipv6Mroute",
    "Verify_Ipv6MrouteVrfAll",
    "Verify_Ipv6NdInterface",
    "Verify_Ipv6NeighborDetail",
    "Verify_Ipv6PimBsrCandidateRp",
    "Verify_Ipv6PimBsrElection",
    "Verify_Ipv6PimDf",
    "Verify_Ipv6PimGroupRange",
    "Verify_Ipv6PimInterface",
    "Verify_Ipv6PimNeighborDetail",
    "Verify_Ipv6PimNeighbor_vrf_all",
    "Verify_Ipv6PimNeighbor_vrf_default",
    "Verify_Ipv6PimRoute",
    "Verify_Ipv6PimRp_vrf_all",
    "Verify_Ipv6PimRp_vrf_default",
    "Verify_Ipv6PimVrfAllDetail",
    "Verify_Ipv6PrefixList",
    "Verify_Ipv6PrefixListDetail",
    "Verify_Ipv6RouteUpdated",
    "Verify_Ipv6Route_protocol_bgp",
    "Verify_Ipv6Route_protocol_ospf",
    "Verify_Ipv6Route_vrf_all",
    "Verify_Ipv6Route_vrf_default",
    "Verify_Ipv6Routers",
    "Verify_Ipv6StaticDetail",
    "Verify_Ipv6StaticRouteMulticast",
    "Verify_Ipv6StaticRoute_vrf_all",
    "Verify_Ipv6StaticRoute_vrf_default",
    "Verify_Ipv6VrfAllInterface",
    "Verify_IssuRollbackTimer",
    "Verify_IssuStateDetail",
    "Verify_L2routeEvpnEternetSegmentAll",
    "Verify_L2routeEvpnMac",
    "Verify_L2routeEvpnMacIpAll",
    "Verify_L2routeFlAll",
    "Verify_L2routeMacAllDetail",
    "Verify_L2routeMacIpAllDetail",
    "Verify_L2routeSummary",
    "Verify_L2routeTopology",
    "Verify_L2routeTopologyDetail",
    "Verify_L2vpnMacLearning",
    "Verify_LacpCounters",
    "Verify_LacpInternal",
    "Verify_LacpNeighbor",
    "Verify_LacpSysId",
    "Verify_LispDynamicEidDetail_instance_id_*",
    "Verify_LispPlatform",
    "Verify_LispServiceDatabase_service_ethernet_instance_id_*",
    "Verify_LispServiceDatabase_service_ipv4_instance_id_*",
    "Verify_LispServiceDatabase_service_ipv6_instance_id_*",
    "Verify_LispServiceMapCache_service_ethernet_instance_id_*",
    "Verify_LispServiceMapCache_service_ipv4_instance_id_*",
    "Verify_LispServiceMapCache_service_ipv6_instance_id_*",
    "Verify_LispServiceRlocMembers_service_ethernet_instance_id_*",
    "Verify_LispServiceRlocMembers_service_ipv4_instance_id_*",
    "Verify_LispServiceRlocMembers_service_ipv6_instance_id_*",
    "Verify_LispServiceServerDetailInternal_service_ethernet_instance_id_*",
    "Verify_LispServiceServerDetailInternal_service_ipv4_instance_id_*",
    "Verify_LispServiceServerDetailInternal_service_ipv6_instance_id_*",
    "Verify_LispServiceServerSummary_service_ethernet_instance_id_*",
    "Verify_LispServiceServerSummary_service_ipv4_instance_id_*",
    "Verify_LispServiceServerSummary_service_ipv6_instance_id_*",
    "Verify_LispServiceSmr_service_ethernet_instance_id_*",
    "Verify_LispServiceSmr_service_ipv4_instance_id_*",
    "Verify_LispServiceSmr_service_ipv6_instance_id_*",
    "Verify_LispServiceStatistics_service_ethernet_instance_id_*",
    "Verify_LispServiceStatistics_service_ipv4_instance_id_*",
    "Verify_LispServiceStatistics_service_ipv6_instance_id_*",
    "Verify_LispServiceSummary_service_ethernet",
    "Verify_LispServiceSummary_service_ipv4",
    "Verify_LispServiceSummary_service_ipv6",
    "Verify_LispService_service_ethernet",
    "Verify_LispService_service_ipv4",
    "Verify_LispService_service_ipv6",
    "Verify_LispSession",
    "Verify_Lldp",
    "Verify_LldpEntry",
    "Verify_LldpInterface",
    "Verify_LldpNeighborsDetail",
    "Verify_LldpTraffic",
    "Verify_MacAddressTable",
    "Verify_MacAddressTableAgingTime",
    "Verify_MacAddressTableLearning",
    "Verify_MemoryStatistics",
    "Verify_Module",
    "Verify_MribVrfRoute_vrf_all",
    "Verify_MribVrfRoute_vrf_default",
    "Verify_NtpAssociations",
    "Verify_NtpPeerStatus",
    "Verify_NtpPeers",
    "Verify_NtpStatus",
    "Verify_NveEthernetSegment",
    "Verify_NveInterface",
    "Verify_NveInterfaceDetail",
    "Verify_NveMultisiteDciLinks",
    "Verify_NveMultisiteFabricLinks",
    "Verify_NvePeers",
    "Verify_NveVni",
    "Verify_NveVniIngressReplication",
    "Verify_NveVniSummary",
    "Verify_OspfMplsTrafficEngLink",
    "Verify_OspfVrfAllInclusive",
    "Verify_OspfVrfAllInclusiveDatabaseExternal",
    "Verify_OspfVrfAllInclusiveDatabaseNetwork",
    "Verify_OspfVrfAllInclusiveDatabaseOpaqueArea",
    "Verify_OspfVrfAllInclusiveDatabaseRouter",
    "Verify_OspfVrfAllInclusiveDatabaseSummary",
    "Verify_OspfVrfAllInclusiveInterface",
    "Verify_OspfVrfAllInclusiveNeighborDetail",
    "Verify_OspfVrfAllInclusiveShamLinks",
    "Verify_OspfVrfAllInclusiveVirtualLinks",
    "Verify_PagpCounters",
    "Verify_PagpInternal",
    "Verify_PagpNeighbor",
    "Verify_PimVrfInterfaceDetail_vrf_default_af_ipv4",
    "Verify_PimVrfInterfaceDetail_vrf_default_af_ipv6",
    "Verify_PimVrfMstatic_vrf_default_af_ipv4",
    "Verify_PimVrfMstatic_vrf_default_af_ipv6",
    "Verify_PimVrfRpfSummary_vrf_default_af_ipv4",
    "Verify_PimVrfRpfSummary_vrf_default_af_ipv6",
    "Verify_PlacementProgramAll",
    "Verify_Platform",
    "Verify_PlatformSoftwareSlotActiveMonitorMem",
    "Verify_PlatformSoftwareStatusControl",
    "Verify_PlatformVm",
    "Verify_Processes",
    "Verify_ProtocolsAfiAllAll",
    "Verify_Redundancy",
    "Verify_RedundancyStatus",
    "Verify_RedundancySummary",
    "Verify_RouteIpv4",
    "Verify_RouteIpv6",
    "Verify_RouteMap",
    "Verify_RouteMapAll",
    "Verify_RoutingIpv6VrfAll",
    "Verify_RoutingVrfAll",
    "Verify_RplRoutePolicy",
    "Verify_RunningConfigBgp",
    "Verify_RunningConfigMsdp",
    "Verify_RunningConfigNvOverlay",
    "Verify_RunningConfigPim",
    "Verify_RunningConfigTrm",
    "Verify_RunningConfigVrf",
    "Verify_SdrDetail",
    "Verify_SpanningTree",
    "Verify_SpanningTreeDetail",
    "Verify_SpanningTreeMstConfiguration",
    "Verify_SpanningTreeMstDetail",
    "Verify_SpanningTreeSummary",
    "Verify_StackPower",
    "Verify_StandbyAll",
    "Verify_StandbyAll_yang",
    "Verify_StandbyDelay",
    "Verify_StandbyInternal",
    "Verify_StaticTopologyDetail_vrf_all",
    "Verify_StaticTopologyDetail_vrf_all_af_ipv4",
    "Verify_StaticTopologyDetail_vrf_all_af_ipv6",
    "Verify_StaticTopologyDetail_vrf_default",
    "Verify_StaticTopologyDetail_vrf_default_af_ipv4",
    "Verify_StaticTopologyDetail_vrf_default_af_ipv6",
    "Verify_Switch",
    "Verify_SwitchDetail",
    "Verify_SystemInternalL2fwderMac",
    "Verify_SystemRedundancyStatus",
    "Verify_VdcCurrent",
    "Verify_VdcDetail",
    "Verify_VdcMembershipStatus",
    "Verify_Version",
    "Verify_Vlan",
    "Verify_VlanAccessMap",
    "Verify_VlanFilter",
    "Verify_VlanIdVnSegment",
    "Verify_VlanInterface",
    "Verify_VlanInternalInfo",
    "Verify_VlanMtu",
    "Verify_VlanRemoteSpan",
    "Verify_Vrf",
    "Verify_VrfAllDetail",
    "Verify_VrfAllInterface",
    "Verify_VrfDetail",
    "Verify_VrfInterface",
    "Verify_VtpStatus",
    "Verify_Vxlan"
  ],
  "tokens": [
    "apic",
    "asa",
    "asr1k",
    "asr901",
    "c3850",
    "c7600",
    "c9200",
    "c9300",
    "c9400",
    "c9500",
    "cat4k",
    "cat6k",
    "gaia",
    "generic",
    "ios",
    "iosxe",
    "iosxr",
    "junos",
    "nxos"
  ]
}