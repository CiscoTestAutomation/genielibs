{
  "TriggerAddRemoteMsdpSaFilterIn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply MSDP peer(s) sa-filter in, and remove added MSDP peer(s) sa-filter in.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) which does not have sa-filter in.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp sa-filter in with Msdp Conf object\n        4. Verify the msdp sa-filter in from step 3 has configured\n        5. Remove the msdp sa-filter in configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoteMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoteMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveAccessEtherchannelPagp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Etherchannel in PAGP mode, and remove the\n    added Etherchannel in PAGP mode.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object to select trunk interfaces.\n           Learn LAG ops object to find port-channle interfaces which does not have\n           the learned interfaces as memebers.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of Etherchannel in PAGP mode with interface Conf object\n        4. Verify the interfaces are in the por-channle interfaces from step 3 has configured\n        5. Remove the Etherchannel configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn LAG Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveAccessEtherchannelPagp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 200
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveAccessEtherchannelPagp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/addremove.py"
    }
  },
  "TriggerAddRemoveAdvertiseEvpnMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add advertise evpn multicast then restore the\n                               configuration by re-applying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n\n       Steps:\n           1. Learn Vxlan Conf object configured on device. SKIP the trigger if there\n              is no vrf configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Add advertise evpn multicast that using Genie Vxlan Conf.\n           4. Verify the newly advertise evpn multicast is reflected in\n              device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn Vxaln Conf object again and verify it is the same as step 1.\n    ",
      "groups": [
        "add-remove",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.trm.addremove.TriggerAddRemoveAdvertiseEvpnMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/trm/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpAfL2vpnEvpnRewriteEvpnRtAsn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"rewrite-evpn-rt-asn\" to the dynamically learned BGP vrf(s)\n                        which does not have \"rewrite-evpn-rt-asn\" enabled, and remove the\n                        added \"rewrite-evpn-rt-asn\" configurations.\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iterations when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iterations when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `str`\n                    neighbor: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn BGP Ops object and store the BGP vrf(s) if it does\n               not have \"rewrite-evpn-rt-asn\" enabled,\n               otherwise, SKIP the trigger.\n            2. Save the current device configurations through \"method\" which user uses\n            3. Add the configuration of the \"rewrite-evpn-rt-asn\" to learned\n               BGP vrf(s) from step 1 with BGP Conf object\n            4. Verify the BGP vrf(s) from step 3 has \"rewrite-evpn-rt-asn\" configured\n            5. Remove the \"rewrite-evpn-rt-asn\" configurations from the learned\n                BGP vrf(s) from step 1\n            6. Recover the device configurations to the one in step 2\n            7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "add-remove"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpAfL2vpnEvpnRewriteEvpnRtAsn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpAggregateAddressIpv4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add aggregate-address configuration for ipv4 under a BGP and then restore the\n          configuration by reapplying the whole running configuration\n\n          trigger_datafile:\n              Mandatory Arguments:\n                  timeout:\n                      max_time (`int`): Maximum wait time for the trigger in seconds.\n                                        Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                      method (`str`): Method to recover the device configuration.\n                                      Supported methods:\n                                          'checkpoint': Rollback the configuration\n                                                        using checkpoint (nxos),\n                                                        archive file (iosxe),\n                                                        load the saved running-config\n                                                        file on disk (iosxr)\n              Optional Arguments:\n                  tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                       restored to the reference rate in seconds.\n                                       Default: 60\n                  tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                     is resumed in seconds. Default: 10\n                  timeout_recovery:\n                      Buffer recovery timeout make sure devices are recovered at the\n                      end of the trigger execution. Used when previous timeouts have\n                      been exhausted.\n                      max_time (`int`): Maximum wait time for the last step of the\n                                        trigger in seconds. Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                  static:\n                      The keys below are dynamically learnt by default.\n                      However, they can also be set to a custom value when provided in the trigger datafile.\n\n                      instance: `str`\n                      vrf: `str`\n                      neighbor: `str`\n                      bgp_id: `int`\n\n                      (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                            OR\n                            interface: 'Ethernet1/1/1' (Specific value)\n          Steps:\n              1. Learn BGP Ops configured on device. SKIP the trigger if there\n                 is no BGP configured on the device.\n              2. Save the current device configurations using \"method\" specified.\n              3. Add aggregate-address configuration for ipv4 under BGP pid learned in\n                 step 1 using Genie BGP Conf.\n              4. Verify the newly aggregate-address under BGP is reflected in device\n                 configuration.\n              5. Restore the device configuration to the original configuration saved\n                 in step 2.\n              6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n          ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpAggregateAddressIpv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpAggregateAddressIpv6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add aggregate-address configuration for ipv6 under a BGP and then restore the\n               configuration by reapplying the whole running configuration\n\n               trigger_datafile:\n                   Mandatory Arguments:\n                       timeout:\n                           max_time (`int`): Maximum wait time for the trigger in seconds.\n                                             Default: 180\n                           interval (`int`): Wait time between iteration when looping is\n                                             needed in seconds. Default: 15\n                           method (`str`): Method to recover the device configuration.\n                                           Supported methods:\n                                               'checkpoint': Rollback the configuration\n                                                             using checkpoint (nxos),\n                                                             archive file (iosxe),\n                                                             load the saved running-config\n                                                             file on disk (iosxr)\n                   Optional Arguments:\n                       tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                            restored to the reference rate in seconds.\n                                            Default: 60\n                       tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                          is resumed in seconds. Default: 10\n                       timeout_recovery:\n                           Buffer recovery timeout make sure devices are recovered at the\n                           end of the trigger execution. Used when previous timeouts have\n                           been exhausted.\n                           max_time (`int`): Maximum wait time for the last step of the\n                                             trigger in seconds. Default: 180\n                           interval (`int`): Wait time between iteration when looping is\n                                             needed in seconds. Default: 15\n                       static:\n                           The keys below are dynamically learnt by default.\n                           However, they can also be set to a custom value when provided in the trigger datafile.\n\n                           instance: `str`\n                           vrf: `str`\n                           neighbor: `str`\n                           bgp_id: `int`\n\n                           (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                 OR\n                                 interface: 'Ethernet1/1/1' (Specific value)\n               Steps:\n                   1. Learn BGP Ops configured on device. SKIP the trigger if there\n                      is no BGP configured on the device.\n                   2. Save the current device configurations using \"method\" specified.\n                   3. Add aggregate-address configuration for ipv6 under BGP pid learned in\n                      step 1 using Genie BGP Conf.\n                   4. Verify the newly aggregate-address under BGP is reflected in\n                      device configuration.\n                   5. Restore the device configuration to the original configuration saved\n                      in step 2.\n                   6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n               ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpAggregateAddressIpv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add keepalive interval and holdtime under BGP and then restore the\n                   configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                  static:\n                      The keys below are dynamically learnt by default.\n                      However, they can also be set to a custom value when provided in the trigger datafile.\n\n                      instance: `str`\n                      vrf: `str`\n                      neighbor: `str`\n                      bgp_id: `int`\n\n                      (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                            OR\n                            interface: 'Ethernet1/1/1' (Specific value)\n\n           Steps:\n               1. Learn BGP Ops configured on device. SKIP the trigger if there\n                  is no BGP configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add keepalive interval and holdtime under BGP pid learned in\n                  step 1 using Genie BGP Conf.\n               4. Verify the newly keepalive interval and holdtime under BGP is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n           ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpMaximumPathsEbgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add maximum ebgp paths under a BGP and then restore the\n       configuration by reapplying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n               static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vrf: `str`\n                    bgp_id: `int`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n       Steps:\n           1. Learn BGP Ops configured on device. SKIP the trigger if there\n              is no BGP configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Add maximum ebgp paths configuration under BGP pid learned in\n              step 1 using Genie BGP Conf.\n           4. Verify the newly maximum ebgp paths under BGP is\n              reflected in device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n       ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpMaximumPathsEbgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborAsOverride": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"as-override\" to the dynamically learned BGP neighbor(s)\n    which does not have \"as-override\" enabled, and remove the\n    added \"as-override\" configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s) if it does \n           not have \"as-override\" enabled,\n           otherwise, SKIP the trigger.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the \"as-override\" to learned\n           BGP neighbor(s) from step 1 with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 has \"as-override\" configured\n        5. Remove the \"as-override\" configurations from the learned\n           BGP neighbor(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborAsOverride",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborBfd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add bfd configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add bfd configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added bfd config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborBfd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborCapabilitySuppress4ByteAs": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add capability suppress 4-byte-as under a BGP neighbor and then restore the\n                           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                       instance: `str`\n                       vrf: `str`\n                       neighbor: `str`\n                       bgp_id: `int`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                             OR\n                             interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn BGP Ops configured on device. SKIP the trigger if there\n                  is no BGP configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add capability suppress 4-byte-as under a BGP neighbor of BGP pid learned in\n                  step 1 using Genie BGP Conf.\n               4. Verify the newly capability suppress 4-byte-as under BGP neighbor is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n           ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborCapabilitySuppress4ByteAs",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborDefaultOriginate": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add default originate configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add default originate configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added default originate config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborDefaultOriginate",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborDescription": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add description configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add description configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added description config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborDescription",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborDisableConnectedCheck": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add connected-check configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add connected-check configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added connected-check config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborDisableConnectedCheck",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborMaximumPrefix": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add maximum-prefix configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add maximum-prefix configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added maximum-prefix config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborMaximumPrefix",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborNextHopSelf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add next-hop self configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add next-hop self configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added next-hop self config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborNextHopSelf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborPassword": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add password configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add password configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added password config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborPassword",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborRemovePrivateAs": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add remove-private-as configuration under a BGP neighbor and then restore the\n          configuration by reapplying the whole running configuration\n\n          trigger_datafile:\n              Mandatory Arguments:\n                  timeout:\n                      max_time (`int`): Maximum wait time for the trigger in seconds.\n                                        Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                      method (`str`): Method to recover the device configuration.\n                                      Supported methods:\n                                          'checkpoint': Rollback the configuration\n                                                        using checkpoint (nxos),\n                                                        archive file (iosxe),\n                                                        load the saved running-config\n                                                        file on disk (iosxr)\n              Optional Arguments:\n                  tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                       restored to the reference rate in seconds.\n                                       Default: 60\n                  tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                     is resumed in seconds. Default: 10\n                  timeout_recovery:\n                      Buffer recovery timeout make sure devices are recovered at the\n                      end of the trigger execution. Used when previous timeouts have\n                      been exhausted.\n                      max_time (`int`): Maximum wait time for the last step of the\n                                        trigger in seconds. Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                  static:\n                      The keys below are dynamically learnt by default.\n                      However, they can also be set to a custom value when provided in the trigger datafile.\n\n                      instance: `str`\n                      vrf: `str`\n                      neighbor: `str`\n                      bgp_id: `int`\n\n                      (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                            OR\n                            interface: 'Ethernet1/1/1' (Specific value)\n          Steps:\n              1. Learn BGP Ops configured on device. SKIP the trigger if there\n                 is no BGP configured on the device.\n              2. Save the current device configurations using \"method\" specified.\n              3. Add remove-private-as configuration under a BGP neighbor of BGP pid learned in\n                 step 1 using Genie BGP Conf.\n              4. Verify the newly remove-private-as under BGP is reflected in device configuration.\n              5. Restore the device configuration to the original configuration saved\n                 in step 2.\n              6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n          ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRemovePrivateAs",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborRouteReflectorClient": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"route-reflector-client\" to the dynamically learned BGP neighbor(s)\n    which does not have \"route-reflector-client\" enabled, and remove the\n    added \"route-reflector-client\" configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s) if it does \n           not have \"route-reflector-client\" enabled,\n           otherwise, SKIP the trigger.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the \"route-reflector-client\" to learned\n           BGP neighbor(s) from step 1 with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 has \"route-reflector-client\" configured\n        5. Remove the \"route-reflector-client\" configurations from the learned\n           BGP neighbor(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRouteReflectorClient",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborRoutemap": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add route-map configuration under a BGP neighbor and then restore the\n                            configuration by reapplying the whole running configuration\n\n        trigger_datafile:\n            Mandatory Arguments:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger in seconds.\n                                      Default: 180\n                    interval (`int`): Wait time between iteration when looping is\n                                      needed in seconds. Default: 15\n                    method (`str`): Method to recover the device configuration.\n                                    Supported methods:\n                                        'checkpoint': Rollback the configuration\n                                                      using checkpoint (nxos),\n                                                      archive file (iosxe),\n                                                      load the saved running-config\n                                                      file on disk (iosxr)\n            Optional Arguments:\n                tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                     restored to the reference rate in seconds.\n                                     Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                   is resumed in seconds. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the\n                    end of the trigger execution. Used when previous timeouts have\n                    been exhausted.\n                    max_time (`int`): Maximum wait time for the last step of the\n                                      trigger in seconds. Default: 180\n                    interval (`int`): Wait time between iteration when looping is\n                                      needed in seconds. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `str`\n                    neighbor: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        Steps:\n            1. Learn BGP Ops configured on device. SKIP the trigger if there\n               is no BGP configured on the device.\n            2. Save the current device configurations using \"method\" specified.\n            3. Add route-map in and route-map out configuration under a BGP neighbor of BGP pid learned in\n               step 1 using Genie BGP Conf.\n            4. Verify the newly route-maps under BGP neighbor is reflected in\n               device configuration.\n            5. Restore the device configuration to the original configuration saved\n               in step 2.\n            6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n        ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemap",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborRoutemapPrefixlist": {
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapPrefixlist",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapPrefixlist",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": "Apply the inbound dynamically learned \"prefix-list\" route-map\n    to the dynamically learned BGP neighbor(s), and remove the\n    added route-map configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                neighbor: `str`\n                policy_definition: `str`\n                statements: `str`\n                bgp_id: `int`\n                bgp_table_version: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s) if has any,\n           otherwise, SKIP the trigger. Learn RoutePolicy Ops object\n           to store the route-map name with prefix-list configured if has any,\n           otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the inbound route-map (step 1) to learned\n           BGP neighbor(s) from step 1 with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 has inbound route-map (step 1) configured\n        5. Remove the route-map (step 1) configurations from the learned\n           BGP neighbor(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapPrefixlist",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborRoutemapWeight": {
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapWeight",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapWeight",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": "Apply the inbound dynamically learned \"weight\" route-map\n    to the dynamically learned BGP neighbor(s), and remove the\n    added route-map configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                neighbor: `str`\n                policy_definition: `str`\n                statements: `str`\n                set_weight: `int`\n                bgp_id: `int`\n                bgp_table_version: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s) if has any,\n           otherwise, SKIP the trigger. Learn RoutePolicy Ops object\n           to store the route-map name with weight configured if has any,\n           otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the inbound route-map (step 1) to learned\n           BGP neighbor(s) from step 1 with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 has inbound route-map (step 1) configured\n        5. Remove the route-map (step 1) configurations from the learned BGP\n           neighbor(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborRoutemapWeight",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborSendCommunity": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add send-community under a BGP neighbor and then restore the\n                       configuration by reapplying the whole running configuration\n\n               trigger_datafile:\n                   Mandatory Arguments:\n                       timeout:\n                           max_time (`int`): Maximum wait time for the trigger in seconds.\n                                             Default: 180\n                           interval (`int`): Wait time between iteration when looping is\n                                             needed in seconds. Default: 15\n                           method (`str`): Method to recover the device configuration.\n                                           Supported methods:\n                                               'checkpoint': Rollback the configuration\n                                                             using checkpoint (nxos),\n                                                             archive file (iosxe),\n                                                             load the saved running-config\n                                                             file on disk (iosxr)\n                   Optional Arguments:\n                       tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                            restored to the reference rate in seconds.\n                                            Default: 60\n                       tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                          is resumed in seconds. Default: 10\n                       timeout_recovery:\n                           Buffer recovery timeout make sure devices are recovered at the\n                           end of the trigger execution. Used when previous timeouts have\n                           been exhausted.\n                           max_time (`int`): Maximum wait time for the last step of the\n                                             trigger in seconds. Default: 180\n                           interval (`int`): Wait time between iteration when looping is\n                                             needed in seconds. Default: 15\n                       static:\n                           The keys below are dynamically learnt by default.\n                           However, they can also be set to a custom value when provided in the trigger datafile.\n\n                           instance: `str`\n                           vrf: `str`\n                           neighbor: `str`\n                           bgp_id: `int`\n\n                           (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                 OR\n                                 interface: 'Ethernet1/1/1' (Specific value)\n               Steps:\n                   1. Learn BGP Ops configured on device. SKIP the trigger if there\n                      is no BGP configured on the device.\n                   2. Save the current device configurations using \"method\" specified.\n                   3. Add send-community under a BGP neighbor of BGP pid learned in\n                      step 1 using Genie BGP Conf.\n                   4. Verify the newly send-community under BGP neighbor is reflected in\n                      device configuration.\n                   5. Restore the device configuration to the original configuration saved\n                      in step 2.\n                   6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n               ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborSendCommunity",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborSendCommunityExtended": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add send-community extended under a BGP neighbor and then restore the\n                         configuration by reapplying the whole running configuration\n\n                 trigger_datafile:\n                     Mandatory Arguments:\n                         timeout:\n                             max_time (`int`): Maximum wait time for the trigger in seconds.\n                                               Default: 180\n                             interval (`int`): Wait time between iteration when looping is\n                                               needed in seconds. Default: 15\n                             method (`str`): Method to recover the device configuration.\n                                             Supported methods:\n                                                 'checkpoint': Rollback the configuration\n                                                               using checkpoint (nxos),\n                                                               archive file (iosxe),\n                                                               load the saved running-config\n                                                               file on disk (iosxr)\n                     Optional Arguments:\n                         tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                              restored to the reference rate in seconds.\n                                              Default: 60\n                         tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                            is resumed in seconds. Default: 10\n                         timeout_recovery:\n                             Buffer recovery timeout make sure devices are recovered at the\n                             end of the trigger execution. Used when previous timeouts have\n                             been exhausted.\n                             max_time (`int`): Maximum wait time for the last step of the\n                                               trigger in seconds. Default: 180\n                             interval (`int`): Wait time between iteration when looping is\n                                               needed in seconds. Default: 15\n\n                         static:\n                             The keys below are dynamically learnt by default.\n                             However, they can also be set to a custom value when provided in the trigger datafile.\n\n                             instance: `str`\n                             vrf: `str`\n                             neighbor: `str`\n                             bgp_id: `int`\n\n                             (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                   OR\n                                   interface: 'Ethernet1/1/1' (Specific value)\n\n                 Steps:\n                     1. Learn BGP Ops configured on device. SKIP the trigger if there\n                        is no BGP configured on the device.\n                     2. Save the current device configurations using \"method\" specified.\n                     3. Add send-community extended under a BGP neighbor of BGP pid learned in\n                        step 1 using Genie BGP Conf.\n                     4. Verify the newly send-community extended under BGP neighbor is reflected in\n                        device configuration.\n                     5. Restore the device configuration to the original configuration saved\n                        in step 2.\n                     6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n                 ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborSendCommunityExtended",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborSoftReconfiguration": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add soft-reconfiguration inbound under BGP neighbor and then restore the\n                             configuration by reapplying the whole running configuration\n\n                     trigger_datafile:\n                         Mandatory Arguments:\n                             timeout:\n                                 max_time (`int`): Maximum wait time for the trigger in seconds.\n                                                   Default: 180\n                                 interval (`int`): Wait time between iteration when looping is\n                                                   needed in seconds. Default: 15\n                                 method (`str`): Method to recover the device configuration.\n                                                 Supported methods:\n                                                     'checkpoint': Rollback the configuration\n                                                                   using checkpoint (nxos),\n                                                                   archive file (iosxe),\n                                                                   load the saved running-config\n                                                                   file on disk (iosxr)\n                         Optional Arguments:\n                             tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                                  restored to the reference rate in seconds.\n                                                  Default: 60\n                             tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                                is resumed in seconds. Default: 10\n                             timeout_recovery:\n                                 Buffer recovery timeout make sure devices are recovered at the\n                                 end of the trigger execution. Used when previous timeouts have\n                                 been exhausted.\n                                 max_time (`int`): Maximum wait time for the last step of the\n                                                   trigger in seconds. Default: 180\n                                 interval (`int`): Wait time between iteration when looping is\n                                                   needed in seconds. Default: 15\n                             static:\n                                 The keys below are dynamically learnt by default.\n                                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                                 instance: `str`\n                                 vrf: `str`\n                                 neighbor: `str`\n                                 bgp_id: `int`\n\n                                 (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                       OR\n                                       interface: 'Ethernet1/1/1' (Specific value)\n                     Steps:\n                         1. Learn BGP Ops configured on device. SKIP the trigger if there\n                            is no BGP configured on the device.\n                         2. Save the current device configurations using \"method\" specified.\n                         3. Add soft-reconfiguration inbound under BGP neighbor of BGP pid learned in\n                            step 1 using Genie BGP Conf.\n                         4. Verify the newly soft-reconfiguration inbound under BGP neighbor is reflected in\n                            device configuration.\n                         5. Restore the device configuration to the original configuration saved\n                            in step 2.\n                         6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n                     ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborSoftReconfiguration",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborTransportConnectionModePassive": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add transport connection mode configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add transport connection mode configuration under BGP neighbor of BGP\n           pid learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added transport connection mode config under BGP \n           neighbor is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborTransportConnectionModePassive",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNeighborUpdateSource": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add update source configuration under a BGP neighor and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration \n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config \n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the \n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is \n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: 'int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Add update source configuration under BGP neighbor of BGP  pid \n           learned in step 1 using Genie BGP Conf.\n        4. Verify the newly added update source config under BGP neighbor is \n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNeighborUpdateSource",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNetworkIPv4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add network ip under a BGP and then restore the\n           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                        The keys below are dynamically learnt by default.\n                        However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        vrf: `str`\n                        bgp_id: `int`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                             OR\n                             interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn BGP Ops configured on device. SKIP the trigger if there\n                  is no BGP configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add network ip configuration under BGP pid learned in\n                  step 1 using Genie BGP Conf.\n               4. Verify the newly network ip under BGP is\n                  reflected in device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n           ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNetworkIPv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpNetworkIPv6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add network ipv6 under a BGP and then restore the\n           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                        The keys below are dynamically learnt by default.\n                        However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        vrf: `str`\n                        bgp_id: `int`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                             OR\n                             interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn BGP Ops configured on device. SKIP the trigger if there\n                  is no BGP configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add network ipv6 configuration under BGP pid learned in\n                  step 1 using Genie BGP Conf.\n               4. Verify the newly network ipv6 under BGP is\n                  reflected in device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n           ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpNetworkIPv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpRedistributeConnected": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"redistribute direct \" to the dynamically learned BGP vrf(s)\n    which does not have \"redistribute direct \" enabled, and remove the\n    added \"redistribute direct \" configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) if it does \n           not have \"redistribute direct\" enabled,\n           otherwise, SKIP the trigger.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the \"redistribute direct\" to learned\n           BGP vrf(s) from step 1 with BGP Conf object\n        4. Verify the BGP vrf(s) from step 3 has \"redistribute direct\" configured\n        5. Remove the \"redistribute direct\" configurations from the learned\n           BGP vrf(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpRedistributeConnected",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpRedistributeOspf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"redistribute ospf opsf_pid\" to the dynamically learned BGP vrf(s)\n    which does not have \"redistribute ospf opsf_pid\" enabled, and remove the\n    added \"redistribute ospf opsf_pid\" configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) if it does \n           not have \"redistribute ospf opsf_pid\" enabled,\n           otherwise, SKIP the trigger.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the \"redistribute ospf opsf_pid\" to learned\n           BGP vrf(s) from step 1 with BGP Conf object\n        4. Verify the BGP vrf(s) from step 3 has \"redistribute ospf opsf_pid\" configured\n        5. Remove the \"redistribute ospf opsf_pid\" configurations from the learned\n           BGP vrf(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpRedistributeOspf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveBgpRedistributeStatic": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the \"redistribute static\" to the dynamically learned BGP vrf(s)\n    which does not have \"redistribute static\" enabled, and remove the\n    added \"redistribute static\" configurations.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) if it does \n           not have \"redistribute static\" enabled,\n           otherwise, SKIP the trigger.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of the \"redistribute static\" to learned\n           BGP vrf(s) from step 1 with BGP Conf object\n        4. Verify the BGP vrf(s) from step 3 has \"redistribute static\" configured\n        5. Remove the \"redistribute static\" configurations from the learned\n           BGP vrf(s) from step 1\n        6. Recover the device configurations to the one in step 2\n        7. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.bgp.addremove.TriggerAddRemoveBgpRedistributeStatic",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/bgp/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveEthernetIpAclDeny": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the IP acls with L2 ports which is Ethernet\n    interfaces to device, and remove the added IP acls..\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn acl Ops object and store the acls info if has any.\n           Learn Interface ops object to select one trunk interface to add mac acl\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of acl with acl Conf object\n        4. Verify the acl from step 3 has configured\n        5. Remove the acl configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn acl Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetIpAclDeny",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetIpAclDeny",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/addremove.py"
    }
  },
  "TriggerAddRemoveEthernetIpAclPermit": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the IP acls with L2 ports which is Ethernet\n    interfaces to device, and remove the added IP acls..\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn acl Ops object and store the acls info if has any.\n           Learn Interface ops object to select one trunk interface to add mac acl\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of acl with acl Conf object\n        4. Verify the acl from step 3 has configured\n        5. Remove the acl configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn acl Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetIpAclPermit",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetIpAclPermit",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/addremove.py"
    }
  },
  "TriggerAddRemoveEthernetMacAcl": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the mac acl to ethernet interface, and remove the\n    added mac acl.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn acl Ops object and store the acls info if has any.\n           Learn Interface ops object to select one trunk interface to add mac acl\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of acl with acl Conf object\n        4. Verify the acl from step 3 has configured\n        5. Remove the acl configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn acl Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetMacAcl",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveEthernetMacAcl",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/addremove.py"
    }
  },
  "TriggerAddRemoveEvpnMsiteBgwDelayRestoreTime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add msite bgw delay restore time under Vxlan then restore the\n                       configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                       evpn_multisite_border_gateway: `int`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                             OR\n                             interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n                  is no Vxlan configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add msite bgw delay restore time that using Genie Vxlan Conf.\n               4. Verify the newly msite bgw delay restore time under Vxlan is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n           ",
      "groups": [
        "add-remove",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.vxlan.addremove.TriggerAddRemoveEvpnMsiteBgwDelayRestoreTime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 1000
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/vxlan/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveIgmpEnable": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Igmp interface enable, add remove added Igmp interface enable.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Igmp Ops/Conf object and store the Igmp interface enable, learn Interface ops to \n           get interface with ip address and not same to the existing igmp interface.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of interface as igmp originator-id with Igmp Conf object\n        4. Verify the igmp interface enable from step 3 has configured\n        5. Remove the igmp interface enable configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "add-remove",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpEnable",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpEnable",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/addremove.py"
    }
  },
  "TriggerAddRemoveIgmpJoinGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Igmp peer(s) sa-filter out, and\n    remove added Igmp peer(s) sa-filter out.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            add_igmp_group: Trigger yaml file customized add imgp join-group.               \n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                join_group: `str`\n                group: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the Igmp interface(s) which does not have added join-group.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of igmp interface join-group with Igmp Conf object\n        4. Verify the igmp interface join-group from step 3 has configured\n        5. Remove the igmp interface join-group configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/addremove.py"
    }
  },
  "TriggerAddRemoveIgmpStaticGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Igmp interface static-group,\n    and remove added Igmp interface static-group.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                static_group: `str`\n                group: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Igmp Ops object and store the Igmp interface(s) which does not have added static-group.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of igmp interface static-group with Igmp Conf object\n        4. Verify the igmp interface static-group from step 3 has configured\n        5. Remove the igmp interface static-group configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/addremove.py"
    }
  },
  "TriggerAddRemoveIgmpVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply Igmp interface version, and remove added Igmp interface version.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the Igmp which interface version is default value.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of igmp interface version with Igmp Conf object\n        4. Verify the igmp interface version from step 3 has configured\n        5. Remove the igmp interface version configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.igmp.addremove.TriggerAddRemoveIgmpVersion",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/igmp/addremove.py"
    }
  },
  "TriggerAddRemoveIpv4StaticRoutes": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the ipv4 static routing to device, and remove the\n    added ipv4 static routing.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn static_routing Ops object and store the routes info if has any.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of static routing with static_routing Conf object\n        4. Verify the static_routing from step 3 has configured\n        5. Remove the static_routing configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn static_routing Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.routing.addremove.TriggerAddRemoveIpv4StaticRoutes",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/routing/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.routing.addremove.TriggerAddRemoveIpv4StaticRoutes",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/routing/addremove.py"
    }
  },
  "TriggerAddRemoveIpv6StaticRoutes": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the ipv6 static routing to device, and remove the\n    added ipv6 static routing.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                route: `str`\n                out_intf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn static_routing Ops object and store the routes info if has any.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of static routing with static_routing Conf object\n        4. Verify the static_routing from step 3 has configured\n        5. Remove the static_routing configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn static_routing Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.routing.addremove.TriggerAddRemoveIpv6StaticRoutes",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/routing/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.routing.addremove.TriggerAddRemoveIpv6StaticRoutes",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/routing/addremove.py"
    }
  },
  "TriggerAddRemoveL3EtherchannelPagp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the configuration for L3 Etherchannel in PAGP mode, and remove the\n    added Etherchannel in PAGP mode.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                bundle_intf: `str`\n                bundle_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object to select up interfaces.\n           Learn LAG ops object to find port-channle interfaces which does not exists.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of Etherchannel in PAGP mode with interface Conf object,\n           Add ip address configuration to the learned port-channel interfaces\n        4. Verify the interfaces are in the por-channle interfaces from step 3 has configured\n        5. Remove the Etherchannel and port-channel configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn LAG Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveL3EtherchannelPagp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 80
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveL3EtherchannelPagp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/addremove.py"
    }
  },
  "TriggerAddRemoveMldEnable": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Mld interface enable, add remove added Mld interface enable.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops/Conf object and store the Mld interface enable, learn Interface ops to \n           get interface with ip address and not same to the existing mld interface.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of interface as mld originator-id with Mld Conf object\n        4. Verify the mld interface enable from step 3 has configured\n        5. Remove the mld interface enable configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Mld Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "add-remove",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldEnable",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldEnable",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/addremove.py"
    }
  },
  "TriggerAddRemoveMldJoinGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Mld peer(s) sa-filter out, and\n    remove added Mld peer(s) sa-filter out.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            add_mld_group: Trigger yaml file customized add imgp join-group.               \n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                source: `str`\n                join_group: `str`\n                group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the Mld interface(s) which does not have added join-group.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of mld interface join-group with Mld Conf object\n        4. Verify the mld interface join-group from step 3 has configured\n        5. Remove the mld interface join-group configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/addremove.py"
    }
  },
  "TriggerAddRemoveMldStaticGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Mld interface static-group,\n    and remove added Mld interface static-group.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                source: `str`\n                static_group: `str`\n                group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the Mld interface(s) which does not have added static-group.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of mld interface static-group with Mld Conf object\n        4. Verify the mld interface static-group from step 3 has configured\n        5. Remove the mld interface static-group configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/addremove.py"
    }
  },
  "TriggerAddRemoveMldVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply Mld interface version, and remove added Mld interface version.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the Mld which interface version is default value.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of mld interface version with Mld Conf object\n        4. Verify the mld interface version from step 3 has configured\n        5. Remove the mld interface version configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.mld.addremove.TriggerAddRemoveMldVersion",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/mld/addremove.py"
    }
  },
  "TriggerAddRemoveMplsLdpAutoConfig": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "mpls",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.TriggerAddRemoveMplsLdpAutoConfig",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 2,
        "max_time": 200
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    },
    "top": {
      "contribute": true,
      "doc": "Add Remove mpls ldp Auto config in ospf",
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.TriggerAddRemoveMplsLdpAutoConfig",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpDescription": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP vrf(s) description, and\n    remove added MSDP vrf(s) description.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) which does not have\n           description configured.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp description with Msdp Conf object\n        4. Verify the msdp description from step 3 has configured\n        5. Remove the msdp description configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP peer(s) keepalive&holdtime interval, and\n    remove added MSDP peer(s) keepalive&holdtime interval.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops/Conf object and store the MSDP peer(s) which does not have\n           keepalive&holdtime interval configured.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp keepalive&holdtime interval with Msdp Conf object\n        4. Verify the msdp keepalive&holdtime interval from step 3 has configured\n        5. Remove the msdp keepalive&holdtime interval configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpMeshGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP peer(s) sa-limit, and\n    remove added MSDP peer(s) sa-limit.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) which does not have mesh-group.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp mesh-group with Msdp Conf object\n        4. Verify the msdp mesh-group from step 3 has configured\n        5. Remove the msdp mesh-group configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpOriginatorId": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP originator-id, add remove added MSDP originator-id.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                originator_id: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops/Conf object and store the MSDP originator-id, learn Interface ops to \n           get interface with ip address and under same vrf as msdp originator-id.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of interface as msdp originator-id with Msdp Conf object\n        4. Verify the msdp originator-id from step 3 has configured\n        5. Remove the msdp originator-id configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpPeer": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the msdp peer, and remove the added msdp peer.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                originator_id: `str`\n                connect_source: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s), get different peer\n           address as new msdp peer.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp peer with Msdp Conf object\n        4. Verify the msdp peer from step 3 has configured\n        5. Remove the msdp peer configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpReconnectInterval": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP vrf(s) reconnect interval, and\n    remove added MSDP vrf(s) reconnect interval.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops/Conf object and store the MSDP vrf(s) which does not have\n           reconnect interval configured.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp reconnect interval with Msdp Conf object\n        4. Verify the msdp reconnect interval from step 3 has configured\n        5. Remove the msdp reconnect interval configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpSaFilterOut": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP peer(s) sa-filter out, and\n    remove added MSDP peer(s) sa-filter out.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) which does not have sa-filter out.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp sa-filter out with Msdp Conf object\n        4. Verify the msdp sa-filter out from step 3 has configured\n        5. Remove the msdp sa-filter out configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveMsdpSaLimit": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the MSDP peer(s) sa-limit, and\n    remove added MSDP peer(s) sa-limit.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) which does not have sa-limit.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of msdp sa-limit with Msdp Conf object\n        4. Verify the msdp sa-limit from step 3 has configured\n        5. Remove the msdp sa-limit configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.msdp.addremove.TriggerAddRemoveMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/msdp/addremove.py"
    }
  },
  "TriggerAddRemoveNveAdvertiseVirtualRmac": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add msite bgw delay restore time under Vxlan then restore the\n                           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        nve_name: `str`\n\n                        (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                              OR\n                              interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n                  is no vxlan configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add virtual rmac advertised that using Genie Interface Conf.\n               4. Verify the newly Virtual rmac advertised under Vxlan is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n                   ",
      "groups": [
        "add-remove"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.vxlan.addremove.TriggerAddRemoveNveAdvertiseVirtualRmac",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 500
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/vxlan/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveNveMultisiteBgwInterface": {
    "nxos": {
      "doc": "Add Add multisite bgw interface under Vxlan then restore the\n                          configuration by reapplying the whole running configuration\n\n              trigger_datafile:\n                  Mandatory Arguments:\n                      timeout:\n                          max_time (`int`): Maximum wait time for the trigger in seconds.\n                                            Default: 180\n                          interval (`int`): Wait time between iteration when looping is\n                                            needed in seconds. Default: 15\n                          method (`str`): Method to recover the device configuration.\n                                          Supported methods:\n                                              'checkpoint': Rollback the configuration\n                                                            using checkpoint (nxos),\n                                                            archive file (iosxe),\n                                                            load the saved running-config\n                                                            file on disk (iosxr)\n                  Optional Arguments:\n                      tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                           restored to the reference rate in seconds.\n                                           Default: 60\n                      tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                         is resumed in seconds. Default: 10\n                      timeout_recovery:\n                          Buffer recovery timeout make sure devices are recovered at the\n                          end of the trigger execution. Used when previous timeouts have\n                          been exhausted.\n                          max_time (`int`): Maximum wait time for the last step of the\n                                            trigger in seconds. Default: 180\n                          interval (`int`): Wait time between iteration when looping is\n                                            needed in seconds. Default: 15\n                      static:\n                          The keys below are dynamically learnt by default.\n                          However, they can also be set to a custom value when provided in the trigger datafile.\n\n                          nve_name: `str`\n                          source_if: `str`\n\n                          (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                OR\n                                interface: 'Ethernet1/1/1' (Specific value)\n\n              Steps:\n                  1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n                     is no Vxlan configured on the device.\n                  2. Save the current device configurations using \"method\" specified.\n                  3. Add multisite bgw interface that using Genie Interface Conf.\n                  4. Verify the newly multisite bgw interface under Vxlan is reflected in\n                     device configuration.\n                  5. Restore the device configuration to the original configuration saved\n                     in step 2.\n                  6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n              ",
      "groups": [
        "add-remove",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.vxlan.addremove.TriggerAddRemoveNveMultisiteBgwInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/vxlan/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveNveVniMcastGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add mcast group under Vxlan then restore the\n                         configuration by reapplying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n               static:\n                   The keys below are dynamically learnt by default.\n                   However, they can also be set to a custom value when provided in the trigger datafile.\n\n                   nve_name: `str`\n                   nve_vni: `int`\n                   mcast_group: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n       Steps:\n           1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n              is no vxlan configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Add mcast group that using Genie Interface Conf.\n           4. Verify the newly mcast group under Vxlan is reflected in\n              device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "add-remove",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.vxlan.addremove.TriggerAddRemoveNveVniMcastGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/vxlan/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveNveVniMultisiteIngressReplication": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add multisite ingress replication under Vxlan then restore the\n                           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                       nve_name: `str`\n                       nve_vni: `int`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                             OR\n                             interface: 'Ethernet1/1/1' (Specific value)\n\n           Steps:\n               1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n                  is no vxlan configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add multisite ingress replication that using Genie Interface Conf.\n               4. Verify the newly multisite ingress replication under Vxlan is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n                   ",
      "groups": [
        "add-remove",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.vxlan.addremove.TriggerAddRemoveNveVniMultisiteIngressReplication",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/vxlan/nxos/addremove.py"
    }
  },
  "TriggerAddRemovePimNeighborFilter": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Pim interface(s)'s neighbor-filter,\n    add remove added Pim interface(s)'s neighbor-filter.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n                address_family: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Pim Ops/Conf object and store the Pim interface(s)'s neighbor-filter.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of Pim interface(s)'s neighbor-filter with Pim Conf object\n        4. Verify the Pim interface(s)'s neighbor-filter from step 3 has configured\n        5. Remove the Pim interface(s)'s neighbor-filter configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn Pim Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "add-remove",
        "pim",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.pim.addremove.TriggerAddRemovePimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/pim/nxos/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.pim.addremove.TriggerAddRemovePimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/pim/addremove.py"
    }
  },
  "TriggerAddRemoveRouteTargetEvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add route-target evpn then restore the\n                            configuration by re-applying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n               static:\n                   The keys below are dynamically learnt by default.\n                   However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vrf: `str`\n                    rt: `str`\n                    address_family: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n       Steps:\n           1. Learn Vrf Conf object configured on device. SKIP the trigger if there\n              is no vrf configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Add route-target evpn that using Genie Vrf Conf.\n           4. Verify the newly route-target evpn under Vrf is reflected in\n              device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn Vrf Conf object again and verify it is the same as step 1.\n    ",
      "groups": [
        "add-remove",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.trm.addremove.TriggerAddRemoveRouteTargetEvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/trm/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveRouteTargetMvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add route-target mvpn then restore the\n                               configuration by re-applying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n               static:\n                   The keys below are dynamically learnt by default.\n                   However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vrf: `str`\n                    address_family: `str`\n                    rt: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n       Steps:\n           1. Learn Vrf Conf object configured on device. SKIP the trigger if there\n              is no vrf configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Add route-target mvpn that using Genie Vrf Conf.\n           4. Verify the newly route-target mvpn under Vrf is reflected in\n              device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn Vrf Conf object again and verify it is the same as step 1.\n    ",
      "groups": [
        "add-remove",
        "trm"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.trm.addremove.TriggerAddRemoveRouteTargetMvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/trm/nxos/addremove.py"
    }
  },
  "TriggerAddRemoveTrunkEtherchannelLacp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the Etherchannel in LACP mode, and remove the\n    added Etherchannel in LACP mode.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object to select trunk interfaces.\n           Learn LAG ops object to find port-channle interfaces which does not have\n           the learned interfaces as memebers.\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of Etherchannel in LACP mode with interface Conf object\n        4. Verify the interfaces are in the por-channle interfaces from step 3 has configured\n        5. Remove the Etherchannel configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn LAG Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveTrunkEtherchannelLacp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.lag.addremove.TriggerAddRemoveTrunkEtherchannelLacp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/lag/addremove.py"
    }
  },
  "TriggerAddRemoveVlanIpAclPermit": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Apply the IP acls with L2 ports which is Vlan\n    interfaces to device, and remove the added IP acls..\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn acl Ops object and store the acls info if has any.\n           Learn Interface ops object to select one Vlan interface to add ipv4 icmp acl\n        2. Save the current device configurations through \"method\" which user uses\n        3. Add the configuration of acl with acl Conf object\n        4. Verify the acl from step 3 has configured\n        5. Remove the acl configurations.\n        6. Recover the device configurations to the one in step 2\n        7. Learn acl Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveVlanIpAclPermit",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/iosxe/addremove.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.addremove.acl.addremove.TriggerAddRemoveVlanIpAclPermit",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/addremove/acl/addremove.py"
    }
  },
  "TriggerCheckCommands": {
    "iosxe": {
      "doc": "Check show commands to see if required status/values are matched.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Check 'show switch detail'. Store active/standby switch,\n           and full stack switches numbers if has any, otherwise, SKIP the trigger\n        2. Check 'show inventory'. Store the image type ('Katana, Edison, Archimedes')\n        3. Check 'show version'\n        4. Check 'show redundancy'\n        5. Check 'show module'\n        6. Check 'show environment all'\n        7. Check 'show platform'\n        8. Check 'show stack-power' and 'show power inline <AP_connected_interface>'\n           for Edison and Archimedes device\n        9. Check 'show crypto pki certificates' for CISCO_IDEVID_SUDI and CISCO_IDEVID_SUDI_LEGACY\n    ",
      "groups": [],
      "source": {
        "class": "triggers.xe_sanity.checkcommands.checkcommands.TriggerCheckCommands",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/xe_sanity/checkcommands/iosxe/checkcommands.py"
    },
    "top": {
      "contribute": false,
      "doc": "Trigger class for check show commands action",
      "source": {
        "class": "triggers.xe_sanity.checkcommands.checkcommands.TriggerCheckCommands",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/xe_sanity/checkcommands/checkcommands.py"
    }
  },
  "TriggerClearBgpAll": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Hard reset all the BGP connections using CLI command\n    \"clear bgp instance all *\" and \"clear bgp instance all vrf all *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Hard reset all the BGP connections with command \"clear bgp instance all *\"\n           and \"clear bgp instance all vrf all *\"\n        3. Learn BGP Ops again, verify the uptime of BGP \"established\" neighbor(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/iosxr/clear.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Hard reset all the BGP connections using CLI command \"clear bgp vrf all all *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Hard reset all the BGP connections with command \"clear bgp vrf all all *\"\n        3. Learn BGP Ops again, verify the uptime of BGP \"established\" neighbor(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighbor": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Hard reset the BGP neighbors using CLI command \"clear bgp all <neighbor id>\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Soft reset all the BGP connections with command \"clear bgp all <neighbor id>\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighborIpv4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP neighbors for ipv4 address family\n    using CLI command \"clear bgp vrf all all <ipv4 neighbor id>\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset all the BGP connections with command \"clear bgp vrf all all <ipv4  neighbor id>\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborIpv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborIpv4",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighborIpv6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP neighbors for ipv6 address family\n    using CLI command \"clear bgp vrf all all <ipv6 neighbor id>\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset all the BGP connections with command \"clear bgp vrf all all <ipv6 neighbor id>\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborIpv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborIpv6",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighborSoft": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Soft reset the BGP neighbors using CLI command\n    \"clear bgp vrf all all <neighbor id> soft\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Soft reset all the BGP connections with command \"clear bgp vrf all all <neighbor id> soft\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoft",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoft",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighborSoftIpv4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Soft reset the BGP neighbors for ipv4 address family\n    using CLI command \"clear bgp vrf all all <<ipv4 neighbor id>> soft\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Soft reset all the BGP connections with command \"clear bgp vrf all all <<ipv4 neighbor id>> soft\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoftIpv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoftIpv4",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpNeighborSoftIpv6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Soft reset the BGP neighbors for ipv6 address family\n    using CLI command \"clear bgp vrf all all <<ipv6 neighborid>> soft\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Soft reset all the BGP connections with command \"clear bgp vrf all all `ipv6_neighbor_id` soft\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoftIpv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpNeighborSoftIpv6",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpVpnv4UnicastVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP connections for vpnv4 uncast address family sessions with using CLI\n        command \"clear bgp vpnv4 unicast * vrf all\".\n\n               trigger_datafile:\n                   Mandatory:\n                       timeout:\n                           max_time (`int`): Maximum wait time for the trigger,\n                                           in second. Default: 180\n                           interval (`int`): Wait time between iterations when looping is needed,\n                                           in second. Default: 15\n                   Optional:\n                       tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                            restored to the reference rate,\n                                            in second. Default: 60\n                       tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                          in second. Default: 10\n\n               steps:\n                   1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n                      for vpnv4 unicast address family\n                      if has any, otherwise, SKIP the trigger\n                   2. Reset all the BGP connections with command \"clear bgp vpnv4 unicast * vrf all\"\n                   3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n        ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpVpnv4UnicastVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpVpnv4UnicastVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearBgpVpnv6UnicastVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP connections for vpnv6 uncast address family sessions with using CLI\n           command \"clear bgp vpnv6 unicast * vrf all\".\n\n                  trigger_datafile:\n                      Mandatory:\n                          timeout:\n                              max_time (`int`): Maximum wait time for the trigger,\n                                              in second. Default: 180\n                              interval (`int`): Wait time between iterations when looping is needed,\n                                              in second. Default: 15\n                      Optional:\n                          tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                               restored to the reference rate,\n                                               in second. Default: 60\n                          tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                             in second. Default: 10\n\n                  steps:\n                      1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n                         for vpnv6 unicast address family\n                         if has any, otherwise, SKIP the trigger\n                      2. Reset all the BGP connections with command \"clear bgp vpnv6 unicast * vrf all\"\n                      3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n           ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpVpnv6UnicastVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearBgpVpnv6UnicastVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearCountersInterfaceAll": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Clear counters on all interfaces using CLI command \"clear counters\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Interface Ops object and store the interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Hard reset all the BGP connections with command \"clear counters\"\n        3. Learn Interface Ops again, verify the counter of the learned interface(s)\n           is reset, and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.interface.clear.TriggerClearCountersInterfaceAll",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/interface/iosxe/clear.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Clear counters on all interfaces using CLI command\n    \"clear counters interface all\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Interface Ops object and store the interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Hard reset all the BGP connections with command \"clear counters interface all\"\n        3. Learn Interface Ops again, verify the counter of the learned interface(s)\n           is reset, and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.interface.clear.TriggerClearCountersInterfaceAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/interface/nxos/clear.py"
    }
  },
  "TriggerClearIpBgpSoft": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Soft reset all the BGP connections using CLI command \"clear ip bgp * soft\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Soft reset all the BGP connections with command \"clear ip bgp * soft\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpBgpSoft",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpBgpSoft",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearIpBgpVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP connections for IPv4 VRF address family sessions with using CLI command \"clear ip bgp vrf all *\".\n\n           trigger_datafile:\n               Mandatory:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iterations when looping is needed,\n                                       in second. Default: 15\n               Optional:\n                   tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                        restored to the reference rate,\n                                        in second. Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                      in second. Default: 10\n\n           steps:\n               1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n                  if has any, otherwise, SKIP the trigger\n               2. Reset all the BGP connections with command \"clear ip bgp vrf all *\"\n               3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpBgpVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpBgpVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearIpMroute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ip Mroute using CLI command \"clear ip mroute *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ip mroute *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpMroute",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpMroute",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/clear.py"
    }
  },
  "TriggerClearIpMrouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all the vrf ipv4 Mroute using CLI command \"clear ip mroute * vrf all\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ip mroute * vrf all\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpMrouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpMrouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/clear.py"
    }
  },
  "TriggerClearIpOspfNeighborVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all Ospf neighbor connections using CLI command \"clear ip ospf neighbor * vrf all\".\n\n           trigger_datafile:\n               Mandatory:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iterations when looping is needed,\n                                       in second. Default: 15\n               Optional:\n                   tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                        restored to the reference rate,\n                                        in second. Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                      in second. Default: 10\n\n           steps:\n               1. Learn Ospf ops object and store the neighbor(s)\n                  if has any, otherwise, SKIP the trigger\n               2. Reset all the neighbors with command \"clear ip ospf neighbor * vrf all\"\n               3. Learn Ospf Ops again, verify the last state change of neighbor(s) is reset,\n                  and verify it is the same as the Ops in step 1 except the uptime\n        ",
      "groups": [
        "clear",
        "ospf",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.ospf.clear.TriggerClearIpOspfNeighborVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 15,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/ospf/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.ospf.clear.TriggerClearIpOspfNeighborVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/ospf/clear.py"
    }
  },
  "TriggerClearIpRoute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ip route connections using CLI command \"clear ip route *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ip route *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpRoute",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearIpRouteCheckBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset the BGP neighbors using CLI command \"clear ip route *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset all the BGP connections with command \"clear ip route *\"\n        3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpRouteCheckBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerClearIpRouteCheckBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerClearIpRouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all the ip route connections using CLI command \"clear ip route vrf all *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset all the route connections with command \"clear ip route vrf all *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpRouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpRouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/clear.py"
    }
  },
  "TriggerClearIpRouting": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ip routing using CLI command \"clear routing ip *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ip *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpRouting",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearIpRoutingMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all ip multicast route connections using CLI command \"clear routing ip multicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ip multicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpRoutingMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 280
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    }
  },
  "TriggerClearIpRoutingUnicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all ip route connections using CLI command \"clear routing ip unicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ip unicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpRoutingUnicast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearIpv6Mroute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ipv6 Mroute using CLI command \"clear ipv6 mroute *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route ipv6 address(es)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ipv6 mroute *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpv6Mroute",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpv6Mroute",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/clear.py"
    }
  },
  "TriggerClearIpv6MrouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all the vrf ipv6 Mroute using CLI command \"clear ipv6 mroute * vrf all\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route ipv6 address(es)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ipv6 mroute * vrf all\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpv6MrouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearIpv6MrouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/clear.py"
    }
  },
  "TriggerClearIpv6Route": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ipv6 route connections using CLI command \"clear ipv6 route *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route ipv6 address(es)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear ipv6 route *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpv6Route",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearIpv6RouteVrfAll": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all the ipv6 route connections using CLI command \"clear ipv6 route vrf all *\".\n\n       trigger_datafile:\n           Mandatory:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iterations when looping is needed,\n                                   in second. Default: 15\n           Optional:\n               tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                    restored to the reference rate,\n                                    in second. Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                  in second. Default: 10\n\n       steps:\n           1. Learn routing Ops object and store the route IPv6(s)\n              if has any, otherwise, SKIP the trigger\n           2. Reset all the route connections with command \"clear ip route vrf all *\"\n           3. Learn routing Ops again, verify the uptime of route(s) is reset,\n              and verify it is the same as the Ops in step 1 except the uptime\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpv6RouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpv6RouteVrfAll",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/clear.py"
    }
  },
  "TriggerClearIpv6Routing": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all ipv6 routing using CLI command \"clear routing ipv6 *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ipv6 *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpv6Routing",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearIpv6RoutingUnicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all ip route connections using CLI command \"clear routing ipv6 unicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ipv6 unicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearIpv6RoutingUnicast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearMsdpPeer": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset msdp peer using CLI command \"clear ip msdp peer x.x.x.x [ vrf <vrf> ]\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the peer(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp peers with command \"clear ip msdp peer x.x.x.x [ vrf <vrf> ]\"\n        3. Learn Msdp Ops again, verify the elapsed_time of peer(s) is reset,\n           and verify it is the same as the Ops in step 1 except the elapsed_time\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearMsdpPolicyStatisticsSaPolicyIn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset msdp peer statistics sa_policy in using CLI command\n    \"clear ip msdp policy statistics sa-policy x.x.x.x in\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the peer(s) which has sa_policy in configured\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp peers with command \"clear ip msdp policy statistics sa-policy x.x.x.x in\"\n        3. Learn Msdp Ops again, verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPolicyStatisticsSaPolicyIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPolicyStatisticsSaPolicyIn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearMsdpPolicyStatisticsSaPolicyOut": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset msdp peer statistics sa_policy out using CLI command\n    \"clear ip msdp policy statistics sa-policy x.x.x.x out\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the peer(s) which has sa_policy in configured\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp peers with command \"clear ip msdp policy statistics sa-policy x.x.x.x out\"\n        3. Learn Msdp Ops again, verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPolicyStatisticsSaPolicyOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpPolicyStatisticsSaPolicyOut",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearMsdpRoute": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset sa cache for msdp groups using CLI command\n    \"clear ip msdp route x.x.x.x [ vrf < vrf> ]\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the msdp sa-cache group(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp sa-cache groups with command \"clear ip msdp route x.x.x.x [ vrf < vrf> ]\"\n        3. Learn Msdp Ops again, verify the uptime of group(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpRoute",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpRoute",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearMsdpSaCache": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset sa cache for msdp groups using CLI command\n    \"clear ip msdp sa-cache x.x.x.x [vrf <vrf> ]\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the msdp sa-cache group(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp sa-cache groups with command \"clear ip msdp sa-cache x.x.x.x [vrf <vrf> ]\"\n        3. Learn Msdp Ops again, verify the uptime of group(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpSaCache",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpSaCache",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearMsdpStatistics": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset msdp statistics using CLI command\n    \"clear ip msdp statistics x.x.x.x [vrf <vrf> ]\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Msdp Ops object and store the peer(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset msdp peers with command \"clear ip msdp statistics x.x.x.x [vrf <vrf> ]\"\n        3. Learn Msdp Ops again, verify the discontinuity_time of peer(s) is reset,\n           and verify it is the same as the Ops in step 1 except the discontinuity_time\n\n    ",
      "groups": [
        "clear",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpStatistics",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.msdp.clear.TriggerClearMsdpStatistics",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/msdp/clear.py"
    }
  },
  "TriggerClearRouting": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default routing using CLI command \"clear routing *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearRouting",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearRoutingMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all multicast route connections using CLI command \"clear routing multicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing multicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearRoutingMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 280
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    }
  },
  "TriggerClearRoutingUnicast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset vrf default ip route connections using CLI command \"clear routing unicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing unicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.routing.clear.TriggerClearRoutingUnicast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/routing/nxos/clear.py"
    }
  },
  "TriggerClearV4RouteMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all V4 multicast route using CLI command \"clear routing ipv4 multicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ipv4 multicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearV4RouteMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 280
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    }
  },
  "TriggerClearV6RouteMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reset all V6 multicast route using CLI command \"clear routing ipv6 multicast *\".\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iterations when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn routing Ops object and store the route IP(s)\n           if has any, otherwise, SKIP the trigger\n        2. Reset vrf default route connections with command \"clear routing ipv6 multicast *\"\n        3. Learn routing Ops again, verify the uptime of route(s) is reset,\n           and verify it is the same as the Ops in step 1 except the uptime\n\n    ",
      "groups": [
        "clear",
        "routing",
        "L3"
      ],
      "source": {
        "class": "triggers.clear.mcast.clear.TriggerClearV6RouteMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 280
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/mcast/nxos/clear.py"
    }
  },
  "TriggerDisableEnableBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature BGP when there is bgp instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                bgp_id: `int`\n\n              (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable BGP feature with command \"no feature bgp\"\n           via BGP Conf object\n        4. Verify the state of feature hsrp is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature hsrp is \"enabled\" and\n           learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.bgp.disableenable.TriggerDisableEnableBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/bgp/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableBgpWithCR": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature BGP when there is bgp instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                bgp_id: `int`\n\n              (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable BGP feature with command \"no feature bgp\"\n           via BGP Conf object\n        4. Verify the state of feature hsrp is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature hsrp is \"enabled\" and\n           learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.disableenable.bgp.disableenable.TriggerDisableEnableBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/bgp/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableHsrp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature hsrp when there is hsrp group(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                address_family: `str`\n                version: `int`\n                groups: `int`\n                standby_router: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn HSRP Ops object and store the HSRP group(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable HSRP feature with command \"no feature hsrp\"\n           via HSRP Conf object\n        4. Verify the state of feature hsrp is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature hsrp is \"enabled\" and \n           learn HSRP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "hsrp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.hsrp.disableenable.TriggerDisableEnableHsrp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 1800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/hsrp/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableNgmvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature ngmvpn when it is enabled.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Vxlan Ops object and verify if ngmvpn is enabled, if not, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable nv overlay feature with command \"no feature ngmvpn\"\n           via Vxlan Conf object\n        4. Verify the state of feature ngmvpn overlay is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature nv overlay is \"enabled\" and\n           learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "trm"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.trm.disableenable.TriggerDisableEnableNgmvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 30,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/trm/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableNveOverlay": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature nv overlay when it is enabled.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Vxlan Ops object and verify if nv overlay is enabled, if not, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable nv overlay feature with command \"no feature nve overlay\"\n           via Vxlan Conf object\n        4. Verify the state of feature nv overlay is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature nv overlay is \"enabled\" and\n           learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.vxlan.disableenable.TriggerDisableEnableNveOverlay",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/vxlan/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnablePim": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature Pim.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n\n    steps:\n        1. Learn Mcast Ops object and store the Mcast vrf(s) with ipv4 feature enabled\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable pim feature with command \"no feature pim\"\n           via Mcast Conf object\n        4. Verify the state of feature pim is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature pim is \"enabled\" and \n           learn Mcast Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "mcast",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.mcast.disableenable.TriggerDisableEnablePim",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/mcast/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnablePim6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature Pim6.\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mcast Ops object and store the Mcast vrf(s) with ipv6 feature enabled\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable pim6 feature with command \"no feature pim6\"\n           via Mcast Conf object\n        4. Verify the state of feature pim6 is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature pim6 is \"enabled\" and \n           learn Mcast Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "mcast",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.mcast.disableenable.TriggerDisableEnablePim6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/mcast/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableVlanInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature interface-vlan when it is enabled.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Vlan Ops object and verify if interface-vlan is enabled, if not, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable interface-vlan feature with command \"no feature interface-vlan\"\n           via Vlan Conf object\n        4. Verify the state of feature interface-vlan is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature interface-vlan is \"enabled\" and \n           learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "Vlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.vlan.disableenable.TriggerDisableEnableVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/vlan/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableVnSegmentVlan": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature vn-segment-vlan-based when it is enabled.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Vlan Ops object and verify if vn-segment-vlan-based is enabled,\n           if not, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable vn-segment-vlan-based feature with command \"no feature vn-segment-vlan-based\"\n           via Vlan Conf object\n        4. Verify the state of feature vn-segment-vlan-based is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature vn-segment-vlan-based is \"enabled\" and \n           learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n\n    ",
      "groups": [
        "disable-enable",
        "Vlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.vlan.disableenable.TriggerDisableEnableVnSegmentVlan",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/vlan/nxos/disableenable.py"
    }
  },
  "TriggerDisableEnableVnSegmentVlanWithNvOverlay": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Disable and enable feature vn Segment vlan when it is enabled.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Vxlan Ops object and verify if vn segment vlan is enabled, if not, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Disable vn segment vlan feature with these two commands \"no feature nv overlay\" and\n            \"no feature vn-segment-vlan-based\" via Vxlan Conf object\n        4. Verify the state of feature vn-segment-vlan-based is \"disabled\"\n        5. Recover the device configurations to the one in step 2\n        6. Verify the state of feature vn-segment-vlan-based is \"enabled\" and\n           learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "disable-enable",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.disableenable.vxlan.disableenable.TriggerDisableEnableVnSegmentVlanWithNvOverlay",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 30,
        "max_time": 800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/disableenable/vxlan/nxos/disableenable.py"
    }
  },
  "TriggerIssu": {
    "iosxe": {
      "asr1k": {
        "doc": "\"Do ISSU on device.\n\n     trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n         Optional:\n             tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                  restored to the reference rate,\n                                  in second. Default: 60\n             tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                in second. Default: 10\n             static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 active_rp: `str`\n                 standby_rp: `str`\n\n                 (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n     steps:\n         1. Learn Platform Ops object and store the state of active rp ans standby rp\n            if has any, otherwise, SKIP the trigger\n         2. Do Issue on device.\n         3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n\n     ",
        "groups": [],
        "source": {
          "class": "triggers.ha.issu.issu.TriggerIssu",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/issu/iosxe/asr1k/issu.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "issu",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.issu.issu.TriggerIssu",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 3600
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/issu/iosxe/issu.py"
    }
  },
  "TriggerIssuLxc": {
    "nxos": {
      "cfg_timeout": 600,
      "cfg_transfer": false,
      "ctrlplane_downtime": 120,
      "devices": [
        "uut"
      ],
      "doc": "\"Do LXC ISSU on device.\n\n     trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n     steps:\n         1. Learn Platform Ops object and store the state of active rp, otherwise, SKIP the trigger\n         2. Do Issue on device.\n         3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n\n     ",
      "groups": [
        "ha",
        "issu",
        "L3"
      ],
      "issu_timeout": 1800,
      "mode": "lxc",
      "source": {
        "class": "triggers.ha.issu.issu.TriggerIssuLxc",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 3600
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/issu/nxos/issu.py"
    }
  },
  "TriggerIssuNative": {
    "nxos": {
      "cfg_timeout": 600,
      "cfg_transfer": false,
      "ctrlplane_downtime": 120,
      "devices": [
        "uut"
      ],
      "doc": "\"Do Native ISSU on device.\n\n     trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n     steps:\n         1. Learn Platform Ops object and store the state of active rp, otherwise, SKIP the trigger\n         2. Do Issue on device.\n         3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n\n     ",
      "groups": [
        "ha",
        "issu",
        "L3"
      ],
      "issu_timeout": 1800,
      "mode": "native",
      "source": {
        "class": "triggers.ha.issu.issu.TriggerIssuNative",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 3600
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/issu/nxos/issu.py"
    }
  },
  "TriggerModifyBgpGracefulRestartRestartTime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the graceful restart restart-time configured under BGP and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                graceful_restart_restart_time: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the graceful restart restart-time of BGP  pid learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to graceful restart restart-time config under BGP\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpGracefulRestartRestartTime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpGracefulRestartStalePathTime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the graceful restart stalepath-time configured under BGP and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                graceful_restart_stalepath_time: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the graceful restart stalepath-time of BGP pid learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to graceful restart stalepath-time config under\n           BGP is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpGracefulRestartStalePathTime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpKeepAliveInterval": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the keepalive interval configured under BGP and then restore the\n    configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                keepalive_interval: `int`\n                holdtime: `int`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the keepalive interval of BGP  pid learned in step 1 using\n           Genie BGP Conf.\n        4. Verify the change to keepalive interval config under BGP is\n           reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpKeepAliveInterval",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the keepalive interval and holdtime configured under BGP and then restore the\n       configuration by reapplying the whole running configuration\n\n       trigger_datafile:\n           Mandatory Arguments:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger in seconds.\n                                     Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n                   method (`str`): Method to recover the device configuration.\n                                   Supported methods:\n                                       'checkpoint': Rollback the configuration\n                                                     using checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config\n                                                     file on disk (iosxr)\n           Optional Arguments:\n               tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                    restored to the reference rate in seconds.\n                                    Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                  is resumed in seconds. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the\n                   end of the trigger execution. Used when previous timeouts have\n                   been exhausted.\n                   max_time (`int`): Maximum wait time for the last step of the\n                                     trigger in seconds. Default: 180\n                   interval (`int`): Wait time between iteration when looping is\n                                     needed in seconds. Default: 15\n               static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `str`\n                    keepalive_interval: `int`\n                    holdtime: `int`\n                    neighbor: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n\n       Steps:\n           1. Learn BGP Ops configured on device. SKIP the trigger if there\n              is no BGP configured on the device.\n           2. Save the current device configurations using \"method\" specified.\n           3. Modify the keepalive interval of BGP  pid learned in step 1 using\n              Genie BGP Conf.\n           4. Verify the change to keepalive interval config under BGP is\n              reflected in device configuration.\n           5. Restore the device configuration to the original configuration saved\n              in step 2.\n           6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n       ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpNeighborAsn": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the neighbor remote_as configured under BGP and then restore the\n      configuration by reapplying the whole running configuration\n\n      trigger_datafile:\n          Mandatory Arguments:\n              timeout:\n                  max_time (`int`): Maximum wait time for the trigger in seconds.\n                                    Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n                  method (`str`): Method to recover the device configuration.\n                                  Supported methods:\n                                      'checkpoint': Rollback the configuration\n                                                    using checkpoint (nxos),\n                                                    archive file (iosxe),\n                                                    load the saved running-config\n                                                    file on disk (iosxr)\n          Optional Arguments:\n              tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                   restored to the reference rate in seconds.\n                                   Default: 60\n              tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                 is resumed in seconds. Default: 10\n              timeout_recovery:\n                  Buffer recovery timeout make sure devices are recovered at the\n                  end of the trigger execution. Used when previous timeouts have\n                  been exhausted.\n                  max_time (`int`): Maximum wait time for the last step of the\n                                    trigger in seconds. Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n              static:\n                  The keys below are dynamically learnt by default.\n                  However, they can also be set to a custom value when provided in the trigger datafile.\n\n                  instance: `str`\n                  vrf: `str`\n                  neighbor: `str`\n                  remote_as: `int`\n                  bgp_id: `int`\n\n                  (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n      Steps:\n          1. Learn BGP Ops configured on device. SKIP the trigger if there\n             is no BGP configured on the device.\n          2. Save the current device configurations using \"method\" specified.\n          3. Modify the remote-as learned in step 1 using Genie BGP Conf.\n          4. Verify the change to remote_as config under BGP is\n             reflected in device configuration.\n          5. Restore the device configuration to the original configuration saved\n             in step 2.\n          6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n      ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborAsn",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborAsn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborAsn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the remote-as number for\n    dynamically learned \"established\" BGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `vrf`\n                neighbor: `str`\n                address_family: `str`\n                remote_as: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the \"established\" BGP neighbor(s) which has \n           remote-as configured. SKIP the trigger if there is no BGP neighbor(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the remote-as number of the learned BGP neighbor(s) from step 1\n           with BGP Conf object\n        4. Verify the remote-as number of learned BGP neighbor(s) from step 3\n           changes to the modified number in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborAsn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/modify.py"
    }
  },
  "TriggerModifyBgpNeighborCluster": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the cluster id configured under BGP and then restore the\n      configuration by reapplying the whole running configuration\n\n      trigger_datafile:\n          Mandatory Arguments:\n              timeout:\n                  max_time (`int`): Maximum wait time for the trigger in seconds.\n                                    Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n                  method (`str`): Method to recover the device configuration.\n                                  Supported methods:\n                                      'checkpoint': Rollback the configuration\n                                                    using checkpoint (nxos),\n                                                    archive file (iosxe),\n                                                    load the saved running-config\n                                                    file on disk (iosxr)\n          Optional Arguments:\n              tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                   restored to the reference rate in seconds.\n                                   Default: 60\n              tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                 is resumed in seconds. Default: 10\n              timeout_recovery:\n                  Buffer recovery timeout make sure devices are recovered at the\n                  end of the trigger execution. Used when previous timeouts have\n                  been exhausted.\n                  max_time (`int`): Maximum wait time for the last step of the\n                                    trigger in seconds. Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n              static:\n                  The keys below are dynamically learnt by default.\n                  However, they can also be set to a custom value when provided in the trigger datafile.\n\n                  instance: `str`\n                  cluster_id: `str`\n                  bgp_id: `int`\n\n                  (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n      Steps:\n          1. Learn BGP Ops configured on device. SKIP the trigger if there\n             is no BGP configured on the device.\n          2. Save the current device configurations using \"method\" specified.\n          3. Modify the cluster id learned in step 1 using Genie BGP Conf.\n          4. Verify the change to cluster id config under BGP is\n             reflected in device configuration.\n          5. Restore the device configuration to the original configuration saved\n             in step 2.\n          6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborCluster",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborCluster",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborCluster",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the cluster id for dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `vrf`\n                cluster_id: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s) which has cluster id\n           configured. SKIP the trigger if there is no BGP instance(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the cluster id of the learned BGP neighbor(s) from step 1\n           with BGP Conf object\n        4. Verify the cluster id of learned BGP neighbor(s) from step 3\n           changes to the modified id in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborCluster",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/modify.py"
    }
  },
  "TriggerModifyBgpNeighborEbgpMultihop": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the EBGP multihop configured under BGP neighbor and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                max_hop: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the EBGP multihop of BGP neighbor learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to EBGP multihop config under BGP neighbor\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborEbgpMultihop",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpNeighborKeepAliveInterval": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the keepalive interval configured under BGP neighbor and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                holdtime: `int`\n                keepalive_interval: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the keepalive interval of BGP neighbor learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to keepalive interval config under BGP neighbor\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborKeepAliveInterval",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpNeighborMaximumPrefix": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the maximum prefixes configured under BGP neighbor and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                maximum_prefix_max_prefix_no: `int`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the maximum prefixes of BGP neighbor learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to maximum prefixes config under BGP neighbor\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborMaximumPrefix",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpNeighborPassword": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the password configured under BGP neighbor and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                password_text: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the password of BGP neighbor learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to password config under BGP neighbor\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborPassword",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpNeighborRoutemapIn": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the neighbor inbound route map configured under BGP and then restore the\n      configuration by reapplying the whole running configuration\n\n      trigger_datafile:\n          Mandatory Arguments:\n              timeout:\n                  max_time (`int`): Maximum wait time for the trigger in seconds.\n                                    Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n                  method (`str`): Method to recover the device configuration.\n                                  Supported methods:\n                                      'checkpoint': Rollback the configuration\n                                                    using checkpoint (nxos),\n                                                    archive file (iosxe),\n                                                    load the saved running-config\n                                                    file on disk (iosxr)\n          Optional Arguments:\n              tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                   restored to the reference rate in seconds.\n                                   Default: 60\n              tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                 is resumed in seconds. Default: 10\n              timeout_recovery:\n                  Buffer recovery timeout make sure devices are recovered at the\n                  end of the trigger execution. Used when previous timeouts have\n                  been exhausted.\n                  max_time (`int`): Maximum wait time for the last step of the\n                                    trigger in seconds. Default: 180\n                  interval (`int`): Wait time between iteration when looping is\n                                    needed in seconds. Default: 15\n              static:\n                  The keys below are dynamically learnt by default.\n                  However, they can also be set to a custom value when provided in the trigger datafile.\n\n                  instance: `str`\n                  vrf: `vrf`\n                  neighbor: `str`\n                  address_family: `str`\n                  route_map: `str`\n                  bgp_id: `int`\n\n                  (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n      Steps:\n          1. Learn BGP Ops configured on device. SKIP the trigger if there\n             is no BGP configured on the device.\n          2. Save the current device configurations using \"method\" specified.\n          3. Modify the inbound route map learned in step 1 using Genie BGP Conf.\n          4. Verify the change to inbound route map config under BGP is\n             reflected in device configuration.\n          5. Restore the device configuration to the original configuration saved\n             in step 2.\n          6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapIn",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the inbound route-map for dynamically learned BGP neighbors(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `vrf`\n                neighbor: `str`\n                address_family: `str`\n                route_map: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbors(s) which has inbound route-map\n           configured. SKIP the trigger if there is no BGP neighbors(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the inbound route-map of the learned BGP neighbor(s) from step 1\n           with BGP Conf object\n        4. Verify the inbound route-map of learned BGP neighbor(s) from step 3\n           changes to the modified name in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxr/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxr/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the inbound route-map for dynamically learned BGP neighbors(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `vrf`\n                neighbor: `str`\n                route_map: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbors(s) which has inbound route-map\n           configured. SKIP the trigger if there is no BGP neighbors(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the inbound route-map of the learned BGP neighbor(s) from step 1\n           with BGP Conf object\n        4. Verify the inbound route-map of learned BGP neighbor(s) from step 3\n           changes to the modified name in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapIn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/modify.py"
    }
  },
  "TriggerModifyBgpNeighborRoutemapOut": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the neighbor outbound route map configured under BGP and then restore the\n          configuration by reapplying the whole running configuration\n\n          trigger_datafile:\n              Mandatory Arguments:\n                  timeout:\n                      max_time (`int`): Maximum wait time for the trigger in seconds.\n                                        Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                      method (`str`): Method to recover the device configuration.\n                                      Supported methods:\n                                          'checkpoint': Rollback the configuration\n                                                        using checkpoint (nxos),\n                                                        archive file (iosxe),\n                                                        load the saved running-config\n                                                        file on disk (iosxr)\n              Optional Arguments:\n                  tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                       restored to the reference rate in seconds.\n                                       Default: 60\n                  tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                     is resumed in seconds. Default: 10\n                  timeout_recovery:\n                      Buffer recovery timeout make sure devices are recovered at the\n                      end of the trigger execution. Used when previous timeouts have\n                      been exhausted.\n                      max_time (`int`): Maximum wait time for the last step of the\n                                        trigger in seconds. Default: 180\n                      interval (`int`): Wait time between iteration when looping is\n                                        needed in seconds. Default: 15\n                  static:\n                      The keys below are dynamically learnt by default.\n                      However, they can also be set to a custom value when provided in the trigger datafile.\n\n                      instance: `str`\n                      vrf: `vrf`\n                      neighbor: `str`\n                      address_family: `str`\n                      route_map: `str`\n                      bgp_id: `int`\n\n                      (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                            OR\n                            interface: 'Ethernet1/1/1' (Specific value)\n          Steps:\n              1. Learn BGP Ops configured on device. SKIP the trigger if there\n                 is no BGP configured on the device.\n              2. Save the current device configurations using \"method\" specified.\n              3. Modify the outbound route map learned out step 1 using Genie BGP Conf.\n              4. Verify the change to outbound route map config under BGP is\n                 reflected in device configuration.\n              5. Restore the device configuration to the original configuration saved\n                 in step 2.\n              6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n        ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapOut",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxe/modify.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the outbound route-map for dynamically learned BGP neighbors(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `vrf`\n                    neighbor: `str`\n                    address_family: `str`\n                    route_map: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n\n        steps:\n            1. Learn BGP Ops object and store the BGP neighbors(s) which has inbound route-map\n               configured. SKIP the trigger if there is no BGP neighbors(s) found\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the outbound route-map of the learned BGP neighbor(s) from step 1\n               with BGP Conf object\n            4. Verify the outbound route-map of learned BGP neighbor(s) from step 3\n               changes to the modified name in step 3\n            5. Recover the device configurations to the one in step 2\n            6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxr/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/iosxr/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the outbound route-map for dynamically learned BGP neighbors(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbors(s) which has outbound route-map\n           configured. SKIP the trigger if there is no BGP neighbors(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the outbound route-map of the learned BGP neighbor(s) from step 1\n           with BGP Conf object\n        4. Verify the outbound route-map of learned BGP neighbor(s) from step 3\n           changes to the modified name in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborRoutemapOut",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/modify.py"
    }
  },
  "TriggerModifyBgpNeighborUpdateSource": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify the update source configured under BGP neighbor and then\n    restore the configuration by reapplying the whole running configuration\n\n    trigger_datafile:\n        Mandatory Arguments:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger in seconds.\n                                  Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n                method (`str`): Method to recover the device configuration.\n                                Supported methods:\n                                    'checkpoint': Rollback the configuration\n                                                  using checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config\n                                                  file on disk (iosxr)\n        Optional Arguments:\n            tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                 restored to the reference rate in seconds.\n                                 Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic\n                               is resumed in seconds. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the\n                end of the trigger execution. Used when previous timeouts have\n                been exhausted.\n                max_time (`int`): Maximum wait time for the last step of the\n                                  trigger in seconds. Default: 180\n                interval (`int`): Wait time between iteration when looping is\n                                  needed in seconds. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                update_source: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops configured on device. SKIP the trigger if there\n           is no BGP configured on the device.\n        2. Save the current device configurations using \"method\" specified.\n        3. Modify the update source of BGP neighbor learned in\n           step 1 using  Genie BGP Conf.\n        4. Verify the change to update source config under BGP neighbor\n           is reflected in device configuration.\n        5. Restore the device configuration to the original configuration saved\n           in step 2.\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1.\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpNeighborUpdateSource",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyBgpVpnRd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify  dynamically learned BGP vrf(s) route-distinguisher.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                rd: `str`\n                default_vrf: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) with route_distinguisher\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned BGP vrf(s) route-distinguisher from step 1 \n           with BGP Conf object\n        4. Verify the BGP vrf(s) route_distinguisher from step 3 are changed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.bgp.modify.TriggerModifyBgpVpnRd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/bgp/nxos/modify.py"
    }
  },
  "TriggerModifyDot1xUserCredential": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the dot1x user credential\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                client: `str`\n                vlan: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Dot1x Ops object to check if there is any 'auth' interface(s),\n           otherwise SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the dot1x user cedential to mimatched values with DOT1x Conf object on uut\n        4. Verify the status of dot1x changed from 'auth' to 'unauth' from step 3,\n           Verify the peer mac-address in UUT's table is 'drop'\n        5. Recover the device configurations to the one in step 2\n        6. Learn Dot1x Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "method": "archive",
      "source": {
        "class": "triggers.modify.dot1x.modify.TriggerModifyDot1xUserCredential",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 90
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 60
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/dot1x/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.dot1x.modify.TriggerModifyDot1xUserCredential",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/dot1x/modify.py"
    }
  },
  "TriggerModifyEthernetMtu": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the mtu for dynamically learned Ethernet interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n                    mtu: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n\n        steps:\n            1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the mtu of the learned Ethernet interface(s) from step 1\n               with Interface Conf object\n            4. Verify the mtu of the learned Ethernet interface(s) from step 3\n               changes to the modified value in step 3\n            5. Recover the device configurations to the one in step 2\n            6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyEthernetMtu",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/iosxe/modify.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the mtu for dynamically learned Ethernet interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n                    mtu: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n\n        steps:\n            1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the mtu of the learned Ethernet interface(s) from step 1\n               with Interface Conf object\n            4. Verify the mtu of the learned Ethernet interface(s) from step 3\n               changes to the modified value in step 3\n            5. Recover the device configurations to the one in step 2\n            6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyEthernetMtu",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/iosxr/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyEthernetMtu",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/iosxr/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the mtu for dynamically learned Ethernet interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                mtu: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the mtu of the learned Ethernet interface(s) from step 1\n           with Interface Conf object\n        4. Verify the mtu of the learned Ethernet interface(s) from step 3\n           changes to the modified value in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyEthernetMtu",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifyEvpnMsiteBgwDelayRestoreTime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the multisite bgw delay restore time dynamically learned vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    nve_name: `str`\n                    evpn_multisite_border_gateway: `int`\n                    multisite_convergence_time: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vxlan Ops object and store the the multisite bgw delay restore time.\n                SKIP the trigger if there is no VXLAN(s) found\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the multisite bgw delay restore time of the learned VXLAN from step 1\n                 with Vxlan Conf object\n            4. Verify the multisite bgw delay restore time of the learned VXLAN(s) from step 3\n                changes to the modified value in step 3.\n            5. Recover the device configurations to the one in step 2\n            6. Learn VXLAN Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "modify",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vxlan.modify.TriggerModifyEvpnMsiteBgwDelayRestoreTime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vxlan/nxos/modify.py"
    }
  },
  "TriggerModifyEvpnRd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the rd under evpn vni dynamically learned vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                     The keys below are dynamically learnt by default.\n                     However, they can also be set to a custom value when provided in the trigger datafile.\n\n                     instance: `str`\n                     vrf: `str`\n                     address_family: `str`\n                     rd: `str`\n                     rd_vniid: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vxlan Ops object and store the rd and it's vni  .\n                SKIP the trigger if there is no VXLAN(s) found\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the rd of the learned VXLAN from step 1 with Vxlan Conf object\n            4. Verify the rd of the learned VXLAN(s) from step 3\n               changes to the modified value in step 3.\n            5. Recover the device configurations to the one in step 2\n            6. Learn VXLAN Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "modify",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vxlan.modify.TriggerModifyEvpnRd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vxlan/nxos/modify.py"
    }
  },
  "TriggerModifyHsrpIpv4StateActiveToStandby": {
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "hsrp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.hsrp.modify.TriggerModifyHsrpIpv4StateActiveToStandby",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/hsrp/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the priority for dynamically learned HSRP ipv4 active group(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                version: `int`\n                group_number: `int`\n                priority: `int`\n                standby_router: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn HSRP Ops object and store the HSRP ipv4 group(s) which is active and\n           have standby connected. SKIP the trigger if there is no HSRP group(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the priority of the learned HSRP group(s) from step 1 to the lowest value\n           with HSRP Conf object\n        4. Verify the priority of the learned HSRP group(s) from step 3\n           changes to the modified value in step 3,\n           verify the state of the learned HSRP group(s) change from \"active\" to \"standby\"\n        5. Recover the device configurations to the one in step 2\n        6. Learn HSRP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.hsrp.modify.TriggerModifyHsrpIpv4StateActiveToStandby",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/hsrp/modify.py"
    }
  },
  "TriggerModifyHsrpIpv6StateActiveToStandby": {
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "hsrp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.hsrp.modify.TriggerModifyHsrpIpv6StateActiveToStandby",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/hsrp/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the priority for dynamically learned HSRP ipv6 active group(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                version: `int`\n                group_number: `int`\n                priority: `int`\n                standby_router: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn HSRP Ops object and store the HSRP ipv6 group(s) which is active and\n           have standby connected. SKIP the trigger if there is no HSRP group(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the priority of the learned HSRP group(s) from step 1 to the lowest value\n           with HSRP Conf object\n        4. Verify the priority of the learned HSRP group(s) from step 3\n           changes to the modified value in step 3,\n           verify the state of the learned HSRP group(s) change from \"active\" to \"standby\"\n        5. Recover the device configurations to the one in step 2\n        6. Learn HSRP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.hsrp.modify.TriggerModifyHsrpIpv6StateActiveToStandby",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/hsrp/modify.py"
    }
  },
  "TriggerModifyIgmpVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned enabled Igmp interface(s) version\n    then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Igmp Ops object and store the Igmp interface version\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned Igmp interface version from step 1 \n           with Igmp Conf object\n        4. Verify the Igmp interface version  from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.igmp.modify.TriggerModifyIgmpVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/igmp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.igmp.modify.TriggerModifyIgmpVersion",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/igmp/modify.py"
    }
  },
  "TriggerModifyLldpTimer": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.lldp.modify.TriggerModifyLldpTimer",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 60
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 60
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/lldp/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the LLDP timer.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn LLDP Ops object to check if LLDP enabled on peer routers,\n           otherwise SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the LLDP timer to user defined value with LLDP Conf object on peer routers\n        4. Verify the LLDP timer from step 3\n           changes to the modified value in step 3,\n           verify LLDP neighbors are not changed\n        5. Recover the device configurations to the one in step 2\n        6. Learn LLDP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.lldp.modify.TriggerModifyLldpTimer",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/lldp/modify.py"
    }
  },
  "TriggerModifyLoopbackInterfaceIp": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the ipv4 address for dynamically learned Loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n    steps:\n        1. Learn Interface Ops object and store the \"up\" \"ipv4\" Loopback interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the ipv4 address of the learned Loopback interface(s) from step 1\n           with Interface Conf object\n        4. Verify the ipv4 address of the learned Loopback interface(s) from step 3\n           changes to the modified value in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifyLoopbackInterfaceIpv6": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIpv6",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIpv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the ipv6 address for dynamically learned Loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" \"ipv6\" Loopback interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the ipv6 address of the learned Loopback interface(s) from step 1\n           with Interface Conf object\n        4. Verify the ipv6 address of the learned Loopback interface(s) from step 3\n           changes to the modified value in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyLoopbackInterfaceIpv6",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifyMldVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned enabled Mld interface(s) version\n    then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the Mld interface version\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned Mld interface version from step 1 \n           with Mld Conf object\n        4. Verify the Mld interface version  from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.mld.modify.TriggerModifyMldVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/mld/nxos/modify.py"
    }
  },
  "TriggerModifyMsdpDescription": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) description\n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                description: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) description\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) description from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) description from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) keepalive&holdtime interval\n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                keepalive_interval: `int`\n                holdtime_interval: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the 'established' MSDP peer(s)\n           keepalive&holdtime interval if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) keepalive&holdtime interval from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) keepalive&holdtime interval from step 3\n           is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpMeshGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) mesh-group then restore the\n      configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                mesh_group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the 'established' MSDP peer(s) mesh group\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) mesh group from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) mesh group from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpOriginatorId": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) originator-id then restore the\n      configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                originator_id: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP originator-id\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP originator-id from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP originator-id from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpPeerAs": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP 'established' peer(s) remote-as\n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                peer_as: `int`\n                connected_source: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP 'established' peer(s) remote-as\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) remote-as from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) remote-as from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpPeerAs",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpPeerAs",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpPeerConnectedSource": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP 'established' peer(s) connect-source \n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                connect_source: `str`\n                modify_connect_source: `str`\n                ip: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP 'established' peer(s) connect-source \n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) connect-source from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) connect-source  from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpPeerConnectedSource",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpPeerConnectedSource",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpReconnectInterval": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) reconnect interval\n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                connect_retry_interval: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP reconnect interval\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. MOdify the learned MSDP reconnect interval from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP reconnect interval from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpSaFilterIn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) sa-filter in then restore the\n      configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_filter_in: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-filter in\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. MOdify the learned MSDP peer(s) sa-filter in from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-filter in from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpSaFilterOut": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) sa-filter out then restore the\n      configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_filter_out: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-filter out\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. MOdify the learned MSDP peer(s) sa-filter in from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-filter out from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyMsdpSaLimit": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned MSDP peer(s) sa-limit then restore the\n      configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_limit: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-limit\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned MSDP peer(s) sa-limit from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-limit from step 3 is reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.msdp.modify.TriggerModifyMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/msdp/modify.py"
    }
  },
  "TriggerModifyNveMultisiteBgwInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the  multisite bgw interface dynamically learned vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                nve_name: `str`\n                source_if: `str`\n                nve_vni: `int`\n                multisite_bgw_if: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Vxlan Ops object and store the vni state which is active and has source interface\n            and multisite bgw interface. SKIP the trigger if there is no VXLAN(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the multisite bgw interface of the learned VXLAN from step 1 with Interface Conf object\n        4. Verify the multisite bgw interface of the learned VXLAN group(s) from step 3\n           changes to the modified value in step 3.\n        5. Recover the device configurations to the one in step 2\n        6. Learn VXLAN Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vxlan.modify.TriggerModifyNveMultisiteBgwInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vxlan/nxos/modify.py"
    }
  },
  "TriggerModifyNveSourceInterfaceLoopback": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure nve source interface and reapply the whole configurations of dynamically learned Vxlan(s).\n\n       trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n                 method (`str`): Method to recover the device configuration,\n                               Support methods:\n                                 'checkpoint': Rollback the configuration by\n                                               checkpoint (nxos),\n                                               archive file (iosxe),\n                                               load the saved running-config file on disk (iosxr)\n         Optional:\n             tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                  restored to the reference rate,\n                                  in second. Default: 60\n             tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                in second. Default: 10\n             timeout_recovery:\n                 Buffer recovery timeout when the previous timeout has been exhausted,\n                 to make sure the devices are recovered before ending the trigger\n\n                 max_time (`int`): Maximum wait time for the last step of the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n             static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 nve_name: `str`\n                 source_if: `str`\n                 multisite_bgw_if: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n       steps:\n         1. Learn Vxlan Ops object and store the nve source interface under nve\n            if has any, otherwise, SKIP the trigger\n         2. Save the current device configurations through \"method\" which user uses\n         3. Unconfigure the nve source interface with Interface Conf object\n         4. Verify the nve source interface from step 3 are no longer existed\n         5. Recover the device configurations to the one in step 2\n         6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n       ",
      "groups": [
        "modify",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vxlan.modify.TriggerModifyNveSourceInterfaceLoopback",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vxlan/nxos/modify.py"
    }
  },
  "TriggerModifyNveVniMcastGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the mcast group dynamically learned vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                nve_name: `str`\n                nve_vni: `int`\n                mcast: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vxlan Ops object and store the vni state which is active.\n                SKIP the trigger if there is no VXLAN(s) found\n            2. Save the current device configurations through \"method\" which user uses\n            3. Modify the mcast group of the learned VXLAN from step 1 with Interface Conf object\n            4. Verify the mcast group of the learned VXLAN(s) from step 3\n               changes to the modified value in step 3.\n            5. Recover the device configurations to the one in step 2\n            6. Learn VXLAN Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "modify",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vxlan.modify.TriggerModifyNveVniMcastGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vxlan/nxos/modify.py"
    }
  },
  "TriggerModifyPimNeighborFilter": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify dynamically learned PIM interface(s)'s neighbor-filter\n      then restore the configuration by reapplying the whole running configuration.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                address_family: `str`\n                interface: `str`\n                neighbor_filter: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Pim Ops object and store the PIM interface(s)'s neighbor-filter\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the learned PIM interface(s)'s neighbor-filter from step 1 \n           with Pim Conf object\n        4. Verify the PIM interface(s)'s neighbor-filter from step 3 is\n           reflected in device configuration\n        5. Recover the device configurations to the one in step 2\n        6. Learn Pim Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "pim",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.pim.modify.TriggerModifyPimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/pim/nxos/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.pim.modify.TriggerModifyPimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/pim/modify.py"
    }
  },
  "TriggerModifyPvstDesgToRoot": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the priority for dynamically learned \n    PVST Desg Forwarding instance to make it to Root\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                pvst_name: `str`\n                vlan: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn STP Ops object and store the PVST Desg FWD instance if has any,\n           otherwise SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the priority of the learned STP instance priority from step 1 to\n           the highest value with STP Conf object, to make this instance as Root\n        4. Verify the priority of the learned PVST Desg instance from step 3\n           changes to the modified value in step 3,\n           verify the role of the learned instance change from \"Desg\" to \"Root\"\n        5. Recover the device configurations to the one in step 2\n        6. Learn STP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.stp.modify.TriggerModifyPvstDesgToRoot",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/stp/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.stp.modify.TriggerModifyPvstDesgToRoot",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/stp/modify.py"
    }
  },
  "TriggerModifyRapidPvstDesgToRoot": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the priority for dynamically learned \n    Rapid-PVST Desg Forwarding instance to make it to Root\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                pvst_name: `str`\n                vlan: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn STP Ops object and store the Rapid-PVST Desg FWD instance if has any,\n           otherwise SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the priority of the learned STP instance priority from step 1 to\n           the highest value with STP Conf object, to make this instance as Root\n        4. Verify the priority of the learned Rapid-PVST Desg instance from step 3\n           changes to the modified value in step 3,\n           verify the role of the learned instance change from \"Desg\" to \"Root\"\n        5. Recover the device configurations to the one in step 2\n        6. Learn STP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "stp",
        "xe_sanity"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.stp.modify.TriggerModifyRapidPvstDesgToRoot",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 90
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/stp/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.modify.stp.modify.TriggerModifyRapidPvstDesgToRoot",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/stp/modify.py"
    }
  },
  "TriggerModifySviInterfaceIp": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySviInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySviInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the ipv4 address for dynamically learned Svi (Vlan) interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" \"ipv4\" Vlan interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the ipv4 address of the learned Vlan interface(s) from step 1\n           with Interface Conf object\n        4. Verify the ipv4 address of the learned Vlan interface(s) from step 3\n           changes to the modified value in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySviInterfaceIp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifySwitchportModeTrunkToAccess": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the switchport mode to access for dynamically learned interface(s).\n\n           trigger_datafile:\n               Mandatory:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iteration when looping is needed,\n                                       in second. Default: 15\n                       method (`str`): Method to recover the device configuration,\n                                     Support methods:\n                                       'checkpoint': Rollback the configuration by\n                                                     checkpoint (nxos),\n                                                     archive file (iosxe),\n                                                     load the saved running-config file on disk (iosxr)\n               Optional:\n                   tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                        restored to the reference rate,\n                                        in second. Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                      in second. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the end\n                       of the trigger execution. Used when previous timeouts have been exhausted.\n\n                       max_time (`int`): Maximum wait time for the last step of the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iteration when looping is needed,\n                                       in second. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                       interface: `str`\n\n                       (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                           OR\n                           interface: 'Ethernet1/1/1' (Specific value)\n\n           steps:\n               1. Learn Interface Ops object and store the \"up\" interface(s)\n                  if has any, otherwise, SKIP the trigger\n               2. Save the current device configurations through \"method\" which user uses\n               3. Modify the switchport mode to \"access\" of the learned  interface(s) from step 1\n                  with Interface Conf object\n               4. Verify the switchport mode of the learned interface(s) from step 3\n                  changes to \"access\"  in step 3\n               5. Recover the device configurations to the one in step 2\n               6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n           ",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySwitchportModeTrunkToAccess",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/iosxe/modify.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySwitchportModeTrunkToAccess",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/iosxe/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the mode (\"trunk\" to \"access\") for dynamically learned switchport interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" \"trunk\" interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the mode of the learned \"trunk\" interface(s) from step 1 to \"access\"\n           with Interface Conf object\n        4. Verify the mode of the learned \"trunk\" interface(s) from step 3\n           changes to \"access\" in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifySwitchportModeTrunkToAccess",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifyVlanMtu": {
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "Vlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyVlanMtu",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    },
    "top": {
      "contribute": false,
      "doc": "Modify and revert the mtu for dynamically learned Vlan interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Vlan interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the mtu of the learned Vlan interface(s) from step 1\n           with Interface Conf object\n        4. Verify the mtu of the learned Vlan interface(s) from step 3\n           changes to the modified value in step 3\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.modify.interface.modify.TriggerModifyVlanMtu",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/interface/modify.py"
    }
  },
  "TriggerModifyVlanVnsegment": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Modify and revert the vnsegemnt for dynamically learned vlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vlan: `str`\n                vn_segment: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Vlan Ops object and store the vlan which is active and has vnsegment.\n            SKIP the trigger if there is no VLAN(s) found\n        2. Save the current device configurations through \"method\" which user uses\n        3. Modify the vnsegment of the learned VLAN from step 1 with VLAN Conf object\n        4. Verify the vnsegment of the learned VLAN  from step 3\n           changes to the modified value in step 3,\n        5. Recover the device configurations to the one in step 2\n        6. Learn VLAN Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "modify",
        "vlan",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.modify.vlan.modify.TriggerModifyVlanVnsegment",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/modify/vlan/nxos/modify.py"
    }
  },
  "TriggerProcessCliRestartBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running BGP process(es) with CLI command \"restart bgp <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP process(es) with command \"show system internal sysmgr service name bgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned BGP process(es) from step 1 with command \"restart bgp <process>\"\n        3. Verify the pid of BGP process(es) from step 2 is changed,\n           and restart count of BGP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.bgp.processrestart.TriggerProcessCliRestartBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/bgp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartEigrp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running EIGRP process(es) with CLI command \"restart eigrp <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn EIGRP process(es) with command \"show system internal sysmgr service name eigrp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned EIGRP process(es) from step 1 with command \"restart eigrp <process>\"\n        3. Verify the pid of EIGRP process(es) from step 2 is changed,\n           and restart count of EIGRP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "eigrp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.eigrp.processrestart.TriggerProcessCliRestartEigrp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/eigrp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartIgmp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running IGMP process(es) with CLI command \"restart igmp <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn IGMP process(es) with command \"show system internal sysmgr service name igmp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned IGMP process(es) from step 1 with command \"restart igmp <process>\"\n        3. Verify the pid of IGMP process(es) from step 2 is changed,\n           and restart count of IGMP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "igmp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.igmp.processrestart.TriggerProcessCliRestartIgmp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/igmp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartIsis": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ISIS process(es) with CLI command \"restart isis <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ISIS process(es) with command \"show system internal sysmgr service name isis\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ISIS process(es) from step 1 with command \"restart isis <process>\"\n        3. Verify the pid of ISIS process(es) from step 2 is changed,\n           and restart count of ISIS process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "isis",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.isis.processrestart.TriggerProcessCliRestartIsis",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/isis/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartMsdp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running MSDP process(es) with CLI command \"restart msdp <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn MSDP process(es) with command \"show system internal sysmgr service name msdp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned MSDP process(es) from step 1 with command \"restart msdp <process>\"\n        3. Verify the pid of MSDP process(es) from step 2 is changed,\n           and restart count of MSDP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.msdp.processrestart.TriggerProcessCliRestartMsdp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/msdp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartOspf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPF process(es) with CLI command \"restart ospf <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPF process(es) with command \"show system internal sysmgr service name ospf\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPF process(es) from step 1 with command \"restart ospf <process>\"\n        3. Verify the pid of OSPF process(es) from step 2 is changed,\n           and restart count of OSPF process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "ospf",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospf.processrestart.TriggerProcessCliRestartOspf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospf/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartOspfv3": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPFv3 process(es) with CLI command \"restart ospfv3 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPFv3 process(es) with command \"show system internal sysmgr service name ospfv3\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPFv3 process(es) from step 1 with command \"restart ospfv3 <process>\"\n        3. Verify the pid of OSPFv3 process(es) from step 2 is changed,\n           and restart count of OSPFv3 process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "ospfv3",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospfv3.processrestart.TriggerProcessCliRestartOspfv3",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospfv3/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartPim": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM process(es) with CLI command \"restart pim <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM process(es) with command \"show system internal sysmgr service name pim\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM process(es) from step 1 with command \"restart pim <process>\"\n        3. Verify the pid of PIM process(es) from step 2 is changed,\n           and restart count of PIM process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "pim",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim.processrestart.TriggerProcessCliRestartPim",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartPim6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM6 process(es) with CLI command \"restart pim6 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM6 process(es) with command \"show system internal sysmgr service name pim6\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM6 process(es) from step 1 with command \"restart pim6 <process>\"\n        3. Verify the pid of PIM6 process(es) from step 2 is changed,\n           and restart count of PIM6 process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "pim6",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim6.processrestart.TriggerProcessCliRestartPim6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim6/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartRip": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RIP process(es) with CLI command \"restart rip <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RIP process(es) with command \"show system internal sysmgr service name rip\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RIP process(es) from step 1 with command \"restart rip <process>\"\n        3. Verify the pid of RIP process(es) from step 2 is changed,\n           and restart count of RIP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "rip",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rip.processrestart.TriggerProcessCliRestartRip",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rip/nxos/processrestart.py"
    }
  },
  "TriggerProcessCliRestartRsvp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RSVP process(es) with CLI command \"restart rsvp <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RSVP process(es) with command \"show system internal sysmgr service name rsvp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RSVP process(es) from step 1 with command \"restart rsvp <process>\"\n        3. Verify the pid of RSVP process(es) from step 2 is changed,\n           and restart count of RSVP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "rsvp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rsvp.processrestart.TriggerProcessCliRestartRsvp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rsvp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartAclmgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Aclmgr process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Aclmgr process(es) with command \"show system internal sysmgr service name aclmgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Aclmgr process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Aclmgr process(es) from step 2 is changed,\n           restart count of Aclmgr process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Aclmgr process from step 2,\n           and only 1 core generated on aclmgr per Aclmgr process from step 2\n\n    ",
      "groups": [
        "restart",
        "aclmgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.aclmgr.processrestart.TriggerProcessCrashRestartAclmgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/aclmgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartBfd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Bfd process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Bfd process(es) with command \"show system internal sysmgr service name bfd\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Bfd process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Bfd process(es) from step 2 is changed,\n           restart count of Bfd process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Bfd process from step 2,\n           and only 1 core generated on bfd per Bfd process from step 2\n\n    ",
      "groups": [
        "restart",
        "bfd",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.bfd.processrestart.TriggerProcessCrashRestartBfd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/bfd/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running BGP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP process(es) with command \"show system internal sysmgr service name bgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned BGP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of BGP process(es) from step 2 is changed,\n           restart count of BGP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per BGP process from step 2,\n           and only 1 core generated on bgp per BGP process from step 2\n\n    ",
      "groups": [
        "restart",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.bgp.processrestart.TriggerProcessCrashRestartBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/bgp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartCfs": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Cfs process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Cfs process(es) with command \"show system internal sysmgr service name cfs\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Cfs process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Cfs process(es) from step 2 is changed,\n           restart count of Cfs process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Cfs process from step 2,\n           and only 1 core generated on cfs per Cfs process from step 2\n\n    ",
      "groups": [
        "restart",
        "cfg",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.cfs.processrestart.TriggerProcessCrashRestartCfs",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/cfs/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartConfCheck": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ConfCheck process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ConfCheck process(es) with command \"show system internal sysmgr service name confcheck\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ConfCheck process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of ConfCheck process(es) from step 2 is changed,\n           restart count of ConfCheck process(es) from step 2 is increased by 1,\n           and only 1 core generated on confcheck per ConfCheck process from step 2\n\n    ",
      "groups": [
        "restart",
        "conf_check",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.confcheck.processrestart.TriggerProcessCrashRestartConfCheck",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/confcheck/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartEigrp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running EIGRP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn EIGRP process(es) with command \"show system internal sysmgr service name eigrp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned EIGRP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of EIGRP process(es) from step 2 is changed,\n           restart count of EIGRP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per EIGRP process from step 2,\n           and only 1 core generated on eigrp per EIGRP process from step 2\n\n    ",
      "groups": [
        "restart",
        "eigrp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.eigrp.processrestart.TriggerProcessCrashRestartEigrp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/eigrp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartEltm": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Eltm process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Eltm process(es) with command \"show system internal sysmgr service name eltm\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Eltm process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Eltm process(es) from step 2 is changed,\n           restart count of Eltm process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Eltm process from step 2,\n           and only 1 core generated on eltm per Eltm process from step 2\n\n    ",
      "groups": [
        "restart",
        "eltm",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.eltm.processrestart.TriggerProcessCrashRestartEltm",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/eltm/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartFeatureMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running feature-mgr process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn feature-mgr process(es) with command \"show system internal sysmgr service name feature-mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned feature-mgr process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of feature-mgr process(es) from step 2 is changed,\n           restart count of feature-mgr process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per feature-mgr process from step 2,\n           and only 1 core generated on feature-mgr per feature-mgr process from step 2\n\n    ",
      "groups": [
        "restart",
        "feature_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.feature_mgr.processrestart.TriggerProcessCrashRestartFeatureMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/feature_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartFsDaemon": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running fs-daemon process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn fs-daemon process(es) with command \"show system internal sysmgr service name fs-daemon\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned fs-daemon process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of fs-daemon process(es) from step 2 is changed,\n           restart count of fs-daemon process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per fs-daemon process from step 2,\n           and only 1 core generated on fs-daemon per fs-daemon process from step 2\n\n    ",
      "groups": [
        "restart",
        "fs-daemon",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.fs_daemon.processrestart.TriggerProcessCrashRestartFsDaemon",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/fs_daemon/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartGlbp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Glbp process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Glbp process(es) with command \"show system internal sysmgr service name glbp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Glbp process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Glbp process(es) from step 2 is changed,\n           restart count of Glbp process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Glbp process from step 2,\n           and only 1 core generated on glbp per Glbp process from step 2\n\n    ",
      "groups": [
        "restart",
        "glbp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.glbp.processrestart.TriggerProcessCrashRestartGlbp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/glbp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartIgmp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running IGMP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn IGMP process(es) with command \"show system internal sysmgr service name igmp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned IGMP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of IGMP process(es) from step 2 is changed,\n           restart count of IGMP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per IGMP process from step 2,\n           and only 1 core generated on igmp per IGMP process from step 2\n\n    ",
      "groups": [
        "restart",
        "igmp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.igmp.processrestart.TriggerProcessCrashRestartIgmp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/igmp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartIntersight": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Intersight process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name intersight\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           restart count of Monitor process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Monitor process from step 2,\n           and only 1 core generated on Monitor per Monitor process from step 2\n\n    ",
      "groups": [
        "restart",
        "intersight",
        "nxosdc"
      ],
      "source": {
        "class": "triggers.processrestart.intersight.processrestart.TriggerProcessCrashRestartIntersight",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/intersight/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartIsis": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ISIS process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ISIS process(es) with command \"show system internal sysmgr service name isis\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ISIS process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of ISIS process(es) from step 2 is changed,\n           restart count of ISIS process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per ISIS process from step 2,\n           and only 1 core generated on isis per ISIS process from step 2\n\n    ",
      "groups": [
        "restart",
        "isis",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.isis.processrestart.TriggerProcessCrashRestartIsis",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/isis/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartL2rib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running L2rib process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn L2rib process(es) with command \"show system internal sysmgr service name l2rib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned L2rib process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of L2rib process(es) from step 2 is changed,\n           restart count of L2rib process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per L2rib process from step 2,\n           and only 1 core generated on l2rib per L2rib process from step 2\n\n    ",
      "groups": [
        "restart",
        "l2rib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.l2rib.processrestart.TriggerProcessCrashRestartL2rib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/l2rib/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartLacp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Lacp process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Lacp process(es) with command \"show system internal sysmgr service name lacp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Lacp process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Lacp process(es) from step 2 is changed,\n           restart count of Lacp process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Lacp process from step 2,\n           and only 1 core generated on lacp per Lacp process from step 2\n\n    ",
      "groups": [
        "restart",
        "lacp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.lacp.processrestart.TriggerProcessCrashRestartLacp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/lacp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartMonitor": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Monitor process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name monitor\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           restart count of Monitor process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Monitor process from step 2,\n           and only 1 core generated on Monitor per Monitor process from step 2\n\n    ",
      "groups": [
        "restart",
        "monitor",
        "span"
      ],
      "source": {
        "class": "triggers.processrestart.monitor.processrestart.TriggerProcessCrashRestartMonitor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/monitor/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartMonitorc": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Monitorc process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitorc process(es) with command \"show system internal sysmgr service name monitorc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitorc process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitorc process(es) from step 2 is changed,\n           restart count of Monitorc process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Monitorc process from step 2,\n           and only 1 core generated on monitorc per Monitorc process from step 2\n\n    ",
      "groups": [
        "restart",
        "monitorc",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.monitorc.processrestart.TriggerProcessCrashRestartMonitorc",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/monitorc/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartMrib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Mrib process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core. This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Mrib process(es) with command \"show system internal sysmgr service name mrib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Mrib process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Reconnect to the router due to the router switchover after restarting process mrib.\n           Verify the pid of Mrib process(es) from step 2 is changed,\n           restart count of Mrib process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Mrib process from step 2,\n           and only 1 core generated on mrib per Mrib process from step 2\n\n    ",
      "groups": [
        "restart",
        "mrib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.mrib.processrestart.TriggerProcessCrashRestartMrib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/mrib/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartMsdp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running MSDP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn MSDP process(es) with command \"show system internal sysmgr service name msdp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned MSDP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of MSDP process(es) from step 2 is changed,\n           restart count of MSDP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per MSDP process from step 2,\n           and only 1 core generated on msdp per MSDP process from step 2\n\n    ",
      "groups": [
        "restart",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.msdp.processrestart.TriggerProcessCrashRestartMsdp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/msdp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartNXOSDC": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running NXOS DC process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name nxos_dc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           restart count of Monitor process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Monitor process from step 2,\n           and only 1 core generated on Monitor per Monitor process from step 2\n\n    ",
      "groups": [
        "restart",
        "intersight",
        "nxosdc"
      ],
      "source": {
        "class": "triggers.processrestart.nxosdc.processrestart.TriggerProcessCrashRestartNXOSDC",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/nxosdc/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartNetstack": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Netstack process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Netstack process(es) with command \"show system internal sysmgr service name netstack\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Netstack process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Reconnect to device and verify the pid of Netstack process(es) from step 2 is changed,\n           restart count of Netstack process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Netstack process from step 2,\n           and only 1 core generated on netstack per Netstack process from step 2\n\n    ",
      "groups": [
        "restart",
        "netstack",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.netstack.processrestart.TriggerProcessCrashRestartNetstack",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/netstack/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartNgmvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ngmvpn process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ngmvpn process(es) with command \"show system internal sysmgr service name ngmvpn\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ngmvpn process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of ngmvpn process(es) from step 2 is changed,\n           restart count of ngmvpn process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per BGP process from step 2,\n           and only 1 core generated on bgp per ngmvpn process from step 2\n\n    ",
      "groups": [
        "restart",
        "trm"
      ],
      "source": {
        "class": "triggers.processrestart.trm.processrestart.TriggerProcessCrashRestartNgmvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/trm/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartNve": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Nve process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Nve process(es) with command \"show system internal sysmgr service name nve\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Nve process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Nve process(es) from step 2 is changed,\n           restart count of Nve process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Nve process from step 2,\n           and only 1 core generated on nve per Nve process from step 2\n\n    ",
      "groups": [
        "restart",
        "nve",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.nve.processrestart.TriggerProcessCrashRestartNve",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/nve/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartOspf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPF process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPF process(es) with command \"show system internal sysmgr service name ospf\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPF process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of OSPF process(es) from step 2 is changed,\n           restart count of OSPF process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per OSPF process from step 2,\n           and only 1 core generated on ospf per OSPF process from step 2\n\n    ",
      "groups": [
        "restart",
        "ospf",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospf.processrestart.TriggerProcessCrashRestartOspf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospf/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartOspfv3": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPFv3 process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPFv3 process(es) with command \"show system internal sysmgr service name ospfv3\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPFv3 process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of OSPFv3 process(es) from step 2 is changed,\n           restart count of OSPFv3 process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per OSPFv3 process from step 2,\n           and only 1 core generated on ospfv3 per OSPFv3 process from step 2\n\n    ",
      "groups": [
        "restart",
        "ospfv3",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospfv3.processrestart.TriggerProcessCrashRestartOspfv3",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospfv3/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartPim": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM process(es) with command \"show system internal sysmgr service name pim\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of PIM process(es) from step 2 is changed,\n           restart count of PIM process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per PIM process from step 2,\n           and only 1 core generated on pim per PIM process from step 2\n\n    ",
      "groups": [
        "restart",
        "pim",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim.processrestart.TriggerProcessCrashRestartPim",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartPim6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM6 process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM6 process(es) with command \"show system internal sysmgr service name pim6\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM6 process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of PIM6 process(es) from step 2 is changed,\n           restart count of PIM6 process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per PIM6 process from step 2,\n           and only 1 core generated on pim6 per PIM6 process from step 2\n\n    ",
      "groups": [
        "restart",
        "pim6",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim6.processrestart.TriggerProcessCrashRestartPim6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim6/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartPlugin": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Plugin process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Plugin process(es) with command \"show system internal sysmgr service name plugin\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Plugin process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Plugin process(es) from step 2 is changed,\n           restart count of Plugin process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Plugin process from step 2,\n           and only 1 core generated on plugin per Plugin process from step 2\n\n    ",
      "groups": [
        "restart",
        "plugin",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.plugin.processrestart.TriggerProcessCrashRestartPlugin",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/plugin/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartRip": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RIP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RIP process(es) with command \"show system internal sysmgr service name rip\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RIP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of RIP process(es) from step 2 is changed,\n           restart count of RIP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per RIP process from step 2,\n           and only 1 core generated on rip per RIP process from step 2\n\n    ",
      "groups": [
        "restart",
        "rip",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rip.processrestart.TriggerProcessCrashRestartRip",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rip/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartRsvp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RSVP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RSVP process(es) with command \"show system internal sysmgr service name rsvp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RSVP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of RSVP process(es) from step 2 is changed,\n           restart count of RSVP process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per RSVP process from step 2,\n           and only 1 core generated on rsvp per RSVP process from step 2\n\n    ",
      "groups": [
        "restart",
        "rsvp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rsvp.processrestart.TriggerProcessCrashRestartRsvp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rsvp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartStp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Stp process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Stp process(es) with command \"show system internal sysmgr service name stp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Stp process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Stp process(es) from step 2 is changed,\n           restart count of Stp process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Stp process from step 2,\n           and only 1 core generated on stp per Stp process from step 2\n\n    ",
      "groups": [
        "restart",
        "stp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.stp.processrestart.TriggerProcessCrashRestartStp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/stp/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartSyslogd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running BGP process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP process(es) with command \"show system internal sysmgr service name bgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned BGP process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of BGP process(es) from step 2 is changed,\n           restart count of BGP process(es) from step 2 is increased by 1,\n           and only 1 core generated on bgp per BGP process from step 2\n\n    ",
      "groups": [
        "restart",
        "syslogd",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.syslogd.processrestart.TriggerProcessCrashRestartSyslogd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/syslogd/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartSysmgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Sysmgr process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core. This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Sysmgr process(es) with command \"show processes | include sysmgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Sysmgr process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Reconnect to the router due to the router switchover after restarting process sysmgr.\n           Verify the pid of Sysmgr process(es) from step 2 is changed,\n           restart count of Sysmgr process(es) from step 2 is increased by 1,\n           and only 1 core generated on sysmgr per Sysmgr process from step 2\n\n    ",
      "groups": [
        "restart",
        "sysmgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.sysmgr.processrestart.TriggerProcessCrashRestartSysmgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/sysmgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartTunnel": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Tunnel process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Tunnel process(es) with command \"show system internal sysmgr service name tunnel\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Tunnel process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Tunnel process(es) from step 2 is changed,\n           restart count of Tunnel process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Tunnel process from step 2,\n           and only 1 core generated on tunnel per Tunnel process from step 2\n\n    ",
      "groups": [
        "restart",
        "tunnel",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.tunnel.processrestart.TriggerProcessCrashRestartTunnel",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/tunnel/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartUrib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Urib process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core. This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Urib process(es) with command \"show system internal sysmgr service name urib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Urib process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Reconnect to the router due to the router switchover after restarting process urib.\n           Verify the pid of Urib process(es) from step 2 is changed,\n           restart count of Urib process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Urib process from step 2,\n           and only 1 core generated on urib per Urib process from step 2\n\n    ",
      "groups": [
        "restart",
        "urib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.urib.processrestart.TriggerProcessCrashRestartUrib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/urib/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartVdcMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running vdc_mgr process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn vdc_mgr process(es) with command \"show system internal sysmgr service name vdc_mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned vdc_mgr process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of vdc_mgr process(es) from step 2 is changed,\n           restart count of vdc_mgr process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per vdc_mgr process from step 2,\n           and only 1 core generated on vdc_mgr per vdc_mgr process from step 2\n\n    ",
      "groups": [
        "restart",
        "vdc_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vdc_mgr.processrestart.TriggerProcessCrashRestartVdcMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vdc_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartVlanMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running vlan_mgr process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn vlan_mgr process(es) with command \"show system internal sysmgr service name vlan_mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned vlan_mgr process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of vlan_mgr process(es) from step 2 is changed,\n           restart count of vlan_mgr process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per vlan_mgr process from step 2,\n           and only 1 core generated on vlan_mgr per vlan_mgr process from step 2\n\n    ",
      "groups": [
        "restart",
        "vlan_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vlan_mgr.processrestart.TriggerProcessCrashRestartVlanMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vlan_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessCrashRestartVpc": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Vpc process(es) with linux command \"kill -6 <process>\",\n    expecting process crashes and generates a core.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Vpc process(es) with command \"show system internal sysmgr service name vpc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Vpc process(es) from step 1 with command \"kill -6 <process>\"\n           in linux shell mode\n        3. Verify the pid of Vpc process(es) from step 2 is changed,\n           restart count of Vpc process(es) from step 2 is increased by 1,\n           the count of \"SYSMGR-2-SERVICE_CRASHED:\" in log is 1 per Vpc process from step 2,\n           and only 1 core generated on vpc per Vpc process from step 2\n\n    ",
      "groups": [
        "restart",
        "vpc",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vpc.processrestart.TriggerProcessCrashRestartVpc",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vpc/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartAclmgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Aclmgr process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Aclmgr process(es) with command \"show system internal sysmgr service name aclmgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Aclmgr process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Aclmgr process(es) from step 2 is changed,\n           and restart count of Aclmgr process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "aclmgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.aclmgr.processrestart.TriggerProcessKillRestartAclmgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/aclmgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartBfd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Bfd process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Bfd process(es) with command \"show system internal sysmgr service name bfd\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Bfd process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Bfd process(es) from step 2 is changed,\n           and restart count of Bfd process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "bfd",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.bfd.processrestart.TriggerProcessKillRestartBfd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/bfd/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running BGP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP process(es) with command \"show system internal sysmgr service name bgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned BGP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of BGP process(es) from step 2 is changed,\n           and restart count of BGP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.bgp.processrestart.TriggerProcessKillRestartBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/bgp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartCfs": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Cfs process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Cfs process(es) with command \"show system internal sysmgr service name cfs\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Cfs process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Cfs process(es) from step 2 is changed,\n           and restart count of Cfs process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "cfg",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.cfs.processrestart.TriggerProcessKillRestartCfs",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/cfs/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartConfCheck": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ConfCheck process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ConfCheck process(es) with command \"show system internal sysmgr service name confcheck\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ConfCheck process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of ConfCheck process(es) from step 2 is changed,\n           and restart count of ConfCheck process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "conf_check",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.confcheck.processrestart.TriggerProcessKillRestartConfCheck",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/confcheck/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartEigrp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running EIGRP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn EIGRP process(es) with command \"show system internal sysmgr service name eigrp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned EIGRP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of EIGRP process(es) from step 2 is changed,\n           and restart count of EIGRP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "eigrp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.eigrp.processrestart.TriggerProcessKillRestartEigrp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/eigrp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartEltm": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Eltm process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Eltm process(es) with command \"show system internal sysmgr service name eltm\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Eltm process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Eltm process(es) from step 2 is changed,\n           and restart count of Eltm process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "eltm",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.eltm.processrestart.TriggerProcessKillRestartEltm",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/eltm/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartFeatureMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running feature-mgr process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn feature-mgr process(es) with command \"show system internal sysmgr service name feature-mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned feature-mgr process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of feature-mgr process(es) from step 2 is changed,\n           and restart count of feature-mgr process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "feature_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.feature_mgr.processrestart.TriggerProcessKillRestartFeatureMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/feature_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartFsDaemon": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running fs-daemon process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn fs-daemon process(es) with command \"show system internal sysmgr service name fs-daemon\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned fs-daemon process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of fs-daemon process(es) from step 2 is changed,\n           and restart count of fs-daemon process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "fs-daemon",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.fs_daemon.processrestart.TriggerProcessKillRestartFsDaemon",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/fs_daemon/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartGlbp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Glbp process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Glbp process(es) with command \"show system internal sysmgr service name glbp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Glbp process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Glbp process(es) from step 2 is changed,\n           and restart count of Glbp process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "glbp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.glbp.processrestart.TriggerProcessKillRestartGlbp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/glbp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartIgmp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running IGMP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn IGMP process(es) with command \"show system internal sysmgr service name imgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned IGMP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of IGMP process(es) from step 2 is changed,\n           and restart count of IGMP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "igmp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.igmp.processrestart.TriggerProcessKillRestartIgmp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/igmp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartIntersight": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Intersight process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name intersight\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           and restart count of Monitor process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "intersight",
        "nxosdc"
      ],
      "source": {
        "class": "triggers.processrestart.intersight.processrestart.TriggerProcessKillRestartIntersight",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/intersight/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartIsis": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ISIS process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ISIS process(es) with command \"show system internal sysmgr service name isis\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned ISIS process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of ISIS process(es) from step 2 is changed,\n           and restart count of ISIS process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "isis",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.isis.processrestart.TriggerProcessKillRestartIsis",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/isis/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartL2rib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running L2rib process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn L2rib process(es) with command \"show system internal sysmgr service name l2rib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned L2rib process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of L2rib process(es) from step 2 is changed,\n           and restart count of L2rib process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "l2rib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.l2rib.processrestart.TriggerProcessKillRestartL2rib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/l2rib/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartLacp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Lacp process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Lacp process(es) with command \"show system internal sysmgr service name lacp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Lacp process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Lacp process(es) from step 2 is changed,\n           and restart count of Lacp process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "lacp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.lacp.processrestart.TriggerProcessKillRestartLacp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/lacp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartMonitor": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Monitor process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name monitor\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           and restart count of Monitor process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "monitor",
        "span"
      ],
      "source": {
        "class": "triggers.processrestart.monitor.processrestart.TriggerProcessKillRestartMonitor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/monitor/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartMonitorc": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Monitorc process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitorc process(es) with command \"show system internal sysmgr service name monitorc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitorc process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitorc process(es) from step 2 is changed,\n           and restart count of Monitorc process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "monitorc",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.monitorc.processrestart.TriggerProcessKillRestartMonitorc",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/monitorc/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartMrib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Mrib process(es) with Linux command \"kill -9 <process>\".\n    This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Mrib process(es) with command \"show system internal sysmgr service name mrib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Mrib process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Reconnect to the router due to the router switchover after restarting process mrib.\n           Verify the pid of Mrib process(es) from step 2 is changed,\n           and restart count of Mrib process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "mrib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.mrib.processrestart.TriggerProcessKillRestartMrib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/mrib/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartMsdp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running MSDP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn MSDP process(es) with command \"show system internal sysmgr service name msdp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned MSDP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of MSDP process(es) from step 2 is changed,\n           and restart count of MSDP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "msdp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.msdp.processrestart.TriggerProcessKillRestartMsdp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/msdp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartNXOSDC": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running NXOS DC process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Monitor process(es) with command \"show system internal sysmgr service name nxos_dc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Monitor process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Monitor process(es) from step 2 is changed,\n           and restart count of Monitor process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "intersight",
        "nxosdc"
      ],
      "source": {
        "class": "triggers.processrestart.nxosdc.processrestart.TriggerProcessKillRestartNXOSDC",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/nxosdc/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartNetstack": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Netstack process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Netstack process(es) with command \"show system internal sysmgr service name netstack\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Netstack process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Reconnect to device and verify the pid of Netstack process(es) from step 2 is changed,\n           and restart count of Netstack process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "netstack",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.netstack.processrestart.TriggerProcessKillRestartNetstack",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/netstack/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartNgmvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running ngmvpn process(es) with kill command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn ngmvpn process(es) with command \"show system internal sysmgr service name ngmvpn\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Kill the learned ngmvpn process(es) from step 1 with command \"kill -9 <process>\"\n        3. Verify the pid of ngmvpn process(es) from step 2 is changed,\n           and restart count of ngmvpn process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "trm"
      ],
      "source": {
        "class": "triggers.processrestart.trm.processrestart.TriggerProcessKillRestartNgmvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/trm/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartNve": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Nve process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Nve process(es) with command \"show system internal sysmgr service name nve\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Nve process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Nve process(es) from step 2 is changed,\n           and restart count of Nve process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "nve",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.nve.processrestart.TriggerProcessKillRestartNve",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/nve/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartOspf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPF process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPF process(es) with command \"show system internal sysmgr service name ospf\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPF process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of OSPF process(es) from step 2 is changed,\n           and restart count of OSPF process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "ospf",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospf.processrestart.TriggerProcessKillRestartOspf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospf/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartOspfv3": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running OSPFv3 process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn OSPFv3 process(es) with command \"show system internal sysmgr service name ospfv3\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned OSPFv3 process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of OSPFv3 process(es) from step 2 is changed,\n           and restart count of OSPFv3 process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "ospfv3",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.ospfv3.processrestart.TriggerProcessKillRestartOspfv3",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/ospfv3/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartPim": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM process(es) with command \"show system internal sysmgr service name pim\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of PIM process(es) from step 2 is changed,\n           and restart count of PIM process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "pim",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim.processrestart.TriggerProcessKillRestartPim",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartPim6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running PIM6 process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn PIM6 process(es) with command \"show system internal sysmgr service name pim6\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned PIM6 process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of PIM6 process(es) from step 2 is changed,\n           and restart count of PIM6 process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "pim6",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.pim6.processrestart.TriggerProcessKillRestartPim6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/pim6/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartPlugin": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Plugin process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Plugin process(es) with command \"show system internal sysmgr service name plugin\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Plugin process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Plugin process(es) from step 2 is changed,\n           and restart count of Plugin process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "plugin",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.plugin.processrestart.TriggerProcessKillRestartPlugin",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/plugin/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartRip": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RIP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RIP process(es) with command \"show system internal sysmgr service name rip\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RIP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of RIP process(es) from step 2 is changed,\n           and restart count of RIP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "rip",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rip.processrestart.TriggerProcessKillRestartRip",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rip/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartRsvp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running RSVP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn RSVP process(es) with command \"show system internal sysmgr service name rsvp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned RSVP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of RSVP process(es) from step 2 is changed,\n           and restart count of RSVP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "rsvp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.rsvp.processrestart.TriggerProcessKillRestartRsvp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/rsvp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartStp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Stp process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Stp process(es) with command \"show system internal sysmgr service name stp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Stp process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Stp process(es) from step 2 is changed,\n           and restart count of Stp process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "stp",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.stp.processrestart.TriggerProcessKillRestartStp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/stp/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartSyslogd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running BGP process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn BGP process(es) with command \"show system internal sysmgr service name bgp\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned BGP process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of BGP process(es) from step 2 is changed,\n           and restart count of BGP process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "syslogd",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.syslogd.processrestart.TriggerProcessKillRestartSyslogd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/syslogd/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartSysmgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Sysmgr process(es) with Linux command \"kill -9 <process>\".\n    This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Sysmgr process(es) with command \"show processes | include sysmgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Sysmgr process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode.\n        3. Reconnect to the router due to the router switchover after restarting process sysmgr.\n           Verify the pid of Sysmgr process(es) from step 2 is changed,\n           and restart count of Sysmgr process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "sysmgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.sysmgr.processrestart.TriggerProcessKillRestartSysmgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/sysmgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartTunnel": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Tunnel process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Tunnel process(es) with command \"show system internal sysmgr service name tunnel\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Tunnel process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Tunnel process(es) from step 2 is changed,\n           and restart count of Tunnel process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "tunnel",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.tunnel.processrestart.TriggerProcessKillRestartTunnel",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/tunnel/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartUrib": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Urib process(es) with Linux command \"kill -9 <process>\".\n    This will cause device to switchover.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Urib process(es) with command \"show system internal sysmgr service name urib\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Urib process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode.\n        3. Reconnect to the router due to the router switchover after restarting process urib.\n           Verify the pid of Urib process(es) from step 2 is changed,\n           and restart count of Urib process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "urib",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.urib.processrestart.TriggerProcessKillRestartUrib",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/urib/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartVdcMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running vdc_mgr process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn vdc_mgr process(es) with command \"show system internal sysmgr service name vdc_mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned vdc_mgr process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of vdc_mgr process(es) from step 2 is changed,\n           and restart count of vdc_mgr process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "vdc_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vdc_mgr.processrestart.TriggerProcessKillRestartVdcMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vdc_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartVlanMgr": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running vlan_mgr process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn vlan_mgr process(es) with command \"show system internal sysmgr service name vlan_mgr\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned vlan_mgr process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of vlan_mgr process(es) from step 2 is changed,\n           and restart count of vlan_mgr process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "vlan_mgr",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vlan_mgr.processrestart.TriggerProcessKillRestartVlanMgr",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vlan_mgr/nxos/processrestart.py"
    }
  },
  "TriggerProcessKillRestartVpc": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the running Vpc process(es) with Linux command \"kill -9 <process>\"\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Vpc process(es) with command \"show system internal sysmgr service name vpc\",\n           and store the \"running\" process(es) if has any, otherwise, SKIP the trigger\n        2. Restart the learned Vpc process(es) from step 1 with command \"kill -9 <process>\"\n           in linux shell mode\n        3. Verify the pid of Vpc process(es) from step 2 is changed,\n           and restart count of Vpc process(es) from step 2 is increased by 1\n\n    ",
      "groups": [
        "restart",
        "vpc",
        "L3"
      ],
      "source": {
        "class": "triggers.processrestart.vpc.processrestart.TriggerProcessKillRestartVpc",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/processrestart/vpc/nxos/processrestart.py"
    }
  },
  "TriggerProfileSystem": {
    "ios": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "features": [
        "platform",
        "interface"
      ],
      "groups": [
        "profile"
      ],
      "source": {
        "class": "triggers.profilesystem.profilesystem.TriggerProfileSystem",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_max_outage": 120,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/profilesystem/profilesystem.py"
    },
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "features": [
        "platform",
        "interface"
      ],
      "groups": [
        "profile"
      ],
      "source": {
        "class": "triggers.profilesystem.profilesystem.TriggerProfileSystem",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_max_outage": 120,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/profilesystem/profilesystem.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "features": [
        "platform",
        "interface"
      ],
      "groups": [
        "profile"
      ],
      "source": {
        "class": "triggers.profilesystem.profilesystem.TriggerProfileSystem",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/profilesystem/profilesystem.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "features": [
        "platform",
        "interface"
      ],
      "groups": [
        "profile"
      ],
      "source": {
        "class": "triggers.profilesystem.profilesystem.TriggerProfileSystem",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/profilesystem/profilesystem.py"
    },
    "top": {
      "contribute": false,
      "doc": "Trigger class for ProfileSystem action",
      "source": {
        "class": "triggers.profilesystem.profilesystem.TriggerProfileSystem",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/profilesystem/profilesystem.py"
    }
  },
  "TriggerReload": {
    "iosxe": {
      "asr1k": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok, active|ok, standby|Ready\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"ok, active|ok, standby\", verify every LC status is \"Ready\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/asr1k/reload.py"
      },
      "c3850": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok, active|ok, standby|Ready\"\n           switch(es) if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"ok, active|ok, standby\", verify every member status is \"Ready\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/c3850/reload.py"
      },
      "cat9k": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok, active|ok, standby|Ready\"\n           switch(es) if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"ok, active|ok, standby\", verify every member status is \"Ready\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local verifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/cat9k/reload.py"
      },
      "csr1000v": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                rp: `str`\n                oc: `str`\n                rp_state: `str`\n                oc_state: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                   OR\n                   interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"ok, active|ok, standby|Ready\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"ok, active|ok, standby\", verify every LC status is \"Ready\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/csr1000v/reload.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReload",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 1500
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/reload.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"IOS XR RUN|OK\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"admin reload location all\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"Active|Standby\", verify every LC status is \"IOS XR RUN|OK\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "iosxrv": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"IOS XR RUN|OK\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"admin reload location all\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"Active|Standby\", verify every LC status is \"IOS XR RUN|OK\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxr/iosxrv/reload.py"
      },
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReload",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_AdminDiagChassis",
        "Verify_Dir",
        "Verify_InstallActiveSummary",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_PlatformVm",
        "Verify_Redundancy",
        "Verify_RedundancySummary",
        "Verify_PlacementProgramAll",
        "Verify_SdrDetail",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxr/reload.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok|active|ha-standby|standby\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"active|ha-standby\", verify every LC status is \"ok\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "n3k": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok|active|ha-standby|standby\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s),LC(s),OC(s) are \n           \"ok|active|ha-standby|standby\"\n           and verify the attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/n3k/reload.py"
      },
      "n9k": {
        "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok|active|ha-standby|standby\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s),LC(s),OC(s) are \n           \"ok|active|ha-standby|standby\"\n           and verify the attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "n9300": {
          "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok|active|ha-standby|standby\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) \n           \"active|ha-standby\"\n           and verify the attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
          "groups": [],
          "source": {
            "class": "triggers.ha.reload.reload.TriggerReload",
            "pkg": "genie.libs.sdk"
          },
          "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/n9k/n9300/reload.py"
        },
        "n9kv": {
          "doc": "Reload the whole device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok|active|ha-standby|standby\" slot(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload\"\n        3. Learn Platform Ops again and verify the state of RP(s) is \n           \"active|ha-standby\"\n           and verify the attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
          "groups": [],
          "source": {
            "class": "triggers.ha.reload.reload.TriggerReload",
            "pkg": "genie.libs.sdk"
          },
          "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/n9k/n9kv/reload.py"
        },
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReload",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/n9k/reload.py"
      },
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReload",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadActiveFP": {
    "iosxe": {
      "asr1k": {
        "doc": "Reload active \"ESP\" slot on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"fabric\" Lc(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"hw-module slot <lc> reload\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadActiveFP",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/asr1k/reload.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "active",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadActiveFP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/reload.py"
    }
  },
  "TriggerReloadActiveRP": {
    "iosxe": {
      "asr1k": {
        "doc": "Reload active supervisor slot on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"ok, active\" RP and \"ok, standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"hw-module slot <lc> reload\"\n        3. Learn Platform Ops again and verify the roles of \n           \"ok, active\" RP and \"ok, standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadActiveRP",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/asr1k/reload.py"
      },
      "c3850": {
        "doc": "Reload active switch on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n                members: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                   OR\n                   interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"active\" and \"standby\" switch\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload slot <lc>\"\n        3. Learn Platform Ops again and verify the role of \"active\" switch changes to \"standby\",\n           verify the role of \"standby\" switch changes to \"member\",\n           verify the role of \"member\" switch with highest priority changes to \"standby\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadActiveRP",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/c3850/reload.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "active",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadActiveRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 1500
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/reload.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Reload active supervisor node on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"admin reload location <lc>\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "active_device",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadActiveRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_AdminDiagChassis",
        "Verify_Dir",
        "Verify_InstallActiveSummary",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_PlatformVm",
        "Verify_Redundancy",
        "Verify_RedundancySummary",
        "Verify_PlacementProgramAll",
        "Verify_SdrDetail",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxr/reload.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload active supervisor module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "active",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadActiveRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadActiveSystemController": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload active system controller module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" and \"standby\"\n           system controller if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" system controller and \"standby\" system controller are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "oc",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadActiveSystemController",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 600
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadEthernetModule": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload Ethernet module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"Ethernet\" Lc(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "lc",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadEthernetModule",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 700
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py",
      "verifications": {
        "Verify_Interface": {
          "devices": [
            "uut"
          ],
          "iteration": {
            "attempt": 6,
            "interval": 5
          }
        }
      }
    }
  },
  "TriggerReloadFabricModule": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload fabric module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"fabric\" Lc(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "fabricRole": "oc",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "oc",
      "n7k": {
        "doc": "Reload fabric module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"fabric\" oc(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"poweroff xbar <oc> no poweroff xbar <oc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadFabricModule",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/n7k/reload.py"
      },
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadFabricModule",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadMember": {
    "iosxe": {
      "c3850": {
        "doc": "Reload member switch on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                members: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                   OR\n                   interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"member\" switch(es)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload slot <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadMember",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/c3850/reload.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadMember",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/reload.py"
    }
  },
  "TriggerReloadOirEdge": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Reload MPA node on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'lc'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"MPA\" LC\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"admin reload location <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "lc",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadOirEdge",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxr/reload.py"
    }
  },
  "TriggerReloadStandbyRP": {
    "iosxe": {
      "asr1k": {
        "doc": "Reload standby supervisor slot on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'active'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                standby_rp: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                   OR\n                   interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"ok, standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"hw-module slot <lc> reload\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadStandbyRP",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/asr1k/reload.py"
      },
      "c3850": {
        "doc": "Reload standby switch on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'standby'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                standby_rp: `str`\n                members: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                   OR\n                   interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"standby\" switch and \"member\" switch(es)\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload slot <lc>\"\n        3. Learn Platform Ops again and verify role of \"standby\" switch changes to \"member\",\n           verify the role of \"member\" switch with highest priority changes to \"standby\",\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.reload.reload.TriggerReloadStandbyRP",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/c3850/reload.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "standby",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadStandbyRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxe/reload.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Reload standby supervisor node on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'standby'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"admin reload location <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "standby",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadStandbyRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_AdminDiagChassis",
        "Verify_Dir",
        "Verify_InstallActiveSummary",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_PlatformVm",
        "Verify_Redundancy",
        "Verify_RedundancySummary",
        "Verify_PlacementProgramAll",
        "Verify_SdrDetail",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/iosxr/reload.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload standby supervisor module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'standby'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadStandbyRP",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadStandbySystemController": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Reload standby system controller module on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            lcRole (`str`): The role of LC which is 'standby'\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" and \"standby\"\n           system controller if has any, otherwise, SKIP the trigger\n        2. Do reload by command \"reload module <lc>\"\n        3. Learn Platform Ops again and the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "lcRole": "oc",
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadStandbySystemController",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 600
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerReloadTor": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "reload",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.reload.reload.TriggerReloadTor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/reload/nxos/reload.py"
    }
  },
  "TriggerRestartBgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart the BGP instance using CLI command \"restart bgp <bgp_id>\".\n\n       trigger_datafile:\n           Mandatory:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iterations when looping is needed,\n                                   in second. Default: 15\n           Optional:\n               tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                    restored to the reference rate,\n                                    in second. Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                  in second. Default: 10\n\n       steps:\n           1. Learn BGP Ops object and store the \"established\" BGP neighbor(s)\n              if has any, otherwise, SKIP the trigger\n           2. Restart the BGP instance using CLI command \"restart bgp <bgp_id>\"\n           3. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "clear",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerRestartBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.bgp.clear.TriggerRestartBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/bgp/clear.py"
    }
  },
  "TriggerRestartOspf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Restart Ospf instance(s) using CLI command \"restart ospf <instance>\".\n\n              trigger_datafile:\n                  Mandatory:\n                      timeout:\n                          max_time (`int`): Maximum wait time for the trigger,\n                                          in second. Default: 180\n                          interval (`int`): Wait time between iterations when looping is needed,\n                                          in second. Default: 15\n                  Optional:\n                      tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                           restored to the reference rate,\n                                           in second. Default: 60\n                      tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                         in second. Default: 10\n\n              steps:\n                  1. Learn Ospf ops object and store the all neighbors\n                     if has any, otherwise, SKIP the trigger\n                  2. Restart Ospf instance(s) with command \"restart ospf <instance>\"\n                  3. Learn Ospf Ops again and verify it is the same as the Ops in step 1\n                     except the last state change\n           ",
      "groups": [
        "clear",
        "ospf",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.clear.ospf.clear.TriggerRestartOspf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 15,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/ospf/nxos/clear.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.clear.ospf.clear.TriggerRestartOspf",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/clear/ospf/clear.py"
    }
  },
  "TriggerShutNoShutAutoRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim auto-rp interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim auto-rp interface(s) under default vrf,\n           store pim auto-rp interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim auto-rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim auto-rp interface(s) from step 2 is \"down\"\n        4. Unshut the pim auto-rp interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutAutoRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutAutoRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim auto-rp interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               send_rp_announce_intf: `str`\n               vrf: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim auto-rp interface(s) under non-default vrf,\n           store pim auto-rp interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim auto-rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim auto-rp interface(s) from step 2 is \"down\"\n        4. Unshut the pim auto-rp interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutAutoRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutBgp": {
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Shut BGP protocol by shutdown the dynamically learned BGP process,\n    then unshut it by restart bpm.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 instance: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do \"process shutdown bgp\"\n        3. Verify the protocol state in BGP instance(s) is \"KILLED\"\n        4. Do \"process restart bpm\"\n        5. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "ncs5500": {
        "doc": "Shut BGP protocol by shutdown the dynamically learned BGP process,\n    then unshut it by restart bpm.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 instance: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Do \"process shutdown bgp\"\n        3. Verify the protocol state in BGP instance(s) does not exist\n        4. Do \"process restart bpm\"\n        5. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgp",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/iosxr/ncs5500/shutnoshut.py"
      },
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/iosxr/shutnoshut.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/iosxr/ncs5500/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut BGP protocol by shutdown/no shutdown the dynamically\n    learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 instance: `str`\n                 vrf: `str`\n                 neighbor: `str`\n                 bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the instance(s) and neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned BGP instance(s) from step 1 with BGP Conf object\n        3. Verify the state of BGP instance(s) and\n           state of neighbor(s) from step 2 are \"shutdown\"\n        4. Unshut the BGP instance(s)\n        5. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/shutnoshut.py"
    }
  },
  "TriggerShutNoShutBgpLoopbackInterface": {
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgpLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut the dynamically learned loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 instance: `str`\n                 vrf: `str`\n                 neighbor: `str`\n                 interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and verify if has any update-source interface(s),\n           and learn Interface Ops to verify if has any IP/IPv6 Loopback interface(s)\n           that existed in the BGP update-source interface(s). Store the filtered\n           BGP update-source Loopback interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the BGP learned update-source Loopback interface(s) from step 1\n           with Interface Conf object\n        3. Verify the state of learned update-source Loopback interface(s)\n           from step 2 is \"down\"\n        4. Unshut the update-source Loopback interface(s)\n        5. Learn BGP Ops and Interface Ops again and\n           verify them are the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgpLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/shutnoshut.py"
    }
  },
  "TriggerShutNoShutBgpNeighbors": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned BGP neighbore(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                     The keys below are dynamically learnt by default.\n                     However, they can also be set to a custom value when provided in the trigger datafile.\n\n                     instance: `str`\n                     vrf: `str`\n                     neighbor: `str`\n                     bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn BGP Ops object and verify if has established state, otherwise, Skip the trigger.\n            2. Shut the BGP neighbor that learned from step 1 with BGP Conf object\n            3. Verify the state of learned neighbor(s)\n               from step 2 is \"down\"\n            4. Unshut the BGP neighbor(s)\n            5. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "shut-noshut",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgpNeighbors",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/iosxe/shutnoshut.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "bgp",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgpNeighbors",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/iosxe/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut dynamically learned BGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                 instance: `str`\n                 vrf: `str`\n                 neighbor: `str`\n                 address_family: `str`\n                 bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the \"established\" neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned BGP neighbor(s) from step 1 with BGP Conf object\n        3. Verify the state of BGP neighbor(s) from step 2 is \"shutdown\"\n        4. Unshut the BGP neighbor(s)\n        5. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.shutnoshut.bgp.shutnoshut.TriggerShutNoShutBgpNeighbors",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/bgp/shutnoshut.py"
    }
  },
  "TriggerShutNoShutBsrRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim bsr-candidate interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               rp_addr: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim bsr-candidate interface(s) under default vrf,\n           store pim bsr interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is \"down\"\n        4. Unshut the pim bsr-candidate interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutBsrRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutBsrRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim bsr-candidate interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n         static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               rp_addr: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim bsr-candidate interface(s) under non-default vrf,\n           store pim bsr-candidate interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is \"down\"\n        4. Unshut the pim bsr-candidate interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutBsrRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutDot1xInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Dot1x Ethernet interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vlan: `str`\n                client: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n           if has any, otherwise, SKIP the trigger, then check if the status of dot1x is 'auth',\n           and the peer mac-address in UUT's table is 'static', if not, SKIP the trigger\n           And Learn Dot1x Ops object and store the dot1x interface whcih are from the\n           interface ops.\n        2. Shut the learned Dot1x Ethernet interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Dot1x Ethernet interface(s) from step 2 is \"down\"\n        4. Unshut the Dot1x Ethernet interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutDot1xInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "timeout_recovery": {
        "interval": 10,
        "max_time": 60
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    }
  },
  "TriggerShutNoShutEthernetInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Ethernet interface(s).\n\n               trigger_datafile:\n                   Mandatory:\n                       timeout:\n                           max_time (`int`): Maximum wait time for the trigger,\n                                           in second. Default: 180\n                           interval (`int`): Wait time between iteration when looping is needed,\n                                           in second. Default: 15\n                   Optional:\n                       tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                            restored to the reference rate,\n                                            in second. Default: 60\n                       tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                          in second. Default: 10\n                       timeout_recovery:\n                           Buffer recovery timeout make sure devices are recovered at the end\n                           of the trigger execution. Used when previous timeouts have been exhausted.\n\n                           max_time (`int`): Maximum wait time for the last step of the trigger,\n                                           in second. Default: 180\n                           interval (`int`): Wait time between iteration when looping is needed,\n                                           in second. Default: 15\n                       static:\n                           The keys below are dynamically learnt by default.\n                           However, they can also be set to a custom value when provided in the trigger datafile.\n\n                           interface: `str`\n\n                          (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                OR\n                                interface: 'Ethernet1/1/1' (Specific value)\n               steps:\n                   1. Learn Interface Ops object and store the \"up\" Ethernet interface(s) and \"False\" port channel member,\n                      if has any, otherwise, SKIP the trigger.\n                   2. Shut the learned Ethernet interface(s) from step 1 with Interface Conf object\n                   3. Verify the state of learned Ethernet interface(s) from step 2 is \"down\"\n                   4. Unshut the Ethernet interface(s) with Interface Conf object\n                   5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n               ",
      "groups": [
        "shut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut the dynamically learned Ethernet interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Ethernet interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Ethernet interface(s) from step 2 is \"down\"\n        4. Unshut the Ethernet interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/shutnoshut.py"
    }
  },
  "TriggerShutNoShutHsrpIpv4VlanInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and Unshut the dynamically learned Hsrp Ipv4 Vlan interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n        1. Learn Interface Ops object and verify if has any \"up\" \"ipv4\" Vlan interface(s),\n           and learn Hsrp Ops verify if has any \"up\" \"ipv4\" Vlan interface(s) that exists\n           in learned Vlan interface(s) from Interface Ops. Store the filtered\n           \"up\" \"ipv4\" Vlan interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned Hsrp Ipv4 Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Hsrp Ipv4 Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Hsrp Ipv4 Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        ",
      "groups": [
        "shut-noshut",
        "vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutHsrpIpv4VlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Hsrp Ipv4 Vlan interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and verify if has any \"up\" \"ipv4\" Vlan interface(s),\n           and learn Hsrp Ops verify if has any \"up\" \"ipv4\" Vlan interface(s) that exists\n           in learned Vlan interface(s) from Interface Ops. Store the filtered\n           \"up\" \"ipv4\" Vlan interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned Hsrp Ipv4 Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Hsrp Ipv4 Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Hsrp Ipv4 Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "Vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutHsrpIpv4VlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 1800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutHsrpIpv6VlanInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and Unshut the dynamically learned Hsrp Ipv6 Vlan interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n        1. Learn Interface Ops object and verify if has any \"up\" \"ipv6\" Vlan interface(s),\n           and learn Hsrp Ops verify if has any \"up\" \"ipv6\" Vlan interface(s) that exists\n           in learned Vlan interface(s) from Interface Ops. Store the filtered\n           \"up\" \"ipv6\" Vlan interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned Hsrp Ipv6 Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Hsrp Ipv6 Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Hsrp Ipv6 Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        ",
      "groups": [
        "shut-noshut",
        "vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutHsrpIpv6VlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and Unshut the dynamically learned Hsrp Ipv6 Vlan interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and verify if has any \"up\" \"ipv6\" Vlan interface(s),\n           and learn Hsrp Ops verify if has any \"up\" \"ipv6\" Vlan interface(s) that exists\n           in learned Vlan interface(s) from Interface Ops. Store the filtered\n           \"up\" \"ipv6\" Vlan interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned Hsrp Ipv6 Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Hsrp Ipv6 Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Hsrp Ipv6 Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "Vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutHsrpIpv6VlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 1800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutIpv4SviInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut Learned Vlan interface(s) with ipv4 configured.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Vlan interface(s) with ipv4 configured\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutIpv4SviInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    }
  },
  "TriggerShutNoShutLoopbackInterface": {
    "ios": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 30,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned loopback interface(s).\n\n           trigger_datafile:\n               Mandatory:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iteration when looping is needed,\n                                       in second. Default: 15\n               Optional:\n                   tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                        restored to the reference rate,\n                                        in second. Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                      in second. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the end\n                       of the trigger execution. Used when previous timeouts have been exhausted.\n\n                       max_time (`int`): Maximum wait time for the last step of the trigger,\n                                       in second. Default: 180\n                       interval (`int`): Wait time between iteration when looping is needed,\n                                       in second. Default: 15\n                   static:\n                       The keys below are dynamically learnt by default.\n                       However, they can also be set to a custom value when provided in the trigger datafile.\n\n                       interface: `str`\n\n                      (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                            OR\n                            interface: 'Ethernet1/1/1' (Specific value)\n           steps:\n               1. Learn Interface Ops object and store the \"up\" loopback interface(s)\n                  if has any, otherwise, SKIP the trigger.\n               2. Shut the learned loopback interface(s) from step 1 with Interface Conf object\n               3. Verify the state of learned loopback interface(s) from step 2 is \"down\"\n               4. Unshut the loopback interface(s) with Interface Conf object\n               5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n           ",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut the dynamically learned Loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Loopback interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Loopback interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Loopback interface(s) from step 2 is \"down\"\n        4. Unshut the Loopback interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/shutnoshut.py"
    }
  },
  "TriggerShutNoShutMsdp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Msdp peer(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               peer: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vlan Ops object and store the Msdp 'established' peer(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Msdp peer(s) from step 1 with Msdp Conf object\n        3. Verify the state of learned Msdp peer(s) from step 2 is \"down\"\n        4. Unshut the Msdp peer(s) with Msdp Conf object\n        5. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "msdp"
      ],
      "source": {
        "class": "triggers.shutnoshut.msdp.shutnoshut.TriggerShutNoShutMsdp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/msdp/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutNativeIpv4SviInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut Vlan 1 with ipv4 configured.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Vlan 1 with ipv4 configured\n           if has any, otherwise, SKIP the trigger\n        2. Shut the Vlan 1 from step 1 with Interface Conf object\n        3. Verify the state of Vlan 1 from step 2 is \"down\"\n        4. Unshut the Vlan 1 with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "interface",
        "xe_sanity"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutNativeIpv4SviInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    }
  },
  "TriggerShutNoShutNveLoopbackInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Nve loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               nve_name: `str`\n               source_if: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn VxLan Ops object and verify if has any \"up\" Nve interface(s),\n           otherwise, SKIP the trigger\n        2. Shut the learned Nve interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Nve interface(s) from step 2 is \"down\"\n        4. Unshut the Nve interface(s) with Interface Conf object\n        5. Learn VxLan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.shutnoshut.vxlan.shutnoshut.TriggerShutNoShutNveLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 1200
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/vxlan/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutNveOverlayInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Nve onverlay interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               nve_name: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn VxLan Ops object and verify if has any \"up\" Nve interface(s),\n           otherwise, SKIP the trigger\n        2. Shut the learned Nve interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Nve interface(s) from step 2 is \"down\"\n        4. Unshut the Nve interface(s) with Interface Conf object\n        5. Learn VxLan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "vxlan"
      ],
      "source": {
        "class": "triggers.shutnoshut.vxlan.shutnoshut.TriggerShutNoShutNveOverlayInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 500
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/vxlan/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutPimNbrInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim neighbor interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim neighbor interface(s) under default vrf,\n           store pim neighbor interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim neighbor interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim neighbor interface(s) from step 2 is \"down\"\n        4. Unshut the pim neighbor interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutPimNbrInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutPimNbrVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim neighbor interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim neighbor interface(s) under non-default vrf,\n           store pim neighbor interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim neighbor interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim neighbor interface(s) from step 2 is \"down\"\n        4. Unshut the pim neighbor interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutPimNbrVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutPortChannelInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Port Channel interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n         static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Port Channel interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Port Channel interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Port Channel interface(s) from step 2 is \"down\"\n        4. Unshut the Port Channel interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutPortChannelInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutStaticRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim bsr-candidate interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               rp_addr: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim bsr-candidate interface(s) under default vrf,\n           store pim bsr interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is \"down\"\n        4. Unshut the pim bsr-candidate interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutBsrRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutStaticRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned  pim bsr-candidate interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n         static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vrf: `str`\n               address_family: `str`\n               rp_addr: `str`\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn PIM Ops object and verify if has any \"up\" pim bsr-candidate interface(s) under non-default vrf,\n           store pim bsr-candidate interface(s) if has any, otherwise, SKIP the trigger\n        2. Shut the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is \"down\"\n        4. Unshut the pim bsr-candidate interface(s) with Interface Conf object\n        5. Learn PIM Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "pim",
        "multicast"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutBsrRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutTrunkInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned trunk interface(s).\n\n       trigger_datafile:\n           Mandatory:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iteration when looping is needed,\n                                   in second. Default: 15\n           Optional:\n               tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                    restored to the reference rate,\n                                    in second. Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                  in second. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the end\n                   of the trigger execution. Used when previous timeouts have been exhausted.\n\n                   max_time (`int`): Maximum wait time for the last step of the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iteration when looping is needed,\n                                   in second. Default: 15\n               static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n       steps:\n           1. Learn Interface Ops object and verify if has any enabled interface(s) with up status,\n              and also switch port mode should be trunk\n           2. Shut the Interface learned from step 1 with Interface Conf object\n           3. Verify the state of learned interface(s) and switchport and\n              from step 2 are \"down\"\n           4. Unshut the trunk interface(s)\n           5. Learn Interface Ops again and verify It is the same as the Ops in step 1\n\n       ",
      "groups": [
        "shut-noshut",
        "interface",
        "L2"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "iosxr": {
      "doc": "Shut and unshut the dynamically learned interface(s) when switchport mode is trunk.\n\n       trigger_datafile:\n           Mandatory:\n               timeout:\n                   max_time (`int`): Maximum wait time for the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iteration when looping is needed,\n                                   in second. Default: 15\n           Optional:\n               tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                    restored to the reference rate,\n                                    in second. Default: 60\n               tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                  in second. Default: 10\n               timeout_recovery:\n                   Buffer recovery timeout make sure devices are recovered at the end\n                   of the trigger execution. Used when previous timeouts have been exhausted.\n\n                   max_time (`int`): Maximum wait time for the last step of the trigger,\n                                   in second. Default: 180\n                   interval (`int`): Wait time between iteration when looping is needed,\n                                   in second. Default: 15\n               static:\n                   The keys below are dynamically learnt by default.\n                   However, they can also be set to a custom value when provided in the trigger datafile.\n\n                   interface: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n       steps:\n           1. Learn Interface Ops object and store the \"up\" interface(s)\n              if has any, otherwise, SKIP the trigger, then check the switchport mode to be \"trunk\"\n              if not, SKIP the trigger\n           2. Shut the learned interface(s) from step 1 with Interface Conf object\n           3. Verify the state of learned interface(s) from step 2 is \"down\"\n           4. Unshut the interface(s) with Interface Conf object\n           5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n       ",
      "groups": [],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxr/shutnoshut.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "shut-noshut",
        "interface",
        "L2"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxr/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut the dynamically learned trunk interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" trunk interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned trunk interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned trunk interface(s) from step 2 is \"down\"\n        4. Unshut the trunk interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/shutnoshut.py"
    }
  },
  "TriggerShutNoShutVlan": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Vlan instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vlan: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vlan Ops object and store the Vlan instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Vlan instance(s) from step 1 with Vlan Conf object\n        3. Verify the state of learned Vlan instance(s) from step 2 is \"down\"\n        4. Unshut the Vlan instance(s) with Vlan Conf object\n        5. Learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.vlan.shutnoshut.TriggerShutNoShutVlan",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/vlan/iosxe/shutnoshut.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Vlan instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               vlan: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vlan Ops object and store the Vlan instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Vlan instance(s) from step 1 with Vlan Conf object\n        3. Verify the state of learned Vlan instance(s) from step 2 is \"down\"\n        4. Unshut the Vlan instance(s) with Vlan Conf object\n        5. Learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "Vlan",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.vlan.shutnoshut.TriggerShutNoShutVlan",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/vlan/nxos/shutnoshut.py"
    }
  },
  "TriggerShutNoShutVlanInterface": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned vlan interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n                    mtu: `str`\n\n                   (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Interface Ops object and store the \"up\" vlan interface(s)\n               if has any, otherwise, SKIP the trigger.\n            2. Shut the learned vlan interface(s) from step 1 with Interface Conf object\n            3. Verify the state of learned vlan interface(s) from step 2 is \"down\"\n            4. Unshut the vlan interface(s) with Interface Conf object\n            5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/iosxe/shutnoshut.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Shut and unshut the dynamically learned Vlan interface(s).\n\n     trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n         Optional:\n             tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                  restored to the reference rate,\n                                  in second. Default: 60\n             tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                in second. Default: 10\n             timeout_recovery:\n                 Buffer recovery timeout make sure devices are recovered at the end\n                 of the trigger execution. Used when previous timeouts have been exhausted.\n\n                 max_time (`int`): Maximum wait time for the last step of the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n             static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                mtu: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n     steps:\n         1. Learn Interface Ops object and verify if has any \"up\" Vlan interface(s),\n            if has any, otherwise, SKIP the trigger\n         2. Shut the learned Vlan interface(s) from step 1 with Interface Conf object\n         3. Verify the state of learned Vlan interface(s) from step 2 is \"down\"\n         4. Unshut the Vlan interface(s) with Interface Conf object\n         5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "shut-noshut",
        "interface",
        "L3"
      ],
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/nxos/shutnoshut.py"
    },
    "top": {
      "contribute": false,
      "doc": "Shut and unshut the dynamically learned Vlan interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n               The keys below are dynamically learnt by default.\n               However, they can also be set to a custom value when provided in the trigger datafile.\n\n               interface: `str`\n               mtu: `str`\n\n               (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Vlan interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Shut the learned Vlan interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Vlan interface(s) from step 2 is \"down\"\n        4. Unshut the Vlan interface(s) with Interface Conf object\n        5. Learn Interface Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "source": {
        "class": "triggers.shutnoshut.interface.shutnoshut.TriggerShutNoShutVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/shutnoshut/interface/shutnoshut.py"
    }
  },
  "TriggerSleep": {
    "ios": {
      "contribute": false,
      "count": 1,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "sleep"
      ],
      "message_time": 1,
      "sleep_time": 5,
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    },
    "iosxe": {
      "contribute": false,
      "count": 1,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "sleep"
      ],
      "message_time": 1,
      "sleep_time": 5,
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [],
      "message_time": 10,
      "sleep_time": 5,
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    },
    "junos": {
      "contribute": false,
      "count": 1,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "sleep"
      ],
      "message_time": 1,
      "sleep_time": 5,
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    },
    "nxos": {
      "contribute": false,
      "count": 1,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "sleep"
      ],
      "message_time": 1,
      "sleep_time": 5,
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    },
    "top": {
      "contribute": false,
      "doc": "Trigger class for Sleep action",
      "source": {
        "class": "triggers.sleep.sleep.TriggerSleep",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/sleep/sleep.py"
    }
  },
  "TriggerStopStartSimulation": {
    "top": {
      "contribute": false,
      "doc": "Trigger class to start/stop simulation",
      "source": {
        "class": "triggers.virl.virl.TriggerStopStartSimulation",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/virl/virl.py"
    },
    "virl": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "stopstart",
        "simulation"
      ],
      "simulation_name": "example_testbed_genie-tahigash",
      "source": {
        "class": "triggers.virl.virl.TriggerStopStartSimulation",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/virl/virl.py",
      "virl_file": "./example_testbed.virl"
    }
  },
  "TriggerSwitchover": {
    "iosxe": {
      "asr1k": {
        "doc": "Do switchover on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do switchover by command \"redundancy force-switchover\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/iosxe/asr1k/switchover.py"
      },
      "c3850": {
        "doc": "Do switchover on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n                members: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do switchover by command \"redundancy force-switchover\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/iosxe/c3850/switchover.py"
      },
      "cat9k": {
        "doc": "Do switchover on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n                members: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do switchover by command \"redundancy force-switchover\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local verifications if enabled\n\n    ",
        "groups": [],
        "source": {
          "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
          "pkg": "genie.libs.sdk"
        },
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/iosxe/cat9k/switchover.py"
      },
      "devices": [
        "uut"
      ],
      "doc": null,
      "groups": [
        "ha",
        "switchover",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 1500
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Boot",
        "Verify_Dir",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_Redundancy",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/iosxe/switchover.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Do switchover on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n                virtual_device: `str`\n                active_device: `str`\n                standby_device: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do switchover by command \"redundancy switchover\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "switchover",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_AdminDiagChassis",
        "Verify_Dir",
        "Verify_InstallActiveSummary",
        "Verify_Inventory",
        "Verify_Platform",
        "Verify_PlatformVm",
        "Verify_Redundancy",
        "Verify_RedundancySummary",
        "Verify_PlacementProgramAll",
        "Verify_SdrDetail",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/iosxr/switchover.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Do switchover on device.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                active_rp: `str`\n                standby_rp: `str`\n                lc: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Platform Ops object and store the \"active\" RP and \"standby\" RP\n           if has any, otherwise, SKIP the trigger\n        2. Do switchover by command \"system switchover\"\n        3. Learn Platform Ops again and verify the roles of \n           \"active\" RP and \"standby\" RP are swapped,\n           and verify left attributes from the ops are the same as the Ops in step 1\n        4. Update platform PTS if feature pts is enabled,\n           Update global/local veirifications if enabled\n\n    ",
      "groups": [
        "ha",
        "switchover",
        "L3"
      ],
      "source": {
        "class": "triggers.ha.switchover.switchover.TriggerSwitchover",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 900
      },
      "update_pts_features": [
        "platform"
      ],
      "update_verifications": [
        "Verify_Module",
        "Verify_Boot",
        "Verify_Dir",
        "Verify_InstallActive",
        "Verify_Inventory",
        "Verify_RedundancyStatus",
        "Verify_SystemRedundancyStatus",
        "Verify_VdcCurrent",
        "Verify_VdcDetail",
        "Verify_VdcMembershipStatus",
        "Verify_Version"
      ],
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/ha/switchover/nxos/switchover.py"
    }
  },
  "TriggerUnconfigConfigAdvertiseEvpnMulticast": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure advertise evpn multisite and reapply the whole configurations of dynamically learned Vxlan.\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n\n        steps:\n            1. Learn Vxlan Conf object and check advertise_evpn_multisite is available\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the advertise_evpn_multisite with Vxlan Conf object\n            4. Verify the  advertise evpn multisite from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vxlan Conf obj again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.trm.unconfigconfig.TriggerUnconfigConfigAdvertiseEvpnMulticast",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/trm/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigAutoRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim auto-rp interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim auto-rp\n           interface(s) under default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim auto-rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim auto-rp interface(s) from step 2 is removed\n        4. Reapply the configuration of pim auto-rp interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "pim",
        "multicast",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigAutoRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigAutoRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim\n    auto-rp interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim auto-rp\n           interface(s) under non-default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim auto-rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim auto-rp interface(s) from step 2 is removed\n        4. Reapply the configuration of pim auto-rp interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "pim",
        "multicast",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigAutoRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgp": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxe/unconfigconfig.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxr/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxr/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpAddressFamilyIpv4Mvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n        learned BGP ipv4 mvpn address-family.\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `str`\n                    neighbor: `str`\n                    address_family: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn BGP Ops object and store the BGP ipv4 mvpn address-family\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the learned ipv4 mvpn addrres-family from step 1\n               with BGP Conf object\n            4. Verify the ipv4 mvpn address-family under router bgp from step 3\n               no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpAddressFamilyIpv4Mvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpAfL2vpnEvpnRewriteEvpnRtAsn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP l2vpn evpn address-family evpn rewrite-evpn-rt-asn.\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP l2vpn evpn address-family evpn rewrite-evpn-rt-asn\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned rewrite-evpn-rt-asn from step 1\n           with BGP Conf object\n        4. Verify the evpn rewrite-evpn-rt-asn under bgp l2vpn evpn address-family from step 3\n           no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "vxlan"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpAfL2vpnEvpnRewriteEvpnRtAsn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpFastExternalFallover": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure fast-external-fallover under a BGP and\n                   reapply the whole configurations for learned BGP pid\n\n                trigger_datafile:\n                    Mandatory:\n                        timeout:\n                            max_time (`int`): Maximum wait time for the trigger,\n                                            in second. Default: 180\n                            interval (`int`): Wait time between iteration when looping is needed,\n                                            in second. Default: 15\n                            method (`str`): Method to recover the device configuration,\n                                          Support methods:\n                                            'checkpoint': Rollback the configuration by\n                                                          checkpoint (nxos),\n                                                          archive file (iosxe),\n                                                          load the saved running-config file on disk (iosxr)\n                    Optional:\n                        tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                             restored to the reference rate,\n                                             in second. Default: 60\n                        tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                           in second. Default: 10\n                        timeout_recovery:\n                            Buffer recovery timeout make sure devices are recovered at the end\n                            of the trigger execution. Used when previous timeouts have been exhausted.\n\n                            max_time (`int`): Maximum wait time for the last step of the trigger,\n                                            in second. Default: 180\n                            interval (`int`): Wait time between iteration when looping is needed,\n                                            in second. Default: 15\n                        static:\n                            The keys below are dynamically learnt by default.\n                            However, they can also be set to a custom value when provided in the trigger datafile.\n\n                            instance: `str`\n                            vrf: `str`\n                            neighbor: `str`\n                            bgp_id: `int`\n\n                            (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                                  OR\n                                  interface: 'Ethernet1/1/1' (Specific value)\n                steps:\n                    1. Learn BGP Ops object and store the BGP instance(s)\n                       if has any, otherwise, SKIP the trigger\n                    2. Save the current device configurations through \"method\" which user uses\n                    3. Unconfigure fast-external-fallover under learned BGP pid from step 1\n                    4. Verify the fast-external-fallover under BGP pid from step 3 are no longer existed\n                    5. Recover the device configurations to the one in step 2\n                    6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n            ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpFastExternalFallover",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpGracefulRestart": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure graceful restart configured under BGP and then \n    reapply the whole configuration of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpGracefulRestart",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure keepalive interval and holdtime and\n               reapply the whole configurations for learned BGP pid\n\n            trigger_datafile:\n                Mandatory:\n                    timeout:\n                        max_time (`int`): Maximum wait time for the trigger,\n                                        in second. Default: 180\n                        interval (`int`): Wait time between iteration when looping is needed,\n                                        in second. Default: 15\n                        method (`str`): Method to recover the device configuration,\n                                      Support methods:\n                                        'checkpoint': Rollback the configuration by\n                                                      checkpoint (nxos),\n                                                      archive file (iosxe),\n                                                      load the saved running-config file on disk (iosxr)\n                Optional:\n                    tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                         restored to the reference rate,\n                                         in second. Default: 60\n                    tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                       in second. Default: 10\n                    timeout_recovery:\n                        Buffer recovery timeout make sure devices are recovered at the end\n                        of the trigger execution. Used when previous timeouts have been exhausted.\n\n                        max_time (`int`): Maximum wait time for the last step of the trigger,\n                                        in second. Default: 180\n                        interval (`int`): Wait time between iteration when looping is needed,\n                                        in second. Default: 15\n                    static:\n                        The keys below are dynamically learnt by default.\n                        However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        instance: `str`\n                        vrf: `str`\n                        neighbor: `str`\n                        keepalive_interval: `int`\n                        holdtime: `int`\n                        bgp_id: `int`\n\n                        (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                              OR\n                              interface: 'Ethernet1/1/1' (Specific value)\n            steps:\n                1. Learn BGP Ops object and store the BGP instance(s)\n                   if has any, otherwise, SKIP the trigger\n                2. Save the current device configurations through \"method\" which user uses\n                3. Unconfigure keepalive interval and holdtime for learned BGP pid from step 1\n                4. Verify the keepalive interval and holdtime for BGP pid from step 3 are no longer existed\n                5. Recover the device configurations to the one in step 2\n                6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n        ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpL2vpnCapability": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP l2vpn evpn address-family.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP l2vpn evpn address-family\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP l2vpn evpn address-family from step 1 \n           with BGP Conf object\n        4. Verify the BGP l2vpn evpn address-family from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "vxlan"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpL2vpnCapability",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 60
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighbor": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborAddressFamilyIpv4Mvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n            learned ipv4 mvpn address-family under BGP neighbors.\n\n            trigger_datafile:\n                Mandatory:\n                    timeout:\n                        max_time (`int`): Maximum wait time for the trigger,\n                                        in second. Default: 180\n                        interval (`int`): Wait time between iteration when looping is needed,\n                                        in second. Default: 15\n                        method (`str`): Method to recover the device configuration,\n                                      Support methods:\n                                        'checkpoint': Rollback the configuration by\n                                                      checkpoint (nxos),\n                                                      archive file (iosxe),\n                                                      load the saved running-config file on disk (iosxr)\n                Optional:\n                    tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                         restored to the reference rate,\n                                         in second. Default: 60\n                    tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                       in second. Default: 10\n                    timeout_recovery:\n                        Buffer recovery timeout when the previous timeout has been exhausted,\n                        to make sure the devices are recovered before ending the trigger\n\n                        max_time (`int`): Maximum wait time for the last step of the trigger,\n                                        in second. Default: 180\n                        interval (`int`): Wait time between iteration when looping is needed,\n                                        in second. Default: 15\n                    static:\n                        The keys below are dynamically learnt by default.\n                        However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        instance: `str`\n                        vrf: `str`\n                        neighbor: `str`\n                        bgp_id: `int`\n\n                        (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                              OR\n                              interface: 'Ethernet1/1/1' (Specific value)\n            steps:\n                1. Learn BGP Ops object and store the ipv4 mvpn address-family under BGP neighbors\n                   if has any, otherwise, SKIP the trigger\n                2. Save the current device configurations through \"method\" which user uses\n                3. Unconfigure the learned ipv4 mvpn addrres-family under BGP neighbors from step 1\n                   with BGP Conf object\n                4. Verify the ipv4 mvpn address-family under BGP neighbors from step 3\n                   no longer existed\n                5. Recover the device configurations to the one in step 2\n                6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n            ",
      "groups": [
        "unconfig-config",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborAddressFamilyIpv4Mvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborAsOverride": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP neighbors(s) as_override.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbors(s)\n           if has as_override enabled, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP neighbors(s) as_override from step 1 \n           with BGP Conf object\n        4. Verify the BGP neighbors(s) as_override from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborAsOverride",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborBfd": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure bfd configured under BGP neighbor and then \n    reapply the whole configuration of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborBfd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborDefaultOriginate": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure default originate configured under BGP neighbor and then \n    reapply the whole configuration of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborDefaultOriginate",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborEbgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned EBGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the EBGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned EBGP neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv6 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborEbgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborIbgp": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned iBGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the iBGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned iBGP neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the iBGP neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborIbgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborIbgpWithCR": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned iBGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the iBGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned iBGP neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the iBGP neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborIbgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborIpv4": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP IPv4 neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP IPv4 neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP IPv4 neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv4 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborIpv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborIpv4WithCR": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP IPv4 neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP IPv4 neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP IPv4 neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv4 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborIpv4",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborIpv6": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP IPv6 neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP IPv6 neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP IPv6 neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv6 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborIpv6",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 30,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborNextHopSelf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure next hop self configured under BGP neighbor and then \n    reapply the whole configuration of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborNextHopSelf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborPassword": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure the password configured under BGP neighbor and then \n    reapply the whole configuration of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                password_text: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborPassword",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborRouteReflectorClient": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP neighbor(s) route-reflector-client.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s) with route-reflector-client\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP neighbor(s) route-reflector-client from step 1 \n           with BGP Conf object\n        4. Verify the BGP vrf(s) route_distinguisher from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborRouteReflectorClient",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborSendCommunity": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure send-community under BGP and reapply the\n                    whole configurations for learned BGP\n     trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                send_community: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure send-community under bgp pid from step 1\n           with BGP Conf object\n        4. Verify the send-comunity from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborSendCommunity",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborSendCommunityExtended": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure send-community extended for a BGP neighbor and\n       reapply the whole configurations of dynamically learned BGP pid\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                send_community: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure send-community extended for a BGP neighbor of learned BGP pid from step 1\n        4. Verify the send-community extended for BGP neighbor from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborSendCommunityExtended",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborSoftReconfiguration": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure soft-reconfiguration inbound for a BGP neighbor and\n           reapply the whole configurations for learned BGP pid\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    instance: `str`\n                    vrf: `str`\n                    neighbor: `str`\n                    address_family: `str`\n                    bgp_id: `int`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn BGP Ops object and store the BGP instance(s)\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure soft-reconfiguration inbound for a BGP neighbor of learned BGP pid from step 1\n            4. Verify the soft-reconfiguration for BGP neighbor from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborSoftReconfiguration",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborTransportConnectionModePassive": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure transportation connection mode (if passive) configured under \n    BGP neighbor and then reapply the whole configuration of dynamically \n    learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    Steps:\n        1. Learn BGP Ops object and store the BGP instance(s) if any,\n           else SKIP the trigger\n        2. Save the current device configurations using the \"method\" specified\n           by user in Trigger YAML.\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 no longer exists\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborTransportConnectionModePassive",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborVrf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP IPv6 neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP IPv6 neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP IPv6 neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv6 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborVrf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborVrfWithCR": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP IPv6 neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP IPv6 neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP IPv6 neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP IPv6 neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighborVrf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 240
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpNeighborWithCR": {
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP neighbor(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP neighbor(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP neighbor(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP neighbor(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpNeighbor",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpRouterId": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the bgp-id of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Conf object and store the BGP instance(s)\n           if has bgp_id configured, otherwise, SKIP the trigger.\n           And learn BGP ops object for verifying in step 4 and 6\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) bgp-id from step 1 \n           with BGP Conf object\n        4. Verify the BGP instance(s) bgp-id from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpRouterId",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpVpnRd": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP vrf(s) route-distinguisher.\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                rd: `str`\n                default_vrf: `str`\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) with route_distinguisher\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP vrf(s) route-distinguisher from step 1 \n           with BGP Conf object\n        4. Verify the BGP vrf(s) route_distinguisher from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpVpnRd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 60,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxe/unconfigconfig.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned BGP vrf(s) route-distinguisher.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                neighbor: `str`\n                address_family: `str`\n                rd: `str`\n                default_vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP vrf(s) with route_distinguisher\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP vrf(s) route-distinguisher from step 1 \n           with BGP Conf object\n        4. Verify the BGP vrf(s) route_distinguisher from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgpVpnRd",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 450
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBgpWithCR": {
    "iosxe": {
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [],
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxe/unconfigconfig.py"
    },
    "iosxr": {
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1\n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [],
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxr/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "bgp",
        "L3"
      ],
      "method": "config_replace",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/iosxr/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned BGP instance(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                bgp_id: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn BGP Ops object and store the BGP instance(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned BGP instance(s) from step 1 \n           with BGP Conf object\n        4. Verify the BGP instance(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn BGP Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.bgp.unconfigconfig.TriggerUnconfigConfigBgp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/bgp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBsrRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim bsr-candidate interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim bsr-candidate\n           interface(s) under default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is removed\n        4. Reapply the configuration of pim bsr-candidate interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigBsrRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigBsrRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim\n    bsr-candidate interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim bsr-candidate\n           interface(s) under non-default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim bsr-candidate interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim bsr-candidate interface(s) from step 2 is removed\n        4. Reapply the configuration of pim bsr-candidate interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigBsrRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEthernetInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/iosxr/unconfigconfig.py"
    },
    "iosxr": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned ethernet interface(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout make sure devices are recovered at the end\n                    of the trigger execution. Used when previous timeouts have been exhausted.\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    interface: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Interface Ops object and store the \"up\" ethernet interface(s)\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the learned ethernet interface(s) from step 1\n               with Interface Conf object\n            4. Verify the learned ethernet interface(s) are \"down\"\n            5. Recover the device configurations to the one in step 2\n            6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/iosxr/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 5,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/iosxr/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned Ethernet interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Ethernet interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Ethernet interface(s) from step 1 \n           with Interface Conf object\n        4. Verify the configurations are all gone for the learned Ethernet interface(s)\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEthernetInterfaceSub": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterfaceSub",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "iosxr": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterfaceSub",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterfaceSub",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned Ethernet SubInterface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Ethernet SubInterface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Ethernet SubInterface(s) from step 1 \n           with Interface Conf object\n        4. Verify the learned Ethernet SubInterface(s) are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigEthernetInterfaceSub",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn and reapply the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n           static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                instance: `str`\n                vrf: `str`\n                address_family: `str`\n                rd: `str`\n                rd_vniid: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vxlan Ops object and store the vni id under bgp_l2vpn_evpn\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the Evpn with Vxlan Conf object\n        4. Verify the evpn from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "vxlan"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 300
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 500
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpnMsiteBgw": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn msite bgw and reapply the whole configurations of\n                        dynamically learned Vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                evpn_multisite_border_gateway: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n      steps:\n        1. Learn Vxlan Ops object and store the evpn msite bgw under nve\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the evpn msite bgw with Vxlan Conf object\n        4. Verify the evpn msite bgw from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n      ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpnMsiteBgw",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpnMsiteBgwDelayRestoreTime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn msite bgw delay restore time and reapply\n                        the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                nve_name: `str`\n                evpn_multisite_border_gateway: `int`\n                delay_restore_time: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vxlan Ops object and store the evpn msite bgw delay restore time under nve\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the evpn msite bgw delay restore time with Vxlan Conf object\n        4. Verify the evpn msite bgw delay restore time from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpnMsiteBgwDelayRestoreTime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpnMsiteDciTracking": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn msite dci tracking and reapply\n                            the whole configurations of dynamically learned Vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    nve_name: `str`\n                    dci_link: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vxlan Ops object and store the evpn msite dci tracking under nve\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the evpn msite dci tracking with Interface Conf object\n            4. Verify the evpn msite dci tracking from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n        ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpnMsiteDciTracking",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpnMsiteFabricTracking": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn msite Fabric tracking and reapply\n                                the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                nve_name: `str`\n                fabric_link: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vxlan Ops object and store the evpn msite fabric tracking under nve\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the evpn msite fabric tracking with Interface Conf object\n        4. Verify the evpn msite fabric tracking from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpnMsiteFabricTracking",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 400
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 600
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigEvpnVni": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure evpn and reapply the whole configurations of dynamically learned Vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n               static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    nve_name: `str`\n                    nve_vni: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vxlan Ops object and store the vni state under nve\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the Evpn with Vxlan Conf object\n            4. Verify the evpn from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigEvpnVni",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigIgmpEnable": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Igmp interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the enabled PIM interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Igmp interface(s)'s enable from step 1 \n           with Igmp Conf object\n        4. Verify the Igmp interface(s)'s enable from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.igmp.unconfigconfig.TriggerUnconfigConfigIgmpEnable",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/igmp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigIgmpJoinGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Igmp interface(s)'s join-groups.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n                source: `str`\n                group: `str`\n                join_group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the enabled PIM interface(s)'s join-groups\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Igmp interface(s)'s join-groups from step 1 \n           with Igmp Conf object\n        4. Verify the Igmp interface(s)'s join-groups from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.igmp.unconfigconfig.TriggerUnconfigConfigIgmpJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/igmp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigIgmpStaticGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Igmp interface(s)'s static-groups.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n                source: `str`\n                group: `str`\n                static_group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the enabled PIM interface(s)'s static-groups\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Igmp interface(s)'s static-groups from step 1 \n           with Igmp Conf object\n        4. Verify the Igmp interface(s)'s static-groups from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.igmp.unconfigconfig.TriggerUnconfigConfigIgmpStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/igmp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigIgmpVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Igmp interface(s)'s version.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n                version: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Igmp Ops object and store the enabled PIM interface(s)'s version\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Igmp interface(s)'s version from step 1 \n           with Igmp Conf object\n        4. Verify the Igmp interface(s)'s version from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Igmp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "igmp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.igmp.unconfigconfig.TriggerUnconfigConfigIgmpVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/igmp/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigLoopbackInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned Loopback interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Loopback interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Loopback interface(s) from step 1 \n           with Interface Conf object\n        4. Verify the Loopback interface(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigLoopbackInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMldEnable": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Mld interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vrf: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the enabled Mld interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Mld interface(s)'s enable from step 1 \n           with Mld Conf object\n        4. Verify the Mld interface(s)'s enable from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.mld.unconfigconfig.TriggerUnconfigConfigMldEnable",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/mld/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMldJoinGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Mld interface(s)'s join-groups.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vrf: `str`\n                group: `str`\n                join_group: `str`\n                source: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the enabled Mld interface(s)'s join-groups\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Mld interface(s)'s join-groups from step 1 \n           with Mld Conf object\n        4. Verify the Mld interface(s)'s join-groups from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.mld.unconfigconfig.TriggerUnconfigConfigMldJoinGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/mld/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMldStaticGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Mld interface(s)'s static-groups.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vrf: `str`\n                group: `str`\n                static_group: `str`\n                source: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n\n    steps:\n        1. Learn Mld Ops object and store the enabled Mld interface(s)'s static-groups\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Mld interface(s)'s static-groups from step 1 \n           with Mld Conf object\n        4. Verify the Mld interface(s)'s static-groups from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.mld.unconfigconfig.TriggerUnconfigConfigMldStaticGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/mld/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMldVersion": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations\n    of dynamically learned enabled Mld interface(s)'s version.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n                vrf: `str`\n                version: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Mld Ops object and store the enabled Mld interface(s)'s version\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Mld interface(s)'s version from step 1 \n           with Mld Conf object\n        4. Verify the Mld interface(s)'s version from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Mld Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "mld",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.mld.unconfigconfig.TriggerUnconfigConfigMldVersion",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/mld/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMplsStaticBindings": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "mpls",
        "L3"
      ],
      "l_id": 201,
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.unconfigconfig.mpls.iosxe.unconfigconfig.TriggerUnconfigConfigMplsStaticBindings",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 900,
      "timeout": {
        "interval": 20,
        "max_time": 900
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/mpls/iosxe/unconfigconfig.py"
    },
    "top": {
      "contribute": true,
      "doc": " Unconfigure Configure mpls static bindings",
      "source": {
        "class": "triggers.contrib.unconfigconfig.mpls.iosxe.unconfigconfig.TriggerUnconfigConfigMplsStaticBindings",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/mpls/iosxe/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpDescription": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s) description.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                connect_retry_interval: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s) description\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) description from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) description from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpDescription",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpKeepaliveHoldtime": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s) keepalive&holdtime interval.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                keepalive_interval: `int`\n                holdtime_interval: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP peer(s)\n           keepalive&holdtime interval if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) keepalive&holdtime interval from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) keepalive&holdtime interval from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpKeepaliveHoldtime",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpMeshGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned 'established' MSDP peer(s) mesh group.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                mesh_group: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the 'established' MSDP peer(s) mesh group\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) mesh group from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) mesh group from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpMeshGroup",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpOriginatorId": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP originator-id.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                originator_id: `str`\n                originating_rp: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP originator-id\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP originator-id from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP originator-id from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpOriginatorId",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpPeer": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpPeer",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpReconnectInterval": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP reconnect interval.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                connect_retry_interval: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the MSDP reconnect interval\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP reconnect interval from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP reconnect interval from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpReconnectInterval",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpSaFilterIn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s) sa-filter in.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_filter_in: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-filter in\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) sa-filter in from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-filter in from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaFilterIn",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpSaFilterOut": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s) sa-filter out.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_filter_out: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-filter out\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) sa-filter out from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-filter out from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaFilterOut",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigMsdpSaLimit": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned MSDP peer(s) sa-limit.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                peer: `str`\n                sa_limit: `int`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Msdp Ops object and store the \"established\" MSDP peer(s) sa-limit\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned MSDP peer(s) sa-limit from step 1 \n           with Msdp Conf object\n        4. Verify the MSDP peer(s) sa-limit from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Msdp Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "msdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.msdp.unconfigconfig.TriggerUnconfigConfigMsdpSaLimit",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/msdp/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNvOverlayEvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure nv overlay evpn and reapply the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n    Mandatory:\n        timeout:\n            max_time (`int`): Maximum wait time for the trigger,\n                            in second. Default: 180\n            interval (`int`): Wait time between iteration when looping is needed,\n                            in second. Default: 15\n            method (`str`): Method to recover the device configuration,\n                          Support methods:\n                            'checkpoint': Rollback the configuration by\n                                          checkpoint (nxos),\n                                          archive file (iosxe),\n                                          load the saved running-config file on disk (iosxr)\n    Optional:\n        tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                             restored to the reference rate,\n                             in second. Default: 60\n        tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                           in second. Default: 10\n        timeout_recovery:\n            Buffer recovery timeout when the previous timeout has been exhausted,\n            to make sure the devices are recovered before ending the trigger\n\n            max_time (`int`): Maximum wait time for the last step of the trigger,\n                            in second. Default: 180\n            interval (`int`): Wait time between iteration when looping is needed,\n                            in second. Default: 15\n        static:\n            The keys below are dynamically learnt by default.\n            However, they can also be set to a custom value when provided in the trigger datafile.\n\n            instance: `str`\n            vrf: `str`\n            address_family: `str`\n            rd: `str`\n            rd_vniid: `str`\n\n            (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                  OR\n                  interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n    1. Learn Vxlan Ops object and store the vni id under bgp_l2vpn_evpn\n       if has any, otherwise, SKIP the trigger\n    2. Save the current device configurations through \"method\" which user uses\n    3. Unconfigure the nv overlay evpn interface with Vxlan Conf object\n    4. Verify the nv overlay evpn from step 3 are no longer existed\n    5. Recover the device configurations to the one in step 2\n    6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNvOverlayEvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 400
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 1000
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveAdvertiseVirtualRmac": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure virtual rmac advertised and reapply\n                          the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout:\n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery:\n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                nve_name: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vxlan Ops object and store the virtual rmac advertised under nve\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the virtual rmac advertised with Interface Conf object\n        4. Verify the virtual rmac advertised from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveAdvertiseVirtualRmac",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 750
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveMultisiteBgwInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure multisite bgw interface and reapply the whole configurations of\n                            dynamically learned Vxlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    nve_name: `str`\n                    multisite_bgw_if: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n          steps:\n            1. Learn Vxlan Ops object and store the multisite bgw interface under nve.\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the multisite bgw interface with Vxlan Conf object\n            4. Verify the multisite bgw interface from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n          ",
      "groups": [
        "add-remove"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveMultisiteBgwInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveSourceInterfaceLoopback": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure nve source interface and reapply the whole configurations of dynamically learned Vxlan(s).\n\n       trigger_datafile:\n         Mandatory:\n             timeout:\n                 max_time (`int`): Maximum wait time for the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n                 method (`str`): Method to recover the device configuration,\n                               Support methods:\n                                 'checkpoint': Rollback the configuration by\n                                               checkpoint (nxos),\n                                               archive file (iosxe),\n                                               load the saved running-config file on disk (iosxr)\n         Optional:\n             tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                  restored to the reference rate,\n                                  in second. Default: 60\n             tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                in second. Default: 10\n             timeout_recovery:\n                 Buffer recovery timeout when the previous timeout has been exhausted,\n                 to make sure the devices are recovered before ending the trigger\n\n                 max_time (`int`): Maximum wait time for the last step of the trigger,\n                                 in second. Default: 180\n                 interval (`int`): Wait time between iteration when looping is needed,\n                                 in second. Default: 15\n             static:\n                 The keys below are dynamically learnt by default.\n                 However, they can also be set to a custom value when provided in the trigger datafile.\n\n                  nve_name: `str`\n                  source_if: `str`\n\n                  (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                        OR\n                        interface: 'Ethernet1/1/1' (Specific value)\n       steps:\n         1. Learn Vxlan Ops object and store the nve source interface under nve\n            if has any, otherwise, SKIP the trigger\n         2. Save the current device configurations through \"method\" which user uses\n         3. Unconfigure the nve source interface with Interface Conf object\n         4. Verify the nve source interface from step 3 are no longer existed\n         5. Recover the device configurations to the one in step 2\n         6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n       ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveSourceInterfaceLoopback",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 500
      },
      "timeout_recovery": {
        "interval": 15,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveVniAssociateVrf": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure nvi associated vrf and reapply\n                          the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n      Mandatory:\n          timeout:\n              max_time (`int`): Maximum wait time for the trigger,\n                              in second. Default: 180\n              interval (`int`): Wait time between iteration when looping is needed,\n                              in second. Default: 15\n              method (`str`): Method to recover the device configuration,\n                            Support methods:\n                              'checkpoint': Rollback the configuration by\n                                            checkpoint (nxos),\n                                            archive file (iosxe),\n                                            load the saved running-config file on disk (iosxr)\n      Optional:\n          tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                               restored to the reference rate,\n                               in second. Default: 60\n          tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                             in second. Default: 10\n          timeout_recovery:\n              Buffer recovery timeout when the previous timeout has been exhausted,\n              to make sure the devices are recovered before ending the trigger\n\n              max_time (`int`): Maximum wait time for the last step of the trigger,\n                              in second. Default: 180\n              interval (`int`): Wait time between iteration when looping is needed,\n                              in second. Default: 15\n          static:\n              The keys below are dynamically learnt by default.\n              However, they can also be set to a custom value when provided in the trigger datafile.\n\n              nve_name: `str`\n              nve_vni: `str`\n\n              (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                    OR\n                    interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n      1. Learn Vxlan Ops object and store the nvi associated vrf under nve\n         if has any, otherwise, SKIP the trigger\n      2. Save the current device configurations through \"method\" which user uses\n      3. Unconfigure the nvi associated vrf with Interface Conf object\n      4. Verify the nvi associated vrf from step 3 are no longer existed\n      5. Recover the device configurations to the one in step 2\n      6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveVniAssociateVrf",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveVniMcastGroup": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure mcast group and reapply the whole configurations of dynamically learned Vxlan(s).\n\n    trigger_datafile:\n    Mandatory:\n        timeout:\n            max_time (`int`): Maximum wait time for the trigger,\n                            in second. Default: 180\n            interval (`int`): Wait time between iteration when looping is needed,\n                            in second. Default: 15\n            method (`str`): Method to recover the device configuration,\n                          Support methods:\n                            'checkpoint': Rollback the configuration by\n                                          checkpoint (nxos),\n                                          archive file (iosxe),\n                                          load the saved running-config file on disk (iosxr)\n    Optional:\n        tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                             restored to the reference rate,\n                             in second. Default: 60\n        tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                           in second. Default: 10\n        timeout_recovery:\n            Buffer recovery timeout when the previous timeout has been exhausted,\n            to make sure the devices are recovered before ending the trigger\n\n            max_time (`int`): Maximum wait time for the last step of the trigger,\n                            in second. Default: 180\n            interval (`int`): Wait time between iteration when looping is needed,\n                            in second. Default: 15\n        static:\n            The keys below are dynamically learnt by default.\n            However, they can also be set to a custom value when provided in the trigger datafile.\n\n            nve_name: `str`\n            nve_vni: `str`\n            mcast: `str`\n\n            (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                  OR\n                  interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n    1. Learn Vxlan Ops object and store the mcast group under nve\n       if has any, otherwise, SKIP the trigger\n    2. Save the current device configurations through \"method\" which user uses\n    3. Unconfigure the mcast group with Interface Conf object\n    4. Verify the mcast from step 3 are no longer existed\n    5. Recover the device configurations to the one in step 2\n    6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1\n    ",
      "groups": [
        "unconfig-config",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveVniMcastGroup",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigNveVniMultisiteIngressReplication": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Add multisite ingress replication under Vxlan then restore the\n                           configuration by reapplying the whole running configuration\n\n           trigger_datafile:\n               Mandatory Arguments:\n                   timeout:\n                       max_time (`int`): Maximum wait time for the trigger in seconds.\n                                         Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                       method (`str`): Method to recover the device configuration.\n                                       Supported methods:\n                                           'checkpoint': Rollback the configuration\n                                                         using checkpoint (nxos),\n                                                         archive file (iosxe),\n                                                         load the saved running-config\n                                                         file on disk (iosxr)\n               Optional Arguments:\n                   tgn_timeout (`int`): Maximum wait time for all traffic streams to be\n                                        restored to the reference rate in seconds.\n                                        Default: 60\n                   tgn_delay (`int`): Wait time between each poll to verify if traffic\n                                      is resumed in seconds. Default: 10\n                   timeout_recovery:\n                       Buffer recovery timeout make sure devices are recovered at the\n                       end of the trigger execution. Used when previous timeouts have\n                       been exhausted.\n                       max_time (`int`): Maximum wait time for the last step of the\n                                         trigger in seconds. Default: 180\n                       interval (`int`): Wait time between iteration when looping is\n                                         needed in seconds. Default: 15\n                   static:\n                        The keys below are dynamically learnt by default.\n                        However, they can also be set to a custom value when provided in the trigger datafile.\n\n                        nve_name: `str`\n                        nve_vni: `str`\n\n                        (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                              OR\n                              interface: 'Ethernet1/1/1' (Specific value)\n           Steps:\n               1. Learn Vxlan Ops configured on device. SKIP the trigger if there\n                  is no vxlan configured on the device.\n               2. Save the current device configurations using \"method\" specified.\n               3. Add multisite ingress replication that using Genie Vxlan Conf.\n               4. Verify the newly multisite ingress replication under Vxlan is reflected in\n                  device configuration.\n               5. Restore the device configuration to the original configuration saved\n                  in step 2.\n               6. Learn Vxlan Ops again and verify it is the same as the Ops in step 1.\n                   ",
      "groups": [
        "unconfig-config",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vxlan.unconfigconfig.TriggerUnconfigConfigNveVniMultisiteIngressReplication",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vxlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigOspfInteface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "ospf",
        "L3"
      ],
      "intrfce": "HundredGigE1/0/48",
      "method": "checkpoint",
      "ospf_id": 101,
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.unconfigconfigOspf",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py"
    },
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of Ospf ",
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.unconfigconfigOspf",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigPhysicalTrunkInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigPhysicalTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigPhysicalTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned\n    physical (non-Loopback, non-Vlan, non-Null, non-Tunnel, non-subinterface etc.) \"trunk\" interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" physical \"trunk\" interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned physical interface(s) from step 1 \n           with Interface Conf object\n        4. Verify the physical interface(s) from step 3 are \"down\",\n           verify the configurations are all gone for the learned physical interface(s)\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigPhysicalTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigPimNbrInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned  pim neighbor interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim neighbor\n           interface(s) under default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim neighbor interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim neighbor interface(s) from step 2 is removed\n        4. Reapply the configuration of pim neighbor interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigPimNbrInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigPimNbrVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned\n    pim neighbor interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\" pim neighbor\n           interface(s) under non-default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim neighbor interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim neighbor interface(s) from step 2 is removed\n        4. Reapply the configuration of pim neighbor interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigPimNbrVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigPimNeighborFilter": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically\n    learned PIM interface(s)'s neighbor-filter.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vrf: `str`\n                interface: `str`\n                address_family: `str`\n                neighbor_filter: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Pim Ops object and store the \"up\" PIM interface(s)'s neighbor-filter\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned PIM interface(s)'s neighbor-filter from step 1 \n           with Pim Conf object\n        4. Verify the PIM interface(s)'s neighbor-filter from step 3\n           are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Pim Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "pim",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.pim.unconfigconfig.TriggerUnconfigConfigPimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/pim/nxos/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": null,
      "source": {
        "class": "triggers.unconfigconfig.pim.unconfigconfig.TriggerUnconfigConfigPimNeighborFilter",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/pim/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigRouteTargetEvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure route-target evpn and reapply the whole configurations of dynamically learned Vrf.\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vrf: `str`\n                    address_family: `str`\n                    rt: `str`\n                    rt_type: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vrf Conf object and check rt_evpn is available\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the rt_evpn with Vrf Conf object\n            4. Verify the evpn from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vrf Conf obj again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.trm.unconfigconfig.TriggerUnconfigConfigRouteTargetEvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/trm/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigRouteTargetMvpn": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure route-target mvpn and reapply the whole configurations of dynamically learned Vrf.\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                    method (`str`): Method to recover the device configuration,\n                                  Support methods:\n                                    'checkpoint': Rollback the configuration by\n                                                  checkpoint (nxos),\n                                                  archive file (iosxe),\n                                                  load the saved running-config file on disk (iosxr)\n            Optional:\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vrf: `str`\n                    address_family: `str`\n                    rt: `str`\n                    rt_type: `str`\n\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                          OR\n                          interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vrf Conf object and check rt_mvpn is available\n               if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the rt_mvpn with Vrf Conf object\n            4. Verify the mvpn from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vrf Conf obj again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "l3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.trm.unconfigconfig.TriggerUnconfigConfigRouteTargetMvpn",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/trm/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigStaticRpInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim\n    static rp interface(s) under default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim static rp\n           interface(s) under default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim static rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim static rp interface(s) from step 2 is removed\n        4. Reapply the configuration of pim static rp interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigStaticRpInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigStaticRpVrfInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned pim\n    static rp interface(s) under non-default vrf.\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn Pim Ops object and verify if has any \"up\"  pim static rp\n           interface(s) under non-default vrf, otherwise, SKIP the trigger\n        2. Unconfigure the learned pim static rp interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned pim static rp interface(s) from step 2 is removed\n        4. Reapply the configuration of pim static rp interface(s) with checkpoint\n        5. Learn Pim Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "pim",
        "multicast"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigStaticRpVrfInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 120
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVirtualTrunkInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVirtualTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L2"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVirtualTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned\n    virtual \"trunk\" (port-channel) interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" virtual \"trunk\" interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned virtual interface(s) from step 1 \n           with Interface Conf object\n        4. Verify the virtual interface(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVirtualTrunkInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVlan": {
    "iosxe": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned vlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vlan: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vlan Ops object and store the \"unshut\" vlan(s) if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned vlan with Vlan Conf object\n        4. Verify the vlan(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "vlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vlan.unconfigconfig.TriggerUnconfigConfigVlan",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 1800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vlan/iosxe/unconfigconfig.py"
    },
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned vlan(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            method (`str`): Method to recover the device configuration,\n                            Support methods:\n                            'checkpoint': Rollback the configuration by checkpoint\n                            'local': Rollback the configuration by locally saved config\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                             restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout when the previous timeout has been exhausted,\n                to make sure the devices are recovered before ending the trigger\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                vlan: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                     OR\n                     interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Vlan Ops object and store the \"unshut\" vlan(s) if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned vlan with Vlan Conf object\n        4. Verify the vlan(s) from step 3 are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "groups": [
        "unconfig-config",
        "vlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vlan.unconfigconfig.TriggerUnconfigConfigVlan",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 10,
        "max_time": 180
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVlanInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 15,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "nxos": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "interface",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 15,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    },
    "top": {
      "contribute": false,
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned Vlan interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n                method (`str`): Method to recover the device configuration,\n                              Support methods:\n                                'checkpoint': Rollback the configuration by\n                                              checkpoint (nxos),\n                                              archive file (iosxe),\n                                              load the saved running-config file on disk (iosxr)\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n            static:\n                The keys below are dynamically learnt by default.\n                However, they can also be set to a custom value when provided in the trigger datafile.\n\n                interface: `str`\n\n                (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                      OR\n                      interface: 'Ethernet1/1/1' (Specific value)\n    steps:\n        1. Learn Interface Ops object and store the \"up\" Vlan interface(s)\n           if has any, otherwise, SKIP the trigger\n        2. Save the current device configurations through \"method\" which user uses\n        3. Unconfigure the learned Vlan interface(s) from step 1 \n           with Interface Conf object\n        4. Verify the learned Vlan interface(s) are no longer existed\n        5. Recover the device configurations to the one in step 2\n        6. Learn Interface Ops again and verify it is the same as the Ops in step 1\n\n    ",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVlanInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVlanVnsegment": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the whole configurations of dynamically learned vlan(s).\n\n        trigger_datafile:\n            Mandatory:\n                timeout:\n                    max_time (`int`): Maximum wait time for the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n            Optional:\n                method (`str`): Method to recover the device configuration,\n                                Support methods:\n                                'checkpoint': Rollback the configuration by checkpoint\n                                'local': Rollback the configuration by locally saved config\n                tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                     restored to the reference rate,\n                                     in second. Default: 60\n                tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                                   in second. Default: 10\n                timeout_recovery:\n                    Buffer recovery timeout when the previous timeout has been exhausted,\n                    to make sure the devices are recovered before ending the trigger\n\n                    max_time (`int`): Maximum wait time for the last step of the trigger,\n                                    in second. Default: 180\n                    interval (`int`): Wait time between iteration when looping is needed,\n                                    in second. Default: 15\n                static:\n                    The keys below are dynamically learnt by default.\n                    However, they can also be set to a custom value when provided in the trigger datafile.\n\n                    vlan: `str`\n                    vn_segment_id: `int`\n                    (e.g) interface: '(?P<interface>Ethernet1*)' (Regex supported)\n                         OR\n                         interface: 'Ethernet1/1/1' (Specific value)\n        steps:\n            1. Learn Vlan Ops object and store the \"unshut\" vlan(s) if has any, otherwise, SKIP the trigger\n            2. Save the current device configurations through \"method\" which user uses\n            3. Unconfigure the learned vn_segment_id with Vlan Conf object\n            4. Verify the vlan(s) from step 3 are no longer existed\n            5. Recover the device configurations to the one in step 2\n            6. Learn Vlan Ops again and verify it is the same as the Ops in step 1\n\n        ",
      "groups": [
        "unconfig-config",
        "vlan",
        "vxlan",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.vlan.unconfigconfig.TriggerUnconfigConfigVlanVnsegment",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 180
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 300
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/vlan/nxos/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVrf": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "vrf",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.unconfigconfig.vrf.iosxe.unconfigconfig.TriggerUnconfigConfigVrf",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/vrf/iosxe/unconfigconfig.py",
      "vrf_id": "blue"
    },
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of Vrf ",
      "source": {
        "class": "triggers.contrib.unconfigconfig.vrf.iosxe.unconfigconfig.TriggerUnconfigConfigVrf",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/vrf/iosxe/unconfigconfig.py"
    }
  },
  "TriggerUnconfigConfigVxlanNveOverlayInterface": {
    "nxos": {
      "devices": [
        "uut"
      ],
      "doc": "Unconfigure and reapply the dynamically learned Nve onverlay interface(s).\n\n    trigger_datafile:\n        Mandatory:\n            timeout: \n                max_time (`int`): Maximum wait time for the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n        Optional:\n            tgn_timeout (`int`): Maximum wait time for all traffic threads to be\n                                 restored to the reference rate,\n                                 in second. Default: 60\n            tgn_delay (`int`): Wait time between each poll to verify if traffic is resumed,\n                               in second. Default: 10\n            timeout_recovery: \n                Buffer recovery timeout make sure devices are recovered at the end\n                of the trigger execution. Used when previous timeouts have been exhausted.\n\n                max_time (`int`): Maximum wait time for the last step of the trigger,\n                                in second. Default: 180\n                interval (`int`): Wait time between iteration when looping is needed,\n                                in second. Default: 15\n\n    steps:\n        1. Learn VxLan Ops object and verify if has any \"up\" Nve interface(s),\n           otherwise, SKIP the trigger\n        2. Unconfigure the learned Nve interface(s) from step 1 with Interface Conf object\n        3. Verify the state of learned Nve interface(s) from step 2 is removed\n        4. Reapply the configuration of Nve interface(s) with checkpoint\n        5. Learn VxLan Ops again and verify it is the same as the Ops in step 1\n        \n    ",
      "groups": [
        "unconfig-config",
        "interface",
        "vxlan"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.unconfigconfig.interface.unconfigconfig.TriggerUnconfigConfigVxlanNveOverlayInterface",
        "pkg": "genie.libs.sdk"
      },
      "timeout": {
        "interval": 20,
        "max_time": 360
      },
      "timeout_recovery": {
        "interval": 20,
        "max_time": 800
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/unconfigconfig/interface/nxos/unconfigconfig.py"
    }
  },
  "Triggermodifyacl": {
    "iosxe": {
      "aclname": "ip_basic_in_abcdefghijklmnopqrstuvwxyz_1234567890",
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "modify",
        "acl",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.modify.acl.iosxe.modify.Triggermodifyacl",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/modify/acl/iosxe/modify.py"
    },
    "top": {
      "contribute": true,
      "doc": null,
      "source": {
        "class": "triggers.contrib.modify.acl.iosxe.modify.Triggermodifyacl",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/modify/acl/iosxe/modify.py"
    }
  },
  "Triggermplsaddremove": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "mpls",
        "L3"
      ],
      "isis_name": "core",
      "method": "checkpoint",
      "ospf_id": 101,
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.Triggermplsaddremove",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    },
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of mpls ",
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.Triggermplsaddremove",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    }
  },
  "Triggermplsexplicitnull": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "add-remove",
        "mpls",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.Triggermplsexplicitnull",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    },
    "top": {
      "contribute": true,
      "doc": " mpls explict null",
      "source": {
        "class": "triggers.contrib.addremove.mpls.iosxe.addremove.Triggermplsexplicitnull",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/addremove/mpls/iosxe/addremove.py"
    }
  },
  "TriggerunconfigconfigInterface": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "flow_monitor": "ipv4_flow_monitor",
      "groups": [
        "unconfig-config",
        "interface",
        "L3"
      ],
      "interface": "hundredGigE 1/0/48",
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.unconfigconfig.interface.iosxe.unconfigconfig.TriggerunconfigconfigInterface",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/interface/iosxe/unconfigconfig.py"
    },
    "top": {
      "contribute": true,
      "doc": null,
      "source": {
        "class": "triggers.contrib.unconfigconfig.interface.iosxe.unconfigconfig.TriggerunconfigconfigInterface",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/interface/iosxe/unconfigconfig.py"
    }
  },
  "Triggerunconfigconfigcdp": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "cdp",
        "L3"
      ],
      "method": "checkpoint",
      "source": {
        "class": "triggers.contrib.unconfigconfig.cdp.iosxe.unconfigconfig.Triggerunconfigconfigcdp",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/cdp/iosxe/unconfigconfig.py"
    },
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of cdp ",
      "source": {
        "class": "triggers.contrib.unconfigconfig.cdp.iosxe.unconfigconfig.Triggerunconfigconfigcdp",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/cdp/iosxe/unconfigconfig.py"
    }
  },
  "Triggeruserconfigentry": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "ospf",
        "L3"
      ],
      "method": "checkpoint",
      "ospf_id": 101,
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.Triggeruserconfigentry",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py",
      "user_config": "router ospf 101"
    },
    "top": {
      "contribute": true,
      "doc": null,
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.Triggeruserconfigentry",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py"
    }
  },
  "testcases": [
    "TriggerSleep",
    "TriggerProfileSystem",
    "TriggerUnconfigConfigOspfInteface",
    "unconfigconfigOspf",
    "Triggeruserconfigentry",
    "TriggerunconfigconfigInterface",
    "Triggerunconfigconfigcdp",
    "TriggerClearIpOspfNeighborVrfAll",
    "TriggerRestartOspf",
    "unconfigconfigOspfmaxpath",
    "TriggerRestartBgp",
    "TriggerClearBgpVpnv4UnicastVrfAll",
    "TriggerClearBgpVpnv6UnicastVrfAll",
    "TriggerClearIpBgpVrfAll",
    "TriggerClearBgpAll",
    "TriggerClearIpBgpSoft",
    "TriggerClearBgpNeighbor",
    "TriggerClearBgpNeighborSoft",
    "TriggerClearBgpNeighborIpv4",
    "TriggerClearBgpNeighborIpv6",
    "TriggerClearBgpNeighborSoftIpv4",
    "TriggerClearBgpNeighborSoftIpv6",
    "TriggerClearIpRouteCheckBgp",
    "TriggerUnconfigConfigBgpFastExternalFallover",
    "TriggerUnconfigConfigBgpKeepaliveHoldtime",
    "TriggerUnconfigConfigBgpNeighborSoftReconfiguration",
    "TriggerUnconfigConfigBgpNeighborSendCommunity",
    "TriggerUnconfigConfigBgpNeighborSendCommunityExtended",
    "TriggerUnconfigConfigBgp",
    "TriggerUnconfigConfigBgpWithCR",
    "TriggerUnconfigConfigBgpGracefulRestart",
    "TriggerUnconfigConfigBgpNeighbor",
    "TriggerUnconfigConfigBgpNeighborWithCR",
    "TriggerUnconfigConfigBgpNeighborDefaultOriginate",
    "TriggerUnconfigConfigBgpNeighborNextHopSelf",
    "TriggerUnconfigConfigBgpNeighborTransportConnectionModePassive",
    "TriggerUnconfigConfigBgpNeighborPassword",
    "TriggerUnconfigConfigBgpNeighborBfd",
    "TriggerUnconfigConfigBgpNeighborRouteReflectorClient",
    "TriggerUnconfigConfigBgpNeighborIpv4",
    "TriggerUnconfigConfigBgpNeighborIpv4WithCR",
    "TriggerUnconfigConfigVrf",
    "TriggerUnconfigConfigBgpNeighborIpv6",
    "TriggerUnconfigConfigBgpNeighborIbgp",
    "TriggerUnconfigConfigBgpNeighborIbgpWithCR",
    "TriggerUnconfigConfigBgpRouterId",
    "TriggerUnconfigConfigBgpNeighborVrf",
    "TriggerUnconfigConfigBgpNeighborVrfWithCR",
    "TriggerUnconfigConfigBgpNeighborAsOverride",
    "TriggerUnconfigConfigBgpVpnRd",
    "TriggerUnconfigConfigBgpNeighborEbgp",
    "TriggerUnconfigConfigBgpL2vpnCapability",
    "TriggerDisableEnableBgp",
    "TriggerDisableEnableBgpWithCR",
    "TriggerDisableEnableVlanInterface",
    "TriggerDisableEnableVnSegmentVlan",
    "TriggerAddRemoveBgpNeighborRoutemap",
    "TriggerAddRemoveBgpNeighborCapabilitySuppress4ByteAs",
    "TriggerAddRemoveBgpNetworkIPv4",
    "TriggerAddRemoveBgpNetworkIPv6",
    "TriggerAddRemoveBgpNeighborSendCommunity",
    "TriggerAddRemoveBgpNeighborSendCommunityExtended",
    "TriggerAddRemoveBgpNeighborSoftReconfiguration",
    "TriggerAddRemoveBgpNeighborRemovePrivateAs",
    "TriggerAddRemoveBgpAggregateAddressIpv4",
    "TriggerAddRemoveBgpAggregateAddressIpv6",
    "TriggerAddRemoveBgpKeepaliveHoldtime",
    "TriggerAddRemoveBgpMaximumPathsEbgp",
    "Triggermplsaddremove",
    "Triggermplsexplicitnull",
    "TriggerAddRemoveBgpNeighborRoutemapPrefixlist",
    "TriggerAddRemoveBgpNeighborRoutemapWeight",
    "TriggerAddRemoveBgpNeighborUpdateSource",
    "TriggerAddRemoveBgpNeighborDescription",
    "TriggerAddRemoveBgpNeighborDisableConnectedCheck",
    "TriggerAddRemoveBgpNeighborBfd",
    "TriggerAddRemoveBgpNeighborMaximumPrefix",
    "TriggerAddRemoveBgpNeighborNextHopSelf",
    "TriggerAddRemoveBgpNeighborDefaultOriginate",
    "TriggerAddRemoveBgpNeighborPassword",
    "TriggerAddRemoveBgpNeighborTransportConnectionModePassive",
    "TriggerAddRemoveBgpRedistributeConnected",
    "TriggerAddRemoveBgpRedistributeStatic",
    "TriggerAddRemoveBgpNeighborRouteReflectorClient",
    "TriggerAddRemoveBgpRedistributeOspf",
    "TriggerAddRemoveBgpNeighborAsOverride",
    "TriggerAddRemoveMplsLdpAutoConfig",
    "TriggerShutNoShutBgp",
    "TriggerShutNoShutBgpNeighbors",
    "TriggerShutNoShutBgpLoopbackInterface",
    "TriggerModifyBgpKeepaliveHoldtime",
    "TriggerModifyBgpNeighborAsn",
    "TriggerModifyBgpNeighborCluster",
    "TriggerModifyBgpNeighborRoutemapIn",
    "TriggerModifyBgpNeighborRoutemapOut",
    "Triggermodifyacl",
    "TriggerModifyBgpKeepAliveInterval",
    "TriggerModifyBgpGracefulRestartRestartTime",
    "TriggerModifyBgpGracefulRestartStalePathTime",
    "TriggerModifyBgpNeighborKeepAliveInterval",
    "TriggerModifyBgpNeighborEbgpMultihop",
    "TriggerModifyBgpNeighborUpdateSource",
    "TriggerModifyBgpNeighborMaximumPrefix",
    "TriggerModifyBgpNeighborPassword",
    "TriggerModifyBgpVpnRd",
    "TriggerDisableEnableHsrp",
    "TriggerModifyHsrpIpv4StateActiveToStandby",
    "TriggerModifyHsrpIpv6StateActiveToStandby",
    "TriggerUnconfigConfigVlan",
    "TriggerUnconfigConfigVlanVnsegment",
    "TriggerModifyVlanVnsegment",
    "TriggerShutNoShutVlan",
    "TriggerDisableEnablePim",
    "TriggerDisableEnablePim6",
    "TriggerShutNoShutBsrRpInterface",
    "TriggerShutNoShutBsrRpVrfInterface",
    "TriggerShutNoShutStaticRpInterface",
    "TriggerShutNoShutStaticRpVrfInterface",
    "TriggerShutNoShutPimNbrInterface",
    "TriggerShutNoShutPimNbrVrfInterface",
    "TriggerModifyPimNeighborFilter",
    "TriggerUnconfigConfigPimNeighborFilter",
    "TriggerAddRemovePimNeighborFilter",
    "TriggerClearCountersInterfaceAll",
    "TriggerShutNoShutEthernetInterface",
    "TriggerShutNoShutPortChannelInterface",
    "TriggerShutNoShutTrunkInterface",
    "TriggerShutNoShutVlanInterface",
    "TriggerShutNoShutLoopbackInterface",
    "TriggerShutNoShutHsrpIpv4VlanInterface",
    "TriggerShutNoShutHsrpIpv6VlanInterface",
    "TriggerShutNoShutNativeIpv4SviInterface",
    "TriggerShutNoShutIpv4SviInterface",
    "TriggerShutNoShutDot1xInterface",
    "TriggerShutNoShutNveOverlayInterface",
    "TriggerShutNoShutNveLoopbackInterface",
    "TriggerShutNoShutAutoRpInterface",
    "TriggerShutNoShutAutoRpVrfInterface",
    "TriggerModifySwitchportModeTrunkToAccess",
    "TriggerModifyEthernetMtu",
    "TriggerModifyLoopbackInterfaceIp",
    "TriggerModifyLoopbackInterfaceIpv6",
    "TriggerModifySviInterfaceIp",
    "TriggerModifyVlanMtu",
    "TriggerUnconfigConfigLoopbackInterface",
    "TriggerUnconfigConfigPhysicalTrunkInterface",
    "TriggerUnconfigConfigVirtualTrunkInterface",
    "TriggerUnconfigConfigEthernetInterface",
    "TriggerUnconfigConfigEthernetInterfaceSub",
    "TriggerUnconfigConfigVlanInterface",
    "TriggerUnconfigConfigVxlanNveOverlayInterface",
    "TriggerUnconfigConfigAutoRpInterface",
    "TriggerUnconfigConfigAutoRpVrfInterface",
    "TriggerUnconfigConfigBsrRpInterface",
    "TriggerUnconfigConfigBsrRpVrfInterface",
    "TriggerUnconfigConfigStaticRpInterface",
    "TriggerUnconfigConfigStaticRpVrfInterface",
    "TriggerUnconfigConfigPimNbrInterface",
    "TriggerUnconfigConfigPimNbrVrfInterface",
    "TriggerUnconfigConfigMplsStaticBindings",
    "TriggerProcessCliRestartBgp",
    "TriggerProcessCrashRestartBgp",
    "TriggerProcessKillRestartBgp",
    "TriggerProcessCliRestartOspf",
    "TriggerProcessCrashRestartOspf",
    "TriggerProcessKillRestartOspf",
    "TriggerProcessCrashRestartSysmgr",
    "TriggerProcessKillRestartSysmgr",
    "TriggerProcessCrashRestartMrib",
    "TriggerProcessKillRestartMrib",
    "TriggerProcessCliRestartOspfv3",
    "TriggerProcessCrashRestartOspfv3",
    "TriggerProcessKillRestartOspfv3",
    "TriggerProcessCliRestartEigrp",
    "TriggerProcessCrashRestartEigrp",
    "TriggerProcessKillRestartEigrp",
    "TriggerProcessCliRestartIsis",
    "TriggerProcessCrashRestartIsis",
    "TriggerProcessKillRestartIsis",
    "TriggerProcessCliRestartRip",
    "TriggerProcessCrashRestartRip",
    "TriggerProcessKillRestartRip",
    "TriggerProcessCliRestartMsdp",
    "TriggerProcessCrashRestartMsdp",
    "TriggerProcessKillRestartMsdp",
    "TriggerProcessCliRestartPim",
    "TriggerProcessCrashRestartPim",
    "TriggerProcessKillRestartPim",
    "TriggerProcessCliRestartPim6",
    "TriggerProcessCrashRestartPim6",
    "TriggerProcessKillRestartPim6",
    "TriggerProcessCliRestartIgmp",
    "TriggerProcessCrashRestartIgmp",
    "TriggerProcessKillRestartIgmp",
    "TriggerProcessCliRestartRsvp",
    "TriggerProcessCrashRestartRsvp",
    "TriggerProcessKillRestartRsvp",
    "TriggerProcessCrashRestartSyslogd",
    "TriggerProcessKillRestartSyslogd",
    "TriggerProcessCrashRestartFeatureMgr",
    "TriggerProcessKillRestartFeatureMgr",
    "TriggerProcessCrashRestartVdcMgr",
    "TriggerProcessKillRestartVdcMgr",
    "TriggerProcessCrashRestartLacp",
    "TriggerProcessKillRestartLacp",
    "TriggerProcessCrashRestartCfs",
    "TriggerProcessKillRestartCfs",
    "TriggerProcessCrashRestartAclmgr",
    "TriggerProcessKillRestartAclmgr",
    "TriggerProcessCrashRestartMonitorc",
    "TriggerProcessKillRestartMonitorc",
    "TriggerProcessCrashRestartTunnel",
    "TriggerProcessKillRestartTunnel",
    "TriggerProcessCrashRestartEltm",
    "TriggerProcessKillRestartEltm",
    "TriggerProcessCrashRestartVlanMgr",
    "TriggerProcessKillRestartVlanMgr",
    "TriggerProcessCrashRestartPlugin",
    "TriggerProcessKillRestartPlugin",
    "TriggerProcessCrashRestartFsDaemon",
    "TriggerProcessKillRestartFsDaemon",
    "TriggerProcessCrashRestartConfCheck",
    "TriggerProcessKillRestartConfCheck",
    "TriggerProcessCrashRestartGlbp",
    "TriggerProcessKillRestartGlbp",
    "TriggerProcessCrashRestartBfd",
    "TriggerProcessKillRestartBfd",
    "TriggerProcessCrashRestartL2rib",
    "TriggerProcessKillRestartL2rib",
    "TriggerProcessCrashRestartNetstack",
    "TriggerProcessKillRestartNetstack",
    "TriggerProcessCrashRestartNve",
    "TriggerProcessKillRestartNve",
    "TriggerProcessCrashRestartStp",
    "TriggerProcessKillRestartStp",
    "TriggerProcessCrashRestartUrib",
    "TriggerProcessKillRestartUrib",
    "TriggerProcessCrashRestartVpc",
    "TriggerProcessKillRestartVpc",
    "TriggerProcessCrashRestartMonitor",
    "TriggerProcessKillRestartMonitor",
    "TriggerProcessCrashRestartIntersight",
    "TriggerProcessKillRestartIntersight",
    "TriggerProcessCrashRestartNXOSDC",
    "TriggerProcessKillRestartNXOSDC",
    "TriggerIssu",
    "TriggerIssuNative",
    "TriggerIssuLxc",
    "TriggerSwitchover",
    "TriggerReload",
    "TriggerReloadTor",
    "TriggerReloadFabricModule",
    "TriggerReloadActiveSystemController",
    "TriggerReloadStandbySystemController",
    "TriggerReloadEthernetModule",
    "TriggerReloadActiveRP",
    "TriggerReloadStandbyRP",
    "TriggerReloadActiveFP",
    "TriggerReloadMember",
    "TriggerReloadOirEdge",
    "TriggerCheckCommands",
    "TriggerModifyPvstDesgToRoot",
    "TriggerModifyRapidPvstDesgToRoot",
    "TriggerAddRemoveIpv4StaticRoutes",
    "TriggerAddRemoveIpv6StaticRoutes",
    "TriggerAddRemoveEthernetMacAcl",
    "TriggerAddRemoveEthernetIpAclPermit",
    "TriggerAddRemoveEthernetIpAclDeny",
    "TriggerAddRemoveVlanIpAclPermit",
    "TriggerModifyLldpTimer",
    "TriggerAddRemoveTrunkEtherchannelLacp",
    "TriggerAddRemoveAccessEtherchannelPagp",
    "TriggerAddRemoveL3EtherchannelPagp",
    "TriggerModifyDot1xUserCredential",
    "TriggerClearIpRouteVrfAll",
    "TriggerClearIpv6RouteVrfAll",
    "TriggerUnconfigConfigEvpnVni",
    "TriggerUnconfigConfigNveMultisiteBgwInterface",
    "TriggerUnconfigConfigEvpnMsiteBgw",
    "TriggerUnconfigConfigEvpnMsiteBgwDelayRestoreTime",
    "TriggerUnconfigConfigEvpnMsiteDciTracking",
    "TriggerUnconfigConfigEvpnMsiteFabricTracking",
    "TriggerUnconfigConfigNveSourceInterfaceLoopback",
    "TriggerUnconfigConfigNveAdvertiseVirtualRmac",
    "TriggerUnconfigConfigEvpn",
    "TriggerUnconfigConfigNvOverlayEvpn",
    "TriggerUnconfigConfigNveVniMcastGroup",
    "TriggerUnconfigConfigNveVniMultisiteIngressReplication",
    "TriggerUnconfigConfigNveVniAssociateVrf",
    "TriggerUnconfigConfigBgpAfL2vpnEvpnRewriteEvpnRtAsn",
    "TriggerModifyNveMultisiteBgwInterface",
    "TriggerModifyEvpnMsiteBgwDelayRestoreTime",
    "TriggerModifyNveVniMcastGroup",
    "TriggerModifyNveSourceInterfaceLoopback",
    "TriggerModifyEvpnRd",
    "TriggerAddRemoveNveVniMcastGroup",
    "TriggerAddRemoveNveAdvertiseVirtualRmac",
    "TriggerAddRemoveEvpnMsiteBgwDelayRestoreTime",
    "TriggerAddRemoveNveVniMultisiteIngressReplication",
    "TriggerAddRemoveNveMultisiteBgwInterface",
    "TriggerAddRemoveBgpAfL2vpnEvpnRewriteEvpnRtAsn",
    "TriggerDisableEnableNveOverlay",
    "TriggerDisableEnableVnSegmentVlanWithNvOverlay",
    "TriggerClearIpRoute",
    "TriggerClearIpv6Route",
    "TriggerClearIpRouting",
    "TriggerClearRouting",
    "TriggerClearIpv6Routing",
    "TriggerClearRoutingUnicast",
    "TriggerClearIpRoutingUnicast",
    "TriggerClearIpv6RoutingUnicast",
    "TriggerClearIpRoutingMulticast",
    "TriggerClearRoutingMulticast",
    "TriggerClearV4RouteMulticast",
    "TriggerClearV6RouteMulticast",
    "TriggerClearIpMroute",
    "TriggerClearIpv6Mroute",
    "TriggerClearIpMrouteVrfAll",
    "TriggerClearIpv6MrouteVrfAll",
    "TriggerClearMsdpPeer",
    "TriggerClearMsdpStatistics",
    "TriggerClearMsdpPolicyStatisticsSaPolicyIn",
    "TriggerClearMsdpPolicyStatisticsSaPolicyOut",
    "TriggerClearMsdpSaCache",
    "TriggerClearMsdpRoute",
    "TriggerShutNoShutMsdp",
    "TriggerUnconfigConfigMsdpPeer",
    "TriggerUnconfigConfigMsdpSaFilterIn",
    "TriggerUnconfigConfigMsdpSaFilterOut",
    "TriggerUnconfigConfigMsdpSaLimit",
    "TriggerUnconfigConfigMsdpDescription",
    "TriggerUnconfigConfigMsdpMeshGroup",
    "TriggerUnconfigConfigMsdpKeepaliveHoldtime",
    "TriggerUnconfigConfigMsdpReconnectInterval",
    "TriggerUnconfigConfigMsdpOriginatorId",
    "TriggerModifyMsdpOriginatorId",
    "TriggerModifyMsdpSaFilterIn",
    "TriggerModifyMsdpSaFilterOut",
    "TriggerModifyMsdpSaLimit",
    "TriggerModifyMsdpMeshGroup",
    "TriggerModifyMsdpKeepaliveHoldtime",
    "TriggerModifyMsdpReconnectInterval",
    "TriggerModifyMsdpDescription",
    "TriggerModifyMsdpPeerConnectedSource",
    "TriggerModifyMsdpPeerAs",
    "TriggerAddRemoveMsdpPeer",
    "TriggerAddRemoveMsdpOriginatorId",
    "TriggerAddRemoteMsdpSaFilterIn",
    "TriggerAddRemoveMsdpSaFilterOut",
    "TriggerAddRemoveMsdpSaLimit",
    "TriggerAddRemoveMsdpMeshGroup",
    "TriggerAddRemoveMsdpKeepaliveHoldtime",
    "TriggerAddRemoveMsdpReconnectInterval",
    "TriggerAddRemoveMsdpDescription",
    "TriggerDisableEnableNgmvpn",
    "TriggerProcessCrashRestartNgmvpn",
    "TriggerProcessKillRestartNgmvpn",
    "TriggerUnconfigConfigBgpAddressFamilyIpv4Mvpn",
    "TriggerUnconfigConfigBgpNeighborAddressFamilyIpv4Mvpn",
    "TriggerUnconfigConfigRouteTargetMvpn",
    "TriggerUnconfigConfigRouteTargetEvpn",
    "TriggerUnconfigConfigAdvertiseEvpnMulticast",
    "TriggerAddRemoveRouteTargetMvpn",
    "TriggerAddRemoveRouteTargetEvpn",
    "TriggerAddRemoveAdvertiseEvpnMulticast",
    "TriggerUnconfigConfigIgmpEnable",
    "TriggerUnconfigConfigMldEnable",
    "TriggerUnconfigConfigIgmpVersion",
    "TriggerUnconfigConfigMldVersion",
    "TriggerUnconfigConfigIgmpJoinGroup",
    "TriggerUnconfigConfigMldJoinGroup",
    "TriggerUnconfigConfigIgmpStaticGroup",
    "TriggerUnconfigConfigMldStaticGroup",
    "TriggerModifyIgmpVersion",
    "TriggerModifyMldVersion",
    "TriggerAddRemoveIgmpEnable",
    "TriggerAddRemoveIgmpVersion",
    "TriggerAddRemoveIgmpJoinGroup",
    "TriggerAddRemoveIgmpStaticGroup",
    "TriggerAddRemoveMldEnable",
    "TriggerAddRemoveMldVersion",
    "TriggerAddRemoveMldJoinGroup",
    "TriggerAddRemoveMldStaticGroup",
    "TriggerStopStartSimulation"
  ],
  "tokens": [
    "asr1k",
    "c3850",
    "cat9k",
    "csr1000v",
    "ios",
    "iosxe",
    "iosxr",
    "iosxrv",
    "junos",
    "n3k",
    "n7k",
    "n9300",
    "n9k",
    "n9kv",
    "ncs5500",
    "nxos",
    "virl"
  ],
  "unconfigconfigOspf": {
    "iosxe": {
      "contribute": false,
      "devices": [
        "uut"
      ],
      "doc": "",
      "groups": [
        "unconfig-config",
        "ospf",
        "L3"
      ],
      "method": "checkpoint",
      "ospf_id": 101,
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.unconfigconfigOspf",
        "pkg": "genie.libs.sdk"
      },
      "tgn_delay": 10,
      "tgn_timeout": 300,
      "timeout": {
        "interval": 10,
        "max_time": 400
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py"
    },
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of Ospf ",
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig.unconfigconfigOspf",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig.py"
    }
  },
  "unconfigconfigOspfmaxpath": {
    "top": {
      "contribute": true,
      "doc": " Config and Unconfig of Ospf max paths ",
      "source": {
        "class": "triggers.contrib.unconfigconfig.ospf.iosxe.unconfigconfig1.unconfigconfigOspfmaxpath",
        "pkg": "genie.libs.sdk"
      },
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/triggers/contrib/unconfigconfig/ospf/iosxe/unconfigconfig1.py"
    }
  }
}