{
  "add_device_to_testbed_yaml_file": {
    "nxos": {
      "doc": " Add device details to the devices yaml file\n\n        Args:\n            device_name ('str'): Name of the device to be added as a string\n            device_ip ('str'): IP address of the device to be added as a string\n            yaml_file ('str'): Name(path) of the yaml file where the device\n                       is to be added as a string\n        Return value:\n            None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "add_device_to_testbed_yaml_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L281"
    }
  },
  "analyze_core_by_bingopy": {
    "nxos": {
      "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            clear_cores (`bool`): To clear cores before generating core. Default to True\n            service (`str`): service to generate core\n            remote_server (`str`): remote server name in testbed yaml\n            remote_user (`str`, optional): userid on remote server\n            remote_pass (`str`, optional): password of userid on remote server\n            remote_location (`str`): Location of saving core file\n            remote_via: (`str`, optional): specify connection to get ip\n                                 if not specified, use active connection one\n            vrf (`str`): VRF for copying file to remote server\n                         Defaults to management\n            private_image_tree (`str`, optional): Tree location for private image\n            private_image_process_path (`str`, optional): Process path for private image\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n            clear_cores (`Bool`, optional): clear cores if TRUE. Defaults to True\n            max_time (`int`, optional): Maximum time to wait. \n                                        Defaults to 360 seconds\n            check_interval (`int`, optional): Time interval while checking.\n                                              Defaults to 10 seconds\n            bloggered (`bool`, optional): if use bloggered command\n                                          if False, use kill -6 command instead\n                                          Defaults to True\n            source_location (`str`, optional): source file location for BingoPy\n                                               Defaults to /auto/andatc/independent/shellrc-files/current/rc/.bashrc.build\n            bingopy_location (`str`, optional): bingopy location\n                                                Defaults to /ws/xianqin-sjc/bingo/blogger_core.pl\n\n        Returns:\n            out (`str`): Output of BingoPy\n    ",
      "module_name": "bingopy.bingopy",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_core_by_bingopy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/bingopy/bingopy.py#L16"
    }
  },
  "analyze_core_by_ucd": {
    "linux": {
      "doc": " analyze core by UCD\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            core_file (`str`): core file name with path to analyze by UCD\n            gdb_command (`str`, optional): gdb command in GDB\n                                           Defaults to `bt full`\n            ucd_command (`str`, optional): ucd command with path and options\n                                           Defaults to `/ws/cvanka-sjc/ucd/ucd -c`\n            timeout (`int`, optional): timeout to expire for device.receive()\n                                       Defaults to 300 seconds\n\n        Returns:\n            out (`str`): Output of UCD\n    ",
      "module_name": "ucd.ucd",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_core_by_ucd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/ucd/ucd.py#L9"
    }
  },
  "analyze_rate": {
    "com": {
      "doc": " Get the traffic rate and the corresponding unit\n\n        Args:\n            rate (`str`): Passed rate as a string\n\n        Returns:\n            rate (`int`): Traffic rate\n            rate_unit (`str`): Traffic rate unit\n            original_rate (`str`): Original Traffic rate\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L586"
    }
  },
  "analyze_udp_in_mpls_packets": {
    "iosxe": {
      "doc": " Analyze passed packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address ('str'): Destination IP address\n            ttl (`int`): Time to live\n            packet_count (`int`): Packet count to check during\n                packet analysis\n            destination_port (`int`): Destination port start \"traceroute\"\n        Returns:\n            pkt count\n        Raises:\n            None \n    ",
      "module_name": "udp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "analyze_udp_in_mpls_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udp/get.py#L10"
    }
  },
  "apic_rest_delete": {
    "apic": {
      "doc": "DELETE REST Command to delete information from the device\n\n        Args:\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_delete",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L144"
    }
  },
  "apic_rest_get": {
    "apic": {
      "doc": "GET REST Command to retrieve information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            connection_alias (`str`): Connection alias\n            query_target {self|children|subtree}:\n                                'self': (default) MO itself\n                                'children': just the MO's child objects\n                                'subtree': MO and its child objects\n            rsp_subtree {no|children|full}: Specifies child object level\n                                            included in the response\n                                            'no': (default) the response\n                                                   does not include any children\n                                            'children': return only the child\n                                                        objects\n                                            'full': includes the full tree\n                                                    structure\n            rsp_prop_include {all|naming-only|config-only}:\n                                'all': all properties of the objects\n                                'naming-only': only the naming properties\n                                'config-only': only configurable properties\n            rsp_subtree_include (`string`): specify additional contained objects\n                                          or options to be included\n            rsp_subtree_class (`string`) : specify classes\n            target_subtree_class (string): specify subtree classes\n            query_target_filter (`string`): filter expression\n            order_by (`string`): sort the query response by one or\n                                 more properties of a class\n            expected_status_code (`int`): Expected result\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_get",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L15"
    }
  },
  "apic_rest_post": {
    "apic": {
      "doc": "POST REST Command to configure information from the device\n\n        Args:\n            device (`obj`): Device object\n            dn (`string`): Unique distinguished name that describes the object\n                         and its place in the tree.\n            payload (`dict`): Dictionary containing the information to send via\n                            the post\n            xml_payload (bool): Set to True if payload is in XML format\n            connection_alias (`str`): Connection alias\n            expected_status_code (`int`): Expected result\n            timeout (`int`): Maximum time\n\n        Returns:\n            Output from REST API\n\n        Raise:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "apic_rest_post",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L95"
    }
  },
  "arithmetic_operations": {
    "com": {
      "doc": "\n    Perform arithmetic operations on operands.\n\n    Args:\n        operation (`str`): string indicating the calculation method.\n                           'addition' is '+'\n                           'subtraction' is '-'\n                           'multiplication' is '*'\n                           'division' is '/'\n        operands (`list`): operands to be calculated.\n                           example: [1, 2]\n\n    Returns:\n        Numerical : Calculation result\n        None      : When an abnormality occurs during calculation\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "arithmetic_operations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3899"
    }
  },
  "assign_default_ipv4_sgacl": {
    "iosxe": {
      "doc": " Assign a default static SGACL(ipv4)\n        Args:\n            device ('obj'): device to use\n             sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to assign default static SGACL(ipv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "assign_default_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L175"
    }
  },
  "assign_static_ipv4_sgacl": {
    "iosxe": {
      "doc": " Assign static SGACL(Ipv4)\n        Args:\n            device ('obj'): device to use\n            src_sgt (`str`): Source Group Tag\n            dest_sgt (`str`): Destination Group Tag\n            sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to assign static SGACL(IPv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "assign_static_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L152"
    }
  },
  "attach_device_tracking_policy_to_interface": {
    "iosxe": {
      "doc": " Attach Device Tracking Policy to a interface\n\n        Args:\n            device (`obj`): Device object\n            policy_name (`str`): Policy name to be attached to interface\n            interface (`str`): interface to attach policy\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_device_tracking_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2510"
    }
  },
  "attach_dhcpv6_guard_policy_to_interface": {
    "iosxe": {
      "doc": " Attach DHCPv6 Guard Policy to an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_dhcpv6_guard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2123"
    }
  },
  "attach_dhcpv6_guard_policy_to_vlan": {
    "iosxe": {
      "doc": " Attach DHCPv6 Guard Policy to a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_dhcpv6_guard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2442"
    }
  },
  "attach_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Attaches the given ipv6 dhcp guard policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be attached\n            interface (str): interface to attach policy to\n            vlan (str): vlan or vlan range to attach the policy to. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L356"
    }
  },
  "attach_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Attaches the given ipv6 nd suppress policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be attached\n            interface (str): interface to attach policy to\n            vlan (str): vlan or vlan range to attach the policy to. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 nd suppress policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L428"
    }
  },
  "attach_ipv6_raguard_policy_to_interface": {
    "iosxe": {
      "doc": " Attach IPv6 RA Guard Policy to an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_raguard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1967"
    }
  },
  "attach_ipv6_raguard_policy_to_vlan": {
    "iosxe": {
      "doc": " Attach IPv6 RA Guard Policy to a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "attach_ipv6_raguard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2259"
    }
  },
  "authentication_convert_to_new_style": {
    "iosxe": {
      "doc": "Common function to configure authentication convert-to new-style for both forced and without forced\n    \n        Args:\n            device ('obj'): device to use\n            force (`str`): Cli input to continue (default value is None)\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure: Failed to configure authentication convert-to new-style\n            ",
      "module_name": "authentication.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "authentication_convert_to_new_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/authentication/configure.py#L13"
    }
  },
  "bits_to_netmask": {
    "com": {
      "doc": " Convert bits to netmask\n        Args:\n            bits ('int'): bits to converts\n            ex.) bits = 32\n        Raise:\n            None\n        Returns:\n            Net mask\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "bits_to_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L832"
    }
  },
  "cdets_lookup": {
    "linux": {
      "doc": " Function to return matching cdets given a corefile\n    Note: The corefile should already be decoded as this function searches\n    for the entry within the decoder archived database ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "cdets_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L29"
    }
  },
  "change_configuration_using_jinja_templates": {
    "com": {
      "doc": "Use Jinja templates to change the device configuration\n\n        Args:\n            device (`obj`): Device object\n            template (`obj`): Jinja template to be used in configuration\n            parameters (`dict`): Dictionary of all the parameters\n                                 to be passed to the Jinja template\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "jinja.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "change_configuration_using_jinja_templates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/configure.py#L11"
    }
  },
  "change_hostname": {
    "ios": {
      "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "change_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L278"
    },
    "iosxe": {
      "doc": " Change the hostname on device\n\n        Args:\n            device('obj'): device to change hostname on\n            name('str'): name to change hostname to\n\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "change_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L284"
    }
  },
  "change_nve_source_interface": {
    "iosxe": {
      "doc": " change source-interface for nve interface\n\n        Args:\n            device (`obj`)         : Device object\n            nve_num (`str`)        : nve interface number\n            source_interface('str'): source-interface to change to\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "change_nve_source_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L578"
    }
  },
  "change_pki_server_state": {
    "iosxe": {
      "doc": "\n        Changing the state of pki server.\n        Args:\n            device ('obj'): Device object\n            server_name ('str'): server name\n            state ('str'): shutdown|no shutdown\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "change_pki_server_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L862"
    }
  },
  "change_power_cycler_state": {
    "com": {
      "doc": " Turn on the power cycler\n        Args:\n            device ('obj'): Device object\n            powercycler ('obj'): Powercycler object\n            state ('str'): Power cycler state on/off\n            outlets ('str'): Power cycler outlets\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "change_power_cycler_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L155"
    }
  },
  "check_if_device_in_testbed_yaml": {
    "nxos": {
      "doc": " Check if the given device name is part of the devices yaml file\n\n        Args:\n            device_name ('str'): Name of the device to be found as a string\n            yaml_file ('str'): Name(path) of the yaml file where the device\n                       is to be found as a string\n        Return value:\n            Boolean. True, if found. False, if error/not found\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "check_if_device_in_testbed_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L259"
    }
  },
  "check_traffic_drop_count": {
    "iosxe": {
      "doc": "Check for the drop count\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            drop_count (`str`): Expected drop count\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_drop_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L337"
    }
  },
  "check_traffic_expected_rate": {
    "iosxe": {
      "doc": "Check the expected rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            expected_rate (`str`): Traffic expected received rate\n            tolerance (`str`): Traffic loss tolerance percentage\n            traffic_gen (`str`): Traffic generating device\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_expected_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L150"
    }
  },
  "check_traffic_transmitted_rate": {
    "iosxe": {
      "doc": "Check transmitted rate was set correctly or not\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Traffic drops found\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "check_traffic_transmitted_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L60"
    }
  },
  "clear_aaa_cache": {
    "iosxe": {
      "doc": " Clear AAA Cache\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Radius Server Grp name\n            profile ('str',optional): Profile name to clear. Default 'all.'\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            switch1.api.clear_aaa_cache('radiusGroup')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_aaa_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L690"
    }
  },
  "clear_access_list_counters": {
    "iosxe": {
      "doc": " clear access-list counters\n        Args:\n            device (`obj`):           Device object\n            option ('str', Optional): Which data to clear. Default will clear all access-list counters or \n                                      can give access-list name(eg:input_packet) or number(eg:100)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_list_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/clear.py#L12"
    }
  },
  "clear_access_session": {
    "iosxe": {
      "doc": " executes clear access-sesssion CLI \n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to execute clear access-sesssion.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L292"
    }
  },
  "clear_access_session_intf": {
    "iosxe": {
      "doc": " clear access-session interface {}\n        Args:\n            device (`obj`): Device object\n            intf('str'): Name of the interface to clear access-session\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dot1x.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_session_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/clear.py#L12"
    }
  },
  "clear_access_session_mac": {
    "iosxe": {
      "doc": "Clear Access Session MAC\n    Args:\n        device ('obj'): device to use\n        mac (`str`): MAC to be cleared\n        \n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed to clear access session mac\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_access_session_mac",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1419"
    }
  },
  "clear_arp_cache": {
    "iosxe": {
      "doc": " Clears device cache\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): ip address of arp entry\n            counters (`str`): counter type of arp entry\n            interface (`str`): interface to clear arp entry\n            vrf (`str`): vrf to clear arp entry\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_arp_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L49"
    }
  },
  "clear_bgp_all_as": {
    "iosxe": {
      "doc": " clear all bgp AS number\n        i.e 'clear bgp all {as_number}'\n        Args:\n            device ('obj'): device object\n            as_number ('int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_all_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L118"
    }
  },
  "clear_bgp_l2vpn_evpn": {
    "iosxe": {
      "doc": " clear bgp l2vpn evpn\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L706"
    }
  },
  "clear_bgp_neighbor": {
    "junos": {
      "doc": " Clear bgp neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/clear.py#L3"
    }
  },
  "clear_bgp_neighbor_soft": {
    "junos": {
      "doc": " Clear bgp neighbor soft using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbor_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/clear.py#L29"
    }
  },
  "clear_bgp_neighbors_soft": {
    "iosxe": {
      "doc": " Reset connection to a BGP neighbor or to all neighbors, diretion in or out\n        Args:\n            device ('obj') : Device object\n            direction ('str'): Direction type:\n                ex.)\n                    direction = \"in\"\n                    direction = \"out\"\n            neighbor (`str`): Neighbor address\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_bgp_neighbors_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L39"
    }
  },
  "clear_cdp_table": {
    "iosxe": {
      "doc": " Clear CDP table on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear cdp table\n    ",
      "module_name": "cdp.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cdp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/execute.py#L11"
    }
  },
  "clear_counters": {
    "iosxe": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L728"
    }
  },
  "clear_crypto_gkm": {
    "iosxe": {
      "doc": " clear_crypto_gkm\n        Args:\n            device (`obj`): Device object\n            group ('str', optional): Name for the GetVpn Gdoi group\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_crypto_gkm",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/clear.py#L12"
    }
  },
  "clear_crypto_ikev2_stats": {
    "iosxe": {
      "doc": " Clear crypto ikev2 stats\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_crypto_ikev2_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L1091"
    }
  },
  "clear_crypto_sa_counters": {
    "iosxe": {
      "doc": " Clear all the ipsec sa counters\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_crypto_sa_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L77"
    }
  },
  "clear_crypto_session": {
    "iosxe": {
      "doc": " Clear crypto session\n        Args:\n            device (`obj`): Device object\n            active('boolean', optional): clear active session, default is False\n            ikev2('boolean', optional): Clear ikev2 based sessions, default is False\n            fvrf('str', optional): Front door VRF name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_crypto_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1196"
    }
  },
  "clear_cts_counters": {
    "iosxe": {
      "doc": " Clear CTS credentials\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear cts counters\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cts_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L428"
    }
  },
  "clear_cts_counters_ipv6": {
    "iosxe": {
      "doc": " Clear CTS counters ipv6\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear CTS counters ipv6\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cts_counters_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L1026"
    }
  },
  "clear_cts_credentials": {
    "iosxe": {
      "doc": " clear CTS credentials\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to clear cts credential\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_cts_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L406"
    }
  },
  "clear_device_tracking_counters": {
    "iosxe": {
      "doc": " Clear device-tracking counters\n    Args:\n        device ('obj'): device object\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id. Defaults to None.\n        bdi ('str', optional): bdi id. Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to clear device-tracking counters\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_device_tracking_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2229"
    }
  },
  "clear_device_tracking_database": {
    "iosxe": {
      "doc": " Clear device-tracking database\n        Args:\n            device ('obj'): device object\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    address ('dict', optional):\n                        address ('str'): IPv4 address or \"all\"\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    force ('bool', optional): Force to clear all (mac) entries\n                    interface ('str', optional):\n                        target ('str'): interface\n                        force ('bool', optional): Force to clear all (mac) entries\n                        vlanid ('str', optional): vlanid\n                    mac ('str', optional):\n                        address ('str'): 48-bit hardware address\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    policy ('str', optional): policy name\n                    prefix ('bool', optional)\n                        address ('str'): IPv6 address (X:X:X:X::X/<0-128>) or \"all\"\n                        target ('dict', optional):\n                            force ('bool', optional): Force to clear all (mac) entries\n                            interface ('str', optional): interface\n                            policy ('str', optional): policy name\n                            vlanid ('str', optional): vlanid\n                    vlanid ('str', optional): vlan id\n                ex.)\n                    [\n                        {\n                            \"force\": True,\n                            \"mac\": {\n                                \"address\": \"dead.beef.0001\"\n                                \"target\":\n                                    \"force\": True\n                                    \"interface\": \"gigabitEthernet0/0\"\n                                    \"policy\": \"test\"\n                                    \"vlanid\": 10\n                            }\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 source-guard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_device_tracking_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2114"
    }
  },
  "clear_device_tracking_messages": {
    "iosxe": {
      "doc": " Clear device-tracking database\n        Args:\n            device ('obj'): device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to execute clear device-tracking messages\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_device_tracking_messages",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2100"
    }
  },
  "clear_dhcpv4_server_stats": {
    "iosxe": {
      "doc": "Clear dhcp server statistics on device\n       Args:\n            device('obj'): device object\n       Returns:\n            None\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_dhcpv4_server_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/utils.py#L11"
    }
  },
  "clear_dmvpn": {
    "iosxe": {
      "doc": " clear_dmvpn\n        Args:\n            device (`obj`): Device object\n            peer('str', optional): DMVPN peer, default is None\n            static('boolean', optional): static dmvpn entries, default is False\n            vrf('str', optional) : vrf name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_dmvpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L99"
    }
  },
  "clear_dmvpn_crypto_nhrp_ike_stats": {
    "iosxe": {
      "doc": " clear dmpvn crypto, platform and nhrp commands\n        Args:\n            device('obj'): Device object\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_dmvpn_crypto_nhrp_ike_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L201"
    }
  },
  "clear_dmvpn_crypto_nhrp_stats": {
    "iosxe": {
      "doc": " clear dmpvn crypto and nhrp commands\n        Args:\n            device('obj'): Device object\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_dmvpn_crypto_nhrp_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L173"
    }
  },
  "clear_dmvpn_statistics": {
    "iosxe": {
      "doc": " clear_dmvpn_statistics\n        Args:\n            device (`obj`): Device object\n            interface('str', optional): Tunnel interface name, default is None\n            vrf('str', optional) : vrf name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_dmvpn_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L138"
    }
  },
  "clear_errdisable_intf_vlan": {
    "iosxe": {
      "doc": " clear errdisable interface {} vlan\n        Args:\n            device (`obj`): Device object\n            intf('str'): Name of the interface to clear errdisable\n            Vlan('str', optional): Name of the vlan to to clear errdisable, default value is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_errdisable_intf_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/clear.py#L11"
    }
  },
  "clear_flow_exporter_statistics": {
    "iosxe": {
      "doc": " Clear Flow exporter statistics on device\n        \n        Args:\n            device ('obj'): device to use\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_exporter_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L655"
    }
  },
  "clear_flow_monitor": {
    "iosxe": {
      "doc": " clear flow monitor data\n        Args:\n            device (`obj`):           Device object\n            name ('str'):             Name of the flow (eg: created[ipv4_input] or user defined[monitor_ipv4_out])\n            option ('str', optional): Which data to clear. Default will clear all flow monitor info or\n                                      can give perticular option to clear eg:cache/statistics\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L264"
    }
  },
  "clear_flow_monitor_statistics": {
    "iosxe": {
      "doc": " Clears Flow Monitor statistics on device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_monitor_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L98"
    }
  },
  "clear_flow_monitor_statistics_for_et_analytics": {
    "iosxe": {
      "doc": " Clears Flow Monitor statistics on device\n    \n        Args:\n            device ('obj'): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_flow_monitor_statistics_for_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L741"
    }
  },
  "clear_fqdn_database_all": {
    "iosxe": {
      "doc": " clear fqdn database all\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "fqdn.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_fqdn_database_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fqdn/clear.py#L10"
    }
  },
  "clear_fqdn_packet_stats": {
    "iosxe": {
      "doc": " clear fqdn packet statistics\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "fqdn.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_fqdn_packet_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fqdn/clear.py#L28"
    }
  },
  "clear_ikev2_sa": {
    "iosxe": {
      "doc": " clear_ikev2_sa\n        Args:\n            device (`obj`): Device object\n            fast('boolean', optional): clearing sa fast, default is False\n            local('boolean', optional): Clear all ikev2 SAs with local address, default is False\n            remote('boolean', optional): Clear all ikev2 SAs with remote address, default is False\n            psh('boolean', optional): Platform Service Handler, default is False\n            fvrf('str', optional): Front door VRF name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ikev2_sa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/clear.py#L11"
    }
  },
  "clear_interface_config": {
    "iosxe": {
      "doc": " Clears interface config\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to clear\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L853"
    }
  },
  "clear_interface_counters": {
    "iosxe": {
      "doc": " Clear interface counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L379"
    }
  },
  "clear_interface_interfaces": {
    "iosxe": {
      "doc": " clear interface configuration\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1317"
    }
  },
  "clear_iox": {
    "iosxe": {
      "doc": " \n    Execute clear iox\n    Uses disable_iox\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n        disable_iox_then_clear ('boolean') : Disable IOX then clear\n        wait_timer ('int') : wait timer after disable IOX if disable_iox_then_clear\n        timeout ('int'): timeout arg for Unicon execute for this CLI\n    Returns:\n        True\n        False\n    Raises:\n        None    \n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L53"
    }
  },
  "clear_ip_bgp": {
    "iosxe": {
      "doc": " clear ip bgp *\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L71"
    }
  },
  "clear_ip_bgp_af_as": {
    "iosxe": {
      "doc": " BGP soft clear using address family and AS number\n        i.e 'clear ip bgp {address_family} {as_number}'\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family\n            as_numbers ('list'/'int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_bgp_af_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L91"
    }
  },
  "clear_ip_bgp_vrf_af_soft": {
    "iosxe": {
      "doc": " BGP soft clear using vrf, address family and AS number\n\n        Args:\n            device ('obj'): device object\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            as_number ('int'): BGP AS number\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_bgp_vrf_af_soft",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/clear.py#L12"
    }
  },
  "clear_ip_dhcp_binding": {
    "iosxe": {
      "doc": "execute 'clear ip dhcp binding *' on device\n       Args:\n            device('obj'): device object\n       Returns:\n            None\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_dhcp_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/execute.py#L11"
    }
  },
  "clear_ip_dhcp_snooping_binding": {
    "iosxe": {
      "doc": "execute 'clear ip dhcp snooping binding *' on device\n       Args:\n            device('obj'): device object\n       Returns:\n            None\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_dhcp_snooping_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/execute.py#L28"
    }
  },
  "clear_ip_mroute_all": {
    "iosxe": {
      "doc": " clear ip mroute *\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_mroute_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1382"
    }
  },
  "clear_ip_mroute_vrf": {
    "iosxe": {
      "doc": " clear ipv6 mld group\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_mroute_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/clear.py#L12"
    }
  },
  "clear_ip_nat_translation_all": {
    "iosxe": {
      "doc": " clear ip nat translation *\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_nat_translation_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1362"
    }
  },
  "clear_ip_nhrp": {
    "iosxe": {
      "doc": " clear_ip_nhrp\n        Args:\n            device (`obj`): Device object\n            counters('boolean', optional): NHRP Counters, default is False\n            shortcut('boolean', optional): NHRP shortcut entries, default is False\n            stats('boolean', optional): Clears all IPv4 Stats Information for all Interfaces, default is False\n            vrf('str', optional) : vrf name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_nhrp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L11"
    }
  },
  "clear_ip_ospf_process": {
    "iosxe": {
      "doc": "Clear Ip Ospf process\n       Args:\n            device('obj'): device object\n       Returns:\n            None\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_ospf_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/utils.py#L11"
    }
  },
  "clear_ip_reflexive_list": {
    "iosxe": {
      "doc": " #clear ip reflexive-list ?\n            *     Delete all reflexive ACLs\n            WORD  Delete a specific reflexive ACL\n        Args:\n            device (`obj`):           Device object\n            option ('str'): Which data to clear. By Default will clear all reflexive-list. \n                                      For WORD need to pass reflexive-list name(eg:REF1) to delete particular reflexive-list.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_reflexive_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/clear.py#L33"
    }
  },
  "clear_ip_route": {
    "iosxe": {
      "doc": "\n        clear ip route {route}\n        clear ip route vrf {vrf} {route} \n\n        Args:\n            device ('obj'): Device object\n            route ('str'): ipv4 address\n            vrf ('str', optional): vrf name, default=None\n        Returns:\n            None\n        Raises:\n            SubcommandFailure: Failed executing command\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L15"
    }
  },
  "clear_ip_route_all": {
    "iosxe": {
      "doc": " clear ip route *\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name, default=None\n        Returns:\n            None\n        Raises:\n            SubcommandFailure: Failed executing command\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_route_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L45"
    }
  },
  "clear_ip_traffic": {
    "iosxe": {
      "doc": " clear ip traffic\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ip_traffic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1581"
    }
  },
  "clear_ipv6_dhcp_binding": {
    "iosxe": {
      "doc": "execute 'clear ipv6 dhcp binding *' on device\n       Args:\n            device('obj'): device object\n       Returns:\n            None\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_dhcp_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/execute.py#L45"
    }
  },
  "clear_ipv6_mfib_vrf_counters": {
    "iosxe": {
      "doc": " clear ipv6 mfib vrf * counters\n        Args:\n            device (`obj`):             Device object\n            vrf_name ('str', optional): VRF name. Default will clear all vrf counters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipv6.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_mfib_vrf_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/clear.py#L11"
    }
  },
  "clear_ipv6_mld_group": {
    "iosxe": {
      "doc": " clear ipv6 mld group\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipv6.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_mld_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/clear.py#L35"
    }
  },
  "clear_ipv6_nhrp": {
    "iosxe": {
      "doc": " clear_ipv6_nhrp\n        Args:\n            device (`obj`): Device object\n            counters('boolean', optional): NHRP Counters, default is False\n            shortcut('boolean', optional): NHRP shortcut entries, default is False\n            stats('boolean', optional): Clears all IPv6 Stats Information for all Interfaces, default is False\n            vrf('str', optional) : VRF name, default is None\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nhrp.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_nhrp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nhrp/clear.py#L55"
    }
  },
  "clear_ipv6_pim_topology": {
    "iosxe": {
      "doc": " clear ipv6 mld group\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipv6.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_pim_topology",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/clear.py#L56"
    }
  },
  "clear_ipv6_route": {
    "iosxe": {
      "doc": "\n        clear ipv6 route {route}\n        clear ipv6 route vrf {vrf} {route} \n\n        Args:\n            device ('obj'): Device object\n            route ('str'): ipv6 address\n            vrf ('str', optional): vrf name, default=None\n        Returns:\n            None\n        Raises:\n            SubcommandFailure: Failed executing command\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L163"
    }
  },
  "clear_ipv6_route_all": {
    "iosxe": {
      "doc": " clear ipv6 route *\n        clear ipv6 route vrf {vrf} *\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name, default=None\n        Returns:\n            None\n        Raises:\n            SubcommandFailure: Failed executing command\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ipv6_route_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L192"
    }
  },
  "clear_isis": {
    "iosxe": {
      "doc": " clear isis\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_isis",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L614"
    }
  },
  "clear_lldp_counters": {
    "iosxe": {
      "doc": " Clear LLDP counters on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_lldp_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L188"
    }
  },
  "clear_lldp_table": {
    "iosxe": {
      "doc": " Clear LLDP table on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_lldp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L203"
    }
  },
  "clear_logging": {
    "iosxe": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L749"
    },
    "iosxr": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L346"
    },
    "nxos": {
      "doc": " clear logging\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L312"
    }
  },
  "clear_logging_onboard_switch": {
    "iosxe": {
      "doc": " clears logging onboard switch\n        Example: clear logging onboard switch 1\n        \n        Args:\n            device ('obj'): Device object\n            switch_number('int'): Switch number (Range: 1-16)\n        \n        Returns:\n            None\n        \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_logging_onboard_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L442"
    }
  },
  "clear_mac_address_table_dynamic": {
    "iosxe": {
      "doc": " Clear mac address-table dynamic\n        Args:\n            device (`obj`): device object\n            address ('str', optional):      mac address, default None\n            interface ('str', optional):    interface name, default None\n            vlan ('int', optional):         vlan id, default None\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "mac.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mac_address_table_dynamic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/clear.py#L11"
    }
  },
  "clear_macro_auto_confgis": {
    "iosxe": {
      "doc": " Clear macro auto configuration on device\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_macro_auto_confgis",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1968"
    }
  },
  "clear_macsec_counters": {
    "iosxe": {
      "doc": " Clears macsec counters on device\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interfaces\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_macsec_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L467"
    }
  },
  "clear_mdns_cache": {
    "iosxe": {
      "doc": " Clears mdns cache on device\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L997"
    }
  },
  "clear_mdns_controller_statistics": {
    "iosxe": {
      "doc": " Clears mdns controller statistics on SDG\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing controller statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_controller_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1557"
    }
  },
  "clear_mdns_query_db": {
    "iosxe": {
      "doc": " Clears mdns query database statistics on device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing query-db statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_query_db",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L261"
    }
  },
  "clear_mdns_statistics": {
    "iosxe": {
      "doc": " Clears mdns statistics on device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L240"
    }
  },
  "clear_mdns_statistics_all": {
    "iosxe": {
      "doc": " Clears mdns statistics on device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_statistics_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1016"
    }
  },
  "clear_mdns_statistics_servicepeer": {
    "iosxe": {
      "doc": " Clears mdns statistics on service-peer\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_statistics_servicepeer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1052"
    }
  },
  "clear_mdns_statistics_sp_sdg": {
    "iosxe": {
      "doc": " Clears mdns statistics on sp-sdg\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed clearing statistics\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mdns_statistics_sp_sdg",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1034"
    }
  },
  "clear_mka_session": {
    "iosxe": {
      "doc": " clear_mka_session\n        Args:\n            device (`obj`): Device object\n            timeout (`int`, optional): Timeout in seconds, default value 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mka.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mka_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mka/clear.py#L11"
    }
  },
  "clear_mpls_counters": {
    "iosxe": {
      "doc": " Clear mpls counters\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mpls_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L230"
    }
  },
  "clear_mpls_ldp_neighbor": {
    "iosxe": {
      "doc": " clear mpls ldp neighbor {}\n        Args:\n            device ('obj'): Device object\n            neighbor_ip ('str'): neighbor ip\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_mpls_ldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L259"
    }
  },
  "clear_ospf3_neighbor": {
    "junos": {
      "doc": " Clear ospf3 neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "ospf3.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf3_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/clear.py#L3"
    }
  },
  "clear_ospf_neighbor": {
    "junos": {
      "doc": " Clear ospf neighbor using one of two commands\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n            fail_regex ('str'): A regex string to look for which would indicate failure\n        Returns:\n            bool\n\n        Raises:\n            N/A or SubcommandFailure\n    ",
      "module_name": "ospf.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/clear.py#L3"
    }
  },
  "clear_ospf_trace_log": {
    "junos": {
      "doc": "\n    Clear log ospf_trace_log\n\n    Args:\n        device (`obj`): Device object\n        ospf_trace_log(`str`): OSPF trace log\n\n    Returns:\n        None\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_ospf_trace_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L74"
    }
  },
  "clear_packet_buffer": {
    "ios": {
      "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_packet_buffer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L211"
    },
    "iosxe": {
      "doc": "Clear packet buffer\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_packet_buffer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L217"
    }
  },
  "clear_platform_qos_dscp_cos_counters_interface": {
    "iosxe": {
      "doc": " clear platform hardware fed switch active qos dscp-cos counters interface\n        Args:\n            device (`obj`): Device object\n            intf (str): interafce name to clear qos dscp-cos counters\n            state (str, optional): Switch state active or standby\n            switch_num(str, optional): switch number 1 or 2 or 3 ..\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_platform_qos_dscp_cos_counters_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/clear.py#L31"
    }
  },
  "clear_platform_qos_statistics_internal_cpu_policer": {
    "iosxe": {
      "doc": " clear platform hardware qos statistics internal cpu policer\n        Args:\n            device (`obj`): Device object\n            state (str, optional): Switch state active or standby\n            switch_num(str, optional): switch number 1 or 2 or 3 ..\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_platform_qos_statistics_internal_cpu_policer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/clear.py#L7"
    }
  },
  "clear_port_security": {
    "iosxe": {
      "doc": " clear port-security all\n        Args:\n            device ('obj'): Device object\n            interface('str',optional) : interface name, default value is None\n        Returns:\n            output ('str'): Output of execution\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "clear_port_security",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1426"
    }
  },
  "compare_archive_config_dicts": {
    "iosxe": {
      "doc": " Checks for differences between two 'show archive' dictionaries\n\n        Args:\n            dict1('dict'): first dictionary\n            dict2('dict'): seconds dictionary\n\n        Returns:\n            list of commands that are different between the two configs\n        Raises:\n            None\n    ",
      "module_name": "archive.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_archive_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/verify.py#L9"
    }
  },
  "compare_config_dicts": {
    "com": {
      "doc": " Compare two configuration dicts and return the differences\n\n        Args:\n            a (`dict`): Configuration dict\n            b (`dict`): Configuration dict\n            exclude (`list`): List of item to ignore. Supports Regex.\n                              Regex must begins with ( )\n        Returns:\n            out (`str`): differences\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_config_dicts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L238"
    }
  },
  "compare_metric_of_route": {
    "junos": {
      "doc": " Compare the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            ip_address ('str'): IP address in show command.\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "compare_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2643"
    }
  },
  "compared_with_running_config": {
    "com": {
      "doc": " Show difference between given config and current config\n        Args:\n            config ('dict'): Config to compare with\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "compared_with_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1527"
    }
  },
  "concurrent_ssh_sessions": {
    "iosxe": {
      "doc": "\n    Generates multiple ssh sessions\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IPv4/IPv6 address for remote device/server\n            enable_pass (`str`): Enable password\n            username (`str`): username to login into remote device/server\n            password (`str`): password to login into remote device/server\n            concurrent_sessions (`int`): count of ssh session to generate\n            iteration_times (`int`): count of concurrent_sessions to repeat\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "concurrent_ssh_sessions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1213"
    }
  },
  "confgiure_port_channel_min_link": {
    "iosxe": {
      "doc": " configure port-channel min links\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n            min_link('int'): <2-8>  The minimum number of bundled ports needed before this port channel can come up.\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "confgiure_port_channel_min_link",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5404"
    }
  },
  "config_acl_on_interface": {
    "iosxe": {
      "doc": " Configures acl on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L166"
    }
  },
  "config_device_tracking_policy": {
    "iosxe": {
      "doc": " Configure a device-tracking policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains any of the following keys:\n                    cache_guard ('str', optional):             cache poisoning guard mode\n                    data_glean ('str', optional):              source address gleaning\n                    destination_glean ('str', optional):       destination address gleaning\n                    device_role ('str', optional):             device role\n                    distribution_switch ('str', optional):     hostname of ip address\n                    limit_address_count ('dict', optional):\n                        all ('int', optional):                 max value\n                        ipv4 ('int', optional):                address limit for ipv4 per mac\n                        ipv6 ('int', optional):                address limit for ipv6 per mac\n                    origin ('str', optional):                  configure origin of the policy\n                    prefix_glean ('str', optional):            glean prefixes in RA and DHCP-PD traffic\n                    protocol ('dict', optional):\n                        name ('dict'):                         name can be arp, dhcp4, dhcp6, ndp, or udp\n                            prefix_list ('str'):               name of prefix-list\n                    security_level ('str', optional):          security level\n                    tracking ('str', optional):                tracking behavior\n                    trusted_port ('bool', optional):           setup trusted port\n                    vpc ('int', optional):                     setup vpc port\n                ex.)\n                    [\n                        {\n                            \"cache_guard\": \"ipv4\",\n                            \"data_glean\": \"log-only\",\n                            \"destination_glean\": \"log-only\",\n                            \"device_role\": \"node\",\n                            \"distribution-switch\": \"\"10.10.10.10\"\",\n                            \"limit_address_count\": {\n                                \"all\": 1000,\n                                \"ipv4\": 50,\n                                \"ipv6\": 10\n                            },\n                            \"origin\": \"cli\",\n                            \"prefix_glean\": \"only\",\n                            \"protocol\": {\n                                \"arp\": {\n                                    \"prefix_list\": \"name1\"\n                                },\n                                \"dhcp4\": {\n                                    \"prefix_list\": \"name2\"\n                                }\n                            },\n                            \"security_level\": \"guard\",\n                            \"tracking\": \"enable\",\n                            \"trusted_port\": True,\n                            \"vpc\": 10\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure device-track policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L500"
    }
  },
  "config_edge_trunk_on_interface": {
    "iosxe": {
      "doc": " Configure spanning portf edge trunk on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_edge_trunk_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2383"
    }
  },
  "config_enable_ip_routing": {
    "iosxe": {
      "doc": " Enable IP Routing\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_enable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L60"
    }
  },
  "config_enable_ipv6_routing": {
    "iosxe": {
      "doc": " configure ipv6 routing on device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n    ",
      "module_name": "ipv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_enable_ipv6_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/configure.py#L11"
    }
  },
  "config_encapsulation_on_interface": {
    "iosxe": {
      "doc": " Configure encapsulation on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            vlan  (`str`): Vlan to be configured with encapsulation\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_encapsulation_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L584"
    }
  },
  "config_eompls_pseudowire": {
    "iosxe": {
      "doc": "configure pseudowire interface \n        Args:\n            device (`obj`): Device \n            pseudowire_name (`str`): Specifies the pseudowire interface\n            neigh (`str`) : Specifies the peer IP address\n            vc_id (`str`) : virtual circuit (VC) ID value of the Layer 2 VPN (L2VPN) pseudowire.\n            flow_ip (`str`) : Specifies load-balance factor Eg:dst-ip so on\n            flow_label (`str`) : core load balancing based on flow-labels.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_eompls_pseudowire",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1086"
    }
  },
  "config_extended_acl": {
    "iosxe": {
      "doc": " Configure extended ACL on device\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny), default value is None\n            protocol ('str'): protocol, default value is None\n            src_ip ('str'): source start ip, default value is None\n            src_step ('str'): (None | '0.0.0.1'), increment step for source ip, default value is None\n            src_wildcard ('str'): source wildcard, default value is None\n            dst_ip ('str'): destination start ip, default value is None\n            dst_step ('str'): increment step for destination ip, default value is None\n            dst_wildcard ('str'): destination wildcard, default value is None\n            dst_port ('str'): Acl destination port, default value is None\n            entries ('int'): Acl entries, default value is None\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n            log_option ('str',optional): (None | log), Option to log ACL match,default value is None\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L13"
    }
  },
  "config_extended_acl_with_evaluate": {
    "iosxe": {
      "doc": " Configure extended ACL with evaluate on device \n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            reflect_name ('str'): evaluate reflect name\n            sequence_num ('str',optional): specific sequence number,default value is None\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list with evalute\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_extended_acl_with_evaluate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L540"
    }
  },
  "config_extended_acl_with_reflect": {
    "iosxe": {
      "doc": " Configure extended ACL on device\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): permit \n            protocol ('str'): protocol\n            src_ip ('str'): source start ip, default value is None\n            src_step ('str'): increment step for source ip, default value is None\n            src_wildcard ('str'): source wildcard, default value is None\n            dst_ip ('str'): destination start ip, default value is None\n            dst_step ('str'): increment step for destination ip, default value is None\n            dst_wildcard ('str'): destination wildcard, default value is None\n            src_port ('str'): Acl source port, default value is None\n            dst_port ('str'): Acl destination port, default value is None\n            entries ('int'): Acl entries, default value is None\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            port_type ('str', optional): type of ACL like with or without eq or gt or lt or neq keyword, default value is None\n            sequence_num ('str',optional): specific sequence number,default value is \"\"\n            reflect_acl_name ('str'): reflect acl name, it should be differnt name with extended ACL name, default value is None\n            timeout ('str',optional): type of ACL like with or without timeout, default value is \"\"\n            timeout_val ('int',optional): Timout value, default value is \"\"\n            echo ('str',optional): type of ACL like with or without echo keyword, default value is None\n            host_query ('str',optional): type of ACL like with or without host-query keyword, default value is None\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_extended_acl_with_reflect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L602"
    }
  },
  "config_flow_exporter": {
    "iosxe": {
      "doc": " Config Flow Exporter on Device\n\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n            dest_ip (`str`): Destination IP\n            udp_port (`str`): UDP port\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_flow_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L12"
    }
  },
  "config_flow_monitor_on_interface": {
    "iosxe": {
      "doc": " Config Flow Monitor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            exporter_name (`str`): Flow exporter name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_flow_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L72"
    }
  },
  "config_identity_ibns": {
    "iosxe": {
      "doc": " Configure 802.1x port based authentication for\n        IBNS2.0 with service policy under interface/template\n    Mandatory args:\n            device ('obj'): device to use\n            access ('bol'): Set to True, False to configure in Trunk mode\n            policy_map('str'): Name of policy map to be attached.\n    Optional args:\n        interface (`str`,optional): Interface name\n        data_vlan(`int`): vlan_id for data traffic\n        voice_vlan(`int`): vlan_id for voice traffic\n        max_req:(`int`) Max No. of Retries\n        max_reauth_req(`int`): Max No. of Reauthentication Attempts\n        authmod('str'): default(multi-auth), mult-host peer, multi-domain etc\n        closed('bol'):  {False: closed | True: open (default) }\n        open('bol'): {False: closed | True: open (default) }\n        reauth('str'):  server or numberic range is 1 to 65535 seconds\n        ctr('str'): {both | in}\n        txp(`int`):The range is 1 to 65535 seconds\n        port_control ('str'): {auto|force-authorized|force-unauthorized}. Default = 'auto'\n        template_name ('str'): Template name to be configured\n        txp_sup ('int'): The range is 1 to 65535 seconds\n    Returns:\n            None\n    Raises:\n            SubCommandFailure: Failed to configure 802.1x port based authentication\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_identity_ibns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L317"
    }
  },
  "config_interface_carrier_delay": {
    "iosxe": {
      "doc": " Configure interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            delay (`int`): Delay time in second\n            delay_type (`str`): Delay type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L341"
    }
  },
  "config_interface_isis": {
    "iosxe": {
      "doc": "config ISIS on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ipv6 ('boolean',optional): Flag to configure IPv6 (Default False)\n            mtu ('str',optional): mtu configuration on interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_isis",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L76"
    }
  },
  "config_interface_mtu": {
    "iosxe": {
      "doc": " Config MTU on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mtu_bytes (`int`): MTU bytes\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L457"
    }
  },
  "config_interface_negotiation": {
    "iosxe": {
      "doc": " Config negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L81"
    }
  },
  "config_interface_ospf": {
    "iosxe": {
      "doc": " Config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): Ospf process id\n            area ('int'): Ospf area code\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L523"
    }
  },
  "config_interface_ospfv3": {
    "iosxe": {
      "doc": "config OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospfv3_pid (`str`): Ospfv3 process id\n            area ('int'): Ospf area code\n            ipv4 ('boolean',optional): Flag to configure IPv4 (Default False)\n            ipv6 ('boolean',optional): Flag to configure IPv6 (Default True)\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L555"
    }
  },
  "config_interface_ripng": {
    "iosxe": {
      "doc": "config RIPng on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            ripng_pid ('str'): ripng process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_ripng",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L70"
    }
  },
  "config_interface_subinterface_and_secondary_addresses": {
    "iosxe": {
      "doc": " Configure sub-interface and secondary addresses on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sub_interface_num (`int`): Subinterface to be added to\n                                 interface name\n            ip_address(`str`): IP addressed to be configured on interface\n            prefix(`str`): prefix to be used in configuration\n            encap_type (`str`): Encapsulation type\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_subinterface_and_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L740"
    }
  },
  "config_interface_with_isis_router_name": {
    "iosxe": {
      "doc": "config ISIS router name on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            router_name ('str'):configure the isis router name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_interface_with_isis_router_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L187"
    }
  },
  "config_ip_on_interface": {
    "iosxe": {
      "doc": " Configure IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): IP addressed to be configured on interface\n            mask (`str`): Mask address to be used in configuration\n            ipv6_address (`str`): IPv6 address with subnet mask\n            eth_encap_type (`str`): Encapsulation type\n            eth_encap_val (`str`): Encapsulation value\n            sub_interface (`str`): Subinterface to be added to interface name\n            dhcpv4 ('bool): configure for ipv4 dhcp\n            dhcp_hostname ('str): Optionally configure dhcp hostname as well\n            vrf ('str): vrf for in the interface\n            secondary ('bool): configure as secondary ipv4 address\n\n        Returns:\n            None\n            Warning messages\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L590"
    }
  },
  "config_ip_on_vlan": {
    "iosxe": {
      "doc": "Configure an IPv4/IPv6 address on a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`str`): Vlan id\n            ipv4_address (`str`): IPv4 address\n            subnetmask (`str`): Subnet mask to be used for IPv4 address\n            ipv6_address (`str`): Ipv6 address\n            ipv6_prefix_len (`int`): length of IPv6 prefix\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to configure Ipv4/Ipv6 address on vlan\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_on_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L39"
    }
  },
  "config_ip_pim": {
    "iosxe": {
      "doc": " Enables PIM sparse mode on an interface.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            mode (`str`): specifiy pim mode\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L17"
    }
  },
  "config_ip_subinterface": {
    "iosxe": {
      "doc": " Configure sub-interface with IP addresses on device\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sub_interface_num (`int`): Subinterface to be added to\n                                 interface name\n            ip_address(`str`): IP addressed to be configured on interface\n            prefix(`str`): prefix to be used in configuration\n            encap_type (`str`): Encapsulation type\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_subinterface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L696"
    }
  },
  "config_ip_tcp_mss": {
    "iosxe": {
      "doc": " Configures tcp Maximum Segment Size \n\n        Args:\n            device ('obj'): device to use\n            global_config_key ('str'): set global_config_key to 1 for global else set it to 0 for interface level config\n            seg_size ('str'): segment size value to apply, range:0-10000\n            interface('str'): interface on which mss needs to be configured\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ip_tcp_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1364"
    }
  },
  "config_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Configure an ipv6 nd raguard policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains following keys:\n                    device_role ('str', optional):             device role\n                    hop_limit ('dict', optional):\n                        max ('int'):                           maximum hop limit\n                        min ('int'):                           minimum hop limit\n                    managed_config_flag ('bool', optional):    enable M flag\n                    match ('dict', optional):\n                        ipv6 ('str'):                          access list to match\n                        ra ('str'):                            prefix list to match\n                    other_config_flag ('bool', optional):      enable O flag\n                    router_preference ('dict', optional):      enable router preference flag\n                    trusted_port ('bool', optional):           setup trusted port\n                ex.)\n                    [\n                        {\n                            \"device_role\": \"host\",\n                            \"hop_limit\": {\n                                \"max\": 100,\n                                \"min\": 50\n                            },\n                            \"managed_config_flag\": True,\n                            \"match\": {\n                                \"ipv6\": \"test\",\n                                \"ra\": \"bar\"\n                            },\n                            \"other_config_flag\": False,\n                            \"router_preference\": \"high\",\n                            \"trusted_port\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L733"
    }
  },
  "config_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Configure an ipv6 source-guard policy with specified options\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options:\n                dictionary contains following keys:\n                    deny ('str', optional):         block data traffic\n                    permit ('str', optional):       allow data traffic\n                    trusted ('bool', optional):     setup trusted port\n                    validate ('str', optional):     validate source of received data traffic\n                ex.)\n                    [\n                        {\n                            \"deny\": \"global-autoconf\",\n                            \"permit\": \"link-local\",\n                            \"trusted\": True,\n                            \"validate\": \"address\",\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L906"
    }
  },
  "config_license": {
    "iosxe": {
      "doc": " Config license on Device\n\n        Args:\n            device (`obj`): Device object\n            license (`str`): License name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "system.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_license",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/configure.py#L13"
    }
  },
  "config_link_local_ip_on_interface": {
    "iosxe": {
      "doc": " config link_local ip on interface\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            ipv6_address (`str`): IPv6 address \n        Returns:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_link_local_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6878"
    }
  },
  "config_mac_aging_time": {
    "iosxe": {
      "doc": " Config mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n            aging_time (`int`): mac aging-time\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L12"
    }
  },
  "config_mac_learning": {
    "iosxe": {
      "doc": " Config mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L70"
    }
  },
  "config_macsec_keychain_on_device": {
    "iosxe": {
      "doc": " Configures macsec key chain on device\n        Args:\n            device ('obj'): device to use\n            keychain_name ('str'): keychain name to configure\n            key_string ('str'): key string to configure\n            lifetime ('list'): start and end timings\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_keychain_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L136"
    }
  },
  "config_macsec_network_link_on_interface": {
    "iosxe": {
      "doc": " Configures macsec network-link on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_network_link_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L241"
    }
  },
  "config_macsec_replay_protection_window_size": {
    "iosxe": {
      "doc": " Configures macsec replay-protection window-size on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            window_size ('str'): window size\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_replay_protection_window_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L55"
    }
  },
  "config_macsec_should_secure": {
    "iosxe": {
      "doc": " Configures macsec should secure on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure should secure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_macsec_should_secure",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L86"
    }
  },
  "config_mka_keychain_on_interface": {
    "iosxe": {
      "doc": " Configures mka keychain on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            key_string ('str'): master key chain to configure\n            key_chain ('str'): fall back key chain to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mka_keychain_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L201"
    }
  },
  "config_mka_policy": {
    "iosxe": {
      "doc": " Configures user defined mka policy on device or interface\n        Args:\n            device ('obj'): device to use\n            global_level ('bool'): Enable policy globally\n            Policy name ('str'): policy name to configure \n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite value\n            sak_rekey_int ('str'): Sak rekey interval\n            key_server_priority ('str'): Key server priority\n            conf_offset ('str'): confidentiality offset\n            send_secure_announcements ('bool'): Enable/disable send secure announcements  \n            delay_protection ('bool'): Enable/disable delay_protection\n            sak_rekey_on_live_peer_loss ('bool'): Enable/disable sak rekey on live peer loss\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L341"
    }
  },
  "config_mka_policy_xpn": {
    "iosxe": {
      "doc": " Configures mka policy xpn on device or interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite value\n            sak_rekey_int ('str'): Sak rekey interval\n            key_server_priority ('str'): Key server priority\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mka_policy_xpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L298"
    }
  },
  "config_mpls_lable_protocol": {
    "iosxe": {
      "doc": " Config mpls lable protocol on interface or device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_lable_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L309"
    }
  },
  "config_mpls_ldp_explicit_on_device": {
    "iosxe": {
      "doc": " Config mpls ldp explicit on device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_explicit_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L514"
    }
  },
  "config_mpls_ldp_on_device": {
    "iosxe": {
      "doc": " Config ldp on Device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L61"
    }
  },
  "config_mpls_ldp_on_interface": {
    "iosxe": {
      "doc": " Config ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L16"
    },
    "junos": {
      "doc": " Config ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L12"
    }
  },
  "config_mpls_ldp_router_id_on_device": {
    "iosxe": {
      "doc": " Config mpls ldp router id on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            force ('bool') : router-id is instantly changed when the interface is down if true\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_ldp_router_id_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L361"
    }
  },
  "config_mpls_on_device": {
    "iosxe": {
      "doc": " configure mpls on device\n        Args:\n            device (`obj`): Device object\n            loopback_intf (`str`): Interface name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_mpls_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L233"
    }
  },
  "config_multicast_routing_mvpn_vrf": {
    "iosxe": {
      "doc": " Enables IP multicast routing for the MVPN VRF specified for the vrf-name argument.\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_multicast_routing_mvpn_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L157"
    }
  },
  "config_no_keepalive_intf": {
    "iosxe": {
      "doc": " configure no switchport and no keepalive on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_no_keepalive_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L178"
    }
  },
  "config_port_security_on_interface": {
    "iosxe": {
      "doc": " Configuring port security on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            maximum_addresses (`int`,optional): maximum mac addresses, default value is 1\n            aging_time (`str`,optional): aging time for mac address, default value is None\n            aging_type (`str`,optional): aging type for mac address, default value is None\n            violation_mode (`str`,optional): violation mode, default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_port_security_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3540"
    }
  },
  "config_portchannel_range": {
    "iosxe": {
      "doc": " Configure port channel\n        e.g.\n        interface range port-channel 1-50\n\n        Args:\n            device (`obj`): Device object\n            portchannel_start(`int`): Port channel number start\n            portchannel_end(`int`): Port channel number end\n\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_portchannel_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3387"
    }
  },
  "config_pseudowire_class": {
    "iosxe": {
      "doc": " configure pseudowire class\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name/ip address\n            pw_class ('str'): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_pseudowire_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L684"
    }
  },
  "config_pw_class_interface": {
    "iosxe": {
      "doc": " configure pseudowire class on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            peer_id (`str`): peer address\n            vc_id (`str`): vc id \n            pw_class  (`str`): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_pw_class_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L729"
    }
  },
  "config_qos_rewrite_dscp": {
    "iosxe": {
      "doc": "Config qos rewrite ip dscp on Device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed Configuring qos rewrite ip dscp on device\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_qos_rewrite_dscp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L256"
    }
  },
  "config_refacl_global_timeout": {
    "iosxe": {
      "doc": " Configures timeout for reflexive acl globally \n\n        Args:\n            device ('obj'): device to use\n            timeout ('str'): time out value to apply, range:30-2147483\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_refacl_global_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1323"
    }
  },
  "config_replace_to_flash_memory": {
    "iosxe": {
      "doc": " configure replace to flash memory\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raise:\n            SubCommandFailure: Failed to replace to flash memory\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_replace_to_flash_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L272"
    }
  },
  "config_rp_address": {
    "iosxe": {
      "doc": "Configures a static IP address of a rendezvous point for a multicast group range.\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            ip_address (`str`): IP address of the group-range \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L129"
    }
  },
  "config_speed_nonego_on_interface": {
    "iosxe": {
      "doc": " Configure speed nonego on interface\n\n        Args:\n            device (`obj`): Device object\n            interface ('str'): Interface to be configured\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_speed_nonego_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L559"
    }
  },
  "config_standard_acl_for_ip_pim": {
    "iosxe": {
      "doc": " Configures a standard IP access list.\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            host_ip ('str'): source start ip\n            host_wildcard ('str'): increment step for source ip\n            vrf ('str'): vrf name\n            rp_address ('str'): mention the IP address of the rendezvous point for the group.\n            bir_enabled ('boolean', optional): sets true if enabled.  Defaults to False.\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_standard_acl_for_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L283"
    }
  },
  "config_standby_console_enable": {
    "iosxe": {
      "doc": " Enable standby console\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "redundancy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_standby_console_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/configure.py#L17"
    }
  },
  "config_vc_backup_peer": {
    "iosxe": {
      "doc": "configure backup peer vc on interface\n        Args:\n\t    device (`obj`): Device object\n\t    interface (`str`): interface, backup peer need to be configured on\n            peer_address (`str`): Address of the peer, main vc\n            backup_peer('str'): Peer address of backup vc\n            vc_id (`str`): VC ID for the back up peer\n            backup_vc_id(`str`): Backup peer vc id\n            pw_class(`str`): psuedowire class \n            backup_pw_class(`str`): psuedowire class of backup peer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vc_backup_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1050"
    }
  },
  "config_vlan": {
    "iosxe": {
      "doc": " Configures a VLAN on Interface or Device\n    e.g.\n    vlan 666\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L15"
    }
  },
  "config_vlan_range": {
    "iosxe": {
      "doc": " Configures a VLAN on Device\n        e.g.\n        vlan 1 - 4094\n\n        Args:\n            device (`obj`): Device object\n            vlanid_start (`int`): Vlan id start \n            vlanid_end (`int`): Vlan id end\n\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vlan_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L290"
    }
  },
  "config_vlan_tag_native": {
    "iosxe": {
      "doc": " Configure vlan dot1q tag native\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_vlan_tag_native",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L125"
    }
  },
  "config_wan_macsec_on_interface": {
    "iosxe": {
      "doc": " Configures WAN Macsec on interface \n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            speed ('str'): Operation speed\n            destination_address ('str'): eapol destination-address\n            eth_type ('str'): eapol eth-type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_wan_macsec_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L13"
    }
  },
  "config_xconnect_on_interface": {
    "iosxe": {
      "doc": " configure xconnect neighbor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            neighbor (`str`): Neighbor to be configured on xconnect\n            vcid (`str`): Vcid to be configured through xconnect\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "config_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L656"
    }
  },
  "configure_400g_mode_for_port_group": {
    "iosxe": {
      "doc": " enable 400g mode conversion on Metaluna LC\n        Args:\n            device (`obj`): Device object\n            slot (`int`): Metaluna slot\n            port_group ('int'): port group number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_400g_mode_for_port_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L11"
    }
  },
  "configure_400g_mode_port_group_range": {
    "iosxe": {
      "doc": " enable 400g mode range conversion on Metaluna LC\n        Args:\n            device (`obj`): Device object\n            slot (`int`): Metaluna slot\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_400g_mode_port_group_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L55"
    }
  },
  "configure_SVI_Autostate": {
    "iosxe": {
      "doc": " Configure SVI Interface state\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface vlan (Ex: vlan500)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure SVI interface state\n    ",
      "module_name": "SVI.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_SVI_Autostate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/SVI/configure.py#L43"
    }
  },
  "configure_SVI_Unnumbered": {
    "iosxe": {
      "doc": " Configure SVI interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface vlan (Ex: Vlan500)\n            loopback ('str'): Unnumbered loopback (Ex: Loopback1)    \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure SVI interface\n    ",
      "module_name": "SVI.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_SVI_Unnumbered",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/SVI/configure.py#L12"
    }
  },
  "configure_aaa_accounting_commands": {
    "iosxe": {
      "doc": " configure 'aaa accounting commands {level=15} {level_name=\"default\"} {level_action=\"none\"}'\n    Args:\n        device (`obj`)   : Device object\n        accounting_level('str') : <0-15> Enable level\n        accounting_name('str')  : Below are the possible options\n            WORD     Named Accounting list (max 255 characters, longer will be rejected).\n            default  The default accounting list.\n        accounting_action('str')  : Below are the possible options\n            none        No accounting.\n            start-stop  Record start and stop without waiting\n            stop-only   Record stop when service terminates.\n            wait-start  Same as start-stop but wait for start-record commit.\n            <cr>        <cr>\n        group ('str')  : Below are the possible options\n            broadcast  Use Broadcast for Accounting\n            group      Use Server-group\n            logger     Use system logger for Accounting\n            tacacs+    Use TACACS+.\n        group_name ('str')  :  Server-group name\n            Example: \n            code: uut.api.configure_aaa_accounting_commands(accounting_level=\"15\",accounting_name=\"test\",accounting_action=\"none\")\n            Output: aaa accounting commands 15 test none\n            code: uut.api.configure_aaa_accounting_commands(accounting_level=\"1\",accounting_name=\"default\",accounting_action=\"start-stop\",group=\"broadcast\",group_name=\"DATANET\")\n            Output: aaa accounting commands 1 default start-stop group DATANET\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_accounting_commands",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2139"
    }
  },
  "configure_aaa_accounting_identity_default_start_stop": {
    "iosxe": {
      "doc": " configure aaa accounting identity default start-stop\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Server-group (i.e group)\n            server_grp_name ('str'): Server-group name \n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa accounting identity default start-stop\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_accounting_identity_default_start_stop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1896"
    }
  },
  "configure_aaa_accounting_update_periodic": {
    "iosxe": {
      "doc": " configure aaa accounting update newinfo periodic\n            device (`obj`): Device object\n            interval (`str`): intervals in minutes \n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa accounting update newinfo periodic\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_accounting_update_periodic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1880"
    }
  },
  "configure_aaa_attr_list": {
    "iosxe": {
      "doc": " configure Attribute list with type\n    Args:\n        device (`obj`): Device object\n        attr_list_name ('str'): Attribute list name\n        attr_type ('str'): Attribute type\n        secure_type ('str'): Secure type\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring Attribute list with type\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_attr_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1365"
    }
  },
  "configure_aaa_auth_cred_download": {
    "iosxe": {
      "doc": " configure aaa authorization credential-download default local \n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring AAA auth credential download\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_auth_cred_download",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1300"
    }
  },
  "configure_aaa_auth_proxy": {
    "iosxe": {
      "doc": "\n    Configure AAA auth proxy\n    Args:\n        device (`obj`): Device object\n        server_grp ('str'): Name of the server group\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring AAA auth proxy\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_auth_proxy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1073"
    }
  },
  "configure_aaa_authentication_enable": {
    "iosxe": {
      "doc": " configure 'aaa authentication enable default {group} {group_name} {group_action=\"enable\"}'\n    Args:\n        device (`obj`)   : Device object\n        group('str') : Use Server-group\n        group_name('str')  : Below are the possible options\n            WORD     Server-group name\n            ldap     Use list of all LDAP hosts.\n            radius   Use list of all Radius hosts.\n            tacacs+  Use list of all Tacacs+ hosts.\n\n        group_action('str')  : Below are the possible options\n            cache    Use Cached-group\n            enable   Use enable password for authentication.\n            line     Use line password for authentication.\n            none     NO authentication.\n            radius   Use RADIUS authentication.\n            tacacs+  Use TACACS+ authentication.\n            <cr>     <cr>\n\n            Example: \n            code: uut.api.configure_aaa_authentication_enable(group=\"group\", group_name=\"DATANET\", group_action=\"enable\")\n            Output: aaa authentication enable default group DATANET enable\n   \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_authentication_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1998"
    }
  },
  "configure_aaa_authentication_login": {
    "iosxe": {
      "doc": " configure aaa authentication login\n        Args:\n            device (`obj`): Device object\n            auth_list (`str`): authentication list (default/Named authentication list)\n            auth_type ('str'): authentication type (none/local)\n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa authentication login\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_authentication_login",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1820"
    }
  },
  "configure_aaa_authorization_commands": {
    "iosxe": {
      "doc": " configure 'aaa authorization commands {level=15} {level_name=\"default\"} {level_action=\"none\"}'\n    Args:\n        device (`obj`)   : Device object\n        level('str') : <0-15> Enable level\n        level_name('str')  : Below are the possible options\n            WORD     Named authorization list (max 255 characters, longer will be rejected).\n            default  The default authorization list\n\n        level_action('str')  : Below are the possible options\n            cache             Use Cached-group\n            if-authenticated  Succeed if user has authenticated.\n            local             Use local database.\n            none              No authorization (always succeeds).\n            radius            Use RADIUS data for authorization\n            tacacs+           Use TACACS+.\n\n        group_name('str): Group name\n            Example: \n            code: uut.api.configure_aaa_authorization_commands(level=\"15\", level_name=\"test\", level_action=\"local\")\n            Output: aaa authorization commands 15 test local\n            code: uut.api.configure_aaa_authorization_commands(level=\"15\", level_name=\"default\", group_name=\"Test\", level_action=\"if-authenticated\")\n            Output: aaa authorization commands 15 default group Test if-authenticated\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_authorization_commands",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2060"
    }
  },
  "configure_aaa_authorization_exec_default": {
    "iosxe": {
      "doc": " configure aaa authorization exec default\n        Args:\n            device (`obj`): Device object\n            auth_type (`str`): authentication type (i.e group/local/none) \n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa authentication login\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_authorization_exec_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1863"
    }
  },
  "configure_aaa_authorization_network": {
    "iosxe": {
      "doc": " configure aaa authorization network group methods\n        Args:\n            device ('obj'): Device object\n            server_grp ('str'): Server-group (i.e group)\n            server_grp_name ('str'): Server-group name \n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa authorization network\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_authorization_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2271"
    }
  },
  "configure_aaa_default_dot1x_methods": {
    "iosxe": {
      "doc": " configure aaa default dot1x methods\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Radius Server Grp name\n            group_type ('str'): Group type. Options are 'group','cache','local'\n            server_grp2 (`str`, optional): 2nd Radius Server Grp name. i.e aaa cache feature (Default is None)\n            group_type2 ('str', optional): 2nd Group type. Options are 'group','cache','local' (Default is None)\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            configure_aaa_default_dot1x_methods(switch1,'testRadiusGrp')\n            configure_aaa_default_dot1x_methods(switch1,'radiusGroup',group_type='cache',\n                group_type2='group',server_grp2='radiusGroup')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_default_dot1x_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L501"
    }
  },
  "configure_aaa_default_group_methods": {
    "iosxe": {
      "doc": " configure aaa default group methods\n        Args:\n            device (`obj`): Device object\n            server_grp (`str`): Server-group (i.e group)\n            server_grp_name ('str'): Server-group name \n            None\n        Raise:\n            SubCommandFailure: Failed configuring aaa default group methods\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_default_group_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1839"
    }
  },
  "configure_aaa_local_auth": {
    "iosxe": {
      "doc": " configure aaa local authentication default authorization default \n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring AAA local auth \n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_local_auth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1415"
    }
  },
  "configure_aaa_login_method_none": {
    "iosxe": {
      "doc": " This configure will enable login method none that is applicable for line and vty\n    from getting locked for password \n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_login_method_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L559"
    }
  },
  "configure_aaa_new_model": {
    "iosxe": {
      "doc": " configure aaa new-model\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_new_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L482"
    }
  },
  "configure_aaa_session_id": {
    "iosxe": {
      "doc": " configure aaa session id\n    Args:\n        device (`obj`): Device object\n        type ('str'): Type of the session ID to be configured\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring AAA session ID\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_aaa_session_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1256"
    }
  },
  "configure_access_map_match_ip_address_action_forward": {
    "iosxe": {
      "doc": " Configuring access map match ip address action forward \n\n        Args:\n            device ('obj'): device to use\n            vlan_access_name ('str'): name of vlan to access \n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_map_match_ip_address_action_forward",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1496"
    }
  },
  "configure_access_session_limit": {
    "iosxe": {
      "doc": "Configure Access session and event limit\n        Args:\n            device ('obj'): device to use\n            session_limit (`int`): Session Limit or max sessions to be logged\n            event_limit ('int'): Event Limit per session\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure Access session and event limit\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1513"
    }
  },
  "configure_access_session_monitor": {
    "iosxe": {
      "doc": " Enable access-session  monitor\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable access-session monitor\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L216"
    }
  },
  "configure_access_session_port_control": {
    "iosxe": {
      "doc": " Disable autostate on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name to disable autostate\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to disable autostate on interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_port_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4856"
    }
  },
  "configure_access_session_single_policy_interface": {
    "iosxe": {
      "doc": "Common funtion to configure access-session single-policy interface for both forced and without forced\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure access-session single-policy interface\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_single_policy_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L35"
    }
  },
  "configure_access_session_single_policy_policy_name": {
    "iosxe": {
      "doc": "Common function to configure access-session single-policy policy-name for both forced and without forced \n        Args:\n            device ('obj'): device to use\n            policy_name (`str`): Policy name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure access-session single-policy policy-name\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_single_policy_policy_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L58"
    }
  },
  "configure_access_session_sticky": {
    "iosxe": {
      "doc": " configure interface-template sticky timer\n        Args:\n            device ('obj'): device to use\n            timer (int): <1-65535>  Enter a value between 1 and 65535\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure interface-template sticky timer\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_session_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L244"
    }
  },
  "configure_access_vlan": {
    "iosxe": {
      "doc": " configuring access vlan configuration on interface\n        Args:\n            device (`obj`): Device object\n            vlanid ('int') : vlan id\n            interface ('str) : interface name\n        Returns:\n            Bool\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L240"
    }
  },
  "configure_acl_with_src_dsc_net": {
    "iosxe": {
      "doc": " configure ACL\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): ACL name\n            action ('str')Optional: Permit or Deny\n            src_net ('str'): Source network\n            dsc_net ('str'): Destination network\n            src_wild_mask('str'): Source wild card mask\n            dst_wild_mask('str'): Destination wild card mask\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_acl_with_src_dsc_net",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1540"
    }
  },
  "configure_action_string": {
    "iosxe": {
      "doc": " Configures action {action_string} on event manager applet\n        Example: action 5.1 force-switchover\n\n        Args:\n            device ('obj'): device to use\n            applet_name ('str'): Name of the Event Manager applet\n            action_label ('str'): Action label (eg. 5.1, 5.2)\n            action_string ('str'): Action string (Eg. force-switchover)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_action_string",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2575"
    }
  },
  "configure_action_syslog_msg": {
    "iosxe": {
      "doc": " Configures action syslog message on event manager applet\n        Example: action 0.5 syslog msg \"------ High memory usage detected ----\"\n\n        Args:\n            device ('obj'): device to use\n            applet_name ('str'): Name of the Event Manager applet\n            action_label ('str'): Action label (eg. 0.5, 5.0)\n            msg ('str'): Syslog message\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_action_syslog_msg",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2549"
    }
  },
  "configure_active_timer_under_et_analytics": {
    "iosxe": {
      "doc": " Configure active timer under  et-analytics\n        \n        Args:\n            device ('obj'): device to use\n            timer ('int'): timer value in seconds\n        \n        Return:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_active_timer_under_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L605"
    }
  },
  "configure_administrative_weight": {
    "iosxe": {
      "doc": " configure administrative weight in tunnel interface\n\n        Args:\n            device ('obj'): Device object\n            tunnel ('str'): Tunnel name\n            weight ('int'): Mention the admin weight\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_administrative_weight",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1813"
    }
  },
  "configure_any_radius_server": {
    "iosxe": {
      "doc": " Configure radius server on device\n    Args:\n        device (`obj`): Device object\n        server_name (`str`): Radius server name\n        addr_type (`str`): Address type v4 or v6\n        address (`str`): ISE Ip\n        authport (`int`): Auth port\n        acctport (`int`): Acct port\n        secret (`str`): ISE Secret key\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_any_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L392"
    }
  },
  "configure_ap_client_count": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ap_client_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L106"
    }
  },
  "configure_ap_details": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ap_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L49"
    }
  },
  "configure_archive_default": {
    "iosxe": {
      "doc": " Configure archive default for switch\n        Args:\n            device ('obj'): Device object\n            archive_option ('str'): archive options\n            ex:)\n                log           Logging commands\n                maximum       maximum number of backup copies\n                path          path for backups\n                rollback      Rollback parameters\n                time-period   Period of time in minutes to automatically archive the running-config\n                write-memory  Enable automatic backup generation during write memory\n            archive_subcmd('str'): if archive_option is rollback\n            ex:)\n                filter  Rollback filter parameter\n                retry   Rollback retry parameters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2085"
    }
  },
  "configure_archive_logging": {
    "iosxe": {
      "doc": " Configure archive logging enable for switch\n        Args:\n            device ('obj'): Device object\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L461"
    }
  },
  "configure_archive_maximum": {
    "iosxe": {
      "doc": " Configure archive maximum for switch\n        Args:\n            device ('obj'): Device object\n            max_value ('int'): maximum number of backup copies\n            ex:)\n                <1-14>  maximum number of backup copies\n        Returns:\n            output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_maximum",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2175"
    }
  },
  "configure_archive_path": {
    "iosxe": {
      "doc": " Configure archive path for switch\n        Args:\n            device ('obj'): Device object\n            backup_path ('str'): path for backup\n            ex:)\n                bootflash:  Write archive on bootflash: file system\n                crashinfo:  Write archive on crashinfo: file system\n                flash:      Write archive on flash: file system\n                ftp:        Write archive on ftp: file system\n                http:       Write archive on http: file system\n                https:      Write archive on https: file system\n                rcp:        Write archive on rcp: file system\n                scp:        Write archive on scp: file system\n                sftp:       Write archive on sftp: file system\n                tftp:       Write archive on tftp: file system\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2125"
    }
  },
  "configure_archive_rollback": {
    "iosxe": {
      "doc": " Configure archive rollback for switch\n        Args:\n            device ('obj'): Device object\n            rollback_option ('str'): if archive_option is rollback\n            ex:)\n                filter  Rollback filter parameter\n                retry   Rollback retry parameters\n            timeout ('int', optional): Timeout value in seconds(default is 1 second)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_rollback",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2218"
    }
  },
  "configure_archive_time_period": {
    "iosxe": {
      "doc": " Configure archive time-period for switch\n        Args:\n            device ('obj'): Device object\n            time_period ('int'): Number of minutes to wait between archive creation\n            ex:)\n                <1-525600>  Number of minutes to wait between archive creation\n                \n        Returns:\n            result\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_time_period",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2271"
    }
  },
  "configure_archive_write_memory": {
    "iosxe": {
      "doc": " Configure archive write memory for switch\n        Args:\n            device ('obj'): Device object\n            \n        Returns:\n            output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_archive_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2316"
    }
  },
  "configure_arp_timeout": {
    "iosxe": {
      "doc": " Config arp timeout on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            timeout (`int`): timeout in second\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L12"
    }
  },
  "configure_as_path_acl": {
    "iosxe": {
      "doc": " configure Access-list for as-path\n        Args:\n            device ('obj'): Device object\n            acces_list_number (`int`): Access-list identifier ranges from <1-500>\n            action('str'): permit or deny\n            reg_exp ('str'): regular expression which matches for the acl\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_as_path_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1672"
    }
  },
  "configure_attachment_circuit_vfi": {
    "iosxe": {
      "doc": "\n    configure the Attachment Circuit with the VFI.\n        Args:\n\t    device (`obj`): Device \n        interface(`str`): interface name\n        vfiname(`str`): the Layer 2 VFI that you are binding to the VLAN port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_attachment_circuit_vfi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1388"
    }
  },
  "configure_auth_method": {
    "iosxe": {
      "doc": "Configure cli \n    authentication method mab/dot1x pae authenticator\n    Args:\n        device (`obj`): Device object\n        value (`str`): mab/dot1x\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_auth_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L861"
    }
  },
  "configure_authentication_convert_to_new_style": {
    "iosxe": {
      "doc": "Common function to configure authentication convert-to new-style for both forced and without forced\n        Args:\n            device ('obj'): device to use\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure authentication convert-to new-style\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_convert_to_new_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L80"
    }
  },
  "configure_authentication_convert_to_new_style_single_policy_interface": {
    "iosxe": {
      "doc": "Common funtion to configure authentication convert-to new-style\n        single-policy interface for both forced and without forced \n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            force (`bool`): Force the CLI. Defaults to False\n            max_time (`int`): Timeout for Dialog\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Failed to configure authentication convert-to new-style single-policy interface\n            ",
      "module_name": "single_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_convert_to_new_style_single_policy_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/single_policy/configure.py#L11"
    }
  },
  "configure_authentication_host_mode": {
    "iosxe": {
      "doc": "Configure legacy cli authentication host-mode multi-auth/multi-domain/multi-host/single-host\n    Args:\n        device (`obj`): Device object\n        mode (`str`): Host mode\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_host_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L567"
    }
  },
  "configure_authentication_order": {
    "iosxe": {
      "doc": "Configure legacy cli authentication order dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        order (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_order",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L624"
    }
  },
  "configure_authentication_parameters_interface": {
    "iosxe": {
      "doc": " Configure authentication parameters on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure the authentication parameters\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_parameters_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2545"
    }
  },
  "configure_authentication_periodic": {
    "iosxe": {
      "doc": "Configure legacy cli \n        authentication periodic\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_periodic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L772"
    }
  },
  "configure_authentication_port_control": {
    "iosxe": {
      "doc": "Configure legacy cli \n    authentication port-control auto/force-authorized/force-unauthorized\n    Args:\n        device (`obj`): Device object\n        control (`str`): auto/force-authorized/force-unauthorized\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_port_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L712"
    }
  },
  "configure_authentication_priority": {
    "iosxe": {
      "doc": "Configure legacy cli authentication priority dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        priority (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L668"
    }
  },
  "configure_authentication_timer_reauth": {
    "iosxe": {
      "doc": "Configure legacy cli \n    authentication timer reauthenticate value/server\n    Args:\n        device (`obj`): Device object\n        value (`str`): authentication timer reauthenticate value/server\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_authentication_timer_reauth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L816"
    }
  },
  "configure_auto_qos": {
    "iosxe": {
      "doc": " Configures the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            qos_mode ('str') : qos_mode name\n            qos_value ('str'): qos_value \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_auto_qos",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L96"
    }
  },
  "configure_auto_qos_global": {
    "iosxe": {
      "doc": " Configures the auto qos global compact\n        Args:\n            device ('obj'): device to use\n            compact ('str'): name of compact\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_auto_qos_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L160"
    }
  },
  "configure_autodiscovery_bgp_signalling_ldp_template": {
    "iosxe": {
      "doc": " Config autodiscovery bgp signaling ldp template\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n            vpn_id ('str'): vpn id to be configured\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_autodiscovery_bgp_signalling_ldp_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1514"
    }
  },
  "configure_bandwidth_remaining_policy_map": {
    "iosxe": {
      "doc": " Configures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_names('list) : list of policy-maps i.e. parent and grandparent\n             class_names ('list') : list of classes inside policy-map i.e voice, video etc.\n             bandwidth_list ('list) : list of bandwidth remainin for each class.\n             shape_average ('str') : shaper percentage value for grandparent\n        example:\n             policy_names=['parent','grandparent']\n             class_names = ['voice','data','video','class-default']\n             bandwidth_list = [20,10,10,10,30]\n             shape_average = 100\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bandwidth_remaining_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L259"
    }
  },
  "configure_bba_group": {
    "iosxe": {
      "doc": " bba-group\n        Args:\n            device (`obj`): Device object\n            name (`str`): bba-group name\n            vt_number (`str`): virtual-template interface number\n            service_profile_name('str', optional): service profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure:Could not config bba-group on device\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bba_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L104"
    }
  },
  "configure_bfd_neighbor_on_interface": {
    "iosxe": {
      "doc": " Configures bfd neighbor on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            address_family ('str'): ipv4|ipv6 address family\n            neighbor_address ('str'): neighbor address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bfd_neighbor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L156"
    }
  },
  "configure_bfd_on_interface": {
    "iosxe": {
      "doc": " Configures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            interval ('str'): interval\n            min_rx ('str'): min_rx\n            multiplier ('str'): multiplier\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bfd_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L12"
    }
  },
  "configure_bgp_additional_paths": {
    "iosxe": {
      "doc": " Configure additional_paths on bgp router\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L824"
    }
  },
  "configure_bgp_address_advertisement": {
    "iosxe": {
      "doc": " Configure address advertisement on router bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            ip_address ('str'): ip address\n            mask ('str'): mask\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_address_advertisement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L881"
    }
  },
  "configure_bgp_address_family_attributes": {
    "iosxe": {
      "doc": " configure attributes for bgp \n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            address_family ('str'): address family to configure under\n            neighbor ('str'): neighbor address to send label\n            send_label (`boolean`) :  send MPLS labels with the routes if true\n            route_reflector_client (`boolean`) : sets a device as routing information exchange server if true\n            next-hop-self all (`boolean`) : sets a device as routing information exchange server if true\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_address_family_attributes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L954"
    }
  },
  "configure_bgp_advertise_additional_paths": {
    "iosxe": {
      "doc": " Configures advertisement for additional paths\n\n        Args:\n            device ('obj'): device to configure\n            bgp_as ('str'): router bgp number\n            neighbor ('str'): neighbor to advertise to\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_advertise_additional_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L852"
    }
  },
  "configure_bgp_advertise_l2vpn_evpn": {
    "iosxe": {
      "doc": " Configure bgp advertise l2vpn evpn on device <device>\n        Args:\n            device ('obj'): Device object\n            bgp_as('int'): bgp id\n            address_family('str'): address family (i.e - ipv4/ipv6)\n            vrf('str'): vrf for in the device\n        Returns:\n            None\n        Raises: \n            SubCommandFailure : Failed to configure bgp advertise l2vpn evpn on device            \n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_advertise_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1715"
    }
  },
  "configure_bgp_auto_summary": {
    "iosxe": {
      "doc": " Configures the auto-summary on router bgp\n        Example: router bgp 100\n                auto-summary\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_auto_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1952"
    }
  },
  "configure_bgp_graceful_restart": {
    "iosxe": {
      "doc": " Configures graceful-restart on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1023"
    }
  },
  "configure_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Configures import path selection on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n            type('str'): type of selection to configure\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L25"
    }
  },
  "configure_bgp_l2vpn_evpn_rewrite_evpn_rt_asn": {
    "iosxe": {
      "doc": " Configures bgp rewrite-evpn-rt-asn for l2vpn evpn family on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            address_family('str'): address family ( Default is None )\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_l2vpn_evpn_rewrite_evpn_rt_asn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1798"
    }
  },
  "configure_bgp_l2vpn_neighbor_activate": {
    "iosxe": {
      "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            address_family_modifier ('str') : the endpoint provisioning information to be distributed\n                                              to BGP peers.\n            community('str') :  Specifies the communities attribute to be sent to a BGP neighbor.\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_l2vpn_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L506"
    }
  },
  "configure_bgp_log_neighbor_changes": {
    "iosxe": {
      "doc": " Configures log-neighbor-changes on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_log_neighbor_changes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1047"
    }
  },
  "configure_bgp_neighbor": {
    "iosxe": {
      "doc": " Configures bgp neighbor on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_as('str'): neighbor_as to configure\n            neighbor_address('str'): address of neighbor\n            source_interface('str',optional): used to configure update-source on neighbor ( Default is None )\n            ebgp('str',optional): used to configure ebgp-mulithop ( Default is None )\n            address_family('str',optional): address family ( Default is None )\n            vrf('str',optional): vrf to configure address_family with ( Default is None )\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L95"
    }
  },
  "configure_bgp_neighbor_activate": {
    "iosxe": {
      "doc": " Activate bgp neighbor on bgp router \n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            steps('obj')               : Context manager steps\n            peer_policy('str')         : peer policy to be configured\n            vrf ('str')                : vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L434"
    }
  },
  "configure_bgp_neighbor_advertisement_interval": {
    "iosxe": {
      "doc": " Configures bgp neighbor advertisement interval on bgp router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_address('str'): address of neighbor\n            address_family('str'): address family ( Default is None )\n            advert_interval('str'): advertisement interval to be configured\n            vrf('str',optional): vrf to configure address_family with ( Default is None )\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_advertisement_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1745"
    }
  },
  "configure_bgp_neighbor_as_override": {
    "iosxe": {
      "doc": " Configure AS override in VRF\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_as_override",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L788"
    }
  },
  "configure_bgp_neighbor_filter_description": {
    "iosxe": {
      "doc": " Configures bgp neighbor on bgp router\n        Args:\n            device('obj'): device to configure on\n            bgp_as('int'): BGP AS number\n            route_map ('list'): route map list which contains dictionary \n                dictionary contains following keys:\n                    damping_id ('int'): bgp damping id number\n                    neighbor_tag ('str'): Neighbor tag as string\n                    neighbor_ip ('str') : Neighbor ip address\n                    as_id ('int') : AS identifier\n                    filter_list ('int'): filter list identifier\n                    filter_routes ('str'): filter incoming/outgoing routes\n                    description ('str'): Description of session\n                    soft_reconfiguration('str') : soft-reconfiguration 0 to ignore the \n                    command anything else will trigger the command\n                    mtu_discovery('str'): mtu-discovery 0 to ignore the command anything \n                    else will trigger the command\n                ex.)\n                [  \n                    {\n                        'damping_id' : \"1\", \n                        'neighbor_tag' : 'externalpg', \n                        'neighbor_ip' : '20.20.20.3', \n                        'as_id' : '300', \n                        'filter_list' : '1', \n                        'filter_routes' : 'out' \n                        'description' : 'ibgp vers SWTDATA01', \n                        'soft_reconfiguration': '1',\n                        'mtu_discovery': '1' \n                    }\n                ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring route map\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_filter_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2221"
    }
  },
  "configure_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " Configure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            vrf ('str'): Vrf name\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L729"
    }
  },
  "configure_bgp_neighbor_remote_as_fall_over_as_with_peergroup": {
    "iosxe": {
      "doc": "Configure bgp neighbour and remote as fall over as\n       Args:\n       device('obj'): device to configure on\n       bgp_as('str'): bgp_as to configure\n       neighbor_address ('str'): Neighbor address\n       remote_as ('str'): Destination\n       peer_group_as('str'): configure the peer-group\n       fall_over_as ('str'): falloveras\n       Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_remote_as_fall_over_as_with_peergroup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2191"
    }
  },
  "configure_bgp_neighbor_send_community": {
    "iosxe": {
      "doc": " Add send-community attribute for bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n            send_community ('str')     : send-community attribute to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_neighbor_send_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1071"
    }
  },
  "configure_bgp_redistribute_connected": {
    "iosxe": {
      "doc": " Configures redistrubute connected on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            vrf('str'): vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1307"
    }
  },
  "configure_bgp_redistribute_internal": {
    "iosxe": {
      "doc": " Configures bgp redistribute internal on bgp router\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2104"
    }
  },
  "configure_bgp_redistribute_ospf": {
    "iosxe": {
      "doc": " Configures redistribute ospf on BGP router\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            address_family:('str'): address family\n            ospf_instance('str'): ospf redistribute to configure\n            vrf('str'): vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1195"
    }
  },
  "configure_bgp_redistribute_static": {
    "iosxe": {
      "doc": " configure redistribute static in bgp\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp as number\n            address_family ('str'): address family under bgp \n            vrf ('str'): vrf in address_family\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring redistribute\n                            static under bgp address_family\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_redistribute_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1685"
    }
  },
  "configure_bgp_refresh_max_eor_time": {
    "iosxe": {
      "doc": " Configures refersh max-eor-time on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            max_eor_time('str): max_eor_time to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_refresh_max_eor_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1633"
    }
  },
  "configure_bgp_router_id": {
    "iosxe": {
      "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            router_id('str'): router_id of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L60"
    }
  },
  "configure_bgp_router_id_interface": {
    "iosxe": {
      "doc": " Configure bgp router-id interface on interface <interface>\n        Args:\n            device ('obj'): Device object\n            bgp_as('int'): bgp id\n            interface('str'): interface details on which we config\n        Returns:\n            None\n        Raises: \n            SubCommandFailure : Failed to configure bgp router-id on interface\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_router_id_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1659"
    }
  },
  "configure_bgp_router_id_neighbor_ip_peergroup_neighbor": {
    "iosxe": {
      "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp id (autonomous system number) to configure\n            neighbor_ip 'str'): neighbor_ip address to peer-group \n            neighborname('str'): neighbor peer-group-name  to configure\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_router_id_neighbor_ip_peergroup_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1574"
    }
  },
  "configure_bgp_router_id_peergroup_neighbor": {
    "iosxe": {
      "doc": " Configures router-id on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp id (autonomous system number) to configure\n            neighborname('str'): neighbor peer-group-name  to configure\n            as_id('str'): ASN of the peer group to configure\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_router_id_peergroup_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1538"
    }
  },
  "configure_bgp_soo_on_inbound_from_neighbor": {
    "iosxe": {
      "doc": " Configures extended community SoO on inbound from neighbor using soo_rt\n\n        Args:\n            device('obj'): device to execute on\n            soo_rt('str'): route to configure SoO with\n            bgp_as('str'): what router bgp to configure on\n            vrf('str'): what vrf to configure on\n            neighbor_address('str'): what neighbor to configure on\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_soo_on_inbound_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L168"
    }
  },
  "configure_bgp_sso_route_refresh_enable": {
    "iosxe": {
      "doc": " Configures SSO route referesh on BGP router\n\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_sso_route_refresh_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1608"
    }
  },
  "configure_bgp_template_peer_policy": {
    "iosxe": {
      "doc": " Configures template peer-policy on BGP\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            policy:('str'): policy to be configured\n            send_community('str'): community to be configured\n            route_reflect_client('str') : enable router to acts as a routing information exchange server for all other iBGP routers.\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_template_peer_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1240"
    }
  },
  "configure_bgp_template_peer_session": {
    "iosxe": {
      "doc": " Configures template peer-session on BGP\n        Args:\n            device('obj'): device to configure\n            bgp_as('str'): bgp id\n            session_name:('str'): session name to be used\n            remote_as('str'): remote as to configured\n            source_intf('str'): source interface to be used\n            neighbor('str'): neighbor ip\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_template_peer_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1273"
    }
  },
  "configure_bgp_update_delay": {
    "iosxe": {
      "doc": " Configures update_delay time on BGP router\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            delay('int'): router_id of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bgp_update_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1504"
    }
  },
  "configure_boot_level_licence": {
    "iosxe": {
      "doc": " Config boot level license on Device\n    Args:\n        device ('obj'): Device object\n        network-advantage ('bool'): boot level network-advantage\n        network-essentials ('bool'): boot level network-essentials\n        network-premier ('bool'): boot level network-premier\n        addon ('bool'): addon option for license\n        adventerprise ('bool'): boot level adventerprise\n        advipservices ('bool'): boot level advipservices\n        ipbase ('bool'): boot level ipbase\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring boot level license\n    ",
      "module_name": "system.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_boot_level_licence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/configure.py#L33"
    }
  },
  "configure_boot_manual": {
    "iosxe": {
      "doc": " boot manual\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_boot_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L32"
    }
  },
  "configure_boot_system_switch_all_flash": {
    "iosxe": {
      "doc": " Configures the boot variable on all switches in the stack\n        Example : boot system switch all flash:ctest.bin\n        \n        Args:\n            device ('obj'): device to use\n            destination('str'): destination (e.g. test.bin)\n        \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_boot_system_switch_all_flash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1183"
    }
  },
  "configure_boot_system_switch_switchnumber": {
    "iosxe": {
      "doc": " Configure Boot System Switch with Destination\n        Args:\n            device ('obj'): Device object\n            switch_num ('int'): Switch number\n            destination ('int'): Destination path\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_boot_system_switch_switchnumber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3624"
    }
  },
  "configure_broadband_aaa": {
    "iosxe": {
      "doc": " Configure aaa configuration for broadband \n        Args:\n            device (`obj`): Device object\n            server_name (`str`): aaa group server name\n            interval (`str`): Accounting time interval\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_broadband_aaa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L251"
    }
  },
  "configure_bulkstat_profile": {
    "iosxe": {
      "doc": " configure bulkstat profile\n    Args:\n        device ('obj'): device to use\n        name ('str') : profile name to be added \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_bulkstat_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L901"
    }
  },
  "configure_by_jinja2": {
    "com": {
      "doc": " Configure using Jinja template\n\n        Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "jinja.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/utils.py#L20"
    }
  },
  "configure_call_admission": {
    "iosxe": {
      "doc": "Common funtion to configure call admission new model\n        Args:\n            device ('obj'): device to use\n            limit('int'): call admission limit value \n            cpu_limit('int'):call admission cpu limit value\n            session_lifetime('int'): call admission session lifetime value\n            per_session_charge('int'): call admission per session charge value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_admission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L197"
    }
  },
  "configure_call_home_aaa_authorization": {
    "iosxe": {
      "doc": " Configures call-home aaa-authorization\n        Example : aaa-authorization username test\n        Args:\n            device ('obj'): device to use\n            username ('str'): name of the user\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_aaa_authorization",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L100"
    }
  },
  "configure_call_home_alert_group": {
    "iosxe": {
      "doc": " Configures call-home alert-group\n        Example : alert-group inventory\n        Args:\n            device ('obj'): device to use\n            group ('str'): alert-group name\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_alert_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L122"
    }
  },
  "configure_call_home_alert_group_config_snapshot": {
    "iosxe": {
      "doc": " Configures call-home alert-group-config snapshot\n        Example : alert-group-config snapshot\n        Args:\n            device ('obj'): device to use\n            add_command_type ('str'): type of CLI command to be added (eg. default, no)\n            cli ('str'): cli command (1-127) characters. If includes spaces,\n                        enclose the entry in quotes (\"\")\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_alert_group_config_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L143"
    }
  },
  "configure_call_home_contact_email_addr": {
    "iosxe": {
      "doc": " Configures call-home contact_email_addr\n        Example : contact-email-addr test@test.com\n        Args:\n            device ('obj'): device to use\n            email ('str'): contact person's email address\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_contact_email_addr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L172"
    }
  },
  "configure_call_home_contract_id": {
    "iosxe": {
      "doc": " Configures call-home contract-id\n        Example : contract-id test123\n        Args:\n            device ('obj'): device to use\n            id ('str'): alphanumeric contract identification\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_contract_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L193"
    }
  },
  "configure_call_home_copy_profile": {
    "iosxe": {
      "doc": " Configures call-home copy profile\n        Example : copy profile test_source test_target\n        Args:\n            device ('obj'): device to use\n            source_profile ('str'): source profile name\n            target_profile ('str'): target profile name\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_copy_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L214"
    }
  },
  "configure_call_home_customer_id": {
    "iosxe": {
      "doc": " Configures call-home customer-id\n        Example : customer-id test123\n        Args:\n            device ('obj'): device to use\n            id ('str'): alphanumeric customer identification\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_customer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L236"
    }
  },
  "configure_call_home_data_privacy": {
    "iosxe": {
      "doc": " Configures call-home data-privacy\n        Example : data-privacy level high\n        Args:\n            device ('obj'): device to use\n            level ('str'): data-privacy level (eg. high or normal)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_data_privacy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L321"
    }
  },
  "configure_call_home_http_proxy": {
    "iosxe": {
      "doc": " Configures call-home http-proxy\n        Example : http-proxy test port 1\n        Args:\n            device ('obj'): device to use\n            proxy_server ('str'): http proxy server (eg. test)\n            port ('int'): proxy server port number (Range: 1-65535)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_http_proxy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L13"
    }
  },
  "configure_call_home_http_resolve_hostname_ipv4_first": {
    "iosxe": {
      "doc": " Configures call-home http resolve-hostname ipv4-first\n        Example : http resolve-hostname ipv4-first\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_http_resolve_hostname_ipv4_first",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L343"
    }
  },
  "configure_call_home_http_secure_server_identity_check": {
    "iosxe": {
      "doc": " Configures call-home secure server-identity-check\n        Example : http secure server-identity-check\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_http_secure_server_identity_check",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L363"
    }
  },
  "configure_call_home_mail_server": {
    "iosxe": {
      "doc": " Configures call-home mail-server\n        Example : mail-server test priority 1 secure tls\n        Args:\n            device ('obj'): device to use\n            server ('str'): hostname or IPv4/IPv6 address of the email server\n            priority ('int'): mail server priority (Range: 1-100)\n            secure ('str'): secure settings for mail server (eg. tls)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_mail_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L35"
    }
  },
  "configure_call_home_phone_number": {
    "iosxe": {
      "doc": " Configures call-home phone-number\n        Example : phone-number +123456789012\n        Args:\n            device ('obj'): device to use\n            phone_number ('str'): phone number (start with '+', length: 12-17)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_phone_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L58"
    }
  },
  "configure_call_home_profile_active": {
    "iosxe": {
      "doc": " Configures call home profile active\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L484"
    }
  },
  "configure_call_home_profile_anonymous_reporting_only": {
    "iosxe": {
      "doc": " Configures call home profile anonymous-reporting-only\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_anonymous_reporting_only",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L526"
    }
  },
  "configure_call_home_profile_destination_address": {
    "iosxe": {
      "doc": " Configures call home profile destination address\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n            address ('str'): address to profile email or http\n            address_url ('int'): address url \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L569"
    }
  },
  "configure_call_home_profile_destination_message_size_limit": {
    "iosxe": {
      "doc": " Configures call home profile destination message size limit \n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n            msg_size ('int'): maximum call-home message size <50-3145728>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_destination_message_size_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L592"
    }
  },
  "configure_call_home_profile_destination_preferred_msg_format": {
    "iosxe": {
      "doc": " Configures call home profile destination preferred-msg-format\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n            msg_format ('str'): message format (long-term, short-term, xml)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_destination_preferred_msg_format",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L614"
    }
  },
  "configure_call_home_profile_destination_transport_method": {
    "iosxe": {
      "doc": " Configures call home profile destination address transport-method\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n            address ('str'): address to profile email or http\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_destination_transport_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L636"
    }
  },
  "configure_call_home_profile_reporting": {
    "iosxe": {
      "doc": " Configures call home reporting\n        Args:\n            device ('obj'): device to use\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_reporting",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L695"
    }
  },
  "configure_call_home_profile_subscribe_to_alert_group": {
    "iosxe": {
      "doc": " Configures call home profile active\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n            group ('str): alert group \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_profile_subscribe_to_alert_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L547"
    }
  },
  "configure_call_home_rate_limit": {
    "iosxe": {
      "doc": " Configures call-home rate-limit\n        Example : rate-limit 1\n        Args:\n            device ('obj'): device to use\n            rate_limit ('int'): message rate-limit threshold per minute (Range: 1-60)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_rate_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L79"
    }
  },
  "configure_call_home_rename_profile": {
    "iosxe": {
      "doc": " Configures call-home rename profile\n        Example : rename profile test_abc test_123\n        Args:\n            device ('obj'): device to use\n            source ('str'): source profile name\n            target ('str'): target profile name\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_rename_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L257"
    }
  },
  "configure_call_home_reporting": {
    "iosxe": {
      "doc": " Configures call home reporting\n        Example : default mode\n        Args:\n            device ('obj'): device to use\n            address ('str'): call home reporting address\n            proxy_server ('str'): http proxy server\n            email ('str'): email address\n            port ('int'): port number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_reporting",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3180"
    }
  },
  "configure_call_home_site_id": {
    "iosxe": {
      "doc": " Configures call-home site-id\n        Example : site-id test_site\n        Args:\n            device ('obj'): device to use\n            site_id ('str'): alphanumeric site identification\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_site_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L279"
    }
  },
  "configure_call_home_source_ip_address": {
    "iosxe": {
      "doc": " Configures call-home source-ip-address\n        Example : source-ip-address 1.1.1.1\n        Args:\n            device ('obj'): device to use\n            ip ('str'): IPv4/IPv6 source IP address\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_source_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L300"
    }
  },
  "configure_call_home_street_address": {
    "iosxe": {
      "doc": " Configures call-home street-address\n        Example : street-address 123abcStreet\n        Args:\n            device ('obj'): device to use\n            address ('str'): street address, city, state, and zip code. If includes\n                            spaces, enclose the entry in quotes (\"\")\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_street_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L421"
    }
  },
  "configure_call_home_syslog_throttling": {
    "iosxe": {
      "doc": " Configures call-home syslog-throttling \n        Example : syslog-throttling\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_syslog_throttling",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L443"
    }
  },
  "configure_call_home_vrf": {
    "iosxe": {
      "doc": " Configures call-home vrf\n        Example : vrf vrf1\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): VRF instance name\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_call_home_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L463"
    }
  },
  "configure_cdp": {
    "ios": {
      "doc": " \n        Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L11"
    },
    "iosxe": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L11"
    },
    "iosxr": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L11"
    },
    "nxos": {
      "doc": " Enables cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L9"
    }
  },
  "configure_cdp_holdtime": {
    "iosxe": {
      "doc": " Configure cdp holdtime on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            timer ('int'): CDP holdtime in seconds between 10-255 seconds\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L186"
    }
  },
  "configure_cdp_interface": {
    "iosxe": {
      "doc": " Configure CDP on interface\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface on which CDP to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L71"
    }
  },
  "configure_cdp_neighbors": {
    "iosxe": {
      "doc": " Enables cdp on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L120"
    }
  },
  "configure_cdp_timer": {
    "iosxe": {
      "doc": " Configure cdp timer on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            timer ('int'): CDP timer in seconds between 5-254 seconds\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cdp_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L152"
    }
  },
  "configure_class_map": {
    "iosxe": {
      "doc": " Configures class-map\n        Args:\n             device ('obj'): device to use\n             class_name ('str'): name of the class \n             match_val  ('str'): values of the match\n             match_mode ('str',optional): name of the match_mode, default is None\n             match_val1 ('str',optional): name of the match_mode 2, default is None\n             match_mode1 ('str',optional): name of the match_mode type, default is None\n             class_match_type ('str',optional): name of the match type, default is match-all\n             access_group ('bool', optional): create class match with acls groups, default is False\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure             \n    ",
      "module_name": "policy_class_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_class_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_class_map/configure.py#L13"
    }
  },
  "configure_class_map_subscriber": {
    "iosxe": {
      "doc": "Configure Class Map Subscriber\n        Args:\n            device ('obj'): device to use\n            map_name ('str'): map name\n            match_type ('str'): Match type \n            result_type ('str', optional): Result type, defaults to None\n            auth_status ('str', optional): Authorization status, defaults to None\n            method_type ('str', optional): Method type, defaults to None\n            dot1x_type ('str', optional): Dot1x type, defaults to None\n            priority_type('str', optional): Priority type, defaults to None\n            priority ('str', optional): Priorit value, defaults to None\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure Class map Subscriber\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_class_map_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1079"
    }
  },
  "configure_class_map_type_match_any": {
    "iosxe": {
      "doc": " configure class-map type control subscriber match-any\n    Args:\n        device ('obj'): Device object\n        class_map_name ('str): Specify a class map name\n        service_temp_name ('str'): Specify service template name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring class-map type control subscriber match-any\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_class_map_type_match_any",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1318"
    }
  },
  "configure_class_map_type_match_none": {
    "iosxe": {
      "doc": " configure class-map type control subscriber match-none\n    Args:\n        device ('obj'): Device object\n        class_map_name ('str): Specify a class map name\n        service_temp_name ('str'): Specify service template name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring class-map type control subscriber match-none\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_class_map_type_match_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1340"
    }
  },
  "configure_clear_ipv6_mld_counters": {
    "iosxe": {
      "doc": " Configure clear ipv6 mld counters\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_clear_ipv6_mld_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1002"
    }
  },
  "configure_clear_logging_onboard_switch_environment": {
    "iosxe": {
      "doc": " unconfigures clear  logging  onboard  switch  Environment\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_clear_logging_onboard_switch_environment",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1112"
    }
  },
  "configure_clear_logging_onboard_switch_temperature": {
    "iosxe": {
      "doc": " unconfigures clear  logging  onboard  switch  temperature\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_clear_logging_onboard_switch_temperature",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1053"
    }
  },
  "configure_clear_logging_onboard_switch_voltage": {
    "iosxe": {
      "doc": " unconfigures clear  logging  onboard  switch  voltage\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_clear_logging_onboard_switch_voltage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1082"
    }
  },
  "configure_client_details": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_client_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L72"
    }
  },
  "configure_clock_timezone": {
    "iosxe": {
      "doc": " Configure Clock Timezone\n        Args:\n            device ('obj'): Device object\n            timezone_name('str'): name of time zone\n            hours_offset('int'): Hours offset from UTC\n            minutes_offset('int'): Minutes offset from UTC\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_clock_timezone",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1489"
    }
  },
  "configure_coa": {
    "iosxe": {
      "doc": "\n    COA Configuration for dot1x and mab\n    Args:\n        device ('obj'): Device object\n        config_dict ('dict'): Dictionary of interface configuration details\n            dictionary contains following keys:\n                auth_type(all, any, session-key) : all(Matches when all attributes match)\n                                                    any(Matches when all sent attributes match)\n                                                    session-key(Matches with session key attribute only)\n                hostname(hostname/ipv4/ipv6) : Ip/ipv6 or hostname of the RADIUS client\n                vrf : VRF name\n                encryption_type(0,6,7): 0(UNENCRYPTED), 6(ENCRYPTED), 7(HIDDEN)\n                server_key(str) : Specify a RADIUS client server-key\n                ignore_retransmission(bool) : Drop packets using same radius id\n                ignore_server-key(bool) : Ignore shared secret\n                ignore_session-key(bool) : Ignore attr 151\n\n    Returns:\n        None\n\n    Example: {\n                'auth_type': 'all',\n                'hostname': 'hostname',\n                'vrf': 'vrf1',\n                'encryption_type' : 0,\n                'server_key' : 'secretkey',\n                'ignore_retransmission': True,\n                'ignore_server_key': True,\n                'ignore_session_key': True\n                }\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_coa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L209"
    }
  },
  "configure_commands_to_template": {
    "iosxe": {
      "doc": " Configure commands to a template\n    \n    Args:\n        device ('obj'): device to use\n        template_name ('str'): Select a template to configure\n        cmd_to_add ('str'): Template configuration commands\n        ex:)\n            aaa              Authentication, Authorization and Accounting.\n            access-session   Access Session specific Interface Configuration Commands\n            authentication   Auth Manager Interface Configuration Commands\n            carrier-delay    Specify delay for interface transitions\n            cts              Configure Cisco Trusted Security\n            default          Set a command to its defaults\n            description      Interface specific description\n            device-tracking  Device tracking commands on the interface\n            dialer           Dial-on-demand routing (DDR) commands\n            dialer-group     Assign interface to dialer-list\n            dot1x            Interface Config Commands for IEEE 802.1X\n            ethernet         Ethernet service\n            exit             Exit from template configuration mode\n            hold-queue       Set hold queue depth\n            ip               IP template config\n            ip               Interface Internet Protocol config commands\n            ipv6             IPv6 interface commands\n            keepalive        Enable keepalive\n            load-interval    Specify interval for load calculation for an interface\n            loopdetect       Configure loopdetect feature setting\n            mab              MAC Authentication Bypass Interface Config Commands\n            negate           Negate the following commands on a template\n            no               Negate a command or set its defaults\n            peer             Peer parameters for point to point interfaces\n            ppp              Point-to-Point Protocol\n            remark           template description comment\n            service-policy   Configure CPL Service Policy\n            source           Get config from another source\n            spanning-tree    Spanning Tree Subsystem\n            storm-control    storm configuration\n            subscriber       Subscriber inactivity timeout value.\n            switchport       Set switching mode characteristics\n            trust            Set trust value for the interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_commands_to_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1680"
    }
  },
  "configure_common_criteria_policy": {
    "iosxe": {
      "doc": " Configure aaa common criteria policy\n    Args:\n        device (`obj`):                 Device object\n        policy_name (`str`):            Policy name\n        char_changes (`str`, optional): Number of change characters between old and new passwords\n        copy (`str`, optional):         Copy from policy\n        lifetime (`dict`, optional):    lifetime configuration\n        lower_case (`str`, optional):   Number of lower-case characters\n        upper_case (`str`, optional):   Number of upper-case characters\n        max_len (`str`, optional):      Specify the maximum length of the password\n        min_len (`str`, optional):      Specify the minimum length of the password\n        no_value (`dict`, optional):    value to unconfigure\n        num_count (`str`, optional):    Number of numeric characters\n        char_rep (`str`, optional):     Maximum number of times a character can repeat consecutively in password\n        restrict (`bool`, optional):     Prohibit consecutive 4 characters or numbers from the keyboard\n        special_case (`str`, optional): Number of special characters\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_common_criteria_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L853"
    }
  },
  "configure_community_list_community_list_permit": {
    "iosxe": {
      "doc": " Configure community list permit\n\n        Args:\n            device ('obj'): Device object\n            community_list('list'): community list which contains dictionary\n                dictionary contains following 3 keys:\n                    seq ('int'): sequence number\n                    permit ('str'): permit value\n                    community ('str'): community value - Optional\n                ex.)\n                    [ \n                        {\n                            'seq': 1,\n                            'permit': 'deny',\n                            'community': 62000:1\n                        },\n                        {   \n                            'seq': 1,\n                            'permit': 'permit'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'deny',\n                            'community': '62000:2'\n                        },\n                        {\n                            'seq': 2,\n                            'permit': 'permit'\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "community_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_community_list_community_list_permit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/community_list/configure.py#L15"
    }
  },
  "configure_control_plane_control_plane_policy": {
    "iosxe": {
      "doc": " Configure control plane policy\n\n        Args:\n            device ('obj'): Device object\n            config('list'): List of commands to configure\n                ex.)\n                    [\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': False\n                        },\n                        {\n                            'policy_name': 'Control_Plane_In',\n                            'remove': True\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring control plane policy\n\n    ",
      "module_name": "control_plane.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_control_plane_control_plane_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/control_plane/configure.py#L11"
    }
  },
  "configure_control_policies": {
    "iosxe": {
      "doc": " Configure policy-map on an device\n\n        Args:\n            device (`obj`): Device object\n            policy_name (`str`): name of the policy\n            event (`str`,optional): event name, default value is None\n            match (`str`,optional): match-all or match-first, default value is None\n            class_number (`int`,optional): class number between 1 to 254, default value is None\n            class_name (`str`,optional): class name if any exists, default value is None\n            class_action (`str`,optional): class action to be perform, default value is None\n            action_number (`int`,optional): action number between 1 to 254, default value is None\n            action (`str`,optional): action to be perform under this class, default value is None\n            action_method (`str`,optional): Mab or dot1x or webauth, default value is None\n            auth_rest_timer ('int', optional): Authentication restart timer, default value is None\n            template_name (`str`,optional): Template name, default value is None\n            priority ('int', optional): Priority vlaue, default value is None\n            dot1x_type (`str`,optional): Dot1 type. default value is None\n            retries (`str`,optional): retries option. default value is None\n            retry_time (`str`,optional): retry-time option. default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_control_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3600"
    }
  },
  "configure_controller_details": {
    "linux": {
      "doc": "Configures the controller details on wsim\n            Args:\n                device (obj): Device object\n                ctrl_type (str): Controller type\n                ctrl_ip(str): Controller management IP\n                ctrl_username (str): Controller username\n                ctrl_password (str): Controller Password\n            Returns:\n                    None\n            Raises:\n                    SubCommandFailure\n            ",
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_controller_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L16"
    }
  },
  "configure_controller_policy": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) controller service-policy\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            service_list ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller service-policy\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_controller_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1641"
    }
  },
  "configure_controller_service_policy": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) controller service-policy\n    \n        mdns-sd controller service-policy contrl-policy\n        service-list contrl-list3\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str')\n            service_list ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller service-policy\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_controller_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1361"
    }
  },
  "configure_crypto_ikev2_NAT_keepalive": {
    "iosxe": {
      "doc": " Configure crypto ikev2 nat keepalive <time in sec>\n    Args:\n        device (`obj`): Device object\n        keepalive_time (`int`): keepalive time in secs\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_ikev2_NAT_keepalive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L744"
    }
  },
  "configure_crypto_ikev2_keyring": {
    "iosxe": {
      "doc": " Configure Crypto Ikev2 Keyring\n    Args:\n        device (`obj`): Device object\n        keyring_name (`str`): Keyring name\n        peer_name (`str`,optional): Peer name for the tunnel endpoint (Default None)\n        preshare_key (`str`,optional): Share key between tunnel endpoints (Default None)\n        address (`str`,optional): IPv4 or IPv6 address (i.e 1.1.1.1 or 1:1:1::1) (Default 0.0.0.0)\n        mask (`str`,optional): IPv4 or IPv6 mask (i.e 0.0.0.0 or 128) (Default 0.0.0.0)\n        type (`str`,optional): IP protocol (ipv4 or ipv6) (Default ipv4)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_ikev2_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L462"
    }
  },
  "configure_crypto_ikev2_policy": {
    "iosxe": {
      "doc": " Configure crypto ikev2 policy ikev2policy\n    Args:\n        device (`obj`): Device object\n        policy_name (`str`): name of ikev2 policy\n        proposal_name (`str`): name of ikev2 proposal\n        fvrf ('str',optional) FVRF name (Default None)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_ikev2_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L955"
    }
  },
  "configure_crypto_ikev2_proposal": {
    "iosxe": {
      "doc": " Configure Cryto Ikev2 proposal\n    Args:\n        device (`obj`): Device object\n        proposal_name (`str`): proposal name\n        encryption_name (`str`,optional): name of encryption (Default None)\n        integrity_name (`str`,optional): name of integrity (Default None)\n        group_number (`str`,optional): group number (Default None)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_ikev2_proposal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L591"
    }
  },
  "configure_crypto_ipsec_nat_transparency": {
    "iosxe": {
      "doc": " Configure crypto ipsec nat-transparency udp-encapsulation\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_ipsec_nat_transparency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L642"
    }
  },
  "configure_crypto_map_for_gdoi": {
    "iosxe": {
      "doc": " Configures Crypto Map for gdoi\n        Args:\n            device (`obj`): Device object\n            map_name ('str'): Crypto Map name\n            seq ('str'):  Sequence to insert into crypto map entry\n            group ('str',optional): Set the san group parameters\n            description ('str',optional): Description of the crypto map statement policy\n            ipv6 ('bool',optional): Configure IPv6 crypto map\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_map_for_gdoi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/configure.py#L220"
    }
  },
  "configure_crypto_map_on_interface": {
    "iosxe": {
      "doc": " Configure crypto map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            map_name (`str`): Crypto Map name to be configured\n            ipv6 ('bool'):  Indicate if this is ipv6 crypto map. Default false\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_map_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4681"
    }
  },
  "configure_crypto_pki_server": {
    "iosxe": {
      "doc": " \n        Configure crypto pki server\n        Args:\n            device ('obj'): Device object\n            server_name ('str'): Name for the pki server\n            auto_rollover_time('str'): Auto rollover time <days> <hours> <minutes>\n            cdp_url_server ('str') : cdp url server (http | ldap)\n            cdp_url_ip_path ('str') : cdp url ip path \n            database_archive_type ('str') : Database archive type either pem or pkcs12\n            archive_password ('str') : Database archive password\n            archive_encryption_type ('int') : Database archive encryption type (0-9)\n            database_level ('str') : Database level (complete|minimum|names)\n            database_url_server ('str') : Database server (http | ldap) \n            database_ip_path ('str') : Exact path for database file\n            database_url_storage_location ('str') : Database url storage location (cnm|crl|crt etc.)\n            database_url_publish ('bool') : Database url publish option for cnm, crl,crt\n            database_user ('str') : Database username\n            eku_options ('str') : eku options that needs to be configured (1 or more)\n            grant_mode ('str') : Grant request mode (auto | none | ra-auto)\n            grant_rollover_cert ('str') : Grant auto rollover certificate (ca-cert | ra-cert)\n            grant_tp_list ('str') : grant trustpoints (upto 5 trustpoints)\n            grant_trustpoint ('str') : Label of trustpoint holding trusted CA cert\n            hash_type ('str') : Hash algorithm type (md5, sha1, sha256, sha384, sha512)\n            issuer_name ('str') : Issuer name to be configured\n            ca_cert_life ('str') : Ca certificate lifetime in format <days(0-7305)> <hours(0-23)> or  <days(0-7305)> <hours(0-23)> <minutes(0-59)>\n            cert_life ('str') : Certificate lifetime in format <days(0-7305)> <hours(0-23)> or  <days(0-7305)> <hours(0-23)> <minutes(0-59)>\n            crl_life ('str') : crl lifetime in format <hours(0-336)> or  <hours(0-336)> <minutes(0-59)>\n            enrol_req_life ('str') : enrollment request lifetime in format <hours(0-1000)> or  <hours(0-1000)> <minutes(0-59)>\n            mode ('str') : Modes (ra|sub-cs)\n            mode_ra_transparent ('bool') : True if want to enable transparent in ra mode\n            serial_number ('str') : serial number of last issued ceritificate \n            enrollment_ip ('str') : Ip address for CA server enrollment URL\n            enrollment_path ('str') : Path for CA server enrollment URL\n            revoke_chk ('str') : Type of revocation check (none|crl|ocsp)\n            key_len ('int') : Key length for RSA keypair \n            port ('int') : Port number for CA server enrollment\n        Returns:\n            True/False\n    ",
      "eaptls": {
        "doc": "Configures crypto pki server on device\n\n    Args:\n        device (`obj`): Device object\n        domain_name ('str'): Name of the domain to be configured\n        database_level ('str'): Database level to be configured\n        issuer_name ('str'): Issuer name to be configured\n        hash ('str'): Hash to be configured\n        modulus_size ('str'): Modulus size to be configured\n        Password ('str'): Password to be configured\n        server_name ('str'): Name of the server to be configured\n\n    Returns:\n        None\n\n    Raise:\n        SubCommandFailure: Failed to configure crypto pki server on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_crypto_pki_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L159"
      },
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_pki_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L13"
    }
  },
  "configure_crypto_transform_set": {
    "iosxe": {
      "doc": " Configures Crypto IPsec\n        Args:\n            device ('obj')    : device to use\n            transform_name ('str).  Transform set name\n            cipher ('str). ESP header type (i.e  esp-aes, esp-gcm)\n            ah ('str',optional) Authentication (i.e esp-sha-hmac) (Default '')\n            mode ('str',optional) Tunnel mode (i.e transparent,tunnel) (Default tunnel)\n            esn: ('str',optional) Boolean.\n            default: ('str',optional). Set to defaults (options are 'esn' or 'mode')\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_crypto_transform_set",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L162"
    }
  },
  "configure_cts_aaa_methods": {
    "iosxe": {
      "doc": " Configure cts aaa methods\n        Args:\n            device ('obj'): device to use\n            server_grp ('str'): server group name\n            list_name ('str'): cts authorisation list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts aaa methods\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_aaa_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L1040"
    }
  },
  "configure_cts_authorization_list": {
    "iosxe": {
      "doc": " Configure Local authorization list to use for CTS\n        Args:\n            device ('obj'): device to use\n            authlist ('str'): Named authorization list to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring Local authorization list\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_authorization_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L14"
    }
  },
  "configure_cts_credentials": {
    "iosxe": {
      "doc": " Configure CTS credentials\n        Args:\n            device ('obj'): device to use\n            credential_id ('str'): Specify the CTS device ID\n            password (`str`): Specify device's CTS password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts credential\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L193"
    }
  },
  "configure_cts_enforcement_interface": {
    "iosxe": {
      "doc": " Configure cts role-based enforcement on interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: cts role-based enforcement not configured\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_enforcement_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L889"
    }
  },
  "configure_cts_enforcement_logging": {
    "iosxe": {
      "doc": " Configure cts enforcement logging\n        Args:\n            device ('obj'): device to use\n            log_interval ('str'): logging interval in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts enforcement logging\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_enforcement_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L992"
    }
  },
  "configure_cts_manual": {
    "iosxe": {
      "doc": "Configures cts manual on the interface\n       Example: cts manual\n\n       Args:\n            device ('obj'): device object\n            interface ('str): interface to configure (eg. Gig1/0/1, Te1/0/10)\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L918"
    }
  },
  "configure_cts_role_based_monitor": {
    "iosxe": {
      "doc": " Configure cts role based monitor\n        Args:\n            device ('obj'): device to use\n            default ('str'): default\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n            src_sgt ('str'): Source Group Tag\n            dst_sgt ('str'): Destination Group Tag            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts role based monitor\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_role_based_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L829"
    }
  },
  "configure_cts_role_based_permission": {
    "iosxe": {
      "doc": " Configure cts role based permissions\n        Args:\n            device ('obj'): device to use\n            src_sgt ('str'): Source Group Tag\n            dest_sgt ('str'): Destination Group Tag\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n            rbacl_name ('str'): rbacl name to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts role based permissions\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_role_based_permission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L751"
    }
  },
  "configure_cts_role_based_permission_default": {
    "iosxe": {
      "doc": " Configure cts role based permissions default\n        Args:\n            device ('obj'): device to use\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n            rbacl_name ('str'): rbacl name to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure cts role based permissions default\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_cts_role_based_permission_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L792"
    }
  },
  "configure_datalink_flow_monitor": {
    "iosxe": {
      "doc": " Config datalink flow monitor m4out input on Device\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface\n            modetype('str'): different mode types\n            ex:)\n                input    Apply Flow Monitor on input traffic\n                output   Apply Flow Monitor on output traffic\n                sampler  Optional Sampler to apply to this Flow Monitor\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring datalink flow monitor m4out\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_datalink_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L149"
    }
  },
  "configure_debug_ip_pim": {
    "iosxe": {
      "doc": " Configure debug ip pim \n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_debug_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1059"
    }
  },
  "configure_debug_snmp_packets": {
    "iosxe": {
      "doc": " enable snmp debugs on device\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_debug_snmp_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L434"
    }
  },
  "configure_default_gateway": {
    "iosxe": {
      "doc": " Configures default gateway\n\n        Args:\n            device ('obj'): Device obj\n            gateway_ip ('str'): IP address of gateway to be configured\n              \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_gateway",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L652"
    }
  },
  "configure_default_mac_global_address_table_notification_change": {
    "iosxe": {
      "doc": "Configure default address-table notification change under global mac on this device\n        Args:\n            device ('obj'): Device object\n            change_option ('str',optional): change option history-size/interval\n            size ('int',optional): Number of MAC notifications to be stored\n            interval ('int',optional): Interval between the MAC notifications\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_mac_global_address_table_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L277"
    }
  },
  "configure_default_mdns_controller": {
    "iosxe": {
      "doc": " Creating default mdns controller\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            cont_addr ('str'): controller addresses to be configured\n            cont_service_policy ('str'): service-policy to configured\n            cont_src_intf ('str'): Default router ID\n            srvc_list ('str'):\n            mat_option ('str'):\n            msg_type ('str'):\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_mdns_controller",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1603"
    }
  },
  "configure_default_mpls_mldp": {
    "iosxe": {
      "doc": " configure mdt type in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            default_mdt_group ('str'): configures a default MDT group for a VPN VRF instance.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_mpls_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L316"
    }
  },
  "configure_default_spanning_tree": {
    "iosxe": {
      "doc": " Configure spanning-tree mode mst\n        Args:\n            device ('obj'): Device object]\n            spanning_tree ('str'): spanning tree \n            mst ('str'): instance range, example: 0-3,5,7-9\n            portfast ('str'): enable portfast\n            range ('str'): vlan range, example: 1,3-5,7,9-11\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_spanning_tree",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L638"
    }
  },
  "configure_default_stack_power_switch_power_priority": {
    "iosxe": {
      "doc": " configure_default stack power switch <sw_num> power priority low/high/switch <priority_value>\n        Example : stack-power switch 1 default power priority low 15\n        Args:\n            device ('obj'): device to use\n            stack_parameters ('str'): stack_parameters (stack/switch)\n            switch_number ('int'): Switch number (1-16)\n            power_priority('str'): default power_priority (low/high/switch)\n            power_priority_value ('int'): priority_values <1-27>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_stack_power_switch_power_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3446"
    }
  },
  "configure_default_switchport_trunk_vlan": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n        Returns:\n            interface members\n        Raises:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_switchport_trunk_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L725"
    }
  },
  "configure_default_vxlan": {
    "iosxe": {
      "doc": " configure mdt default in vxlan\n        Args:\n            device ('obj'): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            multicast_group_address ('str'): vxlan multicast group address\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring default vxlan\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_default_vxlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L887"
    }
  },
  "configure_device": {
    "com": {
      "doc": "shut interface\n\n        Args:\n            device (`obj`): Device object\n            config (`str`): Configuration to apply\n            config_timeout ('int'): Timeout value in sec, Default Value is 150 sec\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L759"
    }
  },
  "configure_device_classifier": {
    "iosxe": {
      "doc": " Configure device classifier on this device\n    \n    Args:\n        device ('obj'): device to use\n        dc_option ('str'): device classifier option\n        ex:)\n            condition    Define device classifier condition\n            device-type  Define device type\n        dc_option_name ('str'): Name of device classifier type\n        ex:)\n            WORD  Condition name\n            WORD  Device type name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_classifier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L752"
    }
  },
  "configure_device_sensor_filter_list_lldp": {
    "iosxe": {
      "doc": " configure device-sensor filter-list lldp list  \n        Args:\n            device ('obj'): device to  be used    \n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_sensor_filter_list_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L126"
    }
  },
  "configure_device_sgt": {
    "iosxe": {
      "doc": " Configure Device SGT\n        Args:\n            device ('obj'): device to use\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Device SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_sgt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L70"
    }
  },
  "configure_device_tracking_binding": {
    "iosxe": {
      "doc": "Adds static entry to binding table\n    Args:\n        device ('obj'): device object\n        vlan ('str'): vlan id\n        address ('str'): ip address (v4 or v6)\n        interface ('str'): interface for entry - Eg. TWE 1/0/1\n        mac ('str'): entry's mac address\n        tracking ('str', optional): Set the tracking for the device - Eg. \"enable\", \"disable\", or \"default\" . Defaults to \"default.\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to add static entry\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1783"
    }
  },
  "configure_device_tracking_binding_options": {
    "iosxe": {
      "doc": " Configures device-tracking binding options\n        Args:\n            device ('obj'): device object\n            reachable_lifetime ('str', optional): Default max time in REACHABLE without activity - can be 1-86400 or \"infinite\". Defaults to None\n            stale_lifetime ('str', optional): Default max time in STALE without activity - can be 1-86400 or \"infinite\". Defaults to None\n            down_lifetime ('str', optional): Default max time in DOWN without activity - can be 1-86400 or \"infinite\". Defaults to None\n            max_entries ('int', optional): Max number of entries - can be 1-1000000. Defaults to None\n            mac_limit ('int', optional): Max number of mac entries - can be 1-1000000. Defaults to None\n            port_limit ('int', optional): Max number of port entries - can be 1-1000000. Defaults to None\n            vlan_limit ('int', optional): Max number of vlan entries - can be 1-2000000. Defaults to None\n            logging ('bool', optional): Enable syslog logging of binding table events. Defaults to False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure device-tracking binding\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_binding_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1837"
    }
  },
  "configure_device_tracking_on_interface": {
    "iosxe": {
      "doc": " Configure device-tracking on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure device-tracking on interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2296"
    }
  },
  "configure_device_tracking_policy": {
    "iosxe": {
      "doc": " Configure device tracking Policy\n        Args:\n            device ('obj'): device to use\n            client_policy_name ('str'): name of the policy to be configured on client side\n            server_policy_name ('str'): name of the policy to be configured on server side\n            protocol ('str'): protocol to be configured (arp,dhcp4,dhcp6,ndp,udp)\n\n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure: Failed configuring device tracking policy\n    ",
      "module_name": "device_tracking.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/device_tracking/configure.py#L13"
    }
  },
  "configure_device_tracking_tracking": {
    "iosxe": {
      "doc": " Configure device-tracking tracking\n\n    Args:\n        device (\"obj\"): The device to configure\n        auto_source (\"str\", optional): The configuration for auto_source - either override or failback address. Defaults to None.\n        retry_interval (\"str\", optional): Device-tracking retry-interval in seconds. Defaults to None.\n\n    Raises:\n        SubCommandFailure: Failed to configure device-tracking tracking\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_tracking",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2046"
    }
  },
  "configure_device_tracking_upgrade_cli": {
    "iosxe": {
      "doc": " Configures device-tracking upgrade-cli {option}\n    Args:\n        device ('obj'): device to use\n        force ('bool'): option to force the upgrade\n        revert: ('bool'): option to revert the upgrade\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: \"Failed to configure device-tracking upgrade-cli with\n        force {force} and revert {revert}\"\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_device_tracking_upgrade_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L262"
    }
  },
  "configure_dhcp_channel_group_mode": {
    "iosxe": {
      "doc": "Configures Ethernet port to an EtherChannel group\n       Example: channel-group 120 mode active\n\n       Args:\n            device ('obj'): device object\n            interface ('str): interface to configure (eg. Gig1/0/1)\n            group ('int'): Channel group number. The range is 1 to 128\n            mode ('str'): EtherChannel mode (eg. active, passive, auto)\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcp_channel_group_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L862"
    }
  },
  "configure_dhcp_pool_ipv6_domain_name": {
    "iosxe": {
      "doc": " Configure domain-name under DHCP IPv6 pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            domain_name ('str'): domain name to configure\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating domain_name under IPv6 DHCP pool\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcp_pool_ipv6_domain_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L334"
    }
  },
  "configure_dhcp_relay_information": {
    "iosxe": {
      "doc": " Enable dhcp relay information on device\n        Args:\n            device ('obj'): device to run on\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed enabling relay information on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcp_relay_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L584"
    }
  },
  "configure_dhcp_relay_short_lease": {
    "iosxe": {
      "doc": " Configure DHCP relay short lease\n        Args:\n            device ('obj'): device to use\n            lease_time ('int'): dhcp lease time\n            interface ('str',optional): interface name ,defaut is empty string \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure dhcp relay short lease\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcp_relay_short_lease",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L672"
    }
  },
  "configure_dhcpv6_guard_policy": {
    "iosxe": {
      "doc": " Configure DHCPv6 Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCPv6 guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dhcpv6_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L44"
    }
  },
  "configure_diagnostic_monitor_switch": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 test\n    \n        Args:\n            device ('obj'): Device object\n            test_id ('str'): Test ID list (e.g. 1,3-6) or Test Name or minimal  or complete \n              Interface port number WORD    Port number list (e.g. 2,4-7)\n            switch_number ('int'): Switch number on which diagnostic has to be performed\n            test_name ('str'): Word , test name \n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_diagnostic_monitor_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3262"
    }
  },
  "configure_diagnostic_schedule_switch": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 test\n    \n        Args:\n            device ('obj'): Device object\n            switch_number ('int'): Switch number on which diagnostic has to be performed\n            time ('str'): time in hours and min  \"hh:mm  Begin time\"\n            day ('str'): Day of the week\n            day_number ('int'): day number of a month\n            month ('str'): name of the month\n            year ('int'): year number , \n          \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_diagnostic_schedule_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3314"
    }
  },
  "configure_diagonistics_monitor_switch": {
    "iosxe": {
      "doc": " diagonistics monitor switch\n        Args:\n            device ('obj'): Device object\n            switch_num('int'): switch number\n            test_name('str'): diagnostic_test_name\n            time('str'): time in hh:mm:ss\n            millisec('int'): milli seconds\n            days('int'): test_days \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_diagonistics_monitor_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L339"
    }
  },
  "configure_disable_aes_encryption": {
    "iosxe": {
      "doc": "\n        removes aes password encryption\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandError\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_disable_aes_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L321"
    }
  },
  "configure_disable_nat_scale": {
    "iosxe": {
      "doc": " Configure disable NAT scale\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_disable_nat_scale",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L922"
    }
  },
  "configure_disable_sci_dot1q_clear": {
    "iosxe": {
      "doc": " Configures MACSec with disable-sci and dot1q-in-clear\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface name\n            disable_sci ('boolean', 'Optional'): \n                disable sci for MACsec, default is True\n            dot1q_in_clear ('boolean', 'Optional' ): \n                Configure dot1q-in-clear on interface, default is False\n            tag_number('int', 'Optional'):\n                Specify the dot1q tag number(1 or 2), default is 1\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_disable_sci_dot1q_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L814"
    }
  },
  "configure_distribute_prefix_list_under_ospf": {
    "iosxe": {
      "doc": " Distribute prefix-list under ospf\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            prefix_list_name (`str`): ip prefix list name to be used\n            filter (`str`): filter option\n            ex:)\n                gateway  Filtering incoming updates based on gateway\n                in       Filter incoming routing updates\n                out      Filter outgoing routing updates\n            vrf (`str`,optional): ospf with vrf \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_distribute_prefix_list_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1769"
    }
  },
  "configure_dope_wrsp": {
    "iosxe": {
      "doc": " Configures wrsp parameters in dope shell\n        Args:\n            device (`obj`): Device object\n            asic ('int'): Asic number to be configured\n            core ('int'): Core number to be configured\n            idx ('int'): IDX number to be configured\n            hi_value ('str'): WRSP Nfl High GlobalTime value\n            lo_value ('str'): WRSP Nfl Low GlobalTime value\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dope_wrsp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L73"
    }
  },
  "configure_dot1x_cred_int": {
    "iosxe": {
      "doc": "Configure Dot1x credential on interface\n    Args:\n        device ('obj'): device to use\n        interface (`str`): Interface name\n        cred_profile_name (`str', optional): dot1x credential profile name\n        eap_profile (`str`, optional): eap profile name (Default is None)\n        auth_profile (`str`, optional): Auth profile name(Default is None)\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed to configure Dot1x credential on interface\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_cred_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1150"
    }
  },
  "configure_dot1x_cred_pki": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile with PKI\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): dot1x credential profile name\n            username (`str`): username for dot1x user\n            pki_trustpoint (`str`): PKI trustpoint name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure dot1x credential\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_cred_pki",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L919"
    }
  },
  "configure_dot1x_cred_profile": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): dot1x credential profile name\n            username (`str`): username for dot1x user\n            passwd (`str`): password in plain text\n            passwd_type('str',optional): password type (HIDDEN/UNENCRYPTED),defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure dot1x credential\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_cred_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L37"
    }
  },
  "configure_dot1x_pae": {
    "iosxe": {
      "doc": "Configure \n    dot1x pae {mode}\n\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n        mode ('str', optional): Mode to configure, defaults to 'both'\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring dot1x pae on interface\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_pae",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L947"
    }
  },
  "configure_dot1x_supplicant": {
    "iosxe": {
      "doc": "Configure switch as dot1x supplicant/client\n    Args:\n        device ('obj'): device to use\n        interface (`str`): Interface name\n        cred_profile_name (`str`,optional): dot1x credential profile name\n        eap_profile (`str`, optional): eap profile name (Default is None)\n        auth_port_control ('str',optional): Port control type (i.e auto, force-authorized)\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dot1x_supplicant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L130"
    }
  },
  "configure_downlink_interface": {
    "iosxe": {
      "doc": " configure downlink interface\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): list of Interface to be added to port channel\n            vlan_range (`str`): vlan range to be added\n            vlan1 (`str`): vlan to be added to the port\n            vlan2 (`str`): vlan to be added to the port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure downlink interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_downlink_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4128"
    }
  },
  "configure_dynamic_nat_interface_overload_route_map_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT interface overload route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            out_interface ('str'): Out interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT interface overload route-map rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_nat_interface_overload_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L394"
    }
  },
  "configure_dynamic_nat_outside_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT outside rule \n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): acl name\n            pool_name ('str'): pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT outside rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_nat_outside_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L874"
    }
  },
  "configure_dynamic_nat_pool_overload_route_map_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT pool overload route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            pool_name ('str'): Name of pool\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT pool overload route-map rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_nat_pool_overload_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L345"
    }
  },
  "configure_dynamic_nat_route_map_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            pool_name ('str'): Name of pool\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT route-map rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_nat_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L297"
    }
  },
  "configure_dynamic_nat_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT rule\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): Acl name\n            pool_name ('str'): Pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_nat_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L531"
    }
  },
  "configure_dynamic_path_in_tunnel": {
    "iosxe": {
      "doc": "configure dynamic path in tunnel\n\n        Args:\n            device (`obj`): Device object\n            tunnel (`str`): Tunnel name\n            path_option (`str`): Mention the path option\n            attribute_name (`str`): Attribute name to be set\n            lockdown(`Boolean`): set the lockdown if true\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_dynamic_path_in_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L825"
    }
  },
  "configure_eap_method": {
    "iosxe": {
      "doc": " configure EAP method\n\n        Args:\n            device ('obj'): Device object\n            server_config ('dict'): Dict object\n              dictionary contains following keys:\n                key_name_compliance ('bool'): eap Key-name (attr 102)\n                profile_word ('str'): specify a profile name (max 63 characters)\n                description ('str'): provide a description for the EAP profile\n                method ('str'): add an allowed method like gtc,fast,leap,md5,mschapv2,peap,tls\n                fast_profile_word ('str'): specify the method profile (max 63 characters)\n                pki_trustpoint ('str'): set the default pki trustpoint\n                exit_eap_profiles ('bool'): exit EAP profiles configuration submode\n        Returns:\n            None\n        Raises:\n           Failed configuring EAP method\n        Example:\n            server_config = {\n                     key_name_compliance = True,\n                     profile_word = \"word1\",\n                     description = \"des1\",\n                     method = \"grc\",\n                     fast_profile_word = \"w1\",\n                     pki_trustpoint = \"pki_word\",\n                     exit_eap_profiles = True,\n                     \n                    },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L12"
    }
  },
  "configure_eap_profile": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n            method ('str',optional). Method to use for eap authentication. Default is md5\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L68"
    }
  },
  "configure_eap_profile_md5": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eap_profile_md5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L109"
    }
  },
  "configure_eapol_dest_address_interface": {
    "iosxe": {
      "doc": " Configures EAPOL Destination Address on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be configured\n        dest_address ('str'): destination address to be configured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eapol_dest_address_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3003"
    }
  },
  "configure_eapol_eth_type_interface": {
    "iosxe": {
      "doc": " Configures EAPOL Ethernet Type on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be configured\n        eth_type ('str'): eth_type to be configured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eapol_eth_type_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3063"
    }
  },
  "configure_egress_interface": {
    "iosxe": {
      "doc": " configure egress interface\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): list of Interface to be added to port channel\n            native_vlan (`str`): native vlan Id to be added\n            vlan_range (`str`): vlan range to be added\n            vlan1 (`str`): vlan to be added to the port\n            vlan2 (`str`): vlan to be added to the port\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure egress interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_egress_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4208"
    }
  },
  "configure_eigrp_named_networks": {
    "iosxe": {
      "doc": " Configures eigrp on networks\n        Args:\n            device ('obj'): Device to use\n            name ('str'): EIGRP named mode name\n            autonomous_system ('str', optional): Autonomous system number valid if address_family is set. (Default is None)\n            ip_address ('list', optional): List of ip_address' to configure ( Default is None )\n            netmask ('str',optional): Netmask to use ( Default is None )\n            router_id ('str',optional): eigrp router id ( Default is None )\n            address_family ('str',optional): address family to configure ( Default is None )\n            vrf ('str', optional): vrf to configure ( Default is '' )\n            af_action ('str',optional): unicast or multicast (Default is '')\n            eigrp_router_id ('str', optional): Eigrp router ID in Ip address format (Default is None)\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eigrp_named_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L141"
    }
  },
  "configure_eigrp_named_networks_with_af_interface": {
    "iosxe": {
      "doc": " Configures eigrp on networks\n        Args:\n            device ('obj'): Device to use\n            name ('str'): EIGRP named mode name\n            autonomous_system ('str'): Autonomous system number\n            ip_address ('list', optional): List of ip_address' to configure ( Default is None )\n            netmask ('str',optional): Netmask to use ( Default is None )\n            router_id ('str',optional): eigrp router id ( Default is None )\n            address_family ('str',optional): address family to configure ( Default is None )\n            vrf ('str', optional): vrf to configure ( Default is '' )\n            af_action ('str',optional): unicast or multicast (Default is '')\n            af_interface('str'optional): interface name ( Default is None )\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eigrp_named_networks_with_af_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L291"
    }
  },
  "configure_eigrp_networks": {
    "iosxe": {
      "doc": " Configures eigrp on networks\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Process id for eigrp process\n            ip_address ('list'): List of ip_address' to configure\n            netmask ('str'): Netmask to use\n            router_id('str',optional): ospf router id\n            bfd ('str', optional) : bfd name, default value is None\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eigrp_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L6"
    }
  },
  "configure_eigrp_redistributed_connected": {
    "iosxe": {
      "doc": " configure redistribute connected under eigrp\n        Args:\n            device (`obj`): device to execute on\n            eigrp_process_id (`int`): process id of eigrp\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eigrp_redistributed_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L266"
    }
  },
  "configure_eigrp_router_configs": {
    "iosxe": {
      "doc": " Configures Eigrp Router configs\n        Args:\n            device ('obj'):     device to use\n            process_id ('str'): EIGRP process id\n            max_paths ('int', optional):  Number of paths. (Default is None)\n            auto_summary ('bool', optional): Set to True to Configure auto-summary. (Default is False)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eigrp_router_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L338"
    }
  },
  "configure_enable_aes_encryption": {
    "iosxe": {
      "doc": "\n        enables aes password encryption\n        Args:\n            device ('obj'): Device object\n            master_key ('str'): Master key(New key with minimum length of 8 chars)\n        Returns:\n            None\n        Raises:\n            SubCommandError\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_aes_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L284"
    }
  },
  "configure_enable_http_server": {
    "iosxe": {
      "doc": "Configure ip http server\n    Args:\n        device (obj): Device object\n    Returns:\n            None\n    Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_http_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1437"
    }
  },
  "configure_enable_nat_scale": {
    "iosxe": {
      "doc": " Configure enable NAT scale\n        Args:\n            device (`obj`): Device object\n            timeout ('int', optional): Max time for enable nat scale.Defaults to 60\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_nat_scale",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L498"
    }
  },
  "configure_enable_policy_password": {
    "iosxe": {
      "doc": " Configure enable password with policy\n    Args:\n        device (`obj`):                  Device object\n        password (`str`):                Password\n        policy_name (`str`, optional):   Policy name\n        password_type ('str', optional): Password type\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_policy_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L962"
    }
  },
  "configure_enable_secret_password": {
    "iosxe": {
      "doc": " Apply enable secret password for switch\n        Args:\n            device ('obj'): Device object\n            enable_secret('str'): password \n            ex.)             \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_enable_secret_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3164"
    }
  },
  "configure_encapsulation_mpls_ldp": {
    "iosxe": {
      "doc": " Configures encapsulation mpls ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the encapuslation\n                               config to be applied\n            neigbor (`str`): Neighbor id\n            vlan_id (`str`): vlan id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_encapsulation_mpls_ldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1722"
    }
  },
  "configure_errdisable": {
    "iosxe": {
      "doc": " \n    Configures errdisable recovery cause and errdisable recovery interval\n    e.g.\n    errdisable recovery cause loopdetect\n    errdisable recovery interval 60\n    Args:\n        device ('obj') : Device object\n        recovery_cause ('str'): error disable recovery cause\n        recovery_interval ('int'): errdisable recovery interval integer in seconds\n    Returns:\n        None\n    ",
      "module_name": "error_disable.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_errdisable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/error_disable/configure.py#L15"
    }
  },
  "configure_et_analytics": {
    "iosxe": {
      "doc": " Configure et-analytics\n        \n        Args:\n            device ('obj'): Device object\n            dest_ip ('str'): Destination IP\n            udp_port ('str'): UDP port\n        \n        Return:\n            None\n        \n        Raise:\n            SubCommandFailure: Failed configuring et-analytics\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L676"
    }
  },
  "configure_ethernet_vlan_unlimited": {
    "iosxe": {
      "doc": " Configure ethernet vlan unlimited on subslot\n        Args:\n            device ('obj'): device to use\n            subslot ('str'): subslot to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ethernet vlan unlimited\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ethernet_vlan_unlimited",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L492"
    }
  },
  "configure_eui_64_over_ipv6_enabled_interface": {
    "iosxe": {
      "doc": " Configures eui-64 over ipv6 enabled interface\n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            ipv6_address ('str') : ipv6 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_eui_64_over_ipv6_enabled_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6305"
    }
  },
  "configure_event_manager_applet": {
    "iosxe": {
      "doc": " Configures event manager applet\n        Args:\n            device ('obj'): device to use\n            event ('str'): event manager applet name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_event_manager_applet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3011"
    }
  },
  "configure_event_manager_applet_event_none": {
    "iosxe": {
      "doc": " Configures event none to specific event manager applet\n        Example: event manager applet test\n                event none\n\n        Args:\n            device ('obj'): device to use\n            applet_name ('str'): Name of the Event Manager applet\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_event_manager_applet_event_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2524"
    }
  },
  "configure_evpn_default_gateway_advertise_global": {
    "iosxe": {
      "doc": " Configure default-gateway advertise in l2vpn evpn globally\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_default_gateway_advertise_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L337"
    }
  },
  "configure_evpn_evi_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_evi_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L278"
    }
  },
  "configure_evpn_instance_encapsulation_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            encap_type ('str): encapsulation \n                               vxlan | mpls \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_instance_encapsulation_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L215"
    }
  },
  "configure_evpn_instance_vlan_based_with_reoriginate_rt5": {
    "iosxe": {
      "doc": " Configuring l2vpn evpn instance vlan based by re-originating RT-5\n        Args:\n            device (`obj`): Device object\n            instance (`int`): instance number\n        Returns:\n            console ouput ('str'): incase of successful configuration\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_instance_vlan_based_with_reoriginate_rt5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L14"
    }
  },
  "configure_evpn_l2_instance_vlan_association": {
    "iosxe": {
      "doc": " Configure configure VLAN association to EVPN instance\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            evpn_instance('int'): EVPN Instance id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_l2_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L387"
    }
  },
  "configure_evpn_l3_instance_vlan_association": {
    "iosxe": {
      "doc": " configure VLAN association to EVPN l3 vni instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            vni_id('int'): VNI id\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_l3_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L444"
    }
  },
  "configure_evpn_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn instance\n        Args:\n            device (`obj`): Device object\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_evpn_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L161"
    }
  },
  "configure_explicit_path": {
    "iosxe": {
      "doc": " configure te explicit path\n\n        Args:\n            device (`obj`): Device object\n            path_name (`str`): Name of the path\n            path (`list`): list of ip address to destination\n            path_type (`str`): Mention the path type\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_explicit_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L612"
    }
  },
  "configure_explicit_path_in_tunnel": {
    "iosxe": {
      "doc": " configure explicit path in tunnel\n\n        Args:\n            device (`obj`): Device object\n            tunnel (`str`): Tunnel name\n            path_name (`str`): Name of the explicit path\n            path_option (`str`): Mention the path option\n            attribute_name (`str`): Attribute name to be set\n            lockdown(`Boolean`): set the lockdown if true\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_explicit_path_in_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L758"
    }
  },
  "configure_filter_vlan_list": {
    "iosxe": {
      "doc": " Configuring vlan filter vlan-list\n        Args:\n            device ('obj'): device to use\n            vlan_access_name ('str'): name of vlan to access \n            vlan_id ('str'): vlan id for vlan list \n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_filter_vlan_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1520"
    }
  },
  "configure_fips_authorization_key": {
    "iosxe": {
      "doc": " Config fips authorization-key\n    Args:\n        device('obj'): Device object\n        value('str'): fips authorization-key value\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "fips.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fips_authorization_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fips/configure.py#L13"
    }
  },
  "configure_flow_monitor": {
    "iosxe": {
      "doc": " Config Flow Monitor on Device\n        Args:\n            device (`obj`): Device object\n            monitor_name (`str`): Flow Monitor name\n            exporter_name (`str`): Flow exporter name\n            record_name (`str`): Flow record name\n            timeout ('int'): Timeout\n            \n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring flow monitor\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L81"
    }
  },
  "configure_flow_monitor_cache_entry": {
    "iosxe": {
      "doc": " Config Flow Monitor with cache entry on Device\n        Args:\n            device (`obj`): Device object\n            monitor_name (`str`): Flow Monitor name\n            record_name (`str`): Flow record name\n            timeout ('int'): Timeout\n            cache_entries ('int'): Number of cache entries\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring flow monitor with cache entry \n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_monitor_cache_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L433"
    }
  },
  "configure_flow_monitor_vlan_configuration": {
    "iosxe": {
      "doc": " configure flow monitor under vlan configuration\n        Args:\n            device ('obj'):       Device object\n            vlan ('str'):         vlan to be added to the port\n            monitor_name ('str'): Name of the flow monitor to be configured\n            sampler_name ('str'): Name of the sampler to be configured\n            direction ('str'):    Direction to be configured(input/output)\n\n        Returns:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_monitor_vlan_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L445"
    }
  },
  "configure_flow_record": {
    "iosxe": {
      "doc": " Config Flow Record on Device\n        Args:\n            device (`obj`): Device object\n            record_name (`str`): Flow record name\n            match_ipv4_field_1 ('str'): First IPv4 field to be configured\n            match_flow_field ('str'): Flow field to be configured\n            match_int_field ('str'): Interface field to be configured\n            match_ipv4_field_2 ('str'): Second IPv4 field to be configured\n            match_transport_field_1 ('str'): First transport field to be configured\n            match_transport_field_2 ('str'): Second transport field to be configured\n            collect_counter_bytes ('bool'): Enable counter field bytes\n            collect_counter_packets ('bool'): Enable counter field packets\n            collect_int_field ('str'): Collect interface field to be configured\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring Flow Record on Device\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_flow_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L12"
    }
  },
  "configure_fnf_exporter": {
    "iosxe": {
      "doc": " Config Flow Exporter on Device \n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            dest_ip (`str`): Destination IP\n            source_int('str', Optional): Interface\n            udp_port (`str`): UDP port\n            timeout ('int', Optional): Timeout\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring fnf exporter\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L120"
    }
  },
  "configure_fnf_monitor_datalink_interface": {
    "iosxe": {
      "doc": " Config Datalink Fnf Monitor on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            monitor_name (`str`): Flow monitor name\n            sampler_name ('str'): Sampler name\n            direction ('str'): Direction of monitor (input/output)\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring interface datalink flow monitor with sampler\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_monitor_datalink_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L371"
    }
  },
  "configure_fnf_monitor_on_interface": {
    "iosxe": {
      "doc": " Config Fnf Monitor on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            monitor_name (`str`): Flow monitor name\n            direction ('str'): Direction of monitor (input/output)\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring interface with flow monitor\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L202"
    }
  },
  "configure_fnf_monitor_sampler_interface": {
    "iosxe": {
      "doc": " Config Fnf Monitor on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            monitor_name (`str`): Flow monitor name\n            sampler_name ('str'): Sampler name\n            direction ('str'): Direction of monitor (input/output)\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring interface flow monitor with sampler\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_monitor_sampler_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L341"
    }
  },
  "configure_fnf_record": {
    "iosxe": {
      "doc": " Config Flow Record on Device\n        Args:\n            device (`obj`): Device object\n            record_name (`str`): Flow record name\n            match_ipv4_field_1 ('str'): First IPv4 field to be configured\n            match_flow_field ('str'): Flow field to be configured\n            match_int_field ('str'): Interface field to be configured\n            match_ipv4_field_2 ('str'): Second IPv4 field to be configured\n            match_transport_field_1 ('str'): First transport field to be configured\n            match_transport_field_2 ('str'): Second transport field to be configured\n            collect_counter_bytes ('bool'): Enable counter field bytes\n            collect_counter_packets ('bool'): Enable counter field packets\n            collect_int_field ('str'): Collect interface field to be configured\n            datalink ('bool') : Configure datalink fields\n            collect_routing ('bool'): Configure routing attributes\n            datalink_type_1 ('str'): First Datalink Type to be configured\n            datalink_type_2 ('str'): Second datalink Type to be configure\n            datalink_subtype_1 ('str'): First datalink subtype to be configured\n            datalink_subtype_2 ('str'): Second datalink subtype to be configured\n            address_type ('str'): Address type to be configured\n            collect_timestamp ('bool'): Configure timestamp fields\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring Flow Record on Device\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_fnf_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L490"
    }
  },
  "configure_gdoi_group": {
    "iosxe": {
      "doc": " Configures Crypto Gdoi Group\n        Args:\n            device (`obj`): Device object\n            group_name ('str'): gdoi group name\n            ident_num ('str', optional): Identity number of  gdoi group\n            server_ipv4_address ('str', optional): Set ipv4 server address\n            server_local ('bool', optional): Configure server local.  Default is False\n            rekey_algo ('str', optional): Configure rekey algorithm\n            rekey_lifetime_sec ('str', optional): Configure rekey lifetime in seconds\n            rekey_retransmit ('str', optional): Configure rekey retransmit periodic\n            rekey_retransmit_number ('str', optional): Configure rekey retransmit number\n            rekey_auth_key ('str', optional): Configure authentication key\n            rekey_transport_unicast ('bool', optional): Configure rekey transport as unicast. Default is False\n            sa_ipsec_seq ('str',optional): Configure sa ipsec sequence number\n            sa_ipsec_profile ('str', optional): configure ipsec profile on gdoi group\n            sa_ipsec_match_ipv4 ('str', optional): Set ipv4 match address\n            sa_ipsec_match_ipv6 ('str', optional): Set ipv6 match address\n            sa_ipsec_replay ('bool', optional): Set to True if sa replay needs to configured. Default is False\n            sa_ipsec_replay_time ('str', optional): Set replay time window size\n            sa_ipsec_tag ('bool', optional): Set tag. Default is False\n            server_local_addr ('str', optional): Set server local address\n            server_local_redundancy ('bool', optional): Set redundancy in local server. Default is False\n            server_local_redundancy_local_prior ('str', optional): set local priority value for redundancy\n            server_local_redundancy_peer_addr ('str', optional): set peer address value for redundancy\n            server_local_identifier ('bool', optional): Configure identifier. Default is False\n            server_local_identifier_range ('str', optional): set server local identifier range\n            server_local_identifier_val ('str', optional): set server local identifier value\n        Returns:\n\t\t\tTrue/False\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_gdoi_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/configure.py#L18"
    }
  },
  "configure_global_dual_active_recovery_reload_disable": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual dual-active recovery reload on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            output: return the chunk of lines for the config of pagp as below..\n            # stackwise-virtual\n            # Please reload the switch for Stackwise Virtual configuration to take effect\n            # Upon reboot, the config will be part of running config but not part of start up config.\n            # dual-active recovery-reload-disable\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_global_dual_active_recovery_reload_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L176"
    }
  },
  "configure_global_stackwise_virtual": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            domain ('str'): Stackwise-virtual domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_global_stackwise_virtual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L12"
    }
  },
  "configure_host_ip_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure host Ip address SGT\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure host ip_address SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_host_ip_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L631"
    }
  },
  "configure_hqos_policer_map": {
    "iosxe": {
      "doc": " Configures HQos policy_map\n        Args:\n             device ('obj'): device to use\n             policy_name('str) : name of the policy name\n             class_map_name('str') : name of the class\n             policer_percent_val('int',optional): police rate value, default is None\n             table_map_name('str',optional): to set the table name for policy_map, default is None\n             table_map_mode('str',optional) : name of the tablemode,default is None\n             match_mode('list',optional): match mode name for cos, default is None\n             matched_value('list',optional): match mode values for cos traffic_class and dscp, default is None\n             child_policy('str',optional): name of child policy map,default is None\n             set_table_map('boolean'): to configure set table map for HQos, default is False\n\n        example:\n             policy_name:'policy1'\n             class_map_name:'class-default',\n             policer_percent_val:1,\n             table_map_name:'table1'\n             table_map_mode:'dscp'\n             match_mode:['dscp','cos']\n             matched_value:['cs1','5']\n             child_policy: 'child_policy_map'\n             set_table_map:False\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hqos_policer_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L102"
    }
  },
  "configure_hsrp_interface": {
    "iosxe": {
      "doc": " Configure hsrp on interface\n        Args:\n             device (`obj`): Device object\n             interface ('str'): Interface to configure hsrp\n             version (`int`): version number\n             ip_address ('str') : ip address\n             priority ('str', optional) : config custom priority to hsrp\n             preempt ('str', optional) : config custom preempt delay sync to hsrp\n             hello_interval ('str', optional) : config the hello time for hsrp session\n             hold_time ('str', optional) : config the hold time for hsrp session\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hsrp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4597"
    }
  },
  "configure_hsrp_version_on_interface": {
    "iosxe": {
      "doc": " Configure hsrp version on interface\n        Args:\n             device (`obj`): Device object\n             interface ('str'): Interface to configure hsrp\n             version (`int`): version number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hsrp_version_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6677"
    }
  },
  "configure_hw_module_breakout": {
    "iosxe": {
      "doc": " \n        Configures hw_module breakout\n        Args:\n             device ('obj'): device to use\n             breakout_number ('str'): breakout number\n             breakout_number_end_range ('str') : range end for breakout\n             switch_number('int') : switch number 1 or 2\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_module_breakout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L97"
    }
  },
  "configure_hw_module_slot_shutdown": {
    "iosxe": {
      "doc": " Shut hw-module slot {slot}\n        Args:\n            device (`obj`): Device object\n            slot (`int`): slot\n\n        Returns:\n            Shutdown Status\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hw_module.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_module_slot_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hw_module/configure.py#L36"
    }
  },
  "configure_hw_module_switch_number_usbflash": {
    "iosxe": {
      "doc": " configure_hw_module_switch_num_usbflash\n        Args:\n            device ('obj'): device to use\n            switch_number ('str'): switch number\n            password ('str'): password(atleast 8 character long)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_module_switch_number_usbflash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L106"
    }
  },
  "configure_hw_switch_logging_onboard": {
    "iosxe": {
      "doc": " Configures OBFL on the specified switch\n        Example : hw-switch switch 1 logging onboard \n\n        Args:\n            device ('obj'): device to use\n            switch ('int'): switch number (Range 1-16)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_switch_logging_onboard",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1354"
    }
  },
  "configure_hw_switch_switch_logging_onboard_environment": {
    "iosxe": {
      "doc": " configures hw-switch switch <#> logging onboard environment\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_switch_switch_logging_onboard_environment",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L977"
    }
  },
  "configure_hw_switch_switch_logging_onboard_temperature": {
    "iosxe": {
      "doc": " configures hw-switch switch <#> logging onboard temperature\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_switch_switch_logging_onboard_temperature",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1015"
    }
  },
  "configure_hw_switch_switch_logging_onboard_voltage": {
    "iosxe": {
      "doc": " configures hw-switch switch <#> logging onboard voltage\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_hw_switch_switch_logging_onboard_voltage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L938"
    }
  },
  "configure_icmp_ip_reachables": {
    "iosxe": {
      "doc": " Configures sending of ICMP unreachable messages for an interface\n        Example: ip unreachables\n\n        Args:\n            device ('obj'): device to configure on\n            interface ('str'): name of the interface (eg. Tel1/0/10)\n            line ('str'): Up to 230 characters describing the interface\n            ip_address ('str'): IP Address A.B.C.D (eg. 50.1.1.2)\n            ip_subnet ('str'): IP subnet mask A.B.C.D (eg. 255.255.0.0)\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "icmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_icmp_ip_reachables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/icmp/configure.py#L24"
    }
  },
  "configure_igmp_snooping_tcn_flood": {
    "iosxe": {
      "doc": "Configure IGMP snooping tcn flooding\n    Args:\n        device('obj'): Device object\n        interface('str'): interface in which tcn flooding needs to be enabled\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_igmp_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L242"
    }
  },
  "configure_igmp_version": {
    "iosxe": {
      "doc": "configures the IGMP version that the switch uses on interfaces.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): mentions interface name\n            version (`int`): specifies the IGMP version that the switch uses.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_igmp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L183"
    }
  },
  "configure_ikev2_authorization_policy": {
    "iosxe": {
      "doc": " Configures IKEV2 authorization policy\n        Args:\n            device (`obj`): Device object\n            policy_name ('str'): ikev2 authorization policy name\n            set_interface ('boolean'): knob to configure \"route set interface\"\n            interface ('str'): configuring interface in \"route set interface\"\n            ipv4_acl ('str'): configuring ipv4 acl in \"route set access-list\"\n            ipv6_acl ('str'): configuring ipv6 acl in \"route set access-list\"\n            local_prefix ('str'): setting local prefix\n            local_netmask ('str'): setting mask for local prefix\n            local_ipv6_prefix ('str'): setting local ipv6 prefix\n            local_ipv6_netmask ('str'): setting local ipv6 netmask\n            remote_prefix ('str'): setting remote prefix\n            remote_netmask ('str'): setting mask for remote prefix\n            remote_ipv6_prefix ('str'): setting remote ipv6 prefix\n            remote_ipv6_netmask ('str'): setting remote ipv6 netmask\n            dhcp_giaddr ('str'): configuring dhcp giaddr address\n            dhcp_server ('str'): configuring dhcp server address\n            dhcp_timeout ('int'): configuring dhcp timeout(4-30)\n            pool_name ('str'): dhcp pool name\n            ipsec_flow_limit ('str'): configuring ipsec flow limit\n            primary_dns ('str'): Primary DNS server IP\n            secondary_dns ('str'): Secondary DNS server IP\n            aaa_attribute ('str'): AAA attribute for connections\n            net_mask ('str'): subnet mask\n            pfs ('boolean'): Enabling Prefect forward secrecy\n            ipv6_dns ('str'): Configuring ipv6 DNS address\n            ipv6_pool ('str'): Configuring ipv6 pool name\n            ipv6_prefix_len ('int') : configuring ipv6 prefix length\n            lifetime ('int') : configuring session lifetime\n            config_url ('str'): Configuring http url for fetching configuration\n            config_version ('int'): Configuring configuration version\n            backup_gateway ('str'): Configuring backup gateway\n            default_domain ('str'): Configuring default domain name\n            split_dns ('str') : Configuring split dns domain name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_authorization_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L198"
    }
  },
  "configure_ikev2_cac": {
    "iosxe": {
      "doc": " Configures IKEV2 CAC\n        Args:\n            device (`obj`): Device object\n            in_nego ('int', optional): Maximum IKEv2 in negotiation sa, default is 0\n            sa ('int',optional): Maximum IKEv2 sa, default is 0\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_cac",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L751"
    }
  },
  "configure_ikev2_dpd": {
    "iosxe": {
      "doc": " Configures IKEV2 DPD\n        Args:\n            device (`obj`): Device object\n            interval ('int', optional): dpd interval, default is 10\n            retry ('int', optional): dpd retry, default is 2\n            dpd_query ('str'): dpd query, default is on-demand\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_dpd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L693"
    }
  },
  "configure_ikev2_fragmentation": {
    "iosxe": {
      "doc": " Configures IKEV2 Fragmentation\n        Args:\n            device (`obj`): Device object\n            mtu ('int'): IKEv2 MTU \n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_fragmentation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L724"
    }
  },
  "configure_ikev2_keyring": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            keyring_name ('str'): Name for the keyring\n            peer_name ('str'): peer name\n            peer_ip ('str',optional): peer ip addr\n            peer_mask ('str',optional): peer nw mask\n            key ('str',optional): preshared key\n            required ('boolean',optional): Required option for PPK\n            ppk_id ('str',optional): ppk id for manual ppk\n            ppk_key ('str',optional): Post-quantum preshared key\n            sks_client_config_block_name ('str',optional): SKS client config block name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L13"
    }
  },
  "configure_ikev2_policy": {
    "iosxe": {
      "doc": " Configures IKEV2 Policy\n        Args:\n            device (`obj`): Device object\n            policy_name ('str'): ikev2 policy name\n            proposal_name ('str'): ikev2 profile name\n            local_address ('str'): local device address\n            fvrf ('str'): fvrf name\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L159"
    }
  },
  "configure_ikev2_profile": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ikev2 profile name\n            remote_addr ('str'): peer/remote ip address\n            remote_auth ('str'): remote authentication method\n            local_auth ('str'): local authentication method\n            keyring ('str'): ikev2 keyring name\n            dpd_hello_time ('int'): DPD R-U-THERE interval\n            dpd_retry_time ('int'): DPD Retry Interval\n            dpd_query ('str'): DPD queires on-demand or periodic\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L71"
    }
  },
  "configure_ikev2_profile_advanced": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            profile_name ('str') : ikev2 profile name\n            remote_auth ('str') : Remote authentication method\n            local_auth ('str') : Local authentication method\n            keyring_aaa ('str') : Keyring name for AAA\n            keyring_local ('str') : Local keyring name\n            dpd_interval ('int') : DPD interval\n            dpd_retry ('int') : DPD retry times\n            dpd_query ('str') : DPD query type\n            auth_method ('str') : AAA Authentication method\n            aaa_list ('str') : AAA list name\n            override ('str') : Override user authorization with group authorization \n            auth_type ('str') : Authorization type, User or Group\n            cached ('boolean') : Caching User authorization True/False\n            anyconnect_prof_name ('str') : AnyConnect Profile Name\n            auth_eap_method ('str') : local EAP authentication method\n            auth_uname ('str') : username of local/Remote EAP and PSK authentication\n            auth_pwd_type('int') : Encryption type of password of Local/Remote authentication\n            auth_password('str') : Password for Local/Remote EAP and PSK authentication\n            double_auth ('Boolean') : Double authentication\n            eap_query ('Boolean') : EAP authentication EAP query identity\n            eap_timeout ('str') : EAP authentication timeout timer\n            conf_exch_accept ('Boolean') : Configuration Exchange accept True/False\n            conf_set_accept ('Boolean') : Configuration set accept True/False\n            conf_set_send ('Boolean') : Configuration set send True/False\n            id_local ('Boolean') : knob for local identity \n            id_local_addr ('str') : Identity local IP address \n            id_local_dn ('str') : Identity local distingushed name\n            id_local_email ('str') : Identity local email id\n            id_local_fqdn ('str') : Identity local Fully Qualified Domain name\n            id_local_key_id ('str') : Identity local key id\n            initial_contact ('Boolean') : Initial contact enable True/False\n            ivrf ('str') : IVRF name\n            lifetime ('int') : lifetime in seconds\n            match_address ('str') : Match remote peer IP address\n            match_cert_map ('str') : Match remote incoming certificate parameters using cert map\n            match_fvrf ('str') : Match remote fvrf \n            id_remote ('Boolean') : Knob for remote identity\n            id_remote_addr ('str') : Identity remote IP address \n            id_remote_any ('Boolean') : Match remote identity any\n            id_remote_email ('str') : Match remote identity email \n            id_remote_email_domain ('str') : Match remote identity email domain\n            id_remote_fqdn ('str') : Match remote identity Fully Qualified domain name\n            id_remote_fqdn_domain ('str') : Match remote identity FQDN domain name\n            id_remote_key_id ('str') : Match remote key id\n            nat_encap ('Boolean') : NAT encapsulation force\n            nat_keepalive ('int') : NAT keepalive interval \n            trustpoint ('str') : PKI trustpoint name\n            trustpoint_verify ('boolean') : Trustpoint to verify True/False\n            trustpoint_sign ('boolean') : Trustpoint to sign True/False\n            ppk_dynamic ('str') : PPK config dynamic label\n            ppk_manual ('str') : PPK config manual label\n            reconnect_timer ('int') : AnyConnect Reconnect timer \n            ikev2_redirect ('Boolean') : IKEv2 Redirect enable True/False\n            shutdown ('Boolean') : Shutdown ikev2 profile\n            vt_number ('int') : Vurtual Template number\n            vt_mode_auto ('Boolean') : Auto mode enable True/False\n            dynamic_enabled ('Boolean') : Dynamic authentication method\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_profile_advanced",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L366"
    }
  },
  "configure_ikev2_profile_pre_share": {
    "iosxe": {
      "doc": " Configure Ikev2 Profile with pre-share option\n        Args:\n            device ('obj')    : device to use\n            profile_name ('str)  Ikev2 Profile Name\n            auth_local ('str,optional). Authentication local (Default is pre-share)\n            auth_remote ('str',optional) Authentication (i.e esp-sha-hmac) (Default is pre-share)\n            keyring ('str',optional) Ikev2 Keyring name (needs to be pre-configured) (Default is None)\n            address ('str',optional) Matching address (i.e 100.0.0.2) (Default is None)\n            mask ('str',optional)  Address Mask (i.e 255.255.255.255 or 64) (Default is '')\n                Optional for IPv4, mandatory for IPv6\n            protocol ('str',optional) Protocol being used on address (Default is ipv4)\n            dpd_interval ('str',optional) DPD interval (Default None)\n            dpd_retry ('str',optional) DPD Retries (Default 2)\n            dpd_type ('str',optional) DPD type (ie periodic or on-demand) (Default periodic)\n            fvrf ('str',optional) FVRF name (Default None)\n            lifetime ('str',optional) lifetime in secs  (Default is None)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_profile_pre_share",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L514"
    }
  },
  "configure_ikev2_proposal": {
    "iosxe": {
      "doc": " Configures IKEV2 Proposal\n        Args:\n            device (`obj`): Device object\n            proposal_name ('str'): ikev2 proposal name\n            encr_algos ('str'): encryption algorithms\n            integrity_algos ('str'): integrity or authentication algorithms\n            dh_group ('str'): Diffie Hellman group\n            prf_algos ('str'): Psuedo random number function\n        Returns:\n            True/False\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ikev2_proposal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L118"
    }
  },
  "configure_inherit_peer_session": {
    "iosxe": {
      "doc": " configure inherit peer session under bgp\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            peer_policy('str')         : peer policy to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_inherit_peer_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L476"
    }
  },
  "configure_interface_VirtualPortGroup": {
    "iosxe": {
      "doc": " Configures interface VirtualPortGroup\n        Example : interface VirtualPortGroup 1\n\n        Args:\n            device ('obj'): device to use\n            number ('int'): VirtualPortGroup interface number (Range: 0-31)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_VirtualPortGroup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1577"
    }
  },
  "configure_interface_auth_vlan": {
    "iosxe": {
      "doc": " Configure authorize vlan on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            vlan ('int') : VLAN ID to be configured\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_auth_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6162"
    }
  },
  "configure_interface_auth_vlan_no_resp": {
    "iosxe": {
      "doc": " Configure authorize vlan for no response on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            vlan ('int') : VLAN ID to be configured\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_auth_vlan_no_resp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6240"
    }
  },
  "configure_interface_channel_group_auto_lacp": {
    "iosxe": {
      "doc": " Configure auto Enable LACP auto on this interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_channel_group_auto_lacp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5449"
    }
  },
  "configure_interface_default_snmp_trap_mac_notification_change": {
    "iosxe": {
      "doc": " configure interface default snmp trap mac-notification change \n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            change_option ('str'): change option added/removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_default_snmp_trap_mac_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7154"
    }
  },
  "configure_interface_description": {
    "iosxe": {
      "doc": "configure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description(`str`): Description\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1412"
    }
  },
  "configure_interface_directed_broadcast": {
    "iosxe": {
      "doc": " Configures directed-broadcast on interface\n\n        Args:\n            device ('obj'): device to run on\n            interfaces ('list'): list of interfaces to configure\n            configure ('bool'): config/unconfig\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_directed_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L942"
    }
  },
  "configure_interface_dot1x_eap_profile": {
    "iosxe": {
      "doc": " Configure DOT1x EAP supplicant profile configuration\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            profile_name ('name') : EAP supplicant profile name\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_dot1x_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6061"
    }
  },
  "configure_interface_dot1x_max_reauth_req": {
    "iosxe": {
      "doc": " Configure DOT1x Max No. of Reauthentication Attempts\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            reattempts ('int') : Max No. of Reauthentication Attempts\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_dot1x_max_reauth_req",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5973"
    }
  },
  "configure_interface_dot1x_max_req": {
    "iosxe": {
      "doc": " Configure DOT1x Max No. of Retries\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            retires ('int') : Max No. of Retries\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_dot1x_max_req",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5905"
    }
  },
  "configure_interface_dot1x_timeout_txp": {
    "iosxe": {
      "doc": " Configure DOT1x timeout for suppplicant retries\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            timeout ('int') : Timeout for supplicant retries\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_dot1x_timeout_txp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5838"
    }
  },
  "configure_interface_duplex": {
    "iosxe": {
      "doc": " Configure duplex operation on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            duplex_mode (`str`): duplex operation\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_duplex",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5050"
    }
  },
  "configure_interface_eigrp_v6": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')     device to use\n            interfaces ('list'). List of interfaces to configure\n            process_id ('str). EIGRP process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_eigrp_v6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L37"
    }
  },
  "configure_interface_flow_control": {
    "iosxe": {
      "doc": " Configure flow control receive on this interface\n    \n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        flow_control_option ('str') : flow control option to be configured\n            ex:)\n                desired  Allow but do not require flow-control packets on port\n                off      Disable flow-control packets on port\n                on       Enable flow-control packets on port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_flow_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7182"
    }
  },
  "configure_interface_for_authentication": {
    "iosxe": {
      "doc": "\n    Interface configuration for Dot1x\n    Args:\n        device(obj): Device object\n        config_list(list): List of configurations to configure\n        auth_type(str): Authentication method type(dot1x/mab)\n    Returns:\n        None if configuration is failed\n        config_list if configuration is succeded\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_authentication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1713"
    }
  },
  "configure_interface_for_dot1x": {
    "iosxe": {
      "doc": "\n    Interface configuration for Dot1x\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        order (str): Add an authentication method to the order list\n        priority (str): Add an authentication method to the priority list\n        port_control (str): Set the port-control value(auto, force-authorized, force-unauthorized)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'authentication open',\n            'authentication order dot1x,\n            'authentication priority dot1x,\n            'authentication port-control auto,\n            'dot1x pae authenticator'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'dot1x pae supplicant'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_dot1x",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1739"
    }
  },
  "configure_interface_for_mab": {
    "iosxe": {
      "doc": "\n    Interface configuration for Mac authentication bypass\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        order (str): Add an authentication method to the order list\n        priority (str): Add an authentication method to the priority list\n        port_control (str): Set the port-control value(auto, force-authorized, force-unauthorized)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'authentication open',\n            'authentication order mab,\n            'authentication priority mab,\n            'authentication port-control auto',\n            'dot1x pae authenticator',\n            'mab'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'dot1x pae supplicant'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_for_mab",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1790"
    }
  },
  "configure_interface_inherit_disable": {
    "iosxe": {
      "doc": " Configure access-session inherit disable\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            disable_option('str') : Select option to disable\n            ex:)\n                autoconf                   Auto Conf\n                interface-template-sticky  Interface Template Sticky\n                service-policy             Service Policy\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_inherit_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5615"
    }
  },
  "configure_interface_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1111"
    }
  },
  "configure_interface_ip_tcp_adjust_mss": {
    "iosxe": {
      "doc": " Configure ip tcp adjust-mss on interface \n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mss_size('int')   : Maximum segment size in bytes\n        Returns:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ip_tcp_adjust_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6730"
    }
  },
  "configure_interface_ip_verify_unicast_notification": {
    "iosxe": {
      "doc": " configure interface ip verify unicast notification threshold\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            threshold ('str') :  Urpf NOTIFY drop rate threshold\n            ex:)\n                <0-4294967295>  Drop rate in pps triggering notify - 0 is any drops\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ip_verify_unicast_notification",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6409"
    }
  },
  "configure_interface_ip_verify_unicast_reversepath": {
    "iosxe": {
      "doc": " configure interface ip verify unicast reverse-path\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            reversepath_option ('str') : Reverse path validation of source address\n            ex:)\n                <1-199>          IP access list (standard or extended)\n                <1300-2699>      IP expanded access list (standard or extended)\n                allow-self-ping  Allow router to ping itself (opens vulnerability in verification)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ip_verify_unicast_reversepath",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6381"
    }
  },
  "configure_interface_ip_verify_unicast_source": {
    "iosxe": {
      "doc": " configure interface ip verify unicast source\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            reachable_option ('str') : option for source reachability\n            ex:) \n                any  Source is reachable via any interface\n                rx   Source is reachable via interface on which packet was received\n            suboptions ('str') : sub commands\n            ex:)\n                <1-199>          IP access list (standard or extended)\n                <1300-2699>      IP expanded access list (standard or extended)\n                allow-default    Allow default route to match when checking source address\n                allow-self-ping  Allow router to ping itself (opens vulnerability in verification)\n                l2-src           Check packets arrive with correct L2 source address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ip_verify_unicast_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6108"
    }
  },
  "configure_interface_ipv6_acl": {
    "iosxe": {
      "doc": " \n    API for the CLI :- \n        interface {interface}\nipv6 access-list {acl_name}\npermit ipv6 any host {ipv6_address}\n        e.g.\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n            acl_name ('str'): name of the acl\n            ipv6_address('str'): ipv6 address\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ipv6_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1589"
    }
  },
  "configure_interface_ipv6_tcp_adjust_mss": {
    "iosxe": {
      "doc": " Configure ipv6 tcp adjust-mss on interface \n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mss_size('int')   : Maximum segment size in bytes\n        Returns:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ipv6_tcp_adjust_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6770"
    }
  },
  "configure_interface_ipv6_verify_unicast_reversepath": {
    "iosxe": {
      "doc": " configure interface ipv6 verify unicast reverse-path\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            reversepath_option ('str') : Reverse path validation of source address\n            ex:)\n                WORD  Access-list name\n                <cr>  <cr>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ipv6_verify_unicast_reversepath",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6433"
    }
  },
  "configure_interface_ipv6_verify_unicast_source": {
    "iosxe": {
      "doc": " configure interface ipv6 verify unicast source\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            reachable_option ('str') : option for source reachability\n            ex:) \n                any  Source is reachable via any interface\n                rx   Source is reachable via interface on which packet was received\n            suboptions ('str') : sub commands\n            ex:)\n                WORD           Access-list name\n                allow-default  Allow default route to match when checking source address\n                <cr>           <cr>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ipv6_verify_unicast_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6208"
    }
  },
  "configure_interface_l3_port_channel": {
    "iosxe": {
      "doc": " Configure Port channel and lag interfaces\n\n        Args:\n            target (`str`): Target device to configure on\n            port_channel (`str`): Port Channel Interface\n            neighbor_address (`str`): Peer IP address\n            neighbor_netmask(`str`): Peer address Net-mask\n            interfaces(`List`): List of interfaces to configure\n            testbed (`obj`): Testbed object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_l3_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L982"
    }
  },
  "configure_interface_lacp_fast_switchover": {
    "iosxe": {
      "doc": " configure interface lacp fast-switchover\n        Args:\n            device ('obj'): device to use\n            po_intf ('str'): name of the port-channel interface to be configured\n            dampening_time ('int', optional):  LACP Fast Switchover Hot-Standby Dampening Time in Seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_lacp_fast_switchover",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6986"
    }
  },
  "configure_interface_lacp_max_bundle": {
    "iosxe": {
      "doc": " configure interface lacp max-bundle\n        Args:\n            device ('obj'): device to use\n            po_intf ('str'): name of the port-channel interface to be configured\n            max_port ('int'): Max number of ports to bundle in this Port Channel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_lacp_max_bundle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7043"
    }
  },
  "configure_interface_logging_event": {
    "iosxe": {
      "doc": " Configures Interface Logging Event \n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            event_type ('str')   : loggint event type (i.e bundle-status, link-status,\n                                   nfas-status, power-inline-status, etc )\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_logging_event",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6506"
    }
  },
  "configure_interface_mac_address": {
    "iosxe": {
      "doc": " Configure static mac address on interface\n    Args:\n        device (`obj`): Device object\n        interface ('str'): Interface to configure\n        mac ('str'): Mac address with format H.H.H\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3123"
    }
  },
  "configure_interface_macro": {
    "iosxe": {
      "doc": " Apply macro on a interface for switch\n        Args:\n            device ('obj'): Device object\n            interface('str'):interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            macro_name ('str'): macro name\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_macro",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L532"
    }
  },
  "configure_interface_macro_auto_port_sticky": {
    "iosxe": {
      "doc": " Configure macro auto port sticky on this interface\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_macro_auto_port_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5517"
    }
  },
  "configure_interface_monitor_session": {
    "iosxe": {
      "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            monitor_config (`list`) : List of monitor session configuration\n                ex.)\n                    monitor_config = [{\n                            'session_name': 1,\n                            'session_type': 'erspan-source',\n                            'interface': 'GigabitEthernet10',\n                            'vlan_id' : '100',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1',\n                            'origin_ip_address': '192.168.1.2',\n                            'ipv6_address': '2001::2',\n                            'mtu': 1500,\n                            'vrf': 'red',\n                            'origin_ipv6_address': '2001::1'\n                        },\n                        {\n                            'session_name': 2,\n                            'session_type': 'erspan-destination',\n                            'interface': 'GigabitEthernet11',\n                            'erspan_id': 10,\n                            'ip_address': '192.168.1.1'\n                            'ipv6_address' : '2001::2'\n                        }\n                    ]\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1469"
    }
  },
  "configure_interface_network_policy": {
    "iosxe": {
      "doc": "\n    Configure Network Policy on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            profile ('int'): Network Policy profile number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_network_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L11"
    }
  },
  "configure_interface_no_switchport": {
    "iosxe": {
      "doc": " Configures no switchport on interface\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_no_switchport",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2607"
    }
  },
  "configure_interface_ospfv3": {
    "iosxe": {
      "doc": " Config OSPFV3 on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospf_pid (`str`): OspfV3 process id\n            area ('int'): Ospf area code\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2412"
    }
  },
  "configure_interface_passive": {
    "iosxr": {
      "doc": " Configure Interface passive\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_passive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L42"
    }
  },
  "configure_interface_path_selection_metric": {
    "iosxe": {
      "doc": " configure path selection metric for tunnel interface\n\n        Args:\n            device ('obj'): Device object\n            tunnel ('str'): Tunnel name\n            metric ('str'): Specify igp or te\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_path_selection_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1840"
    }
  },
  "configure_interface_pim": {
    "iosxe": {
      "doc": " Configure pim in interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            pim_mode (`str`): PIM mode (sparse-mode | sparse-dense-mode)\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L133"
    }
  },
  "configure_interface_point_to_point": {
    "iosxr": {
      "doc": " Configure Interface point to point\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_point_to_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L12"
    }
  },
  "configure_interface_port_channel": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            channel_number ('int') : channel number of interface range  <1-128> \n            mapping_number ('int') : mapping number \n            mapping_value ('int') : mapping value\n        Returns:\n            interface members\n        Raises:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L676"
    }
  },
  "configure_interface_pvlan_host_assoc": {
    "iosxe": {
      "doc": " Configures Interface Private Vlan Host Association\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            primary_vlan ('str'): Primary private vlan\n            sec_vlan ('str'): Secondary private vlan\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_pvlan_host_assoc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3238"
    }
  },
  "configure_interface_pvlan_mode_with_submode": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')            : device to use\n            interface ('str')         : interface to configure\n            primary_mode ('str')      : pvlan mode (i.e host or trunk)\n            sub_mode ('str')          : pvlan mode (i.e promiscuous)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_pvlan_mode_with_submode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3896"
    }
  },
  "configure_interface_reg_segment": {
    "iosxe": {
      "doc": " Config Reg segment on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            segment_no ('int'): rep segment number\n            edge('bool'): edge preferred. Default is False\n            preferred  ('bool'): neighbor preferred . Default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_reg_segment",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3717"
    }
  },
  "configure_interface_reg_segment_timer": {
    "iosxe": {
      "doc": " Config Reg segment timer on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            segment_timer ('int'): rep segment timer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_reg_segment_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3789"
    }
  },
  "configure_interface_service_policy": {
    "iosxe": {
      "doc": " Configure any service policy configured under interface\n\n         Args:\n             device (`obj`): Device object\n             interface (`str`): Interface to remove service policy from\n             policy_name ('str') : service policy name\n             direction (`dict`): direction of service policy\n\n         Returns:\n             None\n\n         Raises:\n             SubCommandFailure\n     ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4307"
    }
  },
  "configure_interface_snmp_trap_mac_notification_change": {
    "iosxe": {
      "doc": " configure interface snmp trap mac-notification change \n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            change_option ('str'): change option added/removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_snmp_trap_mac_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7098"
    }
  },
  "configure_interface_span_cost": {
    "iosxe": {
      "doc": " Configures Spanning Tree cost on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            cost ('int')      : cost to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure      \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_span_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5997"
    }
  },
  "configure_interface_span_portfast": {
    "iosxe": {
      "doc": " Configures Spanning Tree Portfast on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str',optional) : Options are disable/trunk. Default is '' (i.e no mode)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_span_portfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3188"
    }
  },
  "configure_interface_span_vlan_priority": {
    "iosxe": {
      "doc": " Configures Spanning Tree vlan priority on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            vlan ('int') : vlan to configure\n            priority ('int') : priority to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_span_vlan_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5884"
    }
  },
  "configure_interface_speed": {
    "iosxe": {
      "doc": " Configure speed on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            speed_mbps (`int`): speed mbps\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4994"
    }
  },
  "configure_interface_storm_control_action": {
    "iosxe": {
      "doc": " Config storm control action in\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            action ('str'): storm control action\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_storm_control_action",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3481"
    }
  },
  "configure_interface_storm_control_level": {
    "iosxe": {
      "doc": " Config storm control level in\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            sc_type('str'): storm control filter traffic type\n            sc_rising_threshold('float' or 'str'): storm control rising threshold\n            sc_falling_threshold('float' or 'str', optional): storm control falling threshold, default is None\n            sc_calc_type('str', optional): storm control suppression level type, default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_storm_control_level",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3409"
    }
  },
  "configure_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Configures switchport on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan ('str'): access_vlan to configure\n            mode ('str',optional) Switchport mode (i.e access)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L879"
    }
  },
  "configure_interface_switchport_block_address": {
    "iosxe": {
      "doc": " Configures Interface Switchport block \n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            address_type ('str') : address type to block (i.e multicast or unicast)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_block_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6460"
    }
  },
  "configure_interface_switchport_dot1q_ethertype": {
    "iosxe": {
      "doc": " Configures switchport on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            ethervalue ('str'): Configure ethertype\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_dot1q_ethertype",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6620"
    }
  },
  "configure_interface_switchport_mode": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str')      : interface mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2578"
    }
  },
  "configure_interface_switchport_port_security_violation": {
    "iosxe": {
      "doc": " Configure switchport port-security violation\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            violation_type('str') : Select violation type\n            ex:)\n                 protect   Security violation protect mode\n                 report    Security violation report only mode\n                 restrict  Security violation restrict mode\n                shutdown  Security violation shutdown mode\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_port_security_violation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5786"
    }
  },
  "configure_interface_switchport_pvlan_and_native_vlan": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str')      : pvlan mode (i.e trunk or association)\n\t    vlan_id ('int')   : VLAN ID of the native VLAN\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_pvlan_and_native_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3923"
    }
  },
  "configure_interface_switchport_pvlan_association": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')    \t\t\t: device to use\n            interface ('str') \t\t\t: interface to configure\n            mode ('str')      \t\t\t: pvlan mode (i.e trunk or association)\n\t    primary_vlan_id ('int') \t        : Primary VLAN ID of the native VLAN\n\t    secondary_vlan_id ('int')   \t: Secondary VLAN ID of the native VLAN\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_pvlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3950"
    }
  },
  "configure_interface_switchport_pvlan_mapping": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')    \t\t\t: device to use\n            interface ('str') \t\t\t: interface to configure\n            mode ('str')      \t\t\t: pvlan mode (i.e trunk or association)\n\t    primary_vlan_id ('int') \t        : Primary VLAN ID of the native VLAN\n\t    secondary_vlan_id ('int')\t        : Secondary VLAN ID of the native VLAN\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_pvlan_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3978"
    }
  },
  "configure_interface_switchport_pvlan_mode": {
    "iosxe": {
      "doc": " Configures Private Vlan Switchport mode\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            mode ('str')      : pvlan mode (i.e host or promiscuous)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_pvlan_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3210"
    }
  },
  "configure_interface_switchport_trunk": {
    "iosxe": {
      "doc": " configure switchport mode trunk to the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`list`): list of Interface to be added to port channel\n            vlan (`str`): vlan to be added to the port\n            oper (`str`): \"default(None) Vlan operation to be added\"\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_trunk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1203"
    }
  },
  "configure_interface_switchport_trunk_vlan": {
    "iosxe": {
      "doc": " Configures switchport trunk on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            trunk_mode('str'): trunk mode to configure\n            vlan ('str'): trunk_vlan to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_trunk_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2755"
    }
  },
  "configure_interface_switchport_voice_vlan": {
    "iosxe": {
      "doc": " Configures switchport on interface\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to configure\n        vlan ('str'): voice_vlan to configure\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_switchport_voice_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2729"
    }
  },
  "configure_interface_template": {
    "iosxe": {
      "doc": " Configure Template on a list of interfaces\n    interface GigabitEthernet1/0/1\n      source template sample-template\n\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Template name\n        interface_list ('list'): List of Interface names - can directly pass in device.interfaces from testbed yaml\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2665"
    }
  },
  "configure_interface_template_sticky": {
    "iosxe": {
      "doc": " configure interface-template sticky\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            timer ('int', optional): <1-65535>  Enter a value between 1 and 65535\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5557"
    }
  },
  "configure_interface_template_with_default_device_tracking_policy": {
    "iosxe": {
      "doc": " configure interface template with default device-tracking policy\n    Args:\n        device ('obj'): device object\n        template_name ('str'): template_name name,\n        vlan ('str', optional): vlan id\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure default device-tracking policy on template\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template_with_default_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2398"
    }
  },
  "configure_interface_template_with_default_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " configure interface template with default ipv6 dhcp guard policy\n    Args:\n        device ('obj'): device object\n        template_name ('str'): template_name name,\n        vlan ('str', optional): vlan id\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure default ipv6 dhcp guard policy on template\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template_with_default_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2424"
    }
  },
  "configure_interface_template_with_default_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " configure interface template with default ipv6 nd raguard policy\n    Args:\n        device ('obj'): device object\n        template_name ('str'): template_name name,\n        vlan ('str', optional): vlan id\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure default ipv6 nd raguard policy on template\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_template_with_default_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2372"
    }
  },
  "configure_interface_tunnel_hub": {
    "iosxe": {
      "doc": " Configures interface Tunnel[number] hub\n        Args:\n            device ('obj'): Device object\n            tunnel_intf ('str'): tunnel interface\n            tunnel_ip ('str'): tunnel ip address\n            tunnel_mask ('str'): tunnel mask\n            tunnel_src ('str'): tunnel source \n            ipsec_profile_name ('str',optional): IPSEC profile name\n            authentication_string ('str',optional): Authentication string \n            network_id ('int',optional): Network Identifier\n            holdtimer ('int',optional): Number of seconds with respect to HoldTimer\n            tunnel_key_id ('int',optional) : Tunnel key used \n            ip_redirects ('boolean',optional): Setting ip redirects.Defaults to False.\n            gre_multipoint ('boolean',optional) : Setting gre_multipoint in case \"gre multipoint\" option is chosen.Defaults to False.\n            ipsec ('boolean',optional) : Setting ipsec in case \"ipsec\" option is chosen.Defaults to False.\n            dual_overlay ('boolean',optional) : Setting dual_overlay for tunnel mode ipsec dual-overlay option.Defaults to False.\n            type ('str',optional) : Type of IP address [Ipv4 or Ipv6]\n            ipv6_enable ('boolean',optional) : Setting ipv6 enable.Defaults to False.\n            vrf_forwarding ('str',optional) : Configured VRF name to be entered.\n            tunnel_vrf ('str',optional): Configured VRF table name to be entered.\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dmvpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_tunnel_hub",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dmvpn/configure.py#L14"
    }
  },
  "configure_interface_tunnel_key": {
    "iosxe": {
      "doc": " Configure tunnel key on a tunnel interface\n        Args:\n            device ('obj'): Device object\n            tunnel_intf ('str'): tunnel interface\n            key ('int'): tunnel key to configure\n        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dmvpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_tunnel_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dmvpn/configure.py#L227"
    }
  },
  "configure_interface_tunnel_spoke": {
    "iosxe": {
      "doc": " Configures interface Tunnel spoke\n        Args:\n            device ('obj'): Device object\n            tunnel_intf ('str'): tunnel interface\n            tunnel_ip ('str'): tunnel ip address\n            tunnel_mask ('str'): tunnel mask\n            tunnel_src ('str'): tunnel source \n            ipsec_profile_name ('str',optional): IPSEC profile name\n            authentication_string ('str',optional): Authentication string \n            network_id ('int',optional): Network Identifier\n            holdtimer ('int',optional): Number of seconds with respect to HoldTimer\n            tunnel_key_id ('int',optional) : Tunnel key used\n            next_hop_server_ip ('str',optional) : Protocol IP address of NHS\n            nbma_ip_address ('str',optional) : NBMA IP address\n            ipv6_enable ('boolean',optional) : setting ipv6 enable.Defaults to False.\n            tunnel_destination ('str',optional) : Tunnel destination IP address\n            gre_multipoint ('boolean',optional) : setting gre_multipoint in case \"gre multipoint\" option is chosen.Defaults to False.\n            ipsec ('boolean',optional) : setting ipsec in case \"ipsec\" option is  chosen.Defaults to False.\n            dual_overlay ('boolean',optional) : setting dual_overlay for tunnel mode ipsec dual-overlay option.Defaults to False.\n            type ('str',optional) : Type of IP address [Ipv4 or Ipv6]\n            ip_redirects ('boolean',optional): setting ip redirects .Defaults to False.\n            vrf_forwarding ('str',optional) : Configured VRF name to be entered.\n            tunnel_vrf ('str',optional): Configured VRF table name to be entered.\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dmvpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_tunnel_spoke",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dmvpn/configure.py#L113"
    }
  },
  "configure_interface_udld_port": {
    "iosxe": {
      "doc": " Configures Interface UDLD Port \n        Args:\n            device ('obj')                       : device to use\n            interface ('str')                    : interface to configure\n            aggressive_mode ('boolean',optional) : Enable udld protocol in aggressive mode (Default False)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_udld_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L51"
    }
  },
  "configure_interface_virtual_template": {
    "iosxe": {
      "doc": " Configures interface Virtual-Template\n        Args:       \n            device ('obj'): Device object\n            virtual_template_interface_number ('int'): Interface number of the Virtual Template \n            vt_type ('str') : Set Virtual Template type \n            interface_type ('str') : Set Interface type\n            interface_number ('int') : Set Interface Number\n            source_interface_type ('str',optional) : Interface type of Tunnel Source \n            source_interface_number ('int',optional) : Interface number of Tunnel Source\n            ipsec_profile_name ('str',optional): IPSEC profile name\n            type ('str',optional) : Type of IP address [Ipv4 or Ipv6]            \n            dual_overlay ('boolean',optional) : Setting dual_overlay for tunnel mode ipsec dual-overlay option.Defaults to False.\n            network_id  ('int',optional): Network Identifier\n            nhrp_redirect ('boolean',optional): Setting ip redirects. Defaults to False. \n            ipv6_enable ('boolean',optional) : Setting ipv6 enable .Defaults to False.\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "flexvpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_virtual_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flexvpn/configure.py#L13"
    }
  },
  "configure_interface_vlan_standby_ip": {
    "iosxe": {
      "doc": " Configures vlan interface standby group IP\n        Example: standby 0 ip 10.1.0.3\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n        ip_address ('str'): Virtual IP address\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_vlan_standby_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L11"
    }
  },
  "configure_interface_vlan_standby_preempt": {
    "iosxe": {
      "doc": " Configures vlan interface standby preempt\n        Example: standby 0 preempt\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_vlan_standby_preempt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L119"
    }
  },
  "configure_interface_vlan_standby_timers": {
    "iosxe": {
      "doc": " Configures vlan interface standby timers\n        Example: standby 0 timers 1 4\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n        interval ('int'): Hello interval in seconds (Rang 1-254)\n        hold_time ('int'): Hold time in seconds (Range 2-255)\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_vlan_standby_timers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L65"
    }
  },
  "configure_interface_vtp": {
    "iosxe": {
      "doc": "Configure vtp on a interface\n    \n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP on interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interface_vtp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L592"
    }
  },
  "configure_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            mode (`str`): Interface mode under Port channel\n            interfaces(`List`): List of interfaces to configure\n            channel_group (`obj`): Channel group\n            channel_protocol (`str`): protocol used for port-channel\n            disable_switchport('str'): disable switchport\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1158"
    }
  },
  "configure_interfaces_shutdown": {
    "ios": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L9"
    },
    "iosxe": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1042"
    },
    "iosxr": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L72"
    },
    "nxos": {
      "doc": " Shutdown the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to shutdown\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L9"
    }
  },
  "configure_interfaces_unshutdown": {
    "ios": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/configure.py#L24"
    },
    "iosxe": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1065"
    },
    "iosxr": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/configure.py#L87"
    },
    "nxos": {
      "doc": " Enable the listed interfaces in the given list on the device\n\n        Args:\n            List['string']: Interfaces to enable\n            device ('obj'): Device object\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_interfaces_unshutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/configure.py#L24"
    }
  },
  "configure_ip_access_group_in_out": {
    "iosxe": {
      "doc": " Enable ip access_group IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of the ACL\n            acl_direction ('str'): in or out direction of the acl\n            interface ('str'): enable ip access_group {aclname}in/out on this interface\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: ip access_group IN OUT not enabled over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_access_group_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1589"
    }
  },
  "configure_ip_arp_inspection_validateip": {
    "iosxe": {
      "doc": " Config ip arp inspection validate ip  on device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_arp_inspection_validateip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L191"
    }
  },
  "configure_ip_arp_inspection_vlan": {
    "iosxe": {
      "doc": " Config ip arp inspection vlan on device\n        Args:\n            device ('obj'): Device object\n            vlan  ('int'): vlan id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_arp_inspection_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L138"
    }
  },
  "configure_ip_dhcp_client": {
    "iosxe": {
      "doc": " Configure ip dhcp client on device\n        Args:\n            device (`obj`): Device object\n            dhcp_client_type (`str`): DHCP client type (i.e broadcast-flag, default-router, forcerenew, network-discovery, update)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : ip dhcp client is not configured\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L436"
    }
  },
  "configure_ip_dhcp_client_vendor_class": {
    "iosxe": {
      "doc": " Configure IP DHCP Client Vendor-class on interface:\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to configure\n            type('str'): vendor-class type (i.e. mac-address, ascii, hex, disable)\n            string('str', optional): The value string when type set to ascii or hex\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ip dhcp vendor-class\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_client_vendor_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L492"
    }
  },
  "configure_ip_dhcp_pool": {
    "iosxe": {
      "doc": "Configures dhcp pool on device\n       Example: ip dhcp pool POOL_88\n\n       Args:\n            device ('obj'): device object\n            name ('str'): name of the pool (eg. POOL_88, testpool)\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L818"
    }
  },
  "configure_ip_dhcp_pool_host": {
    "iosxe": {
      "doc": " Configure DHCP host pool \n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be configured\n            host ('str'): IP and subnet mask of the DHCP client\n            client_identifier ('str'): Unique identifier for client\n            hardware_address ('str'): Hardware address of the client\n            client_name ('str'): Name of the client\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure dhcp host pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_pool_host",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L968"
    }
  },
  "configure_ip_dhcp_snooping": {
    "iosxe": {
      "doc": " Configures ip dhcp snooping vlan {vlan_range}\n    Args:\n        device ('obj'): device to use\n        vlan_range ('str'): vlan range from (1-4096), example: 1,3-5,7,9-11\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure ip dhcp snooping vlan {vlan_range}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L310"
    }
  },
  "configure_ip_dhcp_snooping_database": {
    "iosxe": {
      "doc": " Configuring ip dhcp snooping database \n        Args:\n            device ('obj'): device to use\n            image ('str',optional): image to use ,defaut is empty string\n            write_delay ('bool',optional): True or False ,default is False\n            delay_time ('int',optional): delay time ,default is 10\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ip dhcp snooping database\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_snooping_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L303"
    }
  },
  "configure_ip_dhcp_snooping_information_option": {
    "iosxe": {
      "doc": "Configures dhcp snooping information option on device\n       Example: ip dhcp snooping information option\n\n       Args:\n            device ('obj'): device object\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_snooping_information_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L776"
    }
  },
  "configure_ip_dhcp_snooping_information_option_allow_untrusted": {
    "iosxe": {
      "doc": "configure ip dhcp snooping information option allow-untrusted on device\n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring dhcp snooping information option allow-untrusted on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_dhcp_snooping_information_option_allow_untrusted",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L728"
    }
  },
  "configure_ip_domain_lookup": {
    "iosxe": {
      "doc": " Enable domain lookup \n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian configuration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_domain_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L12"
    }
  },
  "configure_ip_domain_name": {
    "iosxe": {
      "doc": " Configure ip domain name \n    Args:\n        device ('obj'): device to use\n        name ('str'): domain name\n        Returns:    \n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_domain_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2783"
    }
  },
  "configure_ip_domain_name_vrf_mgmt_vrf": {
    "iosxe": {
      "doc": " Configure ip domain name vrf mgmt-vrf \n    Args:\n        device ('obj'): device to use\n        name ('str'): domain name\n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_domain_name_vrf_mgmt_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2801"
    }
  },
  "configure_ip_domain_timeout": {
    "iosxe": {
      "doc": " Configures the IP domain timeout\n        Example : ip domain timeout 2000\n\n        Args:\n            device ('obj'): device to use\n            time ('int'): Timeout value in seconds (Range 1-3600)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_domain_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L111"
    }
  },
  "configure_ip_http_authentication_local": {
    "iosxe": {
      "doc": " Configures ip http authentication local\n        Example : ip http authentication local\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_http_authentication_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L172"
    }
  },
  "configure_ip_http_client_source_interface": {
    "iosxe": {
      "doc": " Configure ip http client source-interface \n    Args:\n        device ('obj'): device to use\n        interface_id ('str'): vlan id \n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_http_client_source_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2893"
    }
  },
  "configure_ip_http_client_source_interface_vlan_domain_lookup": {
    "iosxe": {
      "doc": " Configure ip http client source-interface vlan domain lookup\n    Args:\n        device ('obj'): device to use\n        vlan_id ('str'): vlan id \n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_http_client_source_interface_vlan_domain_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2836"
    }
  },
  "configure_ip_http_client_source_interface_vlan_domain_lookup_name_server_vrf_mgmt_vrf": {
    "iosxe": {
      "doc": " Configure ip http client source-interface vlan domain lookup\n    Args:\n        device ('obj'): device to use\n        interface_id ('str'): interface id \n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_http_client_source_interface_vlan_domain_lookup_name_server_vrf_mgmt_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2872"
    }
  },
  "configure_ip_http_secure_server": {
    "iosxe": {
      "doc": " Configures ip http secure-server\n        Example : ip http secure-server\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_http_secure_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L212"
    }
  },
  "configure_ip_igmp_access_group": {
    "iosxe": {
      "doc": " Configure ip igmp access_group\n    Args:\n        device ('obj'): Device object\n        interface ('int'): interface to configure\n        acl_name ('int'): acl name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_access_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1312"
    }
  },
  "configure_ip_igmp_join_group": {
    "iosxe": {
      "doc": " Configures ip igmp join-group to an vlan interface\n        Example : ip igmp join-group 239.100.100.101 source 4.4.4.4\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface or Vlan number (Eg. ten1/0/1 or vlan 10)\n            group_address ('str'): IP group addres\n            source_address ('str', optional): IP source address\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_join_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1141"
    }
  },
  "configure_ip_igmp_snooping": {
    "iosxe": {
      "doc": "UnConfigure IGMP snooping \n        Example : ip igmp snooping \n\n    Args:\n        device('obj'): Device object\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure : Could not configure ip igmp snooping\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L152"
    }
  },
  "configure_ip_igmp_snooping_last_member_query_interval": {
    "iosxe": {
      "doc": " Configures the IGMP last-member query interval on an interface\n        Example : ip igmp snooping last-member-query-interval 1500\n        \n        Args:\n            device ('obj'): device to use\n            time ('int'): interval, in milliseconds, at which host query messages are sent (100-25500)\n        \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_last_member_query_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L721"
    }
  },
  "configure_ip_igmp_snooping_querier": {
    "iosxe": {
      "doc": "Configure IGMP snooping querier \n    \n    Args:\n        device('obj'): Device object\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L10"
    }
  },
  "configure_ip_igmp_snooping_tcn_flood": {
    "iosxe": {
      "doc": " Configures flood query count to IGMP snooping TCN behavior\n        Example : ip igmp snooping tcn flood query count 3\n\n        Args:\n            device ('obj'): device to use\n            query_count ('int'): number of multicast traffic queries (1-10)\n        \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L661"
    }
  },
  "configure_ip_igmp_snooping_vlan_mrouter_interface": {
    "iosxe": {
      "doc": " Configure ip igmp snooping vlan mrouter interface \n    Args:\n        device (`obj`): Device object\n        vlan_id ('int'): vlan id \n        interfac_id ('str'): interface id \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_mrouter_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1040"
    }
  },
  "configure_ip_igmp_snooping_vlan_mrouter_learn_pim_dvmrp": {
    "iosxe": {
      "doc": " Configure ip igmp snooping vlan mrouter learn pim-dvmrp \n    Args:\n        device (`obj`): Device object\n        vlan_id ('int'): vlan id \n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_mrouter_learn_pim_dvmrp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1097"
    }
  },
  "configure_ip_igmp_snooping_vlan_querier": {
    "iosxe": {
      "doc": "Configure IGMP snooping vlanquerier configuration\n    Example : ip igmp snooping vlan 200 querier address 12.1.1.1\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        querier_ip('str'): querier IP address\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L54"
    }
  },
  "configure_ip_igmp_snooping_vlan_query_version": {
    "iosxe": {
      "doc": "Configure IGMP snooping vlan querier version configuration\n        Example : ip igmp snooping vlan 200 querier version 3\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        version_num('int'): IP IGMP version number\n\n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_query_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L103"
    }
  },
  "configure_ip_igmp_snooping_vlan_static": {
    "iosxe": {
      "doc": "\n    Configure IGMP snooping vlan static configuration\n    Example : ip igmp snooping vlan 200 static 225.0.0.100 interface gig 1/0/1\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        group_ip('str'): group ip address\n        interface('str'): interface name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L279"
    }
  },
  "configure_ip_igmp_snooping_vlan_static_ipaddr_interface": {
    "iosxe": {
      "doc": " Configure ip igmp snooping vlan static ipaddr interface \n    Args:\n        device (`obj`): Device object\n        vlan_id ('int'): vlan id \n        ip_add ('str'):  ip address\n        interface_name ('str'): the name of interface \n        port ('int'): port number\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_static_ipaddr_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1076"
    }
  },
  "configure_ip_igmp_snooping_vlan_vlanid": {
    "iosxe": {
      "doc": "Configure IGMP snooping vlan configuration\n        Example : ip igmp snooping vlan 200\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_snooping_vlan_vlanid",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L198"
    }
  },
  "configure_ip_igmp_ssm_map": {
    "iosxe": {
      "doc": " Configures ip igmp ssm-map\n        Example : ip igmp ssm-map enable\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_ssm_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1188"
    }
  },
  "configure_ip_igmp_ssm_map_enable": {
    "iosxe": {
      "doc": " Configure ip igmp ssm-map enable \n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_ssm_map_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1023"
    }
  },
  "configure_ip_igmp_ssm_map_query_dns": {
    "iosxe": {
      "doc": " Configures ip igmp ssm-map query dns\n        Example : ip igmp ssm-map query dns\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_ssm_map_query_dns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1224"
    }
  },
  "configure_ip_igmp_ssmmap_static": {
    "iosxe": {
      "doc": " Configure ip igmp ssm-map static\n    Args:\n        device ('obj'): Device object\n        acl_name ('int'): acl name\n        source_address ('str'): ssm source address\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_ssmmap_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1169"
    }
  },
  "configure_ip_igmp_static_group": {
    "iosxe": {
      "doc": " Configures ip igmp static-group to an interface\n        Example : ip igmp static-group 239.100.100.101\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface or Vlan number (Eg. ten1/0/1 or vlan 10)\n            group_address ('str'): IP group address\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_igmp_static_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1116"
    }
  },
  "configure_ip_local_pool": {
    "iosxe": {
      "doc": " ip local pool\n        Args:\n            device (`obj`): Device object\n            name ('str') : pool name\n            start ('str') : pool start ip\n            end ('str') : pool end ip\n        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_local_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L50"
    }
  },
  "configure_ip_mtu": {
    "iosxe": {
      "doc": " Configuring ip mtu on  device\n\n        Args:\n            device ('str'): Device str\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2900"
    }
  },
  "configure_ip_multicast_routing": {
    "iosxe": {
      "doc": " configure ip multicast routing on device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L14"
    }
  },
  "configure_ip_multicast_vrf_routing": {
    "iosxe": {
      "doc": " configure ip multicast routing vrf on device\n        Example : \n\n        Args:\n            device (`obj`): Device object\n            vrf_name('str'): name of the vrf \n        Returns:\n            None\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_multicast_vrf_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L48"
    }
  },
  "configure_ip_name_server": {
    "iosxe": {
      "doc": " Enable ip name server \n        Args:\n            device ('obj'): device to use\n            domain_ip ('str'): dns server ip or proxy server ip.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian configuration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_name_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L56"
    }
  },
  "configure_ip_name_server_vrf": {
    "iosxe": {
      "doc": " Configure ip name-server vrf \n    Args:\n        device ('obj'): device to use\n        name ('str'): domain name\n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_name_server_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2819"
    }
  },
  "configure_ip_on_tunnel_interface": {
    "iosxe": {
      "doc": " Configure tunnel interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`,optional): IPv4 addressed to be configured on interface\n            mask (`str`,optional): IPv4 Mask address to be used in configuration\n            tunnel_source (`str`): tunnel source address\n            tunnel_destination (`str`): tunnel destination address\n            keepalive_timer ('int',optional): tunnel keepalive timer,default value is 10\n            ip_mtu ('str',optional): tunnel mtu, default value is None\n            ipv6_address (`str`,optional): IPv6 address with subnet mask,default value is None\n            v6_mask ('str',optional): IPv6 mask (Default None)\n            mode ('str',optional): Tunnel mode. Default is gre\n            tunnel_protection ('str',optional): Protection type (i.e ipsec,dike)\n            profile ('str',optional): Tunnel protection profile name\n            in_vrf ('str',optional): client vrf for  the tunnel\n            out_vrf ('str',optional): wan vrf for  the tunnel\n            acl_name('str',optional): acl policy applied on tunnel inetrface            \n            tunnel_protocol ('str',optional): Protocol type (i.e ipv4)\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_on_tunnel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2785"
    }
  },
  "configure_ip_ospf_mtu_ignore": {
    "iosxe": {
      "doc": "configure ip ospf mtu-ignore\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_ospf_mtu_ignore",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1432"
    }
  },
  "configure_ip_pim_bsr_candidate": {
    "iosxe": {
      "doc": " Configure ip pim bsr-candidate on interface <interface>\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface details on which we config\n            mask_length('int'): Hash Mask length for RP selection\n        Returns:\n            None\n        Raises: \n            SubCommandFailure : Failed to configure ip pim bsr-candidate on interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_bsr_candidate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L615"
    }
  },
  "configure_ip_pim_enable_bidir_enable": {
    "iosxe": {
      "doc": " configure ip pim bidir\n        Example : ip pim bidir-enable\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_enable_bidir_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1351"
    }
  },
  "configure_ip_pim_rp_address": {
    "iosxe": {
      "doc": "Configures a IP pim address group range\n\n    Args:\n        device ('obj'): Device object\n        ip_address ('str'): IP address\n        option ('str') : can be user choice bidir,override, ccess-list reference for group <1-99> or <1300-1999>\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1386"
    }
  },
  "configure_ip_pim_rp_candidate_priority": {
    "iosxe": {
      "doc": " Configure ip pim rp-candidate priority on device\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface details on which we config\n            priority_value('int'): priority value to be set\n        Returns:\n            None\n        Raises: \n            SubCommandFailure : Failed to configure ip pim rp-candidate priority on device\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_rp_candidate_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L638"
    }
  },
  "configure_ip_pim_vrf_ssm_default": {
    "iosxe": {
      "doc": "configure ip pim vrf ssm default on device.\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_pim_vrf_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L237"
    }
  },
  "configure_ip_prefix_list": {
    "iosxe": {
      "doc": " configure prefix-list to pass a prefix\n\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            seq (`int`): Sequence to insert to existing route-map entry\n            ip_address (`str`): ip address to be used\n            subnet_id (`int`): subnet_id to be used, default value is 32\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L853"
    }
  },
  "configure_ip_prefix_list_deny_permit": {
    "iosxe": {
      "doc": " configure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            option (`str`): option for prefix list\n                ex:)\n                    deny         Specify packets to reject\n                    permit       Specify packets to forward\n            ip_address (`str`): ip address to be used\n            subnet_id (`int`): subnet_id to be used, default value is 32n\n            match_option (`str`,optional): prefix matching option\n            match_length (`int`,optional): prefix matching length(keeping default length 1)\n            ex:)\n                <1-32>  Minimum prefix length\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_prefix_list_deny_permit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L99"
    }
  },
  "configure_ip_prefix_list_description": {
    "iosxe": {
      "doc": " configure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            desc_line (`str`): description line for option description\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_prefix_list_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L132"
    }
  },
  "configure_ip_prefix_list_seq": {
    "iosxe": {
      "doc": " configure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            ip_address (`str`): ip address to be used\n            subnet_id (`int`): subnet_id to be used, default value is 32\n            seq_num (`int`): sequence number\n            seq_rule (`str`): rule permit/deny when option is seq\n            match_option (`str`,optional): prefix matching option\n            match_length (`int`,optional): prefix matching length(keeping default length 1)\n            ex:)\n                <1-32>  Minimum prefix length\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_prefix_list_seq",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L151"
    }
  },
  "configure_ip_role_based_acl": {
    "iosxe": {
      "doc": " Configure ip role based ACL on device\n        Args:\n            device ('obj'): device object\n            ip_type ('str'): ip address type ip or ipv6\n            protocol ('str'): protocol includes ip,ipv6,icmp,tcp,udp\n            acl_name ('str'): access-list name\n            permission ('str'): (permit | deny)\n            log ('str'): Log matches against this entry\n            prec_value ('str'): Precedence value (critical | flash | priority | network)\n            dscp_value ('str'): dscp value (afll | af12 | af13)\n            port_type ('str'): src/dst port type  \n            port_match_condition ('str'): eq/lt/gt on a given port number\n            port_match_value ('str'): Port number value\n            port_range_start ('str'): Start Port number range\n            port_range_end ('int'): End Port number range\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure role based access-list\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_role_based_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L925"
    }
  },
  "configure_ip_rsvp_bandwidth": {
    "iosxe": {
      "doc": " configure ip rsvp bandiwth on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            bandwidth ('str'): rsvp bandwidth\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_rsvp_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L492"
    }
  },
  "configure_ip_subnet_to_sgt_mapping_vrf": {
    "iosxe": {
      "doc": " Configure vrf Ip address subnet SGT\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n            ip_address ('str'): IP address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure vrf ip_address subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_subnet_to_sgt_mapping_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L709"
    }
  },
  "configure_ip_tftp_blocksize": {
    "iosxe": {
      "doc": " Specifies the size of TFTP blocks\n        Example : ip tftp blocksize 2000 \n\n        Args:\n            device ('obj'): device to use\n            size ('int'): block size value ranging from 512 to 8192 bytes\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_tftp_blocksize",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1396"
    }
  },
  "configure_ip_to_sgt_mapping_vrf": {
    "iosxe": {
      "doc": " Configure vrf Ip address SGT\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n            ip_address ('str'): IP address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure vrf ip_address SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_to_sgt_mapping_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L669"
    }
  },
  "configure_ip_unnumbered_on_interface": {
    "iosxe": {
      "doc": " configure ip unnumbered loopback on interface <interface>\n        Args:\n            device ('obj'): Device object\n            interfaces('str'): interface details on which we config\n            dest_interface('str'): Interface details on which ip unnumbered is going to apply (i.e - Loopback0)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure ip unnumbered loopback on interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_unnumbered_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4883"
    }
  },
  "configure_ip_vrf_forwarding_interface": {
    "iosxe": {
      "doc": " Create ip vrf forwarding on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface name\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ip vrf forwarding\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ip_vrf_forwarding_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L661"
    }
  },
  "configure_ipsec_df_bit": {
    "iosxe": {
      "doc": " Configure IPSec DF bit\n        Args:\n            device ('obj')    : device to use\n            clear ('boolean', optional) :  Clear DF bit for encapsulated packets, default is False\n            copy ('boolean', optional) :  Copy DF bit from inner for encapsulated packets, default is False\n            set ('boolean', optional) : Set DF bit for encapsulated packets, default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_df_bit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L712"
    }
  },
  "configure_ipsec_fragmentation": {
    "iosxe": {
      "doc": " Configure IPSec Fragmentation\n        Args:\n            device ('obj')    : device to use\n            after_encr ('boolean', optional) :  Perform fragmentation of large packets after IPSec\n                    encapsulation, default is False\n            before_encr ('boolean', optional) : Perform fragmentation of large packets before IPSec\n                    encapsulation, default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_fragmentation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L680"
    }
  },
  "configure_ipsec_profile": {
    "iosxe": {
      "doc": " Configures ipsec transform set\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ipsec profile name\n            transform_set_name ('str'): transform-set name\n            ikev2_profile_name ('str'): ikev2 profile name\n            isakmp_profile_name ('str'): isakmp profile name\n            is_responder_only ('boolean'): Do not initiate SAs\n            sa_dfbit_clear ('boolean'): Clear DF bit for encapsulated packets\n            sa_dfbit_copy ('boolean'): Copy DF bit from inner for encapsulated packets\n            sa_dfbit_set ('boolean'): Set DF bit for encapsulated packets\n            ecn_discard ('boolean'): Discard the Explicit Congestion Notification\n            ecn_propagate ('boolean'): Propagate the Explicit Congestion Notification\n            idle_time ('int'): Automatically delete IPSec SAs after a given idle period\n            sa_granularity ('boolean'): granularity to host level\n            sa_life_days ('int'): Security association duration in days\n            sa_life_kb_disable ('boolean'): Disable Volume-based Rekey\n            sa_life_kbytes ('int'): Security association duration in kilobytes\n            sa_life_sec ('int'): Security association duration in seconds\n            replay_disable ('boolean'): SA replay disable\n            replay_window ('int'): SA replay window size\n            sa_policy_limit ('int'): Set security-policy limit\n            mixed_mode ('boolean'): Enable mixed mode\n            pfs_group ('int') : set PFS group\n            rr_distance ('int') : Routing distance\n            rr_gateway ('str') : Next hop IPv4/IPv6 address of the gateway\n            rr_tag ('str') : Routing Tag ID\n            identity_name ('str') : Identity name\n            rr_route ('str') : IPv4 address overrides remote tunnel endpoint\n            rr_static ('boolean') : Create routes based on static ACLs permanently\n            redundancy_name ('str') : Redundancy group name\n            stateful ('boolean') : enable stateful failover\n            rr_enable ('str') : Create routes based on ACLs permanently            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L212"
    }
  },
  "configure_ipsec_sa_global": {
    "iosxe": {
      "doc": " Configures IPSec SA global parameters\n        Args:\n            device ('obj'): device to use\n            ecn_discard ('boolean', optional): Discard the Explicit Congestion Notification, default is False\n            ecn_propagate ('boolean', optional): Propagate the Explicit Congestion Notification, default is False\n            idle_time ('int', optional): Automatically delete IPSec SAs after a given idle period, default is None\n            sa_life_days ('boolean', optional): Security association duration in days, default is False\n            sa_life_kb_disable ('boolean', optional): Disable Volume-based Rekey, default is False\n            sa_life_kbytes ('int', optional): Security association duration in kilobytes, default is None\n            sa_life_sec ('boolean', optional): Security association duration in seconds, default is False\n            replay_disable ('boolean', optional): SA replay disable, default is False\n            replay_window ('int', optional): SA replay window size, default is None\n            multi_sn ('boolean', optional): Enable multiple sequence number per IPSec SA, default is False\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_sa_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L747"
    }
  },
  "configure_ipsec_transform_set": {
    "iosxe": {
      "doc": " Configures ipsec transform set\n        Args:\n            device (`obj`): Device object\n            transform_set_name ('str'): transform-set name\n            transform_method ('str'): transform method e.g. esp-gcm, esp-md5-hmac\n            transform_auth ('str'): Auth transform \n            transform_bit ('str'): transform bit keys\n            esn ('boolean'): setting esn\n            mode ('str'): Tunnel and transform mode\n            transport_require('boolean'): enabling transport require\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_transform_set",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L100"
    }
  },
  "configure_ipsec_tunnel": {
    "iosxe": {
      "doc": " Configures ipsec tunnel interface\n        Args:\n            device (`obj`): Device object\n            tunnel_intf ('str'): tunnel interface\n            tunnel_ip ('str'): tunnel ip addr\n            tunnel_mask ('str'): tunnel mask\n            tunnel_src_ip ('str'): tunnel source IP\n            tunnel_mode ('str'): ipv4 or ipv6 or dual-overlay\n            tunnel_dst_ip ('str'): tunnel destination IP\n            ipsec_profile_name ('str'): IPSEC profile name\n            v6-overlay ('boolean', optional): True if v6-over-ipv4. Default is False\n            vrf ('str',optional): overlay or ivrf of the tunnel, default is None\n            tunnel_vrf ('str',optional): underlay or fvrf name, default is None\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipsec_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L407"
    }
  },
  "configure_ipv4_dhcp_relay_helper": {
    "iosxe": {
      "doc": " Configure helper IP on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): helper IP address to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_dhcp_relay_helper",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1936"
    }
  },
  "configure_ipv4_dhcp_relay_helper_vrf": {
    "iosxe": {
      "doc": " Configure helper IP on an interface with VRF\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): helper IP address to be configured on interface\n            vrf ('str'): VRF to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_dhcp_relay_helper_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5189"
    }
  },
  "configure_ipv4_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure subnet SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt (`str`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L131"
    }
  },
  "configure_ipv4_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure Ipv4 SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Ipv4 SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv4_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L110"
    }
  },
  "configure_ipv6_acl": {
    "iosxe": {
      "doc": " Configure IPv6 ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_type ('str'): service type to configure\n            src_nw ('str'): name of the source network object-group or any\n            dst_nw ('str'): name of the destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            host_option('bool',optional): True to configure ace with host keyword, False if host keyword not required. Default value is True\n            prefix('str',optional): Prefix value in case of network,default value is None\n            dst_port ('str',optional): Acl destination port,default value is None\n            log_option ('str',optional): Option to log ACL match,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L372"
    }
  },
  "configure_ipv6_acl_on_interface": {
    "iosxe": {
      "doc": " Configures IPv6 acl on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl name to apply\n            inbound ('bool', option): True for inbound acl, False for outbound acl, default value is True\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L402"
    }
  },
  "configure_ipv6_address_on_hsrp_interface": {
    "iosxe": {
      "doc": " Configure ipv6 address on hsrp interface\n        Args:\n             device (`obj`): Device object\n             interface ('str'): Interface to configure hsrp\n             version (`int`): version number\n             ipv6_address ('str') : ipv6 address\n             priority ('str', optional) : config custom priority to hsrp\n             preempt ('str', optional) : config custom preempt delay sync to hsrp\n             hello_interval ('str', optional) : config the hello time for hsrp session\n             hold_time ('str', optional) : config the hold time for hsrp session\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_address_on_hsrp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6697"
    }
  },
  "configure_ipv6_destination_guard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 destination-guard policy\n    Args:\n        device ('obj'): device object\n        policy ('str'): policy name\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to attach ipv6 destination-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1942"
    }
  },
  "configure_ipv6_destination_guard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 destination-guard policy\n    Args:\n        device ('obj'): device object\n        policy ('str'): policy name\n        interface ('str', optional): interface name. Defaults to None\n        vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None.\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to detach ipv6 destination-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1973"
    }
  },
  "configure_ipv6_destination_guard_policy": {
    "iosxe": {
      "doc": " Configure ipv6 destination-guard policy\n    Args:\n        device (\"obj\"): The device to configure the policy on\n        policy_name (\"str\"): the name of the policy\n        enforcement (\"str\", optional): The enforcement policy to set - Eg. \"always\" or \"stressed\". Defaults to None.\n    Raises:\n        SubCommandFailure: Failed to configure ipv6 destination-guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_destination_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2004"
    }
  },
  "configure_ipv6_dhcp_client_vendor_class": {
    "iosxe": {
      "doc": " Configure IPV6 DHCP Client Vendor-class on interface:\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to configure\n            type('str'): vendor-class type (i.e. mac-address, ascii, hex, disable)\n            string('str', optional): The value string when type set to ascii or hex\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 dhcp vendor-class\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_client_vendor_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L368"
    }
  },
  "configure_ipv6_dhcp_guard_on_interface": {
    "iosxe": {
      "doc": " Configure ipv6 dhcp guard on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure ipv6 dhcp guard on interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_guard_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2334"
    }
  },
  "configure_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Configures ipv6 dhcp guard policy {policy_name}\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n            trusted_port ('bool'): True indicating the port is a trusted port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L12"
    }
  },
  "configure_ipv6_dhcp_relay": {
    "iosxe": {
      "doc": " Configure IPv6 DHCP Relay\n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            dest_ipv6 ('str'): IPv6 destination address\n            vlan ('int'): vlan number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 DHCP Relay\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_dhcp_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2050"
    }
  },
  "configure_ipv6_eigrp_named_networks": {
    "iosxe": {
      "doc": " Configures eigrp on networks\n        Args:\n            device ('obj'): Device to use\n            eigrp_name ('str'): EIGRP named mode name\n            autonomous_system ('str'): Autonomous system number\n            protocol_name ('str',optional): protocol should mention\n            autonomous_system_number ('str',optional): Autonomous system number \n\t        af_action ('str',optional): unicast or multicast (Default is '')\n            bandwidth ('str',optional): bandwidth\n            topology_name ('str',optional): topology name\n\t         \n            \n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_eigrp_named_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L186"
    }
  },
  "configure_ipv6_enable": {
    "iosxe": {
      "doc": " Enable ipv6\n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface name to enable ipv6\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4074"
    }
  },
  "configure_ipv6_mld_join_group": {
    "iosxe": {
      "doc": " Configure Enable ipv6 mld join-group \n    Args:\n        device (`obj`): Device object\n        address ('str'): ipv6 address  \n        interface_id ('str'): id of the interface to be configured \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_join_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L898"
    }
  },
  "configure_ipv6_mld_snooping": {
    "iosxe": {
      "doc": "Configure IPv6 MLD Snooping \n      \n    Args:\n        device('obj'): Device object\n    \n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L10"
    }
  },
  "configure_ipv6_mld_snooping_querier": {
    "iosxe": {
      "doc": "Configure ipv6 mld snooping querier \n       Example : ipv6 mld snooping querier \n      \n    Args:\n        device('obj'): Device object\n       \n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L186"
    }
  },
  "configure_ipv6_mld_snooping_querier_address": {
    "iosxe": {
      "doc": "Configure IPv6 MLD Snooping Querier address\n       Example : ipv6 mld snooping querier address ipv6_address\n      \n    Args:\n        device('obj'): Device object\n        ipv6_address('str'): IPv6 address of the MLD source address which needs to be Link-Local range\n\n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_querier_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L93"
    }
  },
  "configure_ipv6_mld_snooping_querier_version": {
    "iosxe": {
      "doc": "Configure IPv6 MLD Snooping Querier version number\n      \n    Args:\n        device('obj'): Device object\n        version_num('int'): ipv6 mld snooping querier version number\n    \n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_querier_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L49"
    }
  },
  "configure_ipv6_mld_snooping_tcn_flood": {
    "iosxe": {
      "doc": "Configure IPv6 MLD snooping tcn flooding\n    Args:\n        device('obj'): Device object\n            interface('str'): interface in which tcn flooding needs to be enabled\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L229"
    }
  },
  "configure_ipv6_mld_snooping_vlan_mrouter_interface": {
    "iosxe": {
      "doc": " configure ipv6 mld snooping vlan <vlan-id> mrouter interface <interface-id>\n\n    Args:\n        device ('obj'): Device object\n        vlan_id ('int'): vlan id to unconfigure\n        interface_id ('str'): interface id\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfigure rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_vlan_mrouter_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1331"
    }
  },
  "configure_ipv6_mld_snooping_vlan_querier_version": {
    "iosxe": {
      "doc": "Configure IPv6 MLD Snooping VLAN Querier version\n       Example : ipv6 mld snooping vlan 200 querier version 2\n      \n    Args:\n        device('obj'): Device object\n        vlan_id('int'): VLAN ID of the device\n        version_num('int'): MLD Snooping version of the device\n\n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_vlan_querier_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L139"
    }
  },
  "configure_ipv6_mld_snooping_vlan_static_interface": {
    "iosxe": {
      "doc": " Configure Enable ipv6 mld snooping vlan static interfac\n    Args:\n        device (`obj`): Device object\n        address ('str'): ipv6 address  \n        interface_id ('str'): id of the interface to be configured \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_snooping_vlan_static_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L943"
    }
  },
  "configure_ipv6_mld_static_group": {
    "iosxe": {
      "doc": " configures ipv6 mld static-group in interface level\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface/svi to be configured\n        static_group ('str'): static group address to be configured\n        ipv6_addr ('str'): ipv6_addr address to be configured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_static_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5112"
    }
  },
  "configure_ipv6_mld_vlan": {
    "iosxe": {
      "doc": " Configure Enable IPv6 mld vlan \n    Args:\n        device (`obj`): Device object\n        id ('int'): VLAN ID \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L821"
    }
  },
  "configure_ipv6_mld_vlan_immediate_leave": {
    "iosxe": {
      "doc": " Configure Enable IPv6 mld vlan immediate leave\n    Args:\n        device (`obj`): Device object\n        id ('int'): VLAN ID \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mld_vlan_immediate_leave",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L782"
    }
  },
  "configure_ipv6_mtu": {
    "iosxe": {
      "doc": " Configuring ipv6 mtu on  device\n        Args:\n            device ('obj'): Device object\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4632"
    }
  },
  "configure_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Configure Enable IPv6 multicast routing\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L450"
    }
  },
  "configure_ipv6_nd": {
    "iosxe": {
      "doc": " Configure IPv6 ND parameters\n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            lifetime ('int') : Valid Lifetime in secs\n            pref_lifetime ('int') : Preferred Lifetime in secs\n            router_pref ('str') : default router preference\n            ra_lifetime ('int') : IPv6 Router Advertisement Lifetime\n            ra_interval ('int') : IPv6 Router Advertisement Interval\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 DHCP ND parameters\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2084"
    }
  },
  "configure_ipv6_nd_dad_processing": {
    "iosxe": {
      "doc": " Configures ipv6 nd dad processing\n        Args:\n            device ('obj')         : device to use\n            interface ('str')      : interface to configure\n            no_of_attempts ('str') : Set IPv6 Duplicate Address Detection Transmits\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd_dad_processing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6343"
    }
  },
  "configure_ipv6_nd_raguard_on_interface": {
    "iosxe": {
      "doc": " configure ipv6 nd raguard on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to configure ipv6 nd raguard on interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd_raguard_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2258"
    }
  },
  "configure_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Configure ipv6 nd suppress policy {mode}\n    Args:\n        device ('obj'): device to use\n        policy_name ('str'): name of the policy to be configured\n        mode ('str'): mode for policy (dad-proxy, full-proxy, mc-proxy)\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure ipv6 nd suppress policy {policy_name} with mode {mode}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L165"
    }
  },
  "configure_ipv6_object_group_network": {
    "iosxe": {
      "doc": " Configure ipv6 object group of network type\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n            og_mode ('str'): object-group mode host or network\n            ipv6_address ('str'): IPv6 address\n            ipv6_network ('str'): IPv6 network address\n            prefix ('str'): Prefix length\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_object_group_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L12"
    }
  },
  "configure_ipv6_object_group_service": {
    "iosxe": {
      "doc": " Configure ipv6 object group of service type\n\n            Args:\n                device (`obj`): Device object\n                og_name ('str'): object-group name\n                ipv6_service ('str'): IPv6 service to add str\n\n            Returns:\n                None\n\n            Raises:\n                SubCommandFailure\n        ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_object_group_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L102"
    }
  },
  "configure_ipv6_ogacl": {
    "iosxe": {
      "doc": " Configure IPv6 Object-Group ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_og ('str'): name of Service object-group\n            src_nw ('str'): name of source network object-group or any\n            dst_nw ('str'): name of destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            service_type ('str',optional): service type to configure,default value is None\n            log_option ('str',optional): Option to log ACL match,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ogacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L233"
    }
  },
  "configure_ipv6_ospf_bfd": {
    "iosxe": {
      "doc": "configure ipv6 ospf bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1221"
    }
  },
  "configure_ipv6_ospf_mtu_ignore": {
    "iosxe": {
      "doc": "configure ipv6 ospf mtu-ignore\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ospf_mtu_ignore",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1279"
    }
  },
  "configure_ipv6_ospf_routing_on_interface": {
    "iosxe": {
      "doc": " Configures ipv6 ospf  on Interface\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Interface to use\n            ospf_process_id ('str'): Process id for ospf process\n            areaid ('int'): Area id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_ospf_routing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1337"
    }
  },
  "configure_ipv6_pim_bsr_candidate_bsr": {
    "iosxe": {
      "doc": " Configure ipv6 pim candidate bsr\n    Args:\n        device ('obj'): Device object\n        ipv6_address ('str'): ipv6_address for candidate\n        mask_length ('int'): BSR Hash mask length\n        candidate_filter ('str', optional): RP candidate filter\n        priority ('int', optional):BSR Priority\n        scope ('int', optional):IPv6 Scope value\n        vrf ('str', optional): vrf name\n    Returns:\n        None\n    Raises:\n        SubCommandFailure : Failed to configure ipv6 pim candidate bsr\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_pim_bsr_candidate_bsr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L47"
    }
  },
  "configure_ipv6_pim_bsr_candidate_rp": {
    "iosxe": {
      "doc": " Configure ipv6 pim candidate rp \n    Args:\n        device ('obj'): Device object\n        ipv6_address ('str'): ipv6_address for candidate\n        group_list ('str', optional): Group list\n        priority ('int', optional): priority for configured RP\n        interval ('int', optional): advertisement interval for configured RP\n        scope ('int', optional):IPv6 Scope value\n        bidir ('bool', optional): configure a bidir RP\n        vrf ('str', optional): vrf name\n    Returns:\n        None\n    Raises:\n        SubCommandFailure : Failed to configure ipv6 pim candidate rp \n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_pim_bsr_candidate_rp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L88"
    }
  },
  "configure_ipv6_pim_rp_address": {
    "iosxe": {
      "doc": " Configure Enable ipv6 pim rp-address \n    Args:\n        device (`obj`): Device object\n        address ('str'): rp address  \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L860"
    }
  },
  "configure_ipv6_raguard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 RA Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            device_role ('str'): role of the  device\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring IPv6 RA guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L13"
    }
  },
  "configure_ipv6_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n        Args:\n            device ('obj'): Device obj\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str', optional): interface name to configure. Default is None\n            destination_address('str', optional): destination address to configure. Default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L799"
    }
  },
  "configure_ipv6_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure subnet SGT\n        Args:\n            device ('obj'): device to use\n            ipv6 ('str'): IPv6 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt ('str'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L591"
    }
  },
  "configure_ipv6_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure Ipv6 SGT mapping\n        Args:\n            device ('obj'): device to use\n            ipv6 ('str'): IPv6 address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Ipv6 SGT mapping\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipv6_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L553"
    }
  },
  "configure_ipxe_forever": {
    "iosxe": {
      "doc": " Configure ipxe forever for switch\n        Args:\n            device ('obj'): Device object\n            switch_number ('int'): switch number\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipxe_forever",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L403"
    }
  },
  "configure_ipxe_timeout": {
    "iosxe": {
      "doc": " Configure ipxe timeout for switch\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): timeout value\n            switch_number ('int'): switch number\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ipxe_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L385"
    }
  },
  "configure_isakmp_key": {
    "iosxe": {
      "doc": " Configures ISAKMP key \n        Args:\n            device (`obj`): Device object\n            key_type ('int',optional): type of key that will follow\n            key ('str', optional): preshared key\n            ipv4_address ('str',optional): IPv4 address associated with the keyring\n            sub_mask ('str',optional): subnet mask associated with the keyring\n            host_name ('str',optional): hostname associated with the keyring\n            ipv6_prefix ('str',optional): IPv6 address associated with the keyring\n            no_xauth ('bool',optional): This option specifies if no_xauth needs to be configured or not\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isakmp_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L784"
    }
  },
  "configure_isakmp_policy": {
    "iosxe": {
      "doc": " Configures ISAKMP Policy\n        Args:\n            device (`obj`): Device object\n            policy_number ('str'): isakmp policy number\n            auth_type ('str', optional): autehntication type to be used\n            default ('str', optional): set a command to its defaults\n            encr_algos ('str', optional): encryption algorithms\n            dh_group ('str', optional): Diffie Hellman group\n            hash ('str', optional): hash algorithm for protection suite\n            lifetime ('str', optional): lifetime for ISAKMP security association\n        Returns:\n            True/False\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isakmp_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L838"
    }
  },
  "configure_isis_authentication_key_chain": {
    "iosxe": {
      "doc": " Configures the ISIS authentication Key-chain\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            key_chain_name('str'): Name of the key-chain\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_authentication_key_chain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L370"
    }
  },
  "configure_isis_authentication_mode": {
    "iosxe": {
      "doc": " Configures the ISIS authentication mode\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            mode('str'): Authentication mode for PDUs (md5 or text)\n            level('str'): Level for ISIS authentication (level-1 or level-2)\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_authentication_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L298"
    }
  },
  "configure_isis_circuit_type": {
    "iosxe": {
      "doc": " Configures the ISIS ciruit type\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            level('str'): level for ISIS circuit type (level-1, level-1-2 or level-2-only)\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_circuit_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L434"
    }
  },
  "configure_isis_keychain_key": {
    "iosxe": {
      "doc": " Configures the authentication string for a key on a key-chain\n        Args:\n            device('obj'): device to configure on\n            keychain_name ('str'): name of the key chain\n            key_id('int'): id of the key on key chain (Range 0-2147483647)\n            text('str'): The unencrypted user password (Maximum 80 characters)\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_keychain_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L238"
    }
  },
  "configure_isis_md5_authentication": {
    "iosxr": {
      "doc": " Configure MD5 authentication\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            hello_password ('str'): Authentication password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_md5_authentication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L147"
    }
  },
  "configure_isis_metric": {
    "iosxr": {
      "doc": " Configure ISIS metric\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            metric ('str'): Metric value\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L111"
    }
  },
  "configure_isis_metric_style": {
    "iosxr": {
      "doc": " Configure ISIS metric style\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n            metric_style ('str'): Metric style\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_metric_style",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L41"
    }
  },
  "configure_isis_net_address": {
    "iosxr": {
      "doc": " Configure ISIS network address\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            net_address ('str'): Net Address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_net_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L12"
    }
  },
  "configure_isis_network_entity": {
    "iosxe": {
      "doc": " Configure network_entity on ISIS router\n        Args:\n            device('obj'): device to configure on\n            network_entity('str'): network_entity of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_network_entity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L25"
    }
  },
  "configure_isis_network_type": {
    "iosxe": {
      "doc": " Configure network_entity on ISIS router\n        Args:\n            device('obj'): device to configure on\n            network_entity('str'): network_entity of device\n            is_type('str', optional): level-1 (or) Level-2 , by default is None\n            bfd ('str', optional) : bfd name, default value is None\n            adjacency ('str', optional) : adjacency details, default value is None\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_network_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L564"
    }
  },
  "configure_isis_password": {
    "iosxe": {
      "doc": " Configures the ISIS password\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            password('str'): password for ISIS\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L500"
    }
  },
  "configure_isis_prefix_sid": {
    "iosxr": {
      "doc": " Configure ISIS prefix-sid\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface ('str'): Interface to configure\n            prefix_sid ('str'): Prefix-Sid\n            address_family ('str'): Address family to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_prefix_sid",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/configure.py#L74"
    }
  },
  "configure_isis_redistributed_connected": {
    "iosxe": {
      "doc": " configure redistribute connected under isis\n        Args:\n            device (`obj`): device to execute on\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_redistributed_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L597"
    }
  },
  "configure_isis_router_configs": {
    "iosxe": {
      "doc": " Configures ISIS Router\n        Args:\n            device ('obj'):                 device to use\n            max_paths ('int', optional):    Number of paths (Default is None)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_router_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L634"
    }
  },
  "configure_isis_with_router_name_network_entity": {
    "iosxe": {
      "doc": " Configure isis with router name\n        Args:\n            device('obj'): device to configure on\n            router_name ('str'):configure the isis router name\n            network_entity('str',optional): network_entity of device\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_isis_with_router_name_network_entity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L135"
    }
  },
  "configure_key_config_key_password_encrypt": {
    "iosxe": {
      "doc": " Configure key config-key password encrypt on device\n        Args:\n            device ('obj'): Device object\n            password('str'): password, The config-key\n                Minimum 8 characters not beginning with\n                IOS special character(! # ;)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_key_config_key_password_encrypt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3116"
    }
  },
  "configure_l2vpn_evpn": {
    "iosxe": {
      "doc": " Config l2vpn evpn\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L59"
    }
  },
  "configure_l2vpn_evpn_router_id": {
    "iosxe": {
      "doc": " Config l2vpn evpn\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface type \n                               loopback | physical\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_evpn_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L107"
    }
  },
  "configure_l2vpn_storm_control": {
    "iosxe": {
      "doc": " Configures storm control under service instance\n\n        Args:\n            device('obj'): device to configure\n            interface('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_storm_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L13"
    }
  },
  "configure_l2vpn_vfi_context": {
    "iosxe": {
      "doc": " Config l2vpn vfi context\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n            vpn_id ('str'): vpn id to be configured\n            member('str') : member ip\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1540"
    }
  },
  "configure_l2vpn_vfi_context_vpls": {
    "iosxe": {
      "doc": "\n    Configures l2vpn vfi context vpls on device\n\n    Args:\n        device('obj'): device to configure\n        vpn_id('str'): vpn_id to configure\n        pseudowire('str', optional): pseudowire to configure,\n                                     default value is None\n        auto_bgp('bool',optional): to configured autodiscovery bgp singalling ldp\n\n    Returns:\n        N/A\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_l2vpn_vfi_context_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L74"
    }
  },
  "configure_label_mode_all_explicit_null": {
    "iosxe": {
      "doc": " Configures label mode all-explicit-null on BGP router\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n            neighbor_address('str'): what neighbor to configure on\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_label_mode_all_explicit_null",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2078"
    }
  },
  "configure_lacp_on_interface": {
    "iosxe": {
      "doc": " Configure LACP on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be added to port channel\n            min_max_bundle (`int`): Number of minimum/maximum bundles\n            minumum_bundle (`bool`): True if configuring minimum-bundle\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lacp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1241"
    }
  },
  "configure_lacp_port_priority": {
    "iosxe": {
      "doc": "configure lacp port-priority on a interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            priority (`int`): port priority <0-65535>\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lacp_port_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L52"
    }
  },
  "configure_lacp_ratefast": {
    "iosxe": {
      "doc": "configure lacp rate fast on a interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lacp_ratefast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L10"
    }
  },
  "configure_lacp_system_priority": {
    "iosxe": {
      "doc": " configure lacp system-priority on a interface\n\n        Args:\n            device (`obj`): Device object\n            priority (`int`): system priority <0-65535>\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lacp_system_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L95"
    }
  },
  "configure_layer2_vfi_autodiscovery": {
    "iosxe": {
      "doc": "configure Layer 2 VFI vpnid configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            vpnid(`str`): vpnid for vpls domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_autodiscovery",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1418"
    }
  },
  "configure_layer2_vfi_context": {
    "iosxe": {
      "doc": "configure Layer 2 VFI context configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            verbatim(`str`): vpnid for vpls domain\n            neighbors(`list`): Specifies list of remote peering router ID.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1292"
    }
  },
  "configure_layer2_vfi_manual": {
    "iosxe": {
      "doc": "configure Layer 2 VFI manual configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n            verbatim(`str`): vpnid for vpls domain\n            neighbors(`list`): Specifies list of remote peering router ID.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_layer2_vfi_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1266"
    }
  },
  "configure_ldp_discovery_targeted_hello_accept": {
    "iosxe": {
      "doc": " configure mpls ldp discovery targeted-hello accept \n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldp_discovery_targeted_hello_accept",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1775"
    }
  },
  "configure_ldra_interface": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n            interface_id ('str'): interface-id for ldra interface\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra on interface\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L267"
    }
  },
  "configure_ldra_policy_vlan": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra policy on vlan\n        Args:\n            device ('obj'): device to use\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra policy on vlan\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L213"
    }
  },
  "configure_ldra_remote_id": {
    "iosxe": {
      "doc": "\n    Configuring DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            remote_id ('str'): remote-id for ldra\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to configure ldra remote-id\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ldra_remote_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L163"
    }
  },
  "configure_license_smart": {
    "iosxe": {
      "doc": " Configures license smart with a license\n        Example : license smart transport smart\n\n        Args:\n            device ('obj'): device to use\n            license ('str): license name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L350"
    }
  },
  "configure_license_smart_transport_cslu": {
    "iosxe": {
      "doc": " Configures the license transport type to cslu\n        Example : license smart transport cslu\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart_transport_cslu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L12"
    }
  },
  "configure_license_smart_transport_off": {
    "iosxe": {
      "doc": " Configure license smart transport off\n    \n    Args:\n        device ('obj'): device to use\n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart_transport_off",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2713"
    }
  },
  "configure_license_smart_transport_smart": {
    "iosxe": {
      "doc": " license smart transport smart\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : : Failed configuring device\n    ",
      "module_name": "telemetry.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart_transport_smart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/configure.py#L40"
    }
  },
  "configure_license_smart_url_cslu": {
    "iosxe": {
      "doc": " Configures the url for cslu transport mode\n        Example : license smart url cslu http://192.168.0.1:8182/cslu/v1/pi\n\n            device ('obj'): device to use\n            url ('str'): the Smart Transport URL (eg. http://192.168.0.1:8182/cslu/v1/pi)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart_url_cslu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L52"
    }
  },
  "configure_license_smart_usage_interval": {
    "iosxe": {
      "doc": " Configures license smart usage interval\n        Example : license smart usage interval 1\n\n        Args:\n            device ('obj'): device to use\n            interval ('int'): Reporting interval in days (Range: 1-3650)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_license_smart_usage_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L270"
    }
  },
  "configure_line_console": {
    "iosxe": {
      "doc": " Configures line console on a line\n        Example : line console 0\n\n            device ('obj'): device to use\n            line_number ('int'): First Line number (Eg. 0)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_line_console",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L91"
    }
  },
  "configure_line_vty": {
    "iosxe": {
      "doc": " Configures line vty on switch \n    \n        Args:\n            device ('obj'): device to use\n            first_line_number('int'): first line number\n            second_line_number ('int', optional): Second line number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_line_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3223"
    }
  },
  "configure_lineconsole_exectimeout": {
    "iosxe": {
      "doc": " Configure line console exec timeout\n        Args:\n            device (`obj`): Device object\n            console_num ('int'): Line console number\n            timeout ('mins'): timeout in mins\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lineconsole_exectimeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L230"
    }
  },
  "configure_lisp_enhanced_forwarding": {
    "iosxe": {
      "doc": " configures enhanced forwarding in lisp \n        Args:\n            device (`obj`): Device object\n            instance_id (`str`): instance_id under lisp\n            vlan (`int`): vlan number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lisp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lisp_enhanced_forwarding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lisp/configure.py#L12"
    }
  },
  "configure_lisp_l2_flooding": {
    "iosxe": {
      "doc": " configures l2 flooding under lisp \n        Args:\n            device (`obj`): Device object\n            instance_id (`str`): instance_id under lisp\n            vlan (`int`): vlan number\n            mcast_ip('str'): broadcast-underlay ip, defaults to '239.0.0.1'\n            packet1('str'):type of packet to flood,defaults to 'arp-nd'\n            packet2('str'):type of packet to flood,defaults to 'unknown-unicast'\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lisp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lisp_l2_flooding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lisp/configure.py#L62"
    }
  },
  "configure_lldp": {
    "ios": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L8"
    },
    "iosxe": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L11"
    },
    "iosxr": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L8"
    },
    "nxos": {
      "doc": " Enables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L8"
    }
  },
  "configure_lldp_holdtime": {
    "iosxe": {
      "doc": " Configure LLDP holdtime on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            timer ('int'): LLDP holdtime in seconds between 0-65535 seconds\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L95"
    }
  },
  "configure_lldp_interface": {
    "iosxe": {
      "doc": " Configure LLDP on interface\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface on which LLDP to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L41"
    }
  },
  "configure_lldp_reinit": {
    "iosxe": {
      "doc": " Configure LLDP reinit on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            timer ('int'): LLDP reinit in seconds between 2-5 seconds\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp_reinit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L157"
    }
  },
  "configure_lldp_timer": {
    "iosxe": {
      "doc": " Configure LLDP timer on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            timer ('int'): LLDP timer in seconds between 5-65534 seconds\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L126"
    }
  },
  "configure_lldp_tlv_select": {
    "iosxe": {
      "doc": " Configure LLDP tlv-select on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            tlv ('list'/'str'): List of TLVs if multiple TLVs to select or a string.\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_lldp_tlv_select",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L218"
    }
  },
  "configure_local_span_destination": {
    "iosxe": {
      "doc": " configure locl span destination interface\n        Args:\n            device (`obj`): Device object\n            session_id ('int'): SPAN session number\n            span_port ('str'): SPAN destination interface\n            encapsulation ('str'): (dot1q|replicate|default=None)\n            ingress ('str'): (dot1q|untagged|vlan|default=None)\n            vlan_id ('int'): default=None\n    ",
      "module_name": "span.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_local_span_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/span/configure.py#L39"
    }
  },
  "configure_local_span_source": {
    "iosxe": {
      "doc": " configure locl span source interface\n        Args:\n            device (`obj`): Device object\n            session_id ('int'): SPAN session number\n            int_type('str'): SPAN source {VLAN|interface}\n            span_port('str'): SPAN source interface/VLAN ID\n            direction('str'): MONITOR (TRANSMIT/RECEIVE/BOTH) TRAFFIC, Default=both\n                ex:)\n                    both  Monitor received and transmitted traffic\n                    rx    Monitor received traffic only\n                    tx    Monitor transmitted traffic only\n                    <cr>  <cr> \n    ",
      "module_name": "span.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_local_span_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/span/configure.py#L11"
    }
  },
  "configure_logging_buffer_size": {
    "iosxe": {
      "doc": " logging buffered <4096-2147483647>\n        Args:\n            device (`obj`): Device object\n            buffer_size ('int'): Size of the buffer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_buffer_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L134"
    }
  },
  "configure_logging_buffered_debugging": {
    "iosxe": {
      "doc": " Confgiure logging buffered debugging\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_buffered_debugging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L274"
    }
  },
  "configure_logging_buffered_errors": {
    "iosxe": {
      "doc": " Confgiure logging buffered errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_buffered_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L153"
    }
  },
  "configure_logging_console": {
    "iosxe": {
      "doc": " logging console\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_console",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L11"
    }
  },
  "configure_logging_console_errors": {
    "iosxe": {
      "doc": " Confgiure logging console errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_console_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L191"
    }
  },
  "configure_logging_monitor": {
    "iosxe": {
      "doc": " logging monitor\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L44"
    }
  },
  "configure_logging_monitor_debugging": {
    "iosxe": {
      "doc": " logging monitor debugging\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_logging_monitor_debugging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L258"
    }
  },
  "configure_mac_access_group_mac_acl_in_out": {
    "iosxe": {
      "doc": " configures mac access group ACL in/out\n\n        Args:\n            device ('obj'): device to use\n            interface_id ('str'): interface on which mss needs to be configured.\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_access_group_mac_acl_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1444"
    }
  },
  "configure_mac_acl": {
    "iosxe": {
      "doc": " Configuring MAC ACL\n        Example: mac access-list extended MAC-ACL\n                permit host 001.00a.00a host 001.00b.00b\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): name of the ACL to which the entry belongs\n            action ('str'): (permit | deny) permits or denies Layer 2 traffic\n            source ('str'): (src-MAC-addr) defines a source MAC address (e.g. 001.00a.00a)\n            dest ('str'): (dst-MAC-addr) defines a destination MAC address (e.g. 001.00b.00b)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1466"
    }
  },
  "configure_mac_address_table_aging": {
    "iosxe": {
      "doc": " Config mac-aging time on device\n        Args:\n            device (`obj`): device object\n            aging_time (`int`): mac aging-time\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_address_table_aging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L120"
    }
  },
  "configure_mac_address_table_aging_default": {
    "iosxe": {
      "doc": " Config mac-aging time default on device\n        Args:\n            device (`obj`): device object\n            aging (`str`,`int`): mac aging-time\n            ex:)\n                <0-0>         Enter 0 to disable aging\n                <10-1000000>  Enter aging-time\n                routed-mac    Set RM Aging interval\n                vlan          VLAN Keyword\n                <cr>          <cr>\n            vlan_id (`int`): Vlan number for aging-time option vlan (keeping default as vlan 1)\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_address_table_aging_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L334"
    }
  },
  "configure_mac_address_table_learning": {
    "iosxe": {
      "doc": " Config mac-learning on device\n        Args:\n            device (`obj`): device object\n            vlan_id (`int`): vlan id \n        Return:\n            None\n        Raises:\n            SubCommandFailure \n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_address_table_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L300"
    }
  },
  "configure_mac_address_table_notification_change": {
    "iosxe": {
      "doc": "Configure mac-address-table notification change on this device\n        Args:\n            device ('obj'): Device object\n            change_option ('str',optional): change option history-size/interval\n            size ('int',optional): Number of MAC notifications to be stored\n            interval ('int',optional): Interval between the MAC notifications\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_address_table_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L229"
    }
  },
  "configure_mac_address_table_static": {
    "iosxe": {
      "doc": " \n    API for the CLI :- \n        mac address-table static {mac_address,} vlan {vlan_number} interface {interface}\n        e.g.\n        Args:\n            device ('obj'): Device object\n            mac_address('str'): MAC address\n            vlan_number('int'): Vlan ID number\n            interface('str'): interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_address_table_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L366"
    }
  },
  "configure_mac_global_address_table_notification_change": {
    "iosxe": {
      "doc": "Configure address-table notification change under global mac on this device\n        Args:\n            device ('obj'): Device object\n            change_option ('str',optional): change option history-size/interval\n            size ('int',optional): Number of MAC notifications to be stored\n            interval ('int',optional): Interval between the MAC notifications\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_global_address_table_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L181"
    }
  },
  "configure_mac_global_address_table_static": {
    "iosxe": {
      "doc": "Configure address-table static under global mac on this device\n        Args:\n            device ('obj'): Device object\n            mac ('str'): 48 bit mac address\n            vlan ('int'): vlan id\n            interface ('str',optional): interface\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mac_global_address_table_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L137"
    }
  },
  "configure_macro_auto_global_processing": {
    "iosxe": {
      "doc": " Configure macro auto global processing on the device globally\n    \n    Args:\n        device ('obj'): device to use\n    Returns:\n            None\n    Raises:\n            SubCommandFailure: Failed to configure macro auto global processing\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_macro_auto_global_processing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3711"
    }
  },
  "configure_macro_auto_global_processing_on_interface": {
    "iosxe": {
      "doc": " Configure macro auto global processing on the device interface\n    \n    Args:\n        device ('obj'): device to use\n        interface (int): interface to configure\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to configure macro auto global processing\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_macro_auto_global_processing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3673"
    }
  },
  "configure_macro_auto_sticky": {
    "iosxe": {
      "doc": " Configure macro auto sticky on this device\n    \n    Args:\n        device ('obj'): device to use\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_macro_auto_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L716"
    }
  },
  "configure_macro_global_apply": {
    "iosxe": {
      "doc": "\n        Configure macro global apply on device\n        cli: macro global apply\n        Args:\n            device ('obj'): Device object\n            macro_name ('str'): macro name\n        Raises:\n            SubCommandFailure\n        Returns:\n            None\n    Returns:\n        None\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_macro_global_apply",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1819"
    }
  },
  "configure_management": {
    "iosxe": {
      "doc": " Configure management connectivity on the device.\n\n    Arguments can be provided with the management connectivity information. By default,\n    information is taken from the testbed device.management section.\n\n    Testbed schema:\n\n        device:\n            management:\n                interface: (str) Management interface to use\n                vrf: (str) VRF to use for management interface\n                protocols: [list of protocols]\n                address ('dict'):  Address(es) to configure on the device (syntax: address/mask) (optional)\n                   ipv4 ('str') or ('list'): ipv4 address\n                   ipv6 ('str') or ('list'): ipv6 address\n                gateway: (dict) Gateway address(es) for default route\n                   ipv4 ('str') or ('list'): ipv4 gateway address\n                   ipv6 ('str') or ('list'): ipv6 gateway address\n                routes: ('dict')\n                   ipv4 (list of 'dict'): ipv4 routes\n                      - subnet: (str) subnet including mask\n                        next_hop: (str) next_hop for this subnet\n                   ipv6 (list of 'dict'): ipv6 routes\n                      - subnet: (str) subnet including mask\n                        next_hop: (str) next_hop for this subnet\n\n    Args:\n        device ('obj'):  device object\n        address ('dict', optional):  Address(es) to configure on the device (syntax: address/mask) (optional)\n            ipv4 ('str') or ('list'): ipv4 address\n            ipv6 ('str') or ('list'): ipv6 address\n        gateway: (dict, optional) Gateway address(es) for default route\n            ipv4 ('str') or ('list'): ipv4 gateway address\n            ipv6 ('str') or ('list'): ipv6 gateway address\n        vrf: (str, optional) VRF to use for management interface\n        interface: (str, optional) Management interface to use\n        routes: ('dict', optional)\n           ipv4 (list of 'dict'): ipv4 routes\n              - subnet: (str) subnet including mask\n                next_hop: (str) next_hop for this subnet\n           ipv6 (list of 'dict'): ipv6 routes\n              - subnet: (str) subnet including mask\n                next_hop: (str) next_hop for this subnet\n        dchp_timeout ('int', optional): DHCP timeout in seconds (default: 30)\n        protocols ('list', optional): [list of protocols]\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L606"
    }
  },
  "configure_management_gateway": {
    "iosxe": {
      "doc": "\n    Configure management gateway on the device.\n\n    Args:\n        device ('obj'):  device object\n        gateway: (dict, optional) Gateway address(es) for default route\n             ipv4 ('str') or ('list'): ipv4 gateway address\n             ipv6 ('str') or ('list'): ipv6 gateway address\n        vrf ('str'): interface VRF (optional)\n\n    Returns:\n        None\n\n    Examples:\n\n        # Use config details from device in testbed\n        #\n        # R1:\n        #   management:\n        #     interface: GigabitEthernet0\n        #     address:\n        #        ipv4: '1.1.1.1/24'\n        #        ipv6: '2001::123/64'\n        #     gateway:\n        #        ipv4: '1.1.1.1'\n        #        ipv6: '2001::123/64'\n\n\n        # Address and gateway\n        device.api.configure_management_gateway(gateway={'ipv4': '1.1.1.254'})\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_gateway",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L158"
    }
  },
  "configure_management_http": {
    "iosxe": {
      "doc": "\n    Configure device for management via http.\n\n    Args:\n        device ('obj'):  device object\n        source_interface ('str'): management interface (optional)\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_http",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L360"
    }
  },
  "configure_management_ip": {
    "iosxe": {
      "doc": "\n    Configure management ip on the device.\n\n    Args:\n        device ('obj'):  device object\n        address ('dict'):  Address(es) to configure on the device (syntax: address/mask) (optional)\n             ipv4 ('str') or ('list'): ipv4 address\n             ipv6 ('str') or ('list'): ipv6 address\n        interface ('str'): management interface (optional)\n        vrf ('str'): interface VRF (optional)\n        dchp_timeout ('int'): DHCP timeout in seconds (default: 30)\n\n    Returns:\n        None\n\n    Examples:\n\n        # Configure IP on interface\n        device.api.configure_management_ip(interface='GigabitEthernet0', address={'ipv4': '1.1.1.1/24'})\n\n        # Use config details from device in testbed\n        #\n        # R1:\n        #   management:\n        #     interface: GigabitEthernet0\n        #     address:\n        #        ipv4: '1.1.1.1/24'\n        #        ipv6: '2001::123/64'\n\n        # api picks up ip from testbed\n        device.api.configure_management_ip()\n\n        # IPv6 management address in a VRF\n        device.api.configure_management_ip(interface='GigabitEthernet0', address={'ipv6': '2001::123/64'}, vrf='Mgmt-vrf')\n\n        # Multiple addresses\n        device.api.configure_management_ip(interface='GigabitEthernet0', address={'ipv4': ['1.1.1.1/24'], 'ipv6': ['2001::123/64']})\n\n        # The api also supports the ipv4/ipv6 dhcp and ipv6/autoconfig.\n        # Use config details from device in testbed\n        # Example 1: (ipv4/ipv6 dhcp)\n        # R1:\n        #   management:\n        #     interface: GigabitEthernet0\n        #     address:\n        #        ipv4: 'ipv4/dhcp'\n        #        ipv6: 'ipv6/dhcp'\n        #\n        # Example 2: (ipv6 autoconfig)\n        # R1:\n        #   management:\n        #     interface: GigabitEthernet0\n        #     address:\n        #        ipv6: 'ipv6/autoconfig'\n\n        # api picks up ip from testbed\n        device.api.configure_management_ip()\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L11"
    }
  },
  "configure_management_netconf": {
    "iosxe": {
      "doc": "\n    Configure device for management via netconf.\n\n    Args:\n        device ('obj'):  device object\n        credentials ('str'): credentials to authenticate\n        username ('str'): username to ssh\n        password ('str'): password to ssh\n        domain_name ('str'): domain name to do netconf\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_netconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L533"
    }
  },
  "configure_management_protocols": {
    "iosxe": {
      "doc": "\n    Configure the device management protocols.\n\n    Args:\n        device ('obj'):  device object\n        protocols ('list', optional): [list of protocols]\n\n    Returns:\n        None\n\n    device:\n        R1:\n            management:\n                protocols:\n                - http\n                - tftp\n                - telnet\n                - ssh\n                - netconf\n\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_protocols",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L567"
    }
  },
  "configure_management_routes": {
    "iosxe": {
      "doc": "\n    Configure management routes on the device.\n\n    Args:\n        device ('obj'):  device object\n        routes: ('dict', optional)\n             ipv4 (list of 'dict'): ipv4 routes\n                - subnet: (str) subnet including mask\n                  next_hop: (str) next_hop for this subnet\n             ipv6 (list of 'dict'): ipv6 routes\n                - subnet: (str) subnet including mask\n                  next_hop: (str) next_hop for this subnet\n        vrf ('str'): interface VRF (optional)\n\n    Returns:\n        None\n\n    Examples:\n        # Routes\n        device.api.configure_management(routes={\n        'ipv4': [{\n            'subnet': '192.168.1.0 255.255.255.0',\n            'next_hop': '172.16.1.1'\n        }],\n         'ipv6': [{\n            'subnet': '2001::123/64',\n            'next_hop': '2002::123/64'\n        }]\n        })\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L256"
    }
  },
  "configure_management_ssh": {
    "iosxe": {
      "doc": "\n    Configure device for management via ssh.\n\n    Args:\n        device ('obj'):  device object\n        credentials ('str'): credentials to authenticate\n        username ('str', optional): username to ssh\n        password ('str', optional): password to ssh\n        domain_name ('str'): domain name to ssh\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_ssh",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L390"
    }
  },
  "configure_management_telnet": {
    "iosxe": {
      "doc": "\n    Configure device for management via telnet.\n\n    Args:\n        device ('obj'):  device object\n        credentials ('str'): credentials to authenticate\n        username ('str', optional): username to ssh\n        password ('str', optional): password to ssh\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_telnet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L445"
    }
  },
  "configure_management_tftp": {
    "iosxe": {
      "doc": "\n    Configure device for management via tftp.\n\n    Args:\n        device ('obj'):  device object\n        source_interface ('str'): management interface (optional)\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L331"
    }
  },
  "configure_management_vty_lines": {
    "iosxe": {
      "doc": "\n    Configure device for management via vty lines.\n\n    Args:\n        device ('obj'):  device object\n        authentication ('str'): authentication details\n        transport ('str'): transport details\n\n    Returns:\n        None\n    ",
      "module_name": "management.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_management_vty_lines",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/management/configure.py#L486"
    }
  },
  "configure_masked_unmasked_credentials": {
    "iosxe": {
      "doc": " Configure masked or unmasked credentials with privilege,common criteria policy\n        and encryption algorithm type.\n        \n    Args:\n        device (`obj`):                   Device object\n        username (`str`):                 username\n        password (`str`):                 Password\n        privilege('int',optional):        specified privilege num else None \n        ccp_name (`str`, optional):       specified Common Criteria Policy else None\n        algorithm_type ('str', optional): specified algorithm type else None\n        masked ('bool'):                  masked secret if True else unmasked.         \n        secret ('bool'):                  secret if True else plain-text \n    Return :\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_masked_unmasked_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1652"
    }
  },
  "configure_masked_unmasked_enable_secret_password": {
    "iosxe": {
      "doc": " Configure masked/unmasked enable password with the given encryption \n    algorithm type,privilege level and common criteria policy\n       \n        \n    Args:\n        device (`obj`):                   Device object\n        password (`str`):                 Password\n        privilege('int',optional):        specified privilege num else None \n        ccp_name (`str`, optional):       specified Common Criteria Policy else None\n        algorithm_type ('str', optional): specified algorithm type else None\n        masked ('bool'):                  masked secret if True else unmasked.         \n        secret ('bool'):                  secret if True else plain-text \n    Return :\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_masked_unmasked_enable_secret_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1721"
    }
  },
  "configure_maximum_path_under_ospf": {
    "iosxe": {
      "doc": " configure maximum-path under ospf\n        Args:\n            device ('obj'): Device object\n            ospf_process_id('int'): ospf processid to unconfig\n            max_path('int'): maximum path to be installed\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_maximum_path_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1140"
    }
  },
  "configure_maximum_prefix_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure maximum prefix to router bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            maximum_prefix ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'maximum_prefix': maximum prefix number\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.6,\n                        'maximum_prefix': 5,\n                    }\n                ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: maximum_prefix is not a list\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_maximum_prefix_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L279"
    }
  },
  "configure_mdns": {
    "iosxe": {
      "doc": " Configure mDNS (Multicast Domain Name System) services on agent and service peer\n\n        mdns-sd gateway\n        mdns-sd service-definition custom10\n          service-type _airplay._tcp.local\n          service-type _raop._tcp.local\n          service-type _ipp._tcp.local\n          service-type _afpovertcp._tcp.local\n          service-type _nfs._tcp.local\n          service-type _ssh._tcp.local\n          service-type _dpap._tcp.local\n          service-type _daap._tcp.local\n          service-type _ichat._tcp.local\n          service-type _presence._tcp.local\n          service-type _http._tcp.local\n          service-type _ipps._tcp.local\n          service-type _printer._tcp.local\n          service-type _smb._tcp.local\n          service-type _ftp._tcp.local\n        mdns-sd service-list service_list31 IN\n        match custom10\n        mdns-sd service-list service_list32 OUT\n        match custom10\n        mdns-sd service-list service_list33 OUT\n        match custom10\n        mdns-sd service-list service_list34 IN\n        match custom10\n        mdns-sd service-policy Policy41\n          service-list service_list31 IN\n        mdns-sd service-policy Policy42\n          service-list service_list32 OUT\n          service-list service_list33 OUT\n          service-list service_list34 IN\n        mdns-sd service-list service_list55 IN\n        match custom10 message-type query\n        mdns-sd service-list service_list66 OUT\n        match custom10 location-filter filter8\n        mdns-sd service-policy Policy43\n          service-list service_list55 IN\n          service-list service_list66 OUT\n        end\n\n    Args:\n        device ('obj'): device to configure\n        service definition ('str', optional): service definition name. Default value is None\n        service_list ('list', optional): list with all services. Default value is None\n        direction ('str', optional): direction. Default value is None\n        policy_name ('dict', optional): dict with all Policy names and directions. Default value is None\n        service_list_msg_type ('str', optional): creating service list for msg type. Default value is None\n        direction_msg_type ('str', optional): creating direction for msg type. Default value is None\n        message_type ('str', optional): Message type. Default value is None\n        service_list_filter ('str', optional): creating service list for filter type. Default value is None\n        direction_filter_type ('str', optional): creating direction for filter type. Default value is None\n        filter_name ('str', optional): Filter name. Default value is None\n        policy_name1 ('dict', optional): creating new dict for adding new service list for msg and filter types. Default value is None\n\n        dict = {'Policy41': ['service_list31', 'IN'],\n                'Policy42': ['service_list32',\n                             'OUT',\n                             'service_list33',\n                             'OUT',\n                             'service_list34',\n                             'IN']}\n\n        dict = {'Policy43': ['service_list55', 'IN',\n                             'service_list66',\n                             'OUT']}\n\n  Returns:\n      None\n\n  Raises:\n      SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L380"
    }
  },
  "configure_mdns_active_response_timer": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) active response timer\n    \n        mdns-sd gateway\n        active-response timer 20\n        end\n    \n        Args:\n            device ('obj'): device to use\n            timer ('int'): 5-60 sec\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns active response timer\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_active_response_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1466"
    }
  },
  "configure_mdns_boot_level_license": {
    "iosxe": {
      "doc": " Configures mdns boot level license\n\n        Args:\n            device ('obj'): device to use\n            license ('str'): license name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_boot_level_license",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1070"
    }
  },
  "configure_mdns_controller": {
    "iosxe": {
      "doc": " Create mdns controller\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            cont_addr ('str'): controller addresses to be configured\n            cont_service_policy ('str'): service-policy to configured\n            cont_src_intf ('str'): Default router ID\n            srvc_list ('str'):\n            mat_option ('str'):\n            msg_type ('str'):\n            src_intf ('str'):\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_controller",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L11"
    }
  },
  "configure_mdns_controller_service_list": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) controller service list\n    \n        mdns-sd controller service-list contrl-list3\n        match apple-tv\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str') : name of the list\n            service_type ('list'): services names\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller service-list\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_controller_service_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1295"
    }
  },
  "configure_mdns_location_filter": {
    "iosxe": {
      "doc": " Configures location filter details on vlan\n\n        Args:\n            device ('obj'): device to use\n            location_filter ('str'): location filter name\n            location_group ('str'): location group name\n            vlan ('int'): Vlan id\n            role ('str'): Role name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_location_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L755"
    }
  },
  "configure_mdns_location_group": {
    "iosxe": {
      "doc": " Configures location group details on interface\n\n        Args:\n            device ('obj'): device to use\n            location_group ('int'): location group name\n            vlan ('int'): Vlan id value\n            interface ('list'): list of interfaces to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_location_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L790"
    }
  },
  "configure_mdns_on_interface_vlan": {
    "iosxe": {
      "doc": " Configure mdns gateway on interface vlan\n        Args:\n            device ('obj'): Device object\n            vlan ('int'): Vlan Id\n            policy_name ('str'): LOCAL-AREA-POLICY which need to association to interface vlan\n            act_qry_time ('int'): active-query timer value in seconds  <60-3600>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_on_interface_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4754"
    }
  },
  "configure_mdns_query_response_mode": {
    "iosxe": {
      "doc": " Configures mdns query-response mode\n\n        Args:\n            device ('obj'): device to use\n            mode ('str'): mode like recurring or on-demand\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_query_response_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1170"
    }
  },
  "configure_mdns_sd_agent": {
    "iosxe": {
      "doc": " Configures mDNS(Multicast Domain Name System) agent\n\n        Args:\n            device (`obj`): Device object\n            timer ('int', optional): Timer value. Default value is None\n            count ('int', optional): Count value. Default value is None\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_sd_agent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L858"
    }
  },
  "configure_mdns_sd_service_peer": {
    "iosxe": {
      "doc": " Configures mDNS(Multicast Domain Name System) service peer\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan value\n            ip_addr ('str'): ipv4,ipv6 address\n            response_timer ('int', optional): active response timer. Default value is None\n            timer ('int', optional): Timer value. Default value is None\n            count ('int', optional): Count value. Default value is None\n            value ('int', optional): rate limit value . Default value is None\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_sd_service_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L897"
    }
  },
  "configure_mdns_service_definition": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) service definition\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            srvc_type ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns service-definition\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_definition",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L969"
    }
  },
  "configure_mdns_service_list": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) service list\n    \n        mdns-sd service-list policie5 IN\n        match apple-tv\n        end\n        \n        Args:\n            device ('obj'): device to use\n            name ('str') : name of the list\n            direction ('str'): direction of the list\n            service_type ('list'): services names\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns service-list\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1194"
    }
  },
  "configure_mdns_service_peer_group": {
    "iosxe": {
      "doc": " Configures service-peer group details for with peer ip and policy name\n    \n        mdns-sd service-peer group\n        peer-group 3\n        service-policy policy44\n        service-peer 20.0.0.20 location-group 4096 role bonjour\n        end\n\n        Args:\n            device ('obj'): device to use\n            peer_grp_no ('int'): peer group number to be configured should in be this range <1-1000> \n            policy_name ('str'): policy_name to be mapped to peer\n            peer_ip ('str'): service peer ip  to be configured\n            loc_grp_no ('str'): location group number which location group of to be allowed\n            role ('str'): Role name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_peer_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1426"
    }
  },
  "configure_mdns_service_policy": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) service-policy\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            service_list ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller service-policy\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1577"
    }
  },
  "configure_mdns_service_query_timer_periodicity": {
    "iosxe": {
      "doc": " Configure mDNS(Multicast Domain Name System) service query timer periodicity\n    \n        mdns-sd gateway\n        active-response timer 20\n        end\n    \n        Args:\n            device ('obj'): device to use\n            timer ('int'): 5-36000 sec\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns service query timer periodicity\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_query_timer_periodicity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1527"
    }
  },
  "configure_mdns_service_receiver_purge_timer": {
    "iosxe": {
      "doc": " Configures mdns service-receiver-purge timer\n\n        Args:\n            device ('obj'): device to use\n            timer ('int'): timer value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_receiver_purge_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1146"
    }
  },
  "configure_mdns_service_record_ttl": {
    "iosxe": {
      "doc": " Configures mdns service record ttl\n\n        Args:\n            device ('obj'): device to use\n            cache_record_type ('str'): cache record like enhanced or original\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_service_record_ttl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1093"
    }
  },
  "configure_mdns_svi": {
    "iosxe": {
      "doc": " Create mdns svi\n        Args:\n            device ('obj'): device to use\n            vlan ('str'):\n            srvc_ins_suffix ('str'): controller addresses to be configured\n            srvc_mdns_qry ('str'): Controller port to be configured\n            srvc_policy ('str'): service-policy to configured\n            transport ('str'): Default router ID\n            act_qry ('int'): Default router ID\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns svi config\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L170"
    }
  },
  "configure_mdns_trust": {
    "iosxe": {
      "doc": " Configures location filter details on vlan\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdns_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L946"
    }
  },
  "configure_mdt_auto_discovery_mldp": {
    "iosxe": {
      "doc": " configure mdt auto-discovery mldp\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_auto_discovery_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L153"
    }
  },
  "configure_mdt_data_mpls_mldp": {
    "iosxe": {
      "doc": " configure mdt data in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            mdt_data ('str'): Specifies a range of addresses to be used in the data MDT pool.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_data_mpls_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L343"
    }
  },
  "configure_mdt_data_threshold": {
    "iosxe": {
      "doc": " configure mdt threshold in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            threshold ('int'): defines the bandwidth threshold value in kilobits per second.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_data_threshold",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L447"
    }
  },
  "configure_mdt_data_vxlan": {
    "iosxe": {
      "doc": " configure mdt data vxlan network in vrf\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            ip ('str'): network ip address\n            mask ('str'): mask\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring mdt data vxlan \n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_data_vxlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L765"
    }
  },
  "configure_mdt_overlay_use_bgp": {
    "iosxe": {
      "doc": " Enables BGP as the overlay protocol\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring vrf\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_overlay_use_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L178"
    }
  },
  "configure_mdt_overlay_use_bgp_spt_only": {
    "iosxe": {
      "doc": " configure mdt overlay under vrf \n        Args:\n            device ('obj'): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring vrf\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_overlay_use_bgp_spt_only",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L864"
    }
  },
  "configure_mdt_partitioned_mldp_p2mp": {
    "iosxe": {
      "doc": " Enables both IPv4 and IPv6 address-families to be configured for partitioned MDT under vrf\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_partitioned_mldp_p2mp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L422"
    }
  },
  "configure_mdt_preference_under_vrf": {
    "iosxe": {
      "doc": " configure mdt preference type in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            mdt_type ('str'): specifies a preference for a particular MDT type.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_preference_under_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L286"
    }
  },
  "configure_mdt_strict_rpf_interface_vrf": {
    "iosxe": {
      "doc": " Enables per-PE LSPVIF interface to implement strict-RPF check.\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mdt_strict_rpf_interface_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L397"
    }
  },
  "configure_mka_macsec": {
    "iosxe": {
      "doc": " Configures MKA and MACSec interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface name\n            keychain_name ('str'): Key Chain name\n            policy_name ('str'): MKA policy name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mka_macsec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L740"
    }
  },
  "configure_mka_policy": {
    "iosxe": {
      "doc": " Configures mka policy on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L561"
    }
  },
  "configure_mka_policy_delay_protection": {
    "iosxe": {
      "doc": " Configures mka policy with delay protection on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be configured\n            interface ('str'): interface to configure\n            cipher ('str'): Cipher suite to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mka_policy_delay_protection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L494"
    }
  },
  "configure_mode_to_eEdge": {
    "iosxe": {
      "doc": " Convert the configuration mode to eEdge\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Convert the configuration mode to eEdge\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mode_to_eEdge",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L165"
    }
  },
  "configure_modify_ikev2_profile": {
    "iosxe": {
      "doc": " Configures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ikev2 profile name\n            remote_addr ('str'): peer/remote ip address\n            remote_auth ('str'): remote authentication method\n            local_auth ('str'): local authentication method\n            keyring ('str'): ikev2 keyring name\n            dpd_hello_time ('int'): DPD R-U-THERE interval\n            dpd_retry_time ('int'): DPD Retry Interval\n            dpd_query ('str'): DPD queires on-demand or periodic\n            lifetime ('int') Optional : configuring session lifetime\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_modify_ikev2_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1298"
    }
  },
  "configure_monitor_capture": {
    "iosxe": {
      "doc": " Configure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            match_type(`str`): Match type of monitor (any/ipv4/ipv6/mac)\n            direction ('str'): Direction of monitor (input/output/both)\n            interface('str'): Interface\n                        \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Configure Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_monitor_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L761"
    }
  },
  "configure_monitor_capture_buffer_size": {
    "iosxe": {
      "doc": " Configure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            size ('str'): butffer size number\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Configure Monitor Capture Buffer Size\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_monitor_capture_buffer_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L859"
    }
  },
  "configure_monitor_capture_limit_packet_len": {
    "iosxe": {
      "doc": " Configure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            length ('str'): Limit packet-len\n            pps ('str'): pps value\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Configure Monitor Capture Buffer Size\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_monitor_capture_limit_packet_len",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L881"
    }
  },
  "configure_monitor_capture_match": {
    "iosxe": {
      "doc": " Configure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            type ('str'): Address type (ipv4/ipv6)\n            src_ip ('str', optional): source start ip, default value is None\n            dst_ip ('str', optional): destination start ip, default value is None\n            host ('str', optional): A single source/destination host, default value is None\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Configure Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_monitor_capture_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L969"
    }
  },
  "configure_monitor_capture_without_match": {
    "iosxe": {
      "doc": " Configure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            direction ('str'): Direction of monitor (input/output/both)\n            interface('str'): Interface\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Configure Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_monitor_capture_without_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L836"
    }
  },
  "configure_mpls_label_mode": {
    "iosxe": {
      "doc": " configure vpn label allocation mode.\n        Args:\n            device (`obj`): Device object\n            mode (`str`): mode used to allocate a VPN label\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_label_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L152"
    }
  },
  "configure_mpls_label_mode_all_vrfs_protocol": {
    "iosxe": {
      "doc": " Config mpls label mode all-vrfs protocol on device\n\n        Args:\n            device (`obj`): Device object\n            address_family ('str'): address-family which is mode to be configured for\n            label_allocation ('str'): label to configured for the address-family\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_label_mode_all_vrfs_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1488"
    }
  },
  "configure_mpls_ldp_graceful_restart": {
    "iosxe": {
      "doc": " Configures mpls ldp graceful restart on device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_ldp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1168"
    }
  },
  "configure_mpls_ldp_nsr": {
    "iosxe": {
      "doc": " Configures mpls ldp nsr on device\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_ldp_nsr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L806"
    }
  },
  "configure_mpls_mtu": {
    "iosxe": {
      "doc": "Configure mpls mtu on interface\n        Example : mpls mtu 1400\n\n    Args:\n        device('obj'): Device object\n        interface('str'): Device interface\n        size('int'): Size of maximum size of the IP packet that can still be sent on a data link, without fragmenting the packet \n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "configure_mpls_mtu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/configure_mpls_mtu/configure.py#L8"
    }
  },
  "configure_mpls_pseudowire_xconnect_on_interface": {
    "iosxe": {
      "doc": " Configures mpls xconnect pseudowire class on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            ip (`str`): IP address to be configured with xconnect\n            vlan (`str`): Vlan id to be configured\n            pw_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_pseudowire_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1440"
    }
  },
  "configure_mpls_static_binding": {
    "iosxe": {
      "doc": "configure mpls static binding\n        Args:\n        device (`obj`): Device \n        neighbor (`str`) : neighbor ip address\n        mask (`str`): mask to be used for ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_static_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1674"
    }
  },
  "configure_mpls_te_explicit_null": {
    "iosxe": {
      "doc": "configure explicit null on Tunnel\n        Args:\n            device (`obj`): Device \n            explicit_null(`str`) : configure explicit null \n            verbatim(`str`) : configure verbatim\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_explicit_null",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1239"
    }
  },
  "configure_mpls_te_forwarding_adjacency": {
    "iosxe": {
      "doc": "configure mpls te forwarding-adjacency\n        Args:\n        device (`obj`): Device \n        intf ('str') : tunnel name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_forwarding_adjacency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1754"
    }
  },
  "configure_mpls_te_globally": {
    "iosxe": {
      "doc": "configure mpls te on device\n\n        Args:\n            device (`obj`): Device object   \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_globally",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L471"
    }
  },
  "configure_mpls_te_on_interface": {
    "iosxe": {
      "doc": " configure mple te on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L390"
    }
  },
  "configure_mpls_te_under_ospf": {
    "iosxe": {
      "doc": "configure mpls te under ospf\n\n        Args:\n            device (`obj`): Device object\n            processid (`str`): process id of ospf\n            router_id ('str'): Router Id\n            area ('str'): ospf area\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_mpls_te_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L416"
    }
  },
  "configure_multicast_routing_mvpn_vrf": {
    "iosxe": {
      "doc": " Enables IP multicast routing for the MVPN VRF specified for the vrf-name argument.\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_multicast_routing_mvpn_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L373"
    }
  },
  "configure_nat64_interface": {
    "iosxe": {
      "doc": " Configure nat64 on interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface/vlan/sub-interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 enable not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1044"
    }
  },
  "configure_nat64_nd_ra_prefix": {
    "iosxe": {
      "doc": " Configure nat64 nd ra prefix  \n        Args:\n            device ('obj'): device to use\n            prefix ('str'): prefix\n            prefix_length ('int'): prefix length\n            interface ('str', optional): interface\n            sub_interface('str', optional): Subinterface to be added to interface name\n            life_time ('int', optional): lifetime\n            int1('str', optional): Interface 1\n            int2('str', optional): Interface 2\n            start_int('str', optional): Starting Interface\n            end_int('str', optional): Ending Interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_nd_ra_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1495"
    }
  },
  "configure_nat64_prefix_stateful": {
    "iosxe": {
      "doc": " Configure nat64 prefix stateful \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n            prefix ('str'): prefix\n            prefix_lenght ('str'): prefix length\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 prefix not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_prefix_stateful",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1086"
    }
  },
  "configure_nat64_translation_timeout": {
    "iosxe": {
      "doc": " Configure nat64 translation timeout \n        Args:\n            device ('obj'): device to use\n            protocol_name ('str'): protocols tcp,udp,icmp,bind\n            timeout_value ('str'): timeout value in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 translation timeout not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_translation_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1411"
    }
  },
  "configure_nat64_v4_list_pool": {
    "iosxe": {
      "doc": " Configure nat64 v4 list pool \n        Args:\n            device ('obj'): device to use\n            acl_list_number_name ('str'): access list number or name\n            pool_name ('str'): any pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 list pool not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_v4_list_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1296"
    }
  },
  "configure_nat64_v4_list_pool_overload": {
    "iosxe": {
      "doc": " Configure nat64 v4 list pool overload\n        Args:\n            device ('obj'): device to use\n            acl_list_number_name ('str'): access list number or name\n            pool_name ('str'): any pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 list pool overload not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_v4_list_pool_overload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1365"
    }
  },
  "configure_nat64_v4_pool": {
    "iosxe": {
      "doc": " Configure nat64 v4 pool \n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): any pool name\n            start_ipv4_address ('str'): ipv4 address\n            end_ipv4_address ('str'): ipv4 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 pool not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_v4_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1246"
    }
  },
  "configure_nat64_v6v4_static": {
    "iosxe": {
      "doc": " Configure nat64 v6v4 static \n        Args:\n            device ('obj'): device to use\n            ipv6_address ('str'): ipv6 address\n            ipv4_address ('str'): ipv4 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v6v4 static not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_v6v4_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1144"
    }
  },
  "configure_nat64_v6v4_static_protocol_port": {
    "iosxe": {
      "doc": " Configure nat64 v6v4 static protocl \n        Args:\n            device ('obj'): device to use\n            protocol ('str'): protocol-tcp/udp\n            ipv6_address ('str'): ipv6 address\n            ipv6_port ('str'): ipv6 port number\n            ipv4_address ('str'): ipv4 address\n            ipv4_port ('str'): ipv4 port number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v6v4 static protocol not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat64_v6v4_static_protocol_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1188"
    }
  },
  "configure_nat_extended_acl": {
    "iosxe": {
      "doc": " configure NAT extended acl\n        Args:\n            device ('obj'): device to execute on\n            acl ('str'): acl name\n            permission ('str'): permit|deny\n            src_ip ('str'): source ip\n            src_wild_mask ('str'): source wild mask\n            dest_ip('str'): destination ip\n            dest_wild_mask('str'): destination wild mask\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L839"
    }
  },
  "configure_nat_in_out": {
    "iosxe": {
      "doc": " Enable nat IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            inside_interface ('str'): enable nat in over this interface, default value is None\n            outside_interface ('str'): enable nat out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: NAT IN OUT not enable over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L12"
    }
  },
  "configure_nat_ipv6_acl": {
    "iosxe": {
      "doc": " Configure NAT ipv6 acl\n        Args:\n            device ('obj'): device to execute on\n            acl_name ('str'): acl name\n            permission ('str'): permit|deny\n            ipv6_address ('str'): IPv6 address\n            sequence_number ('str'): Sequence number\n        Return:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_ipv6_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1464"
    }
  },
  "configure_nat_overload_rule": {
    "iosxe": {
      "doc": " Configure interface overloaad rule\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface which will use for overlad rule\n            access_list_name ('str'): Name of extended access list\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Nat overload rule not connfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L44"
    }
  },
  "configure_nat_pool": {
    "iosxe": {
      "doc": " Configure NAT pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): Name of pool\n            pool_start_ip ('str'): Pool start ip\n            pool_end_ip ('str') : Pool end ip\n            network_mask ('str') : Network mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: NAT pool not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L125"
    }
  },
  "configure_nat_pool_overload_rule": {
    "iosxe": {
      "doc": " Configure dynamic NAT pool overload rule\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): Acl name\n            pool_name ('str'): Pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_pool_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L990"
    }
  },
  "configure_nat_port_route_map_rule": {
    "iosxe": {
      "doc": " Configure NAT port route-map rule\n        Args:\n            device ('obj'): device to use\n            protocol ('str'): Protocol \n            inside_local_ip ('str'): Inside local ip\n            local_port ('str'): Local port\n            inside_global_ip ('str'): Inside global ip\n            global_port ('str'): Global port\n            route_map_name ('str') : Name of route-map\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: NAT port route-map rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_port_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L233"
    }
  },
  "configure_nat_route_map": {
    "iosxe": {
      "doc": " configure NAT route map\n        Args:\n            device ('obj'): device to execute on\n            route_map_name ('str'): route map name\n            permission ('str'): permit|deny\n            sequence_number ('str'): sequence number\n            acl_name ('str'): acl name|acl number\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L783"
    }
  },
  "configure_nat_translation_timeout": {
    "iosxe": {
      "doc": " Configure ip nat translation timeout \n        Args:\n            device ('obj'): device to use\n            protocol_timeout ('str'): udp-timeout | tcp-timeout | timeout\n            timeout_value ('str'): timeout value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: ip nat translation timeout not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nat_translation_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L944"
    }
  },
  "configure_neighbor_under_ospf": {
    "iosxe": {
      "doc": " configure neighbor ip address under ospf process id. \n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n            ip_address (`str`): ip address to be used\n            ospf_cost (`int`,optional): ospf cost\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_neighbor_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1686"
    }
  },
  "configure_network_policy_profile_voice_vlan": {
    "iosxe": {
      "doc": "configure Network-Policy Profile on target device\n        Args:\n            device (`obj`): Device object\n            profile (`int`): profile number\n            vlan (`int`): vlan id\n            cos ('int', optional): cos value (Default is None)\n            dscp ('int', optional): dscp value (Default is None)\n            voice_signaling ('boolean',optional): Flag to configure voice-signaling (Default True)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_network_policy_profile_voice_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L67"
    }
  },
  "configure_no_bgp_default": {
    "iosxe": {
      "doc": " configure no bgp default attributes under bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            ipv4_unicast ('boolean'): disable the default behavior of the BGP routing process \n                                  exchanging IPv4 address info, if set to true\n            route_target_filter ('boolean'): disable automatic route-target filtering globally for all VRFs.\n                                            if set to true.\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command                                            \n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_bgp_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L993"
    }
  },
  "configure_no_boot_manual": {
    "iosxe": {
      "doc": " no boot manual\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_boot_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L14"
    }
  },
  "configure_no_boot_system_switch_all": {
    "iosxe": {
      "doc": " no boot system switch all\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_boot_system_switch_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L301"
    }
  },
  "configure_no_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Enables bgp neighbors if provided otherwise it enabled the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_id ('int'): router bgp_id to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors('list'): Libs with BGP neighbors\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L702"
    }
  },
  "configure_no_shut_ospf": {
    "iosxe": {
      "doc": " Configure no shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_no_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L133"
    }
  },
  "configure_ntp_iburst": {
    "iosxe": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L128"
    },
    "iosxr": {
      "doc": " Configure ntp iburst using ip address\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): IP address to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_iburst",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L89"
    }
  },
  "configure_ntp_master": {
    "iosxe": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L77"
    },
    "iosxr": {
      "doc": " Configure ntp master\n\n        Args:\n            device ('obj'): Device object\n            stratum ('str'): Specify a different stratum level \n                from which NTP clients get their time synchronized. \n                The range is from 1 to 15.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L60"
    }
  },
  "configure_ntp_server": {
    "iosxe": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n            vrf ('str'): Optional VRF to be used during configuration\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L149"
    },
    "iosxr": {
      "doc": " Configures ntp server\n\n        Args:\n            device ('obj'): device to configure on\n            ntp_config ('list'): List containing server ip address\n                ex.)\n                   ntp_config = [ \n                        '192.168.1.1',\n                        '192.168.1.2'\n                    ]\n            auth_key ('list'): Authentication key number corresponding\n                               to server ip\n                ex.)\n                   auth_key = [\n                        '1',\n                        '2',\n                   ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L110"
    }
  },
  "configure_nve_interface": {
    "iosxe": {
      "doc": " Configure nve interface\n\n        Args:\n            device (`obj`): Device object\n            nve_num (`str`): nve interface number\n            src_intf (`str`): source interface\n            protocol (`str`): host-reachability protocol\n            vni_id (`str`): vni id\n            replication_type (`str`): replication type (static | ingress)\n            mcast_group (`str`, optional): Multicast group address , default value is None\n            l3vni (`str`, optional): l3vni enable/disable , default value is False\n            vrf_name (`str`, optional): VRF Name , default value is None\n        \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nve_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L498"
    }
  },
  "configure_nve_interface_group_based_policy": {
    "iosxe": {
      "doc": " Configure group-based-policy for nve interface\n        Args:\n            device (`obj`): Device object\n            nve_num (`int`): nve interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_nve_interface_group_based_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L660"
    }
  },
  "configure_ospf_area_type": {
    "iosxe": {
      "doc": " configure area type under ospf\n        Args:\n            device ('obj'): device to execute on\n            ospf_process_id ('int'): process id of ospf  \n            area_id ('int'): area number\n            area_type ('str'): area type of ospf\n            ex:\n                stub or nssa\n            area_subcmd ('str'): sub command for area type\n            ex:\n                area 5 stub <no-summary/no-ext-capability>\n                area 5 nssa < default-information-originate/no-ext-capability/no-redistribution/\n                            no-summary/translate>\n            nssa_translate_subcmd ('str'): nssa translate sub commands\n        Return:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure area type under ospf\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_area_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1508"
    }
  },
  "configure_ospf_bfd": {
    "iosxe": {
      "doc": "configure ospf ip bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1052"
    }
  },
  "configure_ospf_cost": {
    "iosxe": {
      "doc": "configure ospf cost\n\n        Args:\n            device (`obj`): Device object\n            ospf_cost (`int`): Ospf cost value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L294"
    }
  },
  "configure_ospf_include_connected_in_bgp": {
    "iosxe": {
      "doc": " redistributes IPv6 routes under bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process id\n            address_family ('str'): address family to configure under\n            vrf ('str'): vrf under which routes to be redistribute\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_include_connected_in_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1159"
    }
  },
  "configure_ospf_interface_metric_cost": {
    "junos": {
      "doc": " Configure ospf interface metric cost\n\n        Args:\n            device ('obj'): Device to configure\n            interface ('str'): Interface to configure\n            area ('str'): Area\n            cost_type ('str'): Cost type\n            cost ('int'): Cost\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_interface_metric_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L44"
    }
  },
  "configure_ospf_internal_external_routes_into_bgp": {
    "iosxe": {
      "doc": " redistributes all(internal and external) OSPF routes into BGP\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process_id\n            address_family ('str'): address family to configure under\n            vrf ('str'): vrf under which routes to be redistribute\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_internal_external_routes_into_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1124"
    }
  },
  "configure_ospf_max_lsa_limit": {
    "iosxe": {
      "doc": "configure ospf max lsa limit\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospf process id\n            lsa_limit(int): configure the maximum lsa limit\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_max_lsa_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1877"
    }
  },
  "configure_ospf_max_metric_router_lsa_on_startup": {
    "iosxe": {
      "doc": "Configure max-metric router-lsa on start-up\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            metric_value (`int`): Metric value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_max_metric_router_lsa_on_startup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L22"
    }
  },
  "configure_ospf_message_digest_key": {
    "iosxe": {
      "doc": "configure ospf message digest key\n\n        Args:\n            device (`obj`): Device object\n            key (`str`): key value\n            message_digest_key (`str`): message digest key value\n            md5 (`str`): md5 value\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_message_digest_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L508"
    }
  },
  "configure_ospf_network_non_broadcast": {
    "iosxe": {
      "doc": "configure ospf non broadcast network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_network_non_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1628"
    }
  },
  "configure_ospf_network_point": {
    "iosxe": {
      "doc": "configure ospf point to point network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_network_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L994"
    }
  },
  "configure_ospf_networks": {
    "iosxe": {
      "doc": " Configures ospf on networks\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            ip_address ('list'): List of ip_address' to configure\n            netmask ('str'): Netmask to use\n            area ('str'): Area to configure under\n            router_id('str'): ospf router id\n            bfd ('str', optional) : bfd name, default value is None\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L324"
    }
  },
  "configure_ospf_nsf_ietf": {
    "iosxe": {
      "doc": " configure nsf ietf under ospf\n        Args:\n            device ('obj'): device to execute on\n            ospf_process_id ('int'): process id of ospf\n        Return:\n            None\n        Raises:\n            SubCommandFailure :Failed to configure nsf ietf under ospf\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_nsf_ietf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1486"
    }
  },
  "configure_ospf_passive_interface": {
    "iosxe": {
      "doc": "Configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): ospf process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L212"
    },
    "junos": {
      "doc": "configure passive interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n            area (`str`): IP address of area\n\n        Returns:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/configure.py#L12"
    }
  },
  "configure_ospf_redistributed_connected": {
    "iosxe": {
      "doc": " configure redistribute connected under ospf\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): process id of ospf\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_redistributed_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1083"
    }
  },
  "configure_ospf_redistributed_static": {
    "iosxe": {
      "doc": " configure redistribute static under ospf\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): process id of ospf\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_redistributed_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1407"
    }
  },
  "configure_ospf_routing": {
    "iosxe": {
      "doc": " Configures ospf and ip routing on device\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            router_id ('str', optional): Router id to use, default value is None\n            router_config ('bool', optional): To configure router-id or not, \n                                              default value is None\n            nsf ('bool', optional): nsf configuration, default value is None\n            nsf_options ('str', optional): nsf params, default value is None\n            nsr ('bool', optional): nsf configuration, default value is None\n            nsr_options ('str', optional): nsr params, default value is None\n            vrf_name ('str', optional): vrf name, default value is None\n            vrf_id ('str', optional): vrf id, default value is None\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L706"
    }
  },
  "configure_ospf_routing_on_interface": {
    "iosxe": {
      "doc": " Configures ospf and ip routing on Interface\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Interface to use\n            ospf_process_id ('str'): Process id for ospf process\n            areaid ('str'): Area id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_routing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L817"
    }
  },
  "configure_ospf_vrf": {
    "iosxe": {
      "doc": " Configures router-id in ospf vrf\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            vrf('str'): vrf id for ospf process\n            router_id('str'): ospf router id\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospf_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L362"
    }
  },
  "configure_ospfv3": {
    "iosxe": {
      "doc": "configure ospf ip bfd\n\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospfv3 process id\n            router_id (`str`, optional): Router id, default value is None\n            vrf('str', optional): vrf id for ospf process\n            nsr (`Bool`, optional): Nsr to be configured, default value is None\n            graceful_restart (`Bool`, optional): Graceful restart to be \n                                                 configured,default value is None\n            address_family (`str`, optional): Address family to be configured,\n                                              default value is None\n            bfd ('str', optional) : bfd name, default value is None\n            traffic_type('str' optional) : type of traffic\n            adjacency('bool' optional): option to log adjacency changes\n            redistribute('bool' optional): option to redistribute routes\n            route_method('str' optional): route type to be redistributed\n            metric('int' optional): route metric\n            metric-type('int' optional): route metric type\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L638"
    }
  },
  "configure_ospfv3_max_lsa_limit": {
    "iosxe": {
      "doc": "configure ospfv3 max lsa limit\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospfv3 process id\n            lsa_limit(int): configure the maximum lsa limit\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3_max_lsa_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1857"
    }
  },
  "configure_ospfv3_network_point": {
    "iosxe": {
      "doc": "configure ospfv3 point to point network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3_network_point",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1163"
    }
  },
  "configure_ospfv3_redistributed_connected": {
    "iosxe": {
      "doc": " configure redistribute connected under ospf\n        Args:\n            device ('obj'): device to execute on\n            ospf_process_id (int): process id of ospf\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ospfv3_redistributed_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1748"
    }
  },
  "configure_pac_key": {
    "iosxe": {
      "doc": " Configure pack key on a given Radius server\n        Args:\n            device ('obj'): device to use\n            server_name ('str'):  Name for the radius server configuration\n            key ('str'): Per-server encryption key\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure pac key\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pac_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L217"
    }
  },
  "configure_pae": {
    "iosxe": {
      "doc": " pae\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : : Failed configuring device\n    ",
      "module_name": "telemetry.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pae",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/configure.py#L6"
    }
  },
  "configure_parameter_map_subscriber": {
    "iosxe": {
      "doc": "Configure parameter map subscriber\n        Args:\n            device ('obj'): device to use\n            parameter_map_name (`str`): Parameter Map name to be configured\n            map_num ('int'): Map number to be configured\n            filter_type ('str'): Filter type to be configured\n            parameter_type ('str'): parameter type to be configured\n            parameter_name ('str'): Parameter name to be configured\n            action_num ('int'): Action number to be configure\n            template_type ('str'): Template type to be configured\n            template_name ('str'): Template name to be configured\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure parameter map subscriber\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_parameter_map_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1584"
    }
  },
  "configure_pbr_route_map": {
    "iosxe": {
      "doc": " Configure route-map\n\n        Args:\n            device ('obj'): Device object\n            route_map_name ('str'): Name of Route-map to be configured.\n            acl_name ('str'): Name of ACL to be used with 'match' for the route_map\n            next_hop_ip ('str'): Next-hop ip address to be used in 'set' actions.\n            default_next_hop ('str', optional): Enable to use 'default next-hop' action.\n                                                'next_hop_ip' Ip address will be used. Default is None.\n            vrf ('str',optional): Vrf name to be used with 'set vrf' or other vrf related actions.\n            set_int ('str',optional): Interface name to be used with 'set interface' action.\n            set_vrf ('str',optional): Enable to use 'set vrf' action. Default is None.\n            seq_num ('str',optional): Sequence number for the rule. Default is '10'.\n            rule_type ('str', optional): (permit | deny) Permission to be applied for the specific sequence.\n                                         Default is 'permit'.\n            is_ipv6 ('bool',optional): (True | False) 'True' for ipv6 pbr configuration. Default is False.\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pbr_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L85"
    }
  },
  "configure_pim_ssm_default": {
    "iosxe": {
      "doc": " Configure PIM SSM Default\n    Example : ip pim ssm default\n\n        Args:\n            device ('obj'): Device object\n           \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pim_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L197"
    }
  },
  "configure_pki_authenticate": {
    "iosxe": {
      "doc": "\n        Configuring crypto pki authenticate server\n        Args:\n            device ('obj'): Device object\n            tp_name ('str'): Name of the trsutpoint\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pki_authenticate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L618"
    }
  },
  "configure_pki_authenticate_certificate": {
    "iosxe": {
      "eaptls": {
        "doc": " Pastes certificate on device\n\n        Args:\n            device (`obj`): Device object\n            certificate ('str'): Certificate to be pasted\n            label_name ('str'): Label name\n\n        Returns:\n            None\n\n        Raise:\n            SubCommandFailure: Failed to paste certificate on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_pki_authenticate_certificate",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L38"
      }
    }
  },
  "configure_pki_enroll": {
    "iosxe": {
      "doc": "\n        Configuring crypto pki enroll\n        Args:\n            device ('obj'): Device object\n            tp_name ('str'): name of the trustpoint\n            password ('str'): password to be configured for the pki enroll\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pki_enroll",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L548"
    }
  },
  "configure_pki_enroll_certificate": {
    "iosxe": {
      "eaptls": {
        "doc": " Enrolls certificate on device and returns the certificate\n\n        Args:\n            device (`obj`): Device object\n            label_name ('str'): Label name\n\n        Returns:\n            Enrolled certificate\n\n        Raise:\n            SubCommandFailure: Failed to enroll certificate on device and return it\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_pki_enroll_certificate",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L86"
      }
    }
  },
  "configure_pki_export": {
    "iosxe": {
      "doc": "\n        Configuring crypto pki export\n        Args:\n            device ('obj'): Device object\n            tp_name ('str'): Name of the trustpoint\n            export_type ('str'): Type of import [certificate, pkcs12, pem]\n            pkcs_media_type ('str'): Filesytem for importing pkcs12 file\n            pkcs_file ('str'): Pkcs file name that needs import\n            pkcs_url ('str'): pkcs file url\n            file_password ('str'): Passphrase used to protect the pkcs12 file\n            pem_option ('str'): Different Pem import options\n            pem_media_type ('str'): Filesytem for importing pem file\n            pem_file ('str'): pem file name that needs import\n            pem_url ('str'): pem file url\n            prvt_key_encry ('str'): Encrypt the private key\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pki_export",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L778"
    }
  },
  "configure_pki_export_pem": {
    "iosxe": {
      "eaptls": {
        "doc": " Generates certificate on device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            Certificate or None\n\n        Raise:\n            SubCommandFailure: Failed to generate certificate on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_pki_export_pem",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L14"
      }
    }
  },
  "configure_pki_import": {
    "iosxe": {
      "doc": "\n        Configuring crypto pki authenticate server\n        Args:\n            device ('obj'): Device object\n            tp_name ('str'): Name of the trustpoint\n            import_type ('str'): Type of import [certificate, pkcs12, pem]\n            pkcs_media_type ('str'): Filesytem for importing pkcs12 file\n            pkcs_file ('str'): Pkcs file name that needs import\n            pkcs_url ('str'): pkcs file url\n            file_password ('str'): Passphrase used to protect the pkcs12 file\n            pem_option ('str'): Different Pem import options\n            pem_media_type ('str'): Filesytem for importing pem file\n            pem_file ('str'): pem file name that needs import\n            pem_url ('str'): pem file url\n            is_hierarchy ('str'): update all hierarchy chain ca's\n            is_pem_exportable_url ('bool'): True if pem is import as exportable\n            is_pem_usage_keys_url ('bool'): True if pem is import with usage-keys url\n            is_pem_usage_keys_exportable_url ('bool'): True if pem is import with usage-keys as exportable\n            pem_import_cert ('bool'): Defaults to None\n            is_key_replace ('string'): Defauls to 'yes'\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pki_import",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L656"
    }
  },
  "configure_pki_trustpoint": {
    "iosxe": {
      "doc": " Configures Trustpoint related config on device\n\n        Args:\n            device ('obj'): device to use\n            key_type ('str'): Key type to be generated\n            label_name ('str'): Label name\n            modulus_size ('str'): Modulus size to be configured\n            enrollment_type ('str'): Enrollment type to be configured\n            subject_line ('str'): Subject Line to be configured\n            revocation_check ('str'): Revocation check to be configured\n            storage_type ('str'): Storage type to be configured\n\n       Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pki_trustpoint",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L667"
    }
  },
  "configure_platform": {
    "iosxe": {
      "doc": " Configures platform with a license\n        Example : platform hsec-license-release\n\n        Args:\n            device ('obj'): device to use\n            license ('str'): license name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L329"
    }
  },
  "configure_platform_qos_port_channel_aggregate": {
    "iosxe": {
      "doc": " platform qos port-channel-aggregate <portchannel_number>\n        Args:\n            device (`obj`): Device object\n            portchannel_number ('str') : Port-channel number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_platform_qos_port_channel_aggregate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L153"
    }
  },
  "configure_platform_shell": {
    "iosxe": {
      "doc": " Configure platform shell\n    \n    Args:\n        device ('obj'): device to use\n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_platform_shell",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2748"
    }
  },
  "configure_platform_sudi_cmca3": {
    "iosxe": {
      "doc": " platform sudi cmca3\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "sudi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_platform_sudi_cmca3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/configure.py#L6"
    }
  },
  "configure_policy_map": {
    "iosxe": {
      "cat9500": {
        "doc": " Configures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_name('str) : name of the policy name\n             class_map_list('list'): list of data type hold number class map information\n             [\n             {\n             class_map_name('str') : name of the class\n             policer_val('int',optional): police,\n             priority_level('int',optional): 1 to 7,\n             bandwidth_percent('int',optional): percentage value\n             shape_average('str',optional): shape value\n             child_policy('str',optional): name of the child policy\n             } \n             ]\n\n\n        example:\n             class_map_list=[\n             {\n             'class_map_name':'test1',\n             'policer_val':2000000000,\n             'priority_level':1 to 7,\n             'bandwidth_percent':10,\n             'shape_average':2000000000,\n             'child_policy':'child_policy'\n             }\n             ]\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_policy_map",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/configure.py#L90"
      },
      "doc": " Configures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_name('str) : name of the policy name\n             class_map_list('list'): list of data type hold number class map information\n             [\n             {\n             class_map_name('str') : name of the class\n             policer_val('int',optional): police rate value,\n             match_mode('list',optional): match mode name for cos,\n             matched_value('list',optional): match mode values for cos traffic_class and dscp,\n             table_map_name('str',optional): to set the table name for policy_map,\n             table_map_mode('str',optional : name of the tablemode\n             } ]\n\n        example:\n             class_map_list=[{'class_map_name':'test1',\n             'policer_val':2000000000,\n             'match_mode':['dscp','cos']\n             'matched_value':['cs1','5']\n             'table_map_name':'table1'\n             'table_map_mode':'dscp'}]\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L12"
    }
  },
  "configure_policy_map_control": {
    "iosxe": {
      "doc": " Configures policy-map type control\n        Example : policy-map type control subscriber BUILTIN_AUTOCONF_POLICY\n                event identity-update match-first\n                1 class always do-all\n                1 activate interface-template DMP_INTERFACE_TEMPLATE\n\n        Args:\n            device ('obj'): device to use\n            subscriber ('str'): name of identity policy-map\n            class_number ('int'): class number (Range: 1-254)\n            action_number ('int'): action number (Range 1-254)\n            template_name ('str'): name of an interface template\n            match_type ('str'): match classes to evaluate (Eg. match-all, match-first)\n            action ('str'): execute action (Eg. do-all, do-until-failure, do-until-success)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2632"
    }
  },
  "configure_policy_map_on_device": {
    "iosxe": {
      "doc": " Configure policy-map type on Device\n    Args:\n        device (`obj`): Device object\n        policy_map_name ('str'): policy-map name to configure\n        class_map_name ('str'): class map name to configure\n        target_bit_rate ('str'): target bit rate to configure (in bits/sec)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring policy-map on device\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L234"
    }
  },
  "configure_policy_map_type_service": {
    "iosxe": {
      "doc": " Configure policy-map type service on Device\n    Args:\n        device ('obj'): Device object\n        policy_map_name ('str'): policy-map name to configure\n        pppoe_service_name('str',optional): service name to configure\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed to configure policy-map service\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map_type_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L326"
    }
  },
  "configure_policy_map_with_pps": {
    "iosxe": {
      "doc": " Configures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_name('str) : name of the policy name\n             class_map_name('str'): class map information\n             police_rate('int'): police rate details\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_policy_map_with_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L350"
    }
  },
  "configure_port_channel_lacp_max_bundle": {
    "iosxe": {
      "doc": " Configure lacp_max_bundle on the Port-channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n            lacp_bundle_num('str'): <1-8>  Max number of ports to bundle in this Port Channel\n            Example : interface Port-channel {100}\n                         lacp max-bundle {1}\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_channel_lacp_max_bundle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4938"
    }
  },
  "configure_port_channel_mode": {
    "iosxe": {
      "doc": " configure port channel mode\n\n        Args:\n            device (`obj`): Device object\n            mode (`str`): port-channel mode auto/load-balance\n            lb_method(`str'): portchannel load balance method \n            ex.)    \n                    dst-ip                 Dst IP Addr\n                    dst-mac                Dst Mac Addr\n                    dst-mixed-ip-port      Dst IP Addr and TCP/UDP Port\n                    dst-port               Dst TCP/UDP Port\n                    extended               Extended Load Balance Methods\n                    src-dst-ip             Src XOR Dst IP Addr\n                    src-dst-mac            Src XOR Dst Mac Addr\n                    src-dst-mixed-ip-port  Src XOR Dst IP Addr and TCP/UDP Port\n                    src-dst-port           Src XOR Dst TCP/UDP Port\n                    src-ip                 Src IP Addr\n                    src-mac                Src Mac Addr\n                    src-mixed-ip-port      Src IP Addr and TCP/UDP Port\n                    src-port               Src TCP/UDP Port\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_channel_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L132"
    }
  },
  "configure_port_channel_persistent": {
    "iosxe": {
      "doc": " Configures port-channel persistent\n        Args:\n            device ('obj'): device to use\n            channel_group_num ('int'):  Channel group number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_channel_persistent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2678"
    }
  },
  "configure_port_channel_standalone_disable": {
    "iosxe": {
      "doc": " Configure no port-channel standalone disable command on Port-channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n            Example : interface Port-channel {100}\n                         no port-channel standalone-disable\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_channel_standalone_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4481"
    }
  },
  "configure_port_sgt": {
    "iosxe": {
      "doc": " Configure port sgt on physical interface\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            sgt ('int'): Security Group Tag (SGT) value\n            trusted('bool'): Trusted/Untrusted\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure port sgt\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_port_sgt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L242"
    }
  },
  "configure_power_efficient_ethernet_auto": {
    "iosxe": {
      "doc": " configure power efficient ethernet auto\n\tArgs:\n        device ('obj'): Device object\n        interface ('str'): interface\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_power_efficient_ethernet_auto",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7251"
    }
  },
  "configure_power_inline": {
    "iosxe": {
      "doc": " Configure power inline on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to configure\n            mode ('str') : Mode to configure (Default is auto)\n            watts_value ('int') : Power value to configure\n            action ('str') : Commands to configure under police mode\n            portlevel_config ('str') : Commands to configure under port mode\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_power_inline",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5313"
    }
  },
  "configure_power_inline_auto_max": {
    "iosxe": {
      "doc": " Configures power inline auto max\n        Args:\n            device ('obj'): device to use\n            interface ('obj'): interface name \n            time ('str'): <4000-60000>  milli-watt \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_power_inline_auto_max",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3030"
    }
  },
  "configure_pppoe_enable_interface": {
    "iosxe": {
      "doc": " Configure pppoe enable group on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            name (`str`): pppoe/bba group name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pppoe_enable_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4545"
    }
  },
  "configure_prefix_list_prefix_list": {
    "iosxe": {
      "doc": " Configures prefix-list on device\n\n        Args:\n            device('obj'): device to configure on\n            prefix_list('list'): prefix list which contains dictionary\n                dictionary contains following 3 keys:\n                    prefix_list ('str'): prefix list value\n                    seq ('int'): sequence number\n                    route ('str'): IP address\n                ex.)\n                   [ {\n                        'prefix_list': 1,\n                        'seq': 5,\n                        'route': '172.16.0.0/24'\n                    },\n                    {\n                        'prefix_list': 2,\n                        'seq': 5,\n                        'route': '172.16.1.0/24'\n                    },\n                    {\n                        'direction': 'in',\n                        'permit': 'deny',\n                        'route': '10.94.12.1',\n                        'comparison_operator': '<',\n                        'comparison_value': 36\n                    } \n                    ]\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_prefix_list_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L16"
    }
  },
  "configure_prefix_list_prefix_list_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure prefix list to bgp neighbor\n\n        Args:\n            device ('obj'): Device object\n            bgp_as (str): bgp AS number\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            prefix_list ('list'): A list of dictionaries following below format:\n                [{\n                    'neighbor': neighbor address,\n                    'prefix_list': prefix,\n                    'direction': direction\n                }]\n            ex.) \n                [\n                    {\n                        'neighbor': '192.168.1.4',\n                        'prefix_list': 'in'\n                        'direction': 'in'\n                    },\n                    {\n                        'neighbor': '192.168.1.5',\n                        'prefix_list': 'out'\n                        'direction': 'out'\n                    }\n                ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: prefix_list is not a list\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_prefix_list_prefix_list_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L213"
    }
  },
  "configure_private_vlan_on_vlan": {
    "iosxe": {
      "doc": " configure switchport mode trunk to the interface\n        Args:\n            device (`obj`): Device object\n            vlan1 (`str`): vlan to be added to the port\n            vlan2 (`str`): vlan to be added to the port\n        Returns:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_private_vlan_on_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L418"
    }
  },
  "configure_process_cpu_statistics_limit_entry_percentage_size": {
    "iosxe": {
      "doc": " Configures process cpu  statistics limit entry-percentage size\n        Example : process cpu  statistics limit entry-percentage <10> size <100>\n        Args:\n            device ('obj'): device to use\n            entry percentage ('str'): default entry percentage (1-100)\n            size('str'):default interval (5-86400)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_process_cpu_statistics_limit_entry_percentage_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3785"
    }
  },
  "configure_process_cpu_threshold_type_rising_interval": {
    "iosxe": {
      "doc": " Configures process cpu threshold type  rising interval\n        Example : no process cpu threshold type {utilization_level} rising {rising_level} interval {interval}\n        Args:\n            device ('obj'): device to use\n            utilization_level ('str'): interrupt/process/total cpu level utilization\n            rising_level ('str'): default rising level(1-100)\n            interval('str'):default interval (5-86400)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_process_cpu_threshold_type_rising_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3745"
    }
  },
  "configure_pseudowire_encapsulation_mpls": {
    "iosxe": {
      "doc": " Configures pseudowire encapsulation mpls\n\n        Args:\n            device (`obj`): Device object\n            pseudowire_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pseudowire_encapsulation_mpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1319"
    }
  },
  "configure_ptp_8275_holdover_spec_duration": {
    "iosxe": {
      "doc": " PTP 8275 holdover spec-duration configuration\n        Args:\n            device (`obj`): Device object\n            holdover (`int`): PTP holdover spec-duration in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_8275_holdover_spec_duration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L352"
    }
  },
  "configure_ptp_8275_local_priority": {
    "iosxe": {
      "doc": " PTP 8275 local priority global and interface configuration\n        Args:\n            device (`obj`): Device object\n            priority (`str`): PTP local priority\n            intf_list ('list', optional): PTP interface list, default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_8275_local_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L256"
    }
  },
  "configure_ptp_aes67_rates": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n            intf_list ('list'): PTP interface list\n            sync (`int`): PTP sync interval. Default: 0.\n            delay (`int`): PTP delay-req interval. Default: 0.\n            announce (`int`): PTP announce interval. Default: 0.\n            announce_timeout (`int`): PTP announce timeout. Default: 3.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_aes67_rates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L191"
    }
  },
  "configure_ptp_domain": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            domain (`str`): PTP domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_domain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L83"
    }
  },
  "configure_ptp_dscp_message": {
    "iosxe": {
      "doc": " PTP dscp message configuration\n        Args:\n            device (`obj`): Device object\n            dscp_event ('str'): PTP DSCP event message\n            dscp_general ('str'): PTP DSCP general message\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_dscp_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L122"
    }
  },
  "configure_ptp_modes": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_modes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L31"
    }
  },
  "configure_ptp_priority": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            priority1 (`str`): PTP priority1\n            priority2 (`str`): PTP priority2\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L100"
    }
  },
  "configure_ptp_role_primary": {
    "iosxe": {
      "doc": " PTP role interface configuration\n        Args:\n            device (`obj`): Device object\n            intf_list ('list'): PTP interface list\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_role_primary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L308"
    }
  },
  "configure_ptp_transport_ipv4": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            transport (`str`): PTP transport l3 mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ptp_transport_ipv4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L66"
    }
  },
  "configure_pvlan_primary": {
    "iosxe": {
      "doc": " Configures Primary Private Vlan\n        Args:\n            device ('obj'): device to use\n            primary_vlan ('str'): Primary private vlan\n            secondary_vlan ('str',optional): Secondary isolated/community vlan\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_primary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L212"
    }
  },
  "configure_pvlan_svi_mapping": {
    "iosxe": {
      "doc": " Configures Private Vlan Mapping on SVI\n        Args:\n            device ('obj'): device to use\n            svi_vlan ('str'): SVI interface\n            mapping_vlan ('str'): Private vlan to map to\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_svi_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L188"
    }
  },
  "configure_pvlan_type": {
    "iosxe": {
      "doc": " Configures Isolated Private Vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): Vlan id\n            pvlan_type ('str'): Private vlan type (i.e isolated, primary, community)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_pvlan_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L267"
    }
  },
  "configure_qos_policy": {
    "iosxe": {
      "doc": " Configures the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            access_type ('str') : type of interface or VC\n            policy_name ('str') : name of the policy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_qos_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L32"
    }
  },
  "configure_radius_attribute_25": {
    "iosxe": {
      "doc": "\n    Configure radius-server attribute 25 access-request include\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring radius-server attribute 25 access-request include\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_25",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1935"
    }
  },
  "configure_radius_attribute_31_mac_format": {
    "iosxe": {
      "doc": "\n    Configure radius-server attribute 31 mac format ietf upper-case\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring radius-server attribute 31 mac format ietf upper-case\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_31_mac_format",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1955"
    }
  },
  "configure_radius_attribute_31_send_mac": {
    "iosxe": {
      "doc": "\n    Configure radius-server attribute 31 send nas-port-detail mac-only\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring radius-server attribute 31 send nas-port-detail mac-only\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_31_send_mac",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1975"
    }
  },
  "configure_radius_attribute_6": {
    "iosxe": {
      "doc": "\n    Configure radius attribute 6 on-for-login-auth\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L351"
    }
  },
  "configure_radius_attribute_8": {
    "iosxe": {
      "doc": "\n    Configure radius-server attribute 8 include-in-access-req\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring radius-server attribute 8 include-in-access-req\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_attribute_8",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1915"
    }
  },
  "configure_radius_automate_tester": {
    "iosxe": {
      "doc": " configure Radius Automate Tester. It polls the radius to make sure it is alive.\n    Args:\n        device (`obj`): Device object\n        server_name ('str'): Radius server name\n        username ('str'): Identity Username to query radius server\n        idle_time ('int',optional): Radius polling interval in min.\n                                  Default: None. Device will add idle time depending on IOS version\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_automate_tester",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L759"
    }
  },
  "configure_radius_group": {
    "iosxe": {
      "doc": " \n    Configure aaa radius server group\n    Args:\n        device ('obj'): Device object\n        server_config('dict'): Dictionary of configurations for server\n            dictionary contains following keys:\n                server_group ('str'): Radius server group name\n                server_name ('str'): Radius server name\n                vrf('str'):  vrf name\n                mgmt_intf('str'):  Management interface\n                retransmit('int'):  <1-100>  Number of retries for a transaction (default is 3)\n                timeout('int'): <1-1000>  Wait time (default 5 seconds)\n                ip_addr ('str'): ISE IP\n                key('str'): Server key\n    Returns:\n        configurations list\n    Raises:\n        SubCommandFailure\n    Example:\n        server_config = {\n                    server_group = \"sg1\",\n                    server_name = \"sname1\",\n                    vrf = \"vrf1\",\n                    mgmt_intf = \"GigabitEthernet0/0\",\n                    retransmit = 0,\n                    timeout = 10,\n                    ip_addr = \"11.19.99.99\",\n                    key = \"cisco123',\n                },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L132"
    }
  },
  "configure_radius_interface": {
    "iosxe": {
      "doc": " Configure Radius Interface\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L652"
    }
  },
  "configure_radius_interface_vrf": {
    "iosxe": {
      "doc": " Configure Radius Interface via vrf\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n        vrf('str'): VRF name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface via vrf\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_interface_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L807"
    }
  },
  "configure_radius_server": {
    "iosxe": {
      "doc": " Configure radius server\n\n        Args:\n            device ('obj'): Device object\n            server_config('dict'): Dictionary of configuration for server\n                dictionary contains following keys:\n                    server_name ('str'): Radius server name\n                    ipv4 (Hostname or A.B.C.D):  IPv4 Address of radius server\n                    ipv6 (Hostname or X:X:X:X::X):  IPv6 Address of radius server\n                    auth_port (<0-65534>): UDP port for RADIUS authentication server\n                    acct_port (<0-65534>): UDP port for RADIUS accounting server\n                    key_encryption (int(0,6,7)): 0(UNENCRYPTED key), 6(ENCRYPTED key), 7(HIDDEN key)\n                    key (LINE): Radius server pre shared secret key\n                    timeout (<1-1000>): Time to wait (in seconds) for this radius server to reply\n                    retransmit (<0-100>): Number of retries to active server (overrides default)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n        \n        ex.) \n            {\n                'server_name': 'radius_server',\n                'ipv4': '11.15.23.213',\n                'auth_port': '1812,\n                'acct_port': '1813',\n                'key_encryption': '7',\n                'key': 'Cisco',\n                'timeout': '100',\n                'retransmit': '5'\n            }\n\n        configures below cli commands:\n            'radius server radius_server',\n            'address ipv4 11.15.23.213 auth-port 1812 acct-port 1813',\n            'key 7 Cisco',\n            'timeout 100',\n            'retransmit 5'\n    ",
      "module_name": "server.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#L72"
    }
  },
  "configure_radius_server_accounting_system": {
    "iosxe": {
      "doc": " configure radius-server accounting system host-config\n    Args:\n        device ('obj'): Device object\n        minutes ('int): Specify timeout in minutes\n        seconds ('int'): Specify timeout in seconds\n        privilege_level ('int'): Specify privilege level for line\n        auth_list ('str') : Specify authentication list\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring radius-server accounting system host-config\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server_accounting_system",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1225"
    }
  },
  "configure_radius_server_dead_criteria": {
    "iosxe": {
      "doc": " To configure radius server dead criteria\n    Args:\n        device (`obj`): Device object\n        server_time ('int'): time during which no response must be recieved from the server\n        tries ('int',optional): Number of transmits to server without responses before marking it as dead. Defaults to 1\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring radius server dead criteria\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server_dead_criteria",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1165"
    }
  },
  "configure_radius_server_deadtime": {
    "iosxe": {
      "doc": " To configure radius server deadtime\n    Args:\n        device (`obj`): Device object\n        server_time ('int'): Time to stop using a server that doesn't respond\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring radius server deadtime\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server_deadtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1211"
    }
  },
  "configure_radius_server_group": {
    "iosxe": {
      "doc": " Configure aaa radius server group\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n        rad_server (`str`): Radius Server\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_radius_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L440"
    }
  },
  "configure_redestribute_ospf_metric_in_bgp": {
    "iosxe": {
      "doc": " Configure redistributes ospf metric route under bgp\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process id\n            metric('int): Metric for redistributed routes\n                ex:)\n                    <0-4294967295>  Default metric\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_redestribute_ospf_metric_in_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2143"
    }
  },
  "configure_redistribute_connected": {
    "iosxe": {
      "doc": " configure redistribute connected in bgp\n\n        Args:\n            device ('obj'): device to use\n            bgp_as ('str'): bgp as number\n            address_family ('str'): address family under bgp \n            vrf ('str'): vrf in address_family default to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring redistribute\n                            connected under bgp address_family\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_redistribute_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L921"
    }
  },
  "configure_replace": {
    "iosxe": {
      "doc": " Restore config from local file\n        Args:\n            device ('obj'): Device object\n            path ('str'): directory\n            file ('str'): file name\n            config_replace_options ('str'): configure replace command suboption\n                ex:)\n                    force       Forcibly replace without prompting for user input\n                    ignorecase  Ignore case\n                    list        List the commands applied in each pass\n                    nolock      Do not acquire config lock\n                    revert      Options for reverting back to the original config\n                    time        Time for which to wait for confirmation\n            time ('int', optional): config_replace_options selected as time (default is 1 second)\n            timeout ('int'): Timeout for applying config (default is 30 second)\n            \n        Returns:\n            execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_replace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L227"
    }
  },
  "configure_replication_type_on_evi": {
    "iosxe": {
      "doc": " Configure replication-type on evi\n        Args:\n            device ('obj'): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            replication_type ('str'): replication type\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure replication-type on evi\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_replication_type_on_evi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L629"
    }
  },
  "configure_rip": {
    "iosxe": {
      "doc": "configure rip\n        Args:\n            device ('obj'): Device object\n            network ('str'): network address\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_rip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L112"
    }
  },
  "configure_ripng": {
    "iosxe": {
      "doc": "unconfigure ripng\n        Args:\n            device ('obj'): Device object\n            pid ('str'): ripng process id\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_ripng",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L31"
    }
  },
  "configure_route_map": {
    "iosxe": {
      "doc": " configure route map\n\n        Args:\n            device ('obj'): device to execute on\n            route_map_name ('int'): route map name\n            permit ('int'): Sequence to insert to existing route-map entry\n            prefix_list_name ('str',optional): prefix-list name to be used\n            acl_name ('str',optional): IPv4 ACL to be used\n            acl_namev6 ('str',optional): IPv6 ACL to be used\n            ip ('str',optional): ip address\n            ipv6 ('str',optional): ipv6 address\n            interface ('str',optional): Interface to be used\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L941"
    }
  },
  "configure_route_map_route_map": {
    "iosxe": {
      "doc": " Configures route-map on device\n\n        Args:\n            device('obj'): device to configure on\n            route_map('list'): route-map list which contains dictionary\n                dictionary contains following 6 keys:\n                    seq ('int'): sequence number\n                    route_map ('str'): route-map name\n                    prefix_list ('str'): prefix-list value\n                    set_community ('str'): set community value\n                    match_community ('str'): match community value\n                    set_as_path ('str') : set as-path values\n                ex.)\n                    [\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test_out',\n                        'match_community': 2\n                    },\n                    {\n                        'seq': 10,\n                        'route_map': 'community_test',\n                        'set_community': '62000:1'\n                    },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring route map\n    ",
      "module_name": "route_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/route_map/configure.py#L12"
    }
  },
  "configure_route_map_route_map_to_bgp_neighbor": {
    "iosxe": {
      "doc": " Configure route map to bgp neighbors\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): BGP AS number\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            vrf_address_family ('str'): address family for vrf\n            route_map ('list'): route map list which contains dictionary\n                dictionary contains following 5 keys:\n                    neighbor ('str'): neighbor value\n                    route_map ('str'): route-map name\n                    direction ('str'): direction type\n            ex.)\n                [\n                    {\n                        'neighbor': '192.168.60.10',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.60.11',\n                        'route_map': 'community_test_out',\n                        'direction': 'out'\n                    },\n                    {\n                        'neighbor': '192.168.6.10',\n                        'route_map': 'community_test_in',\n                        'direction': 'in'\n                    },\n         \n       ]\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            TypeError: route_map is not a list\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_route_map_to_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L337"
    }
  },
  "configure_route_map_under_interface": {
    "iosxe": {
      "doc": " Configure route-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            route_map (`str`): Route-map to be configured on interface\n            ipv6 ('bool'): Indicate if this is ipv6 route map. Default false\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_route_map_under_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L9"
    }
  },
  "configure_router_bgp_maximum_paths": {
    "iosxe": {
      "doc": " Configures the maximum paths on router bgp\n        Example: router bgp 100\n                maximum-paths 3\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n            paths ('int'): Number of paths (Range 1-32)\n            address_family('str'): address family ( Default is None )\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_bgp_maximum_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1836"
    }
  },
  "configure_router_bgp_neighbor_ebgp_multihop": {
    "iosxe": {
      "doc": " Configures the router bgp neighbor ebgp multihop\n        Example: router bgp 100\n                neighbor 22.22.22.22 ebgp-multihop 2\n\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295)\n            neighbor_address ('str'): Neighbor IPv6 address\n            hop_count ('int): Maximum hop count (Range 1-255)\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_bgp_neighbor_ebgp_multihop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2050"
    }
  },
  "configure_router_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " Configures the router bgp neighbor\n        Example: router bgp 100\n                neighbor 20.20.20.2 remote-as 200\n\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295)\n            neighbor_address ('str'): Neighbor address (A.B.C.D)\n            remote_as ('int'): AS of remote neighbor (Range 1-4294967295)\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1996"
    }
  },
  "configure_router_bgp_network_mask": {
    "iosxe": {
      "doc": " Configures the router bgp network mask\n        Example: router bgp 100\n                network 11.11.11.0 mask 255.255.255.0\n\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295)\n            network_number ('str'): Network number (A.B.C.D)\n            network_mask ('str'): Network mask (A.B.C.D)\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_bgp_network_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2023"
    }
  },
  "configure_router_bgp_synchronization": {
    "iosxe": {
      "doc": " Configures the synchronization on router bgp\n        Example: router bgp 100\n                synchronization\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_bgp_synchronization",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1886"
    }
  },
  "configure_router_ospf_redistribute_internal_external": {
    "iosxe": {
      "doc": "configure router ospf redistribute internal/external\n      Args:\n            device ('obj'): device object\n            process_id ('int'): process ID\n            redistribute_ospf_route ('str'): redistribute ospf routes for external or internal\n            redistribute_type('str'): resdistribute external or internal type routes\n            redistribute_type_route('str'): Redistribute external type 2 routes\n            \n       Return:\n            None\n       Raises:\n            SubCommandFailure : Failed configuring ospf  under redistribute\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_router_ospf_redistribute_internal_external",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1921"
    }
  },
  "configure_routing_ip_route": {
    "iosxe": {
      "doc": " Configure ip route on device\n\n        Args:\n            device ('obj'): Device obj\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L19"
    }
  },
  "configure_routing_ip_route_vrf": {
    "iosxe": {
      "doc": " Configure ip vrf route on device\n\n        Args:\n            device ('obj'): Device obj\n            ip_address ('str'): ip address to reach\n            mask (str): mask the ip address\n            vrf(str)  : vrf name\n            interface ('str'): interface name to configure,default is None.\n            dest_add('str'): gateway address to configure,default is None.\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ip_route_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L553"
    }
  },
  "configure_routing_ipv6_route": {
    "iosxe": {
      "doc": " Configure ipv6 route on device\n\n        Args:\n            device ('obj'): Device obj\n            ipv6_address ('str'): ipv6 address/mask for interface\n            interface ('str',optional): interface name to configure, default is None\n            dest_add('str',optional): destination address to configure, default is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ipv6_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L866"
    }
  },
  "configure_routing_ipv6_route_vrf": {
    "iosxe": {
      "doc": " Configure ipv6 vrf route on device\n\n        Args:\n            device ('obj'): Device obj\n            ipv6_address ('str'): ipv6 address/mask to reach\n            vrf(str)  : vrf name\n            interface ('str',optional): interface name to configure, default is None.\n            dest_add('str',optional): gateway address to configure, default is None.\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_ipv6_route_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L944"
    }
  },
  "configure_routing_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('obj'): Device obj\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            destination_address('str'): destination address to configure\n            vrf ('str',optional): Vrf for static route            \n            dhcp ('boolean',optional): Flag to configure default Gateway obtained from DHCP (Default False)\n            dhcp_metirc('int',optional ): Distance metric for this dhcp route \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L202"
    }
  },
  "configure_routing_static_routev6": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('str'): Device str\n            routev6 ('str'): ip address for route\n            mask (str): mask the ip address\n            vrf ('str',optional): Vrf for static route\n            interface ('str'): interface name to configure\n            destination_addressv6 ('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_routing_static_routev6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L119"
    }
  },
  "configure_sampler": {
    "iosxe": {
      "doc": " Config Sampler\n        Args:\n            device (`obj`): Device object\n            sampler_name (`str`): Name of sampler \n            mode (`str`): Mode to be configured\n            num_packet ('int'): number of packets to select per window\n            select_packet ('int'): Select M packets out of an N packet window\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed configuring Sampler\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sampler",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L287"
    }
  },
  "configure_sap_pmk_on_cts": {
    "iosxe": {
      "doc": " Configures sap pmk on cts\n        \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to use\n            key_string ('str'): key chain to configure\n            method ('str'): encrption method to configure\n        \n        Return:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sap_pmk_on_cts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L444"
    }
  },
  "configure_scale_igmp_groups_via_tftp": {
    "iosxe": {
      "doc": " configure ip igmp static/join group on device interface\n        Example :\n        interface GigabitEthernet4\n            ip igmp join-group 235.0.0.1\n            ip igmp join-group 235.0.0.2\n\n        Args:\n            device ('obj'): Device to use\n            server ('str'): Testbed.servers\n            intf_name ('str'): Interface name\n            group_mode ('str'): static-group or join-group\n            group_start ('str'): Start IP of multicast groups. eg.235.0.0.1\n            group_step ('str'): Size of multicast group step. eg.0.0.0.1\n            goup_count ('int'): How many groups\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n        Returns:\n            None\n            cmds_block str if not tftp configure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_igmp_groups_via_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L486"
    }
  },
  "configure_scale_ip_multicast_vrf_distribute_tftp": {
    "iosxe": {
      "doc": " configure ip multicast-routing vrf distributed on device\n        Example :\n        ip multicast-routing vrf 2 distributed\n        ip multicast-routing vrf 3 distributed\n\n        Args:\n            device ('obj'): Device to use\n            server ('str'): Testbed.servers\n            vrf_name ('int'): Start of vrf name. eg. 100\n            vrf_name_step ('int'): Size of vlan range step\n            vrf_count ('int'): How many vrfs\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n        Returns:\n            None\n            cmds_block str if not tftp configure\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_ip_multicast_vrf_distribute_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L87"
    }
  },
  "configure_scale_ipv6_accesslist_config": {
    "iosxe": {
      "doc": " Configure the huge(more than 1k static acl) acls under ipv6 access-list\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n            acl_list ('str') : acl_lists\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure acls under ipv6 access-list\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_ipv6_accesslist_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1302"
    }
  },
  "configure_scale_service_reflection_via_tftp": {
    "iosxe": {
      "doc": " configure ip service reflection on device VIF interface\n        Example :\n        interface Vif1\n            ip service reflect GigabitEthernet0/0/2 destination 66.3.1.0 to 232.2.2.0 mask-len 24 source 110.1.0.4\n\n        Args:\n            device ('obj'): Device to use\n            server ('str'): Testbed.servers\n            intf_name ('str'): Interface name VIF1\n            src_filter_intf ('str'): Source filter interface GigabitEthernet0/0/2 or ''\n            dst_pre_trans ('str'): Dst ip before translation eg.66.3.1.0\n            dst_pre_trans_step ('str'): Step of dst ip before translation. eg.0.0.1.0\n            dst_after_trans ('str'): Dst ip after translation eg.232.2.2.0\n            dst_after_trans_step ('str'): Step of dst ip before translation. eg.0.0.1.0\n            mask_len ('int'): mask length of prefix. eg.24\n            src_after_trans ('str'): Src ip after translation eg.110.1.0.4\n            src_after_trans_step ('str'): Step of Src ip after translation. eg.0.0.0.1\n            sr_count ('int'): How many service reflection rules\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n        Returns:\n            None\n            cmds_block str if not tftp configure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_service_reflection_via_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L543"
    }
  },
  "configure_scale_static_route_via_tftp": {
    "iosxe": {
      "doc": " Configure scale static ip route on device via tftp\n        Examples:\n        ip route 192.168.1.0 255.255.255.0 10.0.0.1\n        ip route 192.168.2.0 255.255.255.0 10.0.1.1\n\n        Args:\n            device ('obj'): Device obj\n            server ('str'): Testbed.servers\n            scale_count (int): How many static routes\n            network_start ('str'): Prefix eg. 192.168.1.0\n            network_step ('str'): Prefix step eg. 0.0.1.0\n            netmask ('str'): Netmask of prefix eg. 255.255.255.0\n            next_hop_start ('str'): Next hop. eg. 10.0.0.1\n            next_hop_step ('str'): Step of next hop. eg. 0.0.1.0\n            next_intf ('str'): Next hop interface name. eg. G2\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n\n        Returns:\n            None\n            cmds_block str if not tftp configure\n\n        Raises:\n            Failure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_static_route_via_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L299"
    }
  },
  "configure_scale_subintfs_via_tftp": {
    "iosxe": {
      "doc": " Configures scale subinterfaces via tftp config\n\n        Args:\n            device ('obj'): Device to use\n            server ('str'): Testbed.servers\n            interface ('str'): Physical interface to configure\n            vlan_id_start ('int'): Start of vlan range\n            vlan_id_step ('int'): Size of vlan range step\n            vlan_id_count ('int'): How many steps for vlan range\n            ip_addr_start ('str'): Start of sub-intf ip addr\n            ip_addr_step ('str'): Size of sub-intf ip addr\n            netmask ('str'): Netmask to configure\n            pim ('str'): pim mode\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n\n        Raises:\n            Failure\n\n        Returns:\n            None\n            cmds_block str if not tftp configure\n\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_subintfs_via_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1644"
    }
  },
  "configure_scale_vrf_via_tftp": {
    "iosxe": {
      "doc": " Configure scale vrfs via tftp config\n\n        Args:\n            device ('obj'): Device to use\n            server ('str'): Testbed.servers\n            vrf_name ('int'): Start of vrf name\n            vrf_name_step ('int'): Size of vlan range step\n            vrf_count ('int'): How many vrfs\n            unconfig ('bool'): Unconfig or not\n            tftp ('bool'): Tftp config or not\n\n        Raises:\n            Failure\n\n        Returns:\n            None\n            cmds_block str if not tftp configure\n\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scale_vrf_via_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L710"
    }
  },
  "configure_scp_local_auth": {
    "iosxe": {
      "doc": " Configures SCP parameters\n        Args:\n            device (`obj`): Device object\n            username ('str'): username of the device\n            password ('str'): password for the device\n            scp_server_enable ('boolean', 'Optional'): \n                Enabling SCP server, default is True\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "scp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_scp_local_auth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/scp/configure.py#L13"
    }
  },
  "configure_sdm_prefer_core": {
    "iosxe": {
      "doc": " Configure SDM Prefer core\n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring sdm prefer core\n    ",
      "module_name": "custom_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sdm_prefer_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/custom_template/configure.py#L53"
    }
  },
  "configure_sdm_prefer_custom_fib": {
    "iosxe": {
      "doc": " Configure SDM Prefer Custom Fib\n    Args:\n        device ('obj') : Device object\n        attribute ('str'): sdm prefer custom template value (mac-address, netflow-in/out,sgt_or_mpls_vpn)\n        entries('int'): provide the Number of entries\n        priority('int'): provide the priority number\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring sdm prefer custom fib\n    ",
      "module_name": "custom_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sdm_prefer_custom_fib",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/custom_template/configure.py#L28"
    }
  },
  "configure_sdm_prefer_custom_template": {
    "iosxe": {
      "doc": " Configure SDM Prefer Custom Template\n        Args:\n            device ('obj'): device to use\n            attribute ('str'): sdm prefer custom template value (Ex : commit, vlan)\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure SDM Prefer Custom Template\n    ",
      "module_name": "custom_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sdm_prefer_custom_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/custom_template/configure.py#L6"
    }
  },
  "configure_segment_routing_gb_range": {
    "iosxr": {
      "doc": " Add segment routing\n\n        Args:\n            device ('obj'): Device object\n            label_min (`int`): Segment routing global block start\n            label_max (`int`): Segment routing global block end\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L12"
    }
  },
  "configure_segment_routing_prefix_sid_index": {
    "iosxr": {
      "doc": " Configure segment routing prefix-sid index\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            interface (`str`): Interface to configure\n            prefix_sid_index (`int`): Prefix-sid index\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_prefix_sid_index",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L69"
    }
  },
  "configure_segment_routing_sr_prefer": {
    "iosxr": {
      "doc": " Configure segment routing sr prefer\n\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Router ISIS process ID\n            address_family ('str'): Address family to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "segment_routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_segment_routing_sr_prefer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/configure.py#L40"
    }
  },
  "configure_service_call_home": {
    "iosxe": {
      "doc": " Configures service call home \n        Args:\n            device ('obj'): device to use\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_call_home",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L673"
    }
  },
  "configure_service_internal": {
    "iosxe": {
      "doc": " Configures service internal on device",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L795"
    }
  },
  "configure_service_password_encryption": {
    "iosxe": {
      "doc": " Configures service password encryption\n    Args:\n        device ('obj'): device to use\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed configuring service password encryption \n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_password_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1031"
    }
  },
  "configure_service_performance": {
    "iosxe": {
      "doc": " Configures service performance on device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_performance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3082"
    }
  },
  "configure_service_policy": {
    "iosxe": {
      "doc": "Configure Service policy\n        Args:\n            device ('obj'): device to use\n            policy_name (`str`): Policy_name\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure Service policy\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1466"
    }
  },
  "configure_service_private_config_encryption": {
    "iosxe": {
      "doc": " service private-config-encryption\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "sudi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_private_config_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/configure.py#L42"
    }
  },
  "configure_service_template": {
    "iosxe": {
      "doc": " Configure service-template\n        Args:\n            device (`obj`): Device object\n            template_name ('str'): template name\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2620"
    }
  },
  "configure_service_template_linksec": {
    "iosxe": {
      "doc": "Configure Service template with link security\n        Args:\n            device ('obj'): device to use\n            template (`str`): template name\n            session_type (`str`): session type to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure Service template with link security\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_linksec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1001"
    }
  },
  "configure_service_template_voice": {
    "iosxe": {
      "doc": "Configure Service template with voice\n        Args:\n            device ('obj'): device to use\n            template (`str`): template name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to configure Service template with voice\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_voice",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1052"
    }
  },
  "configure_service_template_with_absolute_timer": {
    "iosxe": {
      "doc": " configure service template with absolute timer\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        timer ('int'): timer\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_absolute_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1621"
    }
  },
  "configure_service_template_with_access_group": {
    "iosxe": {
      "doc": " configure service template with access group\n    Args:\n        device ('obj'): Device object\n        template_name ('str): Specify a template name\n        access_grp ('str'): Access-Group\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring service template with access group\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_access_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1296"
    }
  },
  "configure_service_template_with_command_line": {
    "iosxe": {
      "doc": " configure service template with command\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        command ('str'): command to configure\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_command_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1780"
    }
  },
  "configure_service_template_with_description": {
    "iosxe": {
      "doc": " configure service template with description\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        desc_line ('str'): description line\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1643"
    }
  },
  "configure_service_template_with_inactivity_timer": {
    "iosxe": {
      "doc": " configure service template with inactivity timer\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        timer ('int'): timer\n        probe('str',optional): probe\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_inactivity_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1665"
    }
  },
  "configure_service_template_with_redirect_url": {
    "iosxe": {
      "doc": " configure service template with redirect url\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        url_link ('str'): url link\n        acl_name('str'): acl name\n        redirect_option('str'): redirect option\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_redirect_url",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1690"
    }
  },
  "configure_service_template_with_sgt": {
    "iosxe": {
      "doc": " configure service template with sgt\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        sgt_range ('int'): sgt range\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_sgt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1719"
    }
  },
  "configure_service_template_with_tag": {
    "iosxe": {
      "doc": " configure service template with sgt range\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        tag ('str'): tag name\n    Return:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_tag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1741"
    }
  },
  "configure_service_template_with_vlan": {
    "iosxe": {
      "doc": " configure service template with vlan\n    Args:\n        device ('obj'): Device object\n        template_name ('str'): Specify a template name\n        vlan_id ('int'): Vlan ID to configure\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring service template with vlan\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_template_with_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1274"
    }
  },
  "configure_service_timestamps": {
    "iosxe": {
      "doc": " Configure service timestamps for switch\n        Args:\n            device ('obj'): Device object\n            msg_type ('str'): timestamp message type log/debug\n            timestamp_type ('str'): timestap type \n            ex:)   \n                datetime  Timestamp with date and time\n                uptime    Timestamp with system uptime\n            datetime_subcmd ('str'): timestamp type for datetime\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_service_timestamps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L554"
    }
  },
  "configure_set_clock_calendar": {
    "iosxe": {
      "doc": "Configure clock calendar-valid \n    Args:\n        device (obj): Device object\n    Returns:\n            None\n    Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_set_clock_calendar",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1463"
    }
  },
  "configure_shape_map": {
    "iosxe": {
      "doc": " Configures policy_map type queueing\n        Args:\n             device('obj'): device to use\n             queue_name('str'): name of the queue policy name\n             class_map_list('list'): list of dict type hold number of class map\n             [\n             {\n             class_map_name('str'): name of the class\n             priority_level('int',optional): value of priority queue for 0 to 7\n             shape_average('str',optional): value of the shape average\n             bandwidth('int',optional): bandwidth value\n             queue_limit('int',optional): queue_limit value\n             child_policy('str',optional): name of the child policy\n             }\n             ],\n             service_policy('str',optional) : service-policy name by default service-policy\n\n        example:\n             class_map_list=[{'class_map_name':'queue_name',\n             priority_level:7,\n             shape_average:'2000000000' or 'rate 20'\n             bandwidth: 20\n             queue_limit: 10000\n             }]\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_shape_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L171"
    }
  },
  "configure_shut_bgp_neighbors": {
    "iosxe": {
      "doc": " Configures shut/enable on bgp neighbors if provided otherwise the ones found in running config\n\n        Args:\n            device ('obj'): device under test\n            bgp_as ('int'): router bgp_as to configure on\n            address_family ('str'): address_family to configure under\n            vrf ('str'): vrf to configure under\n            neighbors ('list'): List of neighbors to shut/enable\n            noshut ('bool'): does the opposite of shut if True\n        Returns:        \n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n            ValueError: Some information is missing\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_shut_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L546"
    }
  },
  "configure_shut_ospf": {
    "iosxe": {
      "doc": " Configure shut on ospf process\n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_shut_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L74"
    }
  },
  "configure_sks_client": {
    "iosxe": {
      "doc": " Configures SKS client\n        Args:\n            device (`obj`): Device object\n            sks_client_config_block_name ('str'): Name of the SKS-Client config block.\n            ip_mode ('str'): ip mode (ipv4/ipv6)\n            server_IP_address ('str'): Server ipv4/ipv6 address\n            server_port_number ('str'): Port configuration\n            psk_identity ('str'): Key identity\n            password ('str'): Unencrypted password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_sks_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L12"
    }
  },
  "configure_snmp": {
    "iosxe": {
      "doc": " Configures the snmp on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n            access_type ('str') : type of Access\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L10"
    }
  },
  "configure_snmp_host_version": {
    "iosxe": {
      "doc": " Configures the snmp-server host 172.21.226.240 vrf Mgmt-vrf version 2c public on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n            host_name ('str'): Host name\n            vrf_id ('str') : vrf(Mgmt-vrf) is special connection,usually we have it in mgmt-interface for management port.\n            version_id('str') : Snmp Version\n            udp_port('int', optional) :  udp_port should be passed when enabling traps. The value can also be checked in snmp.server.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_host_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L381"
    }
  },
  "configure_snmp_mib_bulkstat": {
    "iosxe": {
      "doc": " configure snmp mib bulkstat\n    Args:\n        device ('obj'): device to use\n        object_name ('str'): The name of the object \n        oid ('str'): object name to be added\n        schema_name ('str'): The name of the schema \n        poll_interval ('int'): The poll interval value \n        snmp_interface ('str'): The snmp interface \n        transfer_name ('str'): bulkstat transfer name \n        transfer_number ('int'): bulkstat transfer number \n        url ('str'): url primary \n        retry_number ('int'): The retry nymber \n        retain_number ('int'): The retain number \n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_mib_bulkstat",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L857"
    }
  },
  "configure_snmp_server_contact": {
    "iosxe": {
      "doc": " Configures contact for snmp-server \n        Example : snmp-server contact Testname\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): identification of the contact person\n\n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_contact",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1274"
    }
  },
  "configure_snmp_server_enable_traps_power_ethernet_group": {
    "iosxe": {
      "doc": " Configure snmp-server enable traps power-ethernet group\n        Args:\n            device ('obj'): Device object\n            number ('str'): The group number \n            snmp_v ('str'): snmpv1/v2c community string or snmpv3 user name\n            name ('str'): snmp community string\n            rw ('str'): read-write/read-only\n\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_enable_traps_power_ethernet_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L470"
    }
  },
  "configure_snmp_server_group": {
    "iosxe": {
      "doc": " Configures the snmp server group on device\n        Args:\n            device ('obj'): device to use\n            group_name ('str'): name of the group\n            version ('str'): v1,v2c,v3\n            auth_type ('str'): auth, noauth, priv\n            mode ('str'): write or read mode\n            acl_name ('str'): name of the Standerd acl, acl list name, ipv6 named acl\n            acl_type ('str'): specify IPv6 Named Access-List\n            context_name ('str'): context name\n            match_type ('str'): exact or prefix\n            notify_name ('str'): notify view name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L88"
    }
  },
  "configure_snmp_server_location": {
    "iosxe": {
      "doc": " Configures snmp-server location\n        Example : snmp-server location Regression Test Lab\n\n        Args:\n            device ('obj'): device to use\n            location ('str'): system location information (e.g. Cisco Kanata, Regression Test Lab)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_location",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1313"
    }
  },
  "configure_snmp_server_manager": {
    "iosxe": {
      "doc": "\n        Configures the snmp-server manager\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_manager",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L496"
    }
  },
  "configure_snmp_server_trap": {
    "iosxe": {
      "doc": " Configures the snmp traps or informs on device\n        Args:\n            device ('obj'): device to use\n            intf ('str',optional): trap source interface\n            host_name ('str',optional): hostname/ip address of snmp-server\n            trap_type ('str',optional): Traps or informs\n            version ('str',optional): v1,v2c,v3\n            user_name ('str',optional): Name of the user\n            config_type ('str',optional): snmp trap type i.e config,link up down\n            engine_id ('str',optional): remote engine id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_trap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L198"
    }
  },
  "configure_snmp_server_user": {
    "iosxe": {
      "doc": " Configures the snmp user on device\n        Args:\n            device ('obj'): device to use\n            user_name ('str'): Name of the user\n            group_name ('str'): Group to which the user belongs\n            version ('str'): v1,v2c,v3\n            auth ('str'): authentication parameters for the user\n            auth_type ('str'): md5, sha\n            auth_algorithm ('str'): 256,192,128\n            auth_password ('str'): authentication password for user\n            priv_method ('str'): 3des,aes,des\n            aes_algorithm ('str'): 128,192,256\n            aes_password ('str'): privacy password for user\n            priv_password ('str'): privacy password for user\n            acl_name ('str'): name of the Standerd acl, acl list name, ipv6 named acl\n            acl_type ('str'): specify IPv6 Named Access-List\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_user",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L266"
    }
  },
  "configure_snmp_server_view": {
    "iosxe": {
      "doc": " Configures the snmp server view on device\n        Args:\n            device ('obj'): device to use\n            mib_view ('str'): Name of the view\n            family_name ('str'): MIB view family name\n            state ('str'): mib family excluded|included  \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_snmp_server_view",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L46"
    }
  },
  "configure_software_auto_upgrade": {
    "iosxe": {
      "doc": " Configure software auto upgrade on a device\n        Args:\n            device (`obj`): Device object\n            auto_upgrade_option (`str`): auto upgrade options\n                ex:)\n                    disable  Disable the auto upgrade installation feature\n                    enable  Enable the auto upgrade installation feature\n                    source  Configure software auto upgrade source parameters\n            src_url('str',optional) : Location of the software to install during auto upgrades\n                ex:)\n                    bootflash:   Software URL\n                    flash-1:     Software URL\n                    flash-2:     Software URL\n                    flash-3:     Software URL\n                    flash:       Software URL\n                    ftp:         Software URL\n                    http:        Software URL\n                    https:       Software URL\n                    sftp:        Software URL\n                    stby-flash:  Software URL\n                    tftp:        Software URL\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_software_auto_upgrade",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1989"
    }
  },
  "configure_source_template": {
    "iosxe": {
      "doc": " Configure source template\n    \n    Args:\n        device ('obj'): device to use\n        template_name ('str'): Select a template to configure\n        source_template ('str'): Template name to source configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_source_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1619"
    }
  },
  "configure_span_monitor_session": {
    "iosxe": {
      "doc": " Configure span monitor session\n         Args:\n             device ('obj'): Device object\n             session_number ('int'): session number\n             source_int ('str') : source interface name\n             source_option ('str'): name of the source option\n             destination_int ('str'): name of the destination interface\n         Returns:\n             None\n         Raises:\n             SubCommandFailure\n     ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_span_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4435"
    }
  },
  "configure_spanning_tree": {
    "iosxe": {
      "doc": " \n    Configures spanning-tree vlan with input vlan or vlan range\n    e.g.\n    spanning-tree vlan 666\n    spanning-tree vlan 1-999\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L15"
    }
  },
  "configure_spanning_tree_backbonefast": {
    "iosxe": {
      "doc": " Configures Spanning Tree Backbonefast\n        Args:\n            device ('obj')    : device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_backbonefast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L442"
    }
  },
  "configure_spanning_tree_bpdufilter": {
    "iosxe": {
      "doc": " Enable spanning-tree bpdufilter over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): enable spanning-tree bpdufilter on this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_bpdufilter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L374"
    }
  },
  "configure_spanning_tree_bpdufilter_disable": {
    "iosxe": {
      "doc": " Disable spanning-tree bpdufilter over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): Disable spanning-tree bpdufilter on this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_bpdufilter_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L538"
    }
  },
  "configure_spanning_tree_bpdugaurd": {
    "iosxe": {
      "doc": " Configure spanning-tree bpdugaurd over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): spanning-tree bpdufilter on this interface\n            option('str'): enable/disable\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_bpdugaurd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L561"
    }
  },
  "configure_spanning_tree_guard_loop": {
    "iosxe": {
      "doc": " Enable spanning-tree guard loop over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): enable spanning-tree guard loop on this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_guard_loop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L205"
    }
  },
  "configure_spanning_tree_guard_root": {
    "iosxe": {
      "doc": " Enable spanning-tree guard root over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): enable spanning-tree guard root on this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_guard_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L228"
    }
  },
  "configure_spanning_tree_mode": {
    "iosxe": {
      "doc": "Configures spanning-tree mode\n    Args:\n        device ('obj') : Device object\n        mode ('str'): configure the spanning tree mode\n        system_id('str',optinal): provide the system_id\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring spanning-tree mode\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L109"
    }
  },
  "configure_spanning_tree_mst_configuration": {
    "iosxe": {
      "doc": "\n    Configure spanning-tree configuration with vlan mappings\n    Args:\n        device ('obj') : Device object\n        instance (int): instance details\n        vlan_id (int): vlanid details\n        mappedvlan_id (int, optional): mapped vlanid details\n    Returns:\n        None\n    Raise:\n        SubCommandFailure: Failed to configure the spanning-tree mst configuration\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_mst_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L150"
    }
  },
  "configure_spanning_tree_mst_configuration_name": {
    "iosxe": {
      "doc": "\n    Configure spanning-tree configuration with configuration name\n    Args:\n        device ('obj') : Device object\n        name ('str') : configuration name\n    Returns:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_mst_configuration_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L585"
    }
  },
  "configure_spanning_tree_mst_configuration_revision": {
    "iosxe": {
      "doc": "\n    Configure spanning-tree configuration with revision\n    Args:\n        device ('obj') : Device object\n        rev_num ('int') : Configuration revision number\n    Returns:\n        None\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_mst_configuration_revision",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L611"
    }
  },
  "configure_spanning_tree_portfast": {
    "iosxe": {
      "doc": " Configures Spanning Tree Portfast\n        Args:\n            device ('obj')    : device to use\n            default ('boolean', optional) : Options are True/False. Default is False\n            bpdugaurd ('boolean',optional) : Options are True/Flase. Default is False\n            bpdufilter ('boolean', optional) : Options are True/False. Default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_portfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L275"
    }
  },
  "configure_spanning_tree_portfast_default": {
    "iosxe": {
      "doc": " Configures Spanning Tree portfast default\n        Args:\n            device ('obj')    : device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_portfast_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L475"
    }
  },
  "configure_spanning_tree_priority": {
    "iosxe": {
      "doc": "\n    Configures spanning-tree vlan with priority\n    e.g.\n    spanning-tree vlan 666 priority 4096\n    Args:\n        device ('obj') : Device object\n        vlan ('str'): vlan\n        priority ('int'): priority to be configured\n\n    Returns:\n        None\n        \n    Raise:\n        SubCommandFailure: Failed configuring spanning-tree vlan with priority\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L58"
    }
  },
  "configure_spanning_tree_uplinkfast": {
    "iosxe": {
      "doc": " Configures Spanning Tree Uplinkfast\n        Args:\n            device ('obj')    : device to use\n            max_rate ('int', optional) : Options are 0-32000. Default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_uplinkfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L353"
    }
  },
  "configure_spanning_tree_vlan_root": {
    "iosxe": {
      "doc": " \n    Configures spanning-tree vlan root with input vlan or vlan range\n    e.g.\n    spanning-tree vlan 666 root primary\n    spanning-tree vlan 1-999 root secondary diameter 4\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n        mode ('str'): primary or secondary \n        diameter ('int', optional): Network diameter of this spanning tree. (Default is None)\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_spanning_tree_vlan_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L492"
    }
  },
  "configure_stack_mac_persistent_timer": {
    "iosxe": {
      "doc": " configure stack-mac persistent timer on device\n\n        Args:\n            device ('str'): Device str\n            mac_timer ('str'): mac timer need to be set\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_mac_persistent_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L1032"
    }
  },
  "configure_stack_power_default_mode": {
    "iosxe": {
      "doc": " Configures default mode on stack-power stack\n        Example : default mode\n\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_default_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1946"
    }
  },
  "configure_stack_power_mode_power_shared": {
    "iosxe": {
      "doc": " Configures power_shared mode on stack-power stack\n        Example : power-shared_ / power-shared-strict\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n            strict ('str'): Strict mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_mode_power_shared",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3581"
    }
  },
  "configure_stack_power_mode_redundant": {
    "iosxe": {
      "doc": " Configures redundant mode on stack-power stack\n        Example : mode redundant / mode redundant strict\n\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n            strict ('str'): Strict mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_mode_redundant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1898"
    }
  },
  "configure_stack_power_stack": {
    "iosxe": {
      "doc": " Configures stack-power stack\n        Example : stack-power stack test\n\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1860"
    }
  },
  "configure_stack_power_switch": {
    "iosxe": {
      "doc": " Configures stack-power switch\n        Example : stack-power switch 1\n\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): Switch number (1-16)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2601"
    }
  },
  "configure_stack_power_switch_no_standalone": {
    "iosxe": {
      "doc": " configure no standalone on stack power switch\n        Example: no standalone on stack power switch <sw_num>\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): Switch number (1-16)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_switch_no_standalone",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3559"
    }
  },
  "configure_stack_power_switch_power_priority": {
    "iosxe": {
      "doc": " configure_stack power switch <sw_num> power priority low <priority_value>\n        Example : stack-power switch 1 power priority low 15\n        Args:\n            device ('obj'): device to use\n            stack_parameters ('str'): stack_parameters (stack/switch)\n            switch_number ('int'): Switch number (1-16)\n            power_priority('str'): power_priority (low/high/switch)\n            power_priority_value ('int'): priority_values <1-27>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_switch_power_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3385"
    }
  },
  "configure_stack_power_switch_standalone": {
    "iosxe": {
      "doc": " configure standalone on stack power switch\n        Example : standalone on stack power switch <sw_num>\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): Switch number (1-16)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stack_power_switch_standalone",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3537"
    }
  },
  "configure_stackpower_stack_switch_standalone": {
    "iosxe": {
      "doc": " Configures power_shared mode on stack-power stack\n        \n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n            switch_number ('int'): Switch number (1-16)\n            stack_name ('str'): Power stack name - Up to 31 chars\n            mode('str'): mode- standalone/no standalone\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stackpower_stack_switch_standalone",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3477"
    }
  },
  "configure_stackwise_virtual_dual_active_interfaces": {
    "iosxe": {
      "doc": " Enables interface as dual-active-detection interface on target device\n        Args:\n            device ('obj'): Device object\n            dad_links ('list'): List object\n                List contains following values: interface ('str'): Interface Name\n                Example:\n                    dad_links = ['HundredGigE1/0/1', 'HundredGigE1/0/2']\n        Returns:\n            output: return the chunk of lines for the config of dual-active-detection as below..\n            # interface HundredGigE1/0/1\n            # stackwise-virtual dual-active-detection\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stackwise_virtual_dual_active_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L122"
    }
  },
  "configure_stackwise_virtual_dual_active_pagp": {
    "iosxe": {
      "doc": " Enables port-channel interface as pagp dual-active-detection interface on target device\n        Args:\n            device ('obj'): Device object\n            port_channel ('str'): Port channel Value to be configured as dual-active-detection interface.\n\n        Returns:\n            output: return the chunk of lines for the config of pagp as below..\n            # stackwise-virtual\n            # Please reload the switch for Stackwise Virtual configuration to take effect\n            # Upon reboot, the config will be part of running config but not part of start up config.\n            # dual-active detection pagp\n            # dual-active detection pagp trust channel-group 1     \n            # Trusted port-channel 1 is not administratively down. To change the pagp dual-active trust configuration, \"shutdown\" the port-channel first. Remember to \"no shutdown\" the port-channel afterwards.\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stackwise_virtual_dual_active_pagp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L225"
    }
  },
  "configure_stackwise_virtual_interfaces": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            svl_links ('dict'): Dict object\n                Dictionary contains following key, values:\n                    key: interface ('str'): Interface Name\n                    value: link_id ('str'): SVL link id\n                Example:\n                    svl_links = {\n                        'HundredGigE1/0/1':'1',\n                        'HundredGigE1/0/2':'1'\n                    }\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_stackwise_virtual_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L51"
    }
  },
  "configure_standard_access_list": {
    "iosxe": {
      "doc": " Configure standard access-list\n        Args:\n            device ('obj'): device to use\n            acl_number ('str'): Acl number\n            permission ('str'): (permit | deny)\n            source_ip ('str'): Source ip\n            wild_mask ('str'): Wild mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: standard access-list not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_standard_access_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L442"
    }
  },
  "configure_standard_acl": {
    "iosxe": {
      "doc": " unconfigure Access-list\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access-list name or Standard IP access-list number range <100-199> , expanded range <2000-2699>\n            sequence_number('str'): Sequence Number range <1-2147483647>\n            action ('str'): permit / deny \n            host('str'): host specific key word host\n            ip_host('str') : host ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_standard_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1613"
    }
  },
  "configure_static_arp": {
    "iosxe": {
      "doc": " Configure static arp\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L105"
    }
  },
  "configure_static_ip_pim_rp_address": {
    "iosxe": {
      "doc": "Configures a static IP address of a rendezvous point for a multicast group range.\n\n    Args:\n        device (`obj`): Device object\n        vrf (`str`): VRF name\n        ip_address (`str`): IP address of the group-range\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_ip_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L354"
    }
  },
  "configure_static_ipv6_pim_rp_address": {
    "iosxe": {
      "doc": "Configures a static IPv6 address of a rendezvous point for a multicast group range.\n\n    Args:\n        device (`obj`): Device object\n        vrf (`str`): VRF name\n        ip_address (`str`): IPv6 address of rp\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_ipv6_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L378"
    }
  },
  "configure_static_nat_network_rule": {
    "iosxe": {
      "doc": " Configure static NAT network rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): inside local ip\n            inside_global_ip ('str'): inside global ip\n            mask('str'):network mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT network rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_nat_network_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L579"
    }
  },
  "configure_static_nat_outside_rule": {
    "iosxe": {
      "doc": " Configure static NAT outside rule \n        Args:\n            device ('obj'): device to use\n            outside_global_address ('str'): outside global address\n            outside_local_address ('str'): outside local address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT outside rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_nat_outside_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L696"
    }
  },
  "configure_static_nat_route_map_rule": {
    "iosxe": {
      "doc": " Configure static NAT route-map rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): Inside local ip\n            inside_global_ip ('str'): Inside global ip\n            route_map_name ('str') : Name of route-map\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT route-map rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_nat_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L181"
    }
  },
  "configure_static_nat_rule": {
    "iosxe": {
      "doc": " Configure static NAT rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): inside local ip\n            inside_global_ip ('str'): inside global ip\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT rule not configured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_static_nat_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L629"
    }
  },
  "configure_subinterface": {
    "iosxe": {
      "doc": " Configure subinterface\n        Args:\n            device ('obj'): device to use\n            physical_port ('str'): physical port\n            any_number ('str'): any number\n            ip_address ('str'): Ip address\n            sub_mask ('str'): Subnet mask\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: subinterface not enabled\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_subinterface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3686"
    }
  },
  "configure_subinterfaces_for_vlan_range": {
    "iosxe": {
      "doc": " Configures multiple subinterfaces looping through vlan range\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Physical interface to configure\n            vlan_id_start ('int'): Start of vlan range\n            vlan_id_step ('int'): Size of vlan range step\n            vlan_id_count ('int'): How many steps for vlan range\n            netmask ('str'): Netmask to configure\n            network_start ('str'): Start of network\n            network_step ('str'): Size of network step\n            ospf_network_type ('str'): Ospf network type to configure\n\n        Raises:\n            SubCommandFailure\n\n        Returns:\n            list of configured interfaces\n\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_subinterfaces_for_vlan_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1589"
    }
  },
  "configure_subscriber_template": {
    "iosxe": {
      "doc": " Add subscriber template\n    Args:\n        device ('obj'): Device object\n    Returns:\n        None\n    Raise:\n        SubCommandFailure: Failed to configure subscriber templating and authorization\n    ",
      "module_name": "subscriber.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_subscriber_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/subscriber/configure.py#L65"
    }
  },
  "configure_svi": {
    "iosxe": {
      "doc": " Vlan SVI configuration\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): VLAN id for SVI\n            ipaddr ('str'): IP address for SVI\n            mask ('str'): Subnet mask for ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2978"
    }
  },
  "configure_switch_priority": {
    "iosxe": {
      "doc": " Configures priority for a switch\n        Example : switch 2 priority 13\n\n        Args:\n            device ('obj'): device to use\n            switch ('int'): Switch Number (1-16)\n            priority ('int'): Switch Priority (1-15)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "snmp.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switch_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/execute.py#L17"
    }
  },
  "configure_switch_provision": {
    "iosxe": {
      "doc": " Configure switch provision for switch\n        Args:\n            device ('obj'): Device object\n            switch_number('int'): switch number\n            model ('str'): switch model\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switch_provision",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L497"
    }
  },
  "configure_switch_provision_model": {
    "iosxe": {
      "doc": " Configures switch provision \n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number \n            model ('str'): provision model \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switch_provision_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3050"
    }
  },
  "configure_switchport_mode_trunk_snooping_trust": {
    "iosxe": {
      "doc": " configure switchport mode trunk snooping trust\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): list of Interface to be added to port channel\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure switchport mode trunk snooping trust\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_mode_trunk_snooping_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4181"
    }
  },
  "configure_switchport_nonegotiate": {
    "iosxe": {
      "doc": " Config switchport nonegotiate on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_nonegotiate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3844"
    }
  },
  "configure_switchport_trunk": {
    "iosxe": {
      "doc": " Switch port mode trunk interface configuration\n        Args:\n            device (`obj`): Device object\n            intf_list ('list'): List of interfaces to be configured as trunks\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2953"
    }
  },
  "configure_switchport_trunk_allowed_vlan": {
    "iosxe": {
      "doc": " Configure switchport trunk allowed vlan on interface <interface>\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface details on which we config\n            vlan_id('int'): VLAN IDs of the allowed VLANs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure :Failed to Configure switchport trunk allowed vlan on interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_allowed_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4910"
    }
  },
  "configure_switchport_trunk_allowed_vlan_except": {
    "iosxe": {
      "doc": "Configure switchport trunk allowed vlan except \n\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        number ('int'): vlan id of disallowed vlans when this port is in trunking mode\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP on interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_allowed_vlan_except",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L654"
    }
  },
  "configure_switchport_trunk_allowed_vlan_remove": {
    "iosxe": {
      "doc": "Configure switchport trunk allowed vlan remove\n\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        number ('int'): vlan id of disallowed vlans when this port is in trunking mode\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP on interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_allowed_vlan_remove",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L632"
    }
  },
  "configure_switchport_trunk_native_vlan": {
    "iosxe": {
      "doc": " configure switchport trunk native vlan\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): list of Interface to be added to port channel\n            native_vlan (`str`): native vlan Id to be added\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure switchport trunk native vlan\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_native_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4156"
    }
  },
  "configure_switchport_trunk_vlan": {
    "iosxe": {
      "doc": " configure switchport trunk vlan on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to port channel to be added\n            vlan (`str`): vlan Id to be added\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4335"
    }
  },
  "configure_switchport_trunk_vlan_with_speed_and_duplex": {
    "iosxe": {
      "doc": " configure switchport trunk vlan on Interface with speed and duplex type\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to port channel to be added\n            vlan (`str`): vlan Id when this port is in access mode\n            speed(`str`): Speed to added (i.e 10 Mbps/100 Mbps/1000 Mbps/auto)\n            duplex(`str`): Duplex type to added (i.e auto/half/full)\n            service_policy_type(`str`): Service-policy type to added (i.e input/output)\n            policy_map_name(`str`): policy-map name to added\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_switchport_trunk_vlan_with_speed_and_duplex",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4361"
    }
  },
  "configure_syslog_server": {
    "iosxe": {
      "doc": " Configure Syslog servers\n\n        Args:\n            device ('obj') : Device to be configured server\n            server ('str'): Syslog server to be configured            \n            steps ('obj'): Context manager object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "syslog.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_syslog_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/configure.py#L8"
    }
  },
  "configure_system_disable_password_recovery_switch_all": {
    "iosxe": {
      "doc": " Disables password recovery on the switch\n        Example: system disable password recovery switch all\n        \n        Args:\n            device('obj'): device to configure on\n\n        Return:\n            N/A\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_system_disable_password_recovery_switch_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1230"
    }
  },
  "configure_system_ignore_startupconfig_switch_all": {
    "iosxe": {
      "doc": " Configures the system ignore startup configuration on the switch\n        Example: system ignore startupconfig switch all\n        \n        Args:\n            device('obj'): device to configure on\n\n        Return:\n            N/A\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_system_ignore_startupconfig_switch_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1141"
    }
  },
  "configure_system_jumbomtu": {
    "iosxe": {
      "doc": " Sets mtu value on device\n        Args:\n            device ('obj'): Device obj\n            mtu_value ('int'): MTU value to be set\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_system_jumbomtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L677"
    }
  },
  "configure_table_map": {
    "iosxe": {
      "doc": " Configures table_map\n        Args:\n             device ('obj'): device to use\n             table_map_name('str') : name of the table map  name\n             from_val('list') : list of from values\n             to_val('list') : list of to values \n             default_val('str'): name of the default, default is copy\n\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "table_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_table_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/table_map/configure.py#L12"
    }
  },
  "configure_tacacs_group": {
    "iosxe": {
      "doc": " \n    Configure aaa tacacs server group\n    Args:\n        device ('obj'): Device object\n        server_config('dict'): Dictionary of configurations for server\n            dictionary contains following keys:\n                server_group ('str'): Tacacs server group name\n                server_name ('str'): Tacacs server name\n                vrf('str'):  vrf name\n                mgmt_intf('str'):  Management interface\n                timeout('int'): <1-1000>  Wait time (default 5 seconds)\n    Returns:\n        configurations list\n    Raises:\n        SubCommandFailure\n    Example:\n        server_config = {\n                    server_group = \"sg1\",\n                    server_name = \"sname1\",\n                    vrf = \"vrf1\",\n                    mgmt_intf = \"GigabitEthernet0/0\",\n                    timeout = 10,\n                },\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tacacs_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L77"
    }
  },
  "configure_tacacs_server": {
    "iosxe": {
      "cat9500": {
        "doc": " Configure tacacs server\n        Args:\n            device ('obj'): Device object\n            server_config('dict'): Dictionary object\n                dictionary contains following  keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type (str): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                    ipv6_server('str'): server ipv6 address\n                    single_connection('boolean'): set to True\n                    send_nat_address('boolean'): set to True\n                    fqdn_name('str'): Fully Qualified domain name\n            Returns:\n                configurations list\n            Raises:\n                Failed configuring tacacs server\n            Example:\n                server_config = {\n                            'host': 'mgmt-tac',\n                            'timeout': '10',\n                            'key_type': '7',\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                            'ipv6_server': '2000::2'\n                            'single_connection': True\n                            'send_nat_address': True\n                            'fqdn_name': 'f1'\n                        },\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_tacacs_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/configure.py#L12"
      },
      "cat9k": {
        "doc": " Configure tacacs server\n        Args:\n            device ('obj'): Device object\n            server_config('dict'): Dictionary object\n                dictionary contains following  keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type (str): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                    ipv6_server('str'): server ipv6 address\n                    single_connection('boolean'): set to True\n                    send_nat_address('boolean'): set to True\n                    fqdn_name('str'): Fully Qualified domain name\n            Returns:\n                configurations list\n            Raises:\n                Failed configuring tacacs server\n            Example:\n                server_config = {\n                            'host': 'mgmt-tac',\n                            'timeout': '10',\n                            'key_type': '7',\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                            'ipv6_server': '2000::2'\n                            'single_connection': True\n                            'send_nat_address': True\n                            'fqdn_name': 'f1'\n                        },\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "configure_tacacs_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/configure.py#L10"
      },
      "doc": " Configure tacacs server\n\n        Args:\n            device ('obj'): Device object\n            server_config('list'): List of configuration for server\n                dictionary contains following 3 keys:\n                    host ('str'): host ip address\n                    timeout ('int'): server time out value in seconds\n                    key_type ('int'): key type for tacacs server\n                    key ('str'): key value from tacacs server\n                    server ('str'): server ip address\n                ex.)\n                    [\n                        {\n                            'host': '192.168.21.1',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.1'\n                        },\n                        {\n                            'host': '192.168.21.2',\n                            'timeout': 10,\n                            'key_type': 7,\n                            'key': '01239132C123',\n                            'server': '192.168.21.2'\n                        }\n                    ] \n                        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ",
      "module_name": "server.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/configure.py#L12"
    }
  },
  "configure_te_tunnel": {
    "iosxe": {
      "doc": "creates tunnel with ip address.\n        Args :\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            ip_config_subcmd (`str`): subcommands for configuring ip address in tunnel  \n            intf_type (`str`): interface type\n\t    intf_number(`str`): interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_te_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1002"
    }
  },
  "configure_template": {
    "iosxe": {
      "doc": " \n    Configures Template with various sub-options    \n    e.g.\n    template loop-detect\n      loopdetect\n      loopdetect 2\n    Args:\n        device ('obj') : Device object\n        template_name ('str'): Template name\n        loopdetect_enable ('bool'): configure 'loopdetect' or not\n        loopdetect_interval ('int'): loopdetect interval integer in seconds\n        loopdetect_source_port ('bool'): configure 'loopdetect source-port' or not\n\n    Returns:\n        None\n    ",
      "module_name": "configuration_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/configuration_template/configure.py#L15"
    }
  },
  "configure_template_methods_for_dot1x": {
    "iosxe": {
      "doc": " configure template methods for dot1x\n    Args:\n        device ('obj'): Device object\n        template_name ('str): Specify template name\n        vlan_id ('str'): Specify VLAN ID of the VLAN when this port is in access mode\n        voice_vlan_id ('str'): Specify Vlan for voice traffic\n        policy_map_name ('str'): Policy-map name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring template methods for dot1x\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template_methods_for_dot1x",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1362"
    }
  },
  "configure_template_methods_using_max_reauth": {
    "iosxe": {
      "doc": " configure template methods using max reauth and timeout\n    Args:\n        device ('obj'): Device object\n        template_name ('str): Specify template name\n        timeout_period ('int'): Specify VLAN ID of the VLAN when this port is in access mode\n        max_reauth ('int'): Specify max-reauth-req value <1-10>\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring template methods using max reauth and timeout\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template_methods_using_max_reauth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1395"
    }
  },
  "configure_template_type_vpls": {
    "iosxe": {
      "doc": " template type to be configured\n        Args:\n            device (`obj`): Device object\n            template_type ('str'): template type for the template\n            flow_classification('str'): classify the flow based on ip or ethernet\n            template_name (`str`) : name of the template to be used\n            flow_ip_type ('str'): define the flow ip type \n            flow_label_type ('str'): flow label to be used\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_template_type_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1587"
    }
  },
  "configure_terminal_exec_prompt_timestamp": {
    "iosxe": {
      "doc": " terminal exec prompt timestamp\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_exec_prompt_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L116"
    }
  },
  "configure_terminal_length": {
    "iosxe": {
      "doc": " terminal length 0\n        Args:\n            device (`obj`): Device object\n            line_num ('int'): Number of lines on screen (0 for no pausing)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L78"
    }
  },
  "configure_terminal_width": {
    "iosxe": {
      "doc": " terminal width 0\n        Args:\n            device (`obj`): Device object\n            char_num ('int'): Number of characters on a screen line\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_terminal_width",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L98"
    }
  },
  "configure_tftp_source_interface": {
    "iosxe": {
      "doc": " Configure tftp source interface on device\n\n        Args:\n            device ('obj'): Device obj\n            interface ('str'): interface name to configure\n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tftp_source_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L749"
    }
  },
  "configure_traffic_eng_passive_interface": {
    "iosxe": {
      "doc": "configure traffic-eng passive-interface \n        Args:\n        device (`obj`): Device \n        interface_name (`str`): interface name\n        neighbor (`str`) : neighbor ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        ospf_neigh (`str`) : ospf neighbor ip\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_traffic_eng_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1644"
    }
  },
  "configure_trustpoint": {
    "iosxe": {
      "doc": "\n    configure crypto pki trustpoint\n    Args:\n        default:\n            device ('obj'): Device object\n            tp_name ('string'): crypto pki trustpoint name\n            revoke_check ('string'): revocation-check config to be used\n            rsa_key_size ('int'): rsa_key_size value to be used for rsakeypair generation\n        optional:\n            authorization ('string'): authorization config options to be used with variuos options\n            auth_list_name('string'): authorization list name\n            auth_password('string'): authorization password\n            alt_auth_username('string'): alternate authorization username config; example we can use \"yes\"\n            alt_auth_username_sec('string'): configure authorization username alt-subjectname userprinciplename secondary; example we can use \"yes\"\n            auth_username_subjectname_opt('string'): used to configure authorization username subject name option\n            auto_enroll ('bool'): auto enroll needs to be configured or not\n            auto_enroll_regen ('string'): used for auto-enroll regenerate configuration\n            auto_enroll_regen_timer('int'): used for auto enroll regenerate timer configuration\n            auto_trigger ('bool'): if auton trigger needs to be configured\n            ca_ip ('string'): enrollment url ip-address\n            certificate_chain_location ('string'): used for certificate chain configuration\n            chain_valid_count ('bool'): used chain valid count with value configuration\n            chain_valid_stop ('bool'): if chain validation needs to be stopped\n            common_name ('string'): crypto pki subject common name to be used\n            crl_cache ('bool'): used for crl cache config is none\n            crl_cache_delete_timer('int'): used for crl cache delete timer configuration\n            crl_cache_extend_timer('int'): used for crl cache extended timer configuration\n            default_options ('string'): if any tp_config needs to be defaulted\n            eckeypair ('string'): used for eckeypair configuration\n            eku_req_option ('string'): used for eku request configuration\n            enrollment_mode ('bool'): used to enable enrollment mode config\n            enrollment_option('string'): used to configure enrollment except mode, retry timer and enrollment url\n            enrol_retry_count ('int'): used to configure enrollment retry counter\n            enrol_retry_period ('int'): used to configure enrollment retry period\n            ca_type ('string'): used to select enrollment ca server type and config \n            enrollment_url_path ('string'): used to configure enrollment path except ca server type config ex: to take from tftp, bootflash\n            fingerprint ('string'): used to configure fingerprint configuration\n            fqdn_value ('string'): used to configure fully-qualified domain name\n            hash_value ('string'): used to configure hash algorithm to be used\n            http_proxy ('string'): used to configure http proxy \n            ip_address ('string'): if none variable is set ip address with none option will be configured                                     else specified ip address will be getting configured\n            ip_ext ('string'): used to configure ip-extension\n            match_value('string'): to configure match a certificate attibutes/maps\n            ocsp_url ('string'): to configure certificate using Online Certificate Status Protocol\n            ocsp_port('int'): ocsp port to be configured\n            ocsp_disable ('bool'): to disable ocsp\n            on_config ('string'): to create keypair on device\n            password_config ('string'): to configure password\n            primary_flag ('bool'): used to enable primary config\n            regenerate_flag ('bool'): used to configure regenerate\n            revocation_check ('string'): used to configure revocation-check config\n            rsa_key_usage('bool'): used to configure rsakeypair \n            ser_number('string'): serial number to be used\n            show_tp_config('bool'): to display the trustpoint configs\n            source_interface('string'): soure interface to be used\n            storage_location('string'): storage location like bootflash: tftp: \n            sub_alt_name('string'): used for subject-alt-name configuration\n            usage_option('string'): used for usage config\n            vrf('string'): used for crf config\n            no_config('string'): used for unconfiguration of sub configs used in trustpoint\n            exit_flag('bool'): used for exit\n            is_ec_key('bool'): used for ec key pair\n        \n    Returns: \n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_trustpoint",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L216"
    }
  },
  "configure_tunnel_auto_route": {
    "iosxe": {
      "doc": "configure autoroute announce in tunnel.\n        Args: \n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            autoroute_type (`str`): autoroute type used for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_auto_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L955"
    }
  },
  "configure_tunnel_bandwidth": {
    "iosxe": {
      "doc": "configure  tunnel bandwidth\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n\t    bandwidth (`int`) : Tunnel bandwidth\n            class_type (`int`) : Default value 0\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L879"
    }
  },
  "configure_tunnel_destination": {
    "iosxe": {
      "doc": "creates tunnel destination.\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            dst_ip (`str`): Ip address of tunnel destination \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L979"
    }
  },
  "configure_tunnel_priority": {
    "iosxe": {
      "doc": "configure tunnel priority\n        Args:\n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            priority(`int`): tunnel priority\n            hold_priority(`int`): hold priority for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L907"
    }
  },
  "configure_tunnel_with_ipsec": {
    "iosxe": {
      "doc": " Configure ipsec on Tunnel interface\n        Args:\n            device (`obj`): Device object\n            tunnel_intf (`str`): Interface to get address\n            overlay (`str`): Tunnel is eitehr IPv4 or Ipv6 or dual-overlay default value is ipv4\n            tunnel_ip (`str`,optional): IPv4 addressed to be configured on interface\n            tunnel_mask (`str`,optional): IPv4 Mask address to be used in configuration\n            tunnel_src_ip (`str`): tunnel source address\n            tunnel_dst_ip (`str`): tunnel destination address\n            keepalive_timer ('int',optional): tunnel keepalive timer,default value is 10\n            ip_mtu ('str',optional): tunnel mtu, default value is None\n            tunnel_ipv6 (`str`,optional): IPv6 address with subnet mask,default value is None\n            tunnel_maskv6 ('str',optional): IPv6 mask (Default None)\n            tunnel_mode ('str',optional): Tunnel mode. Default is gre\n            tunnel_protection ('str',optional): Protection type (i.e ipsec,dike)\n            ipsec_profile_name ('str',optional): Tunnel protection profile name\n            vrf ('str',optional): client vrf for  the tunnel\n            tunnel_vrf ('str',optional): wan vrf for  the tunnel\n            v6_overlay:('boolean', optional): True if v6-over-ipv4. Default is False\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_tunnel_with_ipsec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L1000"
    }
  },
  "configure_udld": {
    "iosxe": {
      "doc": " Configures UDLD on Interface \n    Args:\n        device (`obj`): Device object\n        interface (`str`): interface\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L30"
    }
  },
  "configure_udld_aggressive": {
    "iosxe": {
      "doc": " Configures udld aggressive\n        Example : udld aggressive\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld_aggressive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2449"
    }
  },
  "configure_udld_alert_mode": {
    "iosxe": {
      "doc": " Configures UDLD alert mode on Interface \n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld_alert_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L9"
    }
  },
  "configure_udld_enable": {
    "iosxe": {
      "doc": " Enabling the UDLD mode on device\n        Args:\n            device ('obj'): Device object\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L130"
    }
  },
  "configure_udld_message_time": {
    "iosxe": {
      "doc": " Configures UDLD Message Time on Target Device globally \n        Args:\n            device ('obj')        : device to use\n            message_time ('int')  : Time in seconds between sending of messages 1-90\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L95"
    }
  },
  "configure_udld_port_aggressive": {
    "iosxe": {
      "doc": " Configures udld port aggressive on an interface\n        Example: udld port aggressive\n\n        Args:\n            device ('obj'): device to use\n            interface_name ('str'): name of the interface (eg: gig1/0/1)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_udld_port_aggressive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2502"
    }
  },
  "configure_umbrella_global_parameter_map": {
    "iosxe": {
      "doc": " Enable Umbrella  parameter-map Globally\n        Args:\n            device ('obj'): device to use\n            token_key ('str'): Configure Token key for device registration, default value is None\n            api_key ('str'): Configure Token key for device registration, , default value is None\n            secret_key ('str'): Configure secret key with api key for device registration, default value is None, Example: 34cc188ffba47b5ab18290a62ae5e0m\n            org_id ('str'): Configure org id with api key for device registration, default value is None, Example: 2549304\n            local_bypass_name ('str'): Configure local domain bypass for non umbrella lookup, default value is None\n            dnscrypt ('str'): This is to disable/enable DNSCrypt, default value is None\n            udp_timeout('int'): This is for device registration reattempt, value range 1-30sec, default value is 30. \n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella parameter-map configuration\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_global_parameter_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L76"
    }
  },
  "configure_umbrella_in_out": {
    "iosxe": {
      "doc": " Enable Umbrella IN and OUT over interface \n        Args:\n            device ('obj'):uut device to use\n            in_interface ('str'): enable Umbrella in over this interface, default value is None\n            in_tag ('str'): configure device tag with umbrella in, default value is None\n            out_interface ('str'): enable Umbrella out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella IN OUT not enable over interface\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L11"
    }
  },
  "configure_umbrella_local_bypass": {
    "iosxe": {
      "doc": " Cofigure local domain bypass regex\n        Args:\n            device ('obj'): device to use\n            local_bypass_name ('str'): Name of local domain bypass\n            domain ('str'): Regex pattern.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Local domain bypass \n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_umbrella_local_bypass",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L145"
    }
  },
  "configure_uplink_interface": {
    "iosxe": {
      "doc": " configure uplink interface\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): list of Interface to be added to port channel\n            vlan_range (`str`): vlan range to be added\n            vlan1 (`str`): vlan to be added to the port\n            vlan2 (`str`): vlan to be added to the port\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to configure uplink interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_uplink_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4097"
    }
  },
  "configure_username": {
    "iosxe": {
      "doc": " Configure a user with a password\n        Args:\n            device (`obj`): Device object\n            username (`str`): User name\n            pwd ('str'): Password for the user\n            encryption ('int',optional): Encryption level (Default 0 for cleartext)\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            dut1.api.configure_username(username='testUser',pwd='secretPwd')\n            -->username testUser password 0 secretPwd\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_username",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L713"
    }
  },
  "configure_username_aaa_attr_list": {
    "iosxe": {
      "doc": " configure username <username> aaa attribute list <attr_list_name>\n    Args:\n        device (`obj`): Device object\n        username ('str'): Username\n        attr_list_name ('str'): Attribute list name\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring Username with attribute list name\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_username_aaa_attr_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1342"
    }
  },
  "configure_vfi": {
    "iosxe": {
      "doc": " Vlan VFI configuration\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): VLAN id for VFI\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vfi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4392"
    }
  },
  "configure_virtual_service": {
    "iosxe": {
      "doc": " Configures virtual-service name\n        Example : virtual-service UTD\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): Virtual service name (up to 63 characters)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_virtual_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1510"
    }
  },
  "configure_virtual_service_vnic_gateway_guest_ip_address": {
    "iosxe": {
      "doc": " configure virtual service vnic gateway guest ip address\n    \n    Args:\n        device ('obj'): device to use\n        interface_id ('str'): The interface id\n        ip ('str'): ip address \n        ip_mask ('str'): ip mask \n        virtual_service ('str'): The virtual service \n        guest_ip ('str'): the guest ip address \n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_virtual_service_vnic_gateway_guest_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L825"
    }
  },
  "configure_virtual_template": {
    "iosxe": {
      "doc": " Configure virtual-template interface\n\n        Args:\n            device (`obj`): Device object\n            virtual_template_number ('int') : virtual template number\n            unnumbered_interface (`str`): Interface name\n            authentication ('str') : PAP, CHAP\n            mtu ('str') : mtu value\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_virtual_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4006"
    }
  },
  "configure_vlan_agent": {
    "iosxe": {
      "doc": " Configures vlan on mDNS(Multicast Domain Name System) agent\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID\n            policy ('str'): Policy name\n            active_query_timer ('int'): Active Query timer value\n            transport_way ('str'): Transport way (ipv4,ipv6 or both, which need to allow)\n            vlan_src_intf('int', optional): Source interface vlan. Default value is None\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_agent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L653"
    }
  },
  "configure_vlan_shutdown": {
    "iosxe": {
      "doc": " Shutdown a VLAN on Interface or Device\n    e.g.\n    vlan 666\n\t  shutdown\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L356"
    }
  },
  "configure_vlan_sp": {
    "iosxe": {
      "doc": " Configures vlan on SP(service peer)\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID\n            policy ('str'): Policy name\n            active_query_timer ('int'): Active Query timer value\n            src_vlan ('int'): Source interface vlan id\n            ip_address ('str'): Ip address (ipv4 or ipv6)\n            transport_way ('str'): Transport way (ipv4,ipv6 or both, which need to allow)\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_sp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L719"
    }
  },
  "configure_vlan_state_active": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n            vlan ('str'): vlan 100 \n\t\t    state ('str') : in which state\n        Returns:\n            interface members\n        Raises:\n            Nonel\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_state_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L815"
    }
  },
  "configure_vlan_state_suspend": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n            vlan ('str'): vlan 100 \n\t\t    state ('str') : in which state\n        Returns:\n            interface members\n        Raises:\n            Nonel\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_state_suspend",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L767"
    }
  },
  "configure_vlan_to_sgt_mapping": {
    "iosxe": {
      "doc": " Configure Vlan SGT\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Configure Vlan SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L89"
    }
  },
  "configure_vlan_vpls": {
    "iosxe": {
      "doc": " Config vpls on vlan\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vlan_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L144"
    }
  },
  "configure_vpdn_group": {
    "iosxe": {
      "doc": " Configure VPDN\n\n        Args:\n            device ('obj'): Device object\n            authen_before_forward ('bool') : True or Flase on authentication\n            vpdn_group_number ('int') : VPDN group number\n            request_dialin ('bool') : True or False for request-dialin\n            accept_dialin ('bool') : True or False for request-dialin\n            domain ('str') : Domain name\n            initiate_to ('str') : initiate to ip address\n            tunnel_hello_interval ('str') : hello interval\n            tunnel_password ('str') : tunnel password\n            virtual_template_number ('str') : virtual-template number\n            local_name ('str') : vpdn local name\n\n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "vpdn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vpdn_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpdn/configure.py#L28"
    }
  },
  "configure_vpn_id_in_vrf": {
    "iosxe": {
      "doc": " configure vpn id in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            vpn_id ('str'):  VPN ID identifies the VPN to which the IP address belongs.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vpn_id_in_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L258"
    }
  },
  "configure_vrf_definition_family": {
    "iosxe": {
      "doc": " Configures Address Family on VRF\n        Args:\n            device ('obj')    : device to use\n            vrf ('str'): VRF name\n            address_family ('str).  'ipv4', 'ipv6',\n            family_type ('str,optional). (i.e unicast, multicast). Default is ''.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_definition_family",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L500"
    }
  },
  "configure_vrf_definition_stitching": {
    "iosxe": {
      "doc": "\n    Configure vrf definition for stitching ipv4 and ipv6 address family\n\n    Args:\n        device('obj'): Device object\n        vrf_name('str'): Name of the vrf definition\n        rd_value('str'): VRF RD value 1:100\n        ip_version('str'): ipv4 version or ipv6 version\n        route_target_value: Route target value for vrf\n        stitching_value: Route-target Stitching value\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n\n    Example of vrf definition for ipv4 address family and ipv6 address family\n\n        vrf definition red\n          rd 1:100\n          !\n          address-family ipv4\n          route-target export 100:100\n          route-target import 100:100\n          route-target export 1:1 stitching\n          route-target import 1:1 stitching\n          exit-address-family\n\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_definition_stitching",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L526"
    }
  },
  "configure_vrf_description": {
    "iosxe": {
      "doc": "Configure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description(`str`): Description\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L57"
    }
  },
  "configure_vrf_forwarding_interface": {
    "iosxe": {
      "doc": " Create vrf forwarding on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface name\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ip vrf forwarding\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_forwarding_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L816"
    }
  },
  "configure_vrf_ipv6_eigrp_named_networks": {
    "iosxe": {
      "doc": " \n    API for the CLI :- \n        router eigrp {eigrp_name}\naddress-family ipv6 {af_action} vrf {vrf_name} autonomous-system {autonomous_system}\n {nsf}\n        e.g.\n        Args:\n            device ('obj'): Device object\n            eigrp_name ('str'): EIGRP named mode name\n            af_action ('str',optional): unicast or multicast (Default is '') \n            vrf_name ('str', optional): vrf name to configure ( Default is '' )\n            autonomous_system ('str'): Autonomous system number\n            nsf - optional\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_ipv6_eigrp_named_networks",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L218"
    }
  },
  "configure_vrf_on_interface": {
    "iosxe": {
      "doc": " Configure interface to use VRF\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface\n            vrf ('str'): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1381"
    }
  },
  "configure_vrf_rd_value": {
    "iosxe": {
      "doc": " Configure VRF & RD Value\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name value (Ex: red)\n            rd_value ('str'): rd vlaue (Ex: 2:100)\n            address_type ('str'): address family vlaue (Ex: ipv4)\n            target_vpn_community ('str'): route target transaction type (Ex: import or export)\n            target_vpn_asn_ip_value ('str'): route target transaction value (Ex: 2:100, 1:100, etc)\n            route_target_value_optional ('str'): route target additional value after route_target_value (Ex: stitching or '')\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VRF & RD Value\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_rd_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L16"
    }
  },
  "configure_vrf_select_source": {
    "iosxe": {
      "doc": " Configure VRF select source on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrf_select_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5254"
    }
  },
  "configure_vrrp_interface": {
    "iosxe": {
      "doc": " Configures vlan interface standby group IP\n        make sure this command is already enabled in device fhrp version vrrp v3\n        \n    Args:\n        device ('obj'): Device object\n        interface ('str'): Vlan <vlan Id> (Range 1-4093) / physical interface  \n        group_number('int'): group number (Range 1-255)\n        advertisement_interval('int'): Advertisement interval range <100-40950> \n        Advertisement interval in milliseconds\n        priority_level('int'): priority level range <1-254>\n        address_family ('str'): address family ipv4 or ipv6 to use\n        ipv4_or_ipv6_address ('str'): based on the address family \n        please use the ipv4 or ipv6 address to configure\n        \n    Return:\n        None\n    Raises:\n            SubCommandFailure: Failed to configure vrrp interface\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrrp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L198"
    }
  },
  "configure_vrrp_on_interface": {
    "iosxe": {
      "doc": "configure vrrp version on interface\n       Args:\n           device (`obj`): Device object\n           interface ('str'): Interface to configure vrrp\n           group_number (`int`): group number\n           address_family('str'): configure the address family\n           advertise_timer(int, optional): configure the advertise timer\n           priority ('str', optional) : config custom priority to vrrp\n           ip_address ('str', optional): configure the ip_address\n           option ('str', optional) : configure ip adress is primary (or) secondary\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrrp_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6848"
    }
  },
  "configure_vrrp_version_on_device": {
    "iosxe": {
      "doc": " Configure vrrp version on interface\n        Args:\n             device (`obj`): Device object\n             version('str'): configure the version\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vrrp_version_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6833"
    }
  },
  "configure_vtp_domain": {
    "iosxe": {
      "doc": "Configure vtp domain on the device\n\n        Args:\n            device ('obj'): device to use\n            vtp_domain ('str'): vtp domain name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP domain\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_domain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L534"
    }
  },
  "configure_vtp_mode": {
    "iosxe": {
      "doc": " Configures global VTP mode\n        Args:\n            device ('obj'): device to use\n            mode ('str'):  VTP mode (i.e transparent, client, server)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L171"
    }
  },
  "configure_vtp_password": {
    "iosxe": {
      "doc": "Configure vtp password on the device\n    \n        Args:\n            device ('obj'): device to use\n            vtp_password('str'): vtp password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP password\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L862"
    }
  },
  "configure_vtp_primary": {
    "iosxe": {
      "doc": " Configure vtp primary vlan on target device globally on the device\n    \n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable vtp\n    ",
      "module_name": "vlan.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_primary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/execute.py#L15"
    }
  },
  "configure_vtp_version": {
    "iosxe": {
      "doc": "Configure vtp domain on the device\n\n        Args:\n            device ('obj'): device to use\n            vtp_version('int'): vtp version\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP version\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_vtp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L554"
    }
  },
  "configure_wired_radius_attribute": {
    "iosxe": {
      "doc": " To configure radius attribute\n    Args:\n        device (`obj`): Device object\n        attr_num ('str'): Attribute number to be configured\n        attr_profile ('str'): Attribute profile to be configured\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed configuring radius attribute\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_wired_radius_attribute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1119"
    }
  },
  "configure_wired_radius_attribute_44": {
    "iosxe": {
      "doc": " To configure radius attribute 44 for wired\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "configure_wired_radius_attribute_44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L613"
    }
  },
  "convert_server_to_linux_device": {
    "com": {
      "doc": "\n    Args\n        converts a server block to a device object\n        device ('obj'): Device object\n        server ('str'): server hostname\n\n    Returns:\n        A Device object that can be connected\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "convert_server_to_linux_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1473"
    }
  },
  "copy_config_from_tftp_to_media": {
    "iosxe": {
      "doc": " Copy configuration file from tftp location to media\n\n        Args:\n            device ('obj'): Device object to modify configuration\n            host ('str'): tftp host ip address\n            config_file_with_path ('str') : configuration file name along with tftp path\n            file('str'): configuration file name\n            timeout('int', Optional): timeout for configuration file load to device(Deafult is 30)\n            vrf('str', Optional): vrf for tftp connectivity(Deafult is None)\n            media('str', Optional): where to copy the file in device(Deafult is bootflash)\n\n        Returns:\n            True or False\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_config_from_tftp_to_media",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L165"
    }
  },
  "copy_data_to_device": {
    "linux": {
      "doc": " Copies data into a device and creates a file to store that data.\n        Args:\n            data ('str'): The data to be copied\n            destination ('str'): Folder of where to store file\n            filename ('str'): Name of the file created. If left none then a \n                random name will be generated\n        Raise:\n            Exception: Permission Denied, File Creation Failed\n        Returns:\n            Path (str): path of created file\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_data_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L123"
    }
  },
  "copy_file": {
    "iosxe": {
      "doc": "\n        Copying file from source path to destination path in local device.\n        Args:\n            device ('obj'): Device object\n            source_path ('str'): source path\n            destination_path ('str'): destination path\n            filename ('str'): filename that needs to copy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1605"
    }
  },
  "copy_file_from_tftp_ftp": {
    "com": {
      "doc": "Copy file to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): File name\n            pro (`str`): Transfer protocol\n        Returns:\n            None\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_from_tftp_ftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L442"
    }
  },
  "copy_file_to_running_config": {
    "ios": {
      "doc": " Restore config from local file using copy function\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L43"
    },
    "iosxe": {
      "doc": " Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`str`): timeout\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_file_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L43"
    }
  },
  "copy_from_device": {
    "apic": {
      "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (boolean): True if successful, False if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L237"
    },
    "com": {
      "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via telnet or SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .) (optionally include filename)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (str, None): console output if successful, None if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1020"
    },
    "nxos": {
      "aci": {
        "doc": "\n    Copy a file from the device to the server or local system (where the script is running).\n    Local system copy uses HTTP and is only supported via telnet or SSH sessions.\n\n    Args:\n        device (Device): device object\n        local_path (str): local path from the device (path including filename)\n        remote_path (str): Path on the server (default: .)\n        server (str): Server to copy file to (optional)\n        protocol (str): Protocol to use to copy (default: http)\n        vrf (str): VRF to use for copying (default: None)\n        timeout('int'): timeout value in seconds, default 300\n        timestamp (bool): include timestamp in filename (default: False)\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (boolean): True if successful, False if not\n\n    If the server is not specified, below logic applies.\n\n    If no filename is specified, the filename will be based on the device hostname\n    and slugified name of the file determined from the local_path.\n\n    The local IP adddress will be determined from the spawned telnet or ssh session.\n    A temporary http server will be created and the show tech file will be sent\n    to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n\n    Note: if the file already exists, it will be overwritten.\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "copy_from_device",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L183"
      }
    }
  },
  "copy_issu_image_to_disk": {
    "iosxe": {
      "doc": " Copy image from a server to disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            address ('str'): Server address\n            path ('str'): Path on server\n            protocol ('str'): Transfer protocol\n            image ('str'): Image name\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n            wait_time_after_copy ('int'): Wait time after file copy\n            overwrite ('bool'): Flag to overwrite existing file\n        Raises:\n            Exception: Failed copying ISSU image to disk\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_issu_image_to_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L71"
    }
  },
  "copy_pcap_file": {
    "com": {
      "doc": "Copy pcap filename to runtime directory for analysis\n\n        Args:\n            testbed (`obj`): Testbed object\n            filename (`str`): Pcap filename\n            command ('str'): cli command to copy file from remote\n                             server to local server\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_pcap_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L259"
    }
  },
  "copy_running_config_to_flash_memory": {
    "iosxe": {
      "doc": " Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            timeout (`str`): timeout\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n         \n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_running_config_to_flash_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L208"
    }
  },
  "copy_running_config_to_tftp": {
    "iosxe": {
      "doc": " Copy running configuration to tftp location\n\n        Args:\n            device ('obj'): Device object to modify configuration\n            host ('str'): tftp host ip address\n            file('str'): configuration file path and file name\n            ex:)\n                /tftpboot/running_config\n            timeout('int', Optional): timeout in seconds for configuration file load to device(Default is 30 seconds)\n    \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_running_config_to_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L680"
    }
  },
  "copy_startup_config_to_flash_memory": {
    "iosxe": {
      "doc": " Copying startup config to flash memory\n\n        Args:\n            device (`obj`): Device object\n            timeout (`str`): timeout in seconds\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_startup_config_to_flash_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L616"
    }
  },
  "copy_startup_config_to_tftp": {
    "iosxe": {
      "doc": " Copy startup configuration to tftp location\n\n        Args:\n            device ('obj'): Device object to modify configuration\n            host ('str'): tftp host ip address\n            file('str'): configuration file path and file name\n            ex:)\n                /tftpboot/startup_config\n            timeout('int', Optional): timeout in seconds for configuration file load to device(Default is 30 seconds)\n    \n        Returns:\n            None\n        Raises:\n            SubCommandFailure            \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_startup_config_to_tftp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L645"
    }
  },
  "copy_to_device": {
    "apic": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file to copy to on the device (default: None)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: scp)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L183"
    },
    "com": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file path to copy to on the device (default: flash:)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        (str, None): console output if successful, None if not\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L848"
    },
    "iosxr": {
      "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file path to copy to on the device (default: harddisk:)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L235"
    },
    "nxos": {
      "aci": {
        "doc": "\n    Copy file from linux server to the device.\n\n    Args:\n        device (Device): Device object\n        remote_path (str): remote file path on the server\n        local_path (str): local file to copy to on the device (default: None)\n        server (str): hostname or address of the server (default: None)\n        protocol(str): file transfer protocol to be used (default: http)\n        vrf (str): vrf to use (optional)\n        timeout(int): timeout value in seconds, default 300\n        compact(bool): compress image option for n9k, defaults False\n        fu(obj): FileUtils object to use instead of creating one. Defaults to None.\n        use_kstack(bool): Use faster version of copy, defaults False\n                            Not supported with a file transfer protocol\n                            prompting for a username and password\n        http_auth (bool): Use http authentication (default: True)\n\n    Returns:\n        None\n\n    If the server is not specified, a HTTP server will be spawned\n    on the local system and serve the directory of the file\n    specified via remote_path and the copy operation will use http.\n\n    If the device is connected via CLI proxy (unix jump host) and the proxy has\n    'socat' installed, the transfer will be done via the proxy automatically.\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "copy_to_device",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L22"
      }
    }
  },
  "copy_to_server": {
    "com": {
      "doc": " Copy file from directory to server\n\n        Args:\n            testbed ('obj'): Testbed object\n            protocol ('str'): Transfer protocol\n            server ('str'): Server name in testbed yaml or server ip address\n            local_path ('str'): File to copy, including path\n            remote_path ('str'): Where to save the file, including file name\n            timeout('int'): timeout value in seconds, default 300\n            fu_session ('obj'): existing FileUtils object to reuse\n            quiet ('bool'): quiet mode -- does not print copy progress\n        Returns:\n            None\n\n        Raises:\n            Exception\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "copy_to_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L372"
    }
  },
  "create_dhcp_pool": {
    "iosxe": {
      "doc": " Create DHCP pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            network ('str'): IP of the network pool\n            mask ('str'): Subnet mask of the network pool\n            router_id ('str'): Default router ID\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L11"
    }
  },
  "create_dhcp_pool_ipv6": {
    "iosxe": {
      "doc": " Create DHCP IPv6 pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            ipv6_prefix ('str'): IPv6 prefix\n            lifetime ('int'): lifetime in seconds\n            pref_lifetime ('int'): preferred lifetime in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating IPv6 DHCP pool\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dhcp_pool_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L12"
    }
  },
  "create_dhcp_pool_withoutrouter": {
    "iosxe": {
      "doc": " Create DHCP pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n            network ('str'): IP of the network pool\n            mask ('str'): Subnet mask of the network pool\n            lease_days ('int'):Parameters for lease days config\n            lease_hrs ('int'):Parameters for lease hrs config\n            lease_mins ('int'): Parameters for lease mins config\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed creating dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dhcp_pool_withoutrouter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L374"
    }
  },
  "create_dir_file_system": {
    "iosxe": {
      "doc": " create directory in  '<file_system>' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for format to complete in seconds\n            file_sys (\"str\"): File system\n            dir_name(\"str\"): directory name should be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to create directory on file system\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "create_dir_file_system",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L822"
    }
  },
  "create_ip_vrf": {
    "iosxe": {
      "doc": " Create ip vrf\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "create_ip_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L617"
    }
  },
  "cry_key_generate_rsa_encryption": {
    "iosxe": {
      "doc": " \n        cry key generate rsa encryption\n        Args:\n            device ('obj'): Device object\n            mod('str') : mod , (512-4096) \n            label('str') : label -- name for keys\n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "cry_key_generate_rsa_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L68"
    }
  },
  "crypto_key_export": {
    "iosxe": {
      "doc": " Crypto key export\n        Args:\n            device ('obj')    : device to use\n            key_type ('str', optional)  : iosxe routers support rsa or ec keys\n            key_label ('str', optional) : Name of the keypair\n            export_via ('str', optional) : Export keys via terminal or file system. Format to be used {\"terminal\" | \"url bootflash:\"}\n            encryption ('str', optional) : Generates a general purpose RSA key pair for signing and encryption\n            passphrase ('str', optional) : Passphrase used to protect the private key\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            export_key\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "key.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "crypto_key_export",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/key/configure.py#L102"
    }
  },
  "crypto_key_zeroize": {
    "iosxe": {
      "doc": " \n        Zeroize crypto keys\n        Args:\n            device ('obj'): Device object\n            key_type ('str', optional): Type of key to be zeroized\n            key_label ('str',optional): Name of the keypair that needs to be zeroized\n            timeout('int', optional): timeout for exec command execution, default is 30\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    \"\"\"\n    ",
      "module_name": "key.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "crypto_key_zeroize",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/key/clear.py#L13"
    }
  },
  "crypto_pki_import": {
    "iosxe": {
      "eaptls": {
        "doc": " Imports the certificate on the device\n        Args:\n            device (`obj`): Device object\n            certificate ('str'): Certificate to import\n\t\t\tlabel_name ('str') : Label name\n\n        Returns:\n            None\n\n        Raise:\n            SubCommandFailure: Failed to import certificate on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "crypto_pki_import",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L417"
      }
    }
  },
  "crypto_pki_server_request": {
    "iosxe": {
      "eaptls": {
        "doc": " Gets grant ID from device\n        Args:\n            device (`obj`): Device object\n            server_name ('str'): Name of the server\n            retrive_method ('str'): Certificate Retrieve method\n            certificate_format ('str'): Format in which certificate needs to be retrieved\n            certificate ('str'): Certificate to be pasted\n\n        Returns:\n            Grant ID full output or None\n\n        Raise:\n            SubCommandFailure: Failed to get Grant ID full output from device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "crypto_pki_server_request",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L332"
      }
    }
  },
  "cts_refresh_environment_data": {
    "iosxe": {
      "doc": " Refresh CTS environment-data\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to refresh cts environment-data\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "cts_refresh_environment_data",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L521"
    }
  },
  "cts_refresh_pac": {
    "iosxe": {
      "doc": " Refresh CTS pac\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to refresh cts pac\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "cts_refresh_pac",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L537"
    }
  },
  "cts_refresh_policy": {
    "iosxe": {
      "doc": " Refresh CTS policy\n        Args:\n            device ('obj'): device to use\n            refresh_peer ('bool', optional): refresh peer or not, default is False\n            peer_id ('str', optional): peer id to refresh, default is None\n            refresh_sgt ('bool', optional): refresh sgt or not, default is False\n            sgt_id ('str', optional): sgt id to refresh, default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to refresh cts policy\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "cts_refresh_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L488"
    }
  },
  "debug_platform_memory_fed_backtrace": {
    "iosxe": {
      "doc": " debug debug platform software memory fed backtrace configuration\n        Args:\n            device (`obj`): Device object\n            action (`str`): action mustbe either start or stop or clear\n            switch_num (`str`): Default value None. stack device switch number \n            switch_type (`str`): Default value None. switch type is active or standby\n            callsiteid (`str`): Default value None. option to start particular callsiteid in the CLI\n            depth(`str`): Default value is 10.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "debug_platform_memory_fed_backtrace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L160"
    }
  },
  "debug_platform_memory_fed_callsite": {
    "iosxe": {
      "doc": " debug debug platform software memory fed configuration\n        Args:\n            device (`obj`): Device object\n            action (`str`): action mustbe either start or stop or clear\n            switch_num (`str`): Default value None. stack device switch number \n            switch_type (`str`): Default value None. switch type is active or standby\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "debug_platform_memory_fed_callsite",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L129"
    }
  },
  "decode_core": {
    "linux": {
      "doc": " Function to decode the given corefile ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "decode_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L5"
    }
  },
  "decrypt_tacacs_pcap": {
    "iosxe": {
      "doc": "Decrypt and Converting the tacacs pcap file to tacacs txt file\n        Args:\n            filename: taacs pcap filename\n            key: tacacs server key\n            filepath: tacacs pcap file path\n\n        Returns:\n            True : Decrypted and copied to pcap txt file\n            False: No data in pcap text file\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "decrypt_tacacs_pcap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L821"
    }
  },
  "default_interface": {
    "iosxe": {
      "doc": " configure default interface on device\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1289"
    },
    "junos": {
      "doc": " Reset junos interface configuration \n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces to be defaulted\n        Returns:\n            Boolean\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "default_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L13"
    }
  },
  "delete_file_on_device": {
    "junos": {
      "doc": " Deletes file on device\n\n    Args:\n        device (obj): Device object\n        file_name ('str'): File name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_file_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L197"
    }
  },
  "delete_file_on_server": {
    "com": {
      "doc": " delete the file from server\n    Args:\n        testbed ('obj'): testbed object containing the server info\n        server ('str\"): server address or hostname\n        path ('str'): file path on server\n        protocol ('str'): protocol used for deletion, defaults to sftp\n        timeout ('int'):  connection timeout\n    Returns:\n        None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_file_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1371"
    }
  },
  "delete_files": {
    "ios": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L422"
    },
    "iosxe": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L428"
    },
    "nxos": {
      "aci": {
        "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            locations (`list`): list of locations\n                                  ex.) bootflash:/core/\n            filenames (`list`): file name. regular expression is supported\n        Returns:\n            deleted_files (`list`): list of deleted files\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "delete_files",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L353"
      }
    }
  },
  "delete_ip_vrf": {
    "iosxe": {
      "doc": " Remove ip vrf\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_ip_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L639"
    }
  },
  "delete_local_file": {
    "ios": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_local_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L20"
    },
    "iosxe": {
      "doc": " Delete local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_local_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L25"
    }
  },
  "delete_monitor_capture": {
    "iosxe": {
      "doc": " delete Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to delete Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_monitor_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L801"
    }
  },
  "delete_unprotected_files": {
    "apic": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            destination ('str') : Destination directory. default to None. i.e bootflash:/\n        Returns:\n            None\n            ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/utils.py#L38"
    },
    "ios": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n            destination ('str') : Destination directory. default to None. i.e bootflash:/\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L149"
    },
    "iosxe": {
      "doc": "delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n            destination ('str') : Destination directory. default to None. i.e bootflash:/\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L282"
    },
    "nxos": {
      "doc": " Delete all files not matching regex in the protected list\n        Args:\n            device ('obj'): Device object\n            directory ('str'): working directory to perform the operation\n            protected ('list'): list of file patterns that won't be deleted. If it begins\n                                and ends with (), it will be considered as a regex\n            files_to_delete('list') list of files that should be deleted unless they are not protected\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n            allow_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False.\n            destination ('str') : Destination directory. default to None. i.e bootflash:/\n        Returns:\n            None\n            ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "delete_unprotected_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L97"
    }
  },
  "destroy_connection": {
    "com": {
      "doc": " Destroy connection device\n        Args:\n            device ('obj'): Device object\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "destroy_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L748"
    }
  },
  "detach_dhcpv6_guard_policy_to_interface": {
    "iosxe": {
      "doc": " Detach DHCPv6 Guard Policy from an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_dhcpv6_guard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2191"
    }
  },
  "detach_dhcpv6_guard_policy_vlan": {
    "iosxe": {
      "doc": " Detach DHCPv6 Guard Policy from a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to attach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_dhcpv6_guard_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2475"
    }
  },
  "detach_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Detaches the given ipv6 dhcp guard policy from an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be detached\n            interface (str): interface to detach policy from\n            vlan (str): vlan or vlan range to detach the policy from e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 dhcp guard policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L392"
    }
  },
  "detach_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Detaches the given ipv6 nd suppress policy to an interface or vlan(s)\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be detached\n            interface (str): interface to detach policy from\n            vlan (str): vlan or vlan range to detach the policy from. e.g: 1-10,15\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 nd suppress policy {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L464"
    }
  },
  "detach_ipv6_raguard_policy_to_interface": {
    "iosxe": {
      "doc": " Detach IPv6 RA Guard Policy from an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to detach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_raguard_policy_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2226"
    }
  },
  "detach_ipv6_raguard_policy_to_vlan": {
    "iosxe": {
      "doc": " Detach IPv6 RA Guard Policy from Vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to detach policy\n            policy_name (`str`): Policy name to be attached to interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "detach_ipv6_raguard_policy_to_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2293"
    }
  },
  "device_tracking_attach_policy": {
    "iosxe": {
      "doc": " Attach device tracking policy to a target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach device-tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1044"
    }
  },
  "device_tracking_detach_policy": {
    "iosxe": {
      "doc": " Detach device-tracking policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach device-tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1076"
    }
  },
  "device_tracking_unit_test": {
    "iosxe": {
      "doc": " Run device-tracking unit tests\n        Args:\n            device ('obj'): device object\n            options ('list'): list of policy configuration options:\n                dictionary contains any of the following keys:\n                    association ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        mac_address ('str')                   48-bit hardware address\n                        command ('str')                       command to execute\n                    bt_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        # configs ('dict', optional):\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                        data_glean('bool', optional):\n                        pref ('dict', optional):\n                            level ('int'):                    preference level\n                            incomplete('bool'):               if True, set incomplete state\n                            origin ('int'):                   set origin\n                            iterate ('int', optional):        number of iterations\n                    bt_mac ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        # configs ('dict', optional):\n                        mac_address ('str'):                  48-bit hardware address\n                        canip ('str', optional):              candidate IP address\n                        wired ('boot', optional):             If true, wired connection\n                    bulk_sync ('bool'):                       if true, bulk sync to DS\n                    check_reach ('dict', optional):\n                        network_address ('str'):              IPv6 address\n                        vlan ('int'):                         vlan id\n                    clear ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        vlans ('list', optional):             list of vlan ids\n                    disable_cli_sync ('bool'):                if true, disable CLI sync\n                    dna ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        policy ('str', optional):             policy name\n                        priority ('int', optional):           policy priority\n                        vlan ('int', optional)\n                    evpn_dt ('int'):                          vlanid - de/attach DT policy from evpn\n                    evpn_flood_suppr ('dict', optional):\n                        vlan: ('int'):                        vlan id\n                        dhcp_floop_suppr ('bool')             enable/disable flooping suppress from evpn\n                    evpn_gateway_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                    evpn_remote_bt_add ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        network_address ('str'):              IPv4/v6 address or IPv6 prefix\n                        mac_address ('str'):                  48-bit hardware address\n                        pref_level ('int'):                   preference level\n                    fabric ('dict', optional):\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        mac_address('str'):                   48-bit hardware address\n                    fault ('dict', optional):\n                        code: ('int'):                        fault code\n                        mac_address ('str'):                  48-bit hardware address\n                        bdid ('int'):                         bridge-domain id\n                        interface ('str'):                    interface name\n                        num ('str'):                          interface number\n                        transaction_id ('int'):               DHCP transation id\n                        client_address ('str'):               Client IP address\n                        server_address ('str'):               Server IP address\n                    flood_suppr ('int'):                      vlan id, de/attach flooding suppress policy\n                    ha_sync_msg ('dict', optional):\n                        msg_type ('str'):                     HA message type\n                        action ('str'):                       enable or disable message type\n                    ip_dhcp_snooping ('int'):                 vlan id, de/attach shared policy from ip dhcp snooping\n                    lisp_dt ('dict', optional):\n                        vlan ('int'):                         vlan id\n                        pref_level ('int'):                   preference level\n                        cache_guard ('int'):                  cache guard\n                    notify ('dict', optional):\n                        delete ('dict', optional):\n                            network_address ('str'):          IP address\n                            check ('str'):                    type of check\n                        register ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                    pgm ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        peer ('dict', optional):\n                            network_address ('str'):          IP address\n                            interface ('str'):                interface\n                            num ('str'):                      interface num\n                        vlan ('int', optional):               vlan id\n                    profile ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                    reapply_filters ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                    replace_policy ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('dict', optional):\n                            id ('int'):                       vlan id\n                            old_policy ('str'):               old policy name\n                            new_policy ('str'):               new policy name\n                    transport ('str'):                        authentication key (Hex string)\n                    upgm ('dict', optional):\n                        target ('dict', optional):\n                            interface ('str'):                interface name\n                            num ('str'):                      interface number\n                        vlan ('int', optional):               vlan id\n                ex.)\n                    [\n                        {\n                            \"association\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"command\": \"new\"\n                            },\n                            \"bt_add\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"pref\": {\n                                    \"level\": 2,\n                                    \"incomplete\": True,\n                                    \"origin\": 4,\n                                    \"iterate\": 2,\n                                },\n                            },\n                            \"bt_mac\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"wired\": True,\n                            },\n                            \"bulk_sync\": True,\n                            \"check_reach\": {\n                                \"network_address\": \"FE80::6AF3:3E56:FE0B:BEE9\",\n                                \"vlan\": 39,\n                            },\n                            \"clear\": {\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"vlans\": [1, 2, 3, 4, 5],\n                            },\n                            \"disable_cli_sync\": True,\n                            \"dna\": {\n                                \"policy\": \"test\",\n                                \"priority\": 255,\n                                \"vlan\": 39,\n                            },\n                            \"evpn_dt\": 39,\n                            \"evpn_flood_suppr\": {\n                                \"vlan\": 39,\n                                \"dhcp_floop_suppr\": True,\n                            },\n                            \"evpn_gateway_add\": {\n                                \"vlan\": 39,\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                            },\n                            \"evpn_remote_bt_add\": {\n                                \"vlan\": 39,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"network_address\": \"10.10.10.10\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"pref_level\": 255,\n                            },\n                            \"fabric\": {\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"mac_address\": \"1234.5678.90AB\",\n                            },\n                            \"fault\":{\n                                \"code\": 12,\n                                \"mac_address\": \"1234.5678.90AB\",\n                                \"bdid\": 4094,\n                                \"interface\": \"TwentyFiveGigE\",\n                                \"num\": \"1/0/42\",\n                                \"transaction_id\": 10000,\n                                \"client_address\": \"10.10.10.10\",\n                                \"server_address\": \"20.20.20.20\",\n                            },\n                            \"flood_suppr\": 39,\n                            \"ha_sync_msg\": {\n                                \"msg_type\": \"bt-entry\",\n                                \"action\": \"disable\",\n                            },\n                            \"ip_dhcp_snooping\": 39,\n                            \"lisp_dt\": {\n                                \"vlan\": 39,\n                                \"pref_level\": 0,\n                                \"cache_guard\": 3,\n                            },\n                            \"notify\": {\n                                \"delete\": {\n                                    \"network_address\": \"10.10.10.10\",\n                                    \"check\": \"quick_check\",\n                                },\n                            },\n                            \"pgm\": {\n                                \"vlan\": 39,\n                            },\n                            \"profile\": {\n                                \"vlan\": 39,\n                            },\n                            \"reapply_filters\":{\n                                \"vlan\": 39,\n                            },\n                            \"replace_policy\": {\n                                \"vlan\": {\n                                    \"id\": 39,\n                                    \"old_policy\": \"policy_old\",\n                                    \"new_policy\": \"policy_new\",\n                                },\n                            },\n                            \"transport\": \"ffff\",\n                            \"upgm\": {\n                                \"target\": {\n                                    \"interface\": \"TwentyFiveGigE\",\n                                    \"num\": \"1/0/42\",\n                                },\n                            },\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to perform device-tracking unit-test\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "device_tracking_unit_test",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1272"
    }
  },
  "diff_configuration": {
    "com": {
      "doc": " Show difference between two configurations\n        Args:\n            config1 ('str'): Configuration one\n            config2 ('str'): Configuration two\n        Raise:\n            None\n        Returns:\n            Diff\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "diff_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1544"
    }
  },
  "disable_aaa_authentication_login": {
    "iosxe": {
      "doc": " configure 'no aaa authentication login default local tacacs+'\n    Args:\n        device (`obj`)   : Device object\n        auth_list('str') : authentication list(default or named)\n        auth_db1('str')  : database local or radius or tacacs+\n        auth_db2('str')  : fall back database local or radius or tacacs+\n   \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_aaa_authentication_login",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1604"
    }
  },
  "disable_aaa_password_restriction": {
    "iosxe": {
      "doc": " configure 'no aaa password restriction'\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_aaa_password_restriction",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1519"
    }
  },
  "disable_autostate_on_interface": {
    "iosxe": {
      "doc": " Disable autostate on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name to disable autostate\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to disable autostate on interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_autostate_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4832"
    }
  },
  "disable_bfd_on_isis_ipv6_address": {
    "iosxe": {
      "doc": " Disables bfd on isis ipv6 address\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling bfd on isis ipv6 address\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_bfd_on_isis_ipv6_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L277"
    }
  },
  "disable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Disables bfd on ospf protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L74"
    }
  },
  "disable_cts_enforcement": {
    "iosxe": {
      "doc": " Disable cts role-based enforcement\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_cts_enforcement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L290"
    }
  },
  "disable_cts_enforcement_vlan": {
    "iosxe": {
      "doc": " disable cts role-based enforcement on given vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_cts_enforcement_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L307"
    }
  },
  "disable_debug": {
    "iosxe": {
      "doc": " Disable debug for the mentioned parameter\n        Args:\n            device ('obj'): device to use\n            parameter ('str'): parameter for which debug has to be disabled\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling debug\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_debug",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L41"
    }
  },
  "disable_debug_all": {
    "iosxe": {
      "doc": " Turns off debugging\n        Example : no debug all\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_debug_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/execute.py#L30"
    }
  },
  "disable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Disabling DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to disable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L119"
    }
  },
  "disable_dhcp_relay_information_option": {
    "iosxe": {
      "doc": " Disable DHCP relay information option \n        Args:\n            device ('obj'): device to use\n            vpn ('str',optional): vpn option ,defaut is empty string\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable dhcp relay information option\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_relay_information_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L648"
    }
  },
  "disable_dhcp_smart_relay": {
    "iosxe": {
      "doc": " Disable ip dhcp auto-broadcast on device\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed disabling smart-relay on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_smart_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L566"
    }
  },
  "disable_dhcp_snooping": {
    "iosxe": {
      "doc": " Disable DHCP snooping globally\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping globally\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L285"
    }
  },
  "disable_dhcp_snooping_glean": {
    "iosxe": {
      "doc": " Disable DHCP snooping glean globally\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping glean globally\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping_glean",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L97"
    }
  },
  "disable_dhcp_snooping_option_82": {
    "iosxe": {
      "doc": " Disable DHCP snooping Option 82\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping Option 82\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping_option_82",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L196"
    }
  },
  "disable_dhcp_snooping_vlan": {
    "iosxe": {
      "doc": " Disable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed disabling DHCP snooping on vlan\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dhcp_snooping_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L156"
    }
  },
  "disable_dot1x_sysauthcontrol": {
    "iosxe": {
      "doc": " Globally disables 802.1X port-based authentication.\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable 802.1X port-based authentication.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_dot1x_sysauthcontrol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L500"
    }
  },
  "disable_et_analytics": {
    "iosxe": {
      "doc": " disable et-analytics\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name to disable et-analytics\n        \n        Returns:\n            None \n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L697"
    }
  },
  "disable_iox": {
    "iosxe": {
      "doc": " \n    Configure no iox    \n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L104"
    }
  },
  "disable_ip_dhcp_auto_broadcast": {
    "iosxe": {
      "doc": " Disable ip dhcp auto-broadcast on device\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed disabling ip dhcp auto-broadcast on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ip_dhcp_auto_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L474"
    }
  },
  "disable_ip_igmp_snooping_report_suppression": {
    "iosxe": {
      "doc": " Disables the report-suppression\n        Example : no ip igmp snooping report-suppression\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ip_igmp_snooping_report_suppression",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1277"
    }
  },
  "disable_ip_routing": {
    "iosxe": {
      "doc": " Disables ip routing on device\n\n        Args:\n            device ('obj'): Device obj\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L476"
    }
  },
  "disable_ipv6_address_dhcp": {
    "iosxe": {
      "doc": " Disables DHCP for IPv6 address assignment on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to disable IPv6 address DHCP\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ipv6_address_dhcp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3323"
    }
  },
  "disable_ipv6_dhcp_server": {
    "iosxe": {
      "doc": " Unconfigure IPv6 DHCP server from an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to enable IPv6 DHCP server\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ipv6_dhcp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3263"
    }
  },
  "disable_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Disables ipv6 multicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L723"
    }
  },
  "disable_keepalive_on_interface": {
    "iosxe": {
      "doc": " Disables keepalive on interface \n\n        Args:\n            device ('obj'): Device obj\n            interface ('str'): MTU value to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_keepalive_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L529"
    }
  },
  "disable_login_password_reuse_interval": {
    "iosxe": {
      "doc": " configure 'no login password-reuse-interval'\n    Args:\n        device (`obj`)  : Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_login_password_reuse_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1558"
    }
  },
  "disable_service_internal": {
    "iosxe": {
      "doc": " Disable service internal\n        Args:\n            device ('obj'): device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable service internal\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1254"
    }
  },
  "disable_usb_ssd": {
    "iosxe": {
      "doc": " \n    Configure - platform usb disable\n    Disables connected SSDs on c9300\n    Args:\n        device ('obj') : Device object\n        timeout ('int'): timeout arg for Unicon configure for this CLI\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "disable_usb_ssd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L34"
    }
  },
  "downgrade_issu_image_on_router": {
    "iosxe": {
      "doc": " Execute software downgrade on router\n        Args:\n            device ('obj'): Device object\n            upgraded_image ('str'): Name of current installed image\n            downgrade_image ('str'): Name of image to be used in downgrade\n            disk ('str'): Disk name            \n            timeout ('int'): Timeout in seconds\n        Raise:\n            SubCommandFailure: Failed downgrading image on device\n            ConnectionError: Failed reconnecting to device\n        Returns:\n            None\n\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "downgrade_issu_image_on_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L368"
    }
  },
  "dynamic_diff_create_running_config": {
    "com": {
      "doc": " Creates a merged running config from template dynamic diff with\n        variables replaced by mapping and merged with base config\n        Args:\n            mapping ('dict'): Variable to interface mapping\n            ex.) {'{{ int_1 }}': 'Ethernet2/1-48', '{{ int_2 }}': 'Ethernet5'}\n            template ('str'): Content of the dynamic diff template\n            base_config ('str'): Content of the base config\n        Raise:\n            None\n        Returns:\n            Config ('str'): The merged running config from template\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "dynamic_diff_create_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1614"
    }
  },
  "dynamic_diff_parameterized_running_config": {
    "com": {
      "doc": " Parameterize device interface from the configuration and return the parameterized configuration\n        with respect to the mapping.\n        Args:\n            base_config ('str'): Content of the base config\n            mapping ('dict'): Interface to variable mapping\n            ex.) {'Ethernet2/1-48': '{{ int_1 }}', 'Ethernet5': '{{ int_2 }}'}\n            running_config ('str'): The running config. If set to None, running config will be retrieved\n                from currently connected device\n        Raise:\n            None\n        Returns:\n            Templated Config ('str'): The config that is parameterized\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "dynamic_diff_parameterized_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1566"
    }
  },
  "enable_aaa_authentication_login": {
    "iosxe": {
      "doc": " configure 'aaa authentication login default local tacacs+'\n    Args:\n        device (`obj`)   : Device object\n        auth_list('str') : authentication list(default or named)\n        auth_db1('str')  : database local or radius or tacacs+\n        auth_db2('str')  : fall back database local or radius or tacacs+\n   \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_aaa_authentication_login",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1578"
    }
  },
  "enable_aaa_password_restriction": {
    "iosxe": {
      "doc": " configure 'aaa password restriction'\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_aaa_password_restriction",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1501"
    }
  },
  "enable_autoconf": {
    "iosxe": {
      "doc": " Enable autoconf\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable autoconf\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_autoconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L188"
    }
  },
  "enable_backtrace": {
    "nxos": {
      "n9k": {
        "doc": " analyze core by BingoPy\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to enable backtrace\n            module (`int`): module number for LCs\n            frame_count (`int`): number of backtraces\n        Returns:\n            out (`str`): Output of command\n    ",
        "module_name": "debug.debug",
        "package": "genie.libs.sdk.apis",
        "uid": "enable_backtrace",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/debug/debug.py#L11"
      }
    }
  },
  "enable_bfd_on_isis_ipv6_address": {
    "iosxe": {
      "doc": " Enabled bfd on isis ipv6 address on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on isis ipv6 address\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bfd_on_isis_ipv6_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L258"
    }
  },
  "enable_bfd_on_ospf": {
    "iosxe": {
      "doc": " Enabled bfd on ospf protocol on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on ospf protocol\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bfd_on_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L52"
    }
  },
  "enable_bfd_static_route": {
    "iosxe": {
      "doc": " Enables bfd static route on device\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure under\n            ip_address ('str'): ip address of destination\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling bfd static rout on device\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bfd_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L96"
    }
  },
  "enable_bgp_forwarding": {
    "iosxe": {
      "doc": " enables bgp forwarding under interface\n        Args:\n            device('obj'): device to configure\n            interface_name('str'): interface name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_bgp_forwarding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1344"
    }
  },
  "enable_cts_enforcement": {
    "iosxe": {
      "doc": " Enable cts role-based enforcement\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_cts_enforcement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L33"
    }
  },
  "enable_cts_enforcement_vlan": {
    "iosxe": {
      "doc": " Enable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable cts role-based enforcement\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_cts_enforcement_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L51"
    }
  },
  "enable_debug": {
    "iosxe": {
      "doc": " Enable debug for the mentioned parameter\n        Args:\n            device ('obj'): device to use\n            parameter ('str'): parameter for which debug has to be enabled\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling debug\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_debug",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L12"
    }
  },
  "enable_debug_ilpower_event": {
    "iosxe": {
      "doc": " debug ilpower event\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed to enable the debug ilpower event\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_debug_ilpower_event",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L207"
    }
  },
  "enable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Enabling DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to enable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L73"
    }
  },
  "enable_dhcp_relay_information_option": {
    "iosxe": {
      "doc": " Enable DHCP relay information option \n        Args:\n            device ('obj'): device to use\n            vpn ('str',optional): vpn option ,defaut is empty string\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable dhcp relay information option\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_relay_information_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L624"
    }
  },
  "enable_dhcp_smart_relay": {
    "iosxe": {
      "doc": " Enable dhcp smart-relay on device\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed enabling smart-relay on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_smart_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L549"
    }
  },
  "enable_dhcp_snooping": {
    "iosxe": {
      "doc": " Enable DHCP snooping \n        Args:\n            device ('obj'): device to use\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCP snooping\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L136"
    }
  },
  "enable_dhcp_snooping_glean": {
    "iosxe": {
      "doc": " Enable DHCP snooping glean globally\n        Args:\n            device ('obj'): device to use            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCP snooping glean\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping_glean",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L78"
    }
  },
  "enable_dhcp_snooping_option_82": {
    "iosxe": {
      "doc": " Enable DHCP snooping Option 82\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling DHCP snooping Option 82\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping_option_82",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L268"
    }
  },
  "enable_dhcp_snooping_vlan": {
    "iosxe": {
      "doc": " Enable DHCP snooping on vlan\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring DHCP snooping on vlan\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dhcp_snooping_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L116"
    }
  },
  "enable_dot1x_sysauthcontrol": {
    "iosxe": {
      "doc": " Globally enables 802.1X port-based authentication.\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable 802.1X port-based authentication.\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_dot1x_sysauthcontrol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L273"
    }
  },
  "enable_et_analytics": {
    "iosxe": {
      "doc": " Enable et-analytics\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name to enable et-analytics\n        \n        Returns:\n            None \n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L719"
    }
  },
  "enable_http_server": {
    "iosxe": {
      "c9800": {
        "doc": "Configure ip http server\n    Args:\n        device (obj): Device object\n    Returns:\n            None\n    Raises:\n            SubCommandFailure\n    ",
        "module_name": "platform.configure",
        "package": "genie.libs.sdk.apis",
        "uid": "enable_http_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/configure.py#L12"
      }
    }
  },
  "enable_iox": {
    "iosxe": {
      "doc": " \n    Configure iox    \n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_iox",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L89"
    }
  },
  "enable_ip_dhcp_auto_broadcast": {
    "iosxe": {
      "doc": " Enable ip dhcp auto-broadcast on device\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed enabling ip dhcp auto-broadcast on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_dhcp_auto_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L455"
    }
  },
  "enable_ip_dhcp_snooping_trust": {
    "iosxe": {
      "doc": " Enable DHCP snooping trust on interface\n        Configure 'ip dhcp snooping trust' on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed enabling DHCP snooping trust on interface\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_dhcp_snooping_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L242"
    }
  },
  "enable_ip_igmp_snooping_report_suppression": {
    "iosxe": {
      "doc": " Enables a limit on membership report traffic sent to multicast-capable routers\n        Example : ip igmp snooping report-suppression\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_igmp_snooping_report_suppression",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1260"
    }
  },
  "enable_ip_routing": {
    "iosxe": {
      "doc": " Enables ip routing on device\n\n        Args:\n            device ('obj'): Device obj\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ip_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L401"
    }
  },
  "enable_ipv6_address_dhcp": {
    "iosxe": {
      "doc": " Enables DHCP for IPv6 address assignment on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to enable IPv6 address DHCP\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_address_dhcp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3293"
    }
  },
  "enable_ipv6_dhcp_server": {
    "iosxe": {
      "doc": " Enable IPv6 DHCP server on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to enable IPv6 DHCP server\n            pool_name (`str`): Pool name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_dhcp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2157"
    }
  },
  "enable_ipv6_eigrp_router": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')     device to use\n            process_id ('str). EIGRP process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_eigrp_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L84"
    }
  },
  "enable_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Enables ipv6 multicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L697"
    }
  },
  "enable_ipv6_unicast_routing": {
    "iosxe": {
      "doc": " Enables ipv6 unicast routing on device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_ipv6_unicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L426"
    }
  },
  "enable_license_smart_authorization_return": {
    "iosxe": {
      "doc": " Enable license smart authorization return\n        Example : license smart authorization return all online\n\n        Args:\n            device ('obj'): device to use\n            device_type ('str'): type of device for authorization code return (eg. all, local)\n            mode ('str'): authorization code return mode (eg. offline, online)\n            path_name ('str'): offline path name\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_license_smart_authorization_return",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/execute.py#L48"
    }
  },
  "enable_license_smart_clear_eventlog": {
    "iosxe": {
      "doc": " Enable license smart clear eventlog\n        Example : license smart clear eventlog\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_license_smart_clear_eventlog",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/execute.py#L72"
    }
  },
  "enable_login_password_reuse_interval": {
    "iosxe": {
      "doc": " configure 'login password-reuse-interval 5'\n    Args:\n        device (`obj`)  : Device object\n        interval('int') : days ranging from 1 to 365.\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_login_password_reuse_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1538"
    }
  },
  "enable_multicast_advertise_on_evi": {
    "iosxe": {
      "doc": " Enable multicast advertise on evi\n        Args:\n            device ('obj'): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to enable multicast advertise on evi\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_multicast_advertise_on_evi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L601"
    }
  },
  "enable_radius_automate_tester_probe_on": {
    "iosxe": {
      "doc": "configure automate-tester username <name> probe-on vrf <vrf> under radius server\n    Args:\n        device (`obj`): Device object\n        server_name ('str'): Radius server name\n        user_name ('str'): Identity Username\n        vrf('str'): vrf name \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_radius_automate_tester_probe_on",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1628"
    }
  },
  "enable_routing_debug_static_route": {
    "iosxe": {
      "doc": " Enables debug route on device\n\n        Args:\n            device ('obj'): Device obj\n            route ('str'): route\n            mask (str): mask the ip address\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_routing_debug_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L371"
    }
  },
  "enable_service_internal": {
    "iosxe": {
      "doc": " Enable service internal\n        Args:\n            device ('obj'): device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable service internal\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1236"
    }
  },
  "enable_switchport_trunk_on_interface": {
    "iosxe": {
      "doc": " Enable switchport trunk on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name to enable switchport trunk\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to enable switchport trunk on interface\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_switchport_trunk_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4808"
    }
  },
  "enable_usb_ssd": {
    "iosxe": {
      "doc": " \n    Configure - no platform usb disable\n    Enables connected SSDs on c9300\n    Args:\n        device ('obj') : Device object\n        timeout ('int'): timeout arg for Unicon configure for this CLI\n    Returns:\n        None\n    ",
      "module_name": "apphosting.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "enable_usb_ssd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/configure.py#L15"
    }
  },
  "escape_ansi": {
    "com": {
      "doc": null,
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "escape_ansi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L170"
    }
  },
  "exclude_ip_dhcp": {
    "iosxe": {
      "doc": " Exclude IP in DHCP\n        Args:\n            device ('obj'): device to use\n            ip ('str'): ip to exclude\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed excluding IP in DHCP config\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "exclude_ip_dhcp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L176"
    }
  },
  "execute": {
    "com": {
      "doc": " execute command to device\n        Args:\n            device (`obj`): Device object\n        Return:\n            output (`str`): output from command on device\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L448"
    },
    "junos": {
      "doc": " Execute command to device\n\n        Args:\n            device ('obj'): Device object\n            command ('str'): Command with a higher priority\n            alternative_command ('str'): An alternative command that would be executed if the given command creates an error\n        \n        Returns:\n            output which is generated by command\n            \n        Raises:\n            N/A or SubCommandFailure       \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "execute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L305"
    }
  },
  "execute_and_parse_json": {
    "com": {
      "doc": " execute the specified command on the device which must return output in JSON format.\n        The JSON is parsed into a dict.\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            output (`dict`): parsed JSON output from command on device as a dict\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_and_parse_json",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L470"
    }
  },
  "execute_ap_tx_power_commands": {
    "iosxe": {
      "c9800": {
        "doc": null,
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_ap_tx_power_commands",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/execute.py#L52"
      }
    }
  },
  "execute_by_jinja2": {
    "linux": {
      "doc": " Configure using Jinja template\n        Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            post_commands ('list'): List of post commands\n            failure_commands ('list'): List of commands required after failure\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L52"
    }
  },
  "execute_card_OIR": {
    "ios": {
      "doc": " Execute 'hw-module subslot <slot> oir power-cycle' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR has to be performed\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L233"
    },
    "iosxe": {
      "doc": " Execute 'hw-module subslot <slot> oir power-cycle' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR has to be performed\n            switch_id ('str', optional): Switch number(In case of SVL/Stack) on which OIR has to be performed. Default is None.\n            timeout ('int',optional): Max time for card oir execution to complete in seconds.Defaults to 60\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L366"
    }
  },
  "execute_card_OIR_insert": {
    "iosxe": {
      "doc": " Execute 'hw-module subslot <slot> oir insert' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR insert has to be performed\n            switch_id ('str', optional): Switch number(In case of SVL/Stack) on which OIR insert has to be performed. Default is None.\n            timeout ('int',optional): Max time for card oir insertion to complete in seconds.Defaults to 60\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR_insert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L443"
    }
  },
  "execute_card_OIR_remove": {
    "iosxe": {
      "doc": " Execute 'hw-module subslot <slot> oir remove' on the device\n        Args:\n            device ('obj'): Device object\n            card_number ('str'): Card number on which OIR remove has to be performed\n            switch_id ('str', optional): Switch number(In case of SVL/Stack) on which OIR remove has to be performed. Default is None.\n            timeout ('int',optional): Max time for card oir removal to complete in seconds.Defaults to 60\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_card_OIR_remove",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L404"
    }
  },
  "execute_change_boot_variable": {
    "nxos": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n            timeout ('int'): Timeout in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_change_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L17"
    }
  },
  "execute_clean_controller_fabric": {
    "apic": {
      "doc": " Cleans the controller part of the ACI fabric\n\n    Args:\n        device (obj): Device to execute on\n\n        max_time (int, optional): Max time in seconds allowed for 'acidiag\n            touch clean'. Defaults to 90.\n\n    Returns:\n        True if successful\n        False if failed\n\n    Raises:\n        N/A\n    ",
      "module_name": "fabric.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clean_controller_fabric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/fabric/execute.py#L93"
    }
  },
  "execute_clean_node_fabric": {
    "nxos": {
      "aci": {
        "doc": " Cleans the node part of the ACI fabric\n\n    Args:\n        device (obj): Device to execute on\n\n        hostname (str, optional): Hostname to copy boot image from if its not\n            found. Defaults to None.\n\n        copy_protocol (str, optional): Protocol to use for copying boot image\n            if its not found. Defaults to None\n\n        image (str, optional): Boot image to copy if its not found. Defaults\n            to None.\n\n        destination_dir (str, optional): Directory to copy the boot image to.\n            Defaults to None.\n\n        copy_max_time (int, optional): Max time in seconds allowed for copying\n            the image. Defaults to 300.\n\n        max_time (int, optional): Max time in seconds allowed for executing\n            clean commands. Defaults to 90.\n\n    Returns:\n        True if successful\n        False if failed\n\n    Raises:\n        N/A\n    ",
        "module_name": "fabric.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_clean_node_fabric",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/fabric/execute.py#L10"
      }
    }
  },
  "execute_clear_dns_statistics": {
    "iosxe": {
      "doc": " Execute test CLI to Clear umbrella dns querey/response statistics\n        Args:\n            device ('obj'): device to use\n        Returns:\n            clear statistics execution command\n        Raises:\n            SubCommandFailure: test ngdns cli\n    ",
      "module_name": "umbrella_odns.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_dns_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/execute.py#L25"
    }
  },
  "execute_clear_firmware_repository": {
    "apic": {
      "doc": " Clears the firmware repository.\n\n    Args:\n        device (obj): Device to execute on\n\n        sleep_after_delete (int, optional): Time in seconds to sleep\n            after clearing the firmware repository. Defaults to 5.\n\n    Returns:\n        True if firmware repository is emptied\n        False if firmware repository cannot be emptied\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_firmware_repository",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L10"
    }
  },
  "execute_clear_install_label": {
    "iosxe": {
      "doc": "\n    Performs clear install state on device\n    Args:\n        device ('obj'): Device object\n        timeout ('int, optional'): Timeout value\n        id = ('str optional'): rollback_label id\n        label_name = ('str optional'): rollback_label name\n        connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n    Returns:\n        True if clear install state is successfull\n        False if clear install state is not successfull\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_install_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L607"
    }
  },
  "execute_clear_install_state": {
    "iosxe": {
      "doc": "\n    Performs clear install state on device\n    Args:\n        device ('obj'): Device object\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n    Returns:\n        True if clear install state is successfull\n        False if clear install state is not successfull\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_install_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L533"
    }
  },
  "execute_clear_ipdhcp_snooping_database_statistics": {
    "iosxe": {
      "doc": " clear ip dhcp  snooping database statistics\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_ipdhcp_snooping_database_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L600"
    }
  },
  "execute_clear_line": {
    "com": {
      "doc": " Executes 'clear line <port>' to clear busy console port on device\n        Args:\n            device ('obj'): Device object\n            alias ('str'): Alias used for console port connection\n                           Default: 'cli'\n        Returns:\n            None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L22"
    }
  },
  "execute_clear_logging": {
    "iosxe": {
      "doc": " Clears logging logs\n        execute - clear logging\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            None\n    ",
      "module_name": "logging.get",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#L35"
    }
  },
  "execute_clear_nat64_statistics": {
    "iosxe": {
      "doc": " clear nat64 statistics\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L31"
    }
  },
  "execute_clear_nat64_statistics_failure": {
    "iosxe": {
      "doc": " clear nat64 statistics failure\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics_failure",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L46"
    }
  },
  "execute_clear_nat64_statistics_global": {
    "iosxe": {
      "doc": " clear nat64 statistics global\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L61"
    }
  },
  "execute_clear_nat64_statistics_interface": {
    "iosxe": {
      "doc": " clear nat64 statistics interface {interface_name}\n        Args:\n            device ('obj'): Device object\n            interface_name('str'): Interface name to clear nat64 statistics interface {interface_name}\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L76"
    }
  },
  "execute_clear_nat64_statistics_pool": {
    "iosxe": {
      "doc": " clear nat64 statistics pool {pool_name}\n        Args:\n            device ('obj'): Device object\n            pool_name('str'): Pool name to clear nat64 statistics\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L93"
    }
  },
  "execute_clear_nat64_statistics_prefix_stateful": {
    "iosxe": {
      "doc": " clear nat64 statistics prefix stateful {ipv6_address}/{prefix_length}\n        Args:\n            device ('obj'): Device object\n            ipv6_address('str'): IPv6 Address to clear nat64 statistics prefix stateful {ipv6_address}/{prefix_length}\n            prefix_length('str'): Prefix length to clear nat64 statistics prefix stateful {ipv6_address}/{prefix_length}\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_statistics_prefix_stateful",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L110"
    }
  },
  "execute_clear_nat64_translations_all": {
    "iosxe": {
      "doc": " clear nat64 translations all\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_translations_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L128"
    }
  },
  "execute_clear_nat64_translations_protocol": {
    "iosxe": {
      "doc": " clear nat64 translations protocol {protocol_name}\n        Args:\n            device ('obj'): Device object\n            protocol_name('str'): Protocl name to clear nat64 translations protocol {protocol_name}\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat64_translations_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L143"
    }
  },
  "execute_clear_nat_translation": {
    "iosxe": {
      "doc": " Clear All NAT Flows\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_nat_translation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/execute.py#L10"
    }
  },
  "execute_clear_parser_statistics": {
    "iosxe": {
      "doc": " clear parser statistics\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_parser_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L766"
    }
  },
  "execute_clear_platform_hardware_fed_active_qos_statistics_interface": {
    "iosxe": {
      "doc": " clear platform hardware fed active qos statistics interface\n        Args:\n            device ('obj'): Device object\n            inft ('str'): interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_hardware_fed_active_qos_statistics_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L668"
    }
  },
  "execute_clear_platform_software_fed_active_acl_counters_hardware": {
    "iosxe": {
      "doc": " clear platform software fed active acl counters hardware\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_active_acl_counters_hardware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L481"
    }
  },
  "execute_clear_platform_software_fed_active_cpu_interface": {
    "iosxe": {
      "doc": " clear platform software fed active cpu-interface\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_active_cpu_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L653"
    }
  },
  "execute_clear_platform_software_fed_switch_acl_counters_hardware": {
    "iosxe": {
      "doc": " clear platform software fed switch acl counters hardware\n        Args:\n            device ('obj'): Device object\n            switch_num ('int'): Switch number to clear acl counters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_switch_acl_counters_hardware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L496"
    }
  },
  "execute_clear_platform_software_fed_switch_active_cpu_interface": {
    "iosxe": {
      "doc": " clear platform software fed switch active cpu-interface\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_switch_active_cpu_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L569"
    }
  },
  "execute_clear_platform_software_fed_switch_mode_acl_stats": {
    "iosxe": {
      "doc": " clear platform software fed {switch_mode} acl stats\n        Args:\n            device ('obj'): Device object\n            switch_mode ('str'): active|standby|switch active|switch standby\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_clear_platform_software_fed_switch_mode_acl_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L584"
    }
  },
  "execute_copy_run_to_start": {
    "com": {
      "doc": " Execute copy running-config to startup-config\n        Args:\n            device ('obj'): Device object\n            command_timeout ('int'): Timeout value in sec, Default Value is 300 sec\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n            copy_vdc_all ('boolean'): Copy on all VDCs or not, Default Value is False\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_run_to_start",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L381"
    }
  },
  "execute_copy_to_running_config": {
    "com": {
      "doc": " Copying file to running-config on device\n        Args:\n            device ('obj'): Device object\n            file ('str'): String object to copy to device\n            copy_config_timeout ('int'): Timeout for copy in seconds (default: 60)\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_to_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L336"
    }
  },
  "execute_copy_to_startup_config": {
    "com": {
      "doc": " Copying file to startup-config on device\n        Args:\n            device ('obj'): Device object\n            file ('str'): String object to copy to device\n            dest ('str'): Target to copy to (default: startup-config)\n            copy_config_timeout ('int'): Timeout for copy in seconds (default: 60)\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_copy_to_startup_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L358"
    }
  },
  "execute_create_rollback_description": {
    "iosxe": {
      "doc": "\n    Creates rollback description for rollback id\n    Args:\n        device ('obj'): Device object\n        rollback_id ('str'): rollback id for which label has to be created .\n        rollback_description ('str'): rollback description\n    Returns:\n        True if rollback description is successfully created\n        False if failed to creted rollback label\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_create_rollback_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L507"
    }
  },
  "execute_create_rollback_label": {
    "iosxe": {
      "doc": "\n    Creates rollback label for rollback id\n    Args:\n        device ('obj'): Device object\n        rollback_id ('str'): rollback id for which label has to be created .\n        rollback_label ('str'): rollback label\n    Returns:\n        True if rollback label is successfully created\n        False if failed to creted rollback label\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_create_rollback_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L481"
    }
  },
  "execute_deactivate_pie": {
    "iosxr": {
      "doc": " De-activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_deactivate_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L85"
    }
  },
  "execute_delete_boot_variable": {
    "ios": {
      "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to delete as boot variable\n            timeout ('int', optional): Max time to delete boot vars in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_delete_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L26"
    },
    "iosxe": {
      "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list', optional): List of strings of system images to delete as boot variable.default is an empty list\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_delete_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L26"
    },
    "nxos": {
      "mds": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/mds/platform/execute.py#L10"
      },
      "n3k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n3k/platform/execute.py#L11"
      },
      "n5k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n5k/platform/execute.py#L10"
      },
      "n7k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n7k/platform/execute.py#L10"
      },
      "n9k": {
        "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n    ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_delete_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/platform/execute.py#L10"
      }
    }
  },
  "execute_delete_files": {
    "nxos": {
      "doc": " Delete the file in bootflash\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to delete boot vars in seconds\n            path: Path where the file is present\n            filename: Name of the file required to delete\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_delete_files",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L172"
    }
  },
  "execute_diagnostic_start_module_test": {
    "iosxe": {
      "doc": " execute diagnostic start module 1 test all\n        Args:\n            device ('obj'): Device object\n            mod_num ('int'): Module number on which diagnostic has to be performed\n            include ('str'): test name(all) on which diagnostic has to be performed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_diagnostic_start_module_test",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L708"
    }
  },
  "execute_diagnostic_start_switch_module_test": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 module 1 test all\n        Args:\n            device ('obj'): Device object\n            switch_num ('int'): Switch number(In case of SVL/Stack) on which diagnostic has to be performed\n            mod_num ('int'): Module number on which diagnostic has to be performed\n            include ('str'): test name(all) on which diagnostic has to be performed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_diagnostic_start_switch_module_test",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L685"
    }
  },
  "execute_diagnostic_start_switch_test": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 test\n        Args:\n            device ('obj'): Device object\n            test_id ('str'): Test ID list (e.g. 1,3-6) or Test Name or minimal  or complete \n              Interface port number WORD    Port number list (e.g. 2,4-7)\n            switch_number ('int'): Switch number on which diagnostic has to be performed\n            test_name ('str'): Word , test name \n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_diagnostic_start_switch_test",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L1062"
    }
  },
  "execute_erase_ap": {
    "com": {
      "doc": null,
      "module_name": "cheetah.ap.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_erase_ap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/execute.py#L22"
    }
  },
  "execute_format": {
    "iosxe": {
      "doc": " Execute 'format <file-system>' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for format to complete in seconds\n            file_sys (\"str\"): File system should be formatted\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to format the file system on device\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_format",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L781"
    }
  },
  "execute_install_abort": {
    "iosxe": {
      "doc": "\n        Performs install abort on the device\n        Args:\n            device ('obj'): Device object\n            issu ('bool, optional'): True Forces the operation to use issu technique\n            timeout ('int, optional'): Timeout value\n            connect_timeout ('int, optional'): Time to wait before sending the promt\n                                               (when pattern \"Press RETURN to get \n                                                started\" matches)\n        Returns:\n            True if install abort is successful\n            False if install abort is not successful\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_abort",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L661"
    }
  },
  "execute_install_activate": {
    "iosxe": {
      "doc": "\n        Performs install activate with auto abort timer on the device\n        Args:\n            device ('obj'): Device object\n            abort_timer ('str, optional'): abort timer value\n            prompt ('bool, optional'): True sets the command to ask for prompt and\n                                       False sets the prompt level to none\n            issu ('bool, optional'): Force the operation to use issu technique\n            smu ('bool, optional'): Force the operation to use smu technique\n            file_name ('str, optional'): Path of the image file for smu operation\n            timeout ('int, optional'): Timeout value\n            connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                               (when pattern \"Press RETURN to get \n                                                started\" matches)\n        Returns:\n            True if install activate is successful\n            False if install activate is not successful\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L72"
    }
  },
  "execute_install_add": {
    "iosxe": {
      "doc": "\n    Performs install add on the device\n    Args:\n        device ('obj'): Device object\n        file_path ('str, optional'): Path of the image\n        prompt ('bool, optional'): True sets the command to ask for prompt and\n                                   False sets the prompt level to none\n        negative_test ('str, optional'): Flag for install add pass/Fail cases\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n    Returns:\n        True if install one shot is successful\n        False if install one shot is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_add",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L331"
    }
  },
  "execute_install_auto_abort_timer_stop": {
    "iosxe": {
      "doc": "\n    Performs install auto-abort-timer stop on device\n    Args:\n        device ('obj'): Device object\n        timeout ('int, optional'): Timeout value\n    Returns:\n        True if install auto-abort-timer stop is successful\n        False if install auto-abort-timer stop is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_auto_abort_timer_stop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L583"
    }
  },
  "execute_install_commit": {
    "iosxe": {
      "doc": "\n    Performs install commit on the device\n    Args:\n        device ('obj'): Device object\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern SUCCESS: install_commit\"\n                                             matches)\n    Returns:\n        True if install commit is successful\n        False if install commit is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_commit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L432"
    }
  },
  "execute_install_controller_group_firmware": {
    "apic": {
      "doc": " Installs the controller image onto the controller(s) and verifies install\n    completed.\n\n    Args:\n        device (obj): Device to execute on\n\n        controller_image (str): Image to install. This must exist in the\n            firmware repository.\n\n        error_patterns (list, optional): Any extra error patterns for executing\n            'firmware upgrade controller-group'. Defaults to None.\n\n        controller_upgrade_max_time (int, optional): Max time in seconds allowed\n            for verifying controller upgrade. Defaults to 1800.\n\n        controller_upgrade_check_interval (int, optional): How often in seconds\n            to check upgrade status. Defaults to 60.\n\n        controller_reconnect_max_time (int optional): Max time in seconds allowed\n            for reconnecting to controller if the connection is lost. Defaults\n            to 900.\n\n        controller_reconnect_check_interval (int, optional): How often in\n            seconds to attempt reconnect. Defaults to 60.\n\n        controller_upgrade_after_reconnect_max_time (int, optional): Max time\n            in seconds allowed for verifying controller upgrade after reconnect.\n            Defaults to 300.\n\n        controller_upgrade_after_reconnect_check_interval (int, optional): How\n            often in seconds to check upgrade status after reconnect. Defaults\n            to 60.\n\n    Returns:\n        True if install succeeds\n        False if install failed\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_controller_group_firmware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L44"
    }
  },
  "execute_install_deactivate": {
    "iosxe": {
      "doc": "\n        Performs install deactivate with auto abort timer on the device\n        Args:\n            device ('obj'): Device object\n            abort_timer ('str, optional'): abort timer value\n            prompt ('bool, optional'): True sets the command to ask for prompt and\n                                       False sets the prompt level to none\n            issu ('bool, optional'): Force the operation to use issu technique\n            file_name ('str, optional'): Path of the image file for smu operation\n            timeout ('int, optional'): Timeout value\n            connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                               (when pattern \"Press RETURN to get \n                                                started\" matches)\n        Returns:\n            True if install activate is successful\n            False if install activate is not successful\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_deactivate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L725"
    }
  },
  "execute_install_label": {
    "iosxe": {
      "doc": "\n    Performs install state on device\n    Args:\n            device ('obj'): device to use\n            id('int' optional) : id range <1-4294967295>\n            label_name  ('str' optional) : Add a label name to specified install point\n            description_name ('str', optional) : Add a description to specified install point  \n            word ('str') : any name can give <Max character 32>\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L1089"
    }
  },
  "execute_install_one_shot": {
    "iosxe": {
      "doc": "\n    Performs install one shot on the device\n    Args:\n        device ('obj'): Device object\n        file_path ('str, optional'): Path of the image\n        prompt ('bool, optional'): True sets the command to ask for prompt and\n                                   False sets the prompt level to none\n        issu ('bool, optional'): Force the operation to use issu technique\n        negative_test ('bool, optional'): Flag for install add pass/Fail cases\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n    Returns:\n        True if install one shot is successful\n        False if install one shot is not successful\n    Raises:\n        Exception\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_one_shot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L256"
    }
  },
  "execute_install_package": {
    "iosxe": {
      "doc": " Installs package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            install_timeout (\"int\"): Maximum time for install. Default 660\n            reconnect_max_time (\"int\"): Maximum time for reconnect. Default 120\n            reconnect_interval (\"int\"): Time between reconnect attempts. Default 30\n            install_commit_sleep_time (\"int\"): Sleep time before install commit command\n            _install (\"bool\"): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L154"
    }
  },
  "execute_install_pie": {
    "iosxr": {
      "doc": " Installs and activates given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            image_dir (`str`): Directory where pie file is located in\n            image (`str`): Pie file name\n            server(`str`): Hostname or IP address of server to use for install command\n                           Default None (Optional - uses testbed YAML reverse lookup for protocol server)\n            prompt_level(`str`): Prompt-level argument for install command\n                                 Default 'none' (Optional)\n            synchronous (`bool`): Synchronous option for install command\n                                  Default True (Optional)\n            install_timeout (`int`): Maximum time required for install command to complete\n                                     Default 600 seconds (Optional)\n\n            _install (`bool`): True to install, False to uninstall.\n                Not meant to be changed manually.\n\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_pie",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L15"
    }
  },
  "execute_install_remove": {
    "iosxe": {
      "doc": "\n    Performs install remove on the device\n    Args:\n        device ('obj'): Device object\n        file_path ('str, optional'): Path of the file on device to remove\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the promt\n                                            (when pattern \"SUCCESS: install_remove\"\n                                             matches)\n    Returns:\n        True if install remove is successful\n        False if install remove is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_remove",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L190"
    }
  },
  "execute_install_remove_version": {
    "iosxe": {
      "doc": "\n    Performs install remove for the version provided on the device\n    Args:\n        device ('obj'): Device object\n        version ('str, optional'): Base Version to remove\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the promt\n                                            (when pattern \"SUCCESS: install_remove\"\n                                             matches)\n    Returns:\n        True if install remove is successful\n        False if install remove is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_remove_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L11"
    }
  },
  "execute_install_rollback": {
    "iosxe": {
      "doc": "\n    Performs rollback on the device\n    Args:\n         device ('obj'): Device object\n         rollback_point ('str, optional'): Last committed/base installation point\n         rollback_id ('str, optional'): specific install point id\n         rollback_label ('str, optional'): specific install point label\n         issu ('bool, optional'): Force the operation to use issu technique\n         timeout ('int, optional'): Timeout value\n         prompt ('bool, optional'): True sets the command to ask for prompt and\n                        False sets the prompt level to none\n         connect_timeout ('int, optional'): Time to wait before sending the promt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n    Returns:\n            True if rollback is successfull\n            False if rollback is not successfull or rollback point not provided\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_rollback",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/execute.py#L819"
    }
  },
  "execute_install_switch_group_firmware": {
    "apic": {
      "doc": " Installs the switch image on the switch(s) and then verifies the install\n    completed.\n\n    Args:\n        device (obj): Device to execute on\n\n        switch_image (str): Image to install. This must exist in the\n            firmware repository.\n\n        switch_node_ids (str): String of node IDs to install the image on. The\n            node IDs must be separated by a comma.\n\n        switch_group_name (str, optional): Name for the switch-group that will\n            be configured. Defaults to switches.\n\n        clear_switch_group (bool, optional): Whether or not to clear the\n            switch-group configuration before applying new configuration.\n            Defaults to True.\n\n        error_patterns (list, optional): Any extra error patterns for executing\n            'firmware upgrade switch-group {name}'. Defaults to None.\n\n        switch_upgrade_max_time (int, optional): Max time in seconds allowed for\n            verifying upgrade status. Defaults to 2700.\n\n        switch_upgrade_check_interval (int, optional): How often in seconds to\n            check upgrade status. Defaults to 60.\n\n        stabilize_switch_group_config_sleep (int, optional): How long in seconds\n            to sleep after configuring switch-group. Defaults to 120.\n\n        controller_reconnect_max_time (int optional): Max time in seconds allowed\n            for reconnecting to controller if the connection is lost. Defaults\n            to 900.\n\n        controller_reconnect_check_interval (int, optional): How often in\n            seconds to attempt reconnect. Defaults to 60.\n\n    Returns:\n        True if install succeeds\n        False if install failed\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_switch_group_firmware",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/execute.py#L151"
    }
  },
  "execute_install_three_step_issu_package": {
    "iosxe": {
      "doc": " Installs package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            install_timeout (\"int\"): Maximum time for install. Default 660\n            reconnect_max_time (\"int\"): Maximum time for reconnect. Default 120\n            reconnect_interval (\"int\"): Time between reconnect attempts. Default 30\n            install_commit_sleep_time (\"int\"): Sleep time before install commit command\n            _install (\"bool\"): True to install, False to uninstall.\n                Not meant to be changed manually.\n        Raises:\n            Exception\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_install_three_step_issu_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L962"
    }
  },
  "execute_issu_install_package": {
    "iosxe": {
      "doc": " Installs issu package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            install_timeout (\"int\"): Maximum time for install. Default 660\n            reconnect_max_time (\"int\"): Maximum time for reconnect. Default 600\n            reconnect_interval (\"int\"): Time between reconnect attempts. Default 60\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_issu_install_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L511"
    }
  },
  "execute_license_smart_sync_all": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_license_smart_sync_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L62"
    }
  },
  "execute_power_cycle_device": {
    "com": {
      "doc": " Powercycle a device\n\n    Args:\n        device ('obj'): Device object\n\n        delay (int, optional): Time in seconds to sleep between turning the\n            device off and then back on. Defaults to 30.\n\n    Raises:\n        Exception if powercycling fails.\n\n    Returns:\n        None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_power_cycle_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L131"
    }
  },
  "execute_power_off_device": {
    "com": {
      "doc": "Power off a device\n\n    Args:\n        device ('obj'): Device object\n\n    Raises:\n        Exception if power off fails\n\n    Returns:\n        None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_power_off_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L79"
    }
  },
  "execute_power_on_device": {
    "com": {
      "doc": "Power on a device\n\n    Args:\n        device ('obj'): Device object\n\n    Raises:\n        Exception if power on fails\n\n    Returns:\n        None\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_power_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L105"
    }
  },
  "execute_prime_ap": {
    "com": {
      "doc": null,
      "module_name": "cheetah.ap.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_prime_ap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/execute.py#L12"
    }
  },
  "execute_redundancy_reload": {
    "iosxe": {
      "doc": "\n        Args:\n            device ('obj'): device to use\n            switch ('str'): switch arg on which reload as to be done\n        Returns:\n            Return the reload command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "redundancy.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_redundancy_reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/execute.py#L11"
    }
  },
  "execute_register_nodes": {
    "apic": {
      "doc": " Registers the provided nodes to the fabric\n\n    Args:\n        device (obj): The device to execute on\n\n        nodes (list): Names of the nodes to register. These nodes must\n            have 'serialnum' and 'node_id' defined under the\n            testbed.device.custom key.\n\n        rest_alias (str, optional): Alias for the REST connection. Defaults\n            to rest.\n\n    Returns:\n        True if registering is successful\n        False if registering fails\n\n    Raises:\n        N/A\n    ",
      "module_name": "fabric.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_register_nodes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/fabric/execute.py#L10"
    }
  },
  "execute_reload": {
    "com": {
      "doc": " Reload device\n        Args:\n            device ('obj'): Device object\n            prompt_recovery ('bool'): Enable/Disable prompt recovery feature\n            reload_creds ('str'): Credential name defined in the testbed yaml file to be used during reload\n            sleep_after_reload ('int'): Time to sleep after reload in seconds, default: 120\n            timeout ('int'): reload timeout value, defaults 800 seconds.\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L307"
    }
  },
  "execute_remove_inactive_pies": {
    "iosxr": {
      "doc": " Removes given IOSXR pie on device\n        Args:\n            device (`obj`): Device object\n            remove_timeout (`str`): Maximum time to execute command\n                                    Default 300 seconds (Optional)\n        Raises:\n            Exception\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_remove_inactive_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L109"
    }
  },
  "execute_self_signed_certificate_command": {
    "iosxe": {
      "c9800": {
        "doc": "Execute command that installs self signed certificate\n        Args:\n            device (obj): Device object\n            password (str): Password to be configured for the trustpoint.\n            key_size (int, optional): Key size to be configured. Default is 2048\n                Options: 1024/2048/3072\n\n            signature_algorithm (str, optional): Algorithm to be applied. Default is sha256\n                    Options: sha1/sha256/sha384\n\n            encryption_type (int, optional): Encryption type to be configured. Default is 0\n                    Options: 0/7\n            timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n        ",
        "module_name": "platform.execute",
        "package": "genie.libs.sdk.apis",
        "uid": "execute_self_signed_certificate_command",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/execute.py#L13"
      }
    }
  },
  "execute_set_boot_variable": {
    "ios": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to set as boot variable\n            timeout ('int', optional): Max time to set boot vars in seconds\n                             Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L45"
    },
    "iosxe": {
      "doc": " Set the boot variables\n        Args:\n            device ('obj'): Device object\n            boot_images ('list'): List of strings of system images to set as boot variable\n            timeout ('int'): Max time to set boot vars in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L52"
    }
  },
  "execute_set_config_register": {
    "ios": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int', optional): Max time to set config-register in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L64"
    },
    "iosxe": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L70"
    },
    "iosxr": {
      "doc": "Set config register to load image in boot variable\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value to set the config register to\n            timeout ('int'): Max time to set config-register in seconds\n                             Default 60 seconds (Optional)\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/execute.py#L133"
    }
  },
  "execute_set_memory_debug_incremental_starting_time": {
    "iosxe": {
      "doc": "\n        Args:\n            device ('obj'): device to use\n            starting_time ('str'): start time for memory debug\n            \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "csdl.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_set_memory_debug_incremental_starting_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/execute.py#L14"
    }
  },
  "execute_show_license_boot_level_config": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_show_license_boot_level_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L110"
    }
  },
  "execute_show_license_dev_cert": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_show_license_dev_cert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L126"
    }
  },
  "execute_show_license_rum_id_telemetry": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_show_license_rum_id_telemetry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L142"
    }
  },
  "execute_stack_power": {
    "iosxe": {
      "doc": " Enable stack-power stack\n        Example : stack-power switch 1 port 1 enable\n        \n        Args:\n            device ('obj'): device to use\n\t\t\tswitch_number('int') : Switch number range <1-16>\n            port_number\t('int') : port number range <1-2>\t\n            mode ('str') : enable/disable option\t\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_stack_power",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L1040"
    }
  },
  "execute_switch_card_OIR": {
    "iosxe": {
      "doc": " Execute 'hw-module switch <switch_number> subslot <slot> oir power-cycle' on the device\n        Args:\n            device ('obj'): Device object\n            switch_number('str'): Switch number on which OIR has to be performed\n            slot ('str'): Slot on which OIR has to be performed\n            timeout ('int',optional): Max time for card oir execution to complete in seconds.Defaults to 60\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_switch_card_OIR",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L617"
    }
  },
  "execute_switch_priority": {
    "iosxe": {
      "doc": " \n    API for the CLI :- \n        switch {switch_number} priority {priority_number}\n        e.g.\n        Args:\n            device ('obj'): device to use  \n            switch_number ('int'): Switch id of node which should be renumbered\n\t\t\tswitch_priority ('int'): Switch Priority\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "switch.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_switch_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/switch/execute.py#L39"
    }
  },
  "execute_switch_renumber": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n            switch_number ('int'): Switch id of node which should be renumbered\n            switch_renumber ('int'): New switch id to which the node should be renumbered\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "switch.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_switch_renumber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/switch/execute.py#L12"
    }
  },
  "execute_test_crash": {
    "iosxe": {
      "doc": "   \n        Args:\n            device ('obj'): device to use \n            num ('str'): number of the crash type to be executed.\n            timeout('integer',optional): Delay for the device to boot.\n            connect_timeout ('int, optional'): Time to wait before sending the prompt\n                                            (when pattern \"Press RETURN to get \n                                            started\" matches)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_crash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/execute.py#L52"
    }
  },
  "execute_test_idprom_fake_insert": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n            interface ('str'): Interface for which we are doing SFP Fake-insert\n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_idprom_fake_insert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/execute.py#L16"
    }
  },
  "execute_test_idprom_fake_remove": {
    "iosxe": {
      "doc": "   \n        Args:\n            device ('obj'): device to use  \n            interface ('str'): Interface for which we are doing SFP Fake-remove\n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_idprom_fake_remove",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/execute.py#L34"
    }
  },
  "execute_test_license_smart_dev_cert_enable": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_license_smart_dev_cert_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L94"
    }
  },
  "execute_test_license_smart_telemetry_show": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_license_smart_telemetry_show",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L46"
    }
  },
  "execute_test_ngdns_lookup": {
    "iosxe": {
      "doc": " Execute dns query using test cli\n        Args:\n            device ('obj'): device to use\n            domain_name ('str'): URL whihc we want to validate\n        Returns:\n            test execution command \n        Raises:\n            SubCommandFailure: test ngdns cli\n    ",
      "module_name": "umbrella_odns.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_ngdns_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/execute.py#L3"
    }
  },
  "execute_test_platform_sw_product_analytics_report": {
    "iosxe": {
      "doc": "   \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_platform_sw_product_analytics_report",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L13"
    }
  },
  "execute_test_platform_sw_product_analytics_send": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_platform_sw_product_analytics_send",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L30"
    }
  },
  "execute_test_telemetry_show_logging": {
    "iosxe": {
      "doc": " \n        Args:\n            device ('obj'): device to use  \n        Returns:\n            Return the test command execution output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "telemetry.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_test_telemetry_show_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/execute.py#L78"
    }
  },
  "execute_udld_tx_drop": {
    "iosxe": {
      "doc": " Configures UDLD transmission drop on Interface \n    Args:\n        device (`obj`): Device object\n        interface (`str`): interface\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "udld.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_udld_tx_drop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/execute.py#L12"
    }
  },
  "execute_uninstall_package": {
    "iosxe": {
      "doc": " Uninstalls package\n        Args:\n            device (\"obj\"): Device object\n            image_dir (\"str\"): Directory image is located in\n            image (\"str\"): Image name\n            save_system_config (\"bool\"): If config changed do we save it?\n            timeout (\"int\"): maximum time for install\n            install_commit_sleep_time (\"int\"): Sleep time before install commit command\n\n        Raises:\n            Exception\n\n        Returns:\n            True if install succeeded else False\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_uninstall_package",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L255"
    }
  },
  "execute_write_erase": {
    "ios": {
      "doc": " Execute 'write erase' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int', optional): Max time to for write erase to complete in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L83"
    },
    "iosxe": {
      "doc": " Execute 'write erase' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for write erase to complete in seconds\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L88"
    },
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L47"
    }
  },
  "execute_write_erase_boot": {
    "nxos": {
      "doc": " Execute write erase on the device\n        Args:\n            device ('obj'): Device object\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_erase_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/execute.py#L76"
    }
  },
  "execute_write_memory": {
    "ios": {
      "doc": " Execute 'write memory' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int', optional): Max time for write memory to complete in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/execute.py#L120"
    },
    "iosxe": {
      "doc": " Execute 'write memory' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int', optional): Max time for write memory to complete in seconds\n                            Default is 300\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "execute_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L125"
    }
  },
  "export_packet_capture": {
    "ios": {
      "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n            protocol (`str`): Protocol name\n            path (`str`): Path to export\n            username (`str`): user name\n            password (`str`): password\n\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "export_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L150"
    },
    "iosxe": {
      "cat9500": {
        "doc": "Export the packet capture to device\n        Args:\n            device (`obj`): Device object\n            server_config dict has following attributes\n                cap_name (str): capture name\n                filetype (`str`): Filetype(flash)\n                file_name (`str`): pcap file name\n            timeout : timeout value\n        Returns:\n            True on successful export and copy\n            False on not successful export or copy\n        Raises:\n            pyATS Results\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "export_packet_capture",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/utils.py#L13"
      },
      "doc": "Export the packet capture to a pcap file\n\n        Args:\n            device (`obj`): Device object\n            testbed (`obj`): Testbed object\n            filename (`str`): Filename to save\n            capture_name (`str`): Packet capture name\n            protocol (`str`): Protocol name\n            path (`str`): Path to export\n            username (`str`): user name\n            password (`str`): password\n\n\n        Returns:\n            pcap_file_name or None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "export_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L156"
    }
  },
  "extract_tar_gz": {
    "linux": {
      "doc": " extract tar.gz file\n        Args:\n            files (`list`): list of tar.gz files\n            option (`str`): option to tar command for extraction\n                            Default to `-zxvf`\n        Raises:\n            N/A\n        Returns:\n            extracted_files (`list`): extracted file list\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "extract_tar_gz",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L14"
    }
  },
  "force_unconfigure_static_nat_route_map_rule": {
    "iosxe": {
      "doc": " Force UnConfigure static NAT route-map rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): Inside local ip\n            inside_global_ip ('str'): Inside global ip\n            route_map_name ('str') : Name of route-map\n            timeout ('int', optional): Max time for force unconfigure static NAT route-map rule.Defaults to 60\n        Returns:\n            None\n        Raises:\n            Exception: static NAT route-map rule not force unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "force_unconfigure_static_nat_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1013"
    }
  },
  "fp_switchover": {
    "iosxe": {
      "doc": "Perform FP switchover on device.\n        Args:\n            device(`obj`): Device object\n            timeout ('int'): timeout in seconds for FP switchover\n                            if not provided default is 420 seconds,\n        Returns:\n            True if FP switchover is success else False\n        Raises:\n            None\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "fp_switchover",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L358"
    }
  },
  "free_up_disk_space": {
    "apic": {
      "doc": "Delete files to create space on device except protected files\n    Args:\n        device ('Obj') : Device object\n        destination ('str') : Destination directory, i.e bootflash:/\n        required_size ('int') : Check if enough space to fit given size in bytes.\n                                If this number is negative it will be assumed\n                                the required size is not available.\n        skip_deletion ('bool') : Only performs checks, no deletion\n        protected_files ('list') : List of file patterns that wont be deleted.\n        min_free_space_percent ('int'): Minimum acceptable free disk space %.\n                                        Optional,\n        dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n         True if there is enough space after the operation, False otherwise\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "free_up_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/utils.py#L91"
    },
    "com": {
      "doc": "Delete files to create space on device except protected files\n    Args:\n        device ('Obj') : Device object\n        destination ('str') : Destination directory, i.e bootflash:/\n        required_size ('int') : Check if enough space to fit given size in bytes.\n                                If this number is negative it will be assumed\n                                the required size is not available.\n        skip_deletion ('bool') : Only performs checks, no deletion\n        protected_files ('list') : List of file patterns that wont be deleted\n        compact ('bool'): Compact option for n9k, used for size estimation,\n                          default False\n        min_free_space_percent ('int'): Minimum acceptable free disk space %.\n                                        Optional,\n        dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        allow_deletion_failure (bool, optional): Allow the deletion of a file to silently fail. Defaults to False\n    Returns:\n         True if there is enough space after the operation, False otherwise\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "free_up_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/execute.py#L179"
    }
  },
  "generate_crypto_key": {
    "iosxe": {
      "doc": " Generate Crypto keys\n        Args:\n            device ('obj')    : device to use\n            key_type ('str', optional)  : iosxe routers support rsa and ec keys\n            key_label ('str', optional) : Name of the keypair\n            modulus ('int', optional) : Size of the key that will be generated. <512-4096> \n            keysize ('int', optional) : Size of the EC keys. <256,384,521>\n            exportable ('boolean', optional) : Allows the key to be exported. Default value is False\n            timeout('int', optional): timeout for exec command execution, default is 30\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "key.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "generate_crypto_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/key/configure.py#L17"
    }
  },
  "get_RIPng_routes": {
    "iosxe": {
      "doc": "\n        Gets installed RIPng routes from \"show ipv6 route\" on a device\n\n        Args:\n            device(): Device used to run commands\n\n        Returns:\n            Routes: list of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_RIPng_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L662"
    }
  },
  "get_aaa_member": {
    "iosxe": {
      "doc": "Get aaa member by parsing variuos aaa related commands\n        Args:\n            device (`obj`): Device object\n            leaf   (`str`): Need xpath value for this leaf\n                            ref:accounting-method, athorization-method,\n                            athenticating-method, event-type, role, username,\n                            password, secret, server-name, server-type, opens,\n                            closes, aborts, reject, request, timeouts, source-address\n            keyword (`str`): This argument highlihgts particular section from\n                            'show run aaa' command.\n                            eg:\"show run aaa | sec \" + keyword => keyword = accounting\n            intf   (`str`): interface name\n        Returns:\n            Valid xpath value for the leaf or None\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_aaa_member",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L14"
    }
  },
  "get_aci_registered_nodes_in_state": {
    "apic": {
      "doc": " Returns a list of node IDs that are in the provided state.\n\n    Args:\n        device (obj): Device to execute on\n        state (str): State of nodes to match\n\n    Returns:\n        (list): of nodes that are in the provided state\n\n    Raises:\n        N/A\n    ",
      "module_name": "acidiag.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_aci_registered_nodes_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/acidiag/get.py#L11"
    }
  },
  "get_acl_hit_counts": {
    "iosxe": {
      "doc": " Get ACL(access-list) hit counts\n\n        Args:\n            device(`obj`): Device object\n            name(`str`): Access-list name\n            source_network(`str`): source network\n            destination_network(`str`): destination network\n            output(`str`): output of show access-lists\n            parsed_output(`str`): parsed_output from show access-lists\n        Returns:\n            List:\n            [[str, int]]\n\n            Example:\n            [['acl1', 100]]\n        Raises:\n            None\n    ",
      "module_name": "acl.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_acl_hit_counts",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/get.py#L15"
    }
  },
  "get_active_outgoing_interface": {
    "junos": {
      "doc": " Get active outgoing interface value\n\n        Args:\n            device (`obj`): Device object\n            destination_address (`str`): Destination address value\n            extensive ('bool'): Try command with extensive \n        Returns:\n            Interface name\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_active_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L15"
    }
  },
  "get_actv_switch": {
    "iosxe": {
      "doc": " get the current active switch from show redundancy states\n        Args:\n            device (`obj`): Device object\n        Returns:\n            number (`int`): switch number\n    ",
      "module_name": "telemetry.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_actv_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/get.py#L17"
    }
  },
  "get_address_without_netmask": {
    "junos": {
      "doc": " Get interface ip address without mask\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            return_all ('bool'): return List of values. Defaults to False\n                                 Default to False\n            link_local (`bool`): flag to get link-local address for IPv6\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_address_without_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L130"
    }
  },
  "get_ap_country": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured ap country\n    Args:\n        device (obj): Device object\n        ap_name (str): accesspoint name\n    Returns:\n        ap country (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_ap_country",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L65"
      }
    }
  },
  "get_ap_ip": {
    "iosxe": {
      "cat9k": {
        "doc": "Get Access Point IP\n    Args:\n        device (obj): Device object\n        ap_name(str): AP Name       \n    Returns:\n        ap ip (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_ap_ip",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L111"
      }
    }
  },
  "get_ap_mode": {
    "com": {
      "doc": "Get ap mode \n    Args:\n        device (obj): Device object\n    Returns:\n        ap mode in string \n        ",
      "module_name": "cheetah.ap.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ap_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/get.py#L11"
    },
    "iosxe": {
      "c9800": {
        "doc": "Get configured ap mode\n    Args:\n        device (obj): Device object\n        ap_name (str): accesspoint name\n    Returns:\n        ap mode (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_ap_mode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L88"
      }
    }
  },
  "get_ap_model": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured ap model \n    Args:\n        device (obj): Device object\n        ap_name (str): accesspoint name\n    Returns:\n        ap model (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_ap_model",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L129"
      }
    }
  },
  "get_ap_state": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured ap state\n    Args:\n        device (obj): Device object\n        ap_name (str): accesspoint name\n    Returns:\n        ap state (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_ap_state",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L43"
      }
    }
  },
  "get_archive_config_differences": {
    "iosxe": {
      "doc": " Gets the archive differences between {file1} and {file2}\n\n        Args:\n            device ('obj'): Device object\n            file1('str'): file1 to get diff from\n            file2('str'): file2 to get diff from\n\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n    ",
      "module_name": "archive.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_archive_config_differences",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L35"
    }
  },
  "get_archive_config_incremental_diffs": {
    "iosxe": {
      "doc": " Gets the archive incremental diffs from file\n\n        Args:\n            device ('obj'): Device object\n            file('str'): file to get diff from\n        Returns:\n            Parser output\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "archive.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_archive_config_incremental_diffs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/archive/get.py#L11"
    }
  },
  "get_arp_interface_mac_from_ip": {
    "iosxe": {
      "doc": "\n    Get the outgoing interface along with mac address of particular\n    host in 'show arp vrf <vrf> <ip>' / 'show arp <ip>'  arp table\n\n    Args:\n        device(`obj`): Device str\n        ip_address ('str'): ip\n        vrf ('str', optional): vrf interface, default None\n    Returns:\n        interface and mac (tuple)\n        None\n    ",
      "module_name": "arp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_arp_interface_mac_from_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#L36"
    }
  },
  "get_arp_table_count": {
    "iosxe": {
      "doc": "\n    Get arp table count\n\n    Args:\n        device(`obj`): Device str\n    Returns:\n        arp table count\n    ",
      "module_name": "arp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_arp_table_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/get.py#L14"
    }
  },
  "get_assignment_mode": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured assignment mode \n    Args:\n        device (obj): Device object\n    Returns:\n        assignment_mode (str) if success else empty string\n    Raises:\n        N/A\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_assignment_mode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L196"
      }
    }
  },
  "get_auth_session": {
    "iosxe": {
      "doc": "\n    Get the authentication session details for the device interface\n    Args:\n        device ('obj'): Device object\n        interface ('str'): interface to check the authentication session\n        mac_address ('str'): mac-address of the session\n        search_value (str): key to be matched for method status\n        method ('str', optional): dot1x/mab session\n        timeout (int, optional): Total timeout in seconds. Defaults to 1\n        interval (int, optional): interval in seconds to check for authentication.\n                                  Defaults to 1\n    Returns:\n        None if authentication session is empty\n        Authentication session dictionary if session exists\n    Raise:\n        AttributeError\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_auth_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L259"
    }
  },
  "get_authentication_config_mode": {
    "iosxe": {
      "doc": "  Get current authentication config mode on device\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            config mode\n\n        Raises:\n            SubCommandFailure: Failed to configure authentication convert-to new-style\n    ",
      "module_name": "authentication.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_authentication_config_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/authentication/get.py#L16"
    }
  },
  "get_available_space": {
    "apic": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/get.py#L7"
    },
    "ios": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L492"
    },
    "iosxe": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L212"
    },
    "iosxr": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L118"
    },
    "nxos": {
      "doc": "Gets available space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_available_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L74"
    }
  },
  "get_bfd_session_state_count": {
    "junos": {
      "doc": " Get bfd session state count\n\n    Args:\n        device (obj): Device object\n        expected_session_state (str): Expected session state. Defaults to 'Up'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "bfd.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bfd_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/get.py#L14"
    }
  },
  "get_bgp_advertised_route_count": {
    "iosxe": {
      "doc": " Returns number of advertised routes under neighbor\n\n        Args:\n            device('obj'): device to use\n            neighbor ('str'): neighbor to search under\n            route ('str'): route to search for\n        Returns:\n            number of advertised routes ('int')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_advertised_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1643"
    }
  },
  "get_bgp_as": {
    "iosxr": {
      "doc": " Get bgp id from show running-config\n\n        Args:\n            device ('obj'): device object\n            instance ('str'): instance name\n        Returns:\n            str: bgp_as\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/get.py#L16"
    }
  },
  "get_bgp_best_routes": {
    "iosxe": {
      "doc": " Get best routes to neighbor\n\n        Args:\n            device('obj): device to use\n            address_family('str'): address_family to search under\n            rd('str'): vrf route distinguisher\n            neighbor_address('str'): ip_address of neighbor to search under\n            vrf('str'): vrf to search under\n        Returns:\n            list of routes\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L662"
    }
  },
  "get_bgp_current_as_path": {
    "iosxe": {
      "doc": " Learn current AS path from show command\n        Args:\n            device ('obj')         : Device object\n            vrf ('str')       : VRF name\n            address_family ('str') : Address family\n        Returns:\n            String: neighbor\n            String: AS path\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_current_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L766"
    }
  },
  "get_bgp_external_internal_neighbor_count": {
    "iosxe": {
      "doc": " \n        Get counter of internals bgp neighbors (iBGP) \n        and externals bgp neighbors (eBGP)\n        Args:\n            device ('obj'): Device object\n        Returns:\n            ibgp_count ('int'): Counter of internal bgps (iBGP)\n            ebgp_count ('int'): Number of external bgps (eBGP)\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_external_internal_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1298"
    }
  },
  "get_bgp_id": {
    "iosxe": {
      "doc": " Get bgp id\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n        Returns:\n            integer: bgp_id\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1001"
    }
  },
  "get_bgp_last_reset_list": {
    "iosxe": {
      "doc": " Get last reset list from - show ip bgp all neighbors\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            key_list(`list`): result list\n            table(`obj`): table to display\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_last_reset_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L126"
    }
  },
  "get_bgp_mpls_labels": {
    "iosxe": {
      "doc": " Returns BGP mpls labels\n\n        args:\n            device ('obj'): Device to use\n            route ('str'): Route to check mpls label\n\n        raises:\n            N/A\n\n        returns:\n            str\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_mpls_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1708"
    }
  },
  "get_bgp_mvpn_route_count": {
    "iosxe": {
      "doc": " Returns count of metioned routes \n\n        args:\n            device ('obj'): Device to use\n            route ('list'): Route to check \n            vrf ('str'): vrf name\n        raises:\n            N/A\n\n        returns:\n            dict\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_mvpn_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1754"
    }
  },
  "get_bgp_neighbor_capabilities": {
    "iosxe": {
      "doc": " Get neighbor capabilities \n        Args:            \n            vrf ('str')               : VRF name\n            device ('obg')            : Device object\n            output ('dict')           : Parsed output\n            address_family ('str')    : Address family to be verified\n            neighbor_address ('str')          : Neighbor address\n            vrf ('str')               : VRF name\n        Returns:\n            Capabilities\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_capabilities",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L806"
    }
  },
  "get_bgp_neighbor_prefixes_count": {
    "junos": {
      "doc": "\n    Get bgp neighbor accepted, received or advertised prefixes count\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_prefixes_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L634"
    }
  },
  "get_bgp_neighbor_session_state": {
    "iosxe": {
      "doc": " Get session state from device\n\n        Args:\n            device ('obj')           : Device object\n            vrf ('str')              : VRF name\n            address_family           : Address family\n            neighbor_address ('str')         : Neighbor interface address\n            output ('dict')          : Parsed output\n            address_families ('list')        : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n        Returns:\n            Session state\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbor_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L848"
    }
  },
  "get_bgp_neighbors": {
    "iosxe": {
      "doc": " Gets bgp neighbors that is under {address_family}\n        and optionally {vrf} \n            - show ip bgp {address_family} all summary\n            - show ip bgp {address_family} vrf {vrf} summary\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            vrf('str'): vrf to search under. If empty it will search \n                        under all\n\n        Returns:\n            list - Neighbor ip_address'\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1100"
    }
  },
  "get_bgp_neighbors_advertised": {
    "iosxe": {
      "doc": "Retrieve advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): address of neighbor\n    \n        Returns:\n            Dictionary\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L625"
    }
  },
  "get_bgp_neighbors_advertised_routes": {
    "iosxe": {
      "doc": " Get advertised routes to neighbor\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor IP address\n\n        Returns:\n            Dictionary of advertised neighbors\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L335"
    }
  },
  "get_bgp_neighbors_from_running_config": {
    "iosxe": {
      "doc": " Returns a list of configured bgp neighbors from running-config\n\n        args:\n            device ('obj'): Device to use\n            address_family ('str'): Address family bgp neighbors are under\n            vrf ('str'): Vrf bgp neighbors are under\n\n        raises:\n            N/A\n\n        returns:\n            List\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1685"
    }
  },
  "get_bgp_neighbors_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are in {state} - show \n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you want \n                             search for/against\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1144"
    }
  },
  "get_bgp_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get bgp neighbor ip_addresses that are NOT in {state} - show\n        ip bgp {family_address} all summary\n\n        Args:\n            device ('obj'): device to run on\n            address_family ('str'): address_family to search under\n            state ('regex'): full/sub-string of the state you dont\n                             want to find neighbors with\n\n        Returns:\n            list of bgp neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1235"
    }
  },
  "get_bgp_networks_from_neighbor": {
    "iosxe": {
      "doc": " Gets bgp networks from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            networks ('list')\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_networks_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1540"
    }
  },
  "get_bgp_peer_prefixes": {
    "junos": {
      "doc": "Return a dictionary of BGP prefix value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n\n    Returns:\n        dict: Dictionary of prefix values\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_peer_prefixes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L18"
    }
  },
  "get_bgp_route_ext_community": {
    "iosxe": {
      "doc": " Get route extended community\n\n        Args:\n            device('obj'): device to run on\n            address_family('str'): address_family to search under\n            route('route'): route to search under\n            vrf('str', Optional): if getting route via vrf. Default is None\n            rd('str', Optional): if getting route via rd. Default is None\n        Returns:\n            extended community\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_route_ext_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1041"
    }
  },
  "get_bgp_route_from_neighbors": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor_address ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n        Returns:\n            Dictionary of neighbor routes\n        Raises:\n            KeyError: A key is missing in dictionary\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_route_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L271"
    }
  },
  "get_bgp_routes": {
    "iosxe": {
      "doc": " Get bgp routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family name\n            rd ('str'): rd export value\n            route ('str'): route value\n        Returns:\n            Dictionary of advertised prefixes\n        Raises:\n            None\n\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L535"
    }
  },
  "get_bgp_routes_list": {
    "iosxe": {
      "doc": " Returns a list of routes from BGP table\n\n        Args:\n            device ('obj'): Device object\n            vrf ('vrf'): VRF name\n            address_family ('str'): Address family\n\n        Raises:\n            None\n\n        Returns:\n            list object with unique routes from BGP table\n            False\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routes_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1341"
    }
  },
  "get_bgp_routing_table": {
    "iosxe": {
      "doc": " Get parsed dict of the BGP routing table executing one of the following commands\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp'\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            Parsed dictionary of BGP routing table\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_routing_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1395"
    }
  },
  "get_bgp_rt2_community_label": {
    "iosxe": {
      "doc": " Get external community & label for specific mac and ip route from \n        <show ip bgp l2vpn evpn route-type 2 <eti> <mac> <ip>> command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            eti (int): Ethernet Tag Identifier\n            mac (str): MAC Address\n            ip (str): Ip address\n            vrf_id (str): vrf\n        Returns:\n            Dict: contains values for keys ext_community and label\n            Ex:  {\n              'ext_community': ['RT:300:2000101', 'RT:300:3000101', 'ENCAP:8'], \n              'labels': ['2000101']\n            }\n            or None\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_rt2_community_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1785"
    }
  },
  "get_bgp_rt5_community_paths_label": {
    "iosxe": {
      "doc": " Get external community, paths and labels of specific ip from \n        show ip bgp {address_family} route-type 5 {eti} {ip} {ip_len}\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            eti (int): Ethernet Tag Identifier\n            ip (str): Ip address\n            ip_len (int): ip length <=128\n            vrf_id (str): vrf\n        Returns:\n            dict: Contains values for keys ext_community, label, paths \n            Ex: {\n              'vni_labels': ['3000101'], \n              'ext_community': ['RT:300:3000101'], \n              'paths': '1 available, best #1, table evi_101, \n                   re-originated from [2][30.0.1.11:101][0][48]\n                   [00505684DC69][32][20.101.1.3]/24'\n            }\n            or None\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_rt5_community_paths_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1845"
    }
  },
  "get_bgp_running_config": {
    "iosxe": {
      "doc": " Get parsed running BGP config\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): Address familly\n            vrf ('str'): VRF name\n        Returns:\n            Dictionary\n                Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1472"
    }
  },
  "get_bgp_session_count": {
    "iosxe": {
      "doc": " Get bgp sesion count on state (established, idle, active)\n\n    Args:\n        device(`str`): Device str\n        in_state ('str'): Get bgp count only of neighbors in state\n    Returns:\n        Integer: bgp session count\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1254"
    }
  },
  "get_bgp_state_pfx_rcd": {
    "iosxe": {
      "doc": " Get State/PfxRcd value from the device\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            State/PfxRcd value\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_state_pfx_rcd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L228"
    }
  },
  "get_bgp_status_codes_from_neighbor": {
    "iosxe": {
      "doc": " Gets status_codes from route under neighbor\n\n        Args: \n            device ('obj'): device to use\n            neighbor_address ('str'): neighbor to search under\n            route ('str'): route to search under\n            vrf ('str'): vrf to search under\n        Returns:\n            status_codes ('str')\n            None\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_status_codes_from_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1582"
    }
  },
  "get_bgp_summary": {
    "iosxe": {
      "doc": " Get neighbors from show bgp summary command\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            all_summary ('bool'): check all summary    \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L566"
    }
  },
  "get_bgp_summary_neighbor_state_count": {
    "junos": {
      "doc": " Get bgp summary peer-state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Establ'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bgp_summary_neighbor_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L147"
    }
  },
  "get_bool": {
    "com": {
      "doc": " Get boolean result against given value\n\n        Use-case:\n        %CALLABLE Markup doesn't support built-in function bool().\n        This API can be used when you want to get boolean result via %CALLABLE\n        or can directly calling this API with value in Blitz YAML or etc\n\n    Args:\n        device (Device): device object\n        value (`any`): any such as string, integer, list, dict etc.\n\n    Returns:\n        Bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4044"
    }
  },
  "get_boot_variables": {
    "aireos": {
      "doc": "Get current or info of boot variables on the device\n\n        Args:\n            device ('obj'): Device object\n            output ('str'): Out from 'show boot' command\n\n        Returns:\n            return a tuple where first tuple is active image and second is backup\n            ({'version': <version>, 'status': <status>}, {'version': <version>, 'status': <status>})\n    ",
      "module_name": "get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/aireos/get.py#L25"
    },
    "ios": {
      "doc": "Get the configured boot variables on the device\n        Args:\n            device (`obj`): Device object\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L101"
    },
    "iosxe": {
      "cat3k": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n        Raises:\n            Exception\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat3k/platform/get.py#L11"
      },
      "cat9500": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L11"
      },
      "cat9k": {
        "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_boot_variables",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L11"
      },
      "doc": "Get current or next-reload boot variables on the device\n        Args:\n            device (`obj`): Device object\n            boot_var (`str`): Type of boot variable to return to caller\n            output (`str`): output from show boot\n        Returns:\n            List of boot images or []\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_boot_variables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L264"
    }
  },
  "get_bridge_domain_bridge_domain_interfaces": {
    "iosxe": {
      "doc": " Get list of interfaces using bridge-domain id\n\n        Args:\n            bridge_domain_id('int'): bridge-domain id to get interfaces\n            device ('obj'): Device object\n\n        Returns:\n            list of interfaces\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bridge_domain_bridge_domain_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L52"
    }
  },
  "get_bridge_domain_bridge_domain_mac_count": {
    "iosxe": {
      "doc": " Get bridge domain mac count\n\n        Args:\n            device(`obj`): Device object \n            timeout_parse ('int'): Timeout in seconds for command device.parse('show bridge-domain')\n        Returns:\n            integer: mac count\n        Raises:\n            None\n    ",
      "module_name": "bridge_domain.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bridge_domain_bridge_domain_mac_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bridge_domain/get.py#L13"
    }
  },
  "get_bundled_interface": {
    "iosxe": {
      "doc": " Pick up Port channel bundled interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port Channel Interface\n            exclude_interface ('str'): interface to skip\n\n        Returns:\n            String: Interface\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_bundled_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L747"
    }
  },
  "get_cdp_neighbors_info": {
    "ios": {
      "doc": " \n        Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/get.py#L10"
    },
    "iosxe": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/get.py#L11"
    },
    "iosxr": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/get.py#L10"
    },
    "nxos": {
      "doc": " Get details about cdp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with cdp info\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cdp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/get.py#L10"
    }
  },
  "get_cef_internal_primary_interface": {
    "iosxe": {
      "doc": " Get cef internal output primary interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_primary_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L501"
    }
  },
  "get_cef_internal_primary_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_primary_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L251"
    }
  },
  "get_cef_internal_repair_interface": {
    "iosxe": {
      "doc": " Get cef internal output repair interface\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            interface name/None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_repair_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L563"
    }
  },
  "get_cef_internal_repair_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get internal next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_internal_repair_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L132"
    }
  },
  "get_cef_next_hop_ip_address": {
    "iosxe": {
      "doc": " Get next hop ip address from Express Forwarding\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Returns:\n            String: Next hop Ip address \n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_next_hop_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L85"
    }
  },
  "get_cef_registred_label_to_prefix": {
    "iosxe": {
      "doc": " Get registered label to prefix in CEF\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            output ('dict'): Optional. Parsed output from command 'show ip cef {prefix} detail'\n            vrf ('str'): Optional. VRF name. Default: 'default'\n            address_family ('str'): Optional. Family name. Default: 'ipv4'\n            interface ('str'): Optional. Interface name\n            nexthop_address ('str'): Optional. Nexthop address\n        Returns:\n            int: Registered label\n        Raises:\n            ValueError: Found more than on registered label\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_registred_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L387"
    }
  },
  "get_cef_repair_path_of_route": {
    "iosxe": {
      "doc": " Get 'repair path' of route\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Return:\n            tuple: (\n                String: Repair path IP address,\n                String: Repair path Interface\n            )\n        Raises:\n            None\n    ",
      "module_name": "cef.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cef_repair_path_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/get.py#L18"
    }
  },
  "get_chassis_cpu_util": {
    "junos": {
      "doc": "Returns chassis cpu utilization\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section (str): cpu utilization, defaults to cpu-idle-5sec\n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_cpu_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L46"
    }
  },
  "get_chassis_cpu_util_alternative": {
    "junos": {
      "doc": "Returns chassis cpu utilization. When show chassis routing-engine\n       has the alternative output\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section ('str', optional): cpu utilization, defaults to cpu-idle\n        expected_state ('str'): cpu state, defaults to Master\n        expected_slot (int, optional): Expected slot number. default to None. \n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_cpu_util_alternative",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L71"
    }
  },
  "get_chassis_fpc_cpu_util": {
    "junos": {
      "doc": "Returns chassis fpc cpu utilization\n\n    Args:\n        device (obj): Device object\n        cpu_total ('str', optional): cpu utilization, defaults to cpu-total\n        expected_state ('str'): cpu state, defaults to Master\n        Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_fpc_cpu_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L201"
    }
  },
  "get_chassis_fpc_slot_numbers": {
    "junos": {
      "doc": "Returns slot numbers\n    Args:\n        device (obj): Device object\n        expected_state (str): Expected state. Default to None.\n    Returns:\n        list: List of slot numbers \n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_fpc_slot_numbers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L176"
    }
  },
  "get_chassis_memory_util": {
    "junos": {
      "doc": "Returns chassis memory utilization\n\n    Args:\n        device (obj): Device object\n        expected_slot (int): Expected slot number\n\n    Returns:\n        str: Memory utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_memory_util",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L13"
    }
  },
  "get_chassis_slot_idle_value": {
    "junos": {
      "doc": "Returns chassis cpu utilization for specific slot.\n\n    Args:\n        device (obj): Device object\n        cpu_idle_section ('str', optional): cpu utilization, defaults to cpu-idle\n        slot ('str'): cpu slot, defaults to 0\n\n    Returns:\n        str: CPU utilization percentage\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_slot_idle_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L246"
    }
  },
  "get_chassis_sn": {
    "iosxe": {
      "doc": "Get the chassis SN of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis SN\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_sn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L679"
    },
    "nxos": {
      "doc": "Get the chassis SN of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis SN\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_sn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L412"
    }
  },
  "get_chassis_type": {
    "iosxe": {
      "doc": "Get the chassis type of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L661"
    },
    "nxos": {
      "doc": "Get the chassis type of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device chassis\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L394"
    }
  },
  "get_chassis_zone_actual_usage": {
    "junos": {
      "doc": " Get capacity actual usage of a zone\n\n        Args:\n            device (`obj`): Device object\n            expected_zone (`str`): Expected zone\n        Returns:\n            result (`list`): list of states of routing engines\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_chassis_zone_actual_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L154"
    }
  },
  "get_class_of_service_classifiers": {
    "junos": {
      "doc": " Get list of classifiers based interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            classifiers: list\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_class_of_service_classifiers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L46"
    }
  },
  "get_class_of_service_shaping_rate": {
    "junos": {
      "doc": " Get shapping rate based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get shaping rate\n            \n        Returns:\n            shaping_rate: Staping rate value\n\n        Raises:\n            None\n    ",
      "module_name": "class_of_service.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_class_of_service_shaping_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/get.py#L16"
    }
  },
  "get_component_descr": {
    "iosxe": {
      "doc": "\n    Get components' description\n\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: components' description dict\n            example: {\n                'name': [],\n                'descr': []\n            }\n    Raises:\n        None\n    ",
      "module_name": "inventory.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_component_descr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/inventory/get.py#L225"
    }
  },
  "get_component_details": {
    "iosxe": {
      "doc": "\n    Get components detail\n\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: components' details dict\n            example: {\n                'name': [],\n                'descr_raw': [],\n                'part_number': [],\n                'serial_number': [],\n                'hardware_version': []\n            }\n    Raises:\n        None\n    ",
      "module_name": "inventory.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_component_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/inventory/get.py#L13"
    }
  },
  "get_config_commands_from_running_config": {
    "ios": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L154"
    },
    "iosxe": {
      "doc": " Builds configuration command from running config\n\n        Args:\n            device ('obj'): device to run on\n            option ('str'): running config sub option\n\n        Returns:\n            list of config commands\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_commands_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L152"
    }
  },
  "get_config_dict": {
    "com": {
      "doc": " Cast config to Configuration dict\n\n        Args:\n            config ('str'): config string\n        Returns:\n            Configuration dict\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L225"
    }
  },
  "get_config_from_file": {
    "ios": {
      "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_from_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L39"
    },
    "iosxe": {
      "doc": " Get configuration from a file in disk\n\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            filename ('str'): File name\n        Raises:\n            SubCommandFailure\n        Returns:\n            Dictionary: Configuration\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_from_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L44"
    }
  },
  "get_config_register": {
    "iosxe": {
      "cat3k": {
        "doc": "Get current config-register setting on the device\n        Args:\n            device (`obj`): Device object\n            next_reload (`bool`): Determine if returning next-reload value\n        Returns:\n            config-register value or None\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_config_register",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat3k/platform/get.py#L57"
      },
      "doc": "Get current config-register setting on the device\n        Args:\n            device (`obj`): Device object\n            next_reload (`bool`): Determine if returning next-reload value\n        Returns:\n            config-register value or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L304"
    },
    "iosxr": {
      "doc": "Get config-regsiter on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            config-register or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L67"
    }
  },
  "get_configuration_interface_family_bridge_vlan_id": {
    "junos": {
      "doc": " Get vlan-di from \n        show configuration interface {interface} unit {unit} family bridge vlan-id\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        unit (str): Unit value\n\n    Returns:\n        str: vlan-id\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_interface_family_bridge_vlan_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L79"
    }
  },
  "get_configuration_mpls_label_switched_path_name": {
    "junos": {
      "doc": " Get path name from show configuration protocols mpls label-switched-path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): File to check\n\n    Returns:\n        str or None: Configured primary name\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_mpls_label_switched_path_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L12"
    }
  },
  "get_configuration_mpls_paths": {
    "junos": {
      "doc": " Get all paths from show configuration protocols mpls path {path}\n\n    Args:\n        device (obj): Device object\n        path (str): Path to check\n\n    Returns:\n        List or None: All path addresses\n    ",
      "module_name": "configuration.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configuration_mpls_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/get.py#L46"
    }
  },
  "get_configured_bgp_peers": {
    "iosxe": {
      "doc": " Get configured BGP peers\n        Args:\n            device ('obj'): Device object\n            bgp_as ('int'): AS number\n            router_bgp_address_family ('str'): Address family of router bgp\n            vrf ('str'): VRf name\n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_configured_bgp_peers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L1433"
    }
  },
  "get_connected_alias": {
    "com": {
      "doc": " Get connected alias from device object\n\n        Args:\n            device ('obj')  : Device object\n        Returns:\n            aliases (`dict`) : dict with alias key with value\n                               which contains all related info\n                               for the connection\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_connected_alias",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3641"
    }
  },
  "get_connection": {
    "com": {
      "doc": "\n        Get connection object.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n\n        Returns:\n            Connection object\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2996"
    }
  },
  "get_controller_name": {
    "com": {
      "doc": "Get controller name\n    Args:\n        device (obj): Device object\n    Returns:\n        mwar name in string \n        ",
      "module_name": "cheetah.ap.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_controller_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/get.py#L43"
    }
  },
  "get_cpu_processes_details_include_with_specific_process": {
    "iosxe": {
      "doc": " Get the cpu processes details include with specific_process\n        Args:\n            device('obj'): device to configure on\n            process('str'): process name\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "processes.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_cpu_processes_details_include_with_specific_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/processes/get.py#L27"
    }
  },
  "get_crypto_ipsec_tunnel_counter": {
    "iosxe": {
      "doc": "Get interface counters for ipsec tunnel\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n        tunnel_source('str'): Tunnel source IP address\n        tunnel_destination('str'): Tunnel destination IP address\n        counter_name('str'): Counter/status parameter\n    Returns:\n        Counter parameter value of an ipsec tunnel\n    Raises:\n        None\n    ",
      "module_name": "ipsec.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_crypto_ipsec_tunnel_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/get.py#L8"
    }
  },
  "get_current_active_pies": {
    "iosxr": {
      "doc": "Gets the current active pies on a device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            List of active pies on the device\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_current_active_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L184"
    }
  },
  "get_current_system_datetime": {
    "iosxe": {
      "doc": " Returns current time of system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            current time ('str')\n        Raises:\n            None\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_current_system_datetime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/system/get.py#L12"
    }
  },
  "get_ddos_protection_arrival_rate": {
    "junos": {
      "doc": " Get arrival rate for expected-protocol-states-local\n\n    Args:\n        device (object): Device object\n        protocol (str): Protocol value \n        expected_protocol_states_local (str): Expected protocol states local\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "ddos.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ddos_protection_arrival_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ddos/get.py#L15"
    }
  },
  "get_delta_time_from_outputs": {
    "com": {
      "doc": " Get delta time from Time source of two outputs\n        Time source example: 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n\n        Args:\n            output_before ('str'): Text output from show command\n            output_after ('str'): Text output from show command\n        Returns:\n            Time delta in seconds\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_delta_time_from_outputs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L569"
    }
  },
  "get_device_classifier_profile_names": {
    "iosxe": {
      "doc": "\n    Verify portfast is enabled or not on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface to check\n    Returns:\n        result: returns the classifier device names\n    Raises:\n        SubCommandFailure: If command not executed raises subcommand failure error\n    ",
      "module_name": "device_classifier.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_classifier_profile_names",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/device_classifier/get.py#L9"
    }
  },
  "get_device_connections_info": {
    "com": {
      "doc": " Get connection information of a device from testbed file.\n            Args:\n                device (`obj`): device object\n            Returns:\n                device.connections (`dict`)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_connections_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3341"
    }
  },
  "get_device_tracking_counters_vlan_faults": {
    "iosxe": {
      "doc": " Get device_tracking vlan count message type\n        Args:\n            device ('obj'): device object\n            vlanid ('str'): vlan\n        Returns:\n            List\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_counters_vlan_faults",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L145"
    }
  },
  "get_device_tracking_counters_vlan_message_type": {
    "iosxe": {
      "doc": " Get device_tracking vlan count message type\n        Args:\n            device ('obj'): device object\n            vlanid ('str'): vlan\n            message_type ('str', optional): message type. Defaults to \"received\"\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_counters_vlan_message_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L119"
    }
  },
  "get_device_tracking_database_details_binding_table_configurations": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_database_details_binding_table_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L35"
    }
  },
  "get_device_tracking_database_details_binding_table_count": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n            state('bool', optional): get state count if True. Defaults to False\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_database_details_binding_table_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L54"
    }
  },
  "get_device_tracking_policy_name_configurations": {
    "iosxe": {
      "doc": " Get device-tracking policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_tracking_policy_name_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L15"
    }
  },
  "get_device_uptime": {
    "iosxe": {
      "doc": " Gets the device uptime\n        Args:\n            device (`obj`): Device object\n        Returns:\n            uptime\n            False if None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_device_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L826"
    }
  },
  "get_devices": {
    "com": {
      "doc": " Get devices from testbed object\n        Args:\n            testbed (`obj`): testbed object\n            os (`str`): specify os to choose. Defaults to None\n            regex (`str`): regex to chose devices based against regex_key\n                           Defaults to None\n            regex_key (`str`): specify key in testbed yaml where use regex\n                               default to `os`\n            pick_type (`str`) : specify how to pick up\n                                default to `all`\n                                choices:\n                                  `all`: pick up all devices\n                                         return device names as list\n                                  `first_one`: pick up first one device\n                                               return device name as string\n                                  `random_one`: pick up one device randomly\n                                                return device name as string\n                                  `random_order`: randomize order of devices\n                                                  return device names as list\n            only_connected (`bool`) : check if device is connected and return \n                                      only connected ones. Default to False\n            with_os (`bool`): return dict with device name and os as key/value pair\n                              Defaults to False\n\n        Raise:\n            Exception\n        Returns:\n            picked_devices (`list` or `str`, or dict): list of device names\n                                              device name as string in case of\n                                              `first_one` or `random_one`\n                                              if with_os is True, will return dict with os\n                                              ex.)\n                                              {\n                                                  'R1_xe': 'iosxe',\n                                                  'R2_xr': 'iosxr',\n                                              }\n\n        Example:\n\n        >>> dev.api.get_devices(testbed)\n        ['terminal_server',\n         'internet-rtr01',\n         'internet-host01',\n         'edge-firewall01',\n         'core-rtr01',\n         'core-rtr02',\n         'dist-rtr01',\n         'dist-rtr02',\n         'dist-sw01',\n         'dist-sw02',\n         'inside-host01',\n         'edge-sw01',\n         'inside-host02']\n\n        >>> dev.api.get_devices(testbed, os='iosxe')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n        >>> dev.api.get_devices(testbed, regex='iosxe')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n        >>> dev.api.get_devices(testbed, regex='ios.*')\n        ['internet-rtr01',\n         'core-rtr01',\n         'core-rtr02',\n         'dist-rtr01',\n         'dist-rtr02',\n         'edge-sw01']\n\n        >>> dev.api.get_devices(testbed, regex='iosxrv', regex_key='series')\n        ['core-rtr01', 'core-rtr02']\n\n        >>> dev.api.get_devices(testbed, os='iosxe', regex='.*n0.*', regex_key='command')\n        ['internet-rtr01']\n\n        >>> dev.api.get_devices(testbed, pick_type='first_one')\n        'terminal_server'\n\n        >>> dev.api.get_devices(testbed, os='nxos', pick_type='random_one')\n        'dist-sw02'\n\n        >>> dev.api.get_devices(testbed, os='iosxe', pick_type='random_order')\n        ['internet-rtr01', 'dist-rtr01', 'dist-rtr02']\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_devices",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3043"
    }
  },
  "get_dhcpv4_binding_address_list": {
    "iosxe": {
      "doc": "Get the list of all ip addresses in the dhcpv4 binding table\n        Args:\n            device('obj'): device object with dhcp server configured\n            vrf('str', Optional): vrf name, defaults to None\n        Returns:\n            address_list('list'): list of addresses\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "dhcp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv4_binding_address_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/get.py#L48"
    }
  },
  "get_dhcpv4_server_bindings": {
    "iosxe": {
      "doc": "Get the dhcpv4 server bindings on device\n       Args:\n            device('obj'): device object\n            vrf (`str`, Optional): vrf name, defaults to None.\n       Returns:\n            parsed output\n       Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "dhcp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv4_server_bindings",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/get.py#L27"
    }
  },
  "get_dhcpv4_server_stats": {
    "iosxe": {
      "doc": "Get the dhcpv4 server statistics on device\n       Args:\n            device('obj'): device object\n       Returns:\n            parsed output\n       Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "dhcp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv4_server_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/get.py#L11"
    }
  },
  "get_dhcpv6_binding_address_list": {
    "iosxe": {
      "doc": "Get the list of all ip addresses in the dhcpv6 binding table\n        Args:\n            device('obj'): device object with dhcp server configured\n            vrf('str', Optional): vrf name\n        Returns:\n            address_list('list'): list of addresses\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "dhcpv6.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv6_binding_address_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/get.py#L52"
    }
  },
  "get_dhcpv6_server_bindings": {
    "iosxe": {
      "doc": "Get the dhcpv6 server bindings on device\n       Args:\n            device('obj'): device object\n            vrf (`str`, optional): vrf name. Defaults to None.\n       Returns:\n            parsed output\n       Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "dhcpv6.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv6_server_bindings",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/get.py#L30"
    }
  },
  "get_dhcpv6_server_stats": {
    "iosxe": {
      "doc": "Get the dhcpv6 server statistics on device\n       Args:\n            device('obj'): device object\n       Returns:\n            parsed output\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcpv6.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dhcpv6_server_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/get.py#L13"
    }
  },
  "get_diagnostics_optics_stats": {
    "junos": {
      "doc": "Get the traffic stats of given interface via show interfaces diagnostics optics {interface}\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            stat_name ('str'): stat name under `traffic-statistics`\n            lane_number ('int'): lane number\n\n        Returns:\n            str (value of stat_name)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diagnostics_optics_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L769"
    }
  },
  "get_dict_items": {
    "com": {
      "doc": " Get one or any of dict items\n        Args:\n            name (`dict`): dict data\n            key (`str|int|list`): key in dict. one or any\n            contains (`str`): filter with Dq by this keyword\n            regex (`bool`): if use regex for contains\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n            headers (`bool`): if return contains headers, or not\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): list of one or of dict key/value items\n\n        Example:\n\n            bgp = {\n                'id': '65000',\n                'shutdown': False,\n                'address_family': {\n                    'ipv4': {\n                        'total_neighbor': 3,\n                        'neighbors': {\n                            '10.1.1.1': {\n                                'status': 'up',\n                                'routes': 10,\n                            },\n                            '10.2.2.2': {\n                                'status': 'down',\n                                'routes': '20',\n                            },\n                            '10.3.3.3': {\n                                'status': 'up',\n                                'routes': 30\n                            }\n                        }\n                    }\n                }\n            }\n\n            Some examples with above structure data.\n\n            >>> dev.api.get_dict_items(bgp, 'neighbors')\n            [['10.1.1.1'], ['10.2.2.2'], ['10.3.3.3']]\n\n            >>> dev.api.get_dict_items(bgp, ['id', 'shutdown'])\n            [['65000', False]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], 'ipv4')\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down'], ['10.3.3.3', 30, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], '10.1.1.1')\n            [['10.1.1.1', 10, 'up']]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'])\n            [[10], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_str=True)\n            [['10'], ['20']]\n\n            >>> dev.api.get_dict_items(bgp, 'routes', ['10.1.1.1', '10.2.2.2'], to_num=True)\n            [[10], [20]]\n\n            >>> dev.api.get_dict_items(bgp, ['neighbors', 'routes', 'status'], ['10.1.1.1', '10.2.2.2])\n            [['10.1.1.1', 10, 'up'], ['10.2.2.2', '20', 'down']]\n\n            (Speceial case) if only one item in list, it will return value without list.\n            >>> dev.api.get_dict_items(bgp, 'routes', '10.1.1.1')\n            10\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dict_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1800"
    }
  },
  "get_diffs_platform": {
    "ios": {
      "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diffs_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L15"
    },
    "iosxe": {
      "doc": " Check differences between two parsed outputs from 'show platform'\n\n        Args:\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_diffs_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L67"
    }
  },
  "get_dir_byte_total": {
    "iosxe": {
      "doc": "Get the total and free bytes for directory\n\n        Args:\n            device ('obj'): Device object\n            directory ('str'): Directory or file name (Eg. flash:, crashinfo:)\n        Returns:\n            ret_dict ('dict'): directory with bytes total and bytes free\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dir_byte_total",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L207"
    }
  },
  "get_dscp_cos_qos_queue_stats": {
    "iosxe": {
      "doc": " Gets the ingress or egress dscp and cos stats\n        Args:\n            device (`obj`): Device object\n            interface ('str'): Device interface\n            cos ('str',optional): Ingress COS0 or Egress COS7\n            dscp ('str',optional): Ingress DSCP0 or Egress DSCP43\n            switch ('str',optional): switch to get info\n            switch_type ('str',optional): switch_type active or standby to get info\n            switch_num ('str',optional): switch_num 1 or 2 or 3 to get info\n        Returns:\n            heading,frames and bytes\n            If condition not matched it will return None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_dscp_cos_qos_queue_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L849"
    }
  },
  "get_fabric_ap_state": {
    "iosxe": {
      "cat9k": {
        "doc": "Get fabric ap state\n    Args:\n        device (obj): Device object\n        ap_name (str): accesspoint name\n    Returns:\n        ap state (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_fabric_ap_state",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L57"
      }
    }
  },
  "get_file_size": {
    "ios": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L520"
    },
    "iosxe": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L135"
    },
    "iosxr": {
      "doc": "Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L88"
    },
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            int\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L64"
    },
    "nxos": {
      "doc": "\n        Get file size on the device\n        Args:\n            device (`obj`): Device object\n            file (`str`): File name\n        Returns:\n            file size in `int` type or None if file size is not available\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L20"
    }
  },
  "get_file_size_from_server": {
    "com": {
      "doc": " Get file size from the server\n    Args:\n        device ('Obj'): Device object\n        server ('str'): server address or hostname\n        path ('str'): file path on server to check\n        protocol ('srt'): protocol used to check file size\n        timeout ('int'): check size timeout in seconds\n        fu_session ('obj'): existing FileUtils object to reuse\n    Returns:\n         integer representation of file size in bytes\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_size_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1193"
    }
  },
  "get_file_timestamp": {
    "junos": {
      "doc": " Get file size from device\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_file_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L209"
    }
  },
  "get_fips_authorization_key": {
    "iosxe": {
      "doc": "Gets the fips authorization-key\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        fips authorization-key\n    ",
      "module_name": "fips.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_fips_authorization_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fips/get.py#L11"
    }
  },
  "get_firewall_counter": {
    "junos": {
      "doc": " Get specific field value from show firewall counter filter\n\n        Args:\n            device (`obj`): Device object\n            filters (`str`): Firewall filter argument\n            counter_name (`str`): Firewall counter name argument\n            field (`str`): field to check in parse_output\n                           Default to `packet-count`\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n            output (`str`): output of show firewall counter filter {filters} {counter_name}\n                            Default to None\n        Returns:\n            counter value(int) \n        Raises:\n            N/A\n    ",
      "module_name": "firewall.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firewall_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/get.py#L20"
    }
  },
  "get_firmware_repository_images": {
    "apic": {
      "doc": " Returns a list of images in the firmware repository.\n\n    Args:\n        device (obj): Device to execute on\n        image_type (str): Type of images to return\n\n    Returns:\n        (list): of images in the firmware repository\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_repository_images",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L11"
    }
  },
  "get_firmware_repository_images_by_polling": {
    "apic": {
      "doc": " Polls the firmware repository for an image that matches\n    'image_type'. Returns after a matching image is found.\n\n    Args:\n        device (obj): Device to execute on\n        image_type (str): Type of images to return\n        max_time (int, optional): Max time for polling. Defaults to 120.\n        check_interval (int, optional): How often to poll. Defaults to 15.\n\n    Returns:\n        (list): of images in the firmware repository\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_repository_images_by_polling",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L49"
    }
  },
  "get_firmware_upgrade_status": {
    "apic": {
      "doc": " Returns a list of tuples containing node_id, status.\n\n    Args:\n        device (obj): Device to execute on\n        firmware_group (str, optional): group to filter by. Defaults to None.\n\n    Returns:\n        (list of tuples): each containing \"node_id, status\"\n\n    Raises:\n        N/A\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_upgrade_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L76"
    }
  },
  "get_firmware_version": {
    "iosxe": {
      "doc": "\n    Get components' firmware version (for cat 9600 and 9400 series)\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: components' firmware dict\n            example: {\n                'name': [],\n                'firmware_version': []\n            }\n    Raises:\n        None\n    ",
      "module_name": "firmware_version.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/firmware_version/get.py#L9"
    }
  },
  "get_firmware_version_from_image_name": {
    "apic": {
      "doc": " Get the firmware version from the image name.\n\n    Args:\n        image_name (str): image filename\n\n    Returns:\n        string with image version\n    ",
      "module_name": "firmware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_firmware_version_from_image_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/get.py#L108"
    },
    "nxos": {
      "aci": {
        "doc": " Get the firmware version from the image name.\n\n    Args:\n        image_name (str): image filename\n\n    Returns:\n        string with image version\n    ",
        "module_name": "firmware.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_firmware_version_from_image_name",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/firmware/get.py#L5"
      }
    }
  },
  "get_flows_src_dst_address_pairs": {
    "iosxe": {
      "doc": " Gets flows under flow_monitor and returns source and destination address pairs\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor name\n\n        Raises:\n            N/A\n\n        Returns:\n            [('source_address', 'destination_address'), ...]\n    ",
      "module_name": "flow.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_flows_src_dst_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/get.py#L12"
    }
  },
  "get_grant_certificate": {
    "iosxe": {
      "eaptls": {
        "doc": " Generates grant certificate on device\n\n        Args:\n            device (`obj`): Device object\n            grant_id ('str'): Grant ID to generate the grant\n\n        Returns:\n            Grant Certificate or None\n\n        Raise:\n            SubCommandFailure: Failed to generate grant certificate on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "get_grant_certificate",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L394"
      }
    }
  },
  "get_grant_id_pki_server": {
    "iosxe": {
      "eaptls": {
        "doc": " Gets grant ID from Grant ID output\n        Args:\n            device (`obj`): Device object\n            grant_output ('str'): Grant ID output\n\n        Returns:\n            Grant ID or None\n\n        Raise:\n            SubCommandFailure: Failed to retrieve Grant ID from Grant ID full output\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "get_grant_id_pki_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L375"
      }
    }
  },
  "get_hardware_all_fans_speed": {
    "iosxe": {
      "doc": " Get fan speed for all fans \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            fans (`list`): Fans info\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_all_fans_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L22"
    }
  },
  "get_hardware_esp_slot": {
    "iosxe": {
      "doc": " Get ESP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): ESP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): ESP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_esp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L119"
    }
  },
  "get_hardware_inserted_sfp": {
    "iosxe": {
      "doc": " Get newly inserted SFP\n\n        Args:\n            device (`obj`): Device object\n            prev_slots (`dict`): Previous sfp slot dict\n            sfp_descr (`str`): SFP descr\n            intf_type (`str`): Interface type\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_inserted_sfp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L212"
    }
  },
  "get_hardware_interface_sfp_descr": {
    "iosxe": {
      "doc": " Get interface SFP descr\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Returns:\n            descr (`str`): Interface SFP descr\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_interface_sfp_descr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L300"
    }
  },
  "get_hardware_rp_slot": {
    "iosxe": {
      "doc": " Get RP slot from device\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): RP state\n            max_time (`int`): max wait time \n            check_interval (`int`): check interval \n        Returns:\n            result (`str`): RP slot in required state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_rp_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L64"
    }
  },
  "get_hardware_sfp_slot_dict": {
    "iosxe": {
      "doc": " Get SFP slot dict\n\n        Args:\n            device (`obj`): Device object\n            sfp_descr (`str`): SFP descr\n        Returns:\n            sfp_slot_dict (`dict`): SFP slot dict\n                example: {\n                    '1/1/6':{'slot': '1', \n                             'subslot': '1 transceiver 6', \n                             'lc': 'ASR1000-SIP10', \n                             'pid': 'SFP-GE-S', \n                             'descr': 'GE SX'}}\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_sfp_slot_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L247"
    }
  },
  "get_hardware_slot_state": {
    "iosxe": {
      "doc": " Get slot state\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): Slot\n        Returns:\n            state (`str`): Slot state\n            None\n        Raises:\n            None\n    ",
      "module_name": "hardware.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/get.py#L174"
    }
  },
  "get_hardware_version": {
    "iosxe": {
      "doc": "\n    Get components' hardware version\n\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: components' hardware version dict\n            example: {\n                'name': [[usbflash1],[Switch1, PowerSupply1/B]],\n                'hardware_version': [[3.10],[P2A, V02]]\n            }\n    Raises:\n        None\n    ",
      "module_name": "inventory.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hardware_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/inventory/get.py#L303"
    }
  },
  "get_hostname": {
    "junos": {
      "doc": " Get the hostname from 'show version'\n\n        Args:\n            device ('obj'): device to use\n        \n        Returns:\n            hostname ('str'): Hostname\n\n        Raises:\n            N/A\n    ",
      "module_name": "version.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/version/get.py#L13"
    }
  },
  "get_inserted_interface_by_media_type": {
    "iosxe": {
      "doc": " Get newly inserted interface by media type\n\n        Args:\n            device (`obj`): Device object\n            media_type (`str`): media type\n\n        Returns:\n            interface (`str`): interface name\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_inserted_interface_by_media_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L39"
    }
  },
  "get_install_version": {
    "iosxe": {
      "doc": "\n    returns version of img/smu\n    Args:\n        device ('obj'): Device object\n        install_type ('str, optional'): install type\n        install_state ('str, optional'): install state\n    Returns:\n        Install version if match criteria is satisfied\n        False if Install version if match criteria is not satisfied\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_install_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/get.py#L7"
    }
  },
  "get_installation_mode": {
    "iosxe": {
      "c9800": {
        "doc": "Get installation mode\n    Args:\n        device (obj): Device object\n    Returns:\n        installation mode (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_installation_mode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L109"
      }
    }
  },
  "get_interface_address_mask_running_config": {
    "iosxe": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Not used in IOSXE. Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L778"
    },
    "junos": {
      "doc": " Get interface address and mask from show running-config interface {interface}\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            address_family ('str'): Address family\n\n        Returns:\n            (Interface IP address, Interface Mask)\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_address_mask_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L23"
    }
  },
  "get_interface_admin_status": {
    "iosxe": {
      "doc": "Get admin status of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_admin_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1314"
    }
  },
  "get_interface_attr_from_yaml": {
    "com": {
      "doc": " Get interface attribute from the testbed yaml file\n        To be used within datafile\n        Args:\n            local ('str'): local device to get interface from\n            remote ('str'): Remote device where the interface is connected to\n            value ('str'): Either link name or a number and a link will be randomly chosen\n            testbed_topology (`dict`): 'testbed.topology' or 'testbed'\n            attr ('str'): interface attribute to get\n            ipv4_with_netmask ('bool'): Return ipv4 with netmask or not, default is False\n\n            accepts keyword arguments\n        Raise:\n            N/A\n        Returns:\n            Interface attr value or None if not found\n        Example:\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_attr_from_yaml(uut,helper,0,%{testbed.topology},ipv4)}\"\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_attr_from_yaml(uut,helper,r1_r4_1,%{testbed.topology},ipv4,True)}\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_attr_from_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3296"
    }
  },
  "get_interface_carrier_delay": {
    "iosxe": {
      "doc": " Get interface carrier delay\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            delay_type ('str'): Carrier delay type: 'up', 'down'\n\n        Returns:\n            None\n            delay in seconds ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L489"
    }
  },
  "get_interface_connected_adjacent_router_interfaces": {
    "iosxe": {
      "doc": " Get list of connected interfaces from adjacents routers\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            List: EthernetInterface objects\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_connected_adjacent_router_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L717"
    }
  },
  "get_interface_counter": {
    "iosxe": {
      "doc": "Get interface counters and status\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n        counter_name('str'): Counter/status parameter\n\n    Returns:\n        Counter parameter value of an interface\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1400"
    }
  },
  "get_interface_description": {
    "iosxe": {
      "doc": "Get description of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface description string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1228"
    }
  },
  "get_interface_field": {
    "junos": {
      "doc": " Get specific field value from show interfaces\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface name\n            field (`str`): field name where want to get value\n            output (`str`): output of show interfaces {interface}\n                            Default to None\n        Returns:\n            value (`str`): ifindex number\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L864"
    }
  },
  "get_interface_from_yaml": {
    "com": {
      "doc": " Get interface name from the testbed yaml file\n\n        To be used within datafile\n\n        Args:\n            local (`str`): local device to get interface from\n            remote (`str`): Remote device where the interface is connected to\n            value (`str`): Either link name or a number and a link will be randomly chosen\n            testbed_topology (`dict`): `testbed.topology` or `testbed`\n\n        Raise:\n            Exception\n        Returns:\n            Interface name\n\n        Example:\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(uut,helper,0,%{testbed.topology})}\"\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(uut,helper,r1_r4_1,%{testbed.topology})}\"\n\n            interface: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_from_yaml(alias,helper,0,%{testbed})}\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_from_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3190"
    }
  },
  "get_interface_ifindex": {
    "iosxe": {
      "doc": "Get  snmp ifindex of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface ifindex integer value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ifindex",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1383"
    }
  },
  "get_interface_information": {
    "ios": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L16"
    },
    "iosxe": {
      "doc": " Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1001"
    },
    "iosxr": {
      "doc": "Get interface information from device for a list of interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L52"
    },
    "nxos": {
      "doc": " Get interface information from device for a  interfaces\n\n        Args:\n            List['string']: Interfaces to query information on\n            device ('obj'): Device object\n        Returns:\n            List containing Dictionaries for sucesses\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L17"
    }
  },
  "get_interface_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1995"
    },
    "iosxe": {
      "doc": " Get interface and device\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L550"
    }
  },
  "get_interface_interfaces_ldp_enabled": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show mpls interfaces details'\n\n        Args:\n            device ('str'): Device str\n            vrf ('str'): Vrf name\n        Returns:\n            interface list\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces_ldp_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L87"
    }
  },
  "get_interface_interfaces_under_vrf": {
    "iosxe": {
      "doc": " Get interfaces configured under specific Vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n\n        Returns:\n            interfaces (`list`): List of interfaces\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_interfaces_under_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L584"
    }
  },
  "get_interface_ip_address": {
    "iosxe": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Used only for junos api\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L326"
    },
    "iosxr": {
      "doc": " Get interface ip_address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n\n        Returns:\n            None\n            interface ip_address ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L17"
    },
    "junos": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family\n            link_local ('bool'): Link local address\n            return_all ('bool'): return List of values\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L65"
    }
  },
  "get_interface_ip_and_mask": {
    "iosxe": {
      "doc": " Get interface ip address and mask\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            prefix (`bool`): return ip with prefix if True\n                             otherwise return ip and mask\n\n        Returns:\n            Tuple: (None, None)\n            Tuple: (str: interface ip address, str: interface mask)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ip_and_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L515"
    }
  },
  "get_interface_ipv4_address": {
    "ios": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/interface/get.py#L40"
    },
    "iosxe": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1025"
    },
    "iosxr": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L76"
    },
    "junos": {
      "doc": "Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L737"
    },
    "nxos": {
      "doc": " Get the ip address for an interface on target device\n\n        Args:\n            interface ('string'): interface to get address for\n            device: ('obj'): Device Object\n        Returns:\n            None\n            String with interface ip address\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L40"
    }
  },
  "get_interface_last_state_timestamp": {
    "iosxe": {
      "doc": "Get interface last state up/down time value in nanosecond using 'show log'\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface timestamp integer value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_last_state_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1339"
    }
  },
  "get_interface_logical_output_bps": {
    "junos": {
      "doc": "Get logical output bps of a logical interface\n\n    Args:\n        device ('obj'): device object\n        logical_interface ('str'): Logical interface to check output bps\n        interface ('str'): interface name to pass in show command\n        extensive ('bool'): Use extensive in show command\n        output_dict ('dict'): Pass if dictionary already exist\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_logical_output_bps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L379"
    }
  },
  "get_interface_loopback_ip_address": {
    "iosxe": {
      "doc": " Gets all loopback interface ip_address' up to number specified\n\n        Args:\n            device ('obj'): device to use\n            num ('int'): max number of loopback interfaces to get ip_address from\n\n        Returns:\n            list: [(interface with Loopback address, ip_address), ...]\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_loopback_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L368"
    }
  },
  "get_interface_mac_address": {
    "iosxe": {
      "doc": " Get interface mac address from device\n\n        Args:\n            device (`obj`): Device object\n            interface(`str`): Interface name\n\n        Returns:\n            None\n            interface mac address\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L221"
    }
  },
  "get_interface_mtu_config_range": {
    "iosxe": {
      "doc": " Get MTU config range\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            range_dict (`dict`): MTU range dict\n                ex: {'min':30, 'max':360, range: '30-360'}\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mtu_config_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L190"
    }
  },
  "get_interface_mtu_size": {
    "iosxe": {
      "doc": " Get interface MTU\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            mtu (`int`): mtu bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_mtu_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L166"
    }
  },
  "get_interface_names": {
    "iosxe": {
      "doc": "Gets the names of all interfaces on the device\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        list: List of interface names\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_names",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1092"
    },
    "nxos": {
      "doc": "Gets the names of all interfaces on the device\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        list: List of interface names\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_names",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L62"
    }
  },
  "get_interface_netmask": {
    "iosxe": {
      "doc": " Get netmask of ip address' class\n\n        Args:\n            ip_address ('str'): ipv4 address\n\n        Returns:\n            ip address mask\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_netmask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L954"
    }
  },
  "get_interface_network_address": {
    "junos": {
      "doc": " Get interface network address from device\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            address_family ('str'): Address family. Default to 'ipv4'\n            link_local ('bool'): Link local address. Default to False\n            return_all ('bool'): return List of values. Default to False\n        Returns:\n            None\n            network_address ('str'): If has multiple network addresses\n                                     will return the first one.\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_network_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L610"
    }
  },
  "get_interface_oper_yang_status": {
    "iosxe": {
      "doc": "Get the current operational state of the interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_oper_yang_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1287"
    }
  },
  "get_interface_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface name\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L223"
    }
  },
  "get_interface_output_pps": {
    "junos": {
      "doc": " Retrieve output pps value from interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n\n        Returns:\n            Output pps value\n    ",
      "module_name": "monitor.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/get.py#L22"
    }
  },
  "get_interface_packet_counter": {
    "iosxe": {
      "doc": " Returns packet counters for given interface\n\n        Args:\n            device ('obj') : Device object\n            interface ('str'): Interface name\n            output ('dict'): Parsed output from 'show interfaces' command\n\n        Returns\n            counter: number of output packet\n\n            if any error or no counter_field was found return None\n            - to separate 0 packet and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L643"
    }
  },
  "get_interface_packet_input_rate": {
    "iosxe": {
      "doc": " Get rate from in_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_input_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L909"
    }
  },
  "get_interface_packet_output_rate": {
    "iosxe": {
      "doc": " Get rate from out_pkts by taking average across the defined seconds\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            seconds ('int'): Seconds to wait between show commands\n            field ('str'): Used for get_interface_packet_input_rate\n\n        Returns:\n            Traffic rate\n\n            if any error return None\n            - to separate rate 0.0 and None value\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_packet_output_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L820"
    }
  },
  "get_interface_port_channel_members": {
    "iosxe": {
      "doc": " Get interface members\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n\n        Returns:\n            interface members\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_port_channel_members",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L978"
    }
  },
  "get_interface_qlimit_bytes": {
    "iosxe": {
      "doc": " Get interface qlimit in bytes\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n            qlimit_bytes (`int`): Interface qlimit_bytes\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_qlimit_bytes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L282"
    }
  },
  "get_interface_queue_counters_dropped": {
    "junos": {
      "doc": " Get queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_dropped",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L344"
    }
  },
  "get_interface_queue_counters_queued_packets": {
    "junos": {
      "doc": " Get queued packets based on queue number\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_queued_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L490"
    }
  },
  "get_interface_queue_counters_trans_packets": {
    "junos": {
      "doc": " Get queue counters transmitter based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            extensive ('str'): Flag to check extensive in command\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_trans_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L451"
    }
  },
  "get_interface_queue_counters_transmitted_byte_rate": {
    "junos": {
      "doc": " Get queue counters transmitted byte rate based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_number ('str'): Queue number to check\n            \n        Returns:\n            total_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_counters_transmitted_byte_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L583"
    }
  },
  "get_interface_queue_red_dropped_packets": {
    "junos": {
      "doc": " Get red-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            red_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_red_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L319"
    }
  },
  "get_interface_queue_rl_dropped_packets": {
    "junos": {
      "doc": " Get rl-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            rl_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_rl_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L295"
    }
  },
  "get_interface_queue_tail_dropped_packets": {
    "junos": {
      "doc": " Get tail-dropped packets based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            tail_drop_packets: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_queue_tail_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L271"
    }
  },
  "get_interface_running_config": {
    "iosxe": {
      "doc": " Get interface configuration from show running-config interface {interface}\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n\n        Return:\n            Dictionary with running interface configuration\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L615"
    }
  },
  "get_interface_secondary_ipv4_address": {
    "iosxe": {
      "doc": " Get the secondary ip address for an interface on target device\n\n        Args:\n            interface('string'): interface to get address for\n            device ('obj'): Device Object\n\n        Returns:\n            None\n            String with interface secondary ip address\n\n        Raises:\n            SubCommandFailure\n            Exception\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_secondary_ipv4_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1050"
    }
  },
  "get_interface_snmp_index": {
    "junos": {
      "doc": " Get local index number\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            total_drop_packets: Output error drops\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_snmp_index",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L918"
    }
  },
  "get_interface_speed": {
    "junos": {
      "doc": "Get speed of an interface\n\n    Args:\n        device (obj): device object\n        interface (str): interface name\n        bit_size (str): desired return size (gbps/mbps/kbps)\n    \n    Returns:\n        Device speed or None\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L159"
    }
  },
  "get_interface_statistics_output_error_drops": {
    "junos": {
      "doc": " Get output error drops based on interface statistics\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            \n        Returns:\n            output_drops: Output error drops\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_statistics_output_error_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L247"
    }
  },
  "get_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Returns access_vlan id for interface on device\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n\n        Returns:\n            str access_vlan\n\n        Raise:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L930"
    }
  },
  "get_interface_traffic_input_pps": {
    "junos": {
      "doc": "Get interface input pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_input_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L555"
    }
  },
  "get_interface_traffic_output_pps": {
    "junos": {
      "doc": "Get interface output pps\n\n    Args:\n        device (object): Device object\n        interface (str): Interface to check\n\n    Returns:\n        str: Interface pps\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L528"
    }
  },
  "get_interface_traffic_stats": {
    "junos": {
      "doc": "Get the traffic stats of given interface via 'show interfaces {interface} extensive'\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            stat_name (`str`): stat name under `traffic-statistics`\n            extensive (`bool`): flag to use `show interface {interface} extensive`\n\n        Returns:\n            int (value of stat_name)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_traffic_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L699"
    }
  },
  "get_interface_type": {
    "iosxe": {
      "doc": "Get type of an interface\n\n    Args:\n        device ('obj'): device object\n        interface ('str'): Interface name\n\n    Returns:\n        Interface type string\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1250"
    }
  },
  "get_interface_type_from_yaml": {
    "com": {
      "doc": " Get interface type from the testbed yaml file\n\n        To be used within datafile\n\n        Args:\n            local (`str`): local device to get interface from\n            remote (`str`): Remote device where the interface is connected to\n            value (`str`): Either link name or a number and a link will be randomly chosen\n            testbed_topology (`dict`): `testbed.topology` or `testbed`\n\n        Raise:\n            N/A\n        Returns:\n            Interface type or `None` if not found\n\n        Example:\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(uut,helper,0,%{testbed.topology})}\"\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(uut,helper,r1_r4_1,%{testbed.topology})}\"\n\n            interface_type: \"%CALLABLE{genie.libs.sdk.apis.utils.get_interface_type_from_yaml(alias,helper,0,%{testbed})}\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_type_from_yaml",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3255"
    }
  },
  "get_interface_with_mask": {
    "iosxe": {
      "doc": " Gets interface:ip_address with specific mask\n\n        Args:\n            device('obj'): device to use\n            netmask('str'): netmask the interface must have\n            address_family('str'): address_family to search under\n\n        Returns:\n            (None, None)\n            (interface('str'), ip_address('str'))\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_with_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L423"
    }
  },
  "get_interface_with_up_state": {
    "iosxe": {
      "doc": " Get a interface which is up\n\n        Args:\n            device ('obj'): Device object\n            interface_type ('str'): Interface type\n            virtual_interface ('bool'): Flag for logical interface\n                               if is None, return physical or logical\n                               if is True, return only logical\n                               if is False, return only physical\n        Returns:\n            None\n            interface name ('str')\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_with_up_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L456"
    }
  },
  "get_interface_without_service_policy": {
    "iosxe": {
      "doc": " Find a interface without service-policy\n\n        Args:\n            device (`obj`): Device object\n            interface_type (`str`): Interface type\n            virtual_interface ('bool'): flag for matching virtual interfaces\n\n        Returns:\n            None\n            interface (`str`): Interface name\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interface_without_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L245"
    }
  },
  "get_interfaces": {
    "com": {
      "doc": " Get current or opposite interface from topology section of testbed file\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): link name\n            opposite ('bool'): find opposite device interface\n            phy ('bool'): find only physical interface\n            num ('int'): num of interface to return\n\n        Returns:\n            topology dictionary\n\n        Raises:\n            None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1933"
    }
  },
  "get_interfaces_description": {
    "junos": {
      "doc": "Get the description of given interface via 'show interfaces descriptions {interface}'\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name, default: None\n\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L659"
    }
  },
  "get_interfaces_status": {
    "iosxe": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1207"
    },
    "iosxr": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L176"
    },
    "nxos": {
      "doc": "Get up/down status of all interfaces\n\n    Args:\n        device (obj): device object\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/interface/get.py#L88"
    }
  },
  "get_interfaces_terse_columns": {
    "junos": {
      "doc": "Get the description of given interface via 'show interfaces descriptions {interface}'\n        Args:\n            device ('obj'): Device object\n            expected_columns('str'): Expected columns based on parser table\n                Example:  columns: ['interface', 'admin_state', 'enabled', 'link_state', 'oper_status']\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_interfaces_terse_columns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L831"
    }
  },
  "get_ip_address": {
    "com": {
      "doc": "Get ip address of controller associated to AP\n    Args:\n        device (obj): Device object\n    Returns:\n        IP address\n        ",
      "module_name": "cheetah.ap.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/get.py#L75"
    }
  },
  "get_ip_bgp_neighbors": {
    "iosxe": {
      "doc": " Get Ip Bgp neighbors from the following commands:\n            'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}',\n            'show ip bgp {address_family} vrf {vrf} neighbors',\n            'show ip bgp {address_family} neighbors {neighbor}',\n            'show ip bgp {address_family} neighbors',\n            'show ip bgp {address_family} all neighbors {route}'\n            'show ip bgp neighbors {neighbor}',\n            'show ip bgp neighbors'\n\n        Args:\n            device ('obj')         : Device object \n            address_family ('str') : Address family\n            vrf ('str')            : Vrf name\n            neighbor ('neighbor')  : Neighbor address\n        Returns:\n            Dictionary\n        Raises:\n            None\n        \n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L929"
    }
  },
  "get_ip_bgp_route": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            routes Dictionary\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L425"
    }
  },
  "get_ip_bgp_route_nexthop_color": {
    "iosxe": {
      "doc": "Execute 'show ip bgp {address_family} vrf {vrf} {route}' and retrieve routes\n       return list of nexthop and color community\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            route ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            best_path (`bool`): only best path returned\n        Returns:\n            list of nexthop and color community\n            ex.) [['192.168.1.1', '100'], ['192.168.2.2', '200']]\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_route_nexthop_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L494"
    }
  },
  "get_ip_bgp_summary": {
    "iosxe": {
      "doc": "Execute from the following commands:\n        'show ip bgp {address_family} summary',\n        'show ip bgp {address_family} vrf {vrf} summary',\n        'show ip bgp {address_family} rd {rd} summary',\n        'show ip bgp all summary',\n        'show ip bgp {address_family} all summary'\n        and retrieve neighbor address and AS number\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary \n        Returns:\n            Dictionary\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_bgp_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L172"
    }
  },
  "get_ip_mfib_hw_pkts_per_sec": {
    "iosxe": {
      "doc": "Gets hw packet counters and others for particular mcast-group \n       along with source ip(if given) in             \n       'show ip mfib multicast_group source_ip' - if no vrf, no ip_family\n       'show ip mfib vrf <vrf> multicast_group source_ip '- if vrf given and no ip_family\n       'show ipv6 mfib multicast_group source_ip' - if ip_family given and no vrf\n       'show ipv6 mfib vrf <vrf> multicast_group source_ip' - if both vrf and ip_family given\n           ex:\n            (1.1.1.1,225.1.1.1) Flags: HW\n            SW Forwarding: 0/0/0/0, Other: 11/0/11\n            HW Forwarding:   6225553/705/115/634, Other: 0/0/0\n\n    Args:\n            device ('obj'): Device object\n            multicast_group (`str`): multicast group to be verified\n            source_ip ('str'): source_ip to be verified\n            ip_family ('str'): either ip or ipv6   \n            vrf ('str', optional): vrf        \n    Returns:\n            result(`str`): verified result\n    Raises:\n            error incase of incorrect hw field\n    ",
      "module_name": "multicast.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_mfib_hw_pkts_per_sec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/get.py#L12"
    }
  },
  "get_ip_packet_scapy": {
    "iosxe": {
      "doc": "\n    returns IP layer from packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            ip packet\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_packet_scapy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1333"
    }
  },
  "get_ip_prefer_mode": {
    "com": {
      "doc": "Get ip prefer mode \n    Args:\n        device (obj): Device object\n    Returns:\n        ip prefer mode in string\n        ",
      "module_name": "cheetah.ap.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_prefer_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/get.py#L59"
    }
  },
  "get_ip_theft_syslogs": {
    "iosxe": {
      "doc": "Gets IP Theft syslog\n\n    Args:\n        device (obj): device object\n    Returns:\n        Dictionary\n        None\n    Raises:\n        None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ip_theft_syslogs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L168"
    }
  },
  "get_ipv6_connected_routes": {
    "iosxe": {
      "doc": "\n        Gets installed local routes from \"show ipv6 route\" on a device\n\n        Args:\n            device(): Device used to run commands\n\n        Returns:\n            Routes: list of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_connected_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L590"
    }
  },
  "get_ipv6_interface_ip_address": {
    "iosxe": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address Default: False\n            as_list ('bool'): If True, return all IP addresses as a list.\n                              Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n            ip_address ('list'): If as_list=True specified, all found IP\n                                 addresses are returned as a list (including\n                                 link local addresses). If no IP addresses are\n                                 found, None is returned.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1113"
    },
    "iosxr": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address. Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/get.py#L99"
    },
    "junos": {
      "doc": " Get interface ip address from device\n\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n            link_local ('bool'): Link local address. Default: False\n        Returns:\n            None\n            ip_address ('str'): If has multiple addresses\n                                will return the first one.\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/get.py#L752"
    }
  },
  "get_ipv6_interface_ip_and_mask": {
    "iosxe": {
      "doc": " Get interface ipv6 address and mask from device\n\n        Args:\n            interface('str'): Interface to get address\n            device('obj'): Device object\n        \n        Returns:\n            None\n            ipv6_address ('str'): If has multiple address will return the first one\n            prefix_length ('int'): prefix length of the returned ipv6_address\n    \n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_ip_and_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L712"
    }
  },
  "get_ipv6_interface_link_local_address": {
    "iosxe": {
      "doc": " Get local link address\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface value\n\n        Returns:\n            link-local address (`str`): Link-Local address\n    ",
      "module_name": "ipv6.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_interface_link_local_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/get.py#L16"
    }
  },
  "get_ipv6_intf_autocfg_address": {
    "iosxe": {
      "doc": " Gets auto configured IPv6 addresses from device\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface to get address\n        Returns:\n            None\n            ip_address ('list'): A list of valid ip addresses with its subnet (i.e. 2001::/64)\n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_intf_autocfg_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L636"
    }
  },
  "get_ipv6_intf_tentative_address": {
    "iosxe": {
      "doc": " Get interface ip addresses from device that are 'tentative'\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n        Returns:\n            None\n            ip_address ('list'): A list of tentative ip addresses\n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_intf_tentative_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L533"
    }
  },
  "get_ipv6_intf_valid_ip_addresses": {
    "iosxe": {
      "doc": " Get interface ip addresses from device that are 'valid'\n        Args:\n            interface('str'): Interface to get address\n            device ('obj'): Device object\n        Returns:\n            None\n            ip_address ('list'): A list of valid ip addresses\n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_intf_valid_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L466"
    }
  },
  "get_ipv6_linklocal_addr_from_ipv4": {
    "iosxe": {
      "doc": "\n    Generates ipv6 linklocal address from ipv4 address.\n\n    Args:\n        ipv4_addr ('str'): Address used to create linklocal address\n        isatap ('bool'): Whether linklocal address is ISATAP or not\n\n    Returns ipv6 linklocal address string.\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_linklocal_addr_from_ipv4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L489"
    }
  },
  "get_ipv6_local_routes": {
    "iosxe": {
      "doc": "\n        Gets installed local routes from \"show ipv6 route\" on a device\n\n        Args:\n            device(): Device used to run commands\n\n        Returns:\n            Routes: list of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_local_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L567"
    }
  },
  "get_ipv6_nd_raguard_policy_configurations": {
    "iosxe": {
      "doc": " Get ipv6 nd raguard policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_nd_raguard_policy_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L79"
    }
  },
  "get_ipv6_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Gets the ipv6 ospf neighbors address' in state\n\n        Args:\n            device ('obj'): Device to use\n            state ('str'): full/sub-string of the state you want\n                           search for\n\n        Returns:\n            ('list'): of ospf neighbor address' in specified state\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L902"
    }
  },
  "get_ipv6_routes": {
    "iosxe": {
      "doc": "\n        Get routes from 'show ipv6 route' on a device\n\n        Args:\n            device(): Device used to run commands\n        \n        Returns:\n            Routes: List of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L446"
    }
  },
  "get_ipv6_source_guard_policy_configurations": {
    "iosxe": {
      "doc": " Get ipv6 source guard policy configurations\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n        Returns:\n            Dictionary\n            None\n        Raises:\n            None\n    ",
      "module_name": "sisf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_source_guard_policy_configurations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/get.py#L99"
    }
  },
  "get_ipv6_static_routes": {
    "iosxe": {
      "doc": "\n        Gets installed static routes from \"show ipv6 route\" on a device\n\n        Args:\n            device(): Device used to run commands\n\n        Returns:\n            Routes: list of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ipv6_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L613"
    }
  },
  "get_issu_free_space_on_disk": {
    "iosxe": {
      "doc": " Get free space information on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return:            \n            Integer: Free space on disk in bytes\n        Raises: \n            SubCommandFailure: Failed getting free space info on device\n    ",
      "module_name": "issu.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_issu_free_space_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L39"
    }
  },
  "get_issu_space_info_on_disk": {
    "iosxe": {
      "doc": " Get free and total space on disk\n        Args:\n            device ('obj'): Device object\n            disk ('str'): Disk name\n            output ('str'): Output from command 'dir {disk}'\n        Return: \n            list: \n                bytes_total ('int'): Total space on disk in bytes\n                bytes_free ('int'): Free space on disk in bytes\n        Raise:\n            SubCommandFailure: Failed executing dir command\n    ",
      "module_name": "issu.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_issu_space_info_on_disk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/get.py#L6"
    }
  },
  "get_jinja_template": {
    "com": {
      "doc": " Gets the jinja template specified\n\n        Args:\n            templates_dir ('str'): Templates directory\n            template_name ('str'): Template name\n            trim_blocks (`bool`): Whether to trim newlines or not. Defaults to True\n            lstrip_blocks (`bool`): Whether to trim leading whitespace or not. Defaults to True\n            kwargs (`dict`): Key value pairs\n\n        Returns:\n            ('obj') jinja template\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "jinja.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L9"
    }
  },
  "get_kpi_value_in_show_kpi_report_id": {
    "iosxe": {
      "doc": " get the kpi value based on report id and kpi name from show\n        Args:\n            device (`obj`): Device object\n            report_id   ('int'): report id\n            kpi_name  ('str') : kpi_name\n        Returns:\n            kpi value (`list`): kpi value list\n    ",
      "module_name": "telemetry.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_kpi_value_in_show_kpi_report_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/get.py#L75"
    }
  },
  "get_l2route_mac_route_flags": {
    "iosxe": {
      "doc": " Gets route flags along with mac in \"show l2route evpn default-gateway \n        detail\"\n\n        Args:\n            device ('obj'): Device object\n            mac_address ('str'): mac address (optional)\n        Returns:\n            dict: Contains mac address as key and flag as value\n            Ex: {\n              'ac4a.67a4.7154': 'BInt()Dgr'\n            }\n            or {}\n        Raises:\n            None\n\n    ",
      "module_name": "l2route.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_l2route_mac_route_flags",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2route/get.py#L16"
    }
  },
  "get_l2vpn_interface_under_service_instance": {
    "iosxe": {
      "doc": " Gets interface under service instance 'service_instance_id' using command\n        'show ethernet service instance'\n\n        Args:\n            device ('obj'): Device object\n            service_instance_id ('int'): service instance id\n    \n        Returns:\n            interface\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "l2vpn.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_l2vpn_interface_under_service_instance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L18"
    }
  },
  "get_l2vpn_storm_control_discard_packet_count": {
    "iosxe": {
      "doc": "Get current storm control discard packet count\n        \n            Args:\n                device ('Obj'): Device object\n                service_instance_id ('int'): L2VPN service instance id\n                interface ('str'): Interface name\n\n            Returns:\n                None\n\n            Raises:\n                None\n                \n        ",
      "module_name": "l2vpn.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_l2vpn_storm_control_discard_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/get.py#L48"
    }
  },
  "get_lacp_intf_count": {
    "iosxe": {
      "doc": " This API parse 'show lacp internal' command and return number of member interfaces\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n        Returns:\n            Returns interface count\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_intf_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L73"
    }
  },
  "get_lacp_intf_list": {
    "iosxe": {
      "doc": " This API parse 'show lacp internal' command and return interface list\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n        Returns:\n            Returns interface list\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_intf_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L102"
    }
  },
  "get_lacp_member": {
    "iosxe": {
      "doc": " This API parse's 'show lacp internal/neighbor' commands and return requested member\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel name\n            count (`int`): Required interface count\n            member (`str`): Specify one of them to search \u2018interface\u2019, \u2018port_num\u2019, \u2018oper_key\u2019 or \u2018partner_id\u2019\n                             ex.) member=\u2018interface\u2019\n            intf_list(`list'): List of interfaces\n            internal (`bool`): True = internal command and False = neighbor command\n        Returns:\n            If success, returns member value or None\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_member",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L9"
    }
  },
  "get_lacp_stats": {
    "junos": {
      "doc": "Get LACP traffic stats of given interface via 'show lacp statistics {interface}'\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Lag interface name\n            link (`str`): link name of Lag interface\n            stat_names (`list`): list of link stat names\n\n        Returns:\n            list of stat values\n\n        Raises:\n            None\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/get.py#L12"
    }
  },
  "get_lacp_sys_id": {
    "iosxe": {
      "doc": " This API parse's 'show lacp sys-id' command and return sys id\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Returns system id\n    ",
      "module_name": "lacp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lacp_sys_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/get.py#L56"
    }
  },
  "get_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label. Defaults to input\n        local_label (str): Database local label. Defaults to None\n\n    Returns:\n        ldp_label ('str'): Will return one value\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L19"
    }
  },
  "get_ldp_database_session_label": {
    "junos": {
      "doc": " Gets ldp prefix\n\n    Args:\n        device (obj): Device object\n        address (str): IP address\n        expected_ldp_prefix (str): Expected LDP prefix value\n        expected_ldp_database_type (str): Expected LDP database type. Default is 'Input label database'\n    \n    Returns:\n        (str): database session label\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_database_session_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L63"
    }
  },
  "get_ldp_session_state_count": {
    "junos": {
      "doc": " Get show ldp session count\n\n    Args:\n        device (obj): Device object\n        expected_session_state (str): Expected session state. Defaults to 'Operational'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ldp_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/get.py#L103"
    }
  },
  "get_lisp_session_state": {
    "iosxe": {
      "cat9k": {
        "doc": "Get lisp session state\n    Args:\n        device (obj): Device object\n        peer_ip(str): Peer IP\n    Returns:\n        Peer state (str) if success else empty string\n    Raises:\n        N/A\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_lisp_session_state",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L79"
      }
    }
  },
  "get_list_items": {
    "com": {
      "doc": " Get one or any of list items\n        Args:\n            name (`list`): list data\n            index (`int`): number of index for list to get\n            index_end (`int`): end number of index for list to get\n            to_num (`bool`): flag to change value from str to number\n            to_str (`bool`): flag to change value from number to str\n        Raise:\n            Exception\n        Returns:\n            ret_item (`any`): one or any of list items\n\n        Example:\n\n        >>> dev.api.get_list_items([1,2,3], 0)\n        1\n\n        >>> dev.api.get_list_items([[1,4],2,3], 0)\n        [1, 4]\n\n        >>> dev.api.get_list_items([[1,4],2,3], 1, to_str=True)\n        '2'\n\n        >>> dev.api.get_list_items([[1,4],2,'3'], 2, to_str=True)\n        '3'\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 2, to_num=True)\n        3\n\n        >>> dev.api.get_list_items([[1,4], 2, '3'], 1, 2)\n        [2, '3']\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_list_items",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1751"
    }
  },
  "get_list_length": {
    "com": {
      "doc": "\"\n    Returns length of target_list.\n\n    Args:\n        target_list (`list`): target list\n\n    Raise:\n        N/A\n\n    Return:\n        length of target list(int)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_list_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4084"
    }
  },
  "get_lldp_neighbors_info": {
    "ios": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/get.py#L11"
    },
    "iosxe": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/get.py#L10"
    },
    "iosxr": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/get.py#L11"
    },
    "nxos": {
      "doc": " Get details about lldp neighbors from device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            Dict with lldp info\n    ",
      "module_name": "lldp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_lldp_neighbors_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/get.py#L11"
    }
  },
  "get_local_ip": {
    "com": {
      "doc": " Get the local IP address that is used to connect to devices.\n\n    Looks up the IP address via the spawn process ID.\n\n    Args:\n        device (Device): device object\n        alias (str): alias name of the connection\n\n    Returns:\n        IP address (str)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_local_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4017"
    }
  },
  "get_log_message_time": {
    "junos": {
      "doc": " Gets the timestamp of a log message\n\n    Args:\n        device (obj): Device object\n        message (str): Message\n        file_name (str): File to check. Defaults to 'messages'\n\n    Returns:\n        (datetime): Timestamp object\n    ",
      "module_name": "log.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_log_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/get.py#L15"
    }
  },
  "get_logging_logs": {
    "iosxe": {
      "doc": " Returns list of entries in the logging system\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            list of entries from logging system\n        Raises:\n            None\n    ",
      "module_name": "logging.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_logging_logs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/get.py#L15"
    }
  },
  "get_longest_server_address": {
    "com": {
      "doc": "\n    get the longest server address from the devices's testbed\n    Args:\n        device ('obj'): Device object\n    Returns:\n        the longest address in the testbed\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_longest_server_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1352"
    }
  },
  "get_mac_aging_timer": {
    "iosxe": {
      "doc": " Get Aging-Timer from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            aging_time (`int`): aging-time in second\n            None \n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mac_aging_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L16"
    }
  },
  "get_mac_table": {
    "iosxe": {
      "doc": " Get mac table from bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            mac_table (`dict`): mac table dict\n            {}: When nothing has been found\n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mac_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L38"
    }
  },
  "get_mac_table_from_address_family": {
    "iosxe": {
      "doc": " Gets mac table from address_family\n\n        Args:\n            device (`obj`): device object\n            address_family ('str'): address_family\n        Return:\n            mac_table (`dict`): mac table dict\n            {}: When nothing has been found\n        Raises:\n            None\n    ",
      "module_name": "mac.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mac_table_from_address_family",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/get.py#L60"
    }
  },
  "get_matching_line_platform_software": {
    "iosxe": {
      "cat9k": {
        "doc": "Get matching lines from show platform software process\n    Args:\n        device (obj): Device object\n        process(str): Name of process\n        \n    Returns:\n        matching lines (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_matching_line_platform_software",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L176"
      }
    }
  },
  "get_matching_line_processes_platform": {
    "iosxe": {
      "cat9k": {
        "doc": "Get matching lines from show processes platform\n    Args:\n        device (obj): Device object\n        process(str): Name of process\n        \n    Returns:\n        matching lines (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_matching_line_processes_platform",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L153"
      }
    }
  },
  "get_md5_hash_of_file": {
    "ios": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 180.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L514"
    },
    "iosxe": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 180.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L519"
    },
    "iosxr": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L76"
    },
    "linux": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L104"
    },
    "nxos": {
      "doc": " Return the MD5 hash of a given file.\n\n    Args:\n        device (obj): Device to execute on\n        file (str): File to calculate the MD5 on\n        timeout (int, optional): Max time in seconds allowed for calculation.\n            Defaults to 60.\n\n    Returns:\n        MD5 hash (str), or None if something went wrong\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_md5_hash_of_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L123"
    }
  },
  "get_mgmt_interface": {
    "iosxe": {
      "doc": " Get the name of the management interface.\n\n    if the mgmt_ip is provided, will use that for the lookup. If not, will\n    call the get_mgmt_ip API to get the IP.\n\n    Args:\n        mgmt_ip: (str) IP address of the management interface (optional)\n\n    Returns:\n        String with interface name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L677"
    },
    "iosxr": {
      "doc": " Get the name of the management interface.\n\n    if the mgmt_ip is provided, will use that for the lookup. If not, will\n    call the get_mgmt_ip API to get the IP.\n\n    Args:\n        mgmt_ip: (str) IP address of the management interface (optional)\n\n    Returns:\n        String with interface name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L328"
    },
    "nxos": {
      "doc": " Get the management interface name.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L253"
    }
  },
  "get_mgmt_ip": {
    "apic": {
      "doc": " Get the management IP address of the device.\n\n    Returns:\n        IP address string or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L312"
    },
    "iosxe": {
      "doc": " Get the management IP address of the device.\n\n    Returns:\n        IP address string or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L630"
    }
  },
  "get_mgmt_ip_and_mgmt_src_ip_addresses": {
    "iosxe": {
      "doc": " Get the management IP address and management source addresses.\n\n    Returns:\n        Tuple of mgmt_ip and list of IP address (mgmt_ip, [mgmt_src_addrs]) or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L648"
    },
    "iosxr": {
      "c8000": {
        "doc": " Get the management IP address and management source addresses.\n\n    Returns:\n        Tuple of mgmt_ip and list of IP address (mgmt_ip, [mgmt_src_addrs]) or None\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/c8000/utils.py#L25"
      },
      "doc": " Get the management IP address and management source addresses.\n\n    Returns:\n        Tuple of mgmt_ip and list of IP address (mgmt_ip, [mgmt_src_addrs]) or None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L305"
    },
    "nxos": {
      "doc": " Get the management IP and source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_ip_and_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L228"
    }
  },
  "get_mgmt_src_ip_addresses": {
    "apic": {
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/utils.py#L291"
    },
    "iosxe": {
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L614"
    },
    "iosxr": {
      "c8000": {
        "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "get_mgmt_src_ip_addresses",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/c8000/utils.py#L7"
      },
      "doc": " Get the source IP addresses connected via SSH or telnet to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L289"
    },
    "nxos": {
      "aci": {
        "doc": " Get the source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
        "module_name": "utils",
        "package": "genie.libs.sdk.apis",
        "uid": "get_mgmt_src_ip_addresses",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/utils.py#L330"
      },
      "doc": " Get the source IP addresses connected via SSH to the device.\n\n    Returns:\n        List of IP addresses or []\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mgmt_src_ip_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L207"
    }
  },
  "get_module_info": {
    "iosxr": {
      "doc": " Get a module's information\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            key (`str`): Key name\n        Returns:\n            field (`str`): Field value\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_module_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L17"
    }
  },
  "get_mpls_forwarding_table_key_value_pairs": {
    "iosxe": {
      "doc": " Gets all key:value pairs from the mpls forwarding table\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_forwarding_table_key_value_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L207"
    }
  },
  "get_mpls_interface_ldp_configured": {
    "iosxe": {
      "doc": " Get interfaces which have ldp configured from 'show run'\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            interface address\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_interface_ldp_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L113"
    }
  },
  "get_mpls_label_stack": {
    "iosxe": {
      "doc": " Get mpls Label Stack\n        using 'show mpls forwarding-table labels {label} detail'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n            prefix ('str'): Prefix value\n        Returns:\n            stack ('list'): Label stack\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L51"
    }
  },
  "get_mpls_ldp_peer_state": {
    "iosxe": {
      "doc": " Gets the ldp peer state under specified interface\n\n        Args:\n            device ('obj'): device to run on\n            interface ('str'): interface to search under\n        Returns:\n            ldp peer state ('str')\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_ldp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L160"
    }
  },
  "get_mpls_ldp_session_count": {
    "iosxe": {
      "doc": " Get mpls ldp seesion count\n\n        Args:\n            device(`str`): Device str\n        Returns:\n            int: session count\n        Raises:\n            None\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_ldp_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L134"
    }
  },
  "get_mpls_out_label": {
    "junos": {
      "doc": " Get out label information from mpls\n\n    Args:\n        device (obj): device object\n        name (str): lsp name\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_out_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L17"
    }
  },
  "get_mpls_outgoing_label": {
    "iosxe": {
      "doc": " Get mpls outgoing label \n        using 'show mpls forwarding-table labels {label}'\n\n        Args:\n            device ('obj'): Device object\n            label ('str'): Local label\n        Returns:\n            out_label ('str'): Outgoing label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/get.py#L24"
    }
  },
  "get_mpls_record_routes": {
    "junos": {
      "doc": " Get mpls record routes\n\n    Args:\n        device (obj): device object\n        name (str): mpls name to check\n        purge_self (bool, optional): Purge <self> from record routes? Defaults to True.\n        \n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "mpls.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_mpls_record_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/get.py#L41"
    }
  },
  "get_neighbor_address": {
    "com": {
      "doc": "Get the neighbor address in a subnet /30\n\n        Args:\n            ip (`str`): Ip address to get the neighbor for\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L312"
    }
  },
  "get_neighbor_count": {
    "iosxe": {
      "doc": " verify the neighbor count\n\n        Args:\n            device('obj'): device to configure on\n            protocol('str'): Protocol name\n            neighbor'str'): neighbor (or) neighbors\n            value ('str'): grep the count using specific value\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "protocols.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L86"
    }
  },
  "get_neighbor_interface_and_device": {
    "iosxe": {
      "doc": " Get neighbor interface and device from topology\n\n        Args:\n            device (`obj`): Device object\n            interface_alias (`str`): interface alias\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_interface_and_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L95"
    }
  },
  "get_neighbor_interface_and_device_by_link": {
    "iosxe": {
      "doc": " Get neighbor interface and device by link\n\n        Args:\n            device (`obj`): Device object\n            link_name (`str`): link name\n\n        Returns:\n            Tuple: (str: neighbor interface, obj: neighbor device)\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighbor_interface_and_device_by_link",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L125"
    }
  },
  "get_neighboring_device_interface": {
    "iosxe": {
      "doc": " Get neighbor device interface\n\n        Args:\n            device ('obj'): Device object\n            testbed ('obj'): Testbed object\n            interface ('str'): interface name\n\n        Returns:\n            Dictionary: topology\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_neighboring_device_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L674"
    }
  },
  "get_next_hops": {
    "iosxe": {
      "doc": "\n    Gets the next hops from 'show ip route' parsed output.\n\n    Args:\n        device (, optional): Device used to run commands\n        route ('str'): Route to check for next hops\n        output (dict, optional): 'show ip route' parsed dict output\n\n    Returns tuple of next hop addresses; returns None if dne\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_next_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L413"
    }
  },
  "get_node_list": {
    "virl": {
      "doc": "Get node list\n\n        Args:\n            device (`obj`): Device object\n            simulation_name: simulation name\n\n        Returns:\n            list: node list\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_node_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L70"
    }
  },
  "get_node_summary": {
    "virl": {
      "doc": "Get node summary\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n            dict: node summary info\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_node_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L42"
    }
  },
  "get_ntp_md5_peer": {
    "iosxe": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L110"
    },
    "iosxr": {
      "doc": " Get a ntp peer that has established session using MD5\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Default vrf name\n            mode (`str`): Default mode\n        Returns:\n            peer (`str`): Peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_md5_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L101"
    }
  },
  "get_ntp_outgoing_interface": {
    "iosxe": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L59"
    },
    "iosxr": {
      "doc": " Get the interface which is used to communicate with NTP system peer\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L55"
    }
  },
  "get_ntp_packet": {
    "iosxe": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L213"
    },
    "iosxr": {
      "doc": " Find ntp packet with src ip and dest ip in pcap file\n\n        Args:\n            packets (`obj`): pcap object\n            ip_address_source (`str`): source ip\n            ip_address_destination (`str`): destination ip\n        Returns:\n            pkt (`obj`): verified ntp packet\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L178"
    }
  },
  "get_ntp_peer_information": {
    "junos": {
      "doc": " Get ntp peer information\n\n        Args:\n            device (`obj`): Device object\n            expected_mode(`str`, Optional): Expected ntp mode. Defaults to None.\n        Returns:\n            result (`list`): List of peers\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_peer_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/get.py#L11"
    }
  },
  "get_ntp_servers": {
    "iosxe": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L25"
    },
    "iosxr": {
      "doc": " Get configured ntp servers\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_servers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L23"
    }
  },
  "get_ntp_source_interface_ip": {
    "iosxe": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L43"
    },
    "iosxr": {
      "doc": " Get source interface IP address used for NTP synchronization \n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            ip (`str`): IP address of the interface\n            interface (`str`): Interface name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_source_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L39"
    }
  },
  "get_ntp_system_config_source_address": {
    "junos": {
      "doc": " Get ntp system configuration source address\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`str`):  ntp system configuration source address\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_config_source_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/get.py#L42"
    }
  },
  "get_ntp_system_peer": {
    "iosxe": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L153"
    },
    "iosxr": {
      "doc": " Get a ntp system peer from the given peer list\n\n        Args:\n            device (`obj`): Device object\n            peer_list (`list`): Peer list\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            sys_peer (`str`): System peer ip\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/get.py#L142"
    }
  },
  "get_ntp_system_peer_vrf": {
    "iosxe": {
      "doc": " Get a ntp system peer's vrf name\n\n        Args:\n            device (`obj`): Device object\n            system_peer (`str`): System peer ip\n        Returns:\n            vrf (`str`): vrf name\n    ",
      "module_name": "ntp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ntp_system_peer_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/get.py#L191"
    }
  },
  "get_number_of_interfaces": {
    "iosxe": {
      "doc": " Gets the device number of interfaces\n        Args:\n            device (`obj`): Device object\n        Returns:\n            number of interfaces\n            False if None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_number_of_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L803"
    }
  },
  "get_operation_state": {
    "com": {
      "doc": "Get operation state \n    Args:\n        device (obj): Device object\n    Returns:\n        operation state in string \n        ",
      "module_name": "cheetah.ap.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_operation_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/get.py#L27"
    }
  },
  "get_ospf3_neighbor_count": {
    "junos": {
      "doc": " Get ospf3 neighbors count\n\n    Args:\n        device (`obj`): Device object\n        expected_state (`str`): Expected neighbor state. Defaults to None\n        output (`str`): output of show ospf neighbor. Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (`int`, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf3.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf3_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/get.py#L33"
    }
  },
  "get_ospf3_neighbors_instance_state_count": {
    "junos": {
      "doc": " Get ospf3 neighbors instance state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Full'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf3.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf3_neighbors_instance_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/get.py#L14"
    }
  },
  "get_ospf_area_of_interface": {
    "iosxe": {
      "doc": " Get area value of an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            vrf ('str'): VRF name\n            process_id ('str'): Process id\n            address_family ('str'): Address family\n        Returns:\n            area ('str'): If area found\n            None: If area not found\n        Raises:\n            ValueError: Command found more than one area\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_area_of_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L181"
    }
  },
  "get_ospf_database_checksum": {
    "junos": {
      "doc": " Get ospf data base checksum data in a list\n\n    Args:\n        device (obj): Device object\n        lsa_type (str, optional): LSA type to check for. Defaults to None.\n\n    Returns:\n        list: List of checksums\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_database_checksum",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L93"
    }
  },
  "get_ospf_global_block_range": {
    "iosxe": {
      "doc": " Get global block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Global range minimum\n                int: Global range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_global_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L577"
    }
  },
  "get_ospf_interface_affinity_bits": {
    "iosxe": {
      "doc": " Get affinity bits value of an ospf interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            bits ('str'): Affinity bits\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interface_affinity_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L834"
    }
  },
  "get_ospf_interface_and_area": {
    "junos": {
      "doc": " Retrieve interface for ospf on junos device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            interface and area value dictionary\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interface_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L15"
    }
  },
  "get_ospf_interfaces": {
    "iosxe": {
      "doc": " Retrieve interface for ospf using OSPF Process ID\n\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF Process ID\n\n        Returns:\n            List of interfaces\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L491"
    }
  },
  "get_ospf_local_block_range": {
    "iosxe": {
      "doc": " Get local block range from segment-routing\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Ospf process id\n            output ('dict'): Optional. Parsed output of command 'show ip ospf segment-routing'\n        Returns:\n            tuple: (\n                int: Local range minimum\n                int: Local range maximum\n            )\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_local_block_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L617"
    }
  },
  "get_ospf_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        destination_address (str): Destination address\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L179"
    }
  },
  "get_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Gets the ospf neighbors address' in state\n\n        Args:\n            device ('obj'): Device to use\n            state ('str'): full/sub-string of the state you want\n                           search for\n\n        Returns:\n            ('list'): of ospf neighbor address' in state\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L771"
    }
  },
  "get_ospf_neighbor_count": {
    "junos": {
      "doc": " Get ospf neighbors count\n\n    Args:\n        device (`obj`): Device object\n        expected_state (`str`): Expected neighbor state. Defaults to None\n        output (`str`): output of show ospf neighbor. Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (`int`, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L166"
    }
  },
  "get_ospf_neighbors": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L382"
    }
  },
  "get_ospf_neighbors_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            neighbor_interface ('str'): Neighbor interface name\n            state ('str'): full/sub-string of the state you want \n                           search for\n            in_state ('bool'): Check if state is in state provided\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L290"
    }
  },
  "get_ospf_neighbors_instance_state_count": {
    "junos": {
      "doc": " Get ospf neighbors instance state count\n\n    Args:\n        device (obj): Device object\n        expected_neighbor_state (str): Expected neighbor state. Defaults to 'Full'. \n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_instance_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L147"
    }
  },
  "get_ospf_neighbors_not_in_state": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are in {state} - show\n        ip ospf neighbor\n\n        Args:\n            device ('obj'): device to run on\n            state ('str'): full/sub-string of the state you want \n                           search against\n\n        Returns:\n            list of ospf neighbor ip_addresses\n                ex: ['192.168.0.1', '192.168.0.2', ...]\n\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_not_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L363"
    }
  },
  "get_ospf_neighbors_using_interface": {
    "iosxe": {
      "doc": " Get ospf neighbor ip_addresses that are under the specified interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n\n        Returns:\n            list of ospf neighbor ip_addresses\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_neighbors_using_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L400"
    }
  },
  "get_ospf_process_id_and_area": {
    "iosxe": {
      "doc": " Get ospf process id and area\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            address_family (`str`): Address family name\n\n        Returns:\n            None if error occured\n            tuple: ospf process number and area\n                ex.) (1234, ['0.0.0.4', '0.0.0.8'])\n                First element that is 1234 is process number\n                Second element that is ['0.0.0.4', '0.0.0.8'] is list of areas\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_and_area",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L529"
    }
  },
  "get_ospf_process_id_on_interface": {
    "iosxe": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L869"
    },
    "iosxr": {
      "doc": " Get ospf interface process id\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n\n        Returns:\n            ospf_id ('str'): ospf process id\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_id_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ospf/get.py#L20"
    }
  },
  "get_ospf_process_number": {
    "iosxe": {
      "doc": " Get ospf process number\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n            interface ('str') interface to serach under\n            output ('dict'): Output from parser otherwise will get from device\n\n        Returns:\n            None if error occured\n            str: ospf process number\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_process_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L244"
    }
  },
  "get_ospf_router_id": {
    "iosxe": {
      "doc": " Get ospf router-id - show ip protocols\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf name\n            address_family ('str'): address family\n            instance ('str'): instance value\n        Returns:\n            str: single router id\n            None: if empty\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L45"
    },
    "junos": {
      "doc": " Retrieve ospf router id\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L130"
    }
  },
  "get_ospf_router_self_originate_metric": {
    "iosxe": {
      "doc": " Get the OSPF advertised metric value\n\n        Args:\n            device ('obj'): Device object\n            vrf (`str`): Vrf value - Default\n            ospf_process_id (`int`): OSPF process ID\n\n        Returns:\n            Dictionary for metric\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_router_self_originate_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L32"
    }
  },
  "get_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRGB Base' and 'SRGB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('int'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRGB Base value, ('dict'): Output from parser)\n            if cannot filter due to lack of arguments:\n                ([{key:value},{key:value}], ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L714"
    }
  },
  "get_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Gets 'SRLB Base' and 'SRLB Range' values\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process_id\n            router_id ('str'): Which router_id entry to use\n\n        Returns:\n            if can filter down to one result:\n                (('int'): SRLB Base value, ('dict'): Output from parser)\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L657"
    }
  },
  "get_ospf_session_count": {
    "iosxe": {
      "doc": " Get ospf seesion count\n\n        Args:\n            device(`str`): Device str\n        \n        Returns:\n            integer: ospf session count\n        \n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L464"
    }
  },
  "get_ospf_spf_scheduled_time": {
    "junos": {
      "doc": "\n    Get OSPF spf scheduled time in log 'Jun 12 03:32:19.068983 OSPF SPF scheduled for topology default in 8s' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_spf_scheduled_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L42"
    }
  },
  "get_ospf_spf_start_time": {
    "junos": {
      "doc": "\n    Get OSPF spf start time in log 'Jun 12 03:40:19.068983 Starting full SPF for topology default' \n\n    Args:\n        log ('str'): log string\n\n    Returns:\n        date time ('str')  \n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_spf_start_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/get.py#L67"
    }
  },
  "get_ospf_sr_adj_sid_and_neighbor_address": {
    "iosxe": {
      "doc": " Gets adjacency sids and corresponding neighbor address.\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            neighbor_addresses ('list'): If provided, function will only return adj-sid/neighbor_address\n                                         pairs that exist in the list\n\n        Returns:\n            {(192.168.0.1, 123), (192.168.0.2, 231), ...}\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ospf_sr_adj_sid_and_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L802"
    }
  },
  "get_packet_attributes_scapy": {
    "iosxe": {
      "doc": "\n    returns attributes and their values of a packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            dict with attributes and their values\n    example:\n        {\n            \"User-Name\": {\"value\": \"'6c8bd38ec702'\", \"len\": \"14\"},\n            \"User-Password\": {\"value\": \"b392032ba377baacffb4cacf3a8d9b04\", \"len\": \"18\"},\n            \"Service-Type\": {\"value\": \"Call Check\", \"len\": \"6\"},\n            \"Framed-MTU\": {\"value\": \"1468\", \"len\": \"6\"},\n            \"Message-Authenticator\": {\"value\": \"d215599321f88dca2cacb5e0e793f354\", \"len\": \"18\"},\n            \"EAP-Key-Name\": {\"value\": \"''\", \"len\": \"2\"},\n            \"NAS-IP-Address\": {\"value\": \"10.106.26.213\", \"len\": \"6\"},\n            \"NAS-Port-Id\": {\"value\": \"'TenGigabitEthernet1/0/11'\", \"len\": \"26\"},\n            \"NAS-Port-Type\": {\"value\": \"Ethernet\", \"len\": \"6\"},\n            \"NAS-Port\": {\"value\": \"50111\", \"len\": \"6\"},\n            \"Calling-Station-Id\": {\"value\": \"'6C-8B-D3-8E-C7-02'\", \"len\": \"19\"},\n            \"NAS-Identifier\": {\"value\": \"'Switch-9500'\", \"len\": \"13\"},\n            \"Called-Station-Id\": {\"value\": \"'D0-EC-35-92-C9-8B'\", \"len\": \"19\"},\n        }\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_attributes_scapy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1268"
    }
  },
  "get_packet_info_field": {
    "iosxe": {
      "doc": "\n    returns packets info\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            returns packets info\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_info_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1321"
    }
  },
  "get_packet_ip_tos_field": {
    "iosxe": {
      "doc": "\n    returns types of services field from packet\n        Args:\n            packet (`obj`): packet object obtained from scapy module\n        Returns:\n            returns types of services field\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_packet_ip_tos_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1350"
    }
  },
  "get_peer_bgp_address": {
    "junos": {
      "doc": " Retrieve peer's ip address for 'show bpg neighbor' command\n\n        Args:\n            device ('obj'): Device object\n            address_family('str'): Mandatory field (ipv4, ipv6)\n\n        Returns:\n            an ip address\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_peer_bgp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L74"
    }
  },
  "get_peer_restart_flags_received": {
    "junos": {
      "doc": " Retrieve peer restart flags received\n\n        Args:\n            device ('obj'): Device object\n            neighbor_address ('str'): Neighbor IP address\n\n        Returns:\n            List of peer restart flags received\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_peer_restart_flags_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/get.py#L120"
    }
  },
  "get_pfe_count": {
    "junos": {
      "doc": "Returns count of count_type\n\n    Args:\n        device (obj): Device object\n        count_type (str): Which count to return. Ex: bfd, arp, atm-oam\n\n    Return:\n        str: Count for given count_type\n    ",
      "module_name": "pfe.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_pfe_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/pfe/get.py#L14"
    }
  },
  "get_pfe_hardware_input_drops": {
    "junos": {
      "doc": " Get hardware input drops\n\n    Args:\n        device (obj): Device object\n        count_type (str): Which count to return. Ex: bfd, arp, atm-oam\n\n    Return:\n        str: Count for given count_type\n    ",
      "module_name": "pfe.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_pfe_hardware_input_drops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/pfe/get.py#L45"
    }
  },
  "get_ping_message": {
    "junos": {
      "doc": " Get ntp peer information\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Given interface for the output\n            address (`str`): Interface used in command\n            source (`str`): Interface used in command\n            size (`int`): Size value used in command\n            count (`int`): Count value used in command\n        Returns:\n            result (`str`): message\n        Raises:\n            N/A\n    ",
      "module_name": "ping.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_ping_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/get.py#L11"
    }
  },
  "get_pki_trustpoint_state": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured trustpoint\n    Args:\n        device (obj): Device object\n        trustpoint_name (str): trustpoint name\n    Returns:\n        Trustpoint state (str) if success else empty string\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_pki_trustpoint_state",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L26"
      }
    }
  },
  "get_platform_core": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str`) : default directory on device\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n        Returns:\n            corefiles (`list`): List of found core files\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L139"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core or \n                                            system-report is generated on device\n                                            ex.) `bootflash:/core/`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                           or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L347"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core is generated \n                                            on device\n                                            ex.) `harddisk:/dumper`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                           or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L227"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`list`, `int`): List of found core files\n                                                   or number of core files if num_of_cores=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L133"
    }
  },
  "get_platform_cpu_load": {
    "ios": {
      "doc": "Get cpu load on device\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L212"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L423"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load   (`int`): Cpu load (5 mins average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L290"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load   (`int`): Cpu load (5 secs average by default) on the device (percentage)\n                                If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L193"
    }
  },
  "get_platform_cpu_load_detail": {
    "ios": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L268"
    },
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                if not specified, will return one ALL_PROCESSES \n                                with total cpu load\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            check_key_total (`str`): Key to check in parsed output for Total\n                                     Default to `five_sec_cpu_total`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L479"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            output     (`str`): Output of show command\n                                Default to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'netconf': 0.0,\n                                         'bgp': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L350"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            output     (`str`): Output of show command\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         'OMP': 0.0,\n                                         'NAT-ROUTE': 0.0,\n                                     }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_cpu_load_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L247"
    }
  },
  "get_platform_default_dir": {
    "ios": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L82"
    },
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L329"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L207"
    },
    "junos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `file list` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/platform/get.py#L10"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device (`obj`): Device object\n            output (`str`): Output of `dir` command\n        Returns:\n            default_dir (`str`): Default directory of the system\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_default_dir",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L115"
    }
  },
  "get_platform_logging": {
    "ios": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): Override show command\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n        Returns:\n            logs     (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L174"
    },
    "iosxe": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L401"
    },
    "iosxr": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L487"
    },
    "linux": {
      "doc": "Get logging messages\n\n        Args:\n            device          (`obj`): Device object\n            command         (`str`): Override show command\n            files          (`list`): List of syslog files\n            keywords       (`list`): List of keywords to match\n            timeout         (`int`): timeout (default: 300 secs)\n            output          (`str`): Not Available on this platform\n            prompt_pattern  (`str`): Prompt pattern\n            error_patterns (`list`): Error patterns. if not specified, [](empty) is default.\n        Returns:\n            logs           (`list`): list of logging messages\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/get.py#L10"
    },
    "nxos": {
      "doc": "Get logging messages\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): show command. Default to 'show logging logfile'\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match. Default to None\n            output    (`str`): Output of show command. Default to None\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n        Returns:\n            logs     (`list` or `int`): list of logging messages\n                                        OR or number of core files if num_of_logs=True\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L449"
    }
  },
  "get_platform_memory_usage": {
    "ios": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L326"
    },
    "iosxe": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L515"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to 'dynamic'\n            output         (`str`): Output of show command\n                                    Default to None\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L378"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. Not used for NXOS\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage (`float`): memory usage on the device (percentage)\n                                    If multiple processes are given, returns average.\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L277"
    }
  },
  "get_platform_memory_usage_detail": {
    "ios": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L404"
    },
    "iosxe": {
      "doc": null,
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L597"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `dynamic`\n            output         (`str`): Output of show command\n                                    Deault to None\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'OMP': 0.0012294695662956926,\n                                            'NAT-ROUTE': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L457"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. Not used for NXOS\n            output         (`str`): Output of show command\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            'libvirtd': 0.0012294695662956926,\n                                            'inotifywait': 0.0012294695662956926,\n                                        }\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_memory_usage_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L344"
    }
  },
  "get_platform_model_number": {
    "iosxe": {
      "doc": "Get platform model number or chassis type of device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device model number or chassis type\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_model_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L772"
    }
  },
  "get_platform_software_dict": {
    "iosxe": {
      "cat9k": {
        "doc": "Get platform software dict\n    Args:\n        device (obj): Device object\n        process(str): Name of process\n\n    Returns:\n        platform_software_dict(str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_platform_software_dict",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L221"
      }
    }
  },
  "get_platform_standby_rp": {
    "iosxe": {
      "doc": " Get standby router slot on device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds retrieving router information\n            interval ('int'): Interval in seconds retrieving router information\n        Raise:\n            None\n        Return:\n            Integer: Number of RP\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_standby_rp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L24"
    }
  },
  "get_platform_type": {
    "iosxe": {
      "doc": "Get platform type of device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device platform type\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L697"
    },
    "nxos": {
      "doc": "Get platform type of device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        str: Device platform type\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_platform_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L430"
    }
  },
  "get_policy_map_class_maps": {
    "iosxe": {
      "doc": " Get class map dictionary\n\n        Args:\n            device (`obj`): Device object\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n        Returns:\n            class map dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_class_maps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L290"
    }
  },
  "get_policy_map_configurational_policy_map": {
    "iosxe": {
      "doc": " Get policy-map running configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): List of interfaces\n\n        Returns:\n            policy-map configurational dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_configurational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L60"
    }
  },
  "get_policy_map_operational_policy_map_on_interface": {
    "iosxe": {
      "doc": " Get operational policy-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            Device output parsed dictionary\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_operational_policy_map_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L123"
    }
  },
  "get_policy_map_policy_map_ip_precedence": {
    "iosxe": {
      "doc": " Gets policy-map ip precedence per stream\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            stream ip precedece ('dict')\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_policy_map_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L202"
    }
  },
  "get_policy_map_policy_map_packet_count": {
    "iosxe": {
      "doc": " Get policy-map packet count\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            direction ('str'): input/output pkt direction\n\n        Returns:\n            class_map_out_packets: Packet count\n\n        Raises:\n            KeyError\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_policy_map_packet_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L144"
    }
  },
  "get_policy_map_running_policy_map": {
    "iosxe": {
      "doc": " Get running policy-map configuration\n\n        Args:\n            device (`obj`): Device object\n            policy_map (`str`): Policy map name\n\n        Returns:\n            None\n\n        Raises:\n            SchemaUnsupportedKeyError\n    ",
      "module_name": "policy_map.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_policy_map_running_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/get.py#L25"
    }
  },
  "get_power_cyclers": {
    "com": {
      "doc": "Get power cycler peripherals for a device\n\n    Args:\n        device ('obj'): Device object\n\n    Raises:\n        Exception if powercycler info (including the outlets corresponding\n        to the devices power supplies) are not supplied\n\n    Returns:\n        list of tuples, each tuple has format: (initialized powercycler, list of outlets)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_power_cyclers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2022"
    }
  },
  "get_processes_five_seconds_cpu_usage": {
    "iosxe": {
      "doc": " Get average CPU usage for last 5 seconds\n\n        Args:\n            device ('obj'): Device objecte\n\n        Returns:\n            CPU usage for last 5 seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "processes.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_processes_five_seconds_cpu_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/processes/get.py#L7"
    }
  },
  "get_processes_platform_dict": {
    "iosxe": {
      "cat9k": {
        "doc": "Get processes platform dict\n    Args:\n        device (obj): Device object\n        process(str): Name of process\n\n    Returns:\n        processes_platform_dict(str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_processes_platform_dict",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L199"
      }
    }
  },
  "get_protocols_bgp_process": {
    "iosxe": {
      "doc": " Returns bgp process id from show protocols\n\n        Args:\n            device ('obj'): device to run on\n        Returns:\n            bgp process id\n        Raises:\n            None\n    ",
      "module_name": "protocols.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_protocols_bgp_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/get.py#L17"
    }
  },
  "get_radius_packets": {
    "iosxe": {
      "doc": "\n    returns radius packets from pcap file/packet\n        Args:\n            pcap_or_packet (`str/obj`): path of pcap file or packet object obtained\n                                        from scapy module\n        Returns:\n            List contains radius packets\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_radius_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1245"
    }
  },
  "get_redundancy_operational_state": {
    "iosxe": {
      "doc": " Get redundancy states of device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            String: Redundancy state\n            None\n        Raises:\n            None\n    ",
      "module_name": "redundancy.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_redundancy_operational_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/get.py#L10"
    }
  },
  "get_rloc_ip": {
    "iosxe": {
      "cat9k": {
        "doc": "Get rloc IP\n    Args:\n        device (obj): Device object\n        ap_name(str): AP Name\n    Returns:\n        aloc ip (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_rloc_ip",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/get.py#L132"
      }
    }
  },
  "get_route_advertising_label": {
    "junos": {
      "doc": "Get the label with given table_name via\n        'show route advertising-protocol {protocol} {ip_address} {route} detail'\n\n        Args:\n            device ('obj'): Device to use\n            protocol ('str'): Protocol used in show command\n            ip_address ('str'): IP address used in show command\n            route ('str'): Route used in show command\n            table_name ('str'): Label inet\n\n        Returns:\n            str\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_advertising_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L249"
    }
  },
  "get_route_as_path": {
    "junos": {
      "doc": "\n    Get the AS path via 'show route target_route extensive'\n\n    Args:\n        device (obj): Device object\n        target_route (str): Address used in show command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L528"
    }
  },
  "get_route_count": {
    "junos": {
      "doc": "\n    Get total route count for each table via 'show route target_route extensive'\n\n    Args:\n        device (`obj`): Device object\n        table (`str`): Table name such as `inet.0`, `inet6.0`\n        protocol (`str`): Protocol name such as `Direct`, `Static` and etc\n        active (`bool`): get only active route count\n                         Default to True\n        output (`str`): output of show route summary\n\n    \n    Returns:\n        int: return number of route count based on given arguments\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L755"
    }
  },
  "get_route_destination_address": {
    "junos": {
      "doc": "Get destination address that matches criteria\n\n    Args:\n        device (obj): device object\n        extensive (bool): Show extensive output. Defaults to None.\n        prefix (str, optional): Route prefix. Defaults to None.\n        protocol (str, optional): Route protocol. Defaults to None.\n        interface (str, optional): Route interface. Defaults to None.\n\n    Returns:\n        str: The destination address\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L74"
    }
  },
  "get_route_metric": {
    "iosxe": {
      "doc": "\n        Gets the ipv6 routes and its corresponding metric of the device via \"show ipv6 route\"\n\n        Args:\n            device: Device used to run commands\n        \n        Returns:\n            route(dict): route and its corresponding metric. i.e. {1111::/64 : 5}\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L685"
    }
  },
  "get_route_mpls_labels": {
    "junos": {
      "doc": "\n    Get mpls labels from routing table\n\n    Args:\n        device (`obj`): Device object\n        route (`str`): Route Information such as `192.168.1.0/24`\n        table_name (`str`): table name\n        return_list (`bool`): if True, mpls labels will be returned as list instead of string\n                              Default to False\n        output` (`str`): output of show route summary\n\n    \n    Returns:\n        mpls label(`str`, `list`): return mpls label info as string by default\n                                   if return_list is True, will return labels as list\n        None: if any issue\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_mpls_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L873"
    }
  },
  "get_route_nexthop": {
    "junos": {
      "doc": " Get nexthops of route from routing table\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): route in routing table\n            extensive (`bool`): flag to add `extensive` to show command\n                                Default to False\n            all_nexthops (`bool`):  flag to return all nexthops as list or only first one as string\n            only_best (`bool`): only best nexthop\n            only_non_best (`bool`): only non-best nexthop\n        Returns:\n            nexthop address (list or string)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L593"
    }
  },
  "get_route_push_value": {
    "junos": {
      "doc": "Get Push value in 'show route {address}'\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            expected_table_name ('str'): Expected table name\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_push_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L663"
    }
  },
  "get_route_summary_table_total_route_count": {
    "junos": {
      "doc": "\n    Get total route count for each table via 'show route target_route extensive'\n\n    Args:\n        device (obj): Device object\n    \n    Returns:\n        dict: Table name as key, total route count as value.\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_summary_table_total_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L567"
    }
  },
  "get_route_table_first_label": {
    "junos": {
      "doc": "Get route table first label\n\n    Args:\n        device (obj): Device object\n        table ('str'): Table name\n        address ('str'): Address to search in show command\n    \n    Returns:\n        output_label (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_first_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L709"
    }
  },
  "get_route_table_output_interface": {
    "junos": {
      "doc": "Get route table output interface\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_interface (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L304"
    }
  },
  "get_route_table_output_label": {
    "junos": {
      "doc": "Get route table output label\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        route (str): Route IP address\n    \n    Returns:\n        output_label (str)\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_output_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L352"
    }
  },
  "get_route_table_switched_path_destination_address": {
    "junos": {
      "doc": " Get route table switched path destination address\n\n    Args:\n        device (obj): Device object\n        table (str): Table name\n        name (str): switched path label\n\n    Returns:\n        str or None: metric value\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_table_switched_path_destination_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L144"
    }
  },
  "get_route_uptime": {
    "junos": {
      "doc": "\n    Get uptime of active route in routing table\n\n    Args:\n        device (`obj`): Device object\n        route (`str`): Route Information such as `192.168.1.0/24`\n        protocol (`str`): Protocol name such as `Direct`, `Static` and etc\n        push (`bool`): flag to check route only with `Push` in route entry\n        output` (`str`): output of show route summary\n\n    \n    Returns:\n        uptime(`int`): return uptime in seconds\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_route_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L803"
    }
  },
  "get_router_ospf_section_running_config": {
    "iosxe": {
      "doc": " Get router OSPF section from running-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_router_ospf_section_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L430"
    }
  },
  "get_router_ospf_section_startup_config": {
    "iosxe": {
      "doc": " Get router OSPF section from startup-config\n        Args:\n            device ('obj'): Device object\n            ospf_process_id ('int'): OSPF router process id\n        Returns:\n            Dict with section\n    ",
      "module_name": "ospf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_router_ospf_section_startup_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/get.py#L447"
    }
  },
  "get_routes": {
    "iosxe": {
      "doc": " Retrieve all routes in specific protocal - show ip route\n\n        Args:\n            device ('obj'): Device object\n            protocol_codes ('str'): Protocol codes\n                If not provided, it will get all protocal routes\n        Returns:\n            routes ('list'): List of routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L31"
    }
  },
  "get_routes_from_parsed": {
    "iosxe": {
      "doc": "\n    Gets routes from 'show ip route' on a device\n    or a parsed dict output.\n\n    Args:\n        device (): Device used to run commands\n        output ('dict'): Parsed dictionary output from a show cmd\n\n    Returns list of routes and None if exception occurs.\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routes_from_parsed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L144"
    }
  },
  "get_routing_best_path_peer_id": {
    "junos": {
      "doc": "Get routing best path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_best_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L458"
    }
  },
  "get_routing_best_routes": {
    "junos": {
      "doc": "Return a list of best routes\n\n    Args:\n        device (object): Device object\n        address (str): Address to check\n        protocol (str): Protocol to check\n        active_tag (str, optional): Active tag. Defaults to \"*\".\n\n    Returns:\n        list: List of best routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_best_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L215"
    }
  },
  "get_routing_engines_states": {
    "junos": {
      "doc": " Get state of routing engines\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`list`): list of states of routing engines\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_engines_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/get.py#L118"
    }
  },
  "get_routing_ipv6_routes": {
    "iosxe": {
      "doc": "Execute 'show ipv6 route vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name or None\n\n        Returns:\n            Dictionary: received routes\n            {}: When exception is hit\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_ipv6_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L341"
    }
  },
  "get_routing_metric": {
    "junos": {
      "doc": "Get OSPF metric\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name. Default is None.\n        ip_address (str): IP address name. Default is None.\n        extensive (bool): Run with extensive command.\n        expected_metric_2 (bool): Flag for checking metric2\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L399"
    }
  },
  "get_routing_mpls_label": {
    "iosxe": {
      "doc": " Get registered MPLS label to prefix \n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf (`vrf`): VRF name\n            output ('dict'): Optional. Parsed output of command 'show ip route {prefix}'\n        Returns:\n            int: registered MPLS label\n        Raises:\n            None\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L261"
    }
  },
  "get_routing_nonbest_path_peer_id": {
    "junos": {
      "doc": "Get routing nonbest path peer-id\n\n    Args:\n        device (obj): Device object\n        protocol (str): Protocol name\n        ip_address (str): IP address name\n        extensive (bool): Run with extensive command\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_nonbest_path_peer_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/get.py#L491"
    }
  },
  "get_routing_ospf_routes": {
    "iosxe": {
      "doc": " Retrieve all ospf routes - show ip route\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            routes ('list'): List of ospf routes\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_ospf_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L18"
    }
  },
  "get_routing_outgoing_interface": {
    "iosxe": {
      "doc": " Execute 'show ip cef <address>' and retrieve the outgoing interface\n\n        Args:\n            device (`obj`): Device object\n            ip_address ('str'): ip_address\n            vrf ('str'): vrf to search under\n            address_family ('str'): address_family to search under\n\n        Returns:\n            ('list'): [interface name, ip_address]\n\n        Raises:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L73"
    }
  },
  "get_routing_repair_path_information": {
    "iosxe": {
      "doc": " Get 'repair path' information under route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n        Returns:\n            tuple : (\n                next_hop ('str'): Next hop ip\n                outgoing_interface ('str'): Outgoing interface name\n            )            \n        Raises:\n            None\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_repair_path_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L223"
    }
  },
  "get_routing_route_count": {
    "iosxe": {
      "doc": " Get route count for all vrfs\n\n        Args:\n            device(`str`): Device str\n            vrf ('str'): VRF name\n\n        Returns:\n            int: route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L118"
    }
  },
  "get_routing_route_count_all_vrf": {
    "iosxe": {
      "doc": " Get route count for every VRF\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            Integer: Route count\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_route_count_all_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L147"
    }
  },
  "get_routing_route_source_protocol": {
    "iosxe": {
      "doc": "\n    Gets the source protocol of route from\n    'show ip route' parsed dict output.\n    Args:\n        device (`obj`): Device object\n        route (`str`): ipv4 route address\n        output (`dict`): already parsed show ip route output\n    Raises:\n        SchemaEmptyParserError\n    Returns: \n        None if route does not exist.\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_route_source_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L378"
    }
  },
  "get_routing_routes": {
    "iosxe": {
      "doc": "Execute 'show ip route vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name or None\n            address_family (`str`): Address family name\n\n        Returns:\n            Dictionary: received routes\n\n        Raises:\n            SchemaEmptyParserError\n            KeyError\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L183"
    }
  },
  "get_routing_vrf_entries": {
    "iosxe": {
      "doc": " Get entry of routes from\n        'show ip route vrf {vrf} {prefix}'/'show ip route {prefix}'\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            vrf (`str`, optional): VRF name, default None\n        Returns:\n            list: entries of ip\n            None\n        Raises:\n            None\n\n    ",
      "module_name": "routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_routing_vrf_entries",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/get.py#L306"
    }
  },
  "get_rsvp_hello_sent": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            sent_count_flag ('bool'): Flag for getting Hello: sent value\n        \n        Returns:\n            sent_count: Value obtained from the Hello: send value\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_rsvp_hello_sent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/get.py#L13"
    }
  },
  "get_rsvp_session_state_count": {
    "junos": {
      "doc": " Get show ldp session count\n\n    Args:\n        device (obj): Device object\n        expected_lsp_state (str): Expected session state. Defaults to 'Up'.\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n    ",
      "module_name": "rsvp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_rsvp_session_state_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/get.py#L81"
    }
  },
  "get_run_configuration": {
    "iosxe": {
      "doc": " search config in show running-config output and return\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n        Raises:\n            None\n    ",
      "module_name": "qos.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_run_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/get.py#L15"
    }
  },
  "get_running_config": {
    "ios": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L117"
    },
    "iosxe": {
      "doc": " Return list with configuration starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            List containing configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L115"
    }
  },
  "get_running_config_all": {
    "com": {
      "doc": " Return raw running configuration\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n        Returns:\n            Raw output\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3352"
    }
  },
  "get_running_config_dict": {
    "asa": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/asa/running_config/get.py#L12"
    },
    "ios": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L37"
    },
    "iosxe": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L35"
    },
    "iosxr": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L33"
    },
    "junos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/get.py#L12"
    },
    "nxos": {
      "doc": " Get show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): option command\n        Returns:\n            config_dict (`dict`): dict of show run output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L14"
    }
  },
  "get_running_config_hostname": {
    "ios": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L62"
    },
    "iosxe": {
      "doc": " Get device hostname from show run\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L60"
    },
    "iosxr": {
      "doc": " Get device hostname\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            hostname (`str`): Device hostname\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L14"
    }
  },
  "get_running_config_section": {
    "ios": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L137"
    },
    "iosxe": {
      "doc": " Return list with configuration section starting with passed keyword\n\n        Args:\n            device ('obj')  : Device object to extract configuration\n            keyword ('str') : Configuration to be extracted from device\n        Returns:\n            Return list of configuration section starting with the passed keyword\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L135"
    }
  },
  "get_running_config_section_attr44": {
    "iosxe": {
      "doc": " Return list with configuration section starting with passed keyword\n        Args:\n            device ('obj') : Device object to extract configuration\n            option (`str`) : match string\n        Returns:\n            Return the configuration with the passed keyword\n    ",
      "module_name": "aaa.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_attr44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/get.py#L332"
    }
  },
  "get_running_config_section_dict": {
    "ios": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L85"
    },
    "iosxe": {
      "doc": " Get section information from show run\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_config_section_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L83"
    }
  },
  "get_running_image": {
    "ios": {
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L547"
    },
    "iosxe": {
      "cat9500": {
        "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_running_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9500/platform/get.py#L57"
      },
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L162"
    },
    "iosxr": {
      "doc": "Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L46"
    },
    "nxos": {
      "doc": "\n        Get running image on the device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            kickstart (`str`): Kickstart image\n            system (`str`): System image\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L46"
    }
  },
  "get_segment_routing_accumulated_path_metric": {
    "iosxe": {
      "doc": " Get accumulated path metric for a preference path\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            preference ('int'): Preference path\n\n        Returns:\n            accumulated_metric (None, 'int'): Accumulated path metric\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_accumulated_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L226"
    }
  },
  "get_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Gets segement-routing global block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L207"
    }
  },
  "get_segment_routing_labels_from_bgp": {
    "iosxe": {
      "doc": " Gets segement-routing labels from bgp table\n\n        Args:\n            device (`obj`): device to use\n            route (`str`): route to check\n            vrf (`vrf`): VRF name\n            best_path (`bool`): only best path returned\n\n        Returns:\n            ('list'): list of segment routing labels\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_labels_from_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L261"
    }
  },
  "get_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Gets segement-routing local block range\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            ('int', 'int'): label_min, label_max\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L187"
    }
  },
  "get_segment_routing_policy_active_path_hop_labels": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            policy ('str'): Policy name\n            policy_dict ('dict'): Policy dict from parser output\n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            ignore_first_label (`bool`): flag to ignore first label\n        Returns:\n            labels ('list'): Hop labels\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_policy_active_path_hop_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L22"
    }
  },
  "get_segment_routing_policy_in_state": {
    "iosxe": {
      "doc": " Find a segement-routing policy in expected state\n\n        Args:\n            device ('obj'): Device object\n            expected_admin ('str'): Expected admin state\n            expected_oper ('str'): Expected operational state\n            expected_color (`str`): Expected color\n            expected_endpoint (`str`): Expected end-point address\n        Returns:\n            policy ('str'): Policy name\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_policy_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L108"
    }
  },
  "get_segment_routing_sid_map_configuration": {
    "iosxe": {
      "doc": " Get Segment routing SID map configuration\n\n        Args:\n            device ('str'): Device str\n            address_family ('str'): Address family\n        Returns:\n            Dictionary with ip address as key and sid as value\n            ex.)\n                {\n                    '192.168.1.1': '1',\n                    '192.168.1.2': '2'\n                }\n    ",
      "module_name": "segment_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_segment_routing_sid_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/get.py#L147"
    }
  },
  "get_server_vm": {
    "linux": {
      "doc": " Get all VMs on server\n        Args:\n            vm_hostname ('str'): VM name to check for on ESXI server\n        Raises:\n            N/A\n        Returns:\n            devs ('dict'): Dictionary of VMs that are on the ESXI server, \n            where the key is the name of the VM and the value is its VM id.\n            \n        Parser schema for vim-cmd vmsvc/getallvms\n        schema = {\n            'vmid': {\n                Any(): {\n                    'vmid': str,\n                    'name': str,\n                    'file': str,\n                    'guest_os': str,\n                    'version': str,\n                    Optional('annotation'): str,\n                }\n            }\n        }\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_server_vm",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L55"
    }
  },
  "get_services_accounting_aggregation_template_field": {
    "junos": {
      "doc": " Get value of field from show service accounting aggregation template template-name {template-name} extensive\n\n        Args:\n            device (`obj`): Device object\n            source (`str`, Optional): source address. Default to None\n            destination (`str`, Optional): destination address. Default to None\n            template_name (`str`): template name\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting errors\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_aggregation_template_field",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L316"
    }
  },
  "get_services_accounting_errors": {
    "junos": {
      "doc": " Get value of field from show services accounting errors\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting errors\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L278"
    }
  },
  "get_services_accounting_flow": {
    "junos": {
      "doc": " Get value of field from show services accounting flow\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting flow\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L234"
    }
  },
  "get_services_accounting_flow_active": {
    "junos": {
      "doc": " Get services accounting flow active flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L33"
    }
  },
  "get_services_accounting_flow_expired": {
    "junos": {
      "doc": " Get services accounting flow expired flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_expired",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L52"
    }
  },
  "get_services_accounting_flow_exported": {
    "junos": {
      "doc": " Get services accounting flow exported flows\n\n    Args:\n        device (obj): Device obj\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_exported",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L13"
    }
  },
  "get_services_accounting_flow_packets": {
    "junos": {
      "doc": " Get criteria from show services accounting flow\n\n        Args:\n            device (`obj`): Device object\n            criteria ('str'): Criteria to return from show command\n        Returns:\n            flow packet value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_flow_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L126"
    }
  },
  "get_services_accounting_memory": {
    "junos": {
      "doc": " Get services accounting memory\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L161"
    }
  },
  "get_services_accounting_status": {
    "junos": {
      "doc": " Get value of field from show services accounting status\n\n        Args:\n            device (`obj`): Device object\n            field (`str`): field name in show output\n            output (`str`): output of show services accounting status\n        Returns:\n            value (`str`): value of field\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L194"
    }
  },
  "get_services_accounting_usage_five_second_load": {
    "junos": {
      "doc": " Get services accounting usage five-second-load\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_usage_five_second_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L71"
    }
  },
  "get_services_accounting_usage_one_minute_load": {
    "junos": {
      "doc": " Get services accounting usage one-min-load\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            One minute load value\n    ",
      "module_name": "services.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_services_accounting_usage_one_minute_load",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/get.py#L98"
    }
  },
  "get_show_derived_interface_dict": {
    "iosxe": {
      "doc": " Get show derived config interface output \n        Args:\n            device('obj'): Device object\n            interface('str'): Interface name\n        Returns:\n            config_dict ('dict'): dict of show derived config interface output\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_derived_interface_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L245"
    }
  },
  "get_show_output_exclude": {
    "iosxe": {
      "doc": " Find the lines which are match from show command.\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n            output (`str`): output of show command. (optional) Default to None\n        Returns:\n            bool, output('str') : True/False, include command output based on the output\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_exclude",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L795"
    }
  },
  "get_show_output_include": {
    "iosxe": {
      "doc": " Find the lines which are match from show command.\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n            output (`str`): output of show command. (optional) Default to None\n        Returns:\n            bool,output('str') : True/False, include command output based on the output\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_include",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L769"
    }
  },
  "get_show_output_line_count": {
    "iosxe": {
      "doc": " Count number of lines from show command.\n\n        The command string is created using \"{command} | count {filter}\"\n\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n            output (`str`): output of show command. (optional) Default to None\n        Returns:\n            line_count (`int`): number of lines based on show command output\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_line_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L696"
    },
    "junos": {
      "doc": " Count number of line from show command output\n\n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            output (`str`): output of show command. Default to None\n        \n        Returns:\n            line_count (`int`): number of lines based on show command output\n            \n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_line_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L389"
    }
  },
  "get_show_output_section": {
    "iosxe": {
      "doc": " Display the lines which are match from section \n        Args:\n            device (`obj`): Device object\n            command (`str`): show command\n            filter (`str`): filter expression\n        Returns:\n            bool,output('str') : True/False, section command output based on the output\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_output_section",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1402"
    }
  },
  "get_show_run_bgp_dict": {
    "iosxe": {
      "doc": " Parse router bgp section from show running-config to a dictionary\n\n        Args:\n            device(`obj`): Device object\n        Returns:\n            Dictionary following below schema:\n            {\n                'bgp_as': int,\n                    Any(): {\n                        Any(): {\n                            'neighbor': str,\n                            'neighbors': list\n                            'remote_as': int}}}\n        Raises:\n            None\n    ",
      "module_name": "bgp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_run_bgp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/get.py#L30"
    }
  },
  "get_show_tech": {
    "apic": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/support/tech_support.py#L11"
    },
    "iosxe": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: flash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/support/tech_support.py#L13"
    },
    "iosxr": {
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: bootflash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the bootflash,\n    compressed with tar and uploaded to the target_host via scp.\n    The created show tech files will be deleted from the bootflash.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/support/tech_support.py#L12"
    },
    "nxos": {
      "aci": {
        "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the flash filesystem,\n    and uploaded to the remote_server via scp. The created show tech\n    files will be deleted from the flash filesystem.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
        "module_name": "support.tech_support",
        "package": "genie.libs.sdk.apis",
        "uid": "get_show_tech",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/support/tech_support.py#L11"
      },
      "doc": " Collect show tech-support from the device.\n\n    Args:\n        device (obj): Device object (optional)\n        prefix (str): filename prefix (optional)\n        show_tech_command (str): command to execute (default: show tech-support)\n        device_dir (str): Device directory to save show tech to (default: bootflash:)\n        remote_server (str): server name in testbed file\n        remote_path (str): path to save the file to on the server\n        protocol (str): protocol to use to copy (default: scp)\n        vrf (str): VRF to use (default: management)\n        timeout (int): timeout to copy file (default: 600s)\n\n    Returns\n        True on success, False on failure\n\n    The filename is based the prefix + show_tech + timestamp.\n\n    The default prefix is the device name.\n\n    The show tech data will be redirected to a file on the bootflash,\n    compressed with tar and uploaded to the target_host via scp.\n    The created show tech files will be deleted from the bootflash.\n\n    The remote server is assumed to be defined in the testbed file\n    including credentials if needed.\n\n    Example server config:\n\n    testbed:\n        servers:\n            scp1:\n                server: 1.2.3.4\n                type: scp\n                address: 1.2.3.4\n                credentials:\n                    default:\n                        username: test\n                        password: 1234\n\n    If no remote server is specified and the connection is done via\n    SSH or telnet a temporary http server will be created and the\n    show tech file will be sent to the host where the script is running.\n\n    If the device is connected via proxy (unix jump host) and the proxy has\n    'socat' installed, the upload will be done via the proxy automatically.\n    ",
      "module_name": "support.tech_support",
      "package": "genie.libs.sdk.apis",
      "uid": "get_show_tech",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/support/tech_support.py#L13"
    }
  },
  "get_simulations": {
    "virl": {
      "doc": "Get simulations list\n\n        Args:\n            device (`obj`): Device object\n            connection_alias (`str`): connection alias\n\n        Returns:\n            list: list of simulation names\n        \n        Raise:\n            None\n    ",
      "module_name": "std.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_simulations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/get.py#L12"
    }
  },
  "get_single_interface": {
    "com": {
      "doc": "\"\n    Returns the single interface and fails if multiple interfaces\n    are found.\n\n    Args:\n        device (`obj`): device to use\n        link_name ('str'): link name\n        opposite ('bool'): find opposite device interface\n        phy ('bool'): find only physical interface\n\n    Raise:\n        N/A\n\n    Return:\n        Interface Object\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_single_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3971"
    }
  },
  "get_slice_id_of_interface": {
    "iosxe": {
      "doc": "Get the slice id of the interface\n\n    Args:\n        device (obj): Device object\n        interface ('str'): interface name\n\n    Return:\n        str: Slice ID that the interface belongs to\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_slice_id_of_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L715"
    }
  },
  "get_slot_model": {
    "iosxe": {
      "doc": "Gets the model name of one or all modules\n\n    Args:\n        device (obj): Device object\n        slot (str, optional): Module slot to get. Defaults to None.\n\n    Returns:\n        dict: Dictionary mapped from slot number to model\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_slot_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L638"
    },
    "nxos": {
      "doc": "Gets the model name of all modules\n\n    Args:\n        device (obj): Device object\n        slot (str, optional): Module slot to get. Defaults to None.\n\n    Returns:\n        dict: Dictionary mapped from slot number to model\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_slot_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L375"
    }
  },
  "get_snmp_cli_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from CLI\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n            out (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                        \"load_average\": {\n                            \"status\": \"healthy\",\n                            \"1_min\": 0.07,\n                            \"5_min\": 0.02,\n                            \"15_min\": 0.0\n                        },\n                        \"memory\": {\n                            \"status\": \"healthy\",\n                            \"total\": 964676,\n                            \"used\": 575896,\n                            \"used_percentage\": 60,\n                            \"free\": 388780,\n                            \"free_percentage\": 40,\n                            \"committed\": 869972,\n                            \"committed_percentage\": 90\n                        },\n                        \"cpu\": {\n                            \"0\": {\n                                \"user\": 3.4,\n                                \"system\": 0.8,\n                                \"nice_process\": 0.0,\n                                \"idle\": 95.69,\n                                \"irq\": 0.0,\n                                \"sirq\": 0.1,\n                                \"waiting\": 0.0\n                            }\n                        }}}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_cli_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L159"
    }
  },
  "get_snmp_dict": {
    "iosxe": {
      "doc": " Get CPU and memory usage information from SNMP device\n\n        Args:\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n        Returns:\n            snmp_dict (`dict`): Information dictionary\n                ex: {\"sip0\": {\n                     \"used\": 575640,\n                     \"free\": 389036,\n                     \"1_min\": 3,\n                     \"5_min\": 4,\n                     \"15_min\": 0,\n                     \"committed\": 869368}}\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L105"
    }
  },
  "get_snmp_id_slot_map": {
    "iosxe": {
      "doc": " Get id-slot mapping from SNMP server\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oids (`list`): Oid codes\n            version (`str`): SNMP version\n        Returns:\n            id_slot_map (`dict`): Id slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_id_slot_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L49"
    }
  },
  "get_snmp_information": {
    "junos": {
      "doc": " Get snmp information\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`list`): list of snmp information\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/get.py#L12"
    }
  },
  "get_snmp_snmpwalk": {
    "iosxe": {
      "doc": " Get snmpwalk output from SNMP device\n\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`): SNMP version\n            option (`str`): Optional command\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_snmpwalk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/get.py#L13"
    },
    "linux": {
      "doc": " Get snmpwalk output from SNMP device\n        Args:\n            device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            version (`str`, optional): SNMP version. Default is \"2c\"\n            option (`str`): Optional command. Default is None\n        Returns:\n            out (`str`): Executed output of SNMP command\n        Raises:\n            None\n    ",
      "module_name": "snmp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_snmp_snmpwalk",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/snmp/get.py#L10"
    }
  },
  "get_software_version": {
    "iosxe": {
      "doc": "\n    Get software version information of a device\n    Args:\n        device (obj): Device object\n    Returns:\n        str: Device software version information as str\n    Raises:\n        None\n    ",
      "module_name": "software_version.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_software_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/software_version/get.py#L8"
    },
    "iosxr": {
      "asr9k": {
        "doc": " Gets the version of the current running image\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_software_version",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/asr9k/get.py#L9"
      },
      "ncs540": {
        "doc": " Gets the version of the current running image\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_software_version",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs540/get.py#L4"
      },
      "ncs5k": {
        "doc": " Gets the version of the current running image\n        Args:\n            device (`obj`): Device object\n        Returns:\n            Image or None\n    ",
        "module_name": "get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_software_version",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs5k/get.py#L9"
      }
    },
    "nxos": {
      "doc": "Get software version of device\n\n    Args:\n        device (obj): Device object\n        return_tuple (bool, optional): Should the return be a tuple.\n            Defaults to False.\n\n    Returns:\n        (str, tuple): Device software version as a str or tuple\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_software_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L476"
    }
  },
  "get_stack_size": {
    "iosxe": {
      "doc": "Get switch stack size\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        int: Size of stack as int\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_stack_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L609"
    }
  },
  "get_startup_config_dict": {
    "iosxe": {
      "doc": " Get section information from show startup-config\n\n        Args:\n            device ('str'): Device str\n            section ('str'): Section str\n        Returns:\n            Configuration dict\n    ",
      "module_name": "startup_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_startup_config_dict",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/startup_config/get.py#L13"
    }
  },
  "get_startup_configuration": {
    "iosxe": {
      "doc": " search config in show startup-config output\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n        Raises:\n            None\n    ",
      "module_name": "qos.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_startup_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/get.py#L37"
    }
  },
  "get_static_routing_ipv6_routes": {
    "iosxe": {
      "doc": "Execute 'show ipv6 static vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name or None\n\n        Returns:\n            Dictionary: received routes\n\n        Raises:\n            None\n\n    ",
      "module_name": "static_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_static_routing_ipv6_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/static_routing/get.py#L50"
    }
  },
  "get_static_routing_routes": {
    "iosxe": {
      "doc": "Execute 'show ip static route vrf <vrf>' and retrieve the routes\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name or None\n            address_family (`str`): Address family name\n\n        Returns:\n            Dictionary: received routes\n\n        Raises:\n            None\n\n    ",
      "module_name": "static_routing.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_static_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/static_routing/get.py#L12"
    }
  },
  "get_status_for_rollback_replacing_in_flash": {
    "iosxe": {
      "doc": " search the status for rollback while replacing in flash memory\n        Args:\n            device (`obj`): Device object\n        Returns:\n            config (`str`): search result\n        Raises:\n            None\n    ",
      "module_name": "qos.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_status_for_rollback_replacing_in_flash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/get.py#L62"
    }
  },
  "get_structure_output": {
    "com": {
      "doc": "\n    Get structure output from any test data. Data will be divided by space\n    and generate structure data.\n\n    Args:\n        device (`obj`): device to use\n        command (`str`): show command. Default to None\n        exclude (`list`): patter to excute in text output\n                          Default to ['!']\n        negative_keyword (`str`): keyword to set value as False\n                                  Default to 'no'\n        output (`str`): text output\n\n    Returns:\n        Dict : structure data (python dictionary)\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_structure_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3711"
    }
  },
  "get_switch_qos_queue_config_on_interface": {
    "iosxe": {
      "doc": " Get platform hardware fed on switch and qos queue config on Interface\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface name\n            switch_num ('str'): switch number\n        Return:\n            Dictionary with running interface configuration\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_switch_qos_queue_config_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1457"
    }
  },
  "get_switch_state": {
    "iosxe": {
      "doc": " Get active/standby switch in SVL\n\n        Args:\n            device ('str'): Device str\n            state ('str'): state of the device(active/standby)\n        Returns:\n            switch with mentioned state\n    ",
      "module_name": "stackwise_virtual.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_switch_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/get.py#L11"
    }
  },
  "get_syslog_first_bgp_down_message": {
    "iosxe": {
      "doc": " Get first BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L169"
    }
  },
  "get_syslog_first_bgp_up_message": {
    "iosxe": {
      "doc": " Get first BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L275"
    }
  },
  "get_syslog_first_ospf_down_message": {
    "iosxe": {
      "doc": " Get first OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L107"
    }
  },
  "get_syslog_first_ospf_up_message": {
    "iosxe": {
      "doc": " Get first OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_first_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L218"
    }
  },
  "get_syslog_last_bgp_down_message": {
    "iosxe": {
      "doc": " Get last BGP down message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_bgp_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L150"
    }
  },
  "get_syslog_last_bgp_up_message": {
    "iosxe": {
      "doc": " Get last BGP up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_bgp_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L258"
    }
  },
  "get_syslog_last_ospf_down_message": {
    "iosxe": {
      "doc": " Get last OSPF down message from Syslog server\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_ospf_down_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L83"
    }
  },
  "get_syslog_last_ospf_up_message": {
    "iosxe": {
      "doc": " Get last OSPF up message in show logging\n\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from tcpdump\n            server ('str'): Syslog server address\n            interface ('str'): Interface name if searching for specific interface\n        Returns:\n            String: Line containing message\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_last_ospf_up_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L196"
    }
  },
  "get_syslog_maximum_bgp_down_time": {
    "iosxe": {
      "doc": " Get maximum BGP down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from show logging\n        Returns:\n            BGP down time in seconds\n        Raises:\n            ValueError\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_maximum_bgp_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L303"
    }
  },
  "get_syslog_maximum_ospf_down_time": {
    "iosxe": {
      "doc": " Get maximum OSPF down time from show logging\n        Args:\n            device ('obj'): Device object\n            logs ('str'): Output from Syslog server\n            server ('str'): Syslog server address\n        Returns:\n            Integer: OSPF down time in seconds\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_maximum_ospf_down_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L12"
    }
  },
  "get_syslog_message_time": {
    "iosxe": {
      "doc": " Get message time\n        Args:\n            message ('str'): Line from show logging command\n            regex ('str'): Regex to extract time from line\n        Returns:\n            datetime: Time extracted from message\n            None\n        Raises:\n            None\n    ",
      "module_name": "syslog.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_syslog_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/get.py#L47"
    }
  },
  "get_system_connections_sessions": {
    "junos": {
      "doc": " Get list of system connections via show system connections\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of system connection sessions\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_connections_sessions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L271"
    }
  },
  "get_system_current_time": {
    "junos": {
      "doc": "Return system timestamp\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        (Datetime): Return system timestamp\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_current_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L42"
    }
  },
  "get_system_redundancy_states": {
    "iosxe": {
      "doc": " get parsed output or dict from show redundancy states\n        Args:\n            device (`obj`): Device object\n        Returns:\n            config (`obj`): out obj\n    ",
      "module_name": "telemetry.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_redundancy_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/get.py#L36"
    }
  },
  "get_system_uptime": {
    "junos": {
      "doc": "Return system uptime\n\n    Args:\n        device (obj): Device object\n\n    Returns:\n        str: Returns system uptime in seconds\n    ",
      "module_name": "system.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_uptime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/system/get.py#L16"
    }
  },
  "get_system_users": {
    "junos": {
      "doc": " Get list of users via show system user\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            result (`list`): Get list of username and ip address pairs\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_system_users",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L238"
    }
  },
  "get_task_memory_information": {
    "junos": {
      "doc": " Returns specific data based on requirement\n\n        Args:\n            device (`obj`): Device object\n            required_attribute ('str'): Type of data to return from show task memory\n        Returns:\n            result (`str`): size of memory currently in use\n    ",
      "module_name": "task.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_task_memory_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/task/get.py#L11"
    }
  },
  "get_testcase_name": {
    "com": {
      "doc": " Get testcase name from runtime\n\n    Args:\n        runtime (`obj`, optional): easypy runtime object\n        escape_regex_chars (`bool`): escapre regex special chars. Default to False\n\n    Returns:\n        str: testcase name\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_testcase_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4062"
    }
  },
  "get_the_number_of_telemetry_report_in_system": {
    "iosxe": {
      "doc": " get the number of reports and report list\n        Args:\n            device (`obj`): Device object\n            list   ('obj'): report id list\n        Returns:\n            total number (int): total number of reports \n    ",
      "module_name": "telemetry.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_the_number_of_telemetry_report_in_system",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/get.py#L52"
    }
  },
  "get_time_source_from_output": {
    "com": {
      "doc": " Parse out 'Time Source' value from output\n        Time source output example : 'Time source is NTP, 23:59:38.461 EST Thu Jun 27 2019'\n                                     'Time source is NTP, *12:33:45.355 EST Fri Feb 7 2020'\n\n        Args:\n            output ('str'): Text output from command\n        Returns:\n            Datetime object\n            Format : datetime(year, month, day, hour, minute, second, microseconds)\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_time_source_from_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L531"
    }
  },
  "get_tolerance_min_max": {
    "com": {
      "doc": "\n       Get minimum and maximum tolerance range\n\n        Args:\n            value(int): value to find minumum and maximum range\n            expected_tolerance ('int'): Expected tolerance precentage\n\n        Returns:\n            minimum and maximum value of tolerance\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_tolerance_min_max",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2239"
    }
  },
  "get_total_asics_cores": {
    "iosxe": {
      "doc": "Get the total number of asics and cores\n\n    Args:   \n        device (obj): Device object\n        switch ('str'): switch to get info\n\n    Return: \n        total_asics: Number of asics\n        total_cores: Number of cores\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_asics_cores",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L737"
    }
  },
  "get_total_cdp_entries_displayed": {
    "iosxe": {
      "doc": "Get the Total cdp entries displayed of the device\n\n    Args:\n        device (obj): Device object\n\n    Return:\n        int: Device Total cdp entries displayed\n    ",
      "module_name": "cdp.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_cdp_entries_displayed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/get.py#L23"
    }
  },
  "get_total_space": {
    "ios": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/get.py#L597"
    },
    "iosxe": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/get.py#L240"
    },
    "iosxr": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): Directory to check space\n                               If not provided, checks current working directory\n                               i.e. media:/path/to/my/dir\n            output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            space available in bytes in `int` type or \n            None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/get.py#L159"
    },
    "nxos": {
      "doc": "Gets total space on a given directory\n        Args:\n            device ('str'): Device object\n            directory ('str'): directory to check spaces, if not provided it will check the\n            current working directory. i.e. media:/path/to/my/dir\n            output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            space available in bytes in `int` type or None if failed to retrieve available space\n    ",
      "module_name": "platform.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_total_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/get.py#L97"
    }
  },
  "get_traceroute_mpls_label_to_prefix": {
    "iosxe": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L65"
    },
    "iosxr": {
      "doc": " Get traceroute label to prefix address\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n        Returns:\n            int: Traceroute label\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_mpls_label_to_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L63"
    }
  },
  "get_traceroute_parsed_output": {
    "iosxe": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/get.py#L16"
    },
    "iosxr": {
      "doc": " Get parsed output of traceroute command\n        Args:\n            device ('obj'): Device object\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            style ('str'): Loose, Strict, Record, Timestamp, Verbose\n\n        Returns:\n            Dictionary: Parsed output of traceroute command\n        Raises:\n            None\n    ",
      "module_name": "traceroute.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traceroute_parsed_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/traceroute/get.py#L16"
    }
  },
  "get_traffic_rates": {
    "iosxe": {
      "doc": "Retrieve the formated traffic rates and tolerance margin\n\n        Args:\n            expected_rate (`str`): Expected traffic rate\n            tolerance (`str`): Tolerance margin\n\n        Returns:\n            expected_rate, expected_rate_unit, original_rate, tolerance_margin\n        Raise:\n            Exception: Failed analyzing rate\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "get_traffic_rates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L391"
    }
  },
  "get_trunk_interfaces_encapsulation": {
    "iosxe": {
      "doc": "Get trunk interfaces encapsulation\n\n    Args:\n        device ('obj'): device object\n        interfaces ('list'): interface names\n\n    Returns:\n        dictonary with interface as the key and encapsulation as the value\n\n    Raises:\n        None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_trunk_interfaces_encapsulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L1430"
    }
  },
  "get_tx_power": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured tx power \n    Args:\n        device (obj): Device object\n        ap_name (str): access point name \n    Returns:\n        tx power (str) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_tx_power",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L152"
      }
    }
  },
  "get_unconfig_line": {
    "com": {
      "doc": " unconfigure specific line\n\n        Args:\n            config_dict (`str`): Config dict\n            line (`str`): line to unconfig\n        Returns:\n            unconfig (`list`): list of unconfig strings\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_unconfig_line",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L201"
    }
  },
  "get_unused_channel": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured un used clannel list \n    Args:\n        device (obj): Device object\n    Returns:\n        unused_channel_lst (list) if success else empty string\n    Raises:\n        N/A        \n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_unused_channel",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L174"
      }
    }
  },
  "get_unused_loopback_interface": {
    "iosxe": {
      "doc": " Gets the first un-used loopback interface\n\n        Args:\n            device ('obj'): device to use\n\n        returns:\n            string: first unused loopback\n\n        Raises:\n            None\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_unused_loopback_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L398"
    }
  },
  "get_username_password": {
    "com": {
      "doc": " Gets the username and password to use to log into the device console.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "get_username_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1501"
    }
  },
  "get_valid_config_from_running_config": {
    "ios": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L190"
    },
    "iosxe": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L188"
    },
    "iosxr": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/get.py#L57"
    },
    "nxos": {
      "doc": " Returns a configuration from 'show running-config | begin version'.\n        The API will exclude any configuration and sub configuration that\n        matches regex from exclude. The returned string can be used to\n        configure a device.\n\n        Args:\n            device ('obj'): Device to run on\n            exclude ('str'): Regex of config to exclude\n            begin ('str'): Begin command for show run\n\n        Returns:\n            String of configuration\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_valid_config_from_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/get.py#L38"
    }
  },
  "get_vlan_info": {
    "ios": {
      "doc": " Api method to call parser and return device vlan information\n        Args:\n                device ('obj'): Device object\n        Returns:\n                Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/vlan/get.py#L18"
    },
    "iosxe": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/get.py#L12"
    },
    "iosxr": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/vlan/get.py#L17"
    },
    "nxos": {
      "doc": "\n    Api method to call parser and return device vlan information\n    Args:\n            device ('obj'): Device object\n    Returns:\n            Dictionary: Vlan information\n    ",
      "module_name": "vlan.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vlan_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/vlan/get.py#L17"
    }
  },
  "get_vm_power_state": {
    "linux": {
      "doc": " Get the power state of VM\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('str'): The id of the VM\n        Raises:\n            N/A\n        Returns:\n            ('str'): \"on\" or \"off\"\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vm_power_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L30"
    }
  },
  "get_vm_snapshot": {
    "linux": {
      "doc": " Get the snapshot id for the given device\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('str'): The id of the VM\n            snapshot_name ('str'): Name of the snapshot to be reverted to, \n                                    Default is golden\n        Raises:\n            N/A\n        Returns:\n            ('str'): The snapshot id\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vm_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L102"
    }
  },
  "get_vrf_interface": {
    "iosxe": {
      "doc": " Gets the subinterfaces for vrf\n\n        Args:\n            device ('obj'): device to run on\n            vrf ('str'): vrf to search under\n\n        Returns:\n            interfaces('list'): List of interfaces under specified vrf\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L85"
    }
  },
  "get_vrf_route_distinguisher": {
    "iosxe": {
      "doc": " Get default route distinguisher from show command\n\n        Args:\n            vrf ('str')     : VRF value\n            device ('obj')  : Device object\n\n        Returns:\n            route_distinguisher ('str'): Route distinguisher value\n            False\n\n        Raises:\n            Exception\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_route_distinguisher",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L37"
    }
  },
  "get_vrf_route_targets": {
    "iosxe": {
      "doc": " Get route target value from a device\n\n        Args:\n            address_family ('str'): address family value\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            vrf('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n\n        Returns:\n            Route target value\n            None\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L110"
    }
  },
  "get_vrf_vrfs": {
    "iosxe": {
      "doc": " Get all vrfs from device\n\n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            out ('dict'): Vrf dictionary\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_vrf_vrfs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/get.py#L12"
    }
  },
  "get_wireless_management_trustpoint_name": {
    "iosxe": {
      "c9800": {
        "doc": "Get configured trustpoint\n    Args:\n        device (obj): Device object\n    Returns:\n        Trustpoint name (str) if success else empty string\n        \"\"\n    ",
        "module_name": "platform.get",
        "package": "genie.libs.sdk.apis",
        "uid": "get_wireless_management_trustpoint_name",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/get.py#L11"
      }
    }
  },
  "get_yaml_device_interface": {
    "iosxe": {
      "doc": "Gets the interface and interfaces's alias connected to devices, as per yaml file.\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            alias (`str`): interface name\n    ",
      "module_name": "interface.get",
      "package": "genie.libs.sdk.apis",
      "uid": "get_yaml_device_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/get.py#L82"
    }
  },
  "hardware_qfp_active_ipsec_data_drop_clear": {
    "iosxe": {
      "doc": " execute clear harware active ipsec data drop clear command\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "hardware_qfp_active_ipsec_data_drop_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L747"
    }
  },
  "hardware_qfp_active_statistics_drop_clear": {
    "iosxe": {
      "doc": " execute clear harware qfp stats drop clear command\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "hardware_qfp_active_statistics_drop_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L729"
    }
  },
  "has_configuration": {
    "com": {
      "doc": " Verifies if configuration is present\n        Args:\n            configuration_dict ('dict'): Dictionary containing configuration\n            configuration ('str'): Configuration to be verified\n        Returns:\n            True if configuration is found\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "has_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L330"
    }
  },
  "health_core": {
    "iosxe": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core or \n                                            system-report is generated on device\n                                            ex.) `bootflash:/core/`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            health_data (`dict`): return health_data format.\n                                  ex.)\n                                  {\n                                      \"health_data\": {\n                                          \"num_of_cores\": 1,\n                                          \"core_files\": [\n                                              {\n                                                  \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                  \"decode\": \"\"\"\n                                                    <decode output>\n                                                  \"\"\"\n                                              }\n                                          ]\n                                      }\n                                   }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L364"
    },
    "iosxr": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : default directory where core is generated \n                                            on device\n                                            ex.) `harddisk:/dumper`\n            output      (`str`) : Output of `dir` command\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L342"
    },
    "nxos": {
      "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
      "module_name": "health.health",
      "n9k": {
        "doc": "Get the default directory of this device\n\n        Args:\n            device      (`obj`) : Device object\n            default_dir (`str` or `list`) : N/A. location will be identified\n                                            from show cores command\n            output      (`str`) : Output of `dir` command. Default to None\n            keyword     (`list`): List of keywords to search\n            num_of_cores (`bool`): flag to return number of core files\n                                   Default to False\n            remote_device (`str`): remote device in testbed yaml\n                                   Default to None\n            remote_path (`str`): path with/without file on remote device\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            protocol (`str`): protocol for copy. Default to scp\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            archive     (`bool`): flag to save the decode output as file in archive\n                                  Defaults to False\n            delete_core (`bool`): flag to delete core files only when copying to\n                                  remove_device is successfully done\n                                  Defaults to False\n            ### CISCO INTERNAL ###\n            decode      (`bool`): flag to enable for decoding core\n                                  copy core file to remote_server and decode on remote_server\n            decode_timeout (`int`): timeout to execute decode script\n                                    Default to 300\n        Returns:\n            all_corefiles (`dict`): return health_data format.\n                                    ex.)\n                                    {\n                                        \"health_data\": {\n                                            \"num_of_cores\": 1,\n                                            \"core_files\": [\n                                                {\n                                                    \"filename\": \"asr-MIB-1_RP_1_nginx_23178_20210317-175351-UTC.core.gz\",\n                                                    \"decode\": \"\"\"\n                                                        <decode output>\n                                                    \"\"\"\n                                                }\n                                            ]\n                                        }\n                                    }\n    ",
        "module_name": "health.health",
        "package": "genie.libs.sdk.apis",
        "uid": "health_core",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/n9k/health/health.py#L16"
      },
      "package": "genie.libs.sdk.apis",
      "uid": "health_core",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L311"
    }
  },
  "health_cpu": {
    "iosxe": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                if not specified, will return one ALL_PROCESSES \n                                with total cpu load\n            check_key  (`str`): Key to check in parsed output\n                                Default to `five_sec_cpu`\n            check_key_total (`str`): Key to check in parsed output for Total\n                                     Default to `five_sec_cpu_total`\n            add_total (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n            timeout    (`int`): Timeout(secs). Defaults to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                     {\n                                         \"health_data\": [\n                                             {\n                                                 \"process\": \"OMP\",\n                                                 \"value\": 0.0,\n                                             },\n                                             {\n                                                 \"process\": \"NAT-ROUTE\",\n                                                 \"value\": 0.0,\n                                             }\n                                         ]\n                                     }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L17"
    },
    "iosxr": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n                                Default to None\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_min_cpu`\n            check_key_total (`str`): Key to check in parsed output\n                                     for Total. Default to `one_min_cpu`\n            add_total    (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n                                Default to None\n            timeout    (`int`): Timeout(secs). Defaults to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     Example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"netconf\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"bgp\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L15"
    },
    "nxos": {
      "doc": "Get cpu load on device\n\n        Args:\n            device     (`obj`): Device object\n            command    (`str`): Override show command\n                                Default to `show processes cpu`\n            processes (`list`): List of processes to check\n            check_key  (`str`): Key to check in parsed output\n                                Default to `one_sec`\n            check_key_total (`str`): N/A\n            add_total (`bool`): If True, add total cpu load\n            output     (`str`): Output of show command\n            timeout    (`int`): Timeout(secs). Defaults to None\n        Returns:\n            cpu_load_dict  (`dict`): Cpu load dictionary on the device\n                                     example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                     }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_cpu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L16"
    }
  },
  "health_logging": {
    "iosxe": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                               {\n                                   \"health_data\": {\n                                       \"num_of_logs\": 1,\n                                       \"logs\": [\n                                           {\n                                               \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                               \"decode\": \"<decode output>\" # Optional\n                                           }\n                                       ]\n                                   }\n                               }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L295"
    },
    "iosxr": {
      "doc": "Get logging messages\n\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): N/A\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                                {\n                                    \"health_data\": {\n                                        \"num_of_logs\": 1,\n                                        \"logs\": [\n                                            {\n                                                \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                                \"decode\": \"<decode output>\", # Optional\n                                            }\n                                        ]\n                                    }\n                                }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L269"
    },
    "nxos": {
      "doc": "Get logging messages\n        Args:\n            device    (`obj`): Device object\n            command   (`str`): show command. Default to 'show logging logfile'\n            files    (`list`): Not applicable on this platform\n            keywords (`list`): List of keywords to match.\n                               Default to ['traceback', 'Traceback', 'TRACEBACK']\n            output    (`str`): Output of show command. Default to None\n            num_of_logs (`bool`): flag to return number of log messages\n                                  Default to False\n            clear_log (`bool`): flag to clear logging message\n                                Default to False\n            health (`bool`): wheather return health_data format or not\n                             Default to True\n        Returns:\n            logs     (`dict`): return health_data format.\n                               ex.)\n                                {\n                                    \"health_data\": {\n                                        \"num_of_logs\": 1,\n                                        \"logs\": [\n                                            {\n                                                \"line\": \"-Traceback= D667B8 D66F04 41463C 40FFF8 411834 423A6C A6E428 A64EF8 (EEHYP_CS_801-1)\",\n                                                \"decode\": \"<decode output>\" # Optional\n                                            }\n                                        ]\n                                    }\n                                }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L243"
    }
  },
  "health_memory": {
    "iosxe": {
      "doc": "Get memory usage on device. Threshold can be passed as argument.\n       Check memory usage from header of show command first, then in case \n       the usage exceeds threshold, capture all the show output for detail.\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `processor_pool`\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n            timeout       (`int`): Timeout(secs). Defaults to None\n            threshold     (`int`): Threshold(%) of memory usage\n                                   Defaults to 90\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0012294695662956926,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0012294695662956926,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/health/health.py#L125"
    },
    "iosxr": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n                                    Default to None\n            check_key      (`str`): Key to check in parsed output\n                                    Default to `dynamic`\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n                                    Deault to None\n            timeout        (`int`): Timeout(secs). Defaults to None\n            threshold      (`int`): N/A\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"OMP\",\n                                                    \"value\": 0.0012294695662956926,\n                                                },\n                                                {\n                                                    \"process\": \"NAT-ROUTE\",\n                                                    \"value\": 0.0012294695662956926,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/health/health.py#L129"
    },
    "nxos": {
      "doc": "Get memory usage on device\n\n        Args:\n            device         (`obj`): Device object\n            command        (`str`): Override show command\n                                    Default to `show processes memory`\n            processes     (`list`): List of processes to check\n                                    If both processes and check_key are given,\n                                    processes are preferred.\n            check_key      (`str`): N/A. not used for NXOS\n            check_key_total (`str`): N/A. not used for NXOS\n            add_total    (`bool`): If True, add total memory usage\n            output         (`str`): Output of show command\n            timeout        (`int`): Timeout(secs). Defaults to None\n            threshold      (`int`): N/A\n        Returns:\n            memory_usage_dict (`dict`): memory usage dict on the device (percentage)\n                                        example:\n                                        {\n                                            \"health_data\": [\n                                                {\n                                                    \"process\": \"/opt/mtx/bin/grpc -i 2626 -I\",\n                                                    \"value\": 0.0,\n                                                },\n                                                {\n                                                    \"process\": \"/sbin/klogd -2 -x -c 1\",\n                                                    \"value\": 0.0,\n                                                }\n                                            ]\n                                        }\n    ",
      "module_name": "health.health",
      "package": "genie.libs.sdk.apis",
      "uid": "health_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/health/health.py#L124"
    }
  },
  "hw_module_beacon_slot_on_off": {
    "iosxe": {
      "doc": " ON/OFF beacon slot\n        Args:\n            device ('obj'): Device object\n            slot('int'): Switch number\n            operation('str'): ON/OFF\n            \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "hw_module_beacon_slot_on_off",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L420"
    }
  },
  "hw_module_switch_num_usbflash_security_password": {
    "iosxe": {
      "doc": "  configure hw-module switch <switch_number> usbflash1 security enable or diasble password\n            Args:\n            device ('obj'): device to use\n            switch_number ('str'): switch number\n            action ('str') : enable or disable\n            pwd ('str') : password\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "hw_module_switch_num_usbflash_security_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L143"
    }
  },
  "install_autoupgrade": {
    "iosxe": {
      "doc": " Perform install upgrade on the device\n    Args:\n        device ('obj'): Device object\n\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "install_autoupgrade",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/configure.py#L77"
    }
  },
  "install_remove_version": {
    "iosxe": {
      "doc": "\n    Performs install remove for the version provided on the device\n    Args:\n        device ('obj'): Device object\n        version ('str, optional'): Base Version to remove\n        timeout ('int, optional'): Timeout value\n        connect_timeout ('int, optional'): Time to wait before sending the promt\n                                            (when pattern \"SUCCESS: install_remove\"\n                                             matches)\n    Returns:\n        True if install remove is successful\n        False if install remove is not successful\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "install.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "install_remove_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/configure.py#L12"
    }
  },
  "int_to_mask": {
    "com": {
      "doc": " Convert int to mask\n        Args:\n            mask_int ('int'): prefix length is convert to mask\n        Returns:\n            mask value\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "int_to_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L347"
    }
  },
  "interface_counter_check": {
    "iosxe": {
      "doc": "Verifies packet flow on interface\n\n        Args:\n            device (`obj`): Device object\n            interface_name (`str`): interface to be verified\n            tx_packets (`int`): packets transmitted by ixia\n            pkt_rate (`int`): packet sent per second\n            direction ('str'): incoming or outgoing\n            max_time (int, optional): Max time in seconds for check. Defaults to 60.\n            check_interval ('int'): Loop interval (default is 10s)\n        Returns:\n            result(`bool`): True if expected number of packets flow on interface\n                            or else return Flase\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "interface_counter_check",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L1008"
    }
  },
  "ipv6_build_linklocal": {
    "iosxe": {
      "doc": "\n    Description:\n        Build a link-local IPv6 address from the supplied MAC address.\n    Arguments:\n        mac ('str'): MAC address to parse\n    Returns:\n        String containing IPv6 address\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_build_linklocal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L70"
    }
  },
  "ipv6_build_part_linklocal": {
    "iosxe": {
      "doc": "\n    Description:\n        Build the lower part of a link-local IPv6 address from the supplied\n        MAC address.\n    Arguments:\n        mac ('str'): MAC address to parse\n    Returns:\n        String containing the IPv6 address\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_build_part_linklocal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L94"
    }
  },
  "ipv6_nd_raguard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 nd raguard policy to target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_nd_raguard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1108"
    }
  },
  "ipv6_nd_raguard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 nd raguard policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 nd raguard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_nd_raguard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1140"
    }
  },
  "ipv6_shorten_address": {
    "iosxe": {
      "doc": "\n        Description: \n            Convert IPv6 address into its shortened format.\n\n        Arguments:\n            address (str): IPv6 address\n\n        Returns:\n            Shortened IPv6 (str) : Shortened IPv6 address\n\n        Example:\n            3ffe:0002:0000:0000:0000:0000:0000:0001 -> 3FFE:2::1\n    ",
      "module_name": "routing.util",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_shorten_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/util.py#L125"
    }
  },
  "ipv6_source_guard_attach_policy": {
    "iosxe": {
      "doc": " Attach ipv6 source-guard policy to target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to attach ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_source_guard_attach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1172"
    }
  },
  "ipv6_source_guard_detach_policy": {
    "iosxe": {
      "doc": " Detach ipv6 source-guard policy from target\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            interface ('str', optional): interface name. Defaults to None\n            vlan ('str', optional): vlan id list - Eg. \"1-10,15\". Defaults to None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to detach ipv6 source-guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "ipv6_source_guard_detach_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1204"
    }
  },
  "is_bgp_import_path_selection": {
    "iosxe": {
      "doc": " Verifies that import path selection of type is in running\n        config\n\n        Args:\n            device('obj'): device to use\n            vrf('str'): vrf name\n            selection_type('str'): import path selection type to verify\n            max_time('int'): max time to wait\n            check_interval('int'): how often to check        \n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_import_path_selection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L277"
    }
  },
  "is_bgp_neighbor_authentication_key_configured": {
    "junos": {
      "doc": "\n    Verify that all of bgp neighbors have Authentication key is configured\n\n    Args:\n        device('obj'): device to use\n        interface('str'): peer interface. Default to None.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbor_authentication_key_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L417"
    }
  },
  "is_bgp_neighbors_enabled": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is enabled and in either Idle or Active\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L883"
    }
  },
  "is_bgp_neighbors_established": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is established\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are established\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default of 3 checks over 15 seconds\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_established",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L911"
    }
  },
  "is_bgp_neighbors_shutdown": {
    "iosxe": {
      "doc": " Helper function for is_bgp_neighbors_state.\n        Verifies BGP neighbor is shutdown\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L855"
    }
  },
  "is_bgp_neighbors_state": {
    "iosxe": {
      "doc": " Verifies BGP neighbor is in state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): neighbors to verify are shutdown\n            address_family('str'): address_family neighbor is under\n            state('regex str'): regex to match\n            timeout('obj'): Use to override default timeout\n\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_neighbors_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L817"
    }
  },
  "is_bgp_running": {
    "junos": {
      "doc": "\n    Verify if bgp is running\n\n    Args:\n        device('obj'): device to use\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_bgp_running",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L381"
    }
  },
  "is_connected_via_vty": {
    "iosxe": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L346"
    },
    "iosxr": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/utils.py#L4"
    },
    "nxos": {
      "doc": " Check if we are connected via VTY\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_connected_via_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#L145"
    }
  },
  "is_current_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check current boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_current_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L33"
    }
  },
  "is_eem_applet_configured": {
    "iosxe": {
      "doc": " Verify if EEM applet is configured in running config\n\n        Args:\n            device ('obj') : Device object\n            applet_name ('str') : Applet name\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "eem.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_eem_applet_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/verify.py#L7"
    }
  },
  "is_interface_changed_state_log": {
    "iosxe": {
      "doc": " Verify interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_changed_state_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L147"
    }
  },
  "is_interface_igp_sync_mpls_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L93"
    },
    "iosxr": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show mpls ldp igp sync'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf  ('str')            : vrf name\n            device ('str')          : Device to be executed commands\n        Raises:\n            None\n\n        Returns\n            True\n            False\n\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_mpls_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L54"
    }
  },
  "is_interface_igp_sync_ospf_enabled": {
    "iosxe": {
      "doc": " Verifies if interface has LDP IGP sync enabled \n        from command 'show ip ospf mpls ldp interface'\n        \n        Args:\n            parsed_output ('dict')  : Output from parser\n            interface ('str')       : Interface being checked\n            vrf      ('str')        : vrf name\n            address_family ('str')  : Interface address family (ipv4 or ipv6)\n            instance ('str')        : Instance number\n            area_address ('str')    : Area address\n            device                  : Device to be executed command\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Raises:\n            Exception\n\n        Returns\n            None\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_igp_sync_ospf_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L341"
    }
  },
  "is_interface_present_running_config": {
    "iosxe": {
      "doc": " Verify if interface is present in running-config\n        Args:\n            device ('obj')      : Device object\n            interface ('str')   : Interface\n\n        Raises:\n            SubCommandFailure\n            Exception\n        Returns\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_present_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L695"
    }
  },
  "is_interface_traffic_flowing_at_rate": {
    "iosxe": {
      "doc": " Verify if interface traffic is flowing at generated rate\n        Args:\n            interface_rate ('float'): Interface rate\n            tgn_tx_rate ('float'): Generated rate\n            tolerance ('float'): Margin of error in percentage \n\n        Returns:\n            True\n            False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_interface_traffic_flowing_at_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L741"
    }
  },
  "is_issu_in_state": {
    "iosxe": {
      "doc": " Verify if ISSU is in state for a specific slot\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot for which we need to check ISSU state\n            expected_state ('str'): Acceptable ISSU states are:\n                                        - loadversion\n                                        - runversion\n                                        - acceptversion\n                                        - commitversion\n            max_time ('int'): Max time checking issu state\n            interval ('int': Interval checking\n        Raise:\n            None\n        Return\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L55"
    }
  },
  "is_issu_rollback_timer_in_state": {
    "iosxe": {
      "doc": " Verify if issu rollback timer is in state\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot name\n            expected_state ('str'): Expected state ('active', 'inactive')\n            max_time ('int'): Max time checking \n            interval ('int'): Check interfal\n        Return:\n            True\n            False\n        Raise:\n            SchemaEmptyParserError\n\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_rollback_timer_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L101"
    }
  },
  "is_issu_terminal_state_reached_on_slot": {
    "iosxe": {
      "doc": " Verify if a slot has reached\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot to check\n            max_time ('int'): Max time checking\n            interval ('int'): Interval of checking\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "issu.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_issu_terminal_state_reached_on_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/verify.py#L18"
    }
  },
  "is_l2vpn_storm_control_packet_count_increased": {
    "iosxe": {
      "doc": " Verify packet count has increased\n        \n            Args:\n                intial_discard_packets ('dict'): previous dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234234,\n                            'unicast': 123123\n                        }\n                current_discard_packets ('dict'): current dictionary of packet counts for flow groups\n                    ex.) \n                        {\n                            'broadcast': 234534,\n                            'unicast': 123523\n                        }\n            Returns:\n                True\n                False\n            Raises:\n                None\n        ",
      "module_name": "l2vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_l2vpn_storm_control_packet_count_increased",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L126"
    }
  },
  "is_logging_bfd_down_logged": {
    "iosxe": {
      "doc": " Verifies bfd is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_bfd_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L61"
    }
  },
  "is_logging_ospf_neighbor_down_logged": {
    "iosxe": {
      "doc": " Verifies ospf neighbor is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_ospf_neighbor_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L84"
    }
  },
  "is_logging_ospf_spf_logged": {
    "junos": {
      "doc": "\n    Verify SPF change log\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('int'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_ospf_spf_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L14"
    }
  },
  "is_logging_static_route_down_logged": {
    "iosxe": {
      "doc": " Verifies static route is logged down within specified time from issued command\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n\n        Returns:\n            ('str') timestamp of command if found else False\n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_static_route_down_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L108"
    }
  },
  "is_logging_string_matching_regex_logged": {
    "iosxe": {
      "doc": " Verifies string that matches regex is logged - ignoring logs from before passed timestamp\n\n        Args:\n           device ('obj'): device to use\n           oldest_timestamp ('str'): oldest timestamp to match (format: hh:mm:ss.sss)\n           regex ('str'): regex string to match\n\n        Returns:\n            timestamp of command if found else False ('str') \n        Raises:\n            None\n    ",
      "module_name": "logging.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_logging_string_matching_regex_logged",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/verify.py#L17"
    }
  },
  "is_mpls_ldp_neighbor_in_state": {
    "iosxe": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L242"
    },
    "iosxr": {
      "doc": " Checks if ldp neighbor is in state\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to search under\n            state ('str'): state\n\n        return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_mpls_ldp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L159"
    }
  },
  "is_next_reload_boot_variable_as_expected": {
    "nxos": {
      "doc": " Check next boot variables\n        Args:\n            device ('obj'): Device object\n            system ('str'): System image\n            kickstart ('str'): Kickstart image\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_next_reload_boot_variable_as_expected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L16"
    }
  },
  "is_ntp_clock_synchronized": {
    "iosxe": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address. \n                            If None, peer/reference clock is ignored.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L78"
    },
    "iosxr": {
      "doc": " Verify that clock is synchronized to given peer\n\n        Args:\n            device (`obj`): Device object\n            ip_address_peer (`str`): peer ip address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 60\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ntp_clock_synchronized",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L71"
    }
  },
  "is_ospf_neighbor_established_on_interface": {
    "iosxe": {
      "doc": " Verify OSPF is established on the interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): Maximum wait time\n            check_interval (`int`): Check interval\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_neighbor_established_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L193"
    }
  },
  "is_ospf_neighbor_state_changed_log": {
    "iosxe": {
      "doc": " Verify ospf interface didn't flap in the log\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_neighbor_state_changed_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L225"
    }
  },
  "is_ospf_shutdown": {
    "iosxe": {
      "doc": " Verifies ospf is shutdown by verifying there are\n        no neighbors\n\n        Args:\n            device('obj'): device to use\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            interface ('str'): Interface name\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L243"
    }
  },
  "is_ospf_tilfa_enabled_in_sr": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in SR\n\n    Args:\n        device ('str'): Device object\n        interface ('str'): Interface name\n        process_id ('int'): Process id\n        area ('str'): Ospf area\n        neighbor_address ('str'): Neighbor address\n        max_time (int): Maximum wait time in seconds checking an ouput\n        check_interval (int): Wait time between iterations when looping\n        output ('dict'): Parsed output of command 'show ip ospf segment-routing protected-adjacencies'\n    Raises:\n        None\n    Returns:\n        True/False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_ospf_tilfa_enabled_in_sr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L952"
    }
  },
  "is_platform_slot_in_state": {
    "iosxe": {
      "doc": " Verify if slot is in state\n\n        Args:\n            device ('obj'): Device object\n            slot ('str'): Slot number\n            state ('str'): State being checked\n            max_time ('int'): Max time checking\n            interval ('int'): Interval checking\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_platform_slot_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L19"
    }
  },
  "is_process_started": {
    "linux": {
      "doc": " Checks if a trex process is running right now.\n        Args:\n            name (str): Name of the process to search for\n        Raise:\n            None\n        Returns:\n            Running (bool): Whether or not the process is running\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "is_process_started",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L268"
    }
  },
  "is_push_present_in_route": {
    "junos": {
      "doc": "Check if Push is presnt in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_push_present_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L883"
    }
  },
  "is_redundancy_state_in_state": {
    "iosxe": {
      "doc": " Verify if redundancy state is in state:\n        Args:\n            device ('obj'): Device object\n            output ('dict'): Parsed output of show redundancy state\n            expected_state ('str'): Expected state\n            max_time ('int'): Max time in seconds to check redundancy state\n            check_interval ('int'): Interval in seconds between each check\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "redundancy.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_redundancy_state_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/redundancy/verify.py#L16"
    }
  },
  "is_route_in_bgp_table": {
    "iosxe": {
      "doc": " Verify if route is in BGP table\n        Args:\n            device ('obj')          : Device object\n            address_family('str')   : Address family to be used in show command\n            default_rd('str')       : Route distinguisher from VRF list\n            default_vrf('str')      : Default VRF name\n            routes_dict ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_route_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1491"
    }
  },
  "is_router_bgp_configured_with_four_octet": {
    "iosxe": {
      "doc": " Verifies that router bgp has been enabled with four\n        octet capability and is in the established state\n\n        Args:\n            device('obj'): device to check\n            vrf('vrf'): vrf to check under\n            neighbor_address('str'): neighbor address to match\n            max_time('int'): maximum time to wait\n            check_interval('int'): how often to check\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_router_bgp_configured_with_four_octet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L229"
    }
  },
  "is_routing_repair_path_in_cef": {
    "iosxe": {
      "doc": " Verify 'repair path' is presente in express forwarding\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds retrieving and checking output\n            check_interval ('int')\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_repair_path_in_cef",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L17"
    }
  },
  "is_routing_repair_path_in_route_database": {
    "iosxe": {
      "doc": " Verify if 'repair path' is present in route database\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_repair_path_in_route_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L725"
    }
  },
  "is_routing_route_targets_present": {
    "iosxe": {
      "doc": " Verify route target is present\n\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): address family to check\n            routes ('list'): list of routes to compare\n                ex.) routes = ['192.168.1.1', '192.168.1.2']\n            ignore_routes ('list'): list of routes to ignore with type\n                ex.) ignore_routes = ['L', 'B', 'C']\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_routing_route_targets_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L684"
    }
  },
  "is_snmp_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in snmp server\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_snmp_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L131"
    }
  },
  "is_syslog_message_received": {
    "iosxe": {
      "doc": " Verify if a message was received in Syslog server.\n        It needs a output from a tcpdump command\n\n        Args:                        \n            device ('obj'): Device object\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n            message ('str'): Message to be verified in Syslog server\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_syslog_message_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L312"
    }
  },
  "is_type_10_opaque_area_link_states_originated": {
    "iosxe": {
      "doc": " Verifies if Type 10 opaque area link states are originated\n        from command 'show ip ospf database opaque-area self-originate'\n\n        Args:\n            device (`obj`): Device to be executed command\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_type_10_opaque_area_link_states_originated",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L662"
    }
  },
  "is_version_image_installed": {
    "iosxe": {
      "doc": " Verify if image is installed on device\n        Args:\n            device ('str'): Device object\n            image ('str'): Image being verified\n        Raise:\n            None\n        Return:\n            True\n            False\n    ",
      "module_name": "version.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "is_version_image_installed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/version/verify.py#L8"
    }
  },
  "issu_acceptversion": {
    "iosxe": {
      "doc": " Execute issu acceptversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu acceptversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_acceptversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L291"
    }
  },
  "issu_commitversion": {
    "iosxe": {
      "doc": " Execute issu commitversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception: Failed executing 'issu commitversion' command\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_commitversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L315"
    }
  },
  "issu_loadversion": {
    "iosxe": {
      "doc": " Execute issu loadversion command on device\n        Args:\n            device ('obj'): Device object\n            standby_slot ('int'): Standby slot number\n            disk ('str'): Disk name\n            image ('str'): Image name\n            timeout ('int'): Time out in seconds\n        Raise:\n            Exception: Failed to load version on device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_loadversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L233"
    }
  },
  "issu_runversion": {
    "iosxe": {
      "doc": " Execute issu runversion on device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Timeout in seconds\n        Raise:\n            Exception Failed to reconnect to device\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "issu_runversion",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L263"
    }
  },
  "kill_processes": {
    "linux": {
      "doc": " Kills the processes with given PIDs \n        Args:\n            pids ('list'): List of PIDs\n            ex.) pids = [12, 15, 16]\n        Raise:\n            None\n        Returns:\n            Failed (list): List of pids that failed to be killed\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "kill_processes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L63"
    }
  },
  "l2vpn_xconnect_context": {
    "iosxe": {
      "doc": "configure L2VPN xconnect context\n        Args:\n        device (`obj`): Device \n        context_name (`str`): l2vpn cross connect name\n        pseudowire_member (`str`) : member pseudowire name \n        interface (`str`) : member interface name.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "l2vpn_xconnect_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1121"
    }
  },
  "l2vpn_xconnect_context_interface": {
    "iosxe": {
      "doc": "configure L2VPN xconnect context with internwtworking\n        Args:\n        device ('obj'): Device \n        context_name ('str'): l2vpn cross connect name\n        pseudowire_member ('str') : member pseudowire name \n        interface ('str') : member interface name.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "l2vpn_xconnect_context_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1939"
    }
  },
  "launch_simulation": {
    "virl": {
      "doc": "launch simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            simulation_data (`str`): simulation data \n            connection_alias (`str`): connection_alias\n\n        Returns:\n            result: result of launching simulation\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "launch_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L12"
    }
  },
  "learn_process_pids": {
    "linux": {
      "doc": " Finds the PIDs of processes that match the search\n        Args:\n            search ('str'): The name of the processes to find\n        Raise:\n            None\n        Returns:\n            PIDs ('list'): [pid]\n            ex.) PIDs = ['123', '456']\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "learn_process_pids",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L43"
    }
  },
  "learn_routem_configs": {
    "linux": {
      "doc": " Gets the current running config on device\n        Args:\n            output_config ('bool'): Specifies whether the config\n            or path of the config is outputted \n        Raise:\n            None\n        Returns:\n            Config ('dict'): {pid: config}\n            ex.) Config = {'123': 'config'}\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "learn_routem_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L10"
    }
  },
  "license_smart_factory_reset": {
    "iosxe": {
      "doc": " Clears licensing information from the trusted store and memory\n        Example : license smart factory reset\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "license_smart_factory_reset",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/execute.py#L12"
    }
  },
  "license_smart_sync_all": {
    "iosxe": {
      "doc": " license smart sync all \n        \n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n            \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "license_smart_sync_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L909"
    }
  },
  "load_dict_from_json_file": {
    "com": {
      "doc": " load python dictionary from a JSON file\n        Args:\n            filename (`string`): JSON file name\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.load_dict_from_json_file('merged_dict')\n        {\n            'a': {\n                'b': 1,\n            },\n            'c': {\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "load_dict_from_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2794"
    }
  },
  "load_jinja": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            device (`obj`): Device object\n            vrf_name (`str`): Vrf name to be used in configuration\n            bandwidth (`int`): In bps, bandwidth for traffic flow\n            packet_size (`int`): Config packet size\n            ref_packet_size (`int`): Refrenced packet size\n            time_interval (`float`): In seconds, used for calculating bc\n            ipp4_bps (`int`): In bps, bandwidth for IPP4 traffic\n            ipp2_bw_percent (`int`): In percents, bandwidth for IPP2 traffic\n            ipp0_bw_percent (`int`): In percents, bandwidth for IPP0 traffic\n            interface (`str`): Where to apply the configured policies\n\n        Returns:\n            out\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "load_jinja",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L484"
    }
  },
  "load_jinja_template": {
    "com": {
      "doc": "Use Jinja templates to build the device configuration\n\n        Args:\n            path (`str`): Path to file directory\n            file (`str`): File name\n            trim_blocks (`bool`): Whether to trim newlines or not. Defaults to True\n            lstrip_blocks (`bool`): Whether to trim leading whitespace or not. Defaults to True\n            kwargs (`dict`): Key value pairs\n        Returns:\n            out (`str`): Rendered template\n        Raises:\n            TemplateNotFound\n    ",
      "module_name": "jinja.get",
      "package": "genie.libs.sdk.apis",
      "uid": "load_jinja_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/jinja/get.py#L40"
    }
  },
  "mask_to_int": {
    "com": {
      "doc": " Convert mask to int\n        Args:\n            mask ('str'):  mask to int\n        Returns:\n            int value\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "mask_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L362"
    }
  },
  "modify_filename": {
    "com": {
      "doc": " Truncation is done such that protocol:/directory/image should not\n        exceed the limited characters.\n        This for older devices, where it does not allow netboot from rommon,\n        if image length is more than provided limit (63 characters by default).\n        Returns truncated image name, if protocol:/directory/image length\n        exceeds limit, else image return without any change\n        Args:\n            device\n            file ('str'): the file to be processed\n            directory ('str'): the directory where the image will be copied\n            protocol ('str'): the protocol used in the url\n            server ('str'): server address used in calculation, if not provided then it\n                            will take the longest server address from the testbed\n            append_hostname ('bool'): option to append hostname to the end of the file\n            check_image_length ('bool'): option to check the name length exceeds the limit\n            limit ('int'): character limit of the url, default 63\n            unique_file_name ('bool'): append a six digit random number to the end of\n                                        file name to make it unique\n            unique_number ('int'): provide a number to be used with unique_file_name\n                                    instead of a random one\n            new_name ('str'): replace original file name with new_name\n\n        Raises:\n            ValueError\n        Returns:\n            truncated image name\n            ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "modify_filename",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1259"
    }
  },
  "modify_pbr_route_map": {
    "iosxe": {
      "doc": " Modify route-map\n\n        Args:\n            device ('obj'): Device object\n            route_map_name ('str'): Route map to be modified.\n            acl_name ('str',optional): Name of ACL that is to be removed from route map.\n            next_hop_ip ('str',optional): Next-hop ip address that is to be removed from route map.\n                                          (used for default next hop ip address also.) \n            default_next_hop ('str', optional): Enable to remove Default Next-hop action. Default is None.\n            vrf ('str',optional): Vrf name used in route map.\n            set_int ('str',optional): Interface name to be removed from 'set interface' action.\n            set_vrf ('str',optional): Enable to remove 'set vrf' action. Uses 'vrf' argument for vrf name\n                                      Default value None.\n            seq_num ('str',optional): Sequence number of the rule to be modified. Default is '10'\n            rule_type ('str', optional): (permit | deny) Permission to be applied for the specific sequence.\n                                         Default is 'permit'.\n            is_ipv6 ('bool',optional): (True | False) set 'True' to modify ipv6 route-map. Default is 'False'.\n            remove_acl ('bool',optional): (True | False) set 'True' to remove ACL mapping. \n                                          acl_name should be provided. \n            remove_action ('bool',optional): (True | False) set 'True' to remove 'set action' based on the arguments populated.\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "modify_pbr_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L138"
    }
  },
  "netmask_to_bits": {
    "com": {
      "doc": " Convert netmask to bits\n        Args:\n            net_mask ('str'): Net mask IP address\n            ex.) net_mask = '255.255.255.255'\n        Raise:\n            None\n        Returns:\n            Net mask bits\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "netmask_to_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L819"
    }
  },
  "number_to_string": {
    "com": {
      "doc": " Converts from number(integer|float) to number(string)\n        Args:\n            number (`int|float`): number (integer|float)\n        Raise:\n            Exception\n        Returns:\n            ret_str ('str'): number (string)\n\n        Example:\n\n        >>> dev.api.number_to_string(1)\n        '1'\n\n        >>> dev.api.number_to_string(1.1)\n        '1.1'\n\n        >>> dev.api.number_to_string('1')\n        '1'\n\n        >>> dev.api.number_to_string('1.1')\n        '1.1'\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "number_to_string",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1701"
    }
  },
  "nxapi_method_nxapi_cli": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - output_schema, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json_rpc, json, xml\n\n            command_type (str): Type of command:\n                - cli, cli_ascii, cli_array, cli_show, cli_show_ascii,\n                  cli_conf, bash\n\n            # Optional depending on above arguments\n            error_action (str): Action to take if error:\n                - stop_on_error, continue_on_error, rollback_on_error\n            chunk (bool): True to chunk output else False\n            sid (str): SID from previous chunk to get the next chunk\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_nxapi_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L148"
    }
  },
  "nxapi_method_nxapi_rest": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-REST (DME)\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - convert, convert-with-dn, convert-for-replace, send\n\n            commands (str): The input (CLI commands, models, etc)\n\n            # For convert action\n            input_type (str): Specify input type:\n                - cli, model\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n\n            # Optional\n            retries (int): number of retries (default: 3)\n\n            # Optional\n            retry_wait (int): number of seconds to wait before retrying\n                              (default: 10)\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_nxapi_rest",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L9"
    }
  },
  "nxapi_method_restconf": {
    "nxos": {
      "doc": " NX-API Method: NXAPI-CLI\n\n        Args:\n            device (obj): Device to run on\n\n            action (str): One of these actions:\n                - send, convert\n\n            commands (str): The input (CLI commands, models, etc)\n\n            message_format (str): Format of the message:\n                - json, xml\n\n            # For send action\n            dn (str): endpoint for any send actions\n            rest_method (str): POST, GET, etc...\n\n            # Optional\n            timeout (int): timeout for rest call\n\n            # Optional if this is the only connection defined\n            alias (str): The alias for the nxapi connection\n\n            # Optional\n            expected_return_code (str): used for negative testing.\n    ",
      "module_name": "nxapi.rest",
      "package": "genie.libs.sdk.apis",
      "uid": "nxapi_method_restconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/nxapi/rest.py#L239"
    }
  },
  "parse_tacacs_packet": {
    "iosxe": {
      "doc": " Parsing tacacs pcap file data\n        Args:\n            decrypted_pcap_file: txt file having tacacs packet data\n        Returns:\n            tacacs_json_dict: dict contains tacacs data as\n            json format\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "parse_tacacs_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L856"
    }
  },
  "perform_issu": {
    "iosxe": {
      "doc": " Execute ISSU on device\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name on disk\n            disk ('str'): Disk where is located image\n            timeout ('int'): Timeout in second for each section\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "perform_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L115"
    }
  },
  "perform_ssh": {
    "iosxe": {
      "doc": "\n    Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            hostname (`str') : hostname of the remote device\n            ip_address (`str`): IPv4/IPv6 address for remote device/server\n            enable_pass (`str`): Enable password\n                            default 'lab'\n            username (`str`): username to login into remote device/server\n            password (`str`): password to login into remote device/server\n            timeout (int): Optional timeout value\n                           default value 60\n            vrf (`str1`) : vrf id if applicable\n            port (`int`) : port number for ssh i.e 22 for default, 830 for netconf\n\n        Returns:\n            True : When the connection establishment and termination succeeds\n            False : When either the connection establishment or termination or both fail\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "perform_ssh",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1111"
    }
  },
  "perform_telnet": {
    "iosxe": {
      "doc": "\n    Restore config from local file using copy function\n        Args:\n            device (`obj`): Device object\n            hostname (`str') : hostname of the remote device\n            ip_address (`str`): IPv4/IPv6 address for remote device/server\n            enable_pass (`str`): Enable password\n                            default 'lab'\n            username (`str`): username to login into remote device/server\n            password (`str`): password to login into remote device/server\n            timeout (int): Optional timeout value\n                           default value 60\n            vrf (`str1`) : vrf id if applicable\n            \n        Returns:\n            True : When the connection establishment and termination succeeds\n            False : When either the connection establishment or termination or both fail\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "perform_telnet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1450"
    }
  },
  "ping": {
    "ios": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): type of service value\n        dscp (`str`): DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L543"
    },
    "iosxe": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): type of service value\n        dscp (`str`): DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n        extended_data ('str'): Hex extended data pattern 0-FFFFFFFF\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L548"
    },
    "iosxr": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): Not supported. type of service value\n        dscp (`str`): Not supported. DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L171"
    },
    "nxos": {
      "doc": " execute ping and parse ping result and return structure data\n\n    Args:\n        device ('obj'): Device object\n        address ('str'): Address value\n        tos ('int'): Not supported. type of service value\n        dscp (`str`): Not supported. DSCP value\n        size ('str'): data bytes expected\n        ttl ('int'): Not supported\n        timeout ('int'): timeout interval\n        count ('int'): repeat count\n        source ('str'): source address or interface, default: None\n        rapid ('bool'): Not supported\n        do_not_fragment ('bool'): enable do not fragment bit in IP header, default: False\n        validate (`bool`): Not supported. validate reply data, default: False\n        vrf ('str'): VRF name\n        command (`str`): ping command. This will ignore all other arguments\n        output (`str`): ping command output. no parser call involved\n    Returns:\n        Boolean\n    Raises:\n        None\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L144"
    }
  },
  "ping_interface_success_rate": {
    "ios": {
      "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping_interface_success_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L237"
    },
    "iosxe": {
      "doc": " Ping interfaces and verify success rate\n        Args:\n            device (`obj`): Device object\n            ips (`list`): IP list to ping\n            ips (`str`): Single IP address to ping\n            success_rate (`int`): Ping success rate\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "ping_interface_success_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L243"
    }
  },
  "pkill_process": {
    "linux": {
      "doc": " pkills the process with the given name \n        Args:\n            name ('str'): Name of the running process\n            ex.) name = 't-rex'\n        Raise:\n            None\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "pkill_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L83"
    }
  },
  "platform_software_fed_fnf_sw_stats_clear": {
    "iosxe": {
      "doc": " clear software fed fnf switch statistics\n        Args:\n            device (`obj`): Device object\n            switch('str'): option to include switch in the CLI\n        Returns: \n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "acl.clear",
      "package": "genie.libs.sdk.apis",
      "uid": "platform_software_fed_fnf_sw_stats_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/clear.py#L57"
    }
  },
  "poe_enabled_p4": {
    "iosxe": {
      "doc": "\n    Get enabled interfaces of poe \n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"poe_intf\":[poe_intf' name], \"poe_enabled\":[poe' poe_enabled_lst]\n    Raises:\n        None\n    ",
      "module_name": "poe_transceiver.get",
      "package": "genie.libs.sdk.apis",
      "uid": "poe_enabled_p4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/poe_transceiver/get.py#L115"
    }
  },
  "poe_p3": {
    "iosxe": {
      "doc": "\n    Get power,class of a poe interfaces poe_power_used,poe_power_class\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"poe_intf\":[poe_intf' name], \"poe_power_used\":[poe' poe_power_used_lst], \"poe_power_class\":[poe' poe_power_class_lst]\n    Raises:\n        None\n    ",
      "module_name": "poe_transceiver.get",
      "package": "genie.libs.sdk.apis",
      "uid": "poe_p3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/poe_transceiver/get.py#L86"
    }
  },
  "power_supply_on_off": {
    "iosxe": {
      "doc": " Perform on/off on power supply slot of a switch\n        Args:\n            device (`obj`): Device object\n            switch_number ('int'): Switch number\n            ps_slot ('str'): power supply slot \n            operation('str'): on/off\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "power_supply_on_off",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2066"
    }
  },
  "prepare_issu": {
    "iosxe": {
      "doc": " Prepare image and check device before starting issu process\n        Args:\n            device ('obj'): Device object\n            image ('str'): Image name\n            path ('str'): Path on dsetr\n            overwrite ('bool'): Flag to overwrite existing file\n            protocol ('str'): Protocol to be used on copying image to device\n            address ('str'): Address of server from where image will be copied.\n            disks ('list'): List of disks where image will be copied\n            timeout_seconds ('int'): Maximum duration to wait for file copy\n        Raises:\n            Exception: Failed preparing ISSU image\n        Returns:\n            None\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "prepare_issu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L35"
    }
  },
  "print_header": {
    "com": {
      "doc": null,
      "module_name": "api_unittest_generator",
      "package": "genie.libs.sdk.apis",
      "uid": "print_header",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/api_unittest_generator.py#L41"
    }
  },
  "question_mark": {
    "com": {
      "doc": " Verify if ? works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "question_mark",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L116"
    }
  },
  "question_mark_retrieve": {
    "com": {
      "doc": " Retrieve output after pressing ? on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            timeout (`int`): Timeout in second\n            state (`str`): Cli state\n        Returns:\n            output (`str`): Output\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "question_mark_retrieve",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L135"
    }
  },
  "quick_configure_by_jinja2": {
    "junos": {
      "doc": "Configure device with Jinja2 using a quick method\n\n    Args:\n            device ('obj'): Device object\n            templates_dir ('str'): Template directory\n            template_name ('str'): Template name\n            kwargs ('obj'): Keyword arguments\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "quick_configure_by_jinja2",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L358"
    }
  },
  "read_data_from_device": {
    "linux": {
      "doc": " Reads text data from device and returns it as output\n        Args:\n            location ('str'): Path to the text file\n        Raises:\n            FileNotFoundError: File Does not Exist\n        Returns:\n            Data ('str'): Text data read from the device\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "read_data_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L175"
    }
  },
  "reconnect_device": {
    "com": {
      "doc": " Reconnect device\n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Max time in seconds trying to connect to device\n            interval ('int'): Interval in seconds of checking connection\n            sleep_disconnect ('int'): Waiting time after device disconnection\n        Raise:\n            ConnectionError\n        Returns:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "reconnect_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L774"
    }
  },
  "reconnect_device_with_new_credentials": {
    "com": {
      "doc": " Reconnect device\n    Args:\n        device ('obj'): Device object\n        max_time ('int'): Max time in seconds trying to connect to device\n        interval ('int'): Interval in seconds of checking connection\n        sleep_disconnect ('int'): Waiting time after device disconnection\n    Raise:\n        ConnectionError\n    Returns:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "reconnect_device_with_new_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L708"
    }
  },
  "redistribute_bgp_metric_route_map_under_ospf": {
    "iosxe": {
      "doc": " redistributes bgp metric route-map under ospf \n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            bgp_as('int'): BGP as number\n            ospf_metric ('int'): Metric for redistributed routes\n            route_map('str'): Route map reference\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_bgp_metric_route_map_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1831"
    }
  },
  "redistribute_bgp_metric_type_under_ospf": {
    "iosxe": {
      "doc": " redistributes bgp metric type under ospf \n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            vrf ('str'): vrf to be configured\n            metric_type ('str'): metricy type used\n            tag('str'): tag used in metric_type\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_bgp_metric_type_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L416"
    }
  },
  "redistribute_bgp_under_ospf": {
    "iosxe": {
      "doc": "Redistribute bgp prefixes under ospf \n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            vrf (str): ospf with vrf \n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_bgp_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L101"
    }
  },
  "redistribute_eigrp_under_ospf": {
    "iosxe": {
      "doc": "Redistribute eigrp prefixes under ospf \n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            vrf (str): ospf with vrf \n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed to configure redistribute eigrp under ospf\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_eigrp_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1553"
    }
  },
  "redistribute_route_map_under_ospf": {
    "iosxe": {
      "doc": " configure route-map to redistribute routes between dynamic routing protocols. \n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n            redistributed_ospf (`int`): ospf to be redistributed\n            route_map_name (`str`): route map name\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "redistribute_route_map_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L781"
    }
  },
  "reload_issu_slot": {
    "iosxe": {
      "doc": " Reload slot on device\n        Args:\n            device ('obj'): Device object\n            slot ('str'):  Slot to be reloaded\n            wait_time ('int'): Time to wait in seconds after slot reload\n        Raise:\n            Exception\n    ",
      "module_name": "issu.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "reload_issu_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/issu/configure.py#L343"
    }
  },
  "remove_acl_from_interface": {
    "iosxe": {
      "doc": " Remove acl from an interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n            inbound (boolean, optional): True for inbound acl, False for outbound acl. Default value is True\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_acl_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L335"
    }
  },
  "remove_all_span": {
    "iosxe": {
      "doc": " Remove all SPAN sessions in the box\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "span.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_all_span",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/span/configure.py#L79"
    }
  },
  "remove_arp_timeout": {
    "iosxe": {
      "doc": " Remove arp timeout configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_arp_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L80"
    }
  },
  "remove_bgp_configuration": {
    "iosxe": {
      "doc": " Remove bgp configuration\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_bgp_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L766"
    }
  },
  "remove_channel_group_from_interface": {
    "iosxe": {
      "doc": " Remove channel group from an Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the channel group command is to be applied\n            channel_group (`str`): Channel group number\n            mode (`str`): Channel group mode\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_channel_group_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2327"
    }
  },
  "remove_default_ipv4_sgacl": {
    "iosxe": {
      "doc": " Remove a default static SGACL(ipv4)\n        Args:\n            device ('obj'): device to use\n             sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove default static SGACL(ipv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_default_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L388"
    }
  },
  "remove_device_tracking_policy": {
    "iosxe": {
      "doc": " Remove device-tracking policy\n        Args:\n            device ('obj'): device to use\n            client_policy_name('str'): name of a policy to be removed\n            server_policy_name('str', optional): name of another policy to be removed. Default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing device tracking policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L703"
    }
  },
  "remove_dhcp_pool": {
    "iosxe": {
      "doc": " Remove DHCP pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L48"
    }
  },
  "remove_dhcp_pool_ipv6": {
    "iosxe": {
      "doc": " Remove DHCP IPv6 pool\n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the pool to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 DHCP pool\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_pool_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L45"
    }
  },
  "remove_dhcp_snooping_binding": {
    "iosxe": {
      "doc": " Remove DHCP snooping binding\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): vlan-id to remove binding\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing dhcp snooping binding\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcp_snooping_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L213"
    }
  },
  "remove_dhcpv6_guard_policy": {
    "iosxe": {
      "doc": " Configure DHCPv6 Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing DHCPv6 guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_dhcpv6_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L114"
    }
  },
  "remove_disable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Removing disable DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove disable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_disable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L141"
    }
  },
  "remove_eem_applet": {
    "iosxe": {
      "doc": " Remove EEM applet from running config\n\n        Args:\n            device ('obj'): Device object\n            applet_name ('str'): Applet name\n        Raises:\n            SubCommandFailure\n        Returns:\n            None\n    ",
      "module_name": "eem.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_eem_applet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eem/configure.py#L14"
    }
  },
  "remove_enable_dhcp_ldra": {
    "iosxe": {
      "doc": "\n    Removing enable DHCP ldra\n        Args:\n            device ('obj'): device to use\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove enable ldra\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_enable_dhcp_ldra",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L96"
    }
  },
  "remove_explicit_path": {
    "iosxe": {
      "doc": "Remove explicit path configuration, created for tunnel\n        Args:\n\t    device (`obj`): Device object\n\t    explicit_paths (`list`): List of explicit paths to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_explicit_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1030"
    }
  },
  "remove_interface_carrier_delay": {
    "iosxe": {
      "doc": " Remove interface carrier delay on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L410"
    }
  },
  "remove_interface_configured_service_policy": {
    "iosxe": {
      "doc": " Remove any service policy configured under interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to remove service policy from\n            out (`dict`): Show run interface <interface> output\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_configured_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L798"
    }
  },
  "remove_interface_ip": {
    "iosxe": {
      "doc": " Remove ip on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`,optional): IPv4 address\n            mask (`str`,optional): Mask\n            secondary (`bool`,optional): Remove secondary IPv4 address\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1999"
    }
  },
  "remove_interface_negotiation": {
    "iosxe": {
      "doc": " Remove negotiation auto on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_negotiation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L115"
    }
  },
  "remove_interface_ospf_bfd": {
    "iosxe": {
      "doc": " Remove interface ospf bfd on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_interface_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L434"
    }
  },
  "remove_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Remove IPv6 DHCP Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 DHCP guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L137"
    }
  },
  "remove_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Remove IPv6 ND Suppress Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 ND suppress policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L235"
    }
  },
  "remove_ipv6_raguard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 RA Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 RA guard policy\n    ",
      "module_name": "ipv6_ra_dhcp_guard.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6_ra_dhcp_guard/configure.py#L84"
    }
  },
  "remove_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Configure IPv6 Source Guard Policy\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed removing IPv6 Source Guard policy\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1017"
    }
  },
  "remove_isis_configuration": {
    "iosxe": {
      "doc": " Remove isis configuration\n        Args:\n            device ('obj'): Device object\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_isis_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L53"
    }
  },
  "remove_l2vpn_xconnect_context": {
    "iosxe": {
      "doc": "unconfigure l2vpn xconnect context\n        Args:\n\t    device (`obj`): Device \n\t    context_name (`str`): l2vpn cross connect name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_l2vpn_xconnect_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1147"
    }
  },
  "remove_ldra_interface": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra on interface\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L301"
    }
  },
  "remove_ldra_policy_vlan": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra policy on vlan\n        Args:\n            device ('obj'): device to use\n            vlan_id ('str'): vlan_id to attach policy\n            policy ('str'): policy to attach in vlan\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra policy on vlan\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L240"
    }
  },
  "remove_ldra_remote_id": {
    "iosxe": {
      "doc": "\n    Remove DHCP ldra remote-id\n        Args:\n            device ('obj'): device to use\n            remote_id ('str'): remote-id for ldra\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to remove ldra remote-id\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ldra_remote_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L188"
    }
  },
  "remove_missing_comp": {
    "iosxe": {
      "doc": "\n    Removes the missing components from the API that are absent in the GNMI query for MPTE automation\n    \n    Args:\n        device (`obj`): Device object\n        namespace ('str'): namespace xpath\n        xpath ('str'): xpath\n        key_list ('list'): components' name list\n        value_list ('list'): components' value list, by default, set to None\n    Returns:\n        list: [list of components' name, list of components' value]\n    Raises:\n        None\n    ",
      "module_name": "mpte_utils.mpte_utils",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_missing_comp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpte_utils/mpte_utils.py#L10"
    }
  },
  "remove_mpls_lable_protocol_from_device": {
    "iosxe": {
      "doc": " Remove mpls label protocol from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_lable_protocol_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L339"
    }
  },
  "remove_mpls_ldp_explicit_from_device": {
    "iosxe": {
      "doc": " Remove mpls ldp explicit from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_explicit_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L536"
    }
  },
  "remove_mpls_ldp_from_device": {
    "iosxe": {
      "doc": " Remove ldp from device\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L82"
    }
  },
  "remove_mpls_ldp_from_interface": {
    "iosxe": {
      "doc": " Remove ldp on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L103"
    },
    "junos": {
      "doc": " Remove ldp on interface on junos device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_from_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/mpls/configure.py#L33"
    }
  },
  "remove_mpls_ldp_router_id_from_device": {
    "iosxe": {
      "doc": " Remove mpls ldp router id from device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_mpls_ldp_router_id_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L127"
    }
  },
  "remove_ntp_master": {
    "iosxe": {
      "doc": " Unconfigure ntp master\n\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_master",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L107"
    }
  },
  "remove_ntp_server": {
    "iosxe": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L50"
    },
    "iosxr": {
      "doc": " Remove all configured server using routes\n\n        Args:\n            device ('obj'): Device object\n            servers ('list'): List of servers to remove(server)\n                ex.)\n                    servers = ['192.168.36.11', '192.168.36.12']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L33"
    }
  },
  "remove_ntp_system_peer": {
    "iosxe": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/configure.py#L12"
    },
    "iosxr": {
      "doc": " Remove ntp system peer config\n\n        Args:\n            device (`obj`): Device object\n            system_peer ('str'): System peer IP address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ntp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/configure.py#L12"
    }
  },
  "remove_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": " Remove max-metric from running-config under ospf\n\n        Args:\n            device (`obj`): Device object \n            ospf_process_id (`str`): Router OSPF id\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L162"
    }
  },
  "remove_ospf_passive_interface": {
    "iosxe": {
      "doc": "Remove passive interface\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            interface (`list`): interfaces to configure\n            ex.)\n                interface = ['tenGigabitEthernet0/4/0']\n\n        Return:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_ospf_passive_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L253"
    }
  },
  "remove_port_channel_interface": {
    "iosxe": {
      "doc": " Remove port channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel number to be removed\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_port_channel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2359"
    }
  },
  "remove_routing_ip_route": {
    "iosxe": {
      "doc": " Remove ip route on device\n\n        Args:\n            device ('obj'): Device obj\n            ip_address ('str'): ip address for interface\n            mask (str): mask the ip address\n            interface ('str'): interface name to configure\n            dest_add('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_routing_ip_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L70"
    }
  },
  "remove_running_config": {
    "ios": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L109"
    },
    "iosxe": {
      "doc": " Remove running configuration starting with passed keyword from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('str') : Configuration to be removed from device\n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L109"
    }
  },
  "remove_static_ipv4_sgacl": {
    "iosxe": {
      "doc": " Remove static SGACL(Ipv4)\n        Args:\n            device ('obj'): device to use\n            src_sgt (`str`): Source Group Tag\n            dest_sgt (`str`): Destination Group Tag\n            sgacl ('str'): Role-based Access-list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove static SGACL(IPv4)\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_static_ipv4_sgacl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L366"
    }
  },
  "remove_subscriber": {
    "iosxe": {
      "doc": " Remove subscriber\n\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): BGP AS\n            bridge_id ('str'): Bridge Id\n            bridge_interface ('str'): Bridge interface\n            vpn_id ('str'): VPN id\n            vpn_interface ('str'): VPN interface\n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "subscriber.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/subscriber/configure.py#L12"
    }
  },
  "remove_tacacs_server": {
    "ios": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L135"
    },
    "iosxe": {
      "doc": " Remove tacacs server configuration from device\n\n        Args:\n            device ('obj')        : Device object to modify configuration\n            remove_config ('list') : Configuration to be removed from device\n            keyword ('str') : keyword the configuration should start with \n\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L135"
    }
  },
  "remove_vfi_context": {
    "iosxe": {
      "doc": " Config autodiscovery bgp signaling ldp template\n        Args:\n            device (`obj`): Device object\n            context_name ('str'): context name for the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_vfi_context",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1566"
    }
  },
  "remove_virtual_interface": {
    "iosxe": {
      "doc": " Remove virtual interface created\n\n        Args:\n            device ('obj'): device to use\n            interfaces ('list'): List of interface to be cleared\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "remove_virtual_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1354"
    }
  },
  "rename_dir_file_system": {
    "iosxe": {
      "doc": " Rename directory in  '<file_system>' on the device\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max time to for format to complete in seconds\n            file_sys (\"str\"): File system\n            file_name(\"str\"): directory name or file name\n            des_file_name(\"str\"): directory name or file name should be renamed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed to Rename directory on file system\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "rename_dir_file_system",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L854"
    }
  },
  "repeat_command_save_output": {
    "com": {
      "doc": "\n        Execute the {command} on the device and store the output to file, can\n        repeat the same command with {command_count} and a sleep interval with\n        {command_interval}.\n\n        Args:\n            command ('str'): Command to run on device\n            command_interval ('int'): Waiting between command calls\n            command_count ('int'): Number of times to call command\n            report_file ('str'): File name to store in archive\n\n        Raises:\n            Parser and python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "repeat_command_save_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2159"
    }
  },
  "request_chassis_routing_engine_master_switch": {
    "junos": {
      "doc": "Run request chassis routing-engine master switch\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "package": "genie.libs.sdk.apis",
      "uid": "request_chassis_routing_engine_master_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L11"
    }
  },
  "request_login_other_re": {
    "junos": {
      "doc": " Execute 'request routing-engine login other-routing-engine'\n        \n        Args:\n            device ('obj'): Device object\n\n        Returns:\n            bool\n\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "request_login_other_re",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L337"
    }
  },
  "request_platform_software_cflow_copy": {
    "iosxe": {
      "doc": " request platform software cflow copy\n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "request_platform_software_cflow_copy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L944"
    }
  },
  "request_platform_software_package_clean": {
    "iosxe": {
      "doc": " Perform request platform software package clean switch \n        Args:\n            device ('obj'): Device object\n            switch_detail ('str'): Switch id, or 'all' for all switches\n            clean_option ('str'): clean option file/pattern\n            file_path ('str'):  file path\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "request_platform_software_package_clean",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1790"
    }
  },
  "request_routing_engine_login_other_routing_engine": {
    "junos": {
      "doc": "Run request routing-engine login other-routing-engine\n\n    Args:\n        device (obj): Device object\n    ",
      "module_name": "request.request",
      "package": "genie.libs.sdk.apis",
      "uid": "request_routing_engine_login_other_routing_engine",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/request/request.py#L27"
    }
  },
  "reset_interface": {
    "iosxe": {
      "doc": " Reset interface configuration\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "reset_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L34"
    }
  },
  "restart_routing": {
    "junos": {
      "doc": "API for restarting routing\n\n    Args:\n        device (obj): Restarts routing process\n\n    Returns:\n        None\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restart_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/configure.py#L11"
    }
  },
  "restore_running_config": {
    "ios": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L75"
    },
    "iosxe": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L75"
    },
    "iosxr": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/configure.py#L5"
    },
    "nxos": {
      "doc": " Restore config from local file\n\n        Args:\n            device (`obj`): Device object\n            path (`str`): directory\n            file (`str`): file name\n            timeout (`int`): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/running_config/configure.py#L6"
    }
  },
  "restore_running_config_file": {
    "iosxe": {
      "doc": " Restore config from local file\n        Args:\n            device ('obj'): Device object\n            path ('str'): directory\n            file ('str'): file name\n            timeout ('int'): Timeout for applying config\n        Returns:\n            None\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "restore_running_config_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3643"
    }
  },
  "revert_vm_snapshot": {
    "linux": {
      "doc": " Revert VM back to provided snapshot\n        Args:\n            vm_name ('str'): Name of the VM\n            vm_id ('int'): The id of the VM on the ESXi server\n            vm_snapshot_id ('int'): The id of the required snapshot\n            snapshot_name ('str'): Name of the snapshot to be reverted to,\n                                    Default is golden         \n        Raises:\n            N/A\n        Retuns:\n            vm_recovery_status ('tuple'): String message indicating the recovery \n            status of the each VM.\n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "revert_vm_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L137"
    }
  },
  "run_wsim_config": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "run_wsim_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L89"
    }
  },
  "save_dict_to_json_file": {
    "com": {
      "doc": " merge a list of Python dictionaries into one dictionary\n        and save the dictionary to a JSON file\n        If same key exists in data(dicts) which will be merged,\n        the key will be overridden.\n\n        Args:\n            data (`list`): list of dictionaries\n            filename (`string`): filename to save\n        Raise:\n            Exception\n        Returns:\n            output (`dict`): Python dictionary\n\n        Example:\n\n        >>> dev.api.save_dict_to_file(data=[dict1, dict2], 'merged_dict')\n        {\n            'a': {        # came from `dict1`\n                'b': 1,\n            },\n            'c': {        # came from `dict2`\n                'd': 2,\n            }\n        }\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_dict_to_json_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2751"
    }
  },
  "save_info_to_file": {
    "com": {
      "doc": " save information to a file in runtime directory\n        Args:\n            filename ('str'): Log file name\n            parameters ('list'): Parameters list\n            header ('list'): Header list\n            separator ('str'): Separator for the parameters\n\n            example for traffic loss:\n                parameters = ['TC1', 'PE1-PE2-1000pps', '0.0', 'PASSED']\n                header = ['uid', 'flows', 'outage', 'result']\n                save_info_to_file('logs.txt', parameters, header=header)\n\n                - in logs.txt\n                uid,flows,outage,result\n                TC1,PE1-PE2-1000pps,0.0,PASSED\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_info_to_file",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1641"
    }
  },
  "save_running_config": {
    "ios": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/configure.py#L22"
    },
    "iosxe": {
      "doc": " Save config\n\n        Args:\n            device (`obj`): Device object\n            source (`str`): source to copy from\n            destination (`str`): destination to copy to\n        Returns:\n            None\n    ",
      "module_name": "running_config.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/configure.py#L22"
    }
  },
  "save_running_config_configuration": {
    "ios": {
      "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L300"
    },
    "iosxe": {
      "doc": "Save configuration on the device after configure action\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "save_running_config_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L306"
    }
  },
  "scale_accesslist_config": {
    "iosxe": {
      "doc": " Configure the huge(more than 1k static acl) extended acls\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n            acl_list ('str') : acl_lists\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "scale_accesslist_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L217"
    }
  },
  "scp": {
    "ios": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L333"
    },
    "iosxe": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L339"
    },
    "iosxr": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n        Returns:\n            result (`bool`): True if scp successfully done \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L98"
    },
    "linux": {
      "doc": " copy files from local device to remote device via scp\n\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`): specify connection to get ip\n                                Default to None\n            creds (`str`): Name of the credentials for the remote device\n                           Defaults to \"default\"\n            timeout (`timeout`, optional): timeout for scp in seconds. Defaults to None\n        Returns:\n            result (`bool`): True if scp successfully done\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/utils.py#L126"
    },
    "nxos": {
      "doc": " copy files from local device to remote device via scp\n        Args:\n            device (`obj`) : Device object (local device)\n            local_path (`str`): path with file on local device\n            remote_device (`str`): remote device name\n            remote_path (`str`): path with/without file on remote device\n            remote_user (`str`): use given username to scp\n                                 Default to None\n            remote_pass (`str`): use given password to scp\n                                 Default to None\n            remote_via (`str`) : specify connection to get ip\n                                 Default to None\n            vrf (`str`): use vrf where scp find route to remote device\n                                 Default to None\n            return_filename (`bool`): if True, will return list of copied files\n        Returns:\n            result (`bool` or `tuple`): True if scp successfully done \n                                        if return_filename is True, return list of copied filename\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "scp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/utils.py#L20"
    }
  },
  "search_running_config": {
    "ios": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/running_config/get.py#L18"
    },
    "iosxe": {
      "doc": " search config in show running-config output\n\n        Args:\n            device (`obj`): Device object\n            option (`str`): key word to search\n        Returns:\n            config (`str`): search result\n    ",
      "module_name": "running_config.get",
      "package": "genie.libs.sdk.apis",
      "uid": "search_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/running_config/get.py#L16"
    }
  },
  "send_email": {
    "com": {
      "doc": "\n        Send an email from execution server where pyATS runs.\n        Plain or HTML email can be sent.\n\n        Args:\n            from_email (list/str): list or string-list of addresses to be used\n                                   in the generated email's \"From:\" field.\n            to_email(list/str): list or string-list of addresses to be used\n                                in the generated email's \"To:\" field.\n            subject (str): alternate subject for the report email\n            body (string): message body in the email\n            attachments (list): list of attachments paths\n            html_email (bool): flag to enable alternative email format\n            html_body (string): html content\n\n        Raises:\n            python file exceptions\n\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "send_email",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2206"
    }
  },
  "set_clock": {
    "ios": {
      "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "set_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L316"
    },
    "iosxe": {
      "doc": " Set clock date and time on device\n\n        Args:\n            device ('obj')        : Device object to update clock\n            datetime ('str') : Date and time value\n                ex.)\n                    datetime = '23:55:00 20 Dec 2019'\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "set_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L322"
    }
  },
  "set_clock_calendar": {
    "iosxe": {
      "c9800": {
        "doc": "Configure clock calendar-valid \n    Args:\n        device (obj): Device object\n    Returns:\n            None\n    Raises:\n            SubCommandFailure\n    ",
        "module_name": "platform.configure",
        "package": "genie.libs.sdk.apis",
        "uid": "set_clock_calendar",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/configure.py#L39"
      }
    }
  },
  "set_filter_packet_capture_inject": {
    "iosxe": {
      "doc": " Set filter for packet capture inject\n        Args:\n            device (`obj`): Device object\n            filter (`str`): Filter to be set\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed setting filter for packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "set_filter_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L67"
    }
  },
  "set_system_mtu": {
    "iosxe": {
      "doc": " Sets mtu value on device\n\n        Args:\n            device ('obj'): Device obj\n            mtu_value ('str'): MTU value to be set\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "set_system_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L502"
    }
  },
  "set_traffic_transmit_rate": {
    "iosxe": {
      "doc": "Set stream transmit rate\n\n        Args:\n            testbed (`obj`): Testbed object\n            traffic_stream (`str`): Traffic stream name\n            set_rate (`int`): Traffic set rate\n            tolerance (`int`): Traffic tolerance\n            max_time (`int`): Retry maximum time\n            check_interval (`int`): Interval in seconds to do recheck\n\n        Returns:\n            None\n        Raises:\n            KeyError: Could not find device on testbed\n            Exception: Failed to set transmit rate\n    ",
      "module_name": "traffic.checks",
      "package": "genie.libs.sdk.apis",
      "uid": "set_traffic_transmit_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traffic/checks.py#L17"
    }
  },
  "show_switch_redirect": {
    "iosxe": {
      "doc": " storing output in a file format \n        Example: show switch | redirect flash:test.txt\n        \n        Args:\n            device ('obj'): Device object\n            storage_type ('str'): the storage type (e.g. flash, bootflash, nvram)\n            file_name ('str'): file to store the output in \n\n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n \n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "show_switch_redirect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L886"
    }
  },
  "shut_interface": {
    "iosxe": {
      "doc": " Shut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L148"
    },
    "junos": {
      "doc": " Shut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L49"
    }
  },
  "shut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Shut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n            num ('int'): Number of interfaces to return\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L262"
    }
  },
  "shutdown_interface": {
    "iosxe": {
      "doc": " Shutdown a bundled Interface\n\n        Args:\n            device (`obj`): Device object\n            member (`str`): Bundled interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "shutdown_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1087"
    }
  },
  "simulate_ap_container": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "simulate_ap_container",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L128"
    }
  },
  "slugify": {
    "com": {
      "doc": " update all special characters in string to underscore\n        Args:\n            word (`str`): string which you want to convert special characters in the word to underscore\n        Raise:\n            Exception\n        Returns:\n            word\n\n        Example:\n\n        >>> dev.api.slugify('Ethernet1/1.100')\n        Ethernet1_1_100\n\n        >>> dev.api.slugify('2020-05-26_14:15:36.555')\n        2020_05_26_14_15_36_555\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "slugify",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2138"
    }
  },
  "snmp_server_engine_id_local": {
    "iosxe": {
      "doc": " \n        snmp-server engineID local\n        Args:\n            device ('obj'): Device object\n            engine_id('str') : engineID\n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "snmp_server_engine_id_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L50"
    }
  },
  "socat_relay": {
    "linux": {
      "doc": " Setup UDP/TCP relay using 'socat' command.\n\n    Args:\n        device (obj): Device object (optional)\n        remote_ip (str): remote IP address\n        remote_port (str): remote port\n        protocol (str): portocol (default: TCP4)\n\n    Returns:\n        proxy_port (int): Proxy port number or False if not able to setup relay\n    ",
      "module_name": "socat.relay",
      "package": "genie.libs.sdk.apis",
      "uid": "socat_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/socat/relay.py#L9"
    }
  },
  "source_configured_template": {
    "iosxe": {
      "doc": "Source template config\n        Args:\n            device ('obj'): device to use\n            interface (`str`): Interface name\n            template (`str`): Built-in/User defined template Name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to source a configured template\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "source_configured_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L14"
    }
  },
  "stack_ports_enable_disable": {
    "iosxe": {
      "doc": " Enable/Disable the stack port\n        Args:\n            device (`obj`): Device object\n            switch_num ('int'): Switch number\n            stack_port ('int'): Stack port number\n            operation('str'): Enable/Disable\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "stack_ports_enable_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L435"
    }
  },
  "start_monitor_capture": {
    "iosxe": {
      "doc": " Start Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Start Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "start_monitor_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L783"
    }
  },
  "start_packet_capture": {
    "ios": {
      "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L66"
    },
    "iosxe": {
      "doc": "Start packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n            interface (`str`): Interface to capture the packets on\n            capture_command (`str`): Monitor command\n            direction ('str'): direction of the capture pkts. Default is both direction\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L71"
    }
  },
  "start_packet_capture_inject": {
    "iosxe": {
      "doc": " Start packet capture inject\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed start packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "start_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L89"
    }
  },
  "start_perf": {
    "nxos": {
      "doc": " start perf in shell mode\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            service (`str`): service to set for Perf\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n        Returns:\n            ret_dict (`dict`): Dictionary\n            \n        example:\n        ret_dict = {\n            `service_pid`: '8086',\n            `perf_pid`: '15026',\n        }\n    ",
      "module_name": "flamegraph.flamegraph",
      "package": "genie.libs.sdk.apis",
      "uid": "start_perf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L15"
    }
  },
  "start_routem_process": {
    "linux": {
      "doc": " Starts the routem executable with the provided config\n        Args:\n            config ('str'): Path to config file or raw config data\n            routem_executable ('str'): Path to routem executable file \n            config_save_location ('str'): Path of folder of where to save the config\n                file if raw config data is passed into the first argument\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_routem_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L194"
    }
  },
  "start_trex_process": {
    "linux": {
      "doc": " Starts a trex process on the device\n        Args:\n            location (str): folder location of where the trex executable is at\n        Raise:\n            FileNotFoundError\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "start_trex_process",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L250"
    }
  },
  "stop_monitor_capture": {
    "iosxe": {
      "doc": " Stop Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            \n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Stop Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_monitor_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L819"
    }
  },
  "stop_packet_capture": {
    "ios": {
      "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L122"
    },
    "iosxe": {
      "doc": "Stop the packet capture\n\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Packet capture name\n\n        Returns:\n            None\n\n        Raises:\n            pyATS Results\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L128"
    }
  },
  "stop_packet_capture_inject": {
    "iosxe": {
      "doc": " Stop packet capture inject\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed stop packet capture inject\n    ",
      "module_name": "debug.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_packet_capture_inject",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/debug/configure.py#L109"
    }
  },
  "stop_perf_and_generate_svg": {
    "nxos": {
      "doc": " stop perf in shell mode and then copy to remote and generate svg file\n        # CISCO INTERNAL\n\n        Args:\n            device (`obj`): Device object\n            perf_pid (`str`): Perf process id\n            perf_filename (`str`): Perf filename\n            perf_save_local_bash (`str`): Location to save perf file in shell\n            perf_save_local_nxos (`str`): Location to save perf file in NXOS\n            vrf: VRF for copying file to remote server\n            perf_save_remote_user (`str`): userid on remote server\n            perf_save_remote_pass (`str`): password of userid on remote server\n            perf_save_remote_server (`str`): remote server name in testbed yaml\n            perf_save_remote_via (`via`): specify connection to get ip\n                                          if not specified, use active connection one\n            svg_filename (`str`): svg filename\n            svg_archive_location (`str`): svg archive location\n            remote_flamegraph_location (`str`): flamegraph location on remote server\n            sleep (`int`, optional): sleep for shell command. Defaults to 10 seconds\n\n        Returns:\n            svg_location (`str`): location of svg file\n\n    ",
      "module_name": "flamegraph.flamegraph",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_perf_and_generate_svg",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/flamegraph/flamegraph.py#L55"
    }
  },
  "stop_simulation": {
    "virl": {
      "doc": "Stop simulation\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            connection_alias (`str`): connection alias\n\n        Returns:\n\n            result: result of GET command\n        \n        Raise:\n            None\n    ",
      "module_name": "std.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "stop_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/utils.py#L45"
    }
  },
  "string_to_number": {
    "com": {
      "doc": " Converts from number(string) to number(integer)\n        Args:\n            word (`str`): number (string)\n        Raise:\n            Exception\n        Returns:\n            ret_num ('int|float'): number (integer|float)\n\n        Example:\n\n        >>> dev.api.string_to_number('1')\n        1\n\n        >>> dev.api.string_to_number('1.1')\n        1.1\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "string_to_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1671"
    }
  },
  "switch_vm_power": {
    "linux": {
      "doc": " Switch power of VM On/Off\n        Args:\n            vm_id ('str'): The id of the VM\n            state ('str'): Power state to be switched to, eg. 'on' / 'off'\n        Raises:\n            N/A\n        Returns:\n            out ('str'): \n    ",
      "module_name": "execute",
      "package": "genie.libs.sdk.apis",
      "uid": "switch_vm_power",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/execute.py#L12"
    }
  },
  "tabber": {
    "com": {
      "doc": " Verify if tab works as expected on device\n\n        Args:\n            device (`obj`): Device object\n            cmd (`str`): Command\n            expected (`str`): Expected output\n            timeout (`int`): Timeout in second\n        Returns:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "tabber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L79"
    }
  },
  "terminal_no_monitor": {
    "iosxe": {
      "doc": " terminal no monitor\n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "platform.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "terminal_no_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/execute.py#L925"
    }
  },
  "tftp_config": {
    "com": {
      "doc": " tftp_config proc\n    Args:\n        device ('obj'): Device object\n        testbed ('obj'): testbed object containing the server info\n        server ('str\"): Embedded pyATS File Transfer Server in testbed yaml\n        cfg_block ('str'): Configuration block\n    Returns:\n        None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "tftp_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L1416"
    }
  },
  "time_to_int": {
    "com": {
      "doc": " Cast time string to int in second\n\n        Args:\n            time(`str`): time string\n        Returns:\n            out(`int`): time in second\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "time_to_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L175"
    }
  },
  "tokens": [
    "aci",
    "aireos",
    "apic",
    "asa",
    "asr9k",
    "c8000",
    "c9800",
    "cat3k",
    "cat9500",
    "cat9k",
    "com",
    "eaptls",
    "ios",
    "iosxe",
    "iosxr",
    "junos",
    "linux",
    "mds",
    "n3k",
    "n5k",
    "n7k",
    "n9k",
    "ncs540",
    "ncs5k",
    "nxos",
    "virl"
  ],
  "topic_search": {
    "linux": {
      "doc": " Function to get the cdets from the result_file using topic_search api \n        Args:\n            result_file (decoded text file)\n\n        timeout (`int`):\n            timeout to search topic. Default to 300 secs\n\n        Returns:\n            output (CDETS)\n    ",
      "module_name": "decoder.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "topic_search",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/decoder/execute.py#L62"
    }
  },
  "transceiver": {
    "iosxe": {
      "doc": "\n    Get instant value of a transceiver output_power,input_power and laser_biased_current\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"output_power_instant\":[transceivers' output_power_instant], \"input_power_instant\":[transceivers' input_power_instant] ,\"current_instant\":[transceivers' current_instant]\n    Raises:\n        None\n    ",
      "module_name": "poe_transceiver.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/poe_transceiver/get.py#L12"
    }
  },
  "transceiver_info": {
    "iosxe": {
      "doc": "\n    Get info about  transceiver vendor,vendor_part,vendor_rev,serial_no,form_factor,connector_type\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"vendor_name\":[transceivers' vendor_lst], \"vendor_part\":[transceivers' vendor_part_lst] ,\"vendor_rev\":[transceivers' vendor_rev_lst , \"serial_no\" : [transceivers' serial_no_lst] , \"form_factor\" : [transceivers' form_factor_lst],\"connector_type\" : [transceivers' connector_type_lst]\n    Raises:\n        None\n    ",
      "module_name": "transceiver.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver_info",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/transceiver/get.py#L11"
    }
  },
  "transceiver_interval": {
    "iosxe": {
      "doc": "\n    Get default interval value \"30\" of a transceiver output_power,input_power and laser_biased_current\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"output_power_interval\":[transceivers' output_power_interval], \"input_power_interval\":[transceivers' input_power_interval] ,\"current_interval\":[transceivers' current_interval]\n    Raises:\n        None\n    ",
      "module_name": "poe_transceiver.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/poe_transceiver/get.py#L54"
    }
  },
  "transceiver_interval_intf": {
    "iosxe": {
      "doc": "\n    Get default interval value \"30\" of a transceiver output_power,input_power and laser_biased_current\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"output_power_interval\":[transceivers' output_power_interval], \"input_power_interval\":[transceivers' input_power_interval] ,\"current_interval\":[transceivers' current_interval]\n    Raises:\n        None\n    ",
      "module_name": "transceiver_intf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver_interval_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/transceiver_intf/get.py#L53"
    }
  },
  "transceiver_intf_components": {
    "iosxe": {
      "doc": "\n    Get info about  transceiver vendor,vendor_part,vendor_rev,serial_no,form_factor,connector_type\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"vendor_name\":[transceivers' vendor_lst], \"vendor_part\":[transceivers' vendor_part_lst] ,\"vendor_rev\":[transceivers' vendor_rev_lst , \"serial_no\" : [transceivers' serial_no_lst] , \"form_factor\" : [transceivers' form_factor_lst],\"connector_type\" : [transceivers' connector_type_lst]\n    Raises:\n        None\n    ",
      "module_name": "transceiver_intf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver_intf_components",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/transceiver_intf/get.py#L86"
    }
  },
  "transceiver_power_intf": {
    "iosxe": {
      "doc": "\n    Get instant value of a transceiver output_power,input_power and laser_biased_current\n    Args:\n        device (`obj`): Device object\n    Returns:\n        Dictionary: \"transceiver\":[transceivers' name], \"output_power_instant\":[transceivers' output_power_instant], \"input_power_instant\":[transceivers' input_power_instant] ,\"current_instant\":[transceivers' current_instant]\n    Raises:\n        None\n    ",
      "module_name": "transceiver_intf.get",
      "package": "genie.libs.sdk.apis",
      "uid": "transceiver_power_intf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/transceiver_intf/get.py#L12"
    }
  },
  "trex_copy_json": {
    "linux": {
      "doc": " Copies trex json config data to the trex folder\n        Args:\n            json (str): the json config in text form or path to json file on\n                local machine\n            destination (str): folder of where to put trex-config.json in\n        Raise:\n            None\n        Returns:\n            Success (bool): Whether or not the operation was successful\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "trex_copy_json",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L223"
    }
  },
  "trex_save_configuration": {
    "linux": {
      "doc": " Save configuration of the currently running Trex instance using its API\n        Args:\n            None\n        Raise:\n            FileNotFoundError\n        Returns:\n            str\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "trex_save_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/platform/utils.py#L95"
    }
  },
  "tunnel_range_shut_unshut": {
    "iosxe": {
      "doc": " Perform shut or unshut of tunnel range interfaces\n        Args:\n             device (`obj`): Device object\n             start ('int'): tunnel start number\n             end (`int`): tunnel start number\n             action ('str', optional) : shut or unshut(Default is shut)\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "tunnel_range_shut_unshut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5167"
    }
  },
  "unconfgiure_port_channel_min_link": {
    "iosxe": {
      "doc": " unconfigure port-channel min links\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfgiure_port_channel_min_link",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5427"
    }
  },
  "unconfig_device_tracking_policy": {
    "iosxe": {
      "doc": " Remove specified options for device-tracking policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains any of the following keys:\n                    cache_guard ('bool', optional)\n                    data_glean ('bool', optional)\n                    destination_glean ('bool', optional)\n                    device_role ('bool', optional)\n                    distribution_switch ('bool', optional)\n                    limit_address_count ('bool', optional)\n                    origin ('bool', optional)\n                    prefix_glean ('bool', optional)\n                    protocol ('dict', optional)\n                        name ('bool')\n                    tracking ('bool', optional)\n                    trusted_port ('bool', optional)\n                    vpc ('int', optional)\n                ex.)\n                    [\n                        {\n                            \"cache_guard\": True,\n                            \"data_glean\": True,\n                            \"destination_glean\": True,\n                            \"device_role\": True,\n                            \"distribution-switch\": True,\n                            \"limit_address_count\": True,\n                            \"origin\": True,\n                            \"prefix_glean\": True,\n                            \"protocol\": {\n                                \"arp\": True,\n                                \"dhcp4\": True\n                            },\n                            \"security_level\": True,\n                            \"tracking\": True,\n                            \"trusted_port\": True,\n                            \"vpc\": 10\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove device-track policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_device_tracking_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L612"
    }
  },
  "unconfig_disable_ipv6_routing": {
    "iosxe": {
      "doc": "Unconfigure ipv6 unicast-routing on the device\n    \n       Args:\n            device('obj'): Device object\n\n       Returns:\n            None\n\n       Raises:\n            SubCommandFailure     \n    \n    ",
      "module_name": "ipv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_disable_ipv6_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/configure.py#L27"
    }
  },
  "unconfig_extended_acl": {
    "iosxe": {
      "doc": " Unconfigure the extended acls\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_extended_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L202"
    }
  },
  "unconfig_extended_acl_with_evaluate": {
    "iosxe": {
      "doc": " Unconfigure the extended acls\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of acl\n            reflect_name ('str'): name reflect acl \n            sequence_num ('str',optional): specific sequence number,default value is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_extended_acl_with_evaluate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L577"
    }
  },
  "unconfig_extended_acl_with_reflect": {
    "iosxe": {
      "doc": " Unconfigure extended ACL on device\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): permit \n            protocol ('str'): protocol\n            src_ip ('str'): source start ip, default value is None\n            src_step ('str'): increment step for source ip, default value is None\n            src_wildcard ('str'): source wildcard, default value is None\n            dst_ip ('str'): destination start ip, default value is None\n            dst_step ('str'): increment step for destination ip, default value is None\n            dst_wildcard ('str'): destination wildcard, default value is None\n            src_port ('str'): Acl source port, default value is None\n            dst_port ('str'): Acl destination port, default value is None\n            entries ('int'): Acl entries, default value is None\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            port_type ('str', optional): type of ACL like with or without eq or gt or lt or neq keyword, default value is None\n            sequence_num ('str',optional): specific sequence number,default value is \"\"\n            reflect_acl_name ('str'): reflect acl name, it should be differnt name with extended ACL name, default value is None\n            timeout ('str',optional): type of ACL like with or without timeout, default value is \"\"\n            timeout_val ('int',optional): Timout value, default value is \"\"\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_extended_acl_with_reflect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L984"
    }
  },
  "unconfig_flow_exporter": {
    "iosxe": {
      "doc": " Unconfigures Flow Exporter on Device\n\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_flow_exporter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L48"
    }
  },
  "unconfig_interface_isis": {
    "iosxe": {
      "doc": "Unconfig ISIS on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ipv6 ('boolean',optional): Flag to configure IPv6 (Default False)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_isis",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L107"
    }
  },
  "unconfig_interface_isis_router_name": {
    "iosxe": {
      "doc": "Unconfig ISIS router name on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            router_name ('str'):configure the isis router name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_isis_router_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L213"
    }
  },
  "unconfig_interface_mtu": {
    "iosxe": {
      "doc": " Remove MTU config from interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L492"
    }
  },
  "unconfig_interface_ospfv3": {
    "iosxe": {
      "doc": "unconfig OSPF on interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ospfv3_pid (`str`): Ospfv3 process id\n            area ('int'): Ospf area code\n            ipv4 ('boolean',optional): Flag to remove IPv4 (Default False)\n            ipv6 ('boolean',optional): Flag to remove IPv6 (Default True)\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3352"
    }
  },
  "unconfig_interface_ripng": {
    "iosxe": {
      "doc": "unconfig RIPng on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            ripng_pid ('str'): ripng process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_interface_ripng",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L91"
    }
  },
  "unconfig_ip_on_vlan": {
    "iosxe": {
      "doc": "unconfigures an IPv4/IPv6 address on a vlan\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`str`): Vlan id\n            ipv4_address (`str`): IPv4 address\n            subnetmask (`str`): Subnet mask to be used for IPv4 address\n            ipv6_address (`str`): Ipv6 address\n            ipv6_prefix_len (`int`): length of IPv6 prefix\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to unconfigure Ipv4/Ipv6 address on vlan\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ip_on_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L73"
    }
  },
  "unconfig_ip_tcp_mss": {
    "iosxe": {
      "doc": " Unconfigures tcp Maximum Segment Size\n\n        Args:\n            device ('obj'): device to use\n            global_config_key ('str'): set global_config_key to 1 for global else set it to 0 for interface level config\n            seg_size ('str'): segment size value to apply, range:0-10000\n            interface ('str'): interface on which mss needs to be unconfigured.\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ip_tcp_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1403"
    }
  },
  "unconfig_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Remove specified options for ipv6 nd raguard policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    device_role ('bool', optional)\n                    hop_limit ('dict', optional)\n                        max ('bool')\n                        min ('bool')\n                    managed_config_flag ('bool', optional)\n                    match ('dict', optional)\n                        ipv6 ('bool')\n                        ra ('bool')\n                    other_config_flag ('bool', optional)\n                    router_preference ('bool', optional)\n                    trusted_port ('bool', optional)\n                ex.)\n                    [\n                        {\n                            \"device_role\": True,\n                            \"hop_limit\": {\n                                \"max\": True,\n                                \"min\": True\n                            },\n                            \"managed_config_flag\": True,\n                            \"match\": {\n                                \"ipv6\": True,\n                                \"ra\": True\n                            },\n                            \"other_config_flag\": True,\n                            \"router_preference\": True,\n                            \"trusted_port\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 nd raguard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L827"
    }
  },
  "unconfig_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Remove specified options for ipv6 source-guard policy\n        Args:\n            device ('obj'): device object\n            policy ('str'): policy name\n            options ('list'): list of policy configuration options to be removed or reset:\n                dictionary contains following keys:\n                    deny ('bool', optional)\n                    permit ('bool', optional)\n                    trusted ('bool', optional)\n                    validate ('dict', optional)\n                        source ('bool')\n                ex.)\n                    [\n                        {\n                            \"deny\": True,\n                            \"permit\": True,\n                            \"trusted\": True,\n                            \"validate\": {\n                                \"address\": True,\n                                \"prefix\": True,\n                        }\n                    ]\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to remove ipv6 source-guard policy configurations\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L959"
    }
  },
  "unconfig_mac_aging_time": {
    "iosxe": {
      "doc": " Unconfig mac-aging time under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mac_aging_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L43"
    }
  },
  "unconfig_mac_learning": {
    "iosxe": {
      "doc": " Unconfig mac learning under bridge domain\n\n        Args:\n            device (`obj`): device object\n            bridge_domain (`int`): bridge domain id\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mac_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L96"
    }
  },
  "unconfig_macsec_keychain_on_device": {
    "iosxe": {
      "doc": " Unconfigures macsec key chain on device\n        Args:\n            device ('obj'): device to use\n            keychain_name ('str'): keychain name to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_macsec_keychain_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L174"
    }
  },
  "unconfig_macsec_network_link_on_interface": {
    "iosxe": {
      "doc": " Un configures macsec network-link on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_macsec_network_link_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L271"
    }
  },
  "unconfig_macsec_should_secure": {
    "iosxe": {
      "doc": " Unconfigures macsec should secure on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to Unconfigure should secure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_macsec_should_secure",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L111"
    }
  },
  "unconfig_mdns_sd_service_peer": {
    "iosxe": {
      "doc": " UNConfig MDNS_SD_SERVICE PEER\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan value\n            ip_addr ('str'): ipv4,ipv6 address\n            response_timer ('int'): active response timer\n            timer ('int'): Timer value\n            count ('int'): Count value\n            value ('int'): rate limit value\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mdns_sd_service_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L311"
    }
  },
  "unconfig_mka_policy": {
    "iosxe": {
      "doc": " Unconfigures mka policy on interface/device \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n            global_level ('bool'): device level to unconfigure\n            policy_name ('str'): Policy name to Unconfigure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L432"
    }
  },
  "unconfig_mka_policy_xpn": {
    "iosxe": {
      "doc": " Unconfigures mka policy xpn on device\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_mka_policy_xpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L411"
    }
  },
  "unconfig_pseudowire_class": {
    "iosxe": {
      "doc": " unconfigure pseudowire class\n\n        Args:\n            device (`obj`): Device object\n            pw_class ('str'): pseudowire class name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_pseudowire_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L709"
    }
  },
  "unconfig_qos_rewrite_dscp": {
    "iosxe": {
      "doc": "Unconfig qos rewrite ip dscp on Device\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring qos rewrite ip dscp on device\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_qos_rewrite_dscp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L240"
    }
  },
  "unconfig_refacl_global_timeout": {
    "iosxe": {
      "doc": " Unconfigures timeout for reflexive acl globally \n\n        Args:\n            device ('obj'): device to use\n            timeout ('str'): time out value to apply, range:30-2147483\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_refacl_global_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1344"
    }
  },
  "unconfig_standard_acl_for_ip_pim": {
    "iosxe": {
      "doc": " Configures a standard IP access list.\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n        Returns:\n            config\n        Raises:\n            SubCommandFailure: Failed to configure access-list\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_standard_acl_for_ip_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L330"
    }
  },
  "unconfig_vlan": {
    "iosxe": {
      "doc": " vlan on Interface or Device configuration removal\n\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L106"
    }
  },
  "unconfig_vlan_range": {
    "iosxe": {
      "doc": " Unconfigures a VLAN on Device\n        e.g.\n        no vlan 1 - 4094\n\n        Args:\n            device (`obj`): Device object\n            vlanid_start (`int`): Vlan id start \n            vlanid_end (`int`): Vlan id end\n\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_vlan_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L315"
    }
  },
  "unconfig_vlan_tag_native": {
    "iosxe": {
      "doc": " Unconfigure vlan dot1q tag native\n\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring device\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_vlan_tag_native",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L337"
    }
  },
  "unconfig_xconnect_on_interface": {
    "iosxe": {
      "doc": " unconfigure xconnect neighbor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface on which the edge trunk config to be applied\n            neighbor (`str`): Neighbor to be configured on xconnect\n            vcid (`str`): Vcid to be configured through xconnect\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfig_xconnect_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L282"
    }
  },
  "unconfigure_400g_mode_for_port_group": {
    "iosxe": {
      "doc": " disable 400g mode conversion on Metaluna LC\n        Args:\n            device (`obj`): Device object\n            slot (`int`): Metaluna slot\n            port_group ('int'): port group number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_400g_mode_for_port_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L33"
    }
  },
  "unconfigure_400g_mode_port_group_range": {
    "iosxe": {
      "doc": " disable 400g mode range conversion on Metaluna LC\n        Args:\n            device (`obj`): Device object\n            slot (`int`): Metaluna slot\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_400g_mode_port_group_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L76"
    }
  },
  "unconfigure_aaa_accounting_commands": {
    "iosxe": {
      "doc": " configure 'aaa accounting commands {level=15} {level_name=\"default\"} {level_action=\"none\"}'\n    Args:\n        device (`obj`)   : Device object\n        accounting_level('str') : <0-15> Enable level\n        accounting_name('str')  : Below are the possible options\n            WORD     Named Accounting list (max 255 characters, longer will be rejected).\n            default  The default accounting list.\n        accounting_action('str')  : Below are the possible options\n            none        No accounting.\n            start-stop  Record start and stop without waiting\n            stop-only   Record stop when service terminates.\n            wait-start  Same as start-stop but wait for start-record commit.\n            <cr>        <cr>\n        group ('str')  : Below are the possible options\n            broadcast  Use Broadcast for Accounting\n            group      Use Server-group\n            logger     Use system logger for Accounting\n            tacacs+    Use TACACS+.\n        group_name ('str')  :  Server-group name\n            Example: \n            code: uut.api.configure_aaa_accounting_commands(accounting_level=\"15\",accounting_name=\"test\",accounting_action=\"none\")\n            Output: aaa accounting commands 15 test none\n            code: uut.api.configure_aaa_accounting_commands(accounting_level=\"1\",accounting_name=\"default\",accounting_action=\"start-stop\",group=\"broadcast\",group_name=\"DATANET\")\n            Output: aaa accounting commands 1 default start-stop group DATANET\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_accounting_commands",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2186"
    }
  },
  "unconfigure_aaa_attr_list": {
    "iosxe": {
      "doc": " Unconfigure Attribute list with type\n    Args:\n        device (`obj`): Device object\n        attr_list_name ('str'): Attribute list name\n        \n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring Attribute list with type\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_attr_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1392"
    }
  },
  "unconfigure_aaa_auth_cred_download": {
    "iosxe": {
      "doc": " unconfigure aaa authorization credential-download default local\n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring AAA auth credential download\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_auth_cred_download",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1321"
    }
  },
  "unconfigure_aaa_auth_proxy": {
    "iosxe": {
      "doc": "\n    Unconfigure AAA auth proxy\n    Args:\n        device (`obj`): Device object\n        server_grp ('str'): Name of the server group\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring AAA auth proxy\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_auth_proxy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1096"
    }
  },
  "unconfigure_aaa_authentication_enable": {
    "iosxe": {
      "doc": " unconfigure 'aaa authentication enable default'\n    Args:\n        device (`obj`)   : Device object\n    Example: \n        code: uut.api.unconfigure_aaa_authentication_enable()\n        Output: aaa authentication enable default group DATANET enable\n    \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_authentication_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2037"
    }
  },
  "unconfigure_aaa_authorization_commands": {
    "iosxe": {
      "doc": " unconfigure 'aaa authorization commands {level=15} {level_name=\"default\"} {level_action=\"none\"}'\n    Args:\n        device (`obj`)   : Device object\n        level('str') : <0-15> Enable level\n        level_name('str')  : Below are the possible options\n            WORD     Named authorization list (max 255 characters, longer will be rejected).\n            default  The default authorization list\n\n        level_action('str')  : Below are the possible options\n            cache             Use Cached-group\n            if-authenticated  Succeed if user has authenticated.\n            local             Use local database.\n            none              No authorization (always succeeds).\n            radius            Use RADIUS data for authorization\n            tacacs+           Use TACACS+.\n\n            Example: \n            code: uut.api.unconfigure_aaa_authorization_commands(level=\"15\", level_name=\"test\", level_action=\"local\")\n            Output: no aaa authorization commands 15 test local\n            code: uut.api.unconfigure_aaa_authorization_commands(level=\"15\", level_name=\"default\", group_name=\"Test\", level_action=\"if-authenticated\")\n            Output: no aaa authorization commands 15 default group Test if-authenticated\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_authorization_commands",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2099"
    }
  },
  "unconfigure_aaa_default_dot1x_methods": {
    "iosxe": {
      "doc": " configure aaa default dot1x methods\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_default_dot1x_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L537"
    }
  },
  "unconfigure_aaa_local_auth": {
    "iosxe": {
      "doc": " unconfigure aaa local authentication default authorization default\n    Args:\n        device (`obj`): Device object\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring AAA local auth \n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_local_auth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1438"
    }
  },
  "unconfigure_aaa_login_method_none": {
    "iosxe": {
      "doc": " This configure will enable login method none that is applicable for line and vty\n        from getting locked for password \n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_login_method_none",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L586"
    }
  },
  "unconfigure_aaa_new_model": {
    "iosxe": {
      "doc": " unconfigure aaa new-model\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_new_model",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1461"
    }
  },
  "unconfigure_aaa_session_id": {
    "iosxe": {
      "doc": " unconfigure aaa session id\n    Args:\n        device (`obj`): Device object\n        type ('str'): Type of the session ID to be unconfigured\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring AAA session ID\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_aaa_session_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1278"
    }
  },
  "unconfigure_access_session_limit": {
    "iosxe": {
      "doc": "Unconfigure Access session and event limit\n        Args:\n            device ('obj'): device to use\n                        \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to unconfigure Access session and event limit\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_access_session_limit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1538"
    }
  },
  "unconfigure_access_session_monitor": {
    "iosxe": {
      "doc": " Enable access-session  monitor\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to enable access-session monitor\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_access_session_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L461"
    }
  },
  "unconfigure_access_session_sticky": {
    "iosxe": {
      "doc": " configure interface-template sticky timer\n        Args:\n            device ('obj'): device to use\n            timer (int): <1-65535>  Enter a value between 1 and 65535\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure interface-template sticky timer\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_access_session_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L480"
    }
  },
  "unconfigure_ace": {
    "iosxe": {
      "doc": " Unconfigure Access-list Entry (ACE) from Access-list\n\n        Args:\n            device ('obj'): device object\n            acl_name ('str'): acl name\n            permission ('str'): (permit | deny)\n            protocol ('str'): protocol\n            src_ip ('str', optional): source start ip\n            src_wildcard ('str', optional): source wildcard\n            dst_ip ('str', optional): destination start ip\n            dst_wildcard ('str', optional): destination wildcard\n            acl_type ('str', optional): type of ACL like with or without host keyword, default value is None\n            sequence_num ('str',optional): specific sequence number, default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L270"
    }
  },
  "unconfigure_acl": {
    "iosxe": {
      "doc": " unconfigure Access-list\n\n        Args:\n            device (`obj`): Device object\n            acl_name (`str`): Access-list name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L241"
    }
  },
  "unconfigure_acl_with_src_dsc_net": {
    "iosxe": {
      "doc": " Unconfigures acl\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): ACL name\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_acl_with_src_dsc_net",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1570"
    }
  },
  "unconfigure_active_timer_under_et_analytics": {
    "iosxe": {
      "doc": " unconfiguring active timer under  et-analytics\n        \n        Args:\n            device ('obj'): device to use\n            timer ('int'): timer value in seconds \n       \n        Return:\n            None\n        \n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_active_timer_under_et_analytics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L630"
    }
  },
  "unconfigure_any_radius_server": {
    "iosxe": {
      "doc": " Unconfigure radius server on device\n    Args:\n        device (`obj`): Device object\n        server_name (`str`): Radius server name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_any_radius_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L420"
    }
  },
  "unconfigure_archive_logging": {
    "iosxe": {
      "doc": " Unconfigure archive logging enable for switch\n        Args:\n            device ('obj'): Device object\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L481"
    }
  },
  "unconfigure_archive_maximum": {
    "iosxe": {
      "doc": " Unconfigure archive maximum for switch\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_maximum",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2199"
    }
  },
  "unconfigure_archive_path": {
    "iosxe": {
      "doc": " Unconfigure archive path for switch\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2156"
    }
  },
  "unconfigure_archive_rollback": {
    "iosxe": {
      "doc": " Unconfigure archive rollback for switch\n        Args:\n            device ('obj'): Device object\n            rollback_option ('str'): if archive_option is rollback\n            ex:)\n                filter  Rollback filter parameter\n                retry   Rollback retry parameters\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_rollback",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2245"
    }
  },
  "unconfigure_archive_time_period": {
    "iosxe": {
      "doc": " Unconfigure archive time-period for switch\n        Args:\n            device ('obj'): Device object\n                \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_time_period",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2296"
    }
  },
  "unconfigure_archive_write_memory": {
    "iosxe": {
      "doc": " Unconfigure archive write memory for switch\n        Args:\n            device ('obj'): Device object\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_archive_write_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2337"
    }
  },
  "unconfigure_as_path_acl": {
    "iosxe": {
      "doc": " unconfigure Access-list for as-path\n        Args:\n            device ('obj'): Device object\n            acces_list_number ('int'): Access-list identifier ranges from <1-500>\n            action('str'): permit or deny\n            reg_exp ('str'): regular expression which matches for the acl\n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_as_path_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1694"
    }
  },
  "unconfigure_auth_method": {
    "iosxe": {
      "doc": "unconfigure legacy cli \n    authentication method mab/dot1x pae authenticator\n    Args:\n        device (`obj`): Device object\n        value (`str`): mab/dot1x\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_auth_method",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L890"
    }
  },
  "unconfigure_authentication_host_mode": {
    "iosxe": {
      "doc": "UnConfigure legacy cli authentication host-mode multi-auth/multi-domain/multi-host/single-host\n    Args:\n        device (`obj`): Device object\n        mode (`str`): Host mode\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (Default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_host_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L595"
    }
  },
  "unconfigure_authentication_order": {
    "iosxe": {
      "doc": "UnConfigure legacy cli authentication order dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        order (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_order",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L646"
    }
  },
  "unconfigure_authentication_periodic": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication periodic\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_periodic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L794"
    }
  },
  "unconfigure_authentication_port_control": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication port-control auto/force-authorized/force-unauthorized\n    Args:\n        device (`obj`): Device object\n        control (`str`): auto/force-authorized/force-unauthorized\n        intf (`str`): Interface to configure\n        style (`str`, optional): legacy or new (default is legacy)\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_port_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L743"
    }
  },
  "unconfigure_authentication_priority": {
    "iosxe": {
      "doc": "Unconfigure legacy cli authentication priority dot1x/mab/webauth\n    Args:\n        device (`obj`): Device object\n        priority (`str`): mab dot1x/dot1x/mab/dot1x mab\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L690"
    }
  },
  "unconfigure_authentication_timer_reauth": {
    "iosxe": {
      "doc": "UnConfigure legacy cli \n    authentication timer reauthenticate value/server\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n    Return:   \n        None\n    Raise:\n        SubCommandFailure: Failed configuring  \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_authentication_timer_reauth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L839"
    }
  },
  "unconfigure_auto_qos": {
    "iosxe": {
      "doc": " Unconfigures the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n            qos_mode ('str') : qos_mode name\n            qos_value ('str'): qos_value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_auto_qos",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L128"
    }
  },
  "unconfigure_auto_qos_global": {
    "iosxe": {
      "doc": " unconfigures the auto qos global compact\n        Args:\n            device ('obj'): device to use\n            compact('str'): name of compact\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_auto_qos_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L185"
    }
  },
  "unconfigure_autoconf": {
    "iosxe": {
      "doc": " Unconfigure autoconf enable\n    \n    Args:\n        device ('obj'): device to use\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_autoconf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1763"
    }
  },
  "unconfigure_bandwidth_remaining_policy_map": {
    "iosxe": {
      "doc": " Unconfigures policy_map\n        Args:\n             device ('obj'): device to use\n             policy_names('list) : list of policy-maps i.e. parent and grandparent  \n        example:\n             policy_names=['parent','grandparent']\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bandwidth_remaining_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L300"
    }
  },
  "unconfigure_bba_group": {
    "iosxe": {
      "doc": " bba-group\n        Args:\n            device (`obj`): Device object\n            name (`str`): bba-group name\n            vt_number (`str`): virtual-template interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bba_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L130"
    }
  },
  "unconfigure_bfd_neighbor_on_interface": {
    "iosxe": {
      "doc": " Unconfigures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            address_family ('str'): ipv4|ipv6 address family\n            neighbor_address ('str'): neighbor address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bfd_neighbor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L194"
    }
  },
  "unconfigure_bfd_on_interface": {
    "iosxe": {
      "doc": " Unconfigures bfd on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bfd_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L122"
    }
  },
  "unconfigure_bfd_value_on_interface": {
    "iosxe": {
      "doc": " Unconfigures bfd on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            bfd ('str'): bfd value to unconfigure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n    ",
      "module_name": "bfd.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bfd_value_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/configure.py#L232"
    }
  },
  "unconfigure_bgp_auto_summary": {
    "iosxe": {
      "doc": " Configures the auto-summary on router bgp\n        Example: router bgp 100\n                no auto-summary\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_auto_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1974"
    }
  },
  "unconfigure_bgp_log_neighbor_changes": {
    "iosxe": {
      "doc": " Unconfigures the log neighbor changes on router bgp\n        Example: router bgp 100\n                no log-neighbor-changes\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_log_neighbor_changes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1930"
    }
  },
  "unconfigure_bgp_neighbor_activate": {
    "iosxe": {
      "doc": " Unconfigure Activate bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1421"
    }
  },
  "unconfigure_bgp_neighbor_remote_as": {
    "iosxe": {
      "doc": " unonfigure destination in vrf\n        Args:\n            device ('obj'): Device object\n            bgp_as ('str'): Router bgp\n            neighbor_as ('str'): Destination\n            neighbor_address ('str'): Neighbor address\n            address_family ('str'): Address family\n            vrf ('str'): Vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_remote_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1465"
    }
  },
  "unconfigure_bgp_neighbor_send_community": {
    "iosxe": {
      "doc": " Remove send-community attribute for bgp neighbor on bgp router\n\n        Args:\n            device ('obj')             : Device to be configured\n            bgp_as ('str')             : Bgp Id to be added to configuration\n            neighbor_address ('str')   : Address of neighbor to be added to configuration\n            address_family ('str')     : Address family to be configured\n            vrf ('str')                : vrf name\n            send_community ('str')     : send-community attribute to be configured\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_neighbor_send_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1367"
    }
  },
  "unconfigure_bgp_redistribute_internal": {
    "iosxe": {
      "doc": " Unconfigures bgp redistribute internal on bgp router\n        Args:\n            device('obj'): device to configure on\n            bgp_as('str'): bgp_as to configure\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bgp_redistribute_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2123"
    }
  },
  "unconfigure_boot_system": {
    "iosxe": {
      "doc": " Unconfigures the boot variable from the system\n        Example : no boot system\n        \n        Args:\n            device ('obj'): device to use\n            \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_boot_system",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1209"
    }
  },
  "unconfigure_boot_system_switch_switchnumber": {
    "iosxe": {
      "doc": " Delete the boot variables\n        Args:\n            device ('obj'): Device object\n            switch_num ('int'): Switch number\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_boot_system_switch_switchnumber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3607"
    }
  },
  "unconfigure_broadband_aaa": {
    "iosxe": {
      "doc": " Unconfigure aaa configuration for broadband \n        Args:\n            device (`obj`): Device object\n            server_name (`str`): aaa group server name\n            interval (`str`): Accounting time interval\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_broadband_aaa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L276"
    }
  },
  "unconfigure_bulkstat_profile": {
    "iosxe": {
      "doc": " unconfigure bulkstat profile\n    Args:\n        device ('obj'): device to use\n        name ('str') : profile name to be removed \n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_bulkstat_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L917"
    }
  },
  "unconfigure_call_admission": {
    "iosxe": {
      "doc": "Common funtion to unconfigure call admission new model\n        Args:\n            device ('obj'): device to use\n            limit('int'): call admission limit value\n            cpu_limit('int'): call admission cpu limit value\n            session_lifetime('int'): call admission session lifetime value\n            per_session_charge('int'): call admission per session charge value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_call_admission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L224"
    }
  },
  "unconfigure_call_home": {
    "iosxe": {
      "doc": " Unconfigures call-home\n        Example : no call-home\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_call_home",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L252"
    }
  },
  "unconfigure_call_home_profile": {
    "iosxe": {
      "doc": " Unconfigures call home profile destination\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_call_home_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L658"
    }
  },
  "unconfigure_call_home_profile_active": {
    "iosxe": {
      "doc": " Unconfigures call home profile active\n        Args:\n            device ('obj'): device to use\n            profile ('str'): call home profile\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_call_home_profile_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L505"
    }
  },
  "unconfigure_call_home_sub_cli": {
    "iosxe": {
      "doc": " Unconfigures call-home sub cli\n        Example : no rate-limit\n        Args:\n            device ('obj'): device to use\n            sub_cli ('str'): sub-cli to unconfigure (eg. rate-limit)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_call_home_sub_cli",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L383"
    }
  },
  "unconfigure_cdp": {
    "ios": {
      "doc": "\n        Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/configure.py#L41"
    },
    "iosxe": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L41"
    },
    "iosxr": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/configure.py#L20"
    },
    "nxos": {
      "doc": " Disable cdp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/configure.py#L18"
    }
  },
  "unconfigure_cdp_holdtime": {
    "iosxe": {
      "doc": " Disable cdp holdtime on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L203"
    }
  },
  "unconfigure_cdp_interface": {
    "iosxe": {
      "doc": " Unconfigure CDP on interface\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface on which CDP to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L96"
    }
  },
  "unconfigure_cdp_neighbors": {
    "iosxe": {
      "doc": " Disable cdp on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L136"
    }
  },
  "unconfigure_cdp_timer": {
    "iosxe": {
      "doc": " Disable cdp timer on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "cdp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cdp_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/configure.py#L169"
    }
  },
  "unconfigure_class_map": {
    "iosxe": {
      "doc": " Unconfigures class-map\n        Args:\n             device ('obj'): device to use\n             class_name ('str'): name of the class\n             class_match_type ('str',optional): name of the match type, default is 'match-all'\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_class_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_class_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_class_map/configure.py#L65"
    }
  },
  "unconfigure_class_map_subscriber": {
    "iosxe": {
      "doc": "Unconfigure Class Map Subscriber\n        Args:\n            device ('obj'): device to use\n            map_name (`str`): map name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to unconfigure Class Map Subscriber\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_class_map_subscriber",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1127"
    }
  },
  "unconfigure_coa": {
    "iosxe": {
      "doc": " unconfigure COA Configuration\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_coa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1480"
    }
  },
  "unconfigure_commands_from_template": {
    "iosxe": {
      "doc": " Unconfigure commands from a template\n    \n    Args:\n        device ('obj'): device to use\n        template_name ('str'): Select a template to configure\n        cmd_to_add ('str'): Template configuration commands\n        ex:)\n            aaa              Authentication, Authorization and Accounting.\n            access-session   Access Session specific Interface Configuration Commands\n            authentication   Auth Manager Interface Configuration Commands\n            carrier-delay    Specify delay for interface transitions\n            cts              Configure Cisco Trusted Security\n            default          Set a command to its defaults\n            description      Interface specific description\n            device-tracking  Device tracking commands on the interface\n            dialer           Dial-on-demand routing (DDR) commands\n            dialer-group     Assign interface to dialer-list\n            dot1x            Interface Config Commands for IEEE 802.1X\n            ethernet         Ethernet service\n            exit             Exit from template configuration mode\n            hold-queue       Set hold queue depth\n            ip               IP template config\n            ip               Interface Internet Protocol config commands\n            ipv6             IPv6 interface commands\n            keepalive        Enable keepalive\n            load-interval    Specify interval for load calculation for an interface\n            loopdetect       Configure loopdetect feature setting\n            mab              MAC Authentication Bypass Interface Config Commands\n            negate           Negate the following commands on a template\n            no               Negate a command or set its defaults\n            peer             Peer parameters for point to point interfaces\n            ppp              Point-to-Point Protocol\n            remark           template description comment\n            service-policy   Configure CPL Service Policy\n            source           Get config from another source\n            spanning-tree    Spanning Tree Subsystem\n            storm-control    storm configuration\n            subscriber       Subscriber inactivity timeout value.\n            switchport       Set switching mode characteristics\n            trust            Set trust value for the interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_commands_from_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1735"
    }
  },
  "unconfigure_common_criteria_policy": {
    "iosxe": {
      "doc": " Unconfigure aaa common criteria policy\n    Args:\n        device (`obj`):      Device object\n        policy_name (`str`): Policy name\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_common_criteria_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L935"
    }
  },
  "unconfigure_control_policies": {
    "iosxe": {
      "doc": " Unconfigure policy-map on an device\n\n        Args:\n            device (`obj`): Device object\n            policy_name (`str`): name of the policy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_control_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5665"
    }
  },
  "unconfigure_controller_policy_service_export": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) controller service-policy\n        Args:\n            device ('obj'): device to use\n            name ('str')\n            policy_name ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns controller service-policy\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_controller_policy_service_export",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1667"
    }
  },
  "unconfigure_controller_service_policy_service_export": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) controller service-policy\n    \n        service-export mdns-sd controller DNAC\n        no controller-service-policy policy_name contrl-policy\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str'): controller name\n            policy_name ('str'): Policy any name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns controller service-policy\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_controller_service_policy_service_export",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1394"
    }
  },
  "unconfigure_crypto_ikev2_NAT_keepalive": {
    "iosxe": {
      "doc": " unConfigure crypto ikev2 nat keepalive <time in secs>\n    Args:\n        device (`obj`): Device object\n        keepalive_time (`int`): keepalive time in secs\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_ikev2_NAT_keepalive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L764"
    }
  },
  "unconfigure_crypto_ikev2_keyring": {
    "iosxe": {
      "doc": " Unconfigure Crypto Ikev2 Keyring\n    Args:\n        device (`obj`): Device object\n        keyring (`str`): Radius server name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_ikev2_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L495"
    }
  },
  "unconfigure_crypto_ikev2_policy": {
    "iosxe": {
      "doc": " Unconfigure Crypto Ikev2 proposal\n    Args:\n        device (`obj`): Device object\n        policy_name (`str`): name of ikev2 policy name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_ikev2_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L981"
    }
  },
  "unconfigure_crypto_ikev2_proposal": {
    "iosxe": {
      "doc": " Unconfigure Crypto Ikev2 proposal\n    Args:\n        device (`obj`): Device object\n        proposal_name (`str`): proposal name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_ikev2_proposal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L623"
    }
  },
  "unconfigure_crypto_ipsec_nat_transparency": {
    "iosxe": {
      "doc": " Configure no crypto ipsec nat-transparency udp-encapsulation\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_ipsec_nat_transparency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L661"
    }
  },
  "unconfigure_crypto_key": {
    "iosxe": {
      "eaptls": {
        "doc": " Unconfigures Crypto Key on device\n        Args:\n            device ('obj'): device to use\n            label_name ('str'): Label name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "unconfigure_crypto_key",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L303"
      }
    }
  },
  "unconfigure_crypto_map_for_gdoi": {
    "iosxe": {
      "doc": " UnConfigure crypto map\n        Args:\n            device (`obj`): Device object\n            map_name ('int'): type of key that will follow\n            seq ('str'): Sequence Number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_map_for_gdoi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/configure.py#L265"
    }
  },
  "unconfigure_crypto_map_on_interface": {
    "iosxe": {
      "doc": " Unconfig crypto map on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ipv6 (`bool`): Indicate if this is ipv6 crypto map. Default false\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_map_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4722"
    }
  },
  "unconfigure_crypto_pki_server": {
    "iosxe": {
      "doc": "\n        Configure crypto pki server\n        Args:\n            device ('obj'): Device object\n            server_name ('str'): Name for the pki server\n    ",
      "eaptls": {
        "doc": " Unconfigures crypto pki server on device\n\n        Args:\n            device (`obj`): Device object\n            server_name ('str'): Name of the server\n\n        Returns:\n            None\n\n        Raise:\n            SubCommandFailure: Failed to unconfigure crypto pki server on device\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "unconfigure_crypto_pki_server",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L136"
      },
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_pki_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L487"
    }
  },
  "unconfigure_crypto_transform_set": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')    : device to use\n            transform_name ('str).  Transform set name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_crypto_transform_set",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L193"
    }
  },
  "unconfigure_cts_aaa_methods": {
    "iosxe": {
      "doc": " Unconfigure cts aaa methods\n        Args:\n            device ('obj'): device to use\n            server_grp ('str'): server group name\n            list_name ('str'): cts authorisation list name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure cts aaa methods\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_aaa_methods",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L1058"
    }
  },
  "unconfigure_cts_authorization_list": {
    "iosxe": {
      "doc": " Unconfigure Local authorization list to use for CTS\n        Args:\n            device ('obj'): device to use\n            authlist ('str'): Named authorization list to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure Local authorization list\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_authorization_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L272"
    }
  },
  "unconfigure_cts_enforcement_interface": {
    "iosxe": {
      "doc": " Unconfigure cts role-based enforcement on interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: cts role-based enforcement not unconfigured\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_enforcement_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L907"
    }
  },
  "unconfigure_cts_enforcement_logging": {
    "iosxe": {
      "doc": " Unconfigure cts enforcement logging\n        Args:\n            device ('obj'): device to use\n            log_interval ('str'): logging interval in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure cts enforcement logging\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_enforcement_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L1009"
    }
  },
  "unconfigure_cts_manual": {
    "iosxe": {
      "doc": " unconfigures cts manual\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to use\n        \n        Returns:\n            None \n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L468"
    }
  },
  "unconfigure_cts_role_based_monitor": {
    "iosxe": {
      "doc": " Unconfigure cts role based monitor\n        Args:\n            device ('obj'): device to use\n            default ('str'): default\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n            src_sgt ('str'): Source Group Tag\n            dst_sgt ('str'): Destination Group Tag            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure cts role based monitor\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_role_based_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L860"
    }
  },
  "unconfigure_cts_role_based_permission": {
    "iosxe": {
      "doc": " Unconfigure cts role based permissions\n        Args:\n            device ('obj'): device to use\n            src_sgt ('str'): Source Group Tag\n            dest_sgt ('str'): Destination Group Tag\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure cts role based permissions\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_role_based_permission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L772"
    }
  },
  "unconfigure_cts_role_based_permission_default": {
    "iosxe": {
      "doc": " Unconfigure cts role based permissions default\n        Args:\n            device ('obj'): device to use\n            protocol_version ('str'): protocol version to configure (ipv4 or ipv6)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure cts role based permissions default\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_cts_role_based_permission_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L811"
    }
  },
  "unconfigure_datalink_flow_monitor": {
    "iosxe": {
      "doc": " Config datalink flow monitor m4out input on Device\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface\n            modetype('str'): different mode types\n            ex:)\n                input    Apply Flow Monitor on input traffic\n                output   Apply Flow Monitor on output traffic\n                sampler  Optional Sampler to apply to this Flow Monitor\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed configuring datalink flow monitor m4out\n    ",
      "module_name": "c960.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_datalink_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c960/configure.py#L174"
    }
  },
  "unconfigure_debug_snmp_packets": {
    "iosxe": {
      "doc": " enable snmp debugs on device\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_debug_snmp_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L452"
    }
  },
  "unconfigure_default_switchport_trunk_vlan": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n        Returns:\n            interface members\n        Raises:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_default_switchport_trunk_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L746"
    }
  },
  "unconfigure_device_classifier": {
    "iosxe": {
      "doc": " Unconfigure device classifier on this device\n    \n    Args:\n        device ('obj'): device to use\n        dc_option ('str'): device classifier option\n        ex:)\n            condition    Define device classifier condition\n            device-type  Define device type\n        dc_option_name ('str'): Name of device classifier type\n        ex:)\n            WORD  Condition name\n            WORD  Device type name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_classifier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L782"
    }
  },
  "unconfigure_device_tracking_binding": {
    "iosxe": {
      "doc": "Removes static entry to binding table\n    Args:\n        device ('obj'): device object\n        vlan ('str'): vlan id\n        address ('str'): ip address (v4 or v6)\n        interface ('str'): interface for entry - Eg. TWE 1/0/1\n        mac ('str'): entry's mac address\n        tracking ('str', optional): Set the tracking for the device - Eg. \"enable\", \"disable\", or \"default\" . Defaults to \"default.\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to add static entry\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1813"
    }
  },
  "unconfigure_device_tracking_binding_options": {
    "iosxe": {
      "doc": " Unconfigures device-tracking binding options\n        Args:\n            device ('obj'): device object\n            reachable_lifetime ('bool', optional): Flag to unconfigure reachable-lifetime. Defaults to False\n            stale_lifetime ('bool', optional): Flag to unconfigure stale-lifetime. Defaults to False\n            down_lifetime ('bool', optional): Flag to unconfigure down-lifetime. Defaults to False\n            max_entries ('bool', optional): Flag to unconfigure max-entries lifetime. Defaults to False\n            logging ('bool', optional): Disable syslog logging of binding table events. Defaults to False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure device-tracking binding\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_binding_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L1904"
    }
  },
  "unconfigure_device_tracking_on_interface": {
    "iosxe": {
      "doc": " Unconfigure device-tracking on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to remove device-tracking from interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2315"
    }
  },
  "unconfigure_device_tracking_tracking": {
    "iosxe": {
      "doc": " Unconfigure device-tracking tracking\n\n    Args:\n        device (\"obj\"): The device to configure\n        auto_source (\"bool\", optional): The configuration for auto_source - either override or failback address. Defaults to False.\n        retry_interval (\"bool\", optional): Device-tracking retry-interval in seconds. Defaults to False.\n\n    Raises:\n        SubCommandFailure: Failed to unconfigure device-tracking tracking\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_device_tracking_tracking",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2072"
    }
  },
  "unconfigure_dhcp_channel_group_mode": {
    "iosxe": {
      "doc": "Unconfigures Ethernet port to an EtherChannel group\n       Example: no channel-group 120 mode active\n\n       Args:\n            device ('obj'): device object\n            interface ('str): interface to configure (eg. Gig1/0/1)\n            group ('int'): Channel group number. The range is 1 to 128\n            mode ('str'): EtherChannel mode (eg. active, passive, auto)\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dhcp_channel_group_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L890"
    }
  },
  "unconfigure_dhcp_relay_information": {
    "iosxe": {
      "doc": " Disable dhcp relay information on device\n        Args:\n            device ('obj'): device to run on\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed disabling relay information on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dhcp_relay_information",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L604"
    }
  },
  "unconfigure_dhcp_relay_short_lease": {
    "iosxe": {
      "doc": " Unconfigure DHCP relay short lease\n        Args:\n            device ('obj'): device to use\n            lease_time ('int'): dhcp lease time\n            interface ('str',optional): interface name ,defaut is empty string\n            lease_time ('int'): dhcp lease time\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to disable dhcp relay short lease\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dhcp_relay_short_lease",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L699"
    }
  },
  "unconfigure_diagnostic_monitor_switch": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 test\n    \n        Args:\n            device ('obj'): Device object\n            switch_number ('int'): Switch number on which diagnostic has to be performed\n            test_name ('str'): Word , test name \n            \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_diagnostic_monitor_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3291"
    }
  },
  "unconfigure_diagnostic_schedule_switch": {
    "iosxe": {
      "doc": " execute diagnostic start switch 1 test\n        Args:\n            device ('obj'): Device object\n            switch_number ('int'): Switch number on which diagnostic has to be performed\n            time ('str'): time in hours and min  \"hh:mm  Begin time\"\n            day ('str'): Day of the week\n            day_number ('int'): day number of a month\n            month('str'): name of the month\n            year ('int'): year number , \n          \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_diagnostic_schedule_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3349"
    }
  },
  "unconfigure_diagonistics_monitor_switch": {
    "iosxe": {
      "doc": " diagonistics monitor switch\n        Args:\n            device ('obj'): Device object\n            switch_num('int'): switch number\n            test_name('str'): diagnostic_test_name\n            time('str'): time in hh:mm:ss\n            millisec('int'): milli seconds\n            days('int'): test_days \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_diagonistics_monitor_switch",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L362"
    }
  },
  "unconfigure_disable_sci_dot1q_clear": {
    "iosxe": {
      "doc": " Unconfigures MACSec with disable-sci and dot1q-in-clear\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface name\n            no_disable_sci ('boolean', 'Optional'): \n                remove disable sci for MACsec, default is True\n            dot1q_in_clear ('boolean', 'Optional' ): \n                unconfigure dot1q-in-clear on interface, default is True\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_disable_sci_dot1q_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L856"
    }
  },
  "unconfigure_distribute_prefix_list_under_ospf": {
    "iosxe": {
      "doc": " Unconfigure distribute prefix-list under ospf\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            prefix_list_name (`str`): ip prefix list name to be used\n            filter (`str`): filter option\n            ex:)\n                gateway  Filtering incoming updates based on gateway\n                in       Filter incoming routing updates\n                out      Filter outgoing routing updates\n            vrf (`str`,optional): ospf with vrf \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_distribute_prefix_list_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1800"
    }
  },
  "unconfigure_dot1x_cred_int": {
    "iosxe": {
      "doc": "Unconfigure Dot1x credential on interface\n    Args:\n        device ('obj'): device to use\n        interface (`str`): Interface name\n        cred_profile_name (`str', optional): dot1x credential profile name (Default is None)\n        eap_profile (`str`, optional): eap profile name (Default is None)\n        auth_profile (`str`, optional): Auth profile name (Default is None)\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed to unconfigure Dot1x credential on interface\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_cred_int",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1188"
    }
  },
  "unconfigure_dot1x_cred_profile": {
    "iosxe": {
      "doc": "Unconfigure dot1x credentials profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): dot1x credential profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure dot1x credential\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_cred_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L422"
    }
  },
  "unconfigure_dot1x_pae": {
    "iosxe": {
      "doc": "Unconfigure\n    no dot1x pae {mode}\n\n    Args:\n        device (`obj`): Device object\n        intf (`str`): Interface to configure\n        mode ('str', optional): Mode to unconfigure, defaults to 'both'\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring dot1x pae on interface\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_pae",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L974"
    }
  },
  "unconfigure_dot1x_supplicant": {
    "iosxe": {
      "doc": " UnConfigure on dot1x supplicant switch \n    Args:\n        device (`obj`): Device object\n        profile_name (`str`): dot1x Credential profile_name\n        intf (`str`) : Supplicant Interface\n        eap_profile (`str`, optional): eap profile name (Default is None)\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_supplicant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L519"
    }
  },
  "unconfigure_dot1x_system_auth_control": {
    "iosxe": {
      "doc": "UnConfigure dot1x system-auth-control\n    Args: \n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring     \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_system_auth_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L548"
    }
  },
  "unconfigure_dot1x_template": {
    "iosxe": {
      "doc": "template unconfig\n        Args:\n            device ('obj'): device to use\n            template (`str`): Built-in/User defined template Name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to unconfigure template\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dot1x_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1561"
    }
  },
  "unconfigure_dynamic_nat_interface_overload_route_map_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT interface overload route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            out_interface ('str'): Out interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT interface overload route-map rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_nat_interface_overload_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L418"
    }
  },
  "unconfigure_dynamic_nat_outside_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT outside rule \n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): acl name\n            pool_name ('str'): pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT outside rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_nat_outside_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L898"
    }
  },
  "unconfigure_dynamic_nat_pool_overload_route_map_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT pool overload route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            pool_name ('str'): Name of pool\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT pool overload route-map rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_nat_pool_overload_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L370"
    }
  },
  "unconfigure_dynamic_nat_route_map_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT route-map rule\n        Args:\n            device ('obj'): device to use\n            route_map_name ('str'): Name of route-map\n            pool_name ('str'): Name of pool\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT route-map rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_nat_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L321"
    }
  },
  "unconfigure_dynamic_nat_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT rule\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): Acl name\n            pool_name ('str'): Pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_nat_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L555"
    }
  },
  "unconfigure_dynamic_path_in_tunnel": {
    "iosxe": {
      "doc": "unconfigure dynamic path in tunnel\n        Args:\n            device ('obj'): Device object\n            tunnel ('str'): Tunnel name\n            path_option ('int'): Mention the path option value <1-1000>\n            dynamic('Boolean'): Set to True to unconfigure dynamic path option\n            attribute_name ('str'): Attribute name to be set\n            explicit_name ('str'): Name for the explicit path\n            lockdown('Boolean'): set the lockdown if true\n            metric('str'): Specify igp or te\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_dynamic_path_in_tunnel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1894"
    }
  },
  "unconfigure_eap_profile": {
    "iosxe": {
      "doc": "Unconfigure EAP Profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L90"
    }
  },
  "unconfigure_eap_profile_md5": {
    "iosxe": {
      "doc": "Configure EAP Md5 profile\n        Args:\n            device ('obj'): device to use\n            profile_name (`str`): eap profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure eap md5 profile\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eap_profile_md5",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L442"
    }
  },
  "unconfigure_eapol_dest_address_interface": {
    "iosxe": {
      "doc": " Unconfigures EAPOL Destination Address on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be unconfigured\n        dest_address ('str'): destination address to be unconfigured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eapol_dest_address_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3033"
    }
  },
  "unconfigure_eapol_eth_type_interface": {
    "iosxe": {
      "doc": " Unconfigures EAPOL Ethernet Type on interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str'): interface to be unconfigured\n        eth_type ('str'): eth_type to be unconfigured\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eapol_eth_type_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3093"
    }
  },
  "unconfigure_eigrp_named_router": {
    "iosxe": {
      "doc": " Unconfigures IPv6 Eigrp Router\n        Args:\n            device ('obj'): Device to use\n            name ('str): EIGRP named mode name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eigrp_named_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L247"
    }
  },
  "unconfigure_eigrp_router": {
    "iosxe": {
      "doc": " Unconfigures IPv6 Eigrp Router\n        Args:\n            device ('obj')     device to use\n            process_id ('str). EIGRP process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eigrp_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L122"
    }
  },
  "unconfigure_eigrp_router_configs": {
    "iosxe": {
      "doc": " Unconfigures Eigrp Router Configs\n        Args:\n            device ('obj'):     device to use\n            process_id ('str'): EIGRP process id\n            max_paths ('int', optional):  Number of paths. (Default is None)\n            auto_summary ('bool', optional): Set to True to Unonfigure auto-summary. (Default is False)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eigrp_router_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L366"
    }
  },
  "unconfigure_enable_password": {
    "iosxe": {
      "doc": "Unconfigures enable password or secret            \n    \n    Args:\n        device (`obj`):                  Device object\n        secret (`bool`):                 'secret' if True else 'password'\n        privilege ('int'):               specified privilege level else None\n       \n    Return :\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring enable password or secret\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_enable_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1791"
    }
  },
  "unconfigure_enable_policy_password": {
    "iosxe": {
      "doc": " Unconfigure enable password with policy\n    Args:\n        device (`obj`):                   Device object\n        password (`str`):                 Password\n        policy (`str`, optional):         Policy name\n        password_type ('str', optional) : Password type\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_enable_policy_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L997"
    }
  },
  "unconfigure_enable_secret_password": {
    "iosxe": {
      "doc": " Apply enable secret password for switch\n        Args:\n            device ('obj'): Device object\n            enable password('str'):password\n            ex.)\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_enable_secret_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3207"
    }
  },
  "unconfigure_errdisable": {
    "iosxe": {
      "doc": " \n    UnConfigures errdisable recovery cause and errdisable recovery interval\n    e.g.\n    e.g.\n    no errdisable recovery cause loopdetect\n    no errdisable recovery interval\n    Args:\n        device ('obj') : Device object\n        recovery_cause ('str'): error disable recovery cause\n        recovery_interval ('int'): errdisable recovery interval integer in seconds\n    Returns:\n        None\n    ",
      "module_name": "error_disable.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_errdisable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/error_disable/configure.py#L38"
    }
  },
  "unconfigure_ethernet_vlan_unlimited": {
    "iosxe": {
      "doc": " Unconfigure ethernet vlan unlimited on subslot\n        Args:\n            device ('obj'): device to use\n            subslot ('str'): subslot to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to ubconfigure ethernet vlan unlimited\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ethernet_vlan_unlimited",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L513"
    }
  },
  "unconfigure_eui_64_over_ipv6_enabled_interface": {
    "iosxe": {
      "doc": " UnConfigures eui-64 over ipv6 enabled interface\n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            ipv6_address ('str') : ipv6 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_eui_64_over_ipv6_enabled_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6324"
    }
  },
  "unconfigure_event_manager_applet": {
    "iosxe": {
      "doc": " Unonfigures event manager applet\n        Args:\n            device ('obj'): device to use\n            event ('str'): event manager applet name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_event_manager_applet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2995"
    }
  },
  "unconfigure_evpn_default_gateway_advertise_global": {
    "iosxe": {
      "doc": " Unconfigure default-gateway advertise in l2vpn evpn globally\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_default_gateway_advertise_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L362"
    }
  },
  "unconfigure_evpn_evi_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn multicast advertise disable on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_evi_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L308"
    }
  },
  "unconfigure_evpn_instance_encapsulation_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn replication type on evi\n        Args:\n            device (`obj`): Device object\n            evi ('int'): evi id\n            srvinst ('str'): service instance type\n                              vlan-based|vlan-bundle|vlan-aware\n            encap_type ('str): encapsulation \n                               vxlan | mpls \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_instance_encapsulation_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L246"
    }
  },
  "unconfigure_evpn_instance_vlan_based": {
    "iosxe": {
      "doc": " Unconfiguring l2vpn evpn instance configuration\n        Args:\n            device (`obj`): Device object\n            instance (`int`): instance number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_instance_vlan_based",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L38"
    }
  },
  "unconfigure_evpn_l2_instance_vlan_association": {
    "iosxe": {
      "doc": " unconfigure VLAN association to EVPN instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            evpn_instance('int'): EVPN Instance id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_l2_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L415"
    }
  },
  "unconfigure_evpn_l3_instance_vlan_association": {
    "iosxe": {
      "doc": " unconfigure VLAN association to EVPN l3 vni instance\n\n        Args:\n            device (`obj`): Device object\n            vlan_id (`int`): Vlan id\n            vni_id('int'): VNI id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_l3_instance_vlan_association",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L471"
    }
  },
  "unconfigure_evpn_replication_type": {
    "iosxe": {
      "doc": " Config l2vpn evpn instance\n        Args:\n            device (`obj`): Device object\n            rep_type ('str'): replication type \n                              static | ingress\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_evpn_replication_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L188"
    }
  },
  "unconfigure_fips_authorization_key": {
    "iosxe": {
      "doc": " UnConfigure fips authorization-key\n    Args:\n        device('obj'): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring  \n    ",
      "module_name": "fips.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_fips_authorization_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fips/configure.py#L42"
    }
  },
  "unconfigure_flow_exporter_monitor_record": {
    "iosxe": {
      "doc": " Unconfigures Flow Exporter,Monitor and Record on Device\n        Args:\n            device (`obj`): Device object\n            exporter_name (`str`): Flow exporter name\n            monitor_name (`str`): Flow monitor name\n            record_name (`str`): Flow record name\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed unconfiguring Flow Exporter,monitor,record\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_flow_exporter_monitor_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L169"
    }
  },
  "unconfigure_flow_monitor": {
    "iosxe": {
      "doc": " Unconfig Flow Monitor on Device\n        Args:\n            device (`obj`): Device object\n            monitor_name (`str`): Flow Monitor name\n                        \n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed unconfiguring flow monitor\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_flow_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L466"
    }
  },
  "unconfigure_flow_monitor_vlan_configuration": {
    "iosxe": {
      "doc": " unconfigure flow monitor under vlan configuration\n        Args:\n            device ('obj'):       Device object\n            vlan ('str'):         vlan to be added to the port\n            monitor_name ('str'): Name of the flow monitor to be configured\n            sampler_name ('str'): Name of the sampler to be configured\n            direction ('str'):    Direction to be configured(input/output)\n\n        Returns:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_flow_monitor_vlan_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L469"
    }
  },
  "unconfigure_flow_record": {
    "iosxe": {
      "doc": " Unconfig Flow Monitor on Device\n        Args:\n            device (`obj`): Device object\n            record_name (`str`): Flow Record name\n                        \n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed unconfiguring flow record\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_flow_record",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L582"
    }
  },
  "unconfigure_fnf_monitor_datalink_interface": {
    "iosxe": {
      "doc": " Unconfig Datalink Fnf Monitor on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be configured\n            monitor_name (`str`): Flow monitor name\n            sampler_name ('str'): Sampler name\n            direction ('str'): Direction of monitor (input/output)\n            \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed unconfiguring interface datalink flow monitor with sampler\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_fnf_monitor_datalink_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L401"
    }
  },
  "unconfigure_fnf_monitor_on_interface": {
    "iosxe": {
      "doc": " Unconfig Flow Monitor on Interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to be unconfigured\n            monitor_name (`str`): Flow monitor name\n            sampler_name ('str', Optional): Sampler name\n            direction ('str'): Direction to be unconfigured\n\n        Return:\n            None\n\n        Raise:\n            SubCommandFailure: Failed unconfiguring interface with flow monitor\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_fnf_monitor_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L232"
    }
  },
  "unconfigure_gdoi_group": {
    "iosxe": {
      "doc": " Configures Crypto Gdoi Group\n        Args:\n            device (`obj`): Device object\n            group_name ('str'): gdoi group name\n            ipv6_group ('boolean', optional): indicator of ipv6 group. Default value is False\n        Returns:\n                        True/False\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_gdoi_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/configure.py#L148"
    }
  },
  "unconfigure_gdoi_group_on_gm": {
    "iosxe": {
      "doc": " unconfigures Crypto gdoi group\n        Args:\n            device (`obj`): Device object\n            group_name ('str'): Crypto gdoi group name\n            ipv6_group ('bool',optional): unconfigure IPv6 crypto gdoi group\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "gdoi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_gdoi_group_on_gm",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/gdoi/configure.py#L188"
    }
  },
  "unconfigure_global_dual_active_recovery_reload_disable": {
    "iosxe": {
      "doc": " Enables global stackwise-virtual dual-active recovery reload on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n                output: return the chunk of lines for the config of pagp as below..\n\n            # stackwise-virtual\n            # Please reload the switch for Stackwise Virtual configuration to take effect\n            # Upon reboot, the config will be part of running config but not part of start up config.\n            # no dual-active recovery-reload-disable\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_global_dual_active_recovery_reload_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L200"
    }
  },
  "unconfigure_global_network_policy": {
    "iosxe": {
      "doc": "\n    Unconfigure Network Policy Gloablly\n        Args:\n            device (`obj`): Device object\n            profile ('int'): Network Policy profile number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_global_network_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L139"
    }
  },
  "unconfigure_global_source_template": {
    "iosxe": {
      "doc": " unconfigure source template globally\n    \n    Args:\n        device ('obj'): device to use\n        source_template ('str'): Template name to source configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_global_source_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1662"
    }
  },
  "unconfigure_global_stackwise_virtual": {
    "iosxe": {
      "doc": " Disable global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_global_stackwise_virtual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L34"
    }
  },
  "unconfigure_host_ip_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure host Ip address SGT\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure host ip_address SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_host_ip_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L650"
    }
  },
  "unconfigure_hsrp_interface": {
    "iosxe": {
      "doc": " unonfigures vlan interface standby group IP\n        Example: standby 0 ip 10.1.0.3\n    Args:\n        device ('obj'): Device object\n        interface ('int'): Vlan <vlan Id> (Range 1-4093) / physical interface  \n        group ('int'): Group number (Range 0-255)\n        version('int'): Version number (Range 1-2)\n        \n    Return:\n        None\n    Raises:\n            SubCommandFailure: Failed to unconfigure hsrp interface\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hsrp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L172"
    }
  },
  "unconfigure_http_client_source_interface": {
    "iosxe": {
      "doc": " Unconfigures ip http client source-interface\n        Example : no ip http client source-interface\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_http_client_source_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L289"
    }
  },
  "unconfigure_hw_module_breakout": {
    "iosxe": {
      "doc": "\n        Unconfigures hw_module breakout\n        Args:\n             device ('obj'): device to use\n             breakout_number ('str'): breakout number \n             breakout_number_end_range ('str') : range end for breakout\n             switch_number('int') : switch number 1 or 2\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "hardware.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_module_breakout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/configure.py#L142"
    }
  },
  "unconfigure_hw_module_slot_shutdown": {
    "iosxe": {
      "doc": " Unshut hw-module slot {slot}\n        Args:\n            device (`obj`): Device object\n            slot (`int`): slot\n\n        Returns:\n            Shutdown Status\n\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "hw_module.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_module_slot_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hw_module/configure.py#L12"
    }
  },
  "unconfigure_hw_module_switch_number_usbflash": {
    "iosxe": {
      "doc": " unconfigure_hw_module_switch_num_usbflash\n        Args:\n            device ('obj'): device to use\n            switch_number ('str'): switch number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure exception\n    ",
      "module_name": "csdl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_module_switch_number_usbflash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/csdl/configure.py#L87"
    }
  },
  "unconfigure_hw_switch_logging_onboard": {
    "iosxe": {
      "doc": " Unconfigures OBFL on the specified switch\n        Example : no hw-switch switch 1 logging onboard \n\n        Args:\n            device ('obj'): device to use\n            switch ('int'): switch number (Range 1-16)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_switch_logging_onboard",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1375"
    }
  },
  "unconfigure_hw_switch_switch_logging_onboard_environment": {
    "iosxe": {
      "doc": " unconfigures hw-switch switch <#> logging onboard environment\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_switch_switch_logging_onboard_environment",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L996"
    }
  },
  "unconfigure_hw_switch_switch_logging_onboard_temperature": {
    "iosxe": {
      "doc": " unconfigures hw-switch switch <#> logging onboard temperature\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_switch_switch_logging_onboard_temperature",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1034"
    }
  },
  "unconfigure_hw_switch_switch_logging_onboard_voltage": {
    "iosxe": {
      "doc": " unconfigures hw-switch switch <#> logging onboard voltage\n        Args:\n            device ('obj'): device to use\n            switch_number ('int'): switch number to configure \n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_hw_switch_switch_logging_onboard_voltage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L957"
    }
  },
  "unconfigure_icmp_ip_reachables": {
    "iosxe": {
      "doc": " Unconfigures sending of ICMP unreachable messages for an interface\n        Example: no ip unreachables\n\n        Args:\n            device ('obj'): device to configure on\n            interface ('str'): name of the interface (eg. Tel1/0/10)\n            line ('str'): Up to 230 characters describing the interface\n            ip_address ('str'): IP Address A.B.C.D (eg. 50.1.1.2)\n            ip_subnet ('str'): IP subnet mask A.B.C.D (eg. 255.255.0.0)\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "icmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_icmp_ip_reachables",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/icmp/configure.py#L55"
    }
  },
  "unconfigure_igmp_snooping_tcn_flood": {
    "iosxe": {
      "doc": "unconfigure IGMP snooping tcn flooding\n    Args:\n        device('obj'): Device object\n        interface('str'): interface in which tcn flooding needs to be disabled\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_igmp_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L260"
    }
  },
  "unconfigure_igmp_version": {
    "iosxe": {
      "doc": "configures the IGMP version that the switch uses on interfaces.\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): mentions interface name\n            version (`int`): specifies the IGMP version that the switch uses.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_igmp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L210"
    }
  },
  "unconfigure_ikev2_authorization_policy": {
    "iosxe": {
      "doc": " Unonfigure IKEV2 Authorization policy\n        Args:\n            device (`obj`): Device object\n            policy_name ('str'): IKEv2 authorization policy\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_authorization_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1111"
    }
  },
  "unconfigure_ikev2_cac": {
    "iosxe": {
      "doc": " Unonfigure IKEV2 CAC\n        Args:\n            device (`obj`): Device object\n            in_nego ('int'): Maximum IKEv2 in negotiation sa\n            sa ('int',optional): Maximum IKEv2 sa, default is 0\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_cac",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1078"
    }
  },
  "unconfigure_ikev2_dpd": {
    "iosxe": {
      "doc": " Unconfigure IKEV2 DPD\n        Args:\n            device (`obj`): Device object\n            interval ('int'): Determine in what interval Dead Peer Detection should happen\n            retry ('int'): Number of time DPD should retry before making the peer dead \n            dpd_query ('str'): Determine whether query is on-demand or periodic\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_dpd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1020"
    }
  },
  "unconfigure_ikev2_fragmentation": {
    "iosxe": {
      "doc": " Unonfigure IKEV2 Fragmentation\n        Args:\n            device (`obj`): Device object\n            mtu ('int'): IKEv2 MTU Fragmentation\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_fragmentation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1051"
    }
  },
  "unconfigure_ikev2_keyring": {
    "iosxe": {
      "doc": " Unconfigure IKEV2 keyring\n        Args:\n            device (`obj`): Device object\n            keyring_name ('str'): Name for the keyring\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1138"
    }
  },
  "unconfigure_ikev2_policy": {
    "iosxe": {
      "doc": " Unconfigures IKEV2 Policy\n        Args:\n            device (`obj`): Device object\n            policy_name ('str'): ikev2 policy name\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L993"
    }
  },
  "unconfigure_ikev2_profile": {
    "iosxe": {
      "doc": " unconfigure IKEV2 profile\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ikev2 profile name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1167"
    }
  },
  "unconfigure_ikev2_profile_pre_share": {
    "iosxe": {
      "doc": " Unconfigure ikev2 Profile\n        Args:\n            device ('obj')    : device to use\n            profile_name ('str).  Ikev2 Profile Name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_profile_pre_share",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L570"
    }
  },
  "unconfigure_ikev2_proposal": {
    "iosxe": {
      "doc": " Unconfigures IKEV2 Policy\n        Args:\n            device (`obj`): Device object\n            proposal_name ('str'): ikev2 proposal name\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ikev2_proposal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L966"
    }
  },
  "unconfigure_interface_VirtualPortGroup": {
    "iosxe": {
      "doc": " Unconfigures interface VirtualPortGroup\n        Example : no interface VirtualPortGroup 1\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): name of the interface\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_VirtualPortGroup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1598"
    }
  },
  "unconfigure_interface_access_session": {
    "iosxe": {
      "doc": " Unconfigure interface access-session\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_access_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6810"
    }
  },
  "unconfigure_interface_auth_vlan": {
    "iosxe": {
      "doc": " Unconfigure authorize vlan on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_auth_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6186"
    }
  },
  "unconfigure_interface_auth_vlan_no_resp": {
    "iosxe": {
      "doc": " Unconfigure authorize vlan for no response on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_auth_vlan_no_resp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6264"
    }
  },
  "unconfigure_interface_channel_group_auto_lacp": {
    "iosxe": {
      "doc": " Unconfigure auto Enable LACP auto on this interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_channel_group_auto_lacp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5470"
    }
  },
  "unconfigure_interface_description": {
    "iosxe": {
      "doc": "unconfigure interface description\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1442"
    }
  },
  "unconfigure_interface_dot1x_eap_profile": {
    "iosxe": {
      "doc": " Unconfigure DOT1x EAP supplicant profile configuration\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_dot1x_eap_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6085"
    }
  },
  "unconfigure_interface_dot1x_max_reauth_req": {
    "iosxe": {
      "doc": " Unconfigure DOT1x Max No. of Reauthentication Attempts\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_dot1x_max_reauth_req",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6018"
    }
  },
  "unconfigure_interface_dot1x_max_req": {
    "iosxe": {
      "doc": " Unconfigure DOT1x Max No. of Retries\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_dot1x_max_req",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5929"
    }
  },
  "unconfigure_interface_dot1x_timeout_txp": {
    "iosxe": {
      "doc": " Unconfigure DOT1x timeout for suppplicant retries\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_dot1x_timeout_txp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5862"
    }
  },
  "unconfigure_interface_eigrp_v6": {
    "iosxe": {
      "doc": " Configures switchport mode on interface\n        Args:\n            device ('obj')     device to use\n            interfaces ('list'). List of interfaces to unconfigure\n            process_id ('str). EIGRP process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_eigrp_v6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L60"
    }
  },
  "unconfigure_interface_flow_control": {
    "iosxe": {
      "doc": " Unconfigure flow control receive on this interface\n    \n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_flow_control",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7206"
    }
  },
  "unconfigure_interface_for_dot1x": {
    "iosxe": {
      "doc": "\n    Interface un-configuration for Dot1x\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'no authentication open',\n            'no authentication order',\n            'no authentication priority',\n            'no authentication port-control',\n            'no dot1x pae'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'no dot1x pae'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_for_dot1x",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1842"
    }
  },
  "unconfigure_interface_for_mab": {
    "iosxe": {
      "doc": "\n    Interface un-configuration for Mac authentication bypass\n    Args:\n        device (obj): Device object\n        interface (str): Interface to configure\n        role (str): Device role(authenticator/supplicant)\n        additional_config (list): List of configurations to be performed additionally\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n\n    ex.)\n        configures below cli commands on interface if role is authenticator:\n            'interface GigabitEthernet1/0/2',\n            'no authentication open',\n            'no authentication order',\n            'no authentication priority',\n            'no authentication port-control',\n            'no dot1x pae',\n            'no mab'\n        configures below cli commands on interface if role is supplicant:\n            'interface GigabitEthernet1/0/2',\n            'no dot1x pae'\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_for_mab",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1889"
    }
  },
  "unconfigure_interface_inherit_disable": {
    "iosxe": {
      "doc": " Unconfigure access-session inherit disable\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            disable_option('str') : Select option to disable\n            ex:)\n                autoconf                   Auto Conf\n                interface-template-sticky  Interface Template Sticky\n                service-policy             Service Policy\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_inherit_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5640"
    }
  },
  "unconfigure_interface_ip_tcp_adjust_mss": {
    "iosxe": {
      "doc": " Unconfigure ip tcp adjust-mss on interface \n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_ip_tcp_adjust_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6751"
    }
  },
  "unconfigure_interface_ip_verify_unicast": {
    "iosxe": {
      "doc": " unconfigure interface ip verify unicast\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_ip_verify_unicast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6142"
    }
  },
  "unconfigure_interface_ipv6_tcp_adjust_mss": {
    "iosxe": {
      "doc": " Unconfigure ipv6 tcp adjust-mss on interface \n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure    \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_ipv6_tcp_adjust_mss",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6791"
    }
  },
  "unconfigure_interface_ipv6_verify_unicast": {
    "iosxe": {
      "doc": " unconfigure interface ipv6 verify unicast\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_ipv6_verify_unicast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6287"
    }
  },
  "unconfigure_interface_lacp_fast_switchover": {
    "iosxe": {
      "doc": " unconfigure interface lacp fast-switchover\n        Args:\n            device ('obj'): device to use\n            po_intf ('str'): name of the port-channel interface to be unconfigured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_lacp_fast_switchover",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7016"
    }
  },
  "unconfigure_interface_lacp_max_bundle": {
    "iosxe": {
      "doc": " unconfigure interface lacp max-bundle\n        Args:\n            device ('obj'): device to use\n            po_intf ('str'): name of the port-channel interface to be unconfigured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_lacp_max_bundle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7071"
    }
  },
  "unconfigure_interface_logging_event": {
    "iosxe": {
      "doc": " Unconfigures Interface Logging Event \n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            event_type ('str')   : loggint event type (i.e bundle-status, link-status,\n                                   nfas-status, power-inline-status, etc )\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_logging_event",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6530"
    }
  },
  "unconfigure_interface_mac_address": {
    "iosxe": {
      "doc": " Unconfigure static mac address on interface\n    Args:\n        device (`obj`): Device object\n        interface ('str'): Interface to unconfigure mac\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3146"
    }
  },
  "unconfigure_interface_macro_auto_port_sticky": {
    "iosxe": {
      "doc": " Unconfigure macro auto port sticky on this interface\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_macro_auto_port_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5537"
    }
  },
  "unconfigure_interface_monitor_session": {
    "iosxe": {
      "doc": " configure monitor session on device\n        Args:\n            device (`obj`): Device object\n            session_name (`str`): session_name\n            session_type (`str`): session_type\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L1563"
    }
  },
  "unconfigure_interface_network_policy": {
    "iosxe": {
      "doc": "\n    Unconfigure Network Policy on Interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            profile ('int'): Network Policy profile number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_network_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L39"
    }
  },
  "unconfigure_interface_pim": {
    "iosxe": {
      "doc": " unconfigure pim in interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            pim_mode (`str`): PIM mode (sparse-mode | sparse-dense-mode)\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_pim",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L165"
    }
  },
  "unconfigure_interface_port_channel": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            channel_number ('int') : channel number of interface\n            mapping_number ('int') : mapping number \n            mapping_value ('int') : mapping value\n        Returns:\n            interface members\n        Raises:\n            None\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L700"
    }
  },
  "unconfigure_interface_reg_segment": {
    "iosxe": {
      "doc": " Unconfig Reg segment on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            segment_no ('int'): rep segment number\n            edge('bool'): edge preferred. Default is False\n            preferred  ('bool'): neighbor preferred. Default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_reg_segment",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3752"
    }
  },
  "unconfigure_interface_reg_segment_timer": {
    "iosxe": {
      "doc": " Unconfig Reg segment timer on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            segment_timer ('int'): rep segment timer\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_reg_segment_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3817"
    }
  },
  "unconfigure_interface_snmp_trap_mac_notification_change": {
    "iosxe": {
      "doc": " unconfigure interface snmp trap mac-notification change \n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be unconfigured\n            change_option ('str'): change option added/removed\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_snmp_trap_mac_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7126"
    }
  },
  "unconfigure_interface_span_cost": {
    "iosxe": {
      "doc": " Unconfigures Spanning Tree cost on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_span_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6041"
    }
  },
  "unconfigure_interface_span_vlan_priority": {
    "iosxe": {
      "doc": " Configures Spanning Tree vlan priority on port\n        Args:\n            device ('obj')    : device to use\n            interface ('str') : interface to configure\n            vlan ('int') : vlan to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_span_vlan_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5952"
    }
  },
  "unconfigure_interface_storm_control_action": {
    "iosxe": {
      "doc": " Unconfig storm control action in\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            action('str'): storm control action\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_storm_control_action",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3510"
    }
  },
  "unconfigure_interface_storm_control_level": {
    "iosxe": {
      "doc": " Unconfig storm control level in\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            sc_type('str'): storm control filter traffic type\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_storm_control_level",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3451"
    }
  },
  "unconfigure_interface_switchport_access_vlan": {
    "iosxe": {
      "doc": " Unconfigures switchport on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n            vlan ('str'): access_vlan to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_access_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L914"
    }
  },
  "unconfigure_interface_switchport_block_address": {
    "iosxe": {
      "doc": " Unconfigures Interface Switchport block \n        Args:\n            device ('obj')       : device to use\n            interface ('str')    : interface to configure\n            address_type ('str') : address type to unblock (i.e multicast or unicast)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_block_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6483"
    }
  },
  "unconfigure_interface_switchport_dot1q_ethertype": {
    "iosxe": {
      "doc": " unConfigures switchport on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n            ethervalue ('str'): unConfigure ethertype\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_dot1q_ethertype",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6648"
    }
  },
  "unconfigure_interface_switchport_mode_access": {
    "iosxe": {
      "doc": " unconfigures switchport mode access on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to unconfigure\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_mode_access",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5491"
    }
  },
  "unconfigure_interface_switchport_port_security_violation": {
    "iosxe": {
      "doc": " Unconfigure switchport port-security violation\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to remove configs\n            \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_switchport_port_security_violation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5815"
    }
  },
  "unconfigure_interface_template": {
    "iosxe": {
      "doc": " UnConfigures Template on a list of interfaces\n    interface GigabitEthernet1/0/1\n      no source template sample-template\n\n        Args:\n            device ('obj'): Device object\n            template_name ('str'): Template name\n            interface_list ('list'): List of Interface names - can directly pass in device.interfaces from testbed yaml\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2697"
    }
  },
  "unconfigure_interface_template_sticky": {
    "iosxe": {
      "doc": " unconfigure interface-template sticky\n        Args:\n            device ('obj'): device to use\n            interface ('str') : interface to add configs\n            timer ('int', optional): <1-65535>  Enter a value between 1 and 65535\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_template_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5591"
    }
  },
  "unconfigure_interface_tunnel_key": {
    "iosxe": {
      "doc": " Unconfigure tunnel key on a tunnel interface\n        Args:\n            device ('obj'): Device object\n            tunnel_intf ('str'): tunnel interface\n        \n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "dmvpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_tunnel_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dmvpn/configure.py#L249"
    }
  },
  "unconfigure_interface_udld_port": {
    "iosxe": {
      "doc": " Unconfigures Interface UDLD Port\n        Args:\n            device ('obj')                       : device to use\n            interface ('str')                    : interface to configure\n            aggressive_mode ('boolean',optional) : udld protocol in aggressive mode (Default False)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_udld_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L73"
    }
  },
  "unconfigure_interface_vlan": {
    "iosxe": {
      "doc": " Unconfigures interface vlan id\n        Example : no interface vlan 1\n        Args:\n            device ('obj'): device to use\n            vlan_id ('int'): Vlan interface number (Range: 1-4093)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2484"
    }
  },
  "unconfigure_interface_vlan_standby_ip": {
    "iosxe": {
      "doc": " Unconfigures vlan interface standby group IP\n        Example: no standby 0 ip 10.1.0.3\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n        ip_address ('str'): Virtual IP address\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_vlan_standby_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L38"
    }
  },
  "unconfigure_interface_vlan_standby_preempt": {
    "iosxe": {
      "doc": " Unconfigures vlan interface standby preempt\n        Example: no standby 0 preempt\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_vlan_standby_preempt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L145"
    }
  },
  "unconfigure_interface_vlan_standby_timers": {
    "iosxe": {
      "doc": " Unconfigures vlan interface standby timers\n        Example:  no standby 0 timers\n\n    Args:\n        device ('obj'): Device object\n        vlan_number ('int'): Vlan interface number (Range 1-4093) \n        group ('int'): Group number (Range 0-255)\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_vlan_standby_timers",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L93"
    }
  },
  "unconfigure_interface_vtp": {
    "iosxe": {
      "doc": "Unconfigure vtp on a interface\n\n    Args:\n        device ('obj'): device to use\n        interface ('str') : interface to add configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure VTP on interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interface_vtp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L612"
    }
  },
  "unconfigure_interfaces_on_port_channel": {
    "iosxe": {
      "doc": " Add interface <interface> to port channel\n\n        Args:\n            device (`obj`): Device object\n            mode (`str`): Interface mode under Port channel.Default value is None\n            interfaces(`List`): List of interfaces to configure.Default value is None\n            channel_group (`obj`): Channel group.Default value is None\n            channel_protocol (`str`,optional): protocol used for port-channel.Default value is False\n            disable_switchport(`str`,optional): disable switchport.Default value is False\n        Returns:\n            None\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_interfaces_on_port_channel",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4240"
    }
  },
  "unconfigure_ip_access_group_in_out": {
    "iosxe": {
      "doc": " Disable ip access_group IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): name of the ACL\n            acl_direction ('str'): in or out direction of the acl\n            interface ('str'): disable ip access_group {acl_name} in/out over this interface\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: ip access_group IN OUT is enabled over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_access_group_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1618"
    }
  },
  "unconfigure_ip_arp_inspection_validateip": {
    "iosxe": {
      "doc": " Unonfig ip arp inspection validate ip  on device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_arp_inspection_validateip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L216"
    }
  },
  "unconfigure_ip_arp_inspection_vlan": {
    "iosxe": {
      "doc": " Unconfig ip arp inspection vlan on device\n        Args:\n            device ('obj'): Device object\n            vlan  ('int'): vlan id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "arp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_arp_inspection_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/configure.py#L164"
    }
  },
  "unconfigure_ip_dhcp_client_vendor_class": {
    "iosxe": {
      "doc": " Unconfigure IP DHCP Client Vendor-class on interface:\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to configure\n            type('str'): vendor-class type (i.e. mac-address, ascii, hex, disable)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure ip dhcp vendor-class\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_client_vendor_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L526"
    }
  },
  "unconfigure_ip_dhcp_pool": {
    "iosxe": {
      "doc": "Unconfigures dhcp pool on device\n       Example: no ip dhcp pool POOL_88\n\n       Args:\n            device ('obj'): device object\n            name ('str'): name of the pool (eg. POOL_88, testpool)\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L840"
    }
  },
  "unconfigure_ip_dhcp_pool_host": {
    "iosxe": {
      "doc": " Unconfigure host from DHCP pool \n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): name of the DHCP pool\n            host ('str'): IP and subnet mask of the DHCP client\n            client_identifier ('str'): Unique identifier for client\n            hardware_address ('str'): Hardware address of the client\n            client_name ('str'): Name of the client\n        Returns:\n            str: Response of command\n        Raises:\n            SubCommandFailure: Failed to unconfigure host from dhcp pool\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_pool_host",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L1003"
    }
  },
  "unconfigure_ip_dhcp_snooping": {
    "iosxe": {
      "doc": " Unconfigures ip dhcp snooping vlan {vlan_range}\n    Args:\n        device ('obj'): device to use\n        vlan_range ('str'): vlan range from (1-4096), example: 1,3-5,7,9-11\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure ip dhcp snooping vlan {vlan_range}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L333"
    }
  },
  "unconfigure_ip_dhcp_snooping_database": {
    "iosxe": {
      "doc": " Unconfiguring ip dhcp snooping database\n        Args:\n            device ('obj'): device to use\n            image ('str',optional): image to use ,default is empty string\n            write_delay ('bool',optional): True or False ,default is False\n            delay_time ('int',optional): time interval ,default is 10\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to configure ip dhcp snooping database\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L340"
    }
  },
  "unconfigure_ip_dhcp_snooping_information_option": {
    "iosxe": {
      "doc": "Unconfigures dhcp snooping information option on device\n       Example: no ip dhcp snooping information option\n\n       Args:\n            device ('obj'): device object\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping_information_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L797"
    }
  },
  "unconfigure_ip_dhcp_snooping_information_option_allow_untrusted": {
    "iosxe": {
      "doc": " unconfigure ip dhcp snooping information option allow-untrusted on device\n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring dhcp snooping information option allow-untrusted on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping_information_option_allow_untrusted",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L753"
    }
  },
  "unconfigure_ip_dhcp_snooping_trust": {
    "iosxe": {
      "doc": "Unconfigures ip dhcp snooping trust\n\n       Args:\n            device ('obj'): device object\n            interface ('str'): name of interface\n\n       Return:\n            None\n\n       Raises:\n            SubCommandFailure\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L944"
    }
  },
  "unconfigure_ip_dhcp_snooping_verify": {
    "iosxe": {
      "doc": " unconfigure ip dhcp scooping verify on device\n        Args:\n            device (`obj`): Device object\n            verify_type (`str`): verify type (i.e mac-address , no-relay-agent-address)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring dhcp snooping verify on device\n    ",
      "module_name": "dhcp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_dhcp_snooping_verify",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/configure.py#L416"
    }
  },
  "unconfigure_ip_domain_lookup": {
    "iosxe": {
      "doc": " Disable ip domain lookup \n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian Unconfiguration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_domain_lookup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L34"
    }
  },
  "unconfigure_ip_domain_name": {
    "iosxe": {
      "doc": " Unconfigures ip domain name\n        Example : no ip domain name cisco.com\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): domain name (eg. cisco.com)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_domain_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L307"
    }
  },
  "unconfigure_ip_domain_timeout": {
    "iosxe": {
      "doc": " Unconfigures the IP domain timeout\n        Example : no ip domain timeout\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_domain_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L132"
    }
  },
  "unconfigure_ip_http_authentication_local": {
    "iosxe": {
      "doc": " Unconfigures ip http authentication local\n        Example : no ip http authentication local\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_http_authentication_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L192"
    }
  },
  "unconfigure_ip_http_secure_server": {
    "iosxe": {
      "doc": " Unconfigures ip http secure-server\n        Example : no ip http secure-server\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_http_secure_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L232"
    }
  },
  "unconfigure_ip_http_server": {
    "iosxe": {
      "doc": " Unconfigures ip http server\n        Example : no ip http server\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_http_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L152"
    }
  },
  "unconfigure_ip_igmp_join_group": {
    "iosxe": {
      "doc": " unconfigures ip igmp join-group to an vlan interface\n        Example : ip igmp join-group 239.100.100.101 source 4.4.4.4\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface or Vlan number (Eg. ten1/0/1 or vlan 10)\n            group_address ('str'): IP group addres\n            source_address ('str', optional): IP source address\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_join_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1431"
    }
  },
  "unconfigure_ip_igmp_snooping": {
    "iosxe": {
      "doc": "UnConfigure IGMP snooping \n        Example : no ip igmp snooping \n\n    Args:\n        device('obj'): Device object\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure : Could not unconfigure ip igmp snooping\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L174"
    }
  },
  "unconfigure_ip_igmp_snooping_last_member_query_interval": {
    "iosxe": {
      "doc": " Restore the default IGMP query interval on an interface\n        Example : no ip igmp snooping last-member-query-interval\n        \n        Args:\n            device ('obj'): device to use\n        \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_last_member_query_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L752"
    }
  },
  "unconfigure_ip_igmp_snooping_querier": {
    "iosxe": {
      "doc": "\n    Unconfigure IGMP snooping querier configuration globally\n\n    Args:\n        device('obj'): Device object\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L30"
    }
  },
  "unconfigure_ip_igmp_snooping_tcn_flood": {
    "iosxe": {
      "doc": " Unconfigures flood query count to IGMP snooping TCN behavior\n        Example : no ip igmp snooping tcn flood query count\n        \n        Args:\n            device ('obj'): device to use\n        \n        Returns:\n            None\n        \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L692"
    }
  },
  "unconfigure_ip_igmp_snooping_vlan_querier": {
    "iosxe": {
      "doc": "UnConfigure IGMP snooping vlan querier configuration\n        Example : ip igmp snooping vlan 200 querier address 12.1.1.1\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        querier_ip('str'): querier IP address\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_vlan_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L79"
    }
  },
  "unconfigure_ip_igmp_snooping_vlan_query_version": {
    "iosxe": {
      "doc": "UnConfigure IGMP snooping vlan querier configuration\n        Example : no ip igmp snooping vlan 200 querier version 3\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        version_num('int'): IP IGMP version number of the switch\n            \n    Returns:\n        None\n    \n    Raises:\n        SubCommandFailure\n    \n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_vlan_query_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L129"
    }
  },
  "unconfigure_ip_igmp_snooping_vlan_static": {
    "iosxe": {
      "doc": "\n    Unconfigure IGMP snooping vlan static configuration\n    Example : no ip igmp snooping vlan 200 static 225.0.0.100 interface gig 1/0/1\n\n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch\n        group_ip('str'): group ip address\n        interface('str'): interface name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_vlan_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L303"
    }
  },
  "unconfigure_ip_igmp_snooping_vlan_vlanid": {
    "iosxe": {
      "doc": "UnConfigure IGMP snooping vlan configuration\n        Example : no ip igmp snooping vlan 200 \n    Args:\n        device('obj'): Device object\n        vlan_id('int'): vlan id of the switch            \n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "igmp_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_snooping_vlan_vlanid",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp_snooping/configure.py#L220"
    }
  },
  "unconfigure_ip_igmp_ssm_map": {
    "iosxe": {
      "doc": " Unconfigures ip igmp ssm-map\n        Example : no ip igmp ssm-map enable\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_ssm_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1206"
    }
  },
  "unconfigure_ip_igmp_ssm_map_query_dns": {
    "iosxe": {
      "doc": " Unconfigures ip igmp ssm-map query dns\n        Example : no ip igmp ssm-map query dns\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_ssm_map_query_dns",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1242"
    }
  },
  "unconfigure_ip_igmp_ssmmap_static": {
    "iosxe": {
      "doc": " Unconfigure ip igmp ssm-map static\n    Args:\n        device ('obj'): Device object\n        acl_name ('int'): acl name\n        source_address ('str'): ssm source address\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed to Unconfigure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_igmp_ssmmap_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1294"
    }
  },
  "unconfigure_ip_mtu": {
    "iosxe": {
      "doc": " Unconfiguring ip mtu on  device\n\n        Args:\n            device ('str'): Device str\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2926"
    }
  },
  "unconfigure_ip_multicast_routing": {
    "iosxe": {
      "doc": "Unconfigure ip multicast routing on device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L31"
    }
  },
  "unconfigure_ip_multicast_vrf_routing": {
    "iosxe": {
      "doc": "Unconfigure ip multicast routing vrf on device\n        Example : \n\n        Args:\n            device (`obj`): Device object\n            vrf_name('str'): name of the vrf \n        Returns:\n            None\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_multicast_vrf_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L67"
    }
  },
  "unconfigure_ip_name_server": {
    "iosxe": {
      "doc": " Disable ip name server\n        Args:\n            device ('obj'): device to use\n            domain_ip ('str'): dns server ip or proxy server ip.\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: domian Unconfiguration\n    ",
      "module_name": "dns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_name_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/configure.py#L80"
    }
  },
  "unconfigure_ip_ospf_mtu_ignore": {
    "iosxe": {
      "doc": "unconfigure ip ospf mtu-ignore\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_ospf_mtu_ignore",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1459"
    }
  },
  "unconfigure_ip_pim_enable_bidir_enable": {
    "iosxe": {
      "doc": " unconfigure ip pim bidir\n        Example : ip pim bidir-enable\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_pim_enable_bidir_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1369"
    }
  },
  "unconfigure_ip_pim_rp_address": {
    "iosxe": {
      "doc": "unconfigures  IP pim address group range\n\n    Args:\n        device ('obj'): Device object\n        ip_address ('str'): IP address\n        option ('str') : can be user choice bidir,override, ccess-list reference for group <1-99> or <1300-1999>\n\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfigure rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L1409"
    }
  },
  "unconfigure_ip_pim_vrf_ssm_default": {
    "iosxe": {
      "doc": "unconfigure ip pim vrf ssm default on device\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring interface\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_pim_vrf_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L260"
    }
  },
  "unconfigure_ip_prefix_list": {
    "iosxe": {
      "doc": " unconfigure prefix-list\n\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix-list name\n            seq (`int`): Sequence number of a prefix list\n            ip_address (`str`): ip address to be pass\n            subnet_id('int'): default value is 32\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_prefix_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L910"
    }
  },
  "unconfigure_ip_prefix_list_deny_permit": {
    "iosxe": {
      "doc": " unconfigure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            option (`str`): option for prefix list\n                ex:)\n                    deny         Specify packets to reject\n                    permit       Specify packets to forward\n            ip_address (`str`): ip address to be used\n            subnet_id (`int`): subnet_id to be used, default value is 32n\n            match_option (`str`,optional): prefix matching option\n            match_length (`int`,optional): prefix matching length(keeping default length 1)\n            ex:)\n                <1-32>  Minimum prefix length\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_prefix_list_deny_permit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L183"
    }
  },
  "unconfigure_ip_prefix_list_description": {
    "iosxe": {
      "doc": " Unconfigure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            desc_line (`str`): description line for option description\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_prefix_list_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L216"
    }
  },
  "unconfigure_ip_prefix_list_seq": {
    "iosxe": {
      "doc": " configure ip prefix-list on device\n        Args:\n            device (`obj`): device to execute on\n            prefix_list_name (`int`): prefix list name to be used\n            ip_address (`str`): ip address to be used\n            subnet_id (`int`): subnet_id to be used, default value is 32\n            seq_num (`int`): sequence number\n            seq_rule (`str`): rule permit/deny when option is seq\n            match_option (`str`,optional): prefix matching option\n            match_length (`int`,optional): prefix matching length(keeping default length 1)\n            ex:)\n                <1-32>  Minimum prefix length\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "prefix_list.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_prefix_list_seq",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prefix_list/configure.py#L235"
    }
  },
  "unconfigure_ip_role_based_acl": {
    "iosxe": {
      "doc": " Unconfigure ip role based ACL on device\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): acl name\n            protocol ('str'): protocol includes ip,ipv6\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure ip role based ACL on device\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_role_based_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L973"
    }
  },
  "unconfigure_ip_route_cache": {
    "iosxe": {
      "doc": " Unconfigure ip route-cache on interface <interface>\n        Args:\n            device ('obj'): Device object\n            interface('str'): interface details on which we config\n        Returns:\n            None\n\t    Raises:\n            SubCommandFailure : Failed to unconfigure ip route-cache\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_route_cache",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5025"
    }
  },
  "unconfigure_ip_rsvp_bandwidth": {
    "iosxe": {
      "doc": " unconfigure ip rsvp bandiwth on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n            bandwidth ('str'): rsvp bandwidth\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_rsvp_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1867"
    }
  },
  "unconfigure_ip_subnet_to_sgt_mapping_vrf": {
    "iosxe": {
      "doc": " Unconfigure vrf Ip address subnet SGT\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n            ip_address ('str'): IP address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure vrf ip_address subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_subnet_to_sgt_mapping_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L730"
    }
  },
  "unconfigure_ip_tftp_blocksize": {
    "iosxe": {
      "doc": " Resets the TFTP blocksize to default\n        Example : no ip tftp blocksize \n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_tftp_blocksize",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1417"
    }
  },
  "unconfigure_ip_to_sgt_mapping_vrf": {
    "iosxe": {
      "doc": " Unconfigure vrf Ip address SGT\n        Args:\n            device ('obj'): device to use\n            vrf_name ('str'): vrf name\n            ip_address ('str'): IP address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure vrf ip_address SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_to_sgt_mapping_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L689"
    }
  },
  "unconfigure_ip_vrf_forwarding_interface": {
    "iosxe": {
      "doc": " Remove ip vrf forwarding on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface name\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure ip vrf forwarding\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ip_vrf_forwarding_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L685"
    }
  },
  "unconfigure_ipsec_df_bit": {
    "iosxe": {
      "doc": " Configure IPSec DF bit\n        Args:\n            device ('obj')    : device to use\n            no_clear ('boolean', optional) :  Clear DF bit for encapsulated packets, default is False\n            no_copy ('boolean', optional) :  Copy DF bit from inner for encapsulated packets, default is False\n            no_set ('boolean', optional) : Set DF bit for encapsulated packets, default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipsec_df_bit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L854"
    }
  },
  "unconfigure_ipsec_fragmentation": {
    "iosxe": {
      "doc": " Configure IPSec Fragmentation\n        Args:\n            device ('obj')    : device to use\n            no_after_encr ('boolean', optional) :  Perform fragmentation of large packets after IPSec\n                    encapsulation, default is False\n            no_before_encr ('boolean', optional) : Perform fragmentation of large packets before IPSec\n                    encapsulation, default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipsec_fragmentation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L822"
    }
  },
  "unconfigure_ipsec_profile": {
    "iosxe": {
      "doc": " Unconfigures ipsec profile\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ipsec profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipsec_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L381"
    }
  },
  "unconfigure_ipsec_sa_global": {
    "iosxe": {
      "doc": " Configures IPSec SA global parameters\n        Args:\n            device ('obj'): device to use\n            no_ecn('boolean', optional): Discard the Explicit Congestion Notification, default is False\n            no_idle_time ('boolean', optional): Automatically delete IPSec SAs after a given idle period, default is False\n            no_sa_life_days ('boolean', optional): Security association duration in days, default is False\n            no_sa_life_kbytes ('boolean', optional): Security association duration in kilobytes, default is False\n            no_sa_life_sec ('boolean', optional): Security association duration in seconds, default is False\n            no_replay_disable ('boolean', optional): SA replay disable, default is False\n            no_replay_window ('boolean', optional): SA replay window size, default is False\n            no_multi_sn ('boolean', optional): Enable multiple sequence number per IPSec SA, default is False\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipsec_sa_global",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L889"
    }
  },
  "unconfigure_ipv4_dhcp_relay_helper": {
    "iosxe": {
      "doc": " Unconfigure helper IP on an interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): helper IP address to be unconfigured on interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_dhcp_relay_helper",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6575"
    }
  },
  "unconfigure_ipv4_dhcp_relay_helper_vrf": {
    "iosxe": {
      "doc": " Unconfigure helper IP on an interface with VRF\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            ip_address (`str`): helper IP address to be configured on interface\n            vrf ('str'): VRF to be configured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_dhcp_relay_helper_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5222"
    }
  },
  "unconfigure_ipv4_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure Ipv4 Subnet to SGT mapping\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure Ipv4 Subnet to SGT mapping\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L345"
    }
  },
  "unconfigure_ipv4_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure Ipv4 SGT\n        Args:\n            device ('obj'): device to use\n            ipv4 ('str'): IPv4 address to configure\n            sgt (`int`): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to Unconfigure Ipv4 SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv4_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L325"
    }
  },
  "unconfigure_ipv6_acl": {
    "iosxe": {
      "doc": " Unconfigure IPv6 ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L372"
    }
  },
  "unconfigure_ipv6_acl_ace": {
    "iosxe": {
      "doc": " Unconfigure IPv6 ACL ACE\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_type ('str'): service type to configure\n            src_nw ('str'): name of the source network object-group or any\n            dst_nw ('str'): name of the destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            host_option('bool',optional): True to configure ace with host keyword, False if host keyword not required. Default value is True\n            prefix('str',optional): Prefix value in case of network option,default value is None\n            dst_port ('str',optional): Acl destination port,default value is None\n            log_option ('str',optional): Option to log ACL match counters,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_acl_ace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L466"
    }
  },
  "unconfigure_ipv6_acl_on_interface": {
    "iosxe": {
      "doc": " Remove acl from an interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            acl_name ('str'): acl to apply\n            inbound ('bool', optional): True for inbound acl, False for outbound acl. Default value is True\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_acl_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L439"
    }
  },
  "unconfigure_ipv6_destination_guard_policy": {
    "iosxe": {
      "doc": " Unconfigure ipv6 destination_guard policy\n    Args:\n        device (\"obj\"): the device to unconfigure the policy on\n        policy_name (\"str\"): The name of the policy\n\n    Raises:\n        SubCommandFailure: Failed to unconfigure ipv6 destination-guard {policy_name}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_destination_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2026"
    }
  },
  "unconfigure_ipv6_dhcp_client_vendor_class": {
    "iosxe": {
      "doc": " Unconfigure IPv6 DHCP Client Vendor-class on interface:\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to configure\n            type('str'): vendor-class type (i.e. mac-address, ascii, hex, disable)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure ipv6 dhcp vendor-class\n    ",
      "module_name": "dhcpv6.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_dhcp_client_vendor_class",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/configure.py#L401"
    }
  },
  "unconfigure_ipv6_dhcp_guard_on_interface": {
    "iosxe": {
      "doc": " Unconfigure ipv6 dhcp guard on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to remove ipv6 dhcp guard from interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_dhcp_guard_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2353"
    }
  },
  "unconfigure_ipv6_dhcp_guard_policy": {
    "iosxe": {
      "doc": " Unconfigures ipv6 dhcp guard policy {policy_name}\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            device_role ('bool'): True indicating set device role to its default value\n            trusted_port ('bool'): True indicating set trusted_port to its default value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: \"Failed to unconfigure ipv6 dhcp guard policy {policy_name} with\n            unconfigure device role {device_role} and unconfigure trusted port {trusted_port}\"\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_dhcp_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L78"
    }
  },
  "unconfigure_ipv6_dhcp_relay": {
    "iosxe": {
      "doc": " Unconfigure IPv6 DHCP Relay\n        Args:\n            device ('obj'): device to use\n            interface ('str'): name of the interface to be configured\n            dest_ipv6 ('str'): IPv6 destination address\n            vlan ('int'): vlan number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring IPv6 DHCP Relay\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_dhcp_relay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6597"
    }
  },
  "unconfigure_ipv6_eigrp_router": {
    "iosxe": {
      "doc": " Unconfigures IPv6 Eigrp Router\n        Args:\n            device ('obj')     device to use\n            process_id ('str). EIGRP process id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "eigrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_eigrp_router",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eigrp/configure.py#L103"
    }
  },
  "unconfigure_ipv6_enable": {
    "iosxe": {
      "doc": " Disable ipv6\n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface name to disable ipv6\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4284"
    }
  },
  "unconfigure_ipv6_mld_join_group": {
    "iosxe": {
      "doc": " Unconfigure Enable ipv6 mld join-group \n    Args:\n        device (`obj`): Device object\n        address ('str'): ipv6 address  \n        interface_id ('str'): id of the interface to be configured \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_join_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L920"
    }
  },
  "unconfigure_ipv6_mld_snooping": {
    "iosxe": {
      "doc": "Unconfigure IPv6 MLD Snooping on the switch\n      \n    Args:\n        device('obj'): Device object\n    \n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L29"
    }
  },
  "unconfigure_ipv6_mld_snooping_querier": {
    "iosxe": {
      "doc": "Unconfigure ipv6 mld snooping querier\n       Example : ipv6 mld snooping querier\n      \n    Args:\n        device('obj'): Device object\n\n\n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_querier",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L208"
    }
  },
  "unconfigure_ipv6_mld_snooping_querier_address": {
    "iosxe": {
      "doc": "Unconfigure IPv6 MLD Snooping Querier address\n       Example : ipv6 mld snooping querier address ipv6_address\n      \n    Args:\n        device('obj'): Device object\n        ipv6_address('str'): IPv6 address of the MLD source address which needs to be Link-Local range\n\n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_querier_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L116"
    }
  },
  "unconfigure_ipv6_mld_snooping_querier_version": {
    "iosxe": {
      "doc": "Unconfigure IPv6 MLD Snooping Querier version number\n      \n    Args:\n        device('obj'): Device object\n        version_num('int'): ipv6 mld snooping querier version number\n    \n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_querier_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L71"
    }
  },
  "unconfigure_ipv6_mld_snooping_tcn_flood": {
    "iosxe": {
      "doc": "unconfigure IPv6 MLD snooping tcn flooding\n    Args:\n        device('obj'): Device object\n        interface('str'): interface in which tcn flooding needs to be disabled\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_tcn_flood",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L247"
    }
  },
  "unconfigure_ipv6_mld_snooping_vlan_mrouter_interface": {
    "iosxe": {
      "doc": " Unconfigure ipv6 mld snooping vlan <vlan-id> mrouter interface <interface-id>\n    Args:\n        device (`obj`): Device object\n        vlan_id ('int'): vlan id to unconfigure\n        interface_id ('str'): interface id\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_vlan_mrouter_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L983"
    }
  },
  "unconfigure_ipv6_mld_snooping_vlan_querier_version": {
    "iosxe": {
      "doc": "Unconfigure IPv6 MLD Snooping VLAN Querier version \n       Example : no ipv6 mld snooping vlan 200 querier version 2\n      \n    Args:\n        device('obj'): Device object\n        vlan_id('int'): VLAN ID of the device\n        version_num('int'): MLD Snooping version of the device\n\n    Returns:\n        None\n    \n    Raises: \n        SubCommandFailure\n    ",
      "module_name": "mld_snooping.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_vlan_querier_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mld_snooping/configure.py#L163"
    }
  },
  "unconfigure_ipv6_mld_snooping_vlan_static_interface": {
    "iosxe": {
      "doc": " Unconfigure Enable ipv6 mld snooping vlan static interfac\n    Args:\n        device (`obj`): Device object\n        address ('str'): ipv6 address  \n        interface_id ('str'): id of the interface to be configured \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_snooping_vlan_static_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L963"
    }
  },
  "unconfigure_ipv6_mld_vlan": {
    "iosxe": {
      "doc": " Unconfigure Enable IPv6 mld vlan \n    Args:\n        device (`obj`): Device object\n        id ('int'): VLAN ID \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L840"
    }
  },
  "unconfigure_ipv6_mld_vlan_immediate_leave": {
    "iosxe": {
      "doc": " Unconfigure Enable IPv6 mld vlan immediate leave \n    Args:\n        device (`obj`): Device object\n        id ('int'): VLAN ID \n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mld_vlan_immediate_leave",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L801"
    }
  },
  "unconfigure_ipv6_mtu": {
    "iosxe": {
      "doc": " Unconfiguring ipv6 mtu on  device\n        Args:\n            device ('obj'): Device object\n            intf ('str') : interface to configure\n            mtu ('str'): mtu size to configure\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4656"
    }
  },
  "unconfigure_ipv6_multicast_routing": {
    "iosxe": {
      "doc": " Configure Enable IPv6 multicast routing\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_multicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L468"
    }
  },
  "unconfigure_ipv6_nd_dad_processing": {
    "iosxe": {
      "doc": " UnConfigures ipv6 nd dad processing\n        Args:\n            device ('obj')         : device to use\n            interface ('str')      : interface to configure\n            no_of_attempts ('str') : Set IPv6 Duplicate Address Detection Transmits\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_nd_dad_processing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L6362"
    }
  },
  "unconfigure_ipv6_nd_raguard_on_interface": {
    "iosxe": {
      "doc": " Unconfigure ipv6 nd raguard on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface name\n    Returns:\n        None\n    Raises:\n         SubCommandFailure: Failed to remove ipv6 nd raguard from interface\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_nd_raguard_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L2277"
    }
  },
  "unconfigure_ipv6_nd_suppress_policy": {
    "iosxe": {
      "doc": " Unconfigures ipv6 nd suppress policy {mode}\n    Args:\n        device ('obj'): device to use\n        policy_name ('str'): name of the policy to be uconfigured\n        mode ('bool'): True indicating set mode to its default value\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure ipv6 nd suppress policy {policy_name} with mode {mode}\n    ",
      "module_name": "sisf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_nd_suppress_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/configure.py#L200"
    }
  },
  "unconfigure_ipv6_object_group_network": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group network\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L172"
    }
  },
  "unconfigure_ipv6_object_group_network_entry": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group network entry\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n            og_mode ('str'): object-group mode\n            ipv6_address ('str'): IPv6 address\n            ipv6_network ('str'): IPv6 network address\n            prefix ('str'): Prefix length\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_network_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L57"
    }
  },
  "unconfigure_ipv6_object_group_service": {
    "iosxe": {
      "doc": " unconfigure ipv6 object-group service\n\n        Args:\n            device (`obj`): Device object\n            og_name ('str'): object-group name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L203"
    }
  },
  "unconfigure_ipv6_object_group_service_entry": {
    "iosxe": {
      "doc": " Unconfigure ipv6 object group service entry\n\n            Args:\n                device (`obj`): Device object\n                og_name ('str'): object-group name\n                ipv6_service ('str'): IPv6 service to add int or str\n\n            Returns:\n                None\n\n            Raises:\n                SubCommandFailure\n        ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_object_group_service_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L137"
    }
  },
  "unconfigure_ipv6_ogacl_ace": {
    "iosxe": {
      "doc": " Unconfigure Access-list Entry (ACE) from IPv6 Object-Group ACL\n\n        Args:\n            device (`obj`): Device object\n            acl_name ('str'): access-list name\n            service_og ('str'): Service object-group\n            src_nw ('str'): source network object-group or any\n            dst_nw ('str'): destination network object-group or any\n            rule ('str'): ACL rule permit/deny\n            service_type ('str',optional): service type to configure,default value is None\n            log_option ('str',optional): Option to log ACL match,default value is None\n            sequence_num ('str',optional): specific sequence number,default value is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ogacl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ogacl_ace",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ogacl/configure.py#L302"
    }
  },
  "unconfigure_ipv6_ospf_bfd": {
    "iosxe": {
      "doc": "unconfigure ipv6 ospf bfd\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1250"
    }
  },
  "unconfigure_ipv6_ospf_mtu_ignore": {
    "iosxe": {
      "doc": "unconfigure ipv6 ospf mtu-ignore\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ospf_mtu_ignore",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1308"
    }
  },
  "unconfigure_ipv6_ospf_routing_on_interface": {
    "iosxe": {
      "doc": " UnConfigures ipv6 ospf  on Interface\n\n        Args:\n            device ('obj'): Device to use\n            interface ('str'): Interface to use\n            ospf_process_id ('str'): Process id for ospf process\n            areaid ('int'): Area id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_ospf_routing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1372"
    }
  },
  "unconfigure_ipv6_pim_rp_address": {
    "iosxe": {
      "doc": " Unconfigure Enable ipv6 pim rp-address \n    Args:\n        device (`obj`): Device object\n        address ('str'): ipv6 address\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L879"
    }
  },
  "unconfigure_ipv6_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n        Args:\n            device ('obj'): Device obj\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            interface ('str', optional): interface name to configure. Default is False\n            destination_address('str', optional): destination address to configure. Default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L833"
    }
  },
  "unconfigure_ipv6_subnet_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure subnet SGT\n        Args:\n            device ('obj'): device to use\n            ipv6 ('str'): IPv6 address to configure\n            subnet ('str'): Subnet to verify inside\n            sgt ('str'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure subnet SGT\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_subnet_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L611"
    }
  },
  "unconfigure_ipv6_to_sgt_mapping": {
    "iosxe": {
      "doc": " Unconfigure Ipv6 SGT mapping\n        Args:\n            device ('obj'): device to use\n            ipv6 ('str'): IPv6 address to configure\n            sgt ('int'): Security Group Tag (SGT) value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure Ipv6 SGT mapping\n    ",
      "module_name": "cts.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_to_sgt_mapping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cts/configure.py#L572"
    }
  },
  "unconfigure_ipv6_unicast_routing": {
    "iosxe": {
      "doc": " Disables ipv6 unicast routing on device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ipv6_unicast_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L453"
    }
  },
  "unconfigure_isakmp_key": {
    "iosxe": {
      "doc": " Unconfigures ISAKMP key \n        Args:\n            device (`obj`): Device object\n            key_type ('int', optional): type of key that will follow\n            key ('str'): preshared key\n            ipv4_address ('str',optional): IPv4 address associated with the keyring\n            sub_mask ('str',optional): subnet mask associated with the keyring\n            host_name ('str',optional): hostname associated with the keyring\n            ipv6_prefix ('str',optional): IPv6 address associated with the keyring\n            no_xauth ('str',optional): This option specifies if no_xauth needs to be configured or not\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isakmp_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L915"
    }
  },
  "unconfigure_isakmp_policy": {
    "iosxe": {
      "doc": " Unconfigures ISAKMP POLICY\n        Args:\n            device (`obj`): Device object\n            policy_number ('str'): isakmp policy number\n        Returns:\n            NA\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isakmp_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L888"
    }
  },
  "unconfigure_isis_authentication_key_chain": {
    "iosxe": {
      "doc": " Unconfigures the ISIS authentication Key-chain\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            key_chain_name('str'): Name of the key-chain\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_authentication_key_chain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L402"
    }
  },
  "unconfigure_isis_authentication_mode": {
    "iosxe": {
      "doc": " Unconfigures the ISIS authentication mode\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            mode('str'): Authentication mode for PDUs (md5 or text)\n            level('str'): Level for ISIS authentication (level-1 or level-2)\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_authentication_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L334"
    }
  },
  "unconfigure_isis_circuit_type": {
    "iosxe": {
      "doc": " Unconfigures the ISIS ciruit type\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_circuit_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L469"
    }
  },
  "unconfigure_isis_keychain_key": {
    "iosxe": {
      "doc": " Unconfigures the isis key chain\n        Args:\n            device('obj'): device to configure on\n            keychain_name ('str'): name of the key chain\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_keychain_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L270"
    }
  },
  "unconfigure_isis_password": {
    "iosxe": {
      "doc": " Unconfigures the ISIS password\n        Args:\n            device('obj'): device to configure on\n            interface ('str'): name of the interface\n            password('str'): password for ISIS\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L532"
    }
  },
  "unconfigure_isis_router_configs": {
    "iosxe": {
      "doc": " Unconfigures ISIS Router\n        Args:\n            device ('obj'):  device to use\n            max_paths ('int', optional):  Number of paths (Default is None)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_router_configs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L656"
    }
  },
  "unconfigure_isis_with_router_name": {
    "iosxe": {
      "doc": " Unconfigure isis with router name\n        Args:\n            device('obj'): device to configure on\n            router_name ('str'):configure the isis router name\n        Return:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "isis.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_isis_with_router_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/isis/configure.py#L163"
    }
  },
  "unconfigure_key_config_key_password_encrypt": {
    "iosxe": {
      "doc": " Unconfigures key config-key password encrypt on device\n        Args:\n            device (`obj`): Device object\n            password('str'): password, The config-key \n                Minimum 8 characters not beginning with\n                IOS special character(! # ;)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_key_config_key_password_encrypt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3136"
    }
  },
  "unconfigure_l2vpn_evpn": {
    "iosxe": {
      "doc": " unconfig l2vpn evpn \n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_evpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L83"
    }
  },
  "unconfigure_l2vpn_evpn_router_id": {
    "iosxe": {
      "doc": " unconfig l2vpn evpn \n        Args:\n            device (`obj`): Device object\n            interface ('str'): interface type \n                               loopback | physical\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_evpn_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L134"
    }
  },
  "unconfigure_l2vpn_vfi_context_vpls": {
    "iosxe": {
      "doc": "\n    Unconfigures l2vpn vfi context vpls on device\n\n    Args:\n        device('obj'): device to configure\n\n    Returns:\n        N/A\n\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "l2vpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_l2vpn_vfi_context_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/configure.py#L113"
    }
  },
  "unconfigure_lacp_port_priority": {
    "iosxe": {
      "doc": "unconfigure lacp port-priority on a interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lacp_port_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L74"
    }
  },
  "unconfigure_lacp_ratefast": {
    "iosxe": {
      "doc": "unconfigure lacp rate fast on a interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lacp_ratefast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L31"
    }
  },
  "unconfigure_lacp_system_priority": {
    "iosxe": {
      "doc": " unconfigure lacp system-priority on a interface\n\n        Args:\n            device (`obj`): Device object\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lacp_system_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L114"
    }
  },
  "unconfigure_layer2_vfi_autodiscovery": {
    "iosxe": {
      "doc": "unconfigure Layer 2 VFI vpnid configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_layer2_vfi_autodiscovery",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1469"
    }
  },
  "unconfigure_layer2_vfi_manual": {
    "iosxe": {
      "doc": "unconfigure Layer 2 VFI manual configuration mode.\n        Args:\n\t    device (`obj`): Device \n            vfiname(`str`): Name of VFI\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_layer2_vfi_manual",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1345"
    }
  },
  "unconfigure_ldp_discovery_targeted_hello_accept": {
    "iosxe": {
      "doc": " unconfigure mpls ldp discovery targeted-hello accept \n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ldp_discovery_targeted_hello_accept",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1794"
    }
  },
  "unconfigure_license_smart_reservation": {
    "iosxe": {
      "doc": " Unconfigure license smart reservation\n    \n    Args:\n        device ('obj'): device to use\n        Returns:    \n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_license_smart_reservation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2696"
    }
  },
  "unconfigure_license_smart_transport": {
    "iosxe": {
      "doc": " no license smart transport\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : : Failed configuring device\n    ",
      "module_name": "telemetry.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_license_smart_transport",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/configure.py#L57"
    }
  },
  "unconfigure_license_smart_url_cslu": {
    "iosxe": {
      "doc": " Unconfigures the license smart url cslu\n        Example : no license smart url cslu\n\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform_licensing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_license_smart_url_cslu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform_licensing/configure.py#L72"
    }
  },
  "unconfigure_line_vty": {
    "iosxe": {
      "doc": " unconfigures line vty  on switch \n        Args:\n            device ('obj'): device to use\n            first_line_number ('int'): first line number\n            second_line_number ('int'): Second line number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_line_vty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3243"
    }
  },
  "unconfigure_lisp_enhanced_forwarding": {
    "iosxe": {
      "doc": " unconfigures enhanced forwarding in lisp \n        Args:\n            device (`obj`): Device object\n            instance_id (`str`): instance_id under lisp\n            vlan (`int`): vlan number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lisp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lisp_enhanced_forwarding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lisp/configure.py#L37"
    }
  },
  "unconfigure_lisp_l2_flooding": {
    "iosxe": {
      "doc": " unconfigures l2 flooding under lisp \n        Args:\n            device (`obj`): Device object\n            instance_id (`str`): instance_id under lisp\n            vlan (`int`): vlan number\n            mcast_ip('str'): broadcast-underlay ip, defaults to '239.0.0.1'\n            packet1('str'):type of packet to flood,defaults to 'arp-nd'\n            packet2('str'):type of packet to flood,defaults to 'unknown-unicast'\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lisp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lisp_l2_flooding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lisp/configure.py#L93"
    }
  },
  "unconfigure_lldp": {
    "ios": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/configure.py#L18"
    },
    "iosxe": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L26"
    },
    "iosxr": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/configure.py#L17"
    },
    "nxos": {
      "doc": " Disables lldp on target device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/configure.py#L17"
    }
  },
  "unconfigure_lldp_holdtime": {
    "iosxe": {
      "doc": " Disable LLDP holdtime on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L111"
    }
  },
  "unconfigure_lldp_interface": {
    "iosxe": {
      "doc": " Unconfigure LLDP on interface\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface on which LLDP to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L68"
    }
  },
  "unconfigure_lldp_reinit": {
    "iosxe": {
      "doc": " Disable LLDP reinit on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp_reinit",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L173"
    }
  },
  "unconfigure_lldp_timer": {
    "iosxe": {
      "doc": " Disable LLDP timer on target device globally on the device\n        Args:\n            device ('obj'): Device object\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L142"
    }
  },
  "unconfigure_lldp_tlv_select": {
    "iosxe": {
      "doc": " Disable LLDP tlv-select on target device globally on the device\n        Args:\n            device ('obj'): Device object\n            tlv ('list'/'str'): List of TLVs if multiple TLVs to unselect or a string.\n        Returns:\n            None\n    ",
      "module_name": "lldp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_lldp_tlv_select",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/configure.py#L235"
    }
  },
  "unconfigure_local_span_destination_interface": {
    "iosxe": {
      "doc": " unconfigure locl span destination interface\n        Args:\n            device (`obj`): Device object\n            session_id ('int'): SPAN session number\n            int_type('str'): SPAN source {VLAN|interface}\n            span_port('str'): SPAN source interface/VLAN ID\n    ",
      "module_name": "span.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_local_span_destination_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/span/configure.py#L125"
    }
  },
  "unconfigure_local_span_source": {
    "iosxe": {
      "doc": " unconfigure locl span source interface\n        Args:\n            device (`obj`): Device object\n            session_id ('int'): SPAN session number\n            int_type('str'): SPAN source {VLAN|interface}\n            span_port('str'): SPAN source interface/VLAN ID\n            direction('str'): MONITOR (TRANSMIT/RECEIVE/BOTH) TRAFFIC, Default=both\n                ex:)\n                    both  Monitor received and transmitted traffic\n                    rx    Monitor received traffic only\n                    tx    Monitor transmitted traffic only\n                    <cr>  <cr> \n    ",
      "module_name": "span.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_local_span_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/span/configure.py#L97"
    }
  },
  "unconfigure_logging_buffered_errors": {
    "iosxe": {
      "doc": " Unconfgiure logging buffered errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_buffered_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L172"
    }
  },
  "unconfigure_logging_console": {
    "iosxe": {
      "doc": " no logging console\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_console",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L28"
    }
  },
  "unconfigure_logging_console_errors": {
    "iosxe": {
      "doc": " Unconfgiure logging console errors\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_console_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L210"
    }
  },
  "unconfigure_logging_monitor": {
    "iosxe": {
      "doc": " no logging monitor\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "logging.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_logging_monitor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/logging/configure.py#L61"
    }
  },
  "unconfigure_mac_address_table_learning": {
    "iosxe": {
      "doc": " Unconfig mac-learning on device\n        Args:\n            device (`obj`): device object\n            vlan_id (`int`): vlan id \n        Return:\n            None\n        Raises:\n            SubCommandFailure \n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mac_address_table_learning",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L317"
    }
  },
  "unconfigure_mac_address_table_notification_change": {
    "iosxe": {
      "doc": "Unconfigure mac-address-table notification change on this device\n        Args:\n            device ('obj'): Device object\n            change_option ('str',optional): change option history-size/interval\n            size ('int',optional): Number of MAC notifications to be stored\n            interval ('int',optional): Interval between the MAC notifications\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mac_address_table_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L253"
    }
  },
  "unconfigure_mac_address_table_static": {
    "iosxe": {
      "doc": " \n    API for the CLI :- \n        no mac address-table static {MAC_Address} vlan {vlan_ID_number} interface {interface}\n        e.g.\n        Args:\n            device ('obj'): Device object\n            mac_address('str'): MAC address\n            vlan_number('int'): Vlan ID number\n            interface('str'): interface name\n        Return:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mac_address_table_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L388"
    }
  },
  "unconfigure_mac_global_address_table_notification_change": {
    "iosxe": {
      "doc": "Unconfigure address-table notification change under global mac on this device\n        Args:\n            device ('obj'): Device object\n            change_option ('str',optional): change option history-size/interval\n            size ('int',optional): Number of MAC notifications to be stored\n            interval ('int',optional): Interval between the MAC notifications\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mac_global_address_table_notification_change",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L205"
    }
  },
  "unconfigure_mac_global_address_table_static": {
    "iosxe": {
      "doc": "Unconfigure address-table static under global mac on this device\n        Args:\n            device ('obj'): Device object\n            mac ('str'): 48 bit mac address\n            vlan ('int'): vlan id\n            interface ('str',optional): interface\n        Returns:\n                None\n        Raises:\n                SubCommandFailure\n    ",
      "module_name": "mac.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mac_global_address_table_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/configure.py#L159"
    }
  },
  "unconfigure_macro_auto_global_processing": {
    "iosxe": {
      "doc": " unConfigure macro auto global processing on the device globally\n    \n    Args:\n        device ('obj'): device to use\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure macro auto global processing\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_macro_auto_global_processing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3728"
    }
  },
  "unconfigure_macro_auto_global_processing_on_interface": {
    "iosxe": {
      "doc": " unConfigure macro auto global processing on the device interface\n    \n    Args:\n        device ('obj'): device to use\n        interface (int): interface to configure\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed to unconfigure macro auto global processing\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_macro_auto_global_processing_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3692"
    }
  },
  "unconfigure_macro_auto_sticky": {
    "iosxe": {
      "doc": " Unconfigure macro auto sticky on this device\n    \n    Args:\n        device ('obj'): device to use\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_macro_auto_sticky",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L734"
    }
  },
  "unconfigure_match_service_type_mdns_controller_service_list": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) controller service list\n    \n        mdns-sd controller service-list contrl-list3\n        no match airplay\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str') : name of the list\n            service_type ('list'): services names\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns controller service-list\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_match_service_type_mdns_controller_service_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1328"
    }
  },
  "unconfigure_match_service_type_mdns_service_list": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) service list\n    \n        mdns-sd service-list policie5 IN\n        no match apple-tv\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str') : name of the list\n            direction ('str'): direction of the list\n            service_type ('list'): services names\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns service-list\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_match_service_type_mdns_service_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1228"
    }
  },
  "unconfigure_mdns_active_response_timer": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) active response timer\n    \n        mdns-sd gateway\n        no active-response timer 20\n        end\n    \n        Args:\n            device ('obj'): device to use\n            timer ('int'): 5-60 sec\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns active response timer\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_active_response_timer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1496"
    }
  },
  "unconfigure_mdns_config": {
    "iosxe": {
      "doc": " Unconfigure mDNS (Multicast Domain Name System) services on agent and service peer\n\n        Args:\n            device ('obj'): device to configure\n            policy_name ('list', optional): dict with all Policy names and directions. Default value is None\n            service_list ('list', optional): list with all services. Default value is None\n            direction ('str', optional): direction. Default value is None\n            service definition ('str', optional): service definition name. Default value is None\n            service_list_filter ('str', optional): creating service list for filter type. Default value is None\n            direction_filter_type ('str', optional): creating direction for filter type. Default value is None\n            filter_name ('str', optional): filter name. Default value is None\n            service_list_msg_type ('str', optional): creating service list for msg type. Default value is None\n            direction_msg_type ('str', optional): creating direction for msg type. Default value is None\n\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L572"
    }
  },
  "unconfigure_mdns_controller": {
    "iosxe": {
      "doc": " Remove mdns controller\n        Args:\n            device ('obj'): device to use\n            name ('str'): name of the controller to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring bfd on interface\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_controller",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L128"
    }
  },
  "unconfigure_mdns_gateway_globally": {
    "iosxe": {
      "doc": " Unconfigure mdns gateway globally\n        Args:\n            device (`obj`): Device object\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring mdns gateway\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_gateway_globally",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1747"
    }
  },
  "unconfigure_mdns_location_filter": {
    "iosxe": {
      "doc": " Unconfigures location filter details on vlan\n        Args:\n            device ('obj'): device to use\n            location_filter ('str'): location filter name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_location_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1118"
    }
  },
  "unconfigure_mdns_location_group": {
    "iosxe": {
      "doc": " Removing location group details on interface\n\n        Args:\n            device ('obj'): device to use\n            location_group ('int'): location group name\n            vlan ('int'): Vlan id value\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_location_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L830"
    }
  },
  "unconfigure_mdns_on_interface_vlan": {
    "iosxe": {
      "doc": " Unconfigure mdns gateway on interface vlan\n        Args:\n            device ('obj'): Device object\n            vlan ('int'): Vlan Id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_on_interface_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4784"
    }
  },
  "unconfigure_mdns_service_definition": {
    "iosxe": {
      "doc": " Unconfigure mdns service definition\n        Args:\n            device ('obj'): device to use\n            name ('list')\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns controller\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_service_definition",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L279"
    }
  },
  "unconfigure_mdns_service_policy": {
    "iosxe": {
      "doc": " Unconfigures mdns service policy\n\n        Args:\n            device (`obj`): Device object\n            policy ('str'): Policy name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1694"
    }
  },
  "unconfigure_mdns_service_policy_vlan": {
    "iosxe": {
      "doc": " Unconfigures mdns service policy from vlan configuration\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID\n            policy ('str'): Policy name\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_service_policy_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1719"
    }
  },
  "unconfigure_mdns_svi": {
    "iosxe": {
      "doc": " Remove mdns svi\n        Args:\n            device ('obj'): device to use\n            vlan ('str'): name of the controller to be created\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring mdns on interface\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L211"
    }
  },
  "unconfigure_mdns_trust": {
    "iosxe": {
      "doc": " Unconfiguring mdns trust on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_trust",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1769"
    }
  },
  "unconfigure_mdns_vlan": {
    "iosxe": {
      "doc": " Removing mdns-sd gateway from vlan configuartion (mDNS-Multicast Domain Name System)\n\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): Vlan ID value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdns_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L695"
    }
  },
  "unconfigure_mdt_auto_discovery_mldp": {
    "iosxe": {
      "doc": " unconfigure mdt auto-discovery mldp\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_auto_discovery_mldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L205"
    }
  },
  "unconfigure_mdt_data_threshold": {
    "iosxe": {
      "doc": " unconfigure mdt threshold in vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            threshold ('int'): defines the bandwidth threshold value in kilobits per second.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_data_threshold",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L473"
    }
  },
  "unconfigure_mdt_data_vxlan": {
    "iosxe": {
      "doc": " unconfigure mdt data vxlan network in vrf\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n            ip ('str'): network ip address\n            mask ('str'): mask\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed unconfiguring mdt data vxlan \n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_data_vxlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L791"
    }
  },
  "unconfigure_mdt_overlay_use_bgp": {
    "iosxe": {
      "doc": " unconfigure BGP as the overlay protocol\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n            address_family ('str'):  mention the address-family.\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mdt_overlay_use_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L230"
    }
  },
  "unconfigure_mka_keychain_on_interface": {
    "iosxe": {
      "doc": " Unconfigures mka keychain on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            key_string ('str'): key string to configure\n            key_chain ('str'): fall back key chain to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_keychain_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L627"
    }
  },
  "unconfigure_mka_macsec": {
    "iosxe": {
      "doc": " Unonfigures MKA and MACSec interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface name\n            keychain_name ('str'): Key Chain name\n            policy_name ('str'): MKA policy name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_macsec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L779"
    }
  },
  "unconfigure_mka_policy": {
    "iosxe": {
      "doc": " Unconfigures mka policy on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            interface ('str'): interface to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L594"
    }
  },
  "unconfigure_mka_policy_delay_protection": {
    "iosxe": {
      "doc": " Unconfigures mka policy with delay protection on device and interface\n\n        Args:\n            device ('obj'): device to use\n            policy_name ('str'): name of the policy to be unconfigured\n            interface ('str'): interface to unconfigure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mka_policy_delay_protection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L528"
    }
  },
  "unconfigure_modify_ikev2_profile": {
    "iosxe": {
      "doc": " Unconfigures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            profile_name ('str'): ikev2 profile name\n            remote_addr ('str'): peer/remote ip address\n            remote_auth ('str'): remote authentication method\n            local_auth ('str'): local authentication method\n            keyring ('str'): ikev2 keyring name\n            lifetime ('int') : configuring session lifetime\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_modify_ikev2_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1356"
    }
  },
  "unconfigure_monitor_capture_buffer_size": {
    "iosxe": {
      "doc": " Unconfigure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Unconfigure Monitor Capture Buffer Size\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_monitor_capture_buffer_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L927"
    }
  },
  "unconfigure_monitor_capture_limit_packet_len": {
    "iosxe": {
      "doc": " Unconfigure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed to Unconfigure Monitor Capture Buffer Size\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_monitor_capture_limit_packet_len",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L948"
    }
  },
  "unconfigure_monitor_capture_without_match": {
    "iosxe": {
      "doc": " Unconfigure Monitor Capture on Device\n        Args:\n            device (`obj`): Device object\n            capture_name (`str`): Monitor capture name\n            direction ('str'): Direction of monitor (input/output/both)\n            interface('str'): Interface\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed To Unconfigure Monitor Capture\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_monitor_capture_without_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L904"
    }
  },
  "unconfigure_mpls_ldp_graceful_restart": {
    "iosxe": {
      "doc": " Unconfigures mpls ldp graceful restart on device\n\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_ldp_graceful_restart",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1189"
    }
  },
  "unconfigure_mpls_ldp_nsr": {
    "iosxe": {
      "doc": " Unconfigures mpls ldp nsr on device\n        Args:\n            device (`obj`): Device object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_ldp_nsr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L859"
    }
  },
  "unconfigure_mpls_static_binding": {
    "iosxe": {
      "doc": "unconfigure mpls static binding\n        Args:\n        device (`obj`): Device \n        neighbor (`str`) : neighbor ip address\n        mask (`str`): mask to be used for ip address\n        neigh_intf_ip (`str`) : neighbor interface ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_static_binding",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1698"
    }
  },
  "unconfigure_mpls_te_explicit_null": {
    "iosxe": {
      "doc": "unconfigure explicit null on Tunnel\n        Args:\n            device (`obj`): Device \n            explicit_null(`str`) : unconfigure explicit null \n            verbatim(`str`) : unconfigure verbatim\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_te_explicit_null",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1211"
    }
  },
  "unconfigure_mpls_te_under_ospf": {
    "iosxe": {
      "doc": "unconfigure MPLS TE under ospf\n\n        Args:\n            device (`obj`): Device object\n            processid ('str'): Process Id\n            area ('str'): ospf area\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_mpls_te_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L445"
    }
  },
  "unconfigure_nat64_interface": {
    "iosxe": {
      "doc": " Unconfigure nat64 on interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface/vlan/sub-interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 enable not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1065"
    }
  },
  "unconfigure_nat64_nd_ra_prefix": {
    "iosxe": {
      "doc": " UnConfigure nat64 nd ra prefix  \n        Args:\n            device ('obj'): device to use\n            prefix ('str'): prefix\n            prefix_length ('int'): prefix length\n            interface ('str', optional): interface\n            sub_interface('str', optional): Subinterface to be added to interface name\n            int1('str', optional): Interface 1\n            int2('str', optional): Interface 2\n            start_int('str', optional): Starting Interface\n            end_int('str', optional): Ending Interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_nd_ra_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1544"
    }
  },
  "unconfigure_nat64_prefix_stateful": {
    "iosxe": {
      "doc": " Unconfigure nat64 prefix stateful \n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface\n            prefix ('str'): prefix\n            prefix_lenght ('str'): prefix length\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 prefix not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_prefix_stateful",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1114"
    }
  },
  "unconfigure_nat64_translation_timeout": {
    "iosxe": {
      "doc": " Unconfigure nat64 translation timeout \n        Args:\n            device ('obj'): device to use\n            protocol_name ('str'): protocols tcp,udp,icmp,bind\n            timeout_value ('str'): timeout value in seconds\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 translation timeout not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_translation_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1435"
    }
  },
  "unconfigure_nat64_v4_list_pool": {
    "iosxe": {
      "doc": " Unconfigure nat64 v4 list pool \n        Args:\n            device ('obj'): device to use\n            acl_list_number_name ('str'): access list number or name\n            pool_name ('str'): any pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 list pool not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_v4_list_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1342"
    }
  },
  "unconfigure_nat64_v4_list_pool_overload": {
    "iosxe": {
      "doc": " Unconfigure nat64 v4 list pool overload \n        Args:\n            device ('obj'): device to use\n            acl_list_number_name ('str'): access list number or name\n            pool_name ('str'): any pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 list pool overload not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_v4_list_pool_overload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1388"
    }
  },
  "unconfigure_nat64_v4_pool": {
    "iosxe": {
      "doc": " Unconfigure nat64 v4 pool \n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): any pool name\n            start_ipv4_address ('str'): ipv4 address\n            end_ipv4_address ('str'): ipv4 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v4 pool not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_v4_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1271"
    }
  },
  "unconfigure_nat64_v6v4_static": {
    "iosxe": {
      "doc": " Unconfigure nat64 v6v4 static \n        Args:\n            device ('obj'): device to use\n            ipv6_address ('str'): ipv6 address\n            ipv4_address ('str'): ipv4 address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v6v4 static not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_v6v4_static",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1163"
    }
  },
  "unconfigure_nat64_v6v4_static_protocol_port": {
    "iosxe": {
      "doc": " Unconfigure nat64 v6v4 static protocl \n        Args:\n            device ('obj'): device to use\n            protocol ('str'): protocol-tcp/udp\n            ipv6_address ('str'): ipv6 address\n            ipv6_port ('str'): ipv6 port number\n            ipv4_address ('str'): ipv4 address\n            ipv4_port ('str'): ipv4 port number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: nat64 v6v4 static protocol not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat64_v6v4_static_protocol_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1217"
    }
  },
  "unconfigure_nat_in_out": {
    "iosxe": {
      "doc": " Disable nat IN and OUT over interface \n        Args:\n            device ('obj'): device to use\n            inside_interface ('str'): Disable nat in from this interface, default value is None\n            outside_interface ('str'): Disable nat out From this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: NAT IN OUT not enable over interface\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L69"
    }
  },
  "unconfigure_nat_overload_rule": {
    "iosxe": {
      "doc": " UnConfigure interface overload rule\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface which will use for overlad rule\n            access_list_name ('str'): Name of extended access list\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Nat overload rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L100"
    }
  },
  "unconfigure_nat_pool": {
    "iosxe": {
      "doc": " UnConfigure NAT pool \n        Args:\n            device ('obj'): device to use\n            pool_name ('str'): Name of pool\n            pool_start_ip ('str'): Pool start ip\n            pool_end_ip ('str') : Pool end ip\n            network_mask ('str') : Network mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: NAT pool not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L153"
    }
  },
  "unconfigure_nat_pool_overload_rule": {
    "iosxe": {
      "doc": " UnConfigure dynamic NAT pool overload rule\n        Args:\n            device ('obj'): device to use\n            acl_name ('str'): Acl name\n            pool_name ('str'): Pool name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: dynamic NAT rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_pool_overload_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L1319"
    }
  },
  "unconfigure_nat_port_route_map_rule": {
    "iosxe": {
      "doc": " UnConfigure NAT port route-map rule\n        Args:\n            device ('obj'): device to use\n            protocol ('str'): Protocol \n            inside_local_ip ('str'): Inside local ip\n            local_port ('str'): Local port\n            inside_global_ip ('str'): Inside global ip\n            global_port ('str'): Global port\n            route_map_name ('str') : Name of route-map\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: NAT port route-map rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_port_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L265"
    }
  },
  "unconfigure_nat_route_map": {
    "iosxe": {
      "doc": " unconfigure NAT route map\n        Args:\n            device ('obj'): device to execute on\n            route_map_name ('str'): route map name\n            permission ('str'): permit|deny\n            sequence_number ('str'): sequence number\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L814"
    }
  },
  "unconfigure_nat_translation_timeout": {
    "iosxe": {
      "doc": " UnConfigure ip nat translation timeout \n        Args:\n            device ('obj'): device to use\n            protocol_timeout ('str'): udp-timeout | tcp-timeout | timeout\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: ip nat translation timeout not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nat_translation_timeout",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L968"
    }
  },
  "unconfigure_neighbor_under_ospf": {
    "iosxe": {
      "doc": " unconfigure neighbor ip address under ospf process id. \n\n        Args:\n            device (`obj`): device to execute on\n            ospf_process_id (`int`): ospf process number\n            ip_address (`str`): ip address to be used\n            ospf_cost (`int`,optional): ospf cost\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_neighbor_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1717"
    }
  },
  "unconfigure_network_policy_profile_number": {
    "iosxe": {
      "doc": "unconfigure Network-Policy Profile on target device\n        Args:\n            device ('obj'): Device object\n            profile_number ('int'): profile number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_network_policy_profile_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L123"
    }
  },
  "unconfigure_network_policy_profile_voice_vlan": {
    "iosxe": {
      "doc": "unconfigure Network-Policy Profile on target device\n        Args:\n            device (`obj`): Device object\n            profile (`int`): profile number\n            vlan (`int`): vlan id\n            voice_signaling ('boolean',optional): Flag to unconfigure voice-signaling (Default True)\n            cos ('int', optional): cos value (Default is None)\n            dscp ('int', optional): dscp value (Default is None)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "network_policy.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_network_policy_profile_voice_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/network_policy/configure.py#L97"
    }
  },
  "unconfigure_nve_interface": {
    "iosxe": {
      "doc": " unconfigure nve interface\n\n        Args:\n            device (`obj`): Device object\n            nve_num (`str`): nve interface number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nve_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L550"
    }
  },
  "unconfigure_nve_interface_group_based_policy": {
    "iosxe": {
      "doc": " Un-configure group-based-policy for nve interface\n        Args:\n            device (`obj`): Device object\n            nve_num (`int`): nve interface number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "evpn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_nve_interface_group_based_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/configure.py#L683"
    }
  },
  "unconfigure_ospf": {
    "iosxe": {
      "doc": "Remove ospf on device\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L52"
    }
  },
  "unconfigure_ospf_area_type": {
    "iosxe": {
      "doc": " unconfigure area type under ospf\n        Args:\n            device ('obj'): device to execute on\n            ospf_process_id ('int'): process id of ospf  \n            area_id ('int'): area number\n            area_type ('str'): area type of ospf\n            ex:\n                stub or nssa\n        Return:\n            None\n        Raises:\n            SubCommandFailure : Failed to unconfigure area type under ospf\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_area_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1579"
    }
  },
  "unconfigure_ospf_cost": {
    "iosxe": {
      "doc": "unconfigure ospf cost in interface\n\n        Args:\n            device ('obj'): Device object\n            ospf_cost ('int'): Ospf cost value\n            interface ('str'): interface to configure\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1897"
    }
  },
  "unconfigure_ospf_network_non_broadcast": {
    "iosxe": {
      "doc": "unconfigure ospf non broadcast network\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_network_non_broadcast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1657"
    }
  },
  "unconfigure_ospf_on_device": {
    "iosxe": {
      "doc": " Unconfigures ospf and ip routing on device\n\n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            vrf_name ('str', optional): vrf name, default value is None\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L883"
    }
  },
  "unconfigure_ospf_router_id": {
    "iosxe": {
      "doc": " unonfigures ospf router-id \n        Args:\n            device ('obj'): Device to use\n            ospf_process_id ('str'): Process id for ospf process\n            router_id ('str'): Router id to use\n\n        Returns:\n            N/A\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L388"
    }
  },
  "unconfigure_ospf_vrf_on_device": {
    "iosxe": {
      "doc": " unonfigure destination in vrf\n        Args:\n            device ('obj'): Device object\n            ospf_process_id('str'): ospf processid to unconfig\n            vrf ('str'): Vrf name\n        Returns:\n            N/A\n        Raises:\n            SubCommandFailure: Failed executing configure commands\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospf_vrf_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1111"
    }
  },
  "unconfigure_ospfv3": {
    "iosxe": {
      "doc": "unconfigure ospfv3\n\n        Args:\n            device (`obj`): Device object\n            pid (`str`): Ospfv3 process id\n\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospfv3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L615"
    }
  },
  "unconfigure_ospfv3_network": {
    "iosxe": {
      "doc": "unconfigure ospfv3 network type\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): interface to configure\n            ex.)\n                interface = 'tenGigabitEthernet0/4/0'\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ospfv3_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1192"
    }
  },
  "unconfigure_pae": {
    "iosxe": {
      "doc": " no pae\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "telemetry.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pae",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/configure.py#L23"
    }
  },
  "unconfigure_pbr_route_map": {
    "iosxe": {
      "doc": " Unconfigure route-map\n\n        Args:\n            device (`obj`): Device object\n            route_map_name (`str`): Route-map to be configured on interface\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pbr_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L199"
    }
  },
  "unconfigure_pim_ssm_default": {
    "iosxe": {
      "doc": " Unconfigure PIM SSM Default\n    Example : no ip pim ssm default\n\n        Args:\n            device ('obj'): Device object\n           \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mcast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pim_ssm_default",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mcast/configure.py#L221"
    }
  },
  "unconfigure_pki_trustpoint": {
    "iosxe": {
      "doc": " Unconfigures Trustpoint related config on device\n\n        Args:\n            device ('obj'): device to use\n            label_name ('str'): Label name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pki_trustpoint",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/configure.py#L707"
    }
  },
  "unconfigure_platform_qos_port_channel_aggregate": {
    "iosxe": {
      "doc": " platform qos port-channel-aggregate <portchannel_number>\n        Args:\n            device (`obj`): Device object\n            portchannel_number ('str') : Port-channel number\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_platform_qos_port_channel_aggregate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L175"
    }
  },
  "unconfigure_platform_sudi_cmca3": {
    "iosxe": {
      "doc": " no platform sudi cmca3\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : : Failed configuring device\n    ",
      "module_name": "sudi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_platform_sudi_cmca3",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/configure.py#L24"
    }
  },
  "unconfigure_policy_map": {
    "iosxe": {
      "doc": " Unconfigures policy-map\n        Args:\n             device ('obj'): device to use\n             policy_name ('str'): name of the class\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "policy_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/configure.py#L72"
    }
  },
  "unconfigure_port_channel_lacp_max_bundle": {
    "iosxe": {
      "doc": " UnConfigure lacp_max_bundle on the Port-channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n            lacp_bundle_num('str'): <1-8>  Max number of ports to bundle in this Port Channel\n            Example : interface Port-channel {100}\n                         no lacp max-bundle {1}\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_port_channel_lacp_max_bundle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4966"
    }
  },
  "unconfigure_port_channel_mode": {
    "iosxe": {
      "doc": " unconfigure port channel mode\n\n        Args:\n            device (`obj`): Device object\n            mode (`str`): port-channel mode auto/load-balance\n\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "lacp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_port_channel_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lacp/configure.py#L172"
    }
  },
  "unconfigure_port_channel_standalone_disable": {
    "iosxe": {
      "doc": " Unconfigure port-channel standalone disable command on port-channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel_num('str'): Port-channel number for the Port-channel interface\n            Example : interface Port-channel {100}\n                          port-channel standalone-disable\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_port_channel_standalone_disable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4512"
    }
  },
  "unconfigure_power_inline": {
    "iosxe": {
      "doc": " Unconfigure power inline on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to unconfigure\n            mode ('str') : Mode to unconfigure (Default is auto)\n            watts_value ('int') : Power value to unconfigure\n            action ('str') : Commands to unconfigure under police mode\n            portlevel_config ('str') : Commands to unconfigure under port mode\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_power_inline",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5360"
    }
  },
  "unconfigure_ppk_on_keyring": {
    "iosxe": {
      "doc": " unconfigures IKEV2 keyring or Preshared Key (PSK)\n        Args:\n            device (`obj`): Device object\n            keyring_name ('str'): Name for the keyring\n            peer_name ('str'): peer name\n            peer_ip ('str',optional): peer ip addr\n            peer_mask ('str',optional): peer nw mask\n            key ('str',optional): preshared key\n            required ('boolean',optional): Required option for PPK\n            ppk_id ('str',optional): ppk id for manual ppk\n            ppk_key ('str',optional): Post-quantum preshared key\n            sks_client_config_block_name ('str',optional): SKS client config block name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ike.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ppk_on_keyring",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/configure.py#L1237"
    }
  },
  "unconfigure_pppoe_enable_interface": {
    "iosxe": {
      "doc": " Configure pppone enable group on interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            name (`str`): pppoe/bba group name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pppoe_enable_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4570"
    }
  },
  "unconfigure_process_cpu_statistics_limit_entry_percentage_size": {
    "iosxe": {
      "doc": " unconfigures process cpu  statistics limit entry-percentage size\n        Example :no process cpu  statistics limit entry-percentage <10> size <100>\n        Args:\n            device ('obj'): device to use\n            entry percentage ('str'): default entry percentage (1-100)\n            size('str'):default interval (5-86400)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_process_cpu_statistics_limit_entry_percentage_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3803"
    }
  },
  "unconfigure_process_cpu_threshold_type_rising_interval": {
    "iosxe": {
      "doc": " Unconfigures process cpu threshold type  rising interval\n        Example : no process cpu threshold type {utilization_level} rising {rising_level} interval {interval}\n        Args:\n            device ('obj'): device to use\n            utilization_level ('str'): interrupt/process/total cpu level utilization\n            rising_level ('str'): default rising level(1-100)\n            interval('str'):default interval (5-86400)\n        Returns:\n            None\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_process_cpu_threshold_type_rising_interval",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3765"
    }
  },
  "unconfigure_profile_on_tunnel_interface": {
    "iosxe": {
      "doc": " Configure tunnel interface\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            tunnel_protection ('str',optional): Protection type (i.e ipsec,dike)\n            profile ('str',optional): Tunnel protection profile name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_profile_on_tunnel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L7225"
    }
  },
  "unconfigure_pseudowire_encapsulation_mpls": {
    "iosxe": {
      "doc": " unconfigures pseudowire encapsulation mpls\n\n        Args:\n            device (`obj`): Device object\n            pseudowire_class (`str`): Pseudowire class be applied\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n\t",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_pseudowire_encapsulation_mpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1365"
    }
  },
  "unconfigure_ptp_8275_holdover_spec_duration": {
    "iosxe": {
      "doc": " PTP 8275 holdover spec-duration unconfiguration\n        Args:\n            device (`obj`): Device object\n            domain (`str`): PTP domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_8275_holdover_spec_duration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L369"
    }
  },
  "unconfigure_ptp_8275_local_priority": {
    "iosxe": {
      "doc": " PTP 8275 local priority global and interface unconfiguration\n        Args:\n            device (`obj`): Device object\n            priority (`str`): PTP local priority\n            intf_list ('list', optional): PTP interface list, default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_8275_local_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L282"
    }
  },
  "unconfigure_ptp_domain": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            domain (`str`): PTP domain\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_domain",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L239"
    }
  },
  "unconfigure_ptp_dscp_message": {
    "iosxe": {
      "doc": " PTP dscp message configuration removal\n        Args:\n            device (`obj`): Device object\n            dscp_event ('str'): PTP DSCP event message\n            dscp_general ('str'): PTP DSCP general message\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_dscp_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L144"
    }
  },
  "unconfigure_ptp_modes": {
    "iosxe": {
      "doc": " PTP global configuration removal\n        Args:\n            device (`obj`): Device object\n            mode (`str`): PTP mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_modes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L166"
    }
  },
  "unconfigure_ptp_role_primary": {
    "iosxe": {
      "doc": " PTP role interface configuration\n        Args:\n            device (`obj`): Device object\n            intf_list ('list'): PTP interface list\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_role_primary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L330"
    }
  },
  "unconfigure_ptp_transport_ipv4": {
    "iosxe": {
      "doc": " PTP global configuration\n        Args:\n            device (`obj`): Device object\n            transport (`str`): PTP transport l3 mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ptp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ptp_transport_ipv4",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/configure.py#L222"
    }
  },
  "unconfigure_qos_policy": {
    "iosxe": {
      "doc": " Unconfigure the qos_policy on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface to configure\n            access_type ('str') : type of interface or VC\n            policy_name ('str') : name of the policy\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "qos.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_qos_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/qos/configure.py#L64"
    }
  },
  "unconfigure_radius_attribute_6": {
    "iosxe": {
      "doc": "\n    Unconfigure radius attribute 6 on-for-login-auth\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_attribute_6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L371"
    }
  },
  "unconfigure_radius_automate_tester": {
    "iosxe": {
      "doc": " Unconfigure Radius Automate Tester.\n    Args:\n        device (`obj`): Device object\n        server_name ('str'): Radius server name\n        username ('str'): Identity Username to query radius server\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_automate_tester",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L786"
    }
  },
  "unconfigure_radius_interface": {
    "iosxe": {
      "doc": " Configure Radius Interface\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed configuring Radius Interface\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L671"
    }
  },
  "unconfigure_radius_interface_vrf": {
    "iosxe": {
      "doc": " Unconfigure Radius Interface via vrf\n    Args:\n        device ('obj'): device to use\n        interface('str'): Interface to be configured\n        vrf('str'): VRF name\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed unconfiguring Radius Interface via vrf\n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_interface_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L830"
    }
  },
  "unconfigure_radius_server_dead_criteria": {
    "iosxe": {
      "doc": " To unconfigure radius server dead criteria\n    Args:\n        device (`obj`): Device object\n        server_time ('int'): time during which no response must be recieved from the server\n        tries ('int',optional): Number of transmits to server without responses before marking it as dead. Defaults to 1\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring radius server dead criteria\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_server_dead_criteria",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1188"
    }
  },
  "unconfigure_radius_server_deadtime": {
    "iosxe": {
      "doc": " To unconfigure radius server deadtime\n    Args:\n        device (`obj`): Device object\n        server_time ('int'): time during which no response must be recieved from the server\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring radius server deadtime\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_server_deadtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1233"
    }
  },
  "unconfigure_radius_server_group": {
    "iosxe": {
      "doc": " unconfigure aaa radius server group\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius Server Grp name\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_radius_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L462"
    }
  },
  "unconfigure_redestribute_ospf_metric_in_bgp": {
    "iosxe": {
      "doc": " Unconfigure redistributes ospf metric route under bgp\n        Args:\n            device ('obj'): device to use\n            bgp_as ('int'): bgp router to configure\n            process_id ('int'): ospf process id\n            metric('int): Metric for redistributed routes\n                ex:)\n                    <0-4294967295>  Default metric\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_redestribute_ospf_metric_in_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2167"
    }
  },
  "unconfigure_redistribute_eigrp_under_ospf": {
    "iosxe": {
      "doc": "unconfigure Redistribute eigrp prefixes under ospf \n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process id\n            vrf (str): ospf with vrf \n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure : Failed to unconfigure redistribute eigrp under ospf\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_redistribute_eigrp_under_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1602"
    }
  },
  "unconfigure_rip": {
    "iosxe": {
      "doc": "unconfigure rip\n        Args:\n            device ('obj'): Device object\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_rip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L51"
    }
  },
  "unconfigure_ripng": {
    "iosxe": {
      "doc": "unconfigure ripng\n        Args:\n            device ('obj'): Device object\n            pid ('str'): ripng process id\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "rip.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_ripng",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/rip/configure.py#L11"
    }
  },
  "unconfigure_route_map": {
    "iosxe": {
      "doc": " unconfigure route map\n\n        Args:\n            device (`obj`): device to execute on\n            route_map_name (`int`): route map name\n            permit (`int`): Sequence to insert to existing route-map entry\n        Return:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ospf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/configure.py#L1026"
    }
  },
  "unconfigure_route_map_under_interface": {
    "iosxe": {
      "doc": " unonfigure route-map on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n            route_map (`str`): Route-map to be configured on interface\n            ipv6 ('bool'): Indicate if this is ipv6 route map. Default false\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n\n    ",
      "module_name": "pbr.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_route_map_under_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/configure.py#L47"
    }
  },
  "unconfigure_router_bgp": {
    "iosxe": {
      "doc": " Unconfigures router bgp number\n        Example : no router bgp 1\n\n        Args:\n            device ('obj'): device to use\n            number ('int'): Autonomous system number (Range: 1-4294967295)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_router_bgp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2357"
    }
  },
  "unconfigure_router_bgp_maximum_paths": {
    "iosxe": {
      "doc": " Unconfigures the maximum paths on router bgp\n        Example: router bgp 100\n                no maximum-paths 3\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n            paths ('int'): Number of paths (Range 1-32)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_router_bgp_maximum_paths",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1863"
    }
  },
  "unconfigure_router_bgp_network_mask": {
    "iosxe": {
      "doc": " Unconfigures the router bgp network mask\n        Example: router bgp 100\n                no network 11.11.11.0 mask 255.255.255.0\n        Args:\n            device ('obj'): device to configure on\n            autonomous_system ('int'): Autonomous system number (Range 1-4294967295)\n            network_ip ('str'): Network number (A.B.C.D)\n            network_mask ('str'): Network mask (A.B.C.D)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_router_bgp_network_mask",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L2303"
    }
  },
  "unconfigure_router_bgp_synchronization": {
    "iosxe": {
      "doc": " Unconfigures the synchronization on router bgp\n        Example: router bgp 100\n                no synchronization\n        Args:\n            device ('obj'): device to configure on\n            system ('int'): Autonomous system number (Range 1-4294967295 or 1.0-XX.YY)\n        Return:\n            None\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "bgp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_router_bgp_synchronization",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/configure.py#L1908"
    }
  },
  "unconfigure_router_ospf": {
    "iosxe": {
      "doc": " Unconfigures router ospf process\n        Example : no router ospf 1\n\n        Args:\n            device ('obj'): device to use\n            process_id ('int'): process ID (Range: 1-65535)\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_router_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2412"
    }
  },
  "unconfigure_routing_ip_route_vrf": {
    "iosxe": {
      "doc": " Unconfigure ip vrf route on device\n\n        Args:\n            device ('obj'): Device obj\n            ip_address ('str'): ip address to reach\n            mask (str): mask the ip address\n            vrf(str)  : vrf name\n            interface ('str',optional): interface name to configure, default is None\n            dest_add('str',optional): gateway address to configure, default is None\n            \n        Returns:\n            None\n            \n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_routing_ip_route_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L606"
    }
  },
  "unconfigure_routing_ipv6_route": {
    "iosxe": {
      "doc": " Unconfigure ipv6 route on device\n\n        Args:\n            device ('obj'): Device obj\n            ipv6_address ('str'): ipv6 address/mask for interface\n            interface ('str',optional): interface name to configure, default is None\n            dest_add('str',optional): destination address to configure, default is None\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_routing_ipv6_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L905"
    }
  },
  "unconfigure_routing_ipv6_route_vrf": {
    "iosxe": {
      "doc": " Unconfigure ipv6 vrf route on device\n\n        Args:\n            device ('obj'): Device obj\n            ipv6_address ('str'): ipv6 address/mask to reach\n            vrf(str)  : vrf name\n            interface ('str',optional): interface name to configure, default is None.\n            dest_add('str',optional): gateway address to configure, default is None.\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_routing_ipv6_route_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L988"
    }
  },
  "unconfigure_routing_static_route": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('obj'): Device obj\n            route ('str'): ip address for route\n            mask (str): mask the ip address\n            vrf ('str',optional): Vrf for static route\n            interface ('str'): interface name to configure\n            destination_address('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_routing_static_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L255"
    }
  },
  "unconfigure_routing_static_routev6": {
    "iosxe": {
      "doc": " Configure static ip route on device\n\n        Args:\n            device ('str'): Device str\n            routev6 ('str'): ip address for route\n            mask (str): mask the ip address\n            vrf ('str',optional): Vrf for static route\n            interface ('str'): interface name to configure\n            destination_addressv6 ('str'): destination address to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_routing_static_routev6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L159"
    }
  },
  "unconfigure_sampler": {
    "iosxe": {
      "doc": " Unconfig Sampler\n        Args:\n            device (`obj`): Device object\n            sampler_name (`str`): Name of sampler \n                        \n        Return:\n            None\n            \n        Raise:\n            SubCommandFailure: Failed unconfiguring Sampler\n    ",
      "module_name": "flow.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_sampler",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/configure.py#L316"
    }
  },
  "unconfigure_scp_local_auth": {
    "iosxe": {
      "doc": " unonfigures SCP parameters\n        Args:\n            device (`obj`): Device object\n            username ('str'): username of the device\n            password ('str'): password for the device\n            scp_server_disable ('boolean', 'Optional'): \n                Disabling SCP server, default is True\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "scp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_scp_local_auth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/scp/configure.py#L56"
    }
  },
  "unconfigure_service_call_home": {
    "iosxe": {
      "doc": " Unconfigures serbice call home \n        Args:\n            device ('obj'): device to use\n    ",
      "module_name": "call_home.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_call_home",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/call_home/configure.py#L684"
    }
  },
  "unconfigure_service_internal": {
    "iosxe": {
      "doc": " Unonfigure service imternal\n    Args:\n        device ('obj'): device to use\n        Returns\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_internal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2856"
    }
  },
  "unconfigure_service_password_encryption": {
    "iosxe": {
      "doc": " Unconfigures service password encryption\n    Args:\n        device ('obj'): device to use\n\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure: Failed unconfiguring service password encryption \n\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_password_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1052"
    }
  },
  "unconfigure_service_performance": {
    "iosxe": {
      "doc": " Unconfigures service performance on device\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_performance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3099"
    }
  },
  "unconfigure_service_policy": {
    "iosxe": {
      "doc": "Unconfigure Service policy\n        Args:\n            device ('obj'): device to use\n                        \n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to unconfigure Service policy\n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1490"
    }
  },
  "unconfigure_service_private_config_encryption": {
    "iosxe": {
      "doc": " no service private-config-encryption\n        Args:\n            device (`obj`): Device object\n        Returns:\n            None\n        Raises:\n            SubCommandFailure : Failed configuring device\n    ",
      "module_name": "sudi.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_private_config_encryption",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/configure.py#L60"
    }
  },
  "unconfigure_service_template": {
    "iosxe": {
      "doc": "Unconfigure Service template \n        Args:\n            device ('obj'): device to use\n            template (`str`): template name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure: Failed to unconfigure Service template \n    ",
      "module_name": "dot1x.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/configure.py#L1029"
    }
  },
  "unconfigure_service_timestamps": {
    "iosxe": {
      "doc": " Unconfigure service timestamps for switch\n        Args:\n            device ('obj'): Device object\n            msg_type ('str'): timestamp message type log/debug\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_timestamps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L592"
    }
  },
  "unconfigure_service_type_mdns_service_definition": {
    "iosxe": {
      "doc": " Unconfigure mDNS(Multicast Domain Name System) service definition\n    \n        mdns-sd service-definition custom3\n        no service-type  _smb._tcp.local\n        end\n    \n        Args:\n            device ('obj'): device to use\n            name ('str')\n            service_type ('list'):\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed unconfiguring mdns service-definition\n    ",
      "module_name": "mdns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_service_type_mdns_service_definition",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mdns/configure.py#L1262"
    }
  },
  "unconfigure_sks_client": {
    "iosxe": {
      "doc": " Configures SKS client\n        Args:\n            device (`obj`): Device object\n            sks_client_config_block_name ('str'): Name of the SKS-Client config block.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "ipsec.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_sks_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/configure.py#L51"
    }
  },
  "unconfigure_snmp": {
    "iosxe": {
      "doc": " Unconfigures the snmp on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L29"
    }
  },
  "unconfigure_snmp_host_version": {
    "iosxe": {
      "doc": " UnConfigures the snmp-server host 172.21.226.240 vrf Mgmt-vrf version 2c public on device\n        Args:\n            device ('obj'): device to use\n            community_string ('str'): community_string\n            host_name ('str'): Host name\n            vrf_id ('str') : vrf(Mgmt-vrf) is special connection,usually we have it in mgmt-interface for management port.\n            version_id('str') : Snmp Version\n            udp_port('int', optional) :  udp_port should be passed when enabling traps. The value can also be checked in snmp.server.\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_host_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L408"
    }
  },
  "unconfigure_snmp_server_contact": {
    "iosxe": {
      "doc": " Unconfigures contact for snmp-server\n        Example: no snmp-server contact\n        \n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n            \n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_contact",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1294"
    }
  },
  "unconfigure_snmp_server_group": {
    "iosxe": {
      "doc": " unconfigures the snmp server group on device\n        Args:\n            device ('obj'): device to use\n            group_name ('str'): name of the group\n            version ('str'): v1,v2c,v3\n            auth_type ('str'): auth, noauth, priv\n            mode ('str'): write or read mode\n            acl_name ('str'): name of the Standerd acl, acl list name, ipv6 named acl\n            acl_type ('str'): specify IPv6 Named Access-List\n            context_name ('str'): context name\n            match_type ('str'): exact or prefix\n            notify_name ('str'): notify view name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L143"
    }
  },
  "unconfigure_snmp_server_location": {
    "iosxe": {
      "doc": " Unconfigures snmp-server location\n        Example : no snmp-server location\n\n        Args:\n            device ('obj'): device to use\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_location",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1334"
    }
  },
  "unconfigure_snmp_server_manager": {
    "iosxe": {
      "doc": "\n        Unconfigures the snmp-server manager\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_manager",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L512"
    }
  },
  "unconfigure_snmp_server_trap": {
    "iosxe": {
      "doc": " Unconfigures the snmp traps or informs on device\n        Args:\n            device ('obj'): device to use\n            intf ('str',optional): trap source interface\n            host_name ('str',optional): hostname/ip address of snmp-server\n            trap_type ('str',optional): Traps or informs\n            version ('str',optional): v1,v2c,v3\n            user_name ('str',optional): Name of the user\n            config_type ('str',optional): snmp trap type i.e config,link up down\n            engine_id ('str',optional): remote engine id\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_trap",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L232"
    }
  },
  "unconfigure_snmp_server_user": {
    "iosxe": {
      "doc": " Unconfigures the snmp user on device\n        Args:\n            device ('obj'): device to use\n            user_name ('str'): Name of the user\n            group_name ('str'): Group to which the user belongs\n            version ('str'): v1,v2c,v3\n            auth ('str'): authentication parameters for the user\n            auth_type ('str'): md5, sha\n            auth_algorithm ('str'): 256,192,128\n            auth_password ('str'): authentication password for user\n            priv_method ('str'): 3des,aes,des\n            aes_algorithm ('str'): 128,192,256\n            aes_password ('str'): privacy password for user\n            priv_password ('str'): privacy password for user\n            acl_name ('str'): name of the Standerd acl, acl list name, ipv6 named acl\n            acl_type ('str'): specify IPv6 Named Access-List\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_user",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L324"
    }
  },
  "unconfigure_snmp_server_view": {
    "iosxe": {
      "doc": " Unconfigures the snmp server view on device\n        Args:\n            device ('obj'): device to use\n            mib_view ('str'): Name of the view\n            family_name ('str'): MIB view family name\n            state ('str'): mib family excluded|included\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "snmp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_snmp_server_view",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/configure.py#L67"
    }
  },
  "unconfigure_software_auto_upgrade": {
    "iosxe": {
      "doc": " Unconfigure software auto upgrade on a device\n        Args:\n            device (`obj`): Device object\n            auto_upgrade_option (`str`): auto upgrade options\n                ex:)\n                    enable  Enable the auto upgrade installation feature\n                    source  Configure software auto upgrade source parameters\n            src_url('str',optional) : Location of the software to install during auto upgrades\n                ex:)\n                    bootflash:   Software URL\n                    flash-1:     Software URL\n                    flash-2:     Software URL\n                    flash-3:     Software URL\n                    flash:       Software URL\n                    ftp:         Software URL\n                    http:        Software URL\n                    https:       Software URL\n                    sftp:        Software URL\n                    stby-flash:  Software URL\n                    tftp:        Software URL\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_software_auto_upgrade",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2029"
    }
  },
  "unconfigure_source_template": {
    "iosxe": {
      "doc": " unconfigure source template\n    \n    Args:\n        device ('obj'): device to use\n        template_name ('str'): Select a template to configure\n        source_template ('str'): Template name to source configs\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_source_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1640"
    }
  },
  "unconfigure_span_monitor_session": {
    "iosxe": {
      "doc": " Unconfigure span monitor session\n         Args:\n             device ('obj'): Device object\n             session_number ('int'): session number\n         Returns:\n             None\n         Raises:\n             SubCommandFailure\n     ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_span_monitor_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4460"
    }
  },
  "unconfigure_spanning_tree": {
    "iosxe": {
      "doc": " \n    UnConfigures spanning-tree vlan with input vlan or vlan range\n    e.g.\n    no spanning-tree vlan 666\n    no spanning-tree vlan 1-999\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L36"
    }
  },
  "unconfigure_spanning_tree_backbonefast": {
    "iosxe": {
      "doc": " Unconfigures Spanning Tree Backbonefast\n        Args:\n            device ('obj')    : device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_backbonefast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L459"
    }
  },
  "unconfigure_spanning_tree_bpdufilter": {
    "iosxe": {
      "doc": " Disable spanning-tree bpdufilter over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): disable spanning-tree bpdufilter over this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_bpdufilter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L419"
    }
  },
  "unconfigure_spanning_tree_guard_loop": {
    "iosxe": {
      "doc": " Disable spanning-tree guard loop over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): disable spanning-tree guard loop over this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_guard_loop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L329"
    }
  },
  "unconfigure_spanning_tree_guard_root": {
    "iosxe": {
      "doc": " Disable spanning-tree guard root over interface \n        Args:\n            device ('obj'): device to use\n            interface ('str'): disable spanning-tree guard root over this interface\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_guard_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L252"
    }
  },
  "unconfigure_spanning_tree_mode": {
    "iosxe": {
      "doc": "Unconfigures spanning-tree mode\n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    Raises:\n        SubCommandFailure: Failed unconfigure_spanning_tree mode\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L132"
    }
  },
  "unconfigure_spanning_tree_mst_configuration": {
    "iosxe": {
      "doc": "\n    Unconfigure spanning-tree mst configuration\n    Args:\n        device ('obj') : Device object\n    Returns:\n        None\n    Raise:\n        SubCommandFailure: Failed to unconfigure the spanning-tree mst configuration\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_mst_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L180"
    }
  },
  "unconfigure_spanning_tree_portfast": {
    "iosxe": {
      "doc": " Unconfigures Spanning Tree Portfast\n        Args:\n            device ('obj')    : device to use\n            default ('boolean', optional) : Options are True/False. Default is False\n            bpdugaurd ('boolean',optional) : Options are True/Flase. Default is False\n            bpdufilter ('boolean', optional) : Options are True/False. Default is False\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_portfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L302"
    }
  },
  "unconfigure_spanning_tree_priority": {
    "iosxe": {
      "doc": "\n    Unconfigures spanning-tree vlan with priority\n    e.g.\n    no spanning-tree vlan 666 priority 4096\n    Args:\n        device ('obj') : Device object\n        vlan ('str'): vlan\n        priority ('int', optional): priority to be configured(Default None)\n\n    Returns:\n        None\n        \n    Raise:\n        SubCommandFailure: Failed unconfiguring spanning-tree vlan with priority\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L84"
    }
  },
  "unconfigure_spanning_tree_uplinkfast": {
    "iosxe": {
      "doc": " Unconfigures Spanning Tree Uplinkfast\n        Args:\n            device ('obj')    : device to use\n            max_rate ('int', optional) : Options are 0-32000. Default is None\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_uplinkfast",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L397"
    }
  },
  "unconfigure_spanning_tree_vlan_root": {
    "iosxe": {
      "doc": " \n    Unconfigures spanning-tree vlan root with input vlan or vlan range\n    e.g.\n    no spanning-tree vlan 666 root\n    no spanning-tree vlan 1-999 root\n    Args:\n        device ('obj') : Device object\n        vlan_range ('str'): vlan or vlan range\n    Returns:\n        None\n    ",
      "module_name": "spanning_tree.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_spanning_tree_vlan_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/configure.py#L517"
    }
  },
  "unconfigure_stack_power_mode_redundant": {
    "iosxe": {
      "doc": " Unconfigures redundant mode on stack-power stack\n        Example : no mode redundant / no mode redundant strict\n\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n            strict ('str'): Strict mode\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stack_power_mode_redundant",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1922"
    }
  },
  "unconfigure_stack_power_stack": {
    "iosxe": {
      "doc": " Unconfigures stack-power stack\n        Example : no stack-power stack test\n\n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stack_power_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1879"
    }
  },
  "unconfigure_stack_power_switch_power_priority": {
    "iosxe": {
      "doc": " unconfigure_stack power switch <sw_num> power priority low <priority_value>\n        Example : stack-power switch 1 power priority low 15\n        Args:\n            device ('obj'): device to use\n            stack_parameters ('str'): stack_parameters (stack/switch)\n            switch_number ('int'): Switch number (1-16)\n            power_priority('str'): power_priority (low/high/switch)\n            power_priority_value ('int'): priority_values <1-27>\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stack_power_switch_power_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3415"
    }
  },
  "unconfigure_stackpower_stack_switch_no_standalone": {
    "iosxe": {
      "doc": " Configures power_shared mode on stack-power stack\n        \n        Args:\n            device ('obj'): device to use\n            powerstack_name ('str'): Power stack name - Up to 31 chars\n            switch_number ('int'): Switch number (1-16)\n            stack_name ('str'): Power stack name - Up to 31 chars\n            mode('str'): no standalone\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stackpower_stack_switch_no_standalone",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L3507"
    }
  },
  "unconfigure_stackwise_virtual_dual_active_interfaces": {
    "iosxe": {
      "doc": " Disables interface as dual-active-detection interface on target device\n        Args:\n            device ('obj'): Device object\n            dad_links ('list'): List object\n                List contains following values: interface ('str'): Interface Name\n                Example:\n                    dad_links = ['HundredGigE1/0/1', 'HundredGigE1/0/2']\n        Returns:\n            output: return the chunk of lines for the config of dual-active-detection as below..\n            # interface HundredGigE1/0/1\n            # no stackwise-virtual dual-active-detection\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stackwise_virtual_dual_active_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L149"
    }
  },
  "unconfigure_stackwise_virtual_dual_active_pagp": {
    "iosxe": {
      "doc": " Disables port-channel interface as pagp dual-active-detection interface on target device\n        Args:\n            device ('obj'): Device object\n            port_channel ('str'): Port channel Value to be configured as dual-active-detection interface.\n\n        Returns:\n            output: return the chunk of lines for the unconfig of pagp as below..\n            # stackwise-virtual \n            # Please reload the switch for Stackwise Virtual configuration to take effect\n            # Upon reboot, the config will be part of running config but not part of start up config.\n            # no dual-active detection pagp trust channel-group 1  \n            # No dual-active trust configuration for port-channel 1\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stackwise_virtual_dual_active_pagp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L253"
    }
  },
  "unconfigure_stackwise_virtual_interfaces": {
    "iosxe": {
      "doc": " Disable global stackwise-virtual on target device\n        Args:\n            device ('obj'): Device object\n            timeout ('int',optional): Max time for command execution\n            svl_links ('dict'): Dict object\n                Dictionary contains following key, values:\n                    key: interface ('str'): Interface Name\n                    value: link_id ('str'): SVL link id\n                Example:\n                    svl_links = {\n                        'HundredGigE1/0/1':'1',\n                        'HundredGigE1/0/2':'1'\n                    }\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "stackwise_virtual.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_stackwise_virtual_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/configure.py#L82"
    }
  },
  "unconfigure_standard_access_list": {
    "iosxe": {
      "doc": " UnConfigure standard access-list\n        Args:\n            device ('obj'): device to use\n            acl_number ('str'): Acl number\n            permission ('str'): (permit | deny)\n            source_ip ('str'): Source ip\n            wild_mask ('str'): Wild mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: standard access-list not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_standard_access_list",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L470"
    }
  },
  "unconfigure_standard_acl": {
    "iosxe": {
      "doc": " unconfigure Access-list\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access-list name or Standard IP access-list number range <100-199> , expanded range <2000-2699>\n            sequence_number('str'): Sequence Number range <1-2147483647>\n            action ('str'): permit / deny \n            host('str'): host specific key word host\n            ip_host('str') : host ip address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "acl.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_standard_acl",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/configure.py#L1643"
    }
  },
  "unconfigure_static_ip_pim_rp_address": {
    "iosxe": {
      "doc": "Unconfigures a static IP address of a rendezvous point for a multicast group range.\n\n    Args:\n        device (`obj`): Device object\n        vrf (`str`): VRF name\n        ip_address (`str`): IP address of the group-range\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_ip_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L402"
    }
  },
  "unconfigure_static_ipv6_pim_rp_address": {
    "iosxe": {
      "doc": "Unconfigures a static IPv6 address of a rendezvous point for a multicast group range.\n\n    Args:\n        device (`obj`): Device object\n        vrf (`str`): VRF name\n        ip_address (`str`): IPv6 address of rp\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed unconfiguring rp address\n    ",
      "module_name": "multicast.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_ipv6_pim_rp_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/configure.py#L426"
    }
  },
  "unconfigure_static_nat_network_rule": {
    "iosxe": {
      "doc": " UnConfigure static NAT network rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): inside local ip\n            inside_global_ip ('str'): inside global ip\n            mask('str'):network mask\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT network rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_nat_network_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L604"
    }
  },
  "unconfigure_static_nat_outside_rule": {
    "iosxe": {
      "doc": " UnConfigure static NAT outside rule \n        Args:\n            device ('obj'): device to use\n            outside_global_address ('str'): outside global address\n            outside_local_address ('str'): outside local address\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT outside rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_nat_outside_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L720"
    }
  },
  "unconfigure_static_nat_route_map_rule": {
    "iosxe": {
      "doc": " UnConfigure static NAT route-map rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): Inside local ip\n            inside_global_ip ('str'): Inside global ip\n            route_map_name ('str') : Name of route-map\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT route-map rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_nat_route_map_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L207"
    }
  },
  "unconfigure_static_nat_rule": {
    "iosxe": {
      "doc": " UnConfigure static NAT rule\n        Args:\n            device ('obj'): device to use\n            inside_local_ip ('str'): inside local ip\n            inside_global_ip ('str'): inside global ip\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: static NAT rule not unconfigured\n    ",
      "module_name": "nat.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_static_nat_rule",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/nat/configure.py#L662"
    }
  },
  "unconfigure_subinterface": {
    "iosxe": {
      "doc": " UnConfigure subinterface \n        Args:\n            device ('obj'): device to use\n            physical_port ('str'): physical port\n            any_number ('str'): any number \n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_subinterface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5685"
    }
  },
  "unconfigure_svi": {
    "iosxe": {
      "doc": " Vlan SVI configuration removal\n        Args:\n            device (`obj`): Device object\n            vlan ('list'): Vlan value\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_svi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3167"
    }
  },
  "unconfigure_switch_provision": {
    "iosxe": {
      "doc": " Unconfigure switch provision for switch\n        Args:\n            device ('obj'): Device object\n            switch_number('int'): switch number\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_switch_provision",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L515"
    }
  },
  "unconfigure_switchport_nonegotiate": {
    "iosxe": {
      "doc": " Unconfig switchport nonegotiate on interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_switchport_nonegotiate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L3870"
    }
  },
  "unconfigure_system_disable_password_recovery_switch_all": {
    "iosxe": {
      "doc": " Enables password recovery on the switch\n        Example: no system disable password recovery switch all\n        \n        Args:\n            device('obj'): device to configure on\n\n        Return:\n            N/A\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_system_disable_password_recovery_switch_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1252"
    }
  },
  "unconfigure_system_ignore_startupconfig_switch_all": {
    "iosxe": {
      "doc": " Unconfigures the system ignore startup configuration on the switch\n        Example: no system ignore startupconfig switch all\n        \n        Args:\n            device('obj'): device to configure on\n\n        Return:\n            N/A\n\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_system_ignore_startupconfig_switch_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1162"
    }
  },
  "unconfigure_table_map": {
    "iosxe": {
      "doc": " Unconfigures policy-map\n        Args:\n             device ('obj'): device to use\n             table_map_name ('str'): name of the table\n\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "table_map.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_table_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/table_map/configure.py#L54"
    }
  },
  "unconfigure_tacacs_group": {
    "iosxe": {
      "doc": "  Unconfigure aaa tacacs server group\n        Args:\n            device ('obj'): Device object\n            server_group('str'): Name for the tacacs group \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tacacs_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2251"
    }
  },
  "unconfigure_tacacs_server": {
    "iosxe": {
      "doc": " unconfigure tacacs server\n        Args:\n            device ('obj'): Device object\n            server('str'): Name for the tacacs server \n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed configuring tacacs server \n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tacacs_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L2232"
    }
  },
  "unconfigure_template": {
    "iosxe": {
      "doc": " \n    UnConfigures specified Template \n    Args:\n        device ('obj') : Device object\n        template_name ('str'): Template name\n    Returns:\n        None\n    ",
      "module_name": "configuration_template.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/configuration_template/configure.py#L54"
    }
  },
  "unconfigure_template_type_vpls": {
    "iosxe": {
      "doc": " unconfigure template type\n        Args:\n            device (`obj`): Device object\n            template_type ('str'): template type for the template\n            template_name('str'): name of the template\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_template_type_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L1621"
    }
  },
  "unconfigure_tftp_source_interface": {
    "iosxe": {
      "doc": " Unconfigure tftp source interface on device\n\n        Args:\n            device ('obj'): Device obj\n            interface ('str'): interface name to configure\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "routing.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tftp_source_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/configure.py#L774"
    }
  },
  "unconfigure_trustpoint": {
    "iosxe": {
      "doc": "\n    unconfiguring crypto pki trustpoint\n    Args:\n        device ('obj'): Device object\n        tp_name ('str'): Name of the trsutpoint\n    Returns:\n        None\n    Raises:\n        SubCommandFailure\n    ",
      "module_name": "pki.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_trustpoint",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pki/configure.py#L516"
    }
  },
  "unconfigure_trustpoint_switch": {
    "iosxe": {
      "eaptls": {
        "doc": " Unconfigures Trustpoint related config on device\n        Args:\n            device ('obj'): device to use\n            label_name ('str'): Label name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
        "module_name": "configure",
        "package": "genie.libs.sdk.apis",
        "uid": "unconfigure_trustpoint_switch",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/eaptls/configure.py#L271"
      }
    }
  },
  "unconfigure_tunnel_auto_route": {
    "iosxe": {
      "doc": "unconfigure autoroute announce in tunnel.\n        Args: \n\t    device (`obj`): Device object\n\t    tunnel_name (`str`): Tunnel Name\n            autoroute_type (`str`): autoroute type used for tunnel\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "mpls.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tunnel_auto_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/configure.py#L931"
    }
  },
  "unconfigure_tunnel_interface": {
    "iosxe": {
      "doc": " Unconfigure tunnel interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to get address\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_tunnel_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2874"
    }
  },
  "unconfigure_udld": {
    "iosxe": {
      "doc": " UnConfigures UDLD enable on device\n        Args:\n            device ('obj'): Device object\n            option ('str'): possible optins are aggressive, enable, recovery, \n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_udld",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L164"
    }
  },
  "unconfigure_udld_aggressive": {
    "iosxe": {
      "doc": " Unconfigures udld aggressive\n        Example : no udld aggressive\n\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_udld_aggressive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L2376"
    }
  },
  "unconfigure_udld_enable": {
    "iosxe": {
      "doc": " UnConfigures UDLD enable on device\n        Args:\n            device ('obj'): Device object\n        Return:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_udld_enable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L147"
    }
  },
  "unconfigure_udld_message_time": {
    "iosxe": {
      "doc": " Unconfigures UDLD Message Time on Target Device globally\n        Args:\n            device ('obj')  : device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "udld.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_udld_message_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/udld/configure.py#L113"
    }
  },
  "unconfigure_umbrella_global_parameter_map": {
    "iosxe": {
      "doc": " Disable Umbrella  parameter-map Globally\n        Args:\n            device ('obj'): device to use\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella parameter-map un-configuration\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_global_parameter_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L125"
    }
  },
  "unconfigure_umbrella_in_out": {
    "iosxe": {
      "doc": " Unconfigure Umbrella IN and OUT over interface \n        Args:\n            device ('obj'):uut [device to use]\n            in_interface ('str'): Disable Umbrella in over this interface, default value is None\n            in_tag ('str'): configure device tag with umbrella in, default value is None\n            out_interface ('str'): Disable Umbrella out over this interface, default value is None\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: Umbrella IN OUT not Disable  over interface\n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_in_out",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L43"
    }
  },
  "unconfigure_umbrella_local_bypass": {
    "iosxe": {
      "doc": " Un-Cofigure local domain bypass regex\n        Args:\n            device ('obj'): device to use\n            local_bypass_name ('str'): Name of local domain bypass\n        Returns:\n            console output\n        Raises:\n            SubCommandFailure: unconifgure Local domain bypass \n    ",
      "module_name": "umbrella_odns.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_umbrella_local_bypass",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/umbrella_odns/configure.py#L172"
    }
  },
  "unconfigure_username": {
    "iosxe": {
      "doc": " Configure a user with a password\n        Args:\n            device (`obj`): Device object\n            username (`str`): User name\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring\n        Examples:\n            dut1.api.unconfigure_username(username='testUser')\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_username",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L739"
    }
  },
  "unconfigure_vfi": {
    "iosxe": {
      "doc": " Vlan VFI configuration\n        Args:\n            device (`obj`): Device object\n            vlan ('int'): VLAN id for VFI\n            vpls ('str'): vpls name to be configured\n        Returns:\n            None\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vfi",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4413"
    }
  },
  "unconfigure_virtual_service": {
    "iosxe": {
      "doc": " Unconfigures virtual-service name\n        Example : no virtual-service UTD\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): Virtual service name (up to 63 characters)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_virtual_service",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1531"
    }
  },
  "unconfigure_virtual_service_activate": {
    "iosxe": {
      "doc": " Deactivates virtual-service\n        Example : virtual-service UTD\n                  no activate\n\n        Args:\n            device ('obj'): device to use\n            name ('str'): Virtual service name (up to 63 characters)\n\n        Returns:\n            None\n\n        Raises: \n            SubCommandFailure\n    ",
      "module_name": "platform.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_virtual_service_activate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/configure.py#L1552"
    }
  },
  "unconfigure_virtual_template": {
    "iosxe": {
      "doc": " Configure virtual-template interface\n\n        Args:\n            device (`obj`): Device object\n            virtual_template_number ('int') : virtual template number\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_virtual_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L4046"
    }
  },
  "unconfigure_vlan_configuration": {
    "iosxe": {
      "doc": " Unconfigure vlan configuration\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L379"
    }
  },
  "unconfigure_vlan_interface": {
    "iosxe": {
      "doc": " Unconfigure vlan from device\n\n        Args:\n            device (`obj`): Device object\n            vlan (`str`): vlan to be unconfigured\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L2635"
    }
  },
  "unconfigure_vlan_state_active": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n            vlan ('str'): vlan 100 \n\t\t    state ('str') : in which state\n        Returns:\n            interface members\n        Raises:\n            Nonel\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_state_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L839"
    }
  },
  "unconfigure_vlan_state_suspend": {
    "iosxe": {
      "doc": " Get interface members\n        Args:\n            device ('obj'): Device object\n            interface ('str'): interface to search member for\n            vlan ('str'): vlan 100 \n\t\t    state ('str') : in which state\n        Returns:\n            interface members\n        Raises:\n            Nonel\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_state_suspend",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L791"
    }
  },
  "unconfigure_vlan_vpls": {
    "iosxe": {
      "doc": " Unconfig vpls on vlan\n        Args:\n            device (`obj`): Device object\n            vlanid (`str`): Vlan id\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vlan_vpls",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L397"
    }
  },
  "unconfigure_vpdn_group": {
    "iosxe": {
      "doc": " Unconfigure VPDN\n\n        Args:\n            device ('obj'): Device object\n            vpdn_group_number ('int') : VPDN group number\n            \n        Returns:\n            None\n        Raise:\n            SubCommandFailure\n    ",
      "module_name": "vpdn.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vpdn_group",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpdn/configure.py#L87"
    }
  },
  "unconfigure_vrf": {
    "iosxe": {
      "doc": "Remove ospf on device\n\n        Args:\n            device (`obj`): Device object\n            vrf (`int`): vrf id\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L84"
    }
  },
  "unconfigure_vrf_definition_on_device": {
    "iosxe": {
      "doc": " unconfig vrf definition on device\n\n        Args:\n            device (`obj`): Device object\n            vrf_name ('str'): name of the vrf\n        Return:\n            None\n        Raise:\n            SubCommandFailure: Failed configuring interface\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_definition_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L130"
    }
  },
  "unconfigure_vrf_definition_stitching": {
    "iosxe": {
      "doc": "\n    Unconfigure stitching part for ipv4 and ipv6 address-family under vrf definition\n\n    Args:\n        device('obj'): Device object\n        vrf_name('str'): Name of the vrf definition\n        ip_version('str'): address-family to unconfigure ipv4 and ipv6 address-family.\n        stitching_value: Route-target Stitching value, excample 1:1\n    Returns:\n        None\n\n    Raises:\n        SubCommandFailure\n\n    Example of unconfigure stitching under vrf definition for ipv4 address family and ipv6 address family\n\n        vrf definition red\n          !\n          address-family ipv4\n          no route-target export 1:1 stitching\n          no route-target import 1:1 stitching\n          exit-address-family\n          !\n          address-family ipv6\n          no route-target export 1:1 stitching\n          no route-target import 1:1 stitching\n          exit-address-family\n\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_definition_stitching",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L573"
    }
  },
  "unconfigure_vrf_description": {
    "iosxe": {
      "doc": "Unconfigure vrf description\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L107"
    }
  },
  "unconfigure_vrf_forwarding_interface": {
    "iosxe": {
      "doc": " Remove vrf forwarding on interface\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface name\n            vrf_name ('str'): vrf name\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure ip vrf forwarding\n    ",
      "module_name": "vrf.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_forwarding_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/configure.py#L840"
    }
  },
  "unconfigure_vrf_select_source": {
    "iosxe": {
      "doc": " Unconfigure VRF select source on an interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface to configure\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrf_select_source",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L5284"
    }
  },
  "unconfigure_vrrp_interface": {
    "iosxe": {
      "doc": " unconfigures vlan interface standby group IP\n        make sure this command is already enabled in device fhrp version vrrp v3\n        \n    Args:\n        device ('obj'): Device object\n        interface ('str'): Vlan <vlan Id> (Range 1-4093) / physical interface  \n        group_number('int'): group number (Range 1-255)\n        address_family ('str'): address family ipv4 or ipv6 to use\n    Return:\n        None\n    Raises:\n            SubCommandFailure: Failed to unconfigure vrrp interface\n    ",
      "module_name": "hsrp.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vrrp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hsrp/configure.py#L235"
    }
  },
  "unconfigure_vtp_password": {
    "iosxe": {
      "doc": "unconfigure vtp password on the device\n    \n        Args:\n            device ('obj'): device to use\n            vtp_password('str'): vtp password\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure VTP password\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vtp_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L879"
    }
  },
  "unconfigure_vtp_version": {
    "iosxe": {
      "doc": "Unconfigure vtp version on the device\n        Args:\n            device ('obj'): device to use\n        Returns:\n            None\n        Raises:\n            SubCommandFailure: Failed to unconfigure VTP version\n    ",
      "module_name": "vlan.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_vtp_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vlan/configure.py#L574"
    }
  },
  "unconfigure_wired_radius_attribute": {
    "iosxe": {
      "doc": " To unconfigure radius attribute\n    Args:\n        device (`obj`): Device object\n        attr_num ('int'): Attribute number to be configured\n        attr_profile ('str'): Attribute profile to be configured\n\n    Return:\n        None\n\n    Raise:\n        SubCommandFailure: Failed unconfiguring radius attribute\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_wired_radius_attribute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L1142"
    }
  },
  "unconfigure_wired_radius_attribute_44": {
    "iosxe": {
      "doc": " To unconfigure radius attribute 44 for wired\n    Args:\n        device (`obj`): Device object\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unconfigure_wired_radius_attribute_44",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/configure.py#L633"
    }
  },
  "unit_convert": {
    "com": {
      "doc": " Get value with given corresponding unit.\n        If not unit is given, value will be converted to value without unit\n\n        Args:\n            value (`str`): value with unit like `10M`\n            unit (`str`): unit type like `K`, `M`, `G`\n\n        Returns:\n            new_value (`float`): value after converting to given unit\n\n        Examples:\n            >>> dev.api.unit_convert('123K', 'M')\n            0.123\n\n            >>> dev.api.unit_convert('100M', 'K')\n            100000.0\n\n            >>> dev.api.unit_convert('100M')\n            100000000.0\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "unit_convert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L641"
    }
  },
  "unshut_interface": {
    "iosxe": {
      "doc": " Unshut interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L176"
    },
    "junos": {
      "doc": " Unshut interface on device\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/configure.py#L76"
    }
  },
  "unshut_interface_adjacent_interfaces": {
    "iosxe": {
      "doc": " Unshut adjacent interfaces\n\n        Args:\n            device ('obj'): Device object\n            link_name ('str'): Interface alias in topology\n            num ('int'): Number of interfaces to return\n            adjacent_interfaces ('list'): List of EthernetInterface objects\n            steps ('obj'): Context manager object\n\n        Returns:\n            None\n\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "interface.configure",
      "package": "genie.libs.sdk.apis",
      "uid": "unshut_interface_adjacent_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/configure.py#L302"
    }
  },
  "verify_Parser_Encrypt_decrypt_File_Status": {
    "iosxe": {
      "doc": " Verify parser encryption decryption status in show parser encrypt file status\n        Args:\n            device ('obj'): Device object\n            status ('list'): Expected output # [\"Cipher text\",True,\"ver1\"]\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_Parser_Encrypt_decrypt_File_Status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L191"
    }
  },
  "verify_Software_Fed_Active_Ipv6_Mld_Snooping_Vlan": {
    "iosxe": {
      "doc": "\n    Api method to call parser and return boolean True If Vlan Port Matched\n    Args:\n            device ('obj'): Device object\n            state (string) : Device State (Such as : active, switch active, switch {1})\n            vlan (string) : Device Vlan Port (Example : 10)\n            key (string) : Key depicts the key of the dict as output got from parser to varify it value\n            value (string) : Value suppose to be the data inside the key which api will verify by compare this value and actual value inside output\n    Returns:\n            Boolean: Validation of Vlan Port True or False\n    ",
      "module_name": "SoftwareFedActiveIpv6MldSnoopingVlan.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_Software_Fed_Active_Ipv6_Mld_Snooping_Vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/SoftwareFedActiveIpv6MldSnoopingVlan/verify.py#L10"
    }
  },
  "verify_Software_Fed_Igmp_Snooping": {
    "iosxe": {
      "doc": "\n    Api method to call parser and return boolean True If Vlan Port Matched\n    Args:\n            device ('obj'): Device object\n            state (string) : Device State (Such as : active, switch active, switch {1})\n            vlan (string) : Device Vlan Port (Example:10)\n            key (string) : Key depicts the key of the dict as output got from parser to varify it value\n            value (string) : Value suppose to be the data inside the key which api will verify by compare this value and actual value inside output\n    Returns:\n            Boolean: Validation of Vlan Port True or False\n    ",
      "module_name": "FedIgmpSnooping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_Software_Fed_Igmp_Snooping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/FedIgmpSnooping/verify.py#L9"
    }
  },
  "verify_Software_Fed_Ipv6_Mld_Snooping_Groups": {
    "iosxe": {
      "doc": "\n    Api method to call parser and return boolean True If Vlan Port Matched\n    Args:\n            device ('obj'): Device object\n            state (string) : Device State (Such as : active, switch active, switch {1})\n            vlan (string) : Device Vlan Port (Example : 20 ff1e::20)\n            key (string) : Key depicts the key of the dict as output got from parser to varify it value\n            value (string) : Value suppose to be the data inside the key which api will verify by compare this value and actual value inside output\n    Returns:\n            Boolean: Validation of Vlan Port True or False\n    ",
      "module_name": "SoftwareFedIpv6MldSnoopingGroups.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_Software_Fed_Ipv6_Mld_Snooping_Groups",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/SoftwareFedIpv6MldSnoopingGroups/verify.py#L10"
    }
  },
  "verify_aci_registered_nodes_in_state": {
    "apic": {
      "doc": " Verifies that a provided list of Node IDs are in the provided state.\n\n    Args:\n        device (obj): Device to execute on\n        node_ids (list): List of node IDs to verify\n        state (str): State of nodes to match\n        max_time (int, optional): Max time to verify. Defaults to 90.\n        check_interval (int, optional): How often to recheck. Defaults to 15.\n\n    Returns:\n        (bool): True if all nodes provided are in the correct state\n                False if some nodes provided are in the wrong state\n\n    Raises:\n        N/A\n    ",
      "module_name": "acidiag.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_aci_registered_nodes_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/acidiag/verify.py#L10"
    }
  },
  "verify_acl_applied": {
    "iosxe": {
      "doc": " Verify if access list is correctly applied\n        Args:\n            device ('obj'): Device object\n            acl_name ('str'): Access list name\n            applied_config ('str'): Output from acl.configure.config_extended_acl\n        Raises:\n            None\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_applied",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L14"
    }
  },
  "verify_acl_info_summary": {
    "iosxe": {
      "doc": " Verify acl info summary\n        Args:\n            device (`obj`): Device object\n            acl_name (`str`): Name of ACL\n            expected_protocol ('str'): Expected protocol IPv4|IPv6\n            expected_no_of_aces ('int'): Expected number of aces\n            expected_direction_ingress ('str'): Expected direction Ingress Y or N\n            expected_direction_egress ('str'): Expected direction Egress Y or N\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True : returns true in case of passed scenario\n            False : returns false if not expected output\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_info_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L99"
    }
  },
  "verify_acl_log": {
    "iosxe": {
      "doc": " Verify acl log messages when log option is enabled\n\n        Args:\n            device (`obj`): Device object\n            acl_name (`str`): ACL name\n            rule ('str'): permitted|denied\n            protocol ('str'): protocol to be matched\n        Returns:\n            True : returns true in case of passed scenario\n            False : returns false if not expected output\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L77"
    }
  },
  "verify_acl_usage": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            expected_acl_type (`str`): type of ACL\n            acl_id (`str`): Name of ACL\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_acl_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L39"
    }
  },
  "verify_active_standby": {
    "iosxe": {
      "doc": "\n    Verify active and standby dut\n    Args:\n        device ('obj'): Device object\n    Returns:\n        True if device is active\n        False if device is standby\n    Raises:\n        Raises exception\n    ",
      "module_name": "install.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_active_standby",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/verify.py#L66"
    }
  },
  "verify_all_ospf3_neighbor_states": {
    "junos": {
      "doc": " Verifies state of ospf3 neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF3 adjacency state that is expected\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_all_ospf3_neighbor_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1113"
    }
  },
  "verify_all_ospf_neighbor_states": {
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_all_ospf_neighbor_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1427"
    }
  },
  "verify_ap_associate": {
    "linux": {
      "doc": null,
      "module_name": "wsim.execute",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ap_associate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/linux/wsim/execute.py#L143"
    }
  },
  "verify_app_requested_state": {
    "iosxe": {
      "doc": " \n    verify_app_requested_state\n    Check show app-hosting list and confirm the requested state of the passed in list of appids\n    Args:\n        device ('obj') : Device object\n        app_list ('list') : list of appids\n        requested_state ('str') : requested state of appid\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None    \n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_app_requested_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L12"
    }
  },
  "verify_arp_interface_exists": {
    "junos": {
      "doc": "Verify interface exists in arp table\n\n    Args:\n        device (obj): Device object\n        expected_interface (str): Interface to check for\n        invert (bool, optional): Inverts to ensure interface doesn't exist. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_interface_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/arp/verify.py#L15"
    }
  },
  "verify_arp_packets": {
    "iosxe": {
      "doc": " Verify arp packets sent interval\n\n        Args:\n            pkts (`obj`): Pcap object\n            timeout (`str`): ARP timeout interval\n            tolerance (`int`): Delay tolerance\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L55"
    }
  },
  "verify_arp_vrf_interface_mac_entry": {
    "iosxe": {
      "doc": " Verify that interface and mac (optional) passed in are the \n        outgoing interface and mac for host in ARP table \n        'show arp vrf {vrf} {ip}' / 'show arp {ip}'\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): Ip address\n            expected_interface ('str'): interface\n            vrf ('str', optional): vrf interface, default None\n            expected_mac ('str', optional): mac address, default None\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_arp_vrf_interface_mac_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L109"
    }
  },
  "verify_assignment_mode": {
    "iosxe": {
      "c9800": {
        "doc": "Verify the given assignment mode \n    Args:\n        device (obj): Device object\n        assignment_mode (str): configured assignment mode \n        max_time (int, optional): Maximum time in seconds. Defaults to 60\n        check_interval (int, optional): check interval in seconds. Defaults to 10\n\n    Returns:\n        True - if the expected assignment mode is configured\n        False - if the expected assignment mode is NOT configured\n\n    Raises:\n        N/A\n\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_assignment_mode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/verify.py#L113"
      }
    }
  },
  "verify_best_path_is_towards_to_interface": {
    "junos": {
      "doc": "Verify best path towards to given interface\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): Route name. Default to None.\n            protocol ('str'): Protocol name. Default to None.\n            expected_ip_address ('str'): Expected IP address. Default to None.\n            expected_target_route ('str'): Expected target route. Default to None.\n            expected_via ('str'): Expected via interface. Default to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_best_path_is_towards_to_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2468"
    }
  },
  "verify_bfd_configuration": {
    "iosxe": {
      "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): interface bfd is configured on\n            interval ('str'): interval to verify\n            state ('str'): state to verify\n            protocols ('list'): protocols to verify\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L14"
    }
  },
  "verify_bfd_ipv6_session_destination_details_client": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_ipv6_session_destination_details_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L137"
    }
  },
  "verify_bfd_ipv6_session_destination_details_session_state": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_ipv6_session_destination_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L96"
    }
  },
  "verify_bfd_neighbors_details": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L166"
    }
  },
  "verify_bfd_neighbors_details_no_output": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details has not output\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L234"
    }
  },
  "verify_bfd_neighbors_details_registered_protocols": {
    "iosxe": {
      "doc": " Verifies bfd configuration is applied with correct interval and protocol\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_registered_protocols ('list'): protocols to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_registered_protocols",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L124"
    }
  },
  "verify_bfd_neighbors_details_session_state": {
    "iosxe": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_neighbors_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bfd/verify.py#L82"
    }
  },
  "verify_bfd_session": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        session_address (str): Session address\n        expected_session_state (str): Expected session state\n        expected_session_multiplier (str): Expected session multiplier\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        expected_interface (str, optional): Expected interface to check\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L14"
    }
  },
  "verify_bfd_session_count": {
    "junos": {
      "doc": " Verify BFD session count\n    Args:\n        device (`obj`): Device object\n        address (`str`): Session address\n        expected_session_count (`int`): number of expected session count\n        expected_client_count (`int`, optional): number of expected client count\n                                                 Default to None\n        max_time (`int`, optional): Maximum timeout time. Defaults to 60.\n        check_interval (`int`, optional): Check interval. Defaults to 10.\n    Returns:  \n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L178"
    }
  },
  "verify_bfd_session_destination": {
    "iosxr": {
      "doc": " Verifies bfd session destination details\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            ipv6 ('bool'): Run ipv6 show command. Default to false.\n            expected_session_state ('str'): Session state to verify\n            expected_det_time ('str'): Expect det time value.\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L178"
    }
  },
  "verify_bfd_session_destination_detail": {
    "iosxr": {
      "doc": " Verifies bfd session destination detail\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            expected_received_parameters_state ('str'): Received parameter state to verify\n            ipv6 ('bool'): Run ipv6 show command. Default to false\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L237"
    }
  },
  "verify_bfd_session_destination_detail_no_output": {
    "iosxr": {
      "doc": " Verifies bfd session destination has no output\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            ipv6 ('bool'): Run ipv6 show command. Default to false\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_detail_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L300"
    }
  },
  "verify_bfd_session_destination_details_client": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address ('str'): IP address for command\n            expected_client ('str'): Client to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_details_client",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L55"
    }
  },
  "verify_bfd_session_destination_details_session_state": {
    "iosxr": {
      "doc": " Verifies bfd neighbors details session state\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): Address family value\n            address ('str'): IP address for command\n            expected_session_state ('str'): Session state to verify\n            max_time ('int'): Max time to retry. Default to 60\n            check_interval ('int'): Number of check in interval. Default to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_destination_details_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bfd/verify.py#L13"
    }
  },
  "verify_bfd_session_detail": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        session_address (str): Session address\n        expected_session_state (str): Expected session state\n        expected_client ('str'): Expected client\n        expected_session_multiplier ('str'): Expected session multiplier\n        expected_tx_interval ('str'): Expected tx interval\n        expected_rx_interval ('str'): Expected rx interval\n        expected_session_detect_time ('str'): Expected session detect time\n        expected_remote_state ('str'): Expected remote session state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "bfd.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bfd_session_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bfd/verify.py#L63"
    }
  },
  "verify_bgp_active_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp active holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected active holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_active_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L330"
    }
  },
  "verify_bgp_address_received": {
    "iosxe": {
      "doc": " Verifies that address is recieved from neighbor\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address ('str'): address to verify\n\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_address_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1542"
    }
  },
  "verify_bgp_all_neighbor_status": {
    "junos": {
      "doc": "\n    Verify all bgp peer states\n\n    Args:\n        device('obj'): device to use\n        expected_state('str') : Expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_all_neighbor_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L494"
    }
  },
  "verify_bgp_all_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp all peer state\n\n    Args:\n        device('obj'): device to use\n        expected_state('str') : Expected peer state\n                                Default to `Establ`\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_all_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L1091"
    }
  },
  "verify_bgp_as_in_as_path": {
    "iosxe": {
      "doc": " Verify if a route has an AS number in its AS path\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route to be verified\n            bgp_as ('str'): AS number to be verified in route AS path\n            vrf ('str'): VRF name\n            address_family ('str'): Address family\n            output ('str'): Parsed output of one of the following commands:\n                * 'show ip bgp {address_family} vrf {vrf}'\n                * 'show ip bgp {address_family}'\n                * 'show ip bgp'\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_as_in_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L994"
    }
  },
  "verify_bgp_as_path_prepend": {
    "iosxe": {
      "doc": " Verify if AS value is added at the beginning of the AS path on route\n        Args:\n            route_dict ('obj')      : Dict containing all routes on device\n            as_path_prepend ('int') : AS number to be checked on route\n            as_path ('int')         : AS path on route            \n            route ('str')           : Route beeing checked\n            steps ('obj')           : Context manager step\n        Returns:\n            None\n        \n        Raises:\n            pyATS Results\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_as_path_prepend",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L371"
    }
  },
  "verify_bgp_config_operational_state_neighbors": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n            'show ip bgp {address_family} vrf {vrf} neighbors'\n            'show ip bgp {address_family} all neighbors'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_neighbors ('dict'): Parsed output from: \n                'show ip bgp {address_family} vrf {vrf} neighbors'\n                'show ip bgp {address_family} all neighbors'\n            vrf ('str'): VRF name to be verified\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_config_operational_state_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1116"
    }
  },
  "verify_bgp_config_operational_state_summary": {
    "iosxe": {
      "doc": " Verify that bgp running config matches operational state from:\n\n            'show ip bgp {address_family} vrf {vrf} summary'\n            'show ip bgp {address_family} all summary'\n        Args:\n            device ('obj'): Device object\n            bgp_config ('dict'): Parsed output from libs.bgp.get.get_bgp_running_config\n                 Example {'VRF1': \n                            {'neighbors': {\n                                '192.168.0.1': {\n                                    'remote_as': 65555}}}}\n\n            bgp_summary ('dict'): Parsed output from:\n                'show ip bgp {address_family} vrf {vrf} summary'\n                'show ip bgp {address_family} all summary'\n            vrf ('str'): VRF name\n            address_family_config ('str'): Address family to be searched under in show running-config | section router bgp\n            steps ('obj'): Context manager object\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_config_operational_state_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1240"
    }
  },
  "verify_bgp_configuration_and_operation_state": {
    "iosxe": {
      "doc": " Verify bgp configuration is matched with operational state\n        - \"ipv4 vrf xxxx\" and \"vpnv4\" in running config are in \n          \"VPNv4 Unicast\" address family in bgp all summary\n        - \"l2vpn vpls\" in running config are in \n          \"L2VPN Vpls\" address family in bgp all summary\n        - BGP AS number is same as configured\n        - All configured neighbors exist and the status can be checked\n\n        Args:\n            device ('obj'): Device object\n            sr_dict(`dict`): Parsed output from libs.bgp.get.get_show_run_bgp_dict\n            sm_dict(`dict`): Parsed output of command 'show ip bgp all summary'\n        Returns:\n            result(`bool`): verified result\n            info(`str`): compared information\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_configuration_and_operation_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L47"
    }
  },
  "verify_bgp_each_path": {
    "iosxe": {
      "doc": " Verify each endpoint is same 'show ip bgp vrf {vrf} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            vrf ('str'): VRF name\n            route ('str'): Route to check\n            expected_endpoint_ip ('str', None): Expected endpoint ip\n            expected_metric ('str'): Expected metric ip\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_each_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1717"
    }
  },
  "verify_bgp_error_message": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_message('str'): Expected message\n        expected_error_message('str') : Expected error message\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_error_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L202"
    }
  },
  "verify_bgp_evi_mac_ipprefix": {
    "iosxe": {
      "doc": " Verify bgp evi ip prefix related to particular rd and mac in \n        'show ip bgp {address-family} evi {evi} detail'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            evi ('str'): evi instance\n            expected_rd ('str'): expected rd \n            expected_mac ('str'): Expected mac\n            expected_ipprx ('str'): Expected ip prefix\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_evi_mac_ipprefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2348"
    }
  },
  "verify_bgp_evi_orig_route": {
    "iosxe": {
      "doc": " Verify bgp evi originated route related to particular rd in 'show ip\n        bgp {address_family} evi {evi} detail'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            evi ('str'):Ethernet tag in decimal <0-4294967295>\n            rd ('str'): Route distinguisher\n            expected_orig_route ('str'): Expected originated route\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_evi_orig_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2303"
    }
  },
  "verify_bgp_evi_rt2_mac_localhost": {
    "iosxe": {
      "doc": " Verify bgp local host in for route type 2 mac in 'show ip bgp \n         {address_family} evi route-type 2 0 {mac} *'\n \n         Args:\n             device ('obj'): device to use\n             address_family ('str'): address family\n             evi ('str'): evi instance\n             mac('str'): Mac address\n             expected_host('str'): Expected local host\n             max_time ('int', optional): maximum time to wait in seconds,\n                 default is 30\n             check_interval ('int', optional): how often to check in seconds,\n                 default is 10\n         Returns:\n             result ('bool'): verified result\n         Raises:\n             None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_evi_rt2_mac_localhost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2171"
    }
  },
  "verify_bgp_holdtime": {
    "junos": {
      "doc": "\n    Verify bgp holdtimer with peer {interface}\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_holdtime('str'): Expected holdtime\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L275"
    }
  },
  "verify_bgp_l2vpn_evpn_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify BGP l2vpn evpn neighbor state\n\n        Args:\n            device (`obj`): Device object\n            neighbor (`str`): Neighbor IP\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L12"
    }
  },
  "verify_bgp_l2vpn_evpn_rt2_ipprefix": {
    "iosxe": {
      "doc": " Verify bgp l2vpn evpn rt2 ip prefix related to particular rd  in \n        'show ip bgp l2vpn evpn all'\n\n        Args:\n            device ('obj'): device to use\n            expected_ipprefix ('list'): expected ip prefix\n            expected_rd ('str'): expected rd \n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_rt2_ipprefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2394"
    }
  },
  "verify_bgp_l2vpn_evpn_rt2_nxthop": {
    "iosxe": {
      "doc": " Verify bgp l2vpn evpn rt2 ip nexthop related to particular rd  and \n        related to particular source ip (if given)in 'show ip bgp l2vpn evpn all'\n\n        Args:\n            device ('obj'): device to use            \n            expected_rd ('str'): expected rd \n            expected_nexthop ('str'): expected next hop\n            expected_prefix ('str'): expected source ip\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n        Example:\n            *>   [2][3.3.3.3:1][0][48][A03D6EC594E4][128][FE80::A23D:6EFF:FEC5:94E4]/36\n                      3.3.3.3                                0 1000 1003 ?\n            where rd - 3.3.3.3:1, prefix- FE80::A23D:6EFF:FEC5:94E4, nexthop - 3.3.3.3\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_rt2_nxthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2696"
    }
  },
  "verify_bgp_l2vpn_evpn_rt5_ipprefix": {
    "iosxe": {
      "doc": " Verify bgp l2vpn evpn rt5 ip prefix related to particular rd  in \n        'show ip bgp l2vpn evpn all'\n\n        Args:\n            device ('obj'): device to use\n            expected_ipprefix ('str'): expected ip prefix\n            expected_rd ('str'): expected rd optional\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n            Internally have a dictionary that have 'rd' as keys and 'ip prefixes' as values\n            example:\n                {\n                '1.1.1.1': ['*', '2000::22', '2000::21', '20.20.20.21', '2000::14F7:9FF:FE42:9AF5'], \n                '2.2.2.2': ['20.20.20.21', '20.20.20.1', '2000::1', '*', '2000::14F7:9FF:FE42:9AF5']\n                }\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_rt5_ipprefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2474"
    }
  },
  "verify_bgp_l2vpn_evpn_rt5_nxthop": {
    "iosxe": {
      "doc": " Verify bgp l2vpn evpn rt5 ip nexthop related to particular rd  and \n        related to particular source ip(if given) in 'show ip bgp l2vpn evpn all'\n\n        Args:\n            device ('obj'): device to use            \n            expected_rd ('str'): expected rd \n            expected_nexthop ('str'): expected next hop\n            expected_prefix ('str'): expected source ip\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n        Example:\n             *>   [5][1003:1][0][64][2069::]/29\n                      3.3.3.3                                0 1000 1003 ?\n             where rd - 1003:1, prefix - 2069::, nexthop - 3.3.3.3\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_l2vpn_evpn_rt5_nxthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2758"
    }
  },
  "verify_bgp_last_error": {
    "junos": {
      "doc": "\n    Verify bgp last error\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_error('str') : Expected last error\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_last_error",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L146"
    }
  },
  "verify_bgp_last_reset": {
    "iosxe": {
      "doc": " Verify last reset is always greater than previous value\n\n        Args:\n            prev_list(`list`): list of previous last reset value\n            curr_list(`list`): list of current last reset value\n        Returns:\n            result(`bool`): verified result\n            table(`obj`): table to display\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_last_reset",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L172"
    }
  },
  "verify_bgp_mvpn_route_count": {
    "iosxe": {
      "doc": " Verify count of metioned routes \n\n        args:\n            device ('obj'): Device to use\n            route_type ('dict') : contains all the route type and route count\n            vrf ('str'): vrf name\n        raises:\n            N/A\n\n        returns:\n            dict\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_mvpn_route_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1845"
    }
  },
  "verify_bgp_neighbor_exist": {
    "iosxe": {
      "doc": " Verify bgp neighbor exists in 'show ip bgp {address_family} summary'\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            address_family ('str'): address family\n            vrf ('str'): vrf\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1623"
    },
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp {address_family} summary'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            address_family ('str'): Address family\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): Verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L59"
    }
  },
  "verify_bgp_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify bgp neighbor exists in 'show bgp neighbors {nbr}'\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor to check\n            vrf ('str'): Vrf\n            address_family ('str'): Address family\n            expected_state ('str'): Expected state\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): Check interval\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/bgp/verify.py#L96"
    }
  },
  "verify_bgp_neighbor_route_zero_prefixes": {
    "iosxe": {
      "doc": " Verify for zero number of prefixes in 'show ip bgp {address_family} \n        neighbors {neighbor} routes'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            neighbor ('str'): neighbor ip \n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_route_zero_prefixes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2276"
    }
  },
  "verify_bgp_neighbor_state": {
    "iosxe": {
      "doc": " Verify bgp neighbor state in 'show ip bgp l2vpn evpn summary' or\n        state for particular neighbor if neighbor_address is given.\n             \n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            expected_state ('str'): Expected state(Idle or number)\n            neighbor_address ('str',optional): Neighbor ip address\n                default is none\n            vrf('str',optional): vrf id, default is none \n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2215"
    }
  },
  "verify_bgp_not_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        not_expected_state('str') : Not expected peer state\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_not_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L83"
    }
  },
  "verify_bgp_peer_address": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        peer_address (`list`): List of peer addresses to verify\n        expected_state('str') : Expected peer state\n        peer_address_only (`bool`): if True, make sure only given\n                                    peer_address exist\n                                    Default to False\n        neighbor_command (`bool`): if True, use `show bgp neighbor <address>` instead\n                                   Default to False\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L964"
    }
  },
  "verify_bgp_peer_as": {
    "junos": {
      "doc": "\n    Verify bgp peer AS number\n\n    Args:\n        device('obj'): device to use\n        peer_address('str'): Peer interface\n        expected_peer_as ('int'): Expected peer AS number\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L908"
    }
  },
  "verify_bgp_peer_import_value": {
    "junos": {
      "doc": "Verifies BGP peer import value\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        expected_import_value (str): Expected import value to check against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_import_value",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L787"
    }
  },
  "verify_bgp_peer_option": {
    "junos": {
      "doc": "\n    Verify bgp peer's bgp option\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface\n        protocol('str'): protocol name\n        expected_bgp_option('str') : Expected peer bgp-option flag\n        invert (bool, optional): True if output does not contain expected_bgp_option. Defaults to False.\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        Boolean\n    Raises:\n        N/A\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_option",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L842"
    }
  },
  "verify_bgp_peer_prefixes_match": {
    "junos": {
      "doc": "Verifies whether BGP peer prefixes match or not\n\n    Args:\n        device (object): Device object\n        peer_address (str): Peer address\n        active (bool, optional): Check active prefix. Defaults to True.\n        received (bool, optional): Check received prefix. Defaults to True.\n        accepted (bool, optional): Check accepted prefix. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_prefixes_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L714"
    }
  },
  "verify_bgp_peer_state": {
    "junos": {
      "doc": "\n    Verify bgp peer state\n\n    Args:\n        device('obj'): device to use\n        interface('str'): Peer interface   \n        expected_state('str') : Expected peer state\n        check_peer('boolean'): pass True if want to check peer address; default False\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L16"
    }
  },
  "verify_bgp_peers_are_present": {
    "iosxe": {
      "doc": " Verify if BGP peers are present\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            rd ('str'): RD export value\n            all_summary ('bool'): Flag to get all summary\n            bgp_peers ('dict'): Dictionary containing peer details - Neigbor and AS number\n                ex.)\n                    bgp_peers = {\n                        '192.168.1.1': 65532,\n                        '192.168.1.2': 65532,\n                    }\n        Returns:\n            True\n            False\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_peers_are_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1042"
    }
  },
  "verify_bgp_rd_table": {
    "iosxe": {
      "doc": "Verify BGP table on neighbors\n\n        Args:\n            device ('obj')             : Device object\n            address_family ('str')     : Address family to be used in show command\n            routes_list ('dict')       : Routes to be verified \n            vrf ('str')           : VRF value \n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rd_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L418"
    }
  },
  "verify_bgp_route_is_advertised": {
    "iosxe": {
      "doc": " Verify if a route is advertised for a VRF and Router Distinguisher\n\n        Args:\n            vrf('str')                  : VRF name to be verified\n            address_family('str')       : Address family \n            neighbor_address ('str')            : Neighbor interface address\n            default_rd('str')           : Route distinguisher from VRF list\n            default_vrf('str')          : VRF from VRF list\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n        Returns:\n            True\n            False\n        Raises:\n            Exception\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_route_is_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1363"
    }
  },
  "verify_bgp_route_is_received": {
    "iosxe": {
      "doc": " Verify if VRF and Router Distinguisher have at least one received route\n        Args:\n            device ('obj')              : Device object\n            address_family ('str')      : Address family to be used in show command\n            vrf ('str')                 : VRF name to be verified \n            neighbor_address ('str')   : Neighbor interface address\n            default_rd ('str')          : Route distinguisher from VRF list\n            default_vrf ('str')         : Default VRF name\n            address_family ('str')      : Address family\n            received_routes ('dict')    : Parsed output to be verified\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_route_is_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1433"
    }
  },
  "verify_bgp_routes_from_neighbors": {
    "iosxe": {
      "doc": " Verify if routes are advertised by a particular source\n\n        Args:\n            device ('obj'): device object\n            address_family ('str'): address family name\n            vrf ('str'): vrf name\n            route ('str'): IP address\n            source_address ('str'): source address to check in output\n            rr_loopback ('list'): loopback address list to check in output for route reflactor device\n            ex.)\n                loopback1 = '192.168.36.40'\n                loopback2 = '192.168.36.41'\n                rr_loopback = [ loopback1, loopback2 ]\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_routes_from_neighbors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L939"
    }
  },
  "verify_bgp_routes_have_community": {
    "iosxe": {
      "doc": " Verify routes have community or not\n\n        Args:\n            device ('str'): Device str\n            neighbor ('str'): neighbor address\n            community ('str'): community name to search\n            vrf ('str'): vrf name\n            rd_export ('str'): rd export value\n            check_not_match ('bool'): flag check community match or not\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_routes_have_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L724"
    }
  },
  "verify_bgp_rt2_label": {
    "iosxe": {
      "doc": " Verify bgp label for routetype 2 in 'show ip bgp {address_family}\n        route-type 2 {eti} {mac} {ip}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            mac_addr('str'): Mac address\n            ip_addr('str'): Ip address\n            vrf_id ('str'): vrf\n            expected_label('str'): Expected label \n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt2_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2117"
    }
  },
  "verify_bgp_rt2_route_target": {
    "iosxe": {
      "doc": " Verify bgp RT-2 host route(s) exists in 'show ip bgp {address_family}\n        route-type 2 {eti} {mac} {ip}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            mac_addr('str'): mac address\n            ip_addr('str'): Ip address\n            vrf_id ('str'): vrf\n            expected_rt('str' or 'list'): Expected route target\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int'. optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt2_route_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1882"
    }
  },
  "verify_bgp_rt5_label": {
    "iosxe": {
      "doc": " Verify bgp for specific label existstance in \n        'show ip bgp {address_family} route-type 5 {eti} {ip_addr} {ip_length}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): IP ADDRESS\n            ip_length('str'): Ip length\n            vrf_id ('str'): vrf\n            expected_label('str'): Expected Label\n            max_time ('int', optional): maximum time to wait in seconds, \n                default is 30\n            check_interval ('int', optional): how often to check  in seconds, \n                default is 10\n        Example:\n            EVPN ESI: 00000000000000000000, Gateway Address: 0.0.0.0, \n            VNI Label 3000101, MPLS VPN Label 0\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2060"
    }
  },
  "verify_bgp_rt5_mvpn_all_ip_mgroup": {
    "iosxe": {
      "doc": " Verify bgp rd(if given),ip and mgroup for routetype 5 route in \n        'show ip bgp ipv4/ipv6 mvpn all'\n\n        Args:\n            device ('obj'): device to use\n            ip_family ('str'): ipv4 or ipv6\n            expected_ip ('str'): expected ip\n            expected_mgroup ('str'): expected multicast group\n            expected_rd ('str', optional): rd if given\n            vrf ('str', optional): vrf if given\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_mvpn_all_ip_mgroup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2562"
    }
  },
  "verify_bgp_rt5_reoriginated_from": {
    "iosxe": {
      "doc": " re-originated RT-5 host IP route indicates route is re-originated \n        from RT-2 in 'show ip bgp {address_family} route-type 5 \n        {eti} {ip} {ip_len}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): Ip address\n            ip_length('str'): Ip length\n            vrf_id('str'): VRF name\n            expected_path('str'): Expected path\n            max_time ('int', optional): maximum time to wait in seconds,\n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Example: \n            Paths: (1 available, best #1, table evi_101, \n            re-originated from [2][30.0.1.11:101][0][48]\n                [009999888888][32][20.101.1.3]/24)\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_reoriginated_from",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1943"
    }
  },
  "verify_bgp_rt5_route_target": {
    "iosxe": {
      "doc": " Verify bgp for specific route target host(s) in\n        'show ip bgp {address_family} route-type 5 {eti} {ip} {ip_len}' \n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            eti ('str'):Ethernet tag in decimal <0-4294967295>\n            ip_addr('str'): ipv4/ipv6 address\n            ip_length('str'): Ip length\n            vrf_id ('str'): vrf\n            expected_rt ('str' or 'list'): Expected RT\n            max_time ('int', optional): maximum time to wait in seconds, \n                default 30\n            check_interval ('int', optional): how often to check in seconds, \n                default 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt5_route_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2003"
    }
  },
  "verify_bgp_rt7_mvpn_all_ip_mgroup": {
    "iosxe": {
      "doc": " Verify bgp rd(if given),ip and mgroup for routetype 7 route in \n        'show ip bgp ipv4/ipv6 mvpn all'\n\n        Args:\n            device ('obj'): device to use\n            ip_family ('str'): either ipv4 or ipv6\n            expected_ip ('str'): expected ip\n            expected_mgroup ('str'): expected multicast group\n            expected_rd ('str', optional): rd if given\n            vrf ('str', optional): vrf if given\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_rt7_mvpn_all_ip_mgroup",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L2629"
    }
  },
  "verify_bgp_soo_on_route": {
    "iosxe": {
      "doc": " Verifies soo exists on route \n\n        Args:\n            Required:\n                device('obj'): device to verify on\n                address_family('str'): address_family to verify under\n                route('str'): route to verify\n            \n            One or the other:\n                vrf('str'): verify using vrf\n                rd('str'): verify using rd\n\n            Optional:\n                timeout('obj'): timeout object to override default\n\n        Returns:\n            True\n            False\n        Raise:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_soo_on_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L317"
    }
  },
  "verify_bgp_status_codes_exist": {
    "iosxe": {
      "doc": " Verifies status exists in status_codes\n\n        Args:\n            device ('obj'): device to use\n            neighbor ('str'): neighbor to check under\n            route ('str'): route to check under\n            status_codes ('str'): status codes from parser\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            check_all ('bool'): wether or not to check all status_codes passed or atleast one\n\n        Returns:\n            codes ('str') or None\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_status_codes_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1569"
    }
  },
  "verify_bgp_summary_instance_peers_state": {
    "junos": {
      "doc": " Verifies all peer states are a supplied state\n\n    Args:\n        device('obj'): device to use\n        instance ('str'): Instance name\n        expected_state('str') : Expected peer state Default to `Establ`\n        max_time ('int', optional): Maximum time to keep checking. Default to 60\n        check_interval ('int', optional): How often to check. Default to 10\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_summary_instance_peers_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L1146"
    }
  },
  "verify_bgp_syslog": {
    "iosxe": {
      "doc": " Verify syslog messages don't contain BGP-5-ADJCHANGE mnemonic\n\n        Args:\n            device(`obj`): device object\n        Returns:\n            result (`str`): verified result\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_syslog",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L210"
    }
  },
  "verify_bgp_table_uut": {
    "iosxe": {
      "doc": "Verify BGP table on device under test\n\n        Args:                \n            device ('obj')             : Device object            \n            address_family ('str')     : Address family to be used in show command\n            vrf ('str')           : VRF value of neighbors\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            routes_list ('dict')       : Routes to be verified\n            default_rd ('str')         : Route distinguisher value\n            as_path_prepend ('str')    : AS path prepend value to be checked on routes\n            as_path ('str')            : AS path from routes\n            steps ('obj')              : Context manager object\n        Raises:\n            Exception\n        Returns:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_table_uut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L495"
    }
  },
  "verify_bgp_updown_time": {
    "junos": {
      "doc": "\n    Verify the up/down time of all neighbors is less than given_time\n\n    Args:\n        device('obj'): device to use\n        given_seconds('int') : Given time in seconds\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n        check_interval ('int', optional): How often to check. Default to 10 seconds\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bgp_updown_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/bgp/verify.py#L540"
    }
  },
  "verify_bidir_groupip": {
    "iosxe": {
      "doc": "Verify bidir multicast group ip output\n\n    Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            groupip (`str`): multicast group ip\n            upstream_intf (`str`, optional): sourceip of the multicast group ip\n            incmg_intf (`str`, optional): incoming interface of the mullticast group ip\n            flag (`str`, optional): flag\n            outgng_intf (`str`, optional): outgoing interface\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bidir_groupip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L381"
    }
  },
  "verify_boot_mode_lxc_config": {
    "nxos": {
      "doc": "\n    verify that lxc boot mode config exist in the device\n    Args:\n        device (`obj`): Device object\n        max_time ('int', optional) : max time to wait, default value is 15 seconds.\n        interval ('int', optional) : interval timer, default value is 5 seconds.\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "bootmode.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_mode_lxc_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/bootmode/verify.py#L11"
    }
  },
  "verify_boot_mode_lxc_unconfig": {
    "nxos": {
      "doc": "\n    verify that lxc boot mode config does not exist in the device\n    Args:\n        device (`obj`): Device object\n        max_time ('int', optional) : max time to wait, default value is 15 seconds.\n        interval ('int', optional) : interval timer, default value is 5 seconds.\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "bootmode.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_mode_lxc_unconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/bootmode/verify.py#L43"
    }
  },
  "verify_boot_variable": {
    "ios": {
      "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System images\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L79"
    },
    "iosxe": {
      "cat9k": {
        "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n\n    Args:\n        device (obj): The device to execute on.\n\n        boot_images (list): The images that are expected to be configured\n            as the boot variable for the next reload.\n\n        output (str, optional): The device output from 'show boot'. If not\n            provided the API will gather it from the device automatically.\n            Defaults to None.\n\n    Returns:\n        True - if the expected images are configured\n        False - if the expected images are NOT configured\n\n    Raises:\n        N/A\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cat9k/platform/verify.py#L6"
      },
      "doc": " Verifies given boot_images are set to the next-reload BOOT vars\n        Args:\n            device ('obj'): Device object\n            boot_images ('str'): System images\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L153"
    }
  },
  "verify_bundle_in_state": {
    "iosxr": {
      "doc": " Verify bundle state\n\n        Args:\n            device (`obj`): Device object\n            bundle (`str`): Bundle name\n            interface (`bool`): Bundle interface\n            status (`str`): Expected bundle status\n            link_state (`str`): Expected line state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_bundle_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L14"
    }
  },
  "verify_capabilities_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if capabilities of bgp neighbor matches expected capabilities\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            neighbor_address ('str')          : Address family to be searched under\n            expected_capabilities  ('list')   : List of expected capabilities\n            vrf_name ('str')                  : VRF name\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_capabilities_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L576"
    }
  },
  "verify_cdp_in_state": {
    "ios": {
      "doc": " \n        Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/cdp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L9"
    },
    "iosxr": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/cdp/verify.py#L9"
    },
    "nxos": {
      "doc": " Verify that cdp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/cdp/verify.py#L9"
    }
  },
  "verify_cdp_peer_interface": {
    "iosxe": {
      "doc": " Verify interfaces of peer are present in cdp neighbors\n        Args:\n            device('obj'): device \n            interfaces(`list`): interfaces to be checked\n        returns:\n            True if cdp is enabled, false in all other cases\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cdp_peer_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L26"
    }
  },
  "verify_cef_internal_label_stack": {
    "iosxe": {
      "doc": " Verify stack is programmed for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF to check\n            prefix (`str`): Prefix to check\n            stack (`list`): Stack list to verify exists\n            max_time (`int`): Maximum time to keep checking\n            check_interval (`int`): How long to wait between checks\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_internal_label_stack",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L58"
    }
  },
  "verify_cef_labels": {
    "iosxe": {
      "doc": " Verify first and last label on route\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            expected_first_label ('str'): Expected first label\n            expected_last_label ('str'): Expected last label\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_labels",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L800"
    }
  },
  "verify_cef_outgoing_interface": {
    "iosxe": {
      "doc": "Verify outgoing interfaces for a particular prefix in cef\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf\n            dst_pfx (`str`): destination prefix\n            out_intf(`list`): List of outgoing interface to be checked,\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n        True if outgoing interfaces is as expected, false in all other cases\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_outgoing_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L128"
    }
  },
  "verify_cef_path_sets_summary": {
    "iosxe": {
      "doc": " Verify cef path sets summary on active and standby device\n        Args:\n            device('obj'): device\n        returns:\n            True if cef path set uid is same on both active and standby, false in all other cases\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_path_sets_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L199"
    }
  },
  "verify_cef_uid_on_active_standby": {
    "iosxe": {
      "doc": " Verify cef id on both active and standby device\n        Args:\n            device('obj'): device \n        returns:\n            True if cef uid is same on both active and standby, false in all other cases\n    ",
      "module_name": "cef.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cef_uid_on_active_standby",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cef/verify.py#L175"
    }
  },
  "verify_changes_platform": {
    "iosxe": {
      "doc": " Verify if there are changes between outputs from 'show platform'\n        Args:\n            device ('obj'): Device object\n            platform_before ('str'): Parsed output from 'show platform'\n            platform_after ('str'): Parsed output from 'show platform'\n            max_time ('int'): Max time in seconds retrying\n            interval ('int'): Interval of each retry\n        Return:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_changes_platform",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L61"
    }
  },
  "verify_chassis_alarm_output": {
    "junos": {
      "doc": " Verify message_topic is mentioned via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            message_topic ('str'): Message information that should be in output\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_alarm_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L718"
    }
  },
  "verify_chassis_alarms_no_error": {
    "junos": {
      "doc": " Verify there are no error about target FPC via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            target_fpc (`str`): Target fpc. \n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_alarms_no_error",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L865"
    }
  },
  "verify_chassis_environment_component_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_component_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L555"
    }
  },
  "verify_chassis_environment_item": {
    "junos": {
      "doc": " Verify specific item in show chassis environment exists or doesn't exist\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_item",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1615"
    }
  },
  "verify_chassis_environment_multiple_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_multiple_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1294"
    }
  },
  "verify_chassis_environment_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L324"
    }
  },
  "verify_chassis_environment_status": {
    "junos": {
      "doc": " Verify specific item in fan_tray_list has expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_environment_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L670"
    }
  },
  "verify_chassis_fabric_plane_exists": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric summary'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Chassis fabric items expected\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_plane_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1669"
    }
  },
  "verify_chassis_fabric_plane_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric plane'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Chassis fabric items expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_plane_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1389"
    }
  },
  "verify_chassis_fabric_summary_status": {
    "junos": {
      "doc": " Verify specific items status in 'show chassis fabric summary'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): chassis fabric item expected\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fabric_summary_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1340"
    }
  },
  "verify_chassis_fan_tray_present": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            invert (`bool',optional): Check fan tray not present. Defaults to False\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fan_tray_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L259"
    }
  },
  "verify_chassis_fpc_pic_not_exists": {
    "junos": {
      "doc": " Verifies PIC slot does not exist via \n            - show chassis fpc pic-status\n\n    Args:\n        device (obj): Device object\n        pic (int): PIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_pic_not_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L986"
    }
  },
  "verify_chassis_fpc_pic_status": {
    "junos": {
      "doc": " Verifies slot state via \n            - show chassis fpc pic-status\n\n    Args:\n        device (obj): Device object\n        expected_state (str): Expected state of that slot. For example: \"Online\"\n        pic (int): PIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_pic_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L920"
    }
  },
  "verify_chassis_fpc_slot_port": {
    "junos": {
      "doc": "Verifies chassis fpc slot exists\n\n    Args:\n        device (obj): Device object\n        fpc_slot (str/int): FPC slot number\n        pic_slot (str/int): PIC slot number\n        expected_pic_port (str): Expected PIC port\n        invert (bool): Inverts function\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_slot_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1571"
    }
  },
  "verify_chassis_fpc_slot_state": {
    "junos": {
      "doc": " Verifies slot state via \n            - show chassis fpc\n            - show chassis environment fpc\n\n    Args:\n        device (obj): Device object\n        expected_state (list): Expected state of that slot. For example: [\"Offline\", \"Online\"].\n        expected_slot (str, optional): Expected slot to check. For example: \"0\".\n        all_slots(bool, optional): Flag that indicate all slots need to be verified. Defaults to False.\n        environment(bool, optional): Flag that indicate different show commands. Defaults to False. \n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_fpc_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L15"
    }
  },
  "verify_chassis_hardware_item_present": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`list`): Item name\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_hardware_item_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L500"
    }
  },
  "verify_chassis_mic_exists_under_fpc": {
    "junos": {
      "doc": " Verifies MIC $mic exists under FPC $fpc via \n            - show chassis hardware\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        invert (bool, optional): True means verifying PIC does not exist\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_mic_exists_under_fpc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1157"
    }
  },
  "verify_chassis_no_alarms": {
    "junos": {
      "doc": " Verify there are no alarms via 'show chassis alarms'\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_no_alarms",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L406"
    }
  },
  "verify_chassis_no_error_fpc_mic": {
    "junos": {
      "doc": " Verifies no errored FPC $fpc MIC $mic\n            - show chassis alarms\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_no_error_fpc_mic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1237"
    }
  },
  "verify_chassis_pic_exists_under_mic": {
    "junos": {
      "doc": " Verifies PIC exists under MIC $mic of FPC $fpc via \n            - show chassis hardware\n\n    Args:\n        device (obj): Device object\n        mic (int): MIC number\n        fpc (int): FPC number\n        invert (bool, optional): True means verifying PIC does not exist\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_pic_exists_under_mic",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L1052"
    }
  },
  "verify_chassis_power_item_present": {
    "junos": {
      "doc": " Verify all item in fan_tray_list have expected_status in 'show chassis environment'\n\n        Args:\n            device (`obj`): Device object\n            fan_tray_list (`list`): Given fan tray list\n            expected_status (`str`): Expected status\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_power_item_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L622"
    }
  },
  "verify_chassis_re_state": {
    "junos": {
      "doc": " Verify output of show chassis routing-engine ends as expected state\n\n        Args:\n            device (`obj`): Device object\n            expected_re_state (`str`): Expected end of output state\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_re_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L102"
    }
  },
  "verify_chassis_routing_engine": {
    "junos": {
      "doc": " Verify fan_tray_list is present in 'show chassis hardware'\n\n        Args:\n            device (`obj`): Device object\n            expected_item (`str`): Hardware inventory item expected\n            invert ('bool'): Invert function\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_routing_engine",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L443"
    }
  },
  "verify_chassis_slot_state": {
    "junos": {
      "doc": " Verify slot's state in 'show chassis routing-engine'\n\n        Args:\n            device (`obj`): Device object\n            expected_slots_states_pairs (`dict`): Expected states with given slots. E.g.,{'slot1':'state1', 'slot2':'state2'}\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_slot_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L200"
    }
  },
  "verify_chassis_slots_present": {
    "junos": {
      "doc": " Verify slots present in 'show chassis routing-engine'\n\n        Args:\n            device (`obj`): Device object\n            expected_slots (`list`): Given slots\n            invert ('bool', 'optional'): Inverts to check if it doesn't exist\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_slots_present",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L145"
    }
  },
  "verify_chassis_usb_flag_exists": {
    "junos": {
      "doc": " Verify there is/isn't usb flag in given usb in the routing engine via show chassis hardware detail\n\n        Args:\n            device (`obj`): Device object\n            flag (`str`): USB flag description in output,\n            usb (`str`): USB name in output,,\n            invert (`bool`, optional): Used to indicate a reverse verification. default: False\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "chassis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_chassis_usb_flag_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/chassis/verify.py#L787"
    }
  },
  "verify_class_of_service_interface": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_object_type (`str`, optional): Expected object type. Defaults to None\n            expected_object_name (`str`, optional): Expected object name. Defaults to None\n            max_time (`int`, optional): Maximum time to keep checking. Defaults to 60\n            check_interval (`int`, optional): How often to check. Defaults to 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "class_of_service.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_class_of_service_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L68"
    }
  },
  "verify_class_of_service_object_exists": {
    "junos": {
      "doc": " Verifies class_of_service object exists\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface to check\n        expected_object (str): Object name to check for\n        invert (bool, optional): Whether to check if it doesn't exist or not. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        True/False\n    ",
      "module_name": "class_of_service.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_class_of_service_object_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/class_of_service/verify.py#L14"
    }
  },
  "verify_cli_and_snmp_cpu_memory": {
    "iosxe": {
      "doc": " Verify CPU and Memory usage information from \n        CLI and SNMP are equivalent\n\n        Args:\n            device (`obj`): Device object\n            snmp_device (`obj`): SNMP device\n            community (`str`): Community name\n            ip_address (`str`): IP address\n            oid (`str`): Oid code\n            id_slot_map (`dict`): Id-slot mapping\n                ex: {\"1\": \"sip1\", \"7\": \"rp0\", \"9\": \"esp0\"}\n            snmp_map (`dict`): SNMP-CLI mapping\n                ex: {'12': 'used', '13': 'free', '24': '1_min',\n                     '25': '5_min', '26': '15_min', '27': 'committed'}\n            version (`str`): SNMP version\n            load_tolerance (`int`): Tolerance for load information\n            memory_tolerance (`int`): Tolerance for memory information\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cli_and_snmp_cpu_memory",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/snmp/verify.py#L15"
    }
  },
  "verify_cluster_exists_in_route": {
    "junos": {
      "doc": "Verifies cluster exists in route\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        protocol ('str'): Protocol to use in show command\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cluster_exists_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3360"
    }
  },
  "verify_cluster_list_length_of_path": {
    "junos": {
      "doc": "Verify length of cluster list of path (best or non-best)\n\n    Args:\n        target_route ('str'): Route to check\n        cluster_list_length ('int'): Length of cluster list\n        best_route ('bool'): Whether to use best or non-best path\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cluster_list_length_of_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1144"
    }
  },
  "verify_cmca3_certificates": {
    "iosxe": {
      "doc": " Verify cmca3 certificates in show platform sudi pki \n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_cmca3_certificates",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L9"
    }
  },
  "verify_coherentDSP_in_state": {
    "iosxr": {
      "doc": " Verify coherentDSP state\n\n        Args:\n            device (`obj`): Device object\n            dsp (`str`): CoherentDSP port\n            controller_state (`str`): Expected controller state\n            derived_state (`str`): Expected derived state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_coherentDSP_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L68"
    }
  },
  "verify_communities_in_route": {
    "junos": {
      "doc": "Verify communities exist in show route\n\n    Args:\n        route ('str'): Route to check\n        expected_community ('str'): Expected community in route\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_communities_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2319"
    }
  },
  "verify_config_exists_in_routing_options": {
    "junos": {
      "doc": " Verify maximum-path exists in configuration\n\n        Args:\n            device (`obj`): Device object\n            regex (`str`): Config to search\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "running_config.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_config_exists_in_routing_options",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/running_config/verify.py#L22"
    }
  },
  "verify_config_register": {
    "iosxe": {
      "doc": " Check current config register value\n        Args:\n            device ('obj'): Device object\n            config_reg ('str'): Hexadecimal value of config register\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_config_register",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L169"
    }
  },
  "verify_configuration_ddos_protection_no_output": {
    "junos": {
      "doc": " Verifies there is no otuput via show configuration system ddos-protection\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "configuration.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_configuration_ddos_protection_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/verify.py#L51"
    }
  },
  "verify_configuration_hostname": {
    "junos": {
      "doc": " Verifies slot state via show configuration system host-name\n\n    Args:\n        device (obj): Device object\n        expected_hostname (str): Expected hostname\n        max_time (int, optional): Maximum timeout time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        True/False\n    ",
      "module_name": "configuration.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_configuration_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/configuration/verify.py#L15"
    }
  },
  "verify_connectivity": {
    "com": {
      "doc": null,
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_connectivity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L23"
    }
  },
  "verify_controller_ip": {
    "com": {
      "doc": "Verify the controller name to which device is associated\n        Args:\n            device (obj): Device object\n            controller_ip_address (str): IP/IPv6 of the wireless controller\n            max_time (int, optional): Maximum time in seconds. Defaults to 100\n            check_interval (int, optional): check interval in seconds. Defaults to 10\n\n        Returns:\n            True - if the device is associated to expected controller IP/Ipv6 address\n            False - if the device is not associated to expected controller IP/Ipv6 address\n\n        Raises:\n            N/A\n\n        ",
      "module_name": "cheetah.ap.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_controller_ip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/verify.py#L57"
    }
  },
  "verify_controller_name": {
    "com": {
      "doc": "Verify the controller name to which device is associated\n        Args:\n            device (obj): Device object\n            controller_name (str): Name of the wireless controller\n            max_time (int, optional): Maximum time in seconds. Defaults to 100\n            check_interval (int, optional): check interval in seconds. Defaults to 10\n\n        Returns:\n            True - if the device is associated to expected controller\n            False - if the device is not associated to expected controller\n\n        Raises:\n            N/A\n\n        ",
      "module_name": "cheetah.ap.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_controller_name",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/verify.py#L32"
    }
  },
  "verify_crypto_entropy_status": {
    "iosxe": {
      "doc": " Verify crypto entropy status in show crypto entropy status\n        Args:\n            device ('obj'): Device object\n            status ('list'): Expected status #['ACT-2','randfill','getrandombytes']\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_crypto_entropy_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L39"
    }
  },
  "verify_crypto_pki_certificate": {
    "iosxe": {
      "doc": " Verify pki certificates in show crypto pki certificates \n        Args:\n            device ('obj'): Device object\n            cert_status('list'): Expected output #[\"Cisco Manufacturing CA III\",\"Cisco Manufacturing CA SHA2\"]\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_crypto_pki_certificate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L70"
    }
  },
  "verify_crypto_session_svti": {
    "iosxe": {
      "doc": "Verify the crypto session state\n        Args:\n            device('obj'): Device name\n            tunnel_no('str'): The name of the tunnel\n            state('str'): expected state of the session\n        Returns:\n            result (`bool`): Verified result            \n    ",
      "module_name": "ike.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_crypto_session_svti",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ike/verify.py#L10"
    }
  },
  "verify_current_image": {
    "com": {
      "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_current_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L376"
    },
    "iosxr": {
      "asr9k": {
        "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
        "module_name": "verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_current_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/asr9k/verify.py#L5"
      },
      "ncs540": {
        "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
        "module_name": "verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_current_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs540/verify.py#L3"
      },
      "ncs5k": {
        "doc": "Verify current images on the device\n        Args:\n            device (`obj`): Device object\n            images (`list`): List of images expected on the device\n        Returns:\n            None\n    ",
        "module_name": "verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_current_image",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ncs5k/verify.py#L5"
      }
    }
  },
  "verify_ddos_statistics": {
    "junos": {
      "doc": "Verify statictis via show ddos-protection statistics\n\n    Args:\n        device (object): Device object\n        text (str): Given description of the key\n        expected_value (str): Expected value \n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "ddos.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ddos_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ddos/verify.py#L15"
    }
  },
  "verify_default_route_protocol": {
    "junos": {
      "doc": " Verifies if route is displayed in output of show route command\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): ipv4/ipv6 default route\n            ip_type ('str'): Either ipv4/ipv6\n            inet_type ('str'): type of ip\n            expect_output ('bool'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            subnet_mask_number ('bool'): Flag, to include/exclude subnet masknumber in comparison\n            protocol ('str'): Type of protocol (ex.ospf,ospf3,ect)\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_default_route_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L374"
    }
  },
  "verify_device_connection": {
    "com": {
      "doc": "Verify device connectivity and reconnect if needed\n        Args:\n            device ('obj'): Device Object\n            reconnect ('bool'): flag to reconnect in case device is not connected\n            reconnect_max_time ('int'): maximum time to reconnect\n                                        Default to 900 secs\n            reconnect_interval ('int'): interval of sleep after detecting device is not connected\n                            if not provided, executes the cmd on device\n    Returns:\n        (`bool`) : Return True(device is connected)/False(device is not connected)\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_connection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L521"
    }
  },
  "verify_device_connection_state": {
    "com": {
      "doc": "Verify device's Unicon machine state\n        Args:\n            device ('obj'): Device Object\n            reconnect ('bool'): flag to reconnect in case state cannot be detected\n            reconnect_max_time ('int'): maximum time to reconnect\n                                        Default to 900 secs\n            reconnect_interval ('int'): interval of sleep after state detection issue\n                            if not provided, executes the cmd on device\n    Returns:\n        (`str` or None) : Return Unicon machine state\n                          if could not detected, return None\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_connection_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L458"
    }
  },
  "verify_device_tracking_counters_interface": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            interface('str'): interface name\n            message_type('str'): message type - can be one of [received, received_broadcast_multicast, bridged, broadcast_multicast_to_unicast, limited_broadcast_to_local]\n            protocol('str'): protocol\n            message('str'): message type\n            count('int'): number of packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L815"
    }
  },
  "verify_device_tracking_counters_vlan": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            message_type('str'): message type - can be one of [received, received_broadcast_multicast, bridged, broadcast_multicast_to_unicast, limited_broadcast_to_local]\n            protocol('str'): protocol\n            message('str'): message type\n            count('int'): number of packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L688"
    }
  },
  "verify_device_tracking_counters_vlan_dropped": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            feature('str'): feature\n            protocol('str'): protocol\n            message('str'): message type\n            num_dropped('int'): number of dropped packets\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan_dropped",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L731"
    }
  },
  "verify_device_tracking_counters_vlan_faults": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            vlanid('str'): vlan id\n            faults('list('str')'): list of faults\n            max_time('int', optional): max check time. Defaults to 10\n            check_interval('int', optional): check intervals. Defaults to 5\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_counters_vlan_faults",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L773"
    }
  },
  "verify_device_tracking_policies": {
    "iosxe": {
      "doc": " Verify device tracking policies\n\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str'): sisf features. Default \"Device-tracking\"\n            max_time('int',optional): max check time. Defaults to 20\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L83"
    }
  },
  "verify_device_tracking_policy_configuration": {
    "iosxe": {
      "doc": " Verify device-tracking policy configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            security_level('str'): security level, default='guard'\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            device_role('str', optional): device role. Defaults to None\n            data_glean('str', optional): data glean. Defaults to None\n            prefix_glean('str', optional): prefix glean. Defaults to None\n            neighbor_discovery('str', optional): neighbor discovery (gleaning | not gleaning). Defaults to None\n            dhcp6('str', optional): dhcp6 (gleaning | not gleaning). Defaults to None\n            arp('str', optional): arp (gleaning | not gleaning). Defaults to None\n            dhcp4('str', optional): dhcp6 (gleaning | not gleaning). Defaults to None\n            ipv4_limit_address_count('int', optional): ipv4 address count limit. Defaults to None\n            ipv6_limit_address_count('int', optional): ipv6 address count limit. Defaults to None\n            cache_guard('str', optional): cache guard. Defaults to None\n            tracking('str', optional): tracking. Defaults to None\n            max_time('int',optional): max check time. Defaults to 1\n            check_interval('int',optional): check intervals. Defaults to 1\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_device_tracking_policy_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L152"
    }
  },
  "verify_dhcp_snooping_glean_disabled": {
    "iosxe": {
      "doc": " \n    verify_dhcp_snooping_glean_disabled\n    Check the output of 'show ip dhcp snooping | include gleaning' to confirm glean is disabled\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "dhcp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcp_snooping_glean_disabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/verify.py#L105"
    }
  },
  "verify_dhcp_snooping_glean_enabled": {
    "iosxe": {
      "doc": " \n    verify_dhcp_snooping_glean_enabled\n    Check the output of 'show ip dhcp snooping | include gleaning' to confirm glean is enabled\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "dhcp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcp_snooping_glean_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/verify.py#L74"
    }
  },
  "verify_dhcpv4_binding_address": {
    "iosxe": {
      "doc": "Verify an ipv4 address in present in the DHCPv4\n        server binding table\n        Args:\n            device('obj'): dhcp server object\n            ip_address('str'): ip address to find in binding table\n            vrf('str', Optional): vrf name, default None\n            max_time('int', Optional): maximum time to wait, default 20\n            check_interval('int', Optional): how often to check, default 5\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "dhcp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcpv4_binding_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/verify.py#L42"
    }
  },
  "verify_dhcpv4_packet_received": {
    "iosxe": {
      "doc": "Verify a DHCPv4 packet was received\n        Args:\n            device('obj'): device object\n            packet_type('str'): type of dhcpv4 packet\n            max_time('int', Optional): maximum time to wait, default 4\n            check_interval('int', Optional): how often to check, default 2\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "dhcp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcpv4_packet_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcp/verify.py#L14"
    }
  },
  "verify_dhcpv6_binding_address": {
    "iosxe": {
      "doc": "Verify an ipv6 address in present in the DHCPv6\n        server binding table\n        Args:\n            device('obj'): dhcp server object\n            ipv6_address('str'): ip address to verify in binding table\n            vrf('str', Optional): vrf name, default to None\n            max_time('int', Optional): maximum time to wait, default 20\n            check_interval('int', Optional): how often to check, default 5\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "dhcpv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcpv6_binding_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/verify.py#L91"
    }
  },
  "verify_dhcpv6_packet_received": {
    "iosxe": {
      "doc": "Verify a DHCPv6 packet was received\n        Args:\n            device('obj'): device object\n            packet_type('str'): type of dhcpv6 packet\n            prev_output('dict', Optional): previous output of 'show ipv6 dhcp stats', default None\n            max_time('int', Optional): maximum time to wait, default 4\n            check_interval('int', Optional): how often to check, default 2\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "dhcpv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dhcpv6_packet_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/verify.py#L53"
    }
  },
  "verify_diff_timestamp": {
    "junos": {
      "doc": "\n    Verify the difference between time on two logs\n\n    Args:\n        device('obj'): device to use\n        expected_spf_delay('float'): SPF change value   \n        ospf_trace_log('str') : OSPF trace log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_diff_timestamp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L96"
    }
  },
  "verify_dns_packets": {
    "iosxe": {
      "doc": " Analyze the DNS packets\n\n        Args:\n            packets('str'): Packets to analyze\n            ip_address('str'): The captured IP address\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "dns.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_dns_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dns/verify.py#L11"
    }
  },
  "verify_empty_device_tracking_database": {
    "iosxe": {
      "doc": " Verify ip mac binding count in device tracking database\n\n        Args:\n            device('obj'): device object\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_empty_device_tracking_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L407"
    }
  },
  "verify_empty_device_tracking_policies": {
    "iosxe": {
      "doc": " Verify device tracking policies is empty\n\n        Args:\n            device('obj'): device object\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_empty_device_tracking_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L129"
    }
  },
  "verify_enable_password": {
    "iosxe": {
      "doc": " To verify enable password\n    Args:\n        device (`obj`)         :   Device object\n        password (`str`)       :   password\n        privilege_level('int') :   privilege level\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed enabling\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enable_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L115"
    }
  },
  "verify_enough_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the disk\n        Args:\n            device ('obj'): Device Object\n            required_size ('int'): required file size\n            directory ('str'): directory to check file size\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n    Returns:\n        True if enough space, false otherwise\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enough_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L431"
    }
  },
  "verify_enough_server_disk_space": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check disk space, scp or sftp\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            required_space ('int'): required total disk space (Optional)\n            directory ('str'): directory to check file size (Optional)\n            timeout('int'): timeout in seconds (Optional, default 300)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n        Returns:\n            True if enough space, False otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_enough_server_disk_space",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L41"
    }
  },
  "verify_etherchannel_counter": {
    "iosxe": {
      "doc": "Verifies packet flow on port-channel interface\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port-channel interface (i.e. Port-channel5)\n            field (`list`): fields be to checked in interface for multicast traffic\n                            Eg:[\"incoming\",\"outgoing\"]\n            transmitted_pkts (`int`): packets sent through ixia\n            pps ('int'): packet per second\n            percent ('int'): expected percent of traffic to flow from transmitted_pkts\n        Returns:\n            result(`bool`): True if is packets recieved on port-channel are distributed among member interface\n                            or else return Flase\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_etherchannel_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L955"
    }
  },
  "verify_extended_community_color": {
    "iosxe": {
      "doc": " Verify color exists in 'show ip bgp {address_family} rd {rd} {route}'\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            rd ('str'): Route distinguisher\n            route ('str'): Route to check\n            expected_color ('str'): Color value\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_extended_community_color",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1664"
    }
  },
  "verify_file_details_exists": {
    "junos": {
      "doc": " Verify file details exists\n\n        Args:\n            device ('obj'): Device object\n            root_path ('str'): Root path for command\n            file ('str'): File name\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n            invert ('bool', optional): Invert to check for file absense, default: False\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_details_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L22"
    }
  },
  "verify_file_exists": {
    "apic": {
      "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/platform/verify.py#L8"
    },
    "ios": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device ('obj'): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L20"
    },
    "iosxe": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device ('obj'): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L93"
    },
    "iosxr": {
      "doc": "Verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): File path on the device, i.e. bootflash:/path/to/file\n            size('int'): Expected file size (Optional)\n            dir_output ('str'): Output of 'dir' command\n                            if not provided, executes the cmd on device\n        Returns:\n            Boolean value of whether file exists or not\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L51"
    },
    "nxos": {
      "aci": {
        "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_file_exists",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/aci/platform/verify.py#L9"
      },
      "doc": "verify that the given file exist on device with the same name and size\n        Args:\n            device (`obj`): Device object\n            file ('str'): file path on the device, i.e. bootflash:/path/to/file\n            size('int'): expected file size (Optional)\n            dir_output ('str'): output of dir command, if not provided execute the cmd on device to get the output\n        Returns:\n            Boolean value of whether file exists or not\n            ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L104"
    }
  },
  "verify_file_exists_on_server": {
    "com": {
      "doc": "Verify there are enough space on the server\n        Args:\n            device ('obj'): Device object\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            size ('int'): expected file size in bytes, if not provided will only check\n                file existence with name (Optional)\n            timeout('int'): timeout in seconds (Optional)\n            fu_session ('obj'): existing FileUtils object to reuse (Optional)\n            max_tries ('int;): max number of attempts (Optional)\n        Returns:\n            True if enough space, false otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_exists_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L123"
    }
  },
  "verify_file_size": {
    "junos": {
      "doc": " Verify specified file size\n\n    Args:\n        device (obj): Device object\n        root_path (str): Root path\n        file (str): File name\n        file_size (int): File size\n        max_time (int, optional): Maximum sleep time. Defaults to 30.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/utils.py#L161"
    }
  },
  "verify_file_size_stable": {
    "nxos": {
      "doc": "\n    Args\n        Verify if the file size is stable, not changing\n        device ('obj'): Device Object\n        file ('str'): file path to check the size\n        max_tries('int'): number of tries to check file stability, defaults 3\n        delay_seconds ('int'): time delay between tries in seconds, defaults 2\n    Returns\n        True if file size is stable, false otherwise\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size_stable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L142"
    }
  },
  "verify_file_size_stable_on_server": {
    "com": {
      "doc": "Verify size stability of given file on the server\n        Args:\n            device ('obj'): Device object\n            server ('str'): Server address or hostname. if not provided it will perform\n                            operation on local file system (Optional)\n            protocol ('str'): Protocol used to check file, ftp or sftp\n            file ('int'): file path\n            timeout ('int'): timeout in seconds\n            fu_session ('obj'): existing FileUtils object to reuse\n            max_tries ('int'): number of tries to check file stability, defaults 3\n            delay ('int'): time delay between tries in seconds, defaults 2\n        Returns:\n            True if file size is stable, false otherwise\n        ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_file_size_stable_on_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/verify.py#L238"
    }
  },
  "verify_files_copied_on_standby": {
    "nxos": {
      "doc": "\n        Verify files transfered successfully to the standby\n        Args:\n            device (`obj`): Device object\n            max_time ('int'): Maximum time in seconds, Default Value is 300 sec\n            check_interval ('int'): Check interval in seconds, Default Value is 20 sec\n        Returns:\n            None\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_files_copied_on_standby",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L186"
    }
  },
  "verify_fips_auth_key": {
    "iosxe": {
      "doc": "Verify fips authorization-key\n\n        Args:\n            device (`obj`): Device object\n            expected_auth_key(`str`): expected authorization key\n            st_key(`str`): Actual key\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "fips.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_fips_auth_key",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/fips/verify.py#L12"
    }
  },
  "verify_firewall_counter": {
    "junos": {
      "doc": " Verify counter is not 0\n\n        Args:\n            device (`obj`): Device object\n            filters (`str`): Firewall filter argument\n            counter_name (`str`): Firewall counter name argument\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L119"
    }
  },
  "verify_firewall_filter": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_filter (str): Filter to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_filter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L16"
    }
  },
  "verify_firewall_log": {
    "junos": {
      "doc": " Verify show firewall log has output\n\n        Args:\n            device ('obj'): Device object\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_log",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L170"
    }
  },
  "verify_firewall_packets": {
    "junos": {
      "doc": "Verify firewall filter exists\n\n    Args:\n        device (object): Device object\n        expected_packet_count (int): Expected packets to find\n        filter (str): Filter to check\n        counter_name (str): Counter name to check\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Invert function. Defaults to False.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "firewall.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firewall_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/firewall/verify.py#L61"
    }
  },
  "verify_firmware_upgrade_status": {
    "apic": {
      "doc": " Verifies that all nodes are in the provided status.\n\n    Args:\n        device (obj): Device to execute on\n        status (str): Expected status\n        firmware_group (str, optional): group to filter by. Defaults to None.\n        max_time (int, optional): Max time to verify. Defaults to 90.\n        check_interval (int, optional): How often to recheck. Defaults to 15.\n\n    Returns:\n        (bool): True if all nodes in the expected status\n                False if some nodes are not in the expected status\n\n    Raises:\n        N/A\n\n    ",
      "module_name": "firmware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_firmware_upgrade_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/apic/firmware/verify.py#L9"
    }
  },
  "verify_flow_cache_record_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            expected_source_address ('str'): Source address to match\n            expected_destination_address ('str'): Destination address to match\n            format ('bool'): Format output or not\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_cache_record_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L116"
    }
  },
  "verify_flow_exporter_records_added_and_sent_are_equal": {
    "iosxe": {
      "doc": " Verifies that flow exporter records added and sent are equal\n\n        Args:\n            device ('obj'): Device to use\n            exporter ('str'): Exporter name\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_exporter_records_added_and_sent_are_equal",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L52"
    }
  },
  "verify_flow_with_source_and_destination_exists": {
    "iosxe": {
      "doc": " Verifies a flow under flow_monitor with specified\n        source and destination address' exist\n\n        Args:\n            device ('obj'): Device to use\n            flow_monitor ('str'): Flow monitor to search under\n            source_address ('str'): Source address to match\n            destination_address ('str'): Destination address to match\n            max_time ('int'): Max time to keep checking\n            check_interval ('int'): How often to check\n\n        Raises:\n            N/A\n\n        Returns:\n            True/False\n    ",
      "module_name": "flow.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_flow_with_source_and_destination_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/flow/verify.py#L13"
    }
  },
  "verify_hardware_active_ESP_changed": {
    "iosxe": {
      "doc": " Verify active ESP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_active_ESP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L85"
    }
  },
  "verify_hardware_active_RP_changed": {
    "iosxe": {
      "doc": " Verify active RP has changed\n\n        Args:\n            device (`obj`): Device object\n            pre_act (`str`): previous active ESP\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n            curr_act (`str`): current active ESP\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_active_RP_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L57"
    }
  },
  "verify_hardware_fan_speed_increase": {
    "iosxe": {
      "doc": " Verify fan speed increase\n\n        Args:\n            curr_fans (`list`): current fans\n            prev_fans (`list`): previous fans\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_fan_speed_increase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L24"
    }
  },
  "verify_hardware_redundancy_states": {
    "iosxe": {
      "doc": " Verify redundancy operational state is sso\n        Manual Swact is enabled and\n        Peer state is STANDBY HOT\n\n        Args:\n            device (`obj`): Device object\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): verified result\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_redundancy_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L253"
    }
  },
  "verify_hardware_slot": {
    "iosxe": {
      "doc": " Verify hardware slot exists\n\n        Args:\n            device (`obj`): Device object\n            slot (`list`): hardware slot with LC and SUP # [\"C9600X-SUP-2\",\"C9600-LC-24C\"]\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_slot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L224"
    }
  },
  "verify_hardware_slot_exist": {
    "iosxe": {
      "doc": " Verify hardware slot exists\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_slot_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L142"
    }
  },
  "verify_hardware_slot_removed": {
    "iosxe": {
      "doc": " Verify hardware slot has removed\n\n        Args:\n            device (`obj`): Device object\n            slot (`str`): hardware slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_slot_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L111"
    }
  },
  "verify_hardware_spa_exist": {
    "iosxe": {
      "doc": " Verify spa exists\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_spa_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L211"
    }
  },
  "verify_hardware_spa_removed": {
    "iosxe": {
      "doc": " Verify spa has removed\n\n        Args:\n            device (`obj`): Device object\n            spa (`str`): spa slot\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n        Raises:\n            None\n    ",
      "module_name": "hardware.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hardware_spa_removed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/hardware/verify.py#L169"
    }
  },
  "verify_hello_interval_holdtime": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_hello_interval (int): Expected Hello interval\n        expected_hold_time(int): Expected Holdtime\n        interface(str): Address that passed in show command\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hello_interval_holdtime",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L332"
    }
  },
  "verify_hostname": {
    "iosxr": {
      "doc": " Verify hostname is matched with expected name\n\n        Args:\n            device (`obj`): Device object\n            expected_hostname (`str`): Expected hostname\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "running_config.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hostname",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/running_config/verify.py#L15"
    }
  },
  "verify_hw_auth_status": {
    "iosxe": {
      "doc": " Verify hardware authentication status in show platform hardware authentication status \n        Args:\n            device ('obj'): Device object\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_hw_auth_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L100"
    }
  },
  "verify_igmp_groups_under_vrf": {
    "iosxe": {
      "doc": "Verify igmp groups\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): vrf name\n            grp_list (`list`): list of multicast group ip and source ip\n                              Eg: [[\"228.1.1.1\",\"121.1.1.1\"]]\n            grp_cnt (`int`): number of group ip configured\n            max_time (`int`, optional): Max time to check status (Default is 60)\n            check_interval (`int`, optional): check interval (Default is 10)\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "igmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_igmp_groups_under_vrf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/igmp/verify.py#L24"
    }
  },
  "verify_igp_metric_in_ldp": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        expected_metric (str): Expected IGP metric value\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_igp_metric_in_ldp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L298"
    }
  },
  "verify_install_auto_abort_timer_state": {
    "iosxe": {
      "doc": "\n    Verifies install auto abort timer state\n    Args:\n        device ('obj'): Device object\n        timer_state ('str, optional'): install type to verify\n    Returns:\n        True if install auto abort timer state matches\n        False if install auto abort timer state not matches\n    ",
      "module_name": "install.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_install_auto_abort_timer_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/verify.py#L49"
    }
  },
  "verify_install_state": {
    "iosxe": {
      "doc": "\n    Verifies install state\n    Args:\n        device ('obj'): Device object\n        install_type ('str, optional'): install type to verify\n        install_state ('str, optional'): install state to verify\n    Returns:\n        True if rollback label matches\n        False if rollback label not matches\n    ",
      "module_name": "install.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_install_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/verify.py#L26"
    }
  },
  "verify_installed_pies": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            installed_packages (`list`): List of packages to verify that exist\n            max_time (`int`): Maximum time to wait while checking for pies installed\n                              Default 300 seconds (Optional)\n          check_interval (`int`): Time interval while checking for pies installed\n                                  Default 30 seconds (Optional)\n\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_installed_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L139"
    }
  },
  "verify_interface_bundled_interfaces_mode": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): Interfaces list\n            port_channel (`str`): Port channel interface\n            lacp_id (`int`): lacp ID\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_bundled_interfaces_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L571"
    }
  },
  "verify_interface_config_carrier_delay": {
    "iosxe": {
      "doc": "Verify interface carrier_delay config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify has carrier delay\n                           False if verify no carrier delay\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_carrier_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L32"
    }
  },
  "verify_interface_config_duplex": {
    "iosxe": {
      "doc": "Verify interface configured duplex in - show running-config interface <interface-name>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            duplex_mode ('str'): duplex mode and default 'duplex auto'\n            flag (`bool`): True if verify duplex\n                           False if verify no duplex\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_duplex",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L1126"
    }
  },
  "verify_interface_config_no_shutdown": {
    "iosxe": {
      "doc": "Verify interface doesn't have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_no_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L242"
    }
  },
  "verify_interface_config_ospf_bfd": {
    "iosxe": {
      "doc": "Verify interface ospf bfd config in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_ospf_bfd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L72"
    }
  },
  "verify_interface_config_rejected": {
    "iosxe": {
      "doc": " Verify if it fails when trying to configure an interface\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface name\n        Returns:\n            True: Rejected configuration \n            False: Accepted configuration\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_rejected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L722"
    }
  },
  "verify_interface_config_shutdown": {
    "iosxe": {
      "doc": "Verify interface have shutdown in - show run interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            flag (`bool`): True if verify shutdown \n                           False if verify no shutdown\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_shutdown",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L207"
    }
  },
  "verify_interface_config_speed": {
    "iosxe": {
      "doc": "Verify interface configured speed in - show running-config interface <interface-name>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            speed_mbps (`int` or 'str'): speed mbps and default 'speed auto'\n            flag (`bool`): True if verify speed\n                           False if verify no speed\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_config_speed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L1068"
    }
  },
  "verify_interface_data": {
    "junos": {
      "doc": " Verifies interface data based on different criterias\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_physical_description ('str'): expected physical description\n            expected_logical_description ('str'): expected logical description\n            expected_crc_errors ('str'): expected crc errors\n            extensive ('str'): Flag to check extensive in command\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_data",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L860"
    }
  },
  "verify_interface_description_in_running_config": {
    "iosxe": {
      "doc": "Verify interface description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L762"
    }
  },
  "verify_interface_description_in_show_interfaces": {
    "iosxe": {
      "doc": "Verify interface description in show interfaces <interface>\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            description (`str`): Interface description\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_description_in_show_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L797"
    }
  },
  "verify_interface_errors": {
    "iosxe": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_value (`int`, Optional): Expected errors values\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L824"
    },
    "iosxr": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_value (`int`, Optional): Expected errors values. Defaults to None\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L149"
    },
    "junos": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            expected_error_dict (`dict`, Optional): Expected errors dict. Defaults to None\n            expected_value (`int`, Optional): Expected errors values. Defaults to None\n            input (`bool`, Optional): True if input errors to verify. Default to False.\n            output (`bool`, Optional): True if output errors to verify. Default to False.\n            all (`bool`, Optional): False if single output error to verify. Default to True.\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L504"
    }
  },
  "verify_interface_hold_time": {
    "junos": {
      "doc": " Verify the hold time of an interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_hold_time ('str'): Hold time to check for\n            position ('str'): Position to check for. Options are 'up' or 'down'\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_hold_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L812"
    }
  },
  "verify_interface_in_state": {
    "iosxr": {
      "doc": " Verify interface state and ip\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interfaces name\n            verify_status (`bool`): To verify interface status\n            oper_status (`str`): Expected oper status\n            line_protocol (`str`): Expected line protocol status\n            verify_ip (`bool`): To verify interface ip\n            ip (`str`): Expected interface ip\n            subnet (`str`): Expected interface ip subnet\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L60"
    }
  },
  "verify_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            flag (`bool`): True if verify present \n                           False if verify not present\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L339"
    }
  },
  "verify_interface_load_balance": {
    "junos": {
      "doc": " Verify logical interface load balance\n\n        Args:\n            device (`obj`): Device object\n            load_balance_interfaces (`list`): List of interfaces to check load balance\n            interface (`str`): Pass interface in show command\n            zero_bps_interfaces (`list`): List of interfaces to check zero as bps value\n            traffic_upper_limit_interfaces (`list`): List of interfaces to check upper limit value\n            traffic_upper_limit (`int`): Upper limit bps value\n            expected_tolerance (`int`): Expected tolerance in load balance of interfaces\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n            extensive (`bool`): Execute show command with extensive\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L220"
    }
  },
  "verify_interface_minimum_links": {
    "junos": {
      "doc": " Verify the minimum links needed via show interfaces {interface} extensive\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name    \n            expected_num_of_links('int'): Expected minimum links needed\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_minimum_links",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1044"
    }
  },
  "verify_interface_minumum_bandwidth": {
    "junos": {
      "doc": " Verify the minimum bandwidth needed via show interfaces {interface} extensive\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_bandwidth('str'): Expected minimum bandwidth needed\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_minumum_bandwidth",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1088"
    }
  },
  "verify_interface_mtu": {
    "junos": {
      "doc": " Verify the interface mtu is the expected value via 'show interfaces {interface} extensive'           \n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_mtu('str'): Expected mtu           \n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_mtu",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1347"
    }
  },
  "verify_interface_mtu_packets": {
    "iosxe": {
      "doc": " Verify one mtu packet split into two packets\n\n        Args:\n            pkts (`obj`): Pcap object\n            peer_ip (`str`): Ping ip address\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_mtu_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L107"
    }
  },
  "verify_interface_no_error_counters": {
    "iosxe": {
      "doc": " Verify no error counters\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            counters (`list`): Extra counters to be checked\n        Returns:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_no_error_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L165"
    }
  },
  "verify_interface_output_pps": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify that the target\n        interfaces output-pps matches {target_expected_pps} and verify that all\n        other interfaces output-pps matches {non_target_expected_pps}.\n        {non_target_expected_pps} and {target_expected_pps} are strings that\n        contain integers with the possibly of \"<\" or \">\" to allow a range\".\n\n        Example:\n            uut.api.verify_interface_output_pps(\n                target_interface='ge-0/0/0',\n                target_expected_pps='0',\n                target_expected_pps_operator='>',\n                non_target_expected_pps_operator='0',\n                non_target_expected_pps='=='\n            )\n\n        Args:\n            target_interface ('str'): Interface to target\n            non_target_expected_pps ('str'): output-pps to expect on non target interfaces\n            target_expected_pps ('str'): output-pps to expect on the target interface\n            target_expected_pps_operator ('str'): Comparison operator\n            non_target_expected_pps_operator ('str'): Comparison operator\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_output_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L19"
    }
  },
  "verify_interface_output_pps_load_balance": {
    "junos": {
      "doc": "\n        Execute the command \"monitor interface traffic\" and verify\n        output-pps of interfaces is within tolerance\n\n        Example:\n            device.api.verify_interface_output_pps_load_balance(\n                interfaces=['ge-0/0/0.1', 'ge-0/0/1.1'],\n                expected_tolerance=10,\n                max_time=60,\n                check_interval=10)\n\n        Args:\n            Device ('obj'): Device object\n            interfaces ('list'): List of interfaces \n            expected_tolerance ('int'): Expected tolerance value\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Raises:\n            Parser exceptions\n\n        Returns:\n            Boolean\n    ",
      "module_name": "monitor.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_output_pps_load_balance",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/monitor/verify.py#L126"
    }
  },
  "verify_interface_port_channel_in_no_use": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_in_no_use",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L664"
    }
  },
  "verify_interface_port_channel_status_bundled": {
    "iosxe": {
      "doc": " Verify bundled interfaces mode\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L615"
    }
  },
  "verify_interface_port_channel_status_changed": {
    "iosxe": {
      "doc": " Verify Port channel status\n\n        Args:\n            device (`obj`): Device object\n            port_channel (`str`): Port channel interface\n            status (`str`): Interface status\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L499"
    }
  },
  "verify_interface_port_channel_status_down": {
    "iosxe": {
      "doc": " Verify Port Channel state is down\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n\n        Returns:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L469"
    }
  },
  "verify_interface_port_channel_status_up_and_interfaces_bundled": {
    "iosxe": {
      "doc": " Verify Port channel state and the bundled interfaces\n\n        Args:\n            device('obj'): device to change hostname on\n            port_channel('str'): Port channel interface\n            interface('str'): Interface name\n            max_time ('int'): maximum time to check\n            check_interval ('int'): how often to check\n\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_port_channel_status_up_and_interfaces_bundled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L539"
    }
  },
  "verify_interface_pps": {
    "junos": {
      "doc": " Verify interface packets via show interfaces {interface} extensive\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            pps_type('str'): PPS type, \"Input\" or \"Output\"\n            pps_value('int'): PPS value\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_pps",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1197"
    }
  },
  "verify_interface_protocol": {
    "junos": {
      "doc": " Verify protocol shown via show interfaces terse {interface}\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_protocol('str'): Expected protocol\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None            \n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1133"
    }
  },
  "verify_interface_secondary_addresses": {
    "iosxe": {
      "doc": " Verify secondary addresses are present in RIB\n\n        Args:\n            device (`obj`): Device object\n            connected_sec_addr (`str`): Secondary ip address for connected\n            local_sec_addr (`str`): Secondary ip address for local\n            vrf (`str`): Vrf name\n            address_family (`str`): Address family\n            start (`int`): start number on ip\n            end (`int`): end number on ip\n        Returns:\n            list of address not in RIB\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_secondary_addresses",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L431"
    }
  },
  "verify_interface_state_admin_down": {
    "iosxe": {
      "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L312"
    },
    "iosxr": {
      "doc": "Verify interface state is administratively down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L204"
    }
  },
  "verify_interface_state_admin_up": {
    "iosxe": {
      "doc": "Verify interface state is administratively up and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L884"
    },
    "iosxr": {
      "doc": "Verify interface state is administratively up and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_admin_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L278"
    }
  },
  "verify_interface_state_down": {
    "iosxe": {
      "doc": "Verify interface state is down and and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L285"
    },
    "iosxr": {
      "doc": "Verify interface state is down and line protocol is down\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L241"
    }
  },
  "verify_interface_state_up": {
    "iosxe": {
      "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L260"
    },
    "iosxr": {
      "doc": "Verify interface state is up and and line protocol is up\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_state_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/interface/verify.py#L132"
    }
  },
  "verify_interface_status": {
    "iosxe": {
      "doc": "Verify interface status \n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            status (`str`): Interface status\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L1044"
    }
  },
  "verify_interface_total_queue_counters_dropped_packets": {
    "junos": {
      "doc": " Veirfy queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_queue_packet_count ('dict'): Queue number as key and expected count as value\n            extensive ('str'): Flag to check extensive in command\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interface_total_queue_counters_dropped_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L598"
    }
  },
  "verify_interfaces_extensive_state": {
    "junos": {
      "doc": " Verify interfaces extensive\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name. Default to None\n            expected_oper_status (`str`): Expected oper state for interface\n                Default to 'Up'\n                ex.) expected_oper_status = 'Up'\n            max_time ('int'): Maximum time to keep checking. Default to 30 secs\n            check_interval ('int'): How often to check. Default to 10 secs\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_extensive_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L79"
    }
  },
  "verify_interfaces_input_output_policer_found": {
    "junos": {
      "doc": " Verify input and output policer value for interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            logical_interface ('str'): Logical interface name\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_input_output_policer_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L360"
    }
  },
  "verify_interfaces_queue_packets": {
    "junos": {
      "doc": " Verifies number of packets in an interface queue\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        queue (int): Queue number\n        expected_packets (int): Expected number of packets\n        packet_type (str, optional): Packet type to check for. Defaults to queued.\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_queue_packets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L430"
    }
  },
  "verify_interfaces_terse_no_ipv6": {
    "junos": {
      "doc": " Verify the hold time of an interface\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_interface('str'): Expected interface, default: None\n            invert('bool'): Invert flag, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_terse_no_ipv6",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L961"
    }
  },
  "verify_interfaces_terse_state": {
    "junos": {
      "doc": " Verify interfaces terse\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            expected_admin_state (`str`): Expected admin state for interface\n                ex.) expected_admin_state = 'up'\n            expected_link_state (`str`): Expected link state for interface\n                ex.) expected_link_state = 'down'\n            expected_oper_status (`str`): Expected oper state for interface\n                ex.) expected_oper_status = 'up'\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_interfaces_terse_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L15"
    }
  },
  "verify_iox_disabled": {
    "iosxe": {
      "doc": " \n    verify_iox_disabled\n    Check show iox and confirm all services are not running\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_iox_disabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L97"
    }
  },
  "verify_iox_enabled": {
    "iosxe": {
      "doc": " \n    verify_iox_enabled\n    Check show iox and confirm all services are up and running\n    Args:\n        device ('obj') : Device object\n        max_time ('int') : max time to wait\n        interval ('int') : interval timer\n    Returns:\n        True\n        False\n    Raises:\n        None\n    ",
      "module_name": "apphosting.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_iox_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/apphosting/verify.py#L62"
    }
  },
  "verify_ip_and_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing\n        from command 'show segment-routing mpls connected-prefix-sid-map local <address_family>' or\n        from command 'show segment-routing mpls connected-prefix-sid-map <address_family>'\n        Args:\n            device (`obj`): Device to be executed command\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0'\n            address_family (`str`): Address family\n            local (`bool`): Flag to check command with local\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_and_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L369"
    }
  },
  "verify_ip_and_sid_in_segment_routing_mapping_server": {
    "iosxe": {
      "doc": " Verifies if IP address and SID is present in Segment Routing mapping server\n        from show segment-routing mpls mapping-server {address_family}'\n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family\n            address_sid_dict (`dict`): Dictionary containing ip address and SID as key and value pair\n            ex.)\n                {\n                    '10.4.1.1/32': 1,\n                    '10.4.1.2/32': 2,\n                } \n            algorithm (`str`): Algorithm to check\n            ex.) \n                algorithm = 'ALGO_0' \n            mapping_server (`str`): mapping server to check\n            ex.)\n                mapping_server = 'PREFIX_SID_EXPORT_MAP'   or\n                mapping_server = 'PREFIX_SID_REMOTE_EXPORT_MAP'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n                \n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_and_sid_in_segment_routing_mapping_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L584"
    }
  },
  "verify_ip_bgp_route": {
    "iosxe": {
      "doc": " Verify state/pfxrcd exists in 'show ip bgp summary'\n\n        Args:\n            device ('obj'): device to use\n            route ('str'): Route to check\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_state_pfxrcd ('str'): Expected State/Pfxrcd\n\n        Returns:\n            result ('bool'): verified result\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_bgp_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L1789"
    }
  },
  "verify_ip_cef_nexthop_label": {
    "iosxe": {
      "doc": " Verify ip cef nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Vrf name\n            table (`str`): Not used on IOSXE\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L33"
    },
    "junos": {
      "doc": " Verify nexthop does (not) have expected label\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label. None if no label expected\n            vrf (`str`): Not used on JuniperOS\n            table (`str`): Route table\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_cef_nexthop_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L32"
    }
  },
  "verify_ip_mac_binding_count": {
    "iosxe": {
      "doc": " Verify ip mac binding count in device tracking database\n\n        Args:\n            device('obj'): device object\n            origin('str'): binding table entry origin\n            expected('int'): expected number for specific type of entry\n            max_time('int',optional): max check time. Defaults to 60\n            check_interval('int',optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L372"
    }
  },
  "verify_ip_mac_binding_in_network": {
    "iosxe": {
      "doc": " Verify the ip-mac binding is present on device\n\n        Args:\n            device('obj'): device object\n            ipAddr('str'): ip address\n            macAddr('str'): mac address (XXXX.XXXX.XXXX)\n            origin('str'): binding table entry origin\n            preflevel('int'): binding table entry preflevel\n            clientid('str', optional): client mac address (aiming for dhcp entry). Defaults to None\n            max_time('int', optional): max check time. Defaults to 60\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_in_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L329"
    }
  },
  "verify_ip_mac_binding_not_in_network": {
    "iosxe": {
      "doc": " Verify the ip-mac binding does not exist in the network\n\n        Args:\n            device('obj'): device object\n            macAddr('str'): mac address (XXXX.XXXX.XXXX)\n            ipAddr('str'): ip address\n            max_time('int',optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mac_binding_not_in_network",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L295"
    }
  },
  "verify_ip_mfib_hw_pkt_per_sec": {
    "iosxe": {
      "doc": "Verify for hw packet per sec will be >= rate if given \n       for particular mcast-group & source ip in \n           'show ip mfib multicast_group source_ip' - if no vrf, no ip_family\n           'show ip mfib vrf <vrf> multicast_group source_ip' - if vrf given and no ip_family\n           'show ipv6 mfib multicast_group source_ip' - if ip_family given and no vrf\n           'show ipv6 mfib vrf <vrf> multicast_group source_ip' - if both vrf and ip_family given\n           ex:\n                (1.1.1.1,225.1.1.1) Flags: HW\n                SW Forwarding: 0/0/0/0, Other: 11/0/11\n                HW Forwarding:   6225553/705/115/634, Other: 0/0/0\n\n    Args:\n            device ('obj'): Device object\n            multicast_group (`str`): multicast group to be verified\n            source_ip ('str'): source_ip to be verified           \n            ip_family ('str'): either ipv4 or ipv6 \n            rate ('int', optional): the expected rate of pkts per sec  \n            vrf ('str',optional): vrf   \n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n            \n    Returns:\n            result(`bool`): verified result\n    Raises:\n            None\n\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mfib_hw_pkt_per_sec",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L596"
    }
  },
  "verify_ip_mroute_group_and_sourceip": {
    "iosxe": {
      "doc": "\n    Verify ip/ipv6 source&Multicast group ip and related data for particular\n    source&group ip combination, in 'show ip/ipv6 mroute mgroup source'  \n    Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            groupip (`str`): multicast group ip\n            ip_family ('str'): ip address family ip/ipv6\n            sourceip (`str`, optional): sourceip of the multicast group ip\n            flag (`str`, optional): flag\n               checks the flag that each character in actual output \n               just like subset of a set\n            incmg_intf('str', optional): incoming interface\n            outgng_intf (`str` or 'list', optional): outgoing interface\n            incmg_extranet_vrf (`str`, optional): incoming interface\n            extranet_rec ('list', optional): ['extranet_vrf',extranet_src,extranet_grp,extranet_flags]\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mroute_group_and_sourceip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L691"
    }
  },
  "verify_ip_mroute_mgroup_rpf_state": {
    "iosxe": {
      "doc": "Verify rpf info state for particular mcast group and source ip (if given)\n        in 'show ip/ipv6 mroute {vrf <vrf>} <multicast_group> {<source_ip>}'\n\n    Args:\n            device ('obj'): Device object\n            multicast_group (`str`): multicast group to be verified\n            expected_rpf ('str',): expected rpf info.ex: Registering etc \n            ip_family ('str'): either ip ot ipv6\n            vrf ('str', optional): vrf\n            source_ip ('str',optional): source_ip to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    Returns:\n            result(`bool`): verified result\n    Raises:\n            None\n\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_mroute_mgroup_rpf_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L536"
    }
  },
  "verify_ip_pim_neighbor": {
    "iosxe": {
      "doc": "Verify pim neighbors and along with the interface configured incase of\n       interface is given.\n\n    Args:\n            device ('obj'): Device object\n            expected_neighbor (`str`): neighbor to be verified\n            expected_interface ('str', optional): expected interface \n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    Returns:\n            result(`bool`): verified result\n    Raises:\n            None\n\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_pim_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L649"
    }
  },
  "verify_ip_pim_vrf_neighbor": {
    "iosxe": {
      "doc": "Verify pim neighbors\n\n    Args:\n            device ('obj'): Device object\n            vrf (`str`): vrf id\n            neighbors (`list`): neighbors to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_pim_vrf_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L23"
    }
  },
  "verify_ip_precedence_ip_precedence": {
    "iosxe": {
      "doc": "Verify that all packets have mapped IP precedence value to EXP\n\n        Args:\n            packets ('obj'): Packets to analyze\n            exclude_src_ip ('str'): Source ip to exclude\n\n        Returns:\n            True / False\n            \n        Raises:\n            None\n    ",
      "module_name": "ip_precedence.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ip_precedence_ip_precedence",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ip_precedence/verify.py#L9"
    }
  },
  "verify_ipsec_tunnel_status": {
    "iosxe": {
      "doc": "Verify ipsec tunnel status \n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            status (`str`): ipsec tunnel status (default is UP-ACTIVE)\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "ipsec.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipsec_tunnel_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipsec/verify.py#L9"
    }
  },
  "verify_ipv6_acl_tcam_utilization": {
    "iosxe": {
      "doc": " Verify ipv6 acl tcam utilization\n        Args:\n            device (`obj`): Device object\n            slice_id (`int`): Slice ID\n            direction ('str'): Ingress or egress\n            expected_acl_mem_usage ('int'): Expected ACL entries memory usage\n\n        Returns:\n            True : returns true in case of passed scenario\n            False : returns false if not expected output\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_acl_tcam_utilization",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L146"
    }
  },
  "verify_ipv6_dhcp_pool": {
    "iosxe": {
      "doc": " Verify ipv6 dhcp pool\n        Args:\n            device (`obj`): Device object\n            pool_name (`str`): IPv6 dhcp pool name\n            expected_address_prefix ('str'): Expected IPv6 address prefix\n            expected_active_clients ('int'): Expected number of active clients\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True : returns true in case of passed scenario\n            False : returns false if not expected output\n    ",
      "module_name": "dhcpv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_dhcp_pool",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dhcpv6/verify.py#L18"
    }
  },
  "verify_ipv6_intf_autocfg_address": {
    "iosxe": {
      "doc": "\n    Verifies that the address matches an entry in the interface given\n\n    Args:\n        device (): Device used to run commands\n        interface ('str'): interface on device\n        prefix ('str'): address to verify\n        subnet ('int):  subnetmask\n\n    Returns True if address matches in interface, false otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_intf_autocfg_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1225"
    }
  },
  "verify_ipv6_intf_ip_address": {
    "iosxe": {
      "doc": "\n    Verifies that the address is valid and exists in the interface given\n\n    Args:\n        device (): Device used to run commands\n        interface ('str'): interface on device\n        address ('str'): address to verify\n        max_time ('int'): time in seconds for trying verification. Default=30\n        interval ('int'): time in seconds how often to retry verification. Default=10\n\n    Returns True if address exists in interface, false otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_intf_ip_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1072"
    }
  },
  "verify_ipv6_intf_ip_address_notexist": {
    "iosxe": {
      "doc": "\n    Verifies that the valid address does not exist in the interface given\n\n    Args:\n        device (): Device used to run commands\n        interface ('str'): interface on device\n        address ('str'): address to verify\n        max_time ('int'): time in seconds for trying verification. Default=30\n        interval ('int'): time in seconds how often to try verification. Default=10\n\n    Returns True if address does not exist in interface, false otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_intf_ip_address_notexist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1107"
    }
  },
  "verify_ipv6_linklocal_address": {
    "iosxe": {
      "doc": "\n    Verifies that the expected_linklocal address is equal to the actual\n    linklocal address.\n\n    Args:\n        device ('Device'): Device used to run commands\n        interface ('str'): Interface to get linklocal address from\n        expected_linklocal ('str'): Expected linklocal address\n\n    Returns True if expected_linklocal matches actual linklocal address, False otherwise.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_linklocal_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1199"
    }
  },
  "verify_ipv6_nd_raguard_configuration": {
    "iosxe": {
      "doc": " Verify ipv6 nd raguard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            device_role('str', optional): device role. Defaults to None\n            max_hop_limit('int', optional): maximum hop limit. Defaults to None\n            min_hop_limit('int', optional): minimum hop limit. Defaults to None\n            managed_config_flag('str', optional): managed config flag (on | off). Defaults to None\n            other_config_flag('str', optional): other config flag (on | off). Defaults to None\n            max_router_preference('str', optional): maximum router preference. Defaults to None\n            match_ra_prefix('str', optional): match ra prefix-list. Defaults to None\n            match_ipv6_access_list('str', optional): match ipv6 access-list. Defaults to None\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_nd_raguard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L461"
    }
  },
  "verify_ipv6_nd_raguard_policy": {
    "iosxe": {
      "doc": " Verify the ipv6 nd raguard policies\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str', optional): sisf features. Defaults to \"RA guard\"\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_nd_raguard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L432"
    }
  },
  "verify_ipv6_neighbor_state": {
    "junos": {
      "doc": "Verify interface exists with expected state\n\n    Args:\n        device (obj): Device object\n        expected_interface (str): Interface to check for\n        expected_state (str): Expected interface state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ipv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ipv6/verify.py#L15"
    }
  },
  "verify_ipv6_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Verifies that an ipv6 ospf neighbor using the provided address is in a specific state\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            state ('str'): State to verify the interfaces are in\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1516"
    }
  },
  "verify_ipv6_ospf_neighbor_addresses_are_not_listed": {
    "iosxe": {
      "doc": " Verifies that an ipv6 ospf neighbor using the provided address is not listed\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check for the neighborship\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_ospf_neighbor_addresses_are_not_listed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1546"
    }
  },
  "verify_ipv6_pim_neighbor": {
    "iosxe": {
      "doc": "Verify IPv6 PIM neighbor\n\n            Args:\n                device (`obj`): Device object\n                interface (`str`): Interface name\n                neighbor_address ('str'): Neighbor address to be verified\n                max_time ('int'): optional, Maximum wait time\n                check_interval ('int'): optional, How often to check for output\n\n            Returns:\n                True\n                False\n        ",
      "module_name": "ipv6.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_pim_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ipv6/verify.py#L13"
    }
  },
  "verify_ipv6_source_guard_configuration": {
    "iosxe": {
      "doc": " Verify ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('str', optional): trusted port (yes | no). Defaults to None\n            validate_address('str', optional): validate address (yes | no). Defaults to None\n            validate_prefix('str', optional): validate prefix (yes | no). Defaults to None\n            permit('str', optional): permit traffic. Defaults to None\n            deny('str', optional): deny traffic. Defaults to None\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_source_guard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L599"
    }
  },
  "verify_ipv6_source_guard_policy": {
    "iosxe": {
      "doc": " Verify the ipv6 source guard policies\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            vlan('str'): vlan target\n            iface('str'): interface target\n            feature('str'): sisf features. Defaults to \"Source guard\"\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ipv6_source_guard_policy",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L570"
    }
  },
  "verify_isis_neighbor_in_state": {
    "iosxr": {
      "doc": " Verify ISIS neighbor state\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`list`): ISIS neighbor interfaces\n            state  (`str`): Expected state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_isis_neighbor_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L12"
    }
  },
  "verify_issu_incompatibility_status": {
    "nxos": {
      "doc": "\n    verify that Incompatibilty status is sucess on the device\n    Args:\n       device (`obj`): Device object\n       image : image name \n       max_time : maximum time interval\n       check_interval : check interval\n    Returns:\n    boolean  \n    Raises:\n       None\n    ",
      "module_name": "issuincompatibility.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_issu_incompatibility_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/issuincompatibility/verify.py#L10"
    }
  },
  "verify_junos_version": {
    "junos": {
      "doc": " Get the hostname from 'show version'\n\n        Args:\n            device ('obj'): device to use\n            expected_junos_version ('str'): Expected JUNOS version\n        \n        Returns:\n            hostname ('str'): Hostname\n\n        Raises:\n            N/A\n    ",
      "module_name": "version.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_junos_version",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/version/verify.py#L13"
    }
  },
  "verify_keywords_in_output": {
    "com": {
      "doc": "\n    Verify if keywords are in output\n\n    Args:\n        device(`obj`): device to use\n        max_time (`int`): Maximum time to keep checking. Default to 60 secs\n        check_interval (`int`): How often to check. Default to 10 secs\n        keywords (`list`, `str`): list of keywords to find\n        output (`str`): output of show command.\n        invert (`bool`): invert result. (check all keywords not in log)\n                         Default to False\n\n    Returns:\n        Boolean : if True, find the keywords in log\n    Raises:\n        N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_keywords_in_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3659"
    }
  },
  "verify_l2route_mac_route_flag": {
    "iosxe": {
      "doc": " Verify for route flags for the corresponding mac (if given)\n\n        Args:\n            device ('obj'): device to use\n            expected_flag ('str'): flags\n            mac_address ('str'): Mac\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "l2route.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_l2route_mac_route_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2route/verify.py#L13"
    }
  },
  "verify_l2vpn_storm_control_configuration": {
    "iosxe": {
      "doc": " Verify storm-control configuration is applied\n\n        Args:\n            device ('obj'): device object\n            interface ('str'): interface name\n            service_instance_id:('int'): service instance id\n            storm_control('list'): list of storm control configurations\n                ex.)\n                        [\n                            {\n                                'traffic_flow': 'unicast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'broadcast',\n                                'name': 'cir',\n                                'val': 8000\n                            },\n                            {\n                                'traffic_flow': 'multicast',\n                                'name': 'cir',\n                                'val': 8000\n                            }\n                        ]\n        Returns:\n            None\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_l2vpn_storm_control_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/verify.py#L23"
    }
  },
  "verify_lacp_interface": {
    "junos": {
      "doc": " Verify if there is expected_interface via show lacp interfaces {interface}            \n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_interface('str'): Expected interface\n            invert('bool'): Invert flag, default: False            \n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L1272"
    }
  },
  "verify_lacp_interface_receive_state": {
    "junos": {
      "doc": "Verify the state of an lackp interface\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name. Will be used if expected_interface isn't set\n        expected_state (str): Expected state to check against. Defaults to None.\n        expected_interface (str, optional): Expected interface to check against. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_interface_receive_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L83"
    }
  },
  "verify_lacp_link_state": {
    "junos": {
      "doc": " Verify links of lag interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name (lag interface)\n            links (`list`): list of links for lag interface\n            state_name (`str`): state name where check\n            expected_state (`str`): expected state\n            max_time ('int'): Maximum time to keep checking\n                              Default to 30 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_link_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L16"
    }
  },
  "verify_lacp_role_activity": {
    "junos": {
      "doc": "Verify interfaces roles and activities via show lacp interfaces {interface}\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name. Will be used if expected_interface isn't set\n        role_activity_dicts (dict): Expected interfaces roles and activities.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "lacp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lacp_role_activity",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/lacp/verify.py#L134"
    }
  },
  "verify_lag_links": {
    "junos": {
      "doc": " Verify links of lag interface\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name (lag interface)\n            expected_links (`list`): list of links to verify\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n        Returns:\n            result (`bool` or None): Verified result\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lag_links",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L148"
    }
  },
  "verify_ldp_database_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        interface (str): Interface to use in show command\n        expected_interface (str): Expected interface\n        label_type (str): Database label\n        local_label (str): Database local label\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_database_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L241"
    }
  },
  "verify_ldp_interface": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): expected interface\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L197"
    }
  },
  "verify_ldp_neighbor": {
    "junos": {
      "doc": "Verify 'show ldp neighbor'\n\n    Args:\n        device ('obj'): device to use\n        expected_neighbor ('str'): expected neighbor address\n        max_time ('int'): Maximum time to keep checking. Defaults to 60 seconds\n        check_interval ('int'): How often to check. Defaults to 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L153"
    }
  },
  "verify_ldp_overview": {
    "junos": {
      "doc": "Verifies ldp overview values as indicated\n\n    Args:\n        device (obj): device object\n        default_keepalive_interval (int): a number for interval; default is None\n        default_keepalive_holdtime (int): a number for holdtime; default is None \n        max_time (int): Maximum timeout time; default is 60\n        check_interval (int): Interval to check; default is 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L83"
    }
  },
  "verify_ldp_restart_state": {
    "junos": {
      "doc": "Verifies ldp restart state\n\n    Args:\n        device (obj): device object\n        expected_restart_state (str): Expected state for the restart value in ldp\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_restart_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L380"
    }
  },
  "verify_ldp_session": {
    "junos": {
      "doc": "Verifies ldp session exists\n\n    Args:\n        device (obj): device object\n        address (str): Neighbor address to check for; default to None\n        expected_address (str): Expected address; default to None\n        max_time (int): Maximum timeout time\n        check_interval (int): Interval to check\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L20"
    }
  },
  "verify_ldp_session_status": {
    "junos": {
      "doc": "Verifies ldp's restart state and helper mode\n\n    Args:\n        device (obj): device object\n        address (str): Address to use in show command\n        expected_restart_state (str): Expected state for the restart value in ldp\n        helper_mode (str): helper mode state\n        max_time (int, optional): Maximum timeout time. Default to 60\n        check_interval (int, optional): Interval to check. Default to 10\n    ",
      "module_name": "ldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ldp_session_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ldp/verify.py#L423"
    }
  },
  "verify_learned_protocol": {
    "junos": {
      "doc": "Verifies learned protocol and next hop agianst 'show route {address} extensive'\n\n    Args:\n        device ('obj'): device to use\n        address ('str'): IP address for show command\n        next_hop ('str'): next hop ip address\n        learn_protocol('str'): Learned protocol\n        cluster_value('str'): Cluster value in show route\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_learned_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1257"
    }
  },
  "verify_license_boot_level_configured": {
    "iosxe": {
      "doc": " Verify license boot level configured or not\n        Args:\n            device ('obj'): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_license_boot_level_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L147"
    }
  },
  "verify_license_smart_transport_configured": {
    "iosxe": {
      "doc": " Verify license smart transport is configured\n        Args:\n            device ('obj'): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_license_smart_transport_configured",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L172"
    }
  },
  "verify_license_usage": {
    "iosxe": {
      "doc": " Verify at least 1 license is in use in show license summary\n        Args:\n            device ('obj'): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_license_usage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L126"
    }
  },
  "verify_linklocal_from_mac_address": {
    "iosxe": {
      "doc": "\n    Verifies that the linklocal address in linklocal_intf is based\n    on the mac address of mac_intf.\n\n    Args:\n        device ('Device'): Device used to run commands\n        linklocal_intf ('str'): Interface whose linklocal address is being verified\n        mac_intf ('str'): Interface where linklocal_intf derives the MAC address to generate\n            linklocal address\n    \n    Returns True if linklocal address is based on the MAC address, False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_linklocal_from_mac_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1137"
    }
  },
  "verify_lldp_in_state": {
    "ios": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/lldp/verify.py#L9"
    },
    "iosxe": {
      "doc": " Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/lldp/verify.py#L9"
    },
    "iosxr": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/lldp/verify.py#L9"
    },
    "nxos": {
      "doc": "\n        Verify that lldp is enabled on the device\n        Args:\n            device = device to check status on\n        returns:\n            True if lldp is enabled, false in all other cases\n    ",
      "module_name": "lldp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lldp_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/lldp/verify.py#L9"
    }
  },
  "verify_log_contain_keywords": {
    "junos": {
      "doc": "\n    Verify if keywords are in log messages\n\n    Args:\n        device(`obj`): device to use  \n        filename(`str`) : File name to check log\n        max_time (`int`): Maximum time to keep checking\n        check_interval (`int`): How often to check\n        filter (`bool`, optional): flag to use `match` to filter by keywords\n                                   Default to None\n        keywords (`list`, `str`): list of keywords to find\n        output (`str`): output of show command. Default to None\n        invert (`bool`): invert result. (check all keywords not in log)\n                         Default to False\n\n    Returns:  \n        Boolean : if True, find the keywords in log\n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_log_contain_keywords",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L184"
    }
  },
  "verify_log_exists": {
    "junos": {
      "doc": "\n    Verify log exists\n\n    Args:\n        device('obj'): device to use  \n        file_name('str') : File name to check log\n        expected_log ('str'): Expected log message\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        invert ('bool', 'optional'): Inverts to check if it doesn't exist\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_log_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L59"
    }
  },
  "verify_login_credentials_enable_password": {
    "iosxe": {
      "doc": "Verifies the device login with credentials and enable password\n        Args:\n            device (`obj`)         : Device object\n            username('str')        : username\n            password('str')        : password\n            enable_prompt('bool')  : default True.\n            enable_password('str') : enable password\n            enable_level('int')    : enable privilege level\n        Returns:\n            True if login succeeds.\n            False if login fails.\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_login_credentials_enable_password",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L196"
    }
  },
  "verify_login_with_credentials": {
    "com": {
      "doc": "\n        Verify device is logged in with correct credentials and\n        can not be logged in with wrong credentials when start command is given.\n\n        Args:\n            device('obj'): device to use\n            hostname('str') : hostname\n            username('str') : username\n            password('str'): password\n            start_cmd('list'): list of commands to execute\n            learn_hostname('bool', optional): learn hostname. Default to False.\n            proxy_connections('str', optional): proxy_connections. Default to None.\n            invert ('bool', optional): True if device can't be logged in with wrong credentials. Default to False.\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_login_with_credentials",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2943"
    }
  },
  "verify_lsp_neighbor": {
    "junos": {
      "doc": " Verify lsp state is up for neighbor\n    \n        Args:\n            device ('obj'): device to use\n            ipv4_address ('str'): IPv4 address to check neighbor node\n            expected_status ('str'): Expected neighbor lsp status\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            lsp_state_flag ('bool'): Flag for verifying Lsp state\n        \n        Returns:\n            True/False\n        \n        Raises:\n            N/A\n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_lsp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L14"
    }
  },
  "verify_mac_from_address_family": {
    "iosxe": {
      "doc": " Verify mac from particular address family in \"show l2vpn evpn mac\"\n        also for the particular evi (if given)\n\n        Args:\n            device ('obj'): device to use\n            address_family ('str'): address family\n            expected_mac ('str'): Expected mac\n            evi ('str'):evi instance\n            max_time ('int', optional): maximum time to wait in seconds,\n                default is 30\n            check_interval ('int', optional): how often to check in seconds,\n                default is 10\n        Returns:\n            result ('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "mac.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mac_from_address_family",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mac/verify.py#L16"
    }
  },
  "verify_macsec_session": {
    "iosxe": {
      "doc": " To fetch and verify MACsec session details\n        Args:\n            device ('obj'): device to use\n            intf1 ('str'): interface details\n            intf2 ('str'): interface details\n            cipher ('str'): cipher details\n            Vlan ('str'): dot1q Vlan details\n            access ('str'): Access control details\n            conf ('int'): conf offset details\n            count ('int'): Number of packets\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_macsec_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/verify.py#L93"
    }
  },
  "verify_matm_mactable": {
    "iosxe": {
      "doc": "\n    Api method to call parser and return boolean True If Vlan Port Matched\n    Args:\n            device ('obj'): Device object\n            state (string) : Device State (Such as : active, switch active, switch {1})\n            vlan (string) : Device Vlan Port (Example : 10)\n            mac (string) : Mac address as argument from user\n            vlanport (string) : vlan port as argument from user to validate\n    Returns:\n            Boolean: Validation of Vlan Port True or False\n    ",
      "module_name": "matm.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_matm_mactable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/matm/verify.py#L10"
    }
  },
  "verify_metric_in_route": {
    "junos": {
      "doc": "Verify metric in 'show route {address}' when given table_name\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address in show command\n            expected_metric ('int'): Expected metric number\n            table_name ('str'): Table name. E.g. \"inet.3\".\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_metric_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L750"
    }
  },
  "verify_metric_of_route": {
    "junos": {
      "doc": " Verify the metric of best path and non best path\n\n        Args:\n            device ('obj'): Device object\n            expected_metric ('int'): Expected metric number\n            ip_address ('str'): IP address in show command.\n            active_tag (bool, optional): True if needs to verify metric of best path. Default to False.\n            max_time ('int', optional): Max time, default: 60 seconds\n            check_interval ('int', optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_metric_of_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2589"
    }
  },
  "verify_mfib_vrf_hardware_rate": {
    "iosxe": {
      "doc": "Verify mfib vrf hardware rate\n\n    Args:\n            device ('obj'): Device object\n            vrf (`str`): vrf name\n            num_of_igmp_groups (`dict`): contains group ip with traffic sent pps and number of joins\n                Eg:{\"229.1.1.1\":{'rate_pps':20000,'num_of_igmp_groups':10}\n            var (`int`): variance\n            max_time (`int`, optional): Max time, default: 60\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mfib_vrf_hardware_rate",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L177"
    }
  },
  "verify_mfib_vrf_summary": {
    "iosxe": {
      "doc": "Verify mfib vrf summary output\n\n    Args:\n            device ('obj'): Device object\n            vrf (`str`): vrf name\n            s_g (`int`): SSM group ip count\n            g (`int`):  SM group ip count\n            g_m (`int`): Bidir group ip count\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mfib_vrf_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L240"
    }
  },
  "verify_missing_device_tracking_policy_configuration": {
    "iosxe": {
      "doc": " Verify missing device-tracking policy configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            data_glean('bool', optional): data glean. Defaults to False\n            prefix_glean('bool', optional): prefix glean. Defaults to False\n            ipv4_limit_address_count('bool', optional): ipv4 address count limit. Defaults to False\n            ipv6_limit_address_count('bool', optional): ipv6 address count limit. Defaults to False\n            cache_guard('bool', optional): cache guard. Defaults to False\n            tracking('bool', optional): tracking. Defaults to False\n            max_time('int',optional): max check time. Defaults to 1\n            check_interval('int',optional): check intervals. Defaults to 1\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_device_tracking_policy_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L237"
    }
  },
  "verify_missing_ipv6_nd_raguard_configuration": {
    "iosxe": {
      "doc": " Verify missing ipv6 nd raguard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            max_hop_limit('bool', optional): maximum hop limit. Defaults to False\n            min_hop_limit('bool', optional): minimum hop limit. Defaults to False\n            managed_config_flag('bool', optional): managed config flag. Defaults to False\n            other_config_flag('bool', optional): other config flag. Defaults to False\n            max_router_preference('bool', optional): maximum router preference. Defaults to False\n            match_ra_prefix('bool', optional): match ra prefix-list. Defaults to False\n            match_ipv6_access_list('bool', optional): match ipv6 access-list. Defaults to False\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_ipv6_nd_raguard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L518"
    }
  },
  "verify_missing_ipv6_source_guard_configuration": {
    "iosxe": {
      "doc": " Verify missing ipv6 source guard configurations\n        Args:\n            device('obj'): device object\n            policy_name('str'): policy name\n            trusted_port('bool', optional): trusted port. Defaults to False\n            validate_prefix('bool', optional): validate prefix. Defaults to False\n            permit('bool', optional): permit traffic. Defaults to False\n            deny('bool', optional): deny traffic. Defaults to False\n            max_time('int', optional): max check time. Defaults to 20\n            check_interval('int', optional): check intervals. Defaults to 10\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "sisf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_missing_ipv6_source_guard_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sisf/verify.py#L646"
    }
  },
  "verify_mka_session": {
    "iosxe": {
      "doc": " To Verify MKA MACsec sessioN\n        Args:\n            device ('obj'): device to use\n            intf   ('str'): interface details\n            status ('str'): status of MKA\n            ckn    ('str'): ckn of mka\n            timeout('int'): timeout value\n            status2('str'): expected status of MKA\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            SubCommandFailure\n    ",
      "module_name": "macsec.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mka_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/macsec/verify.py#L16"
    }
  },
  "verify_module_serial_num": {
    "iosxr": {
      "doc": " Verify module serial number is matched with expected number\n\n        Args:\n            device (`obj`): Device object\n            module (`str`): Module name\n            expected_serial_num (`str`): Expected serial number\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_serial_num",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L18"
    }
  },
  "verify_module_status": {
    "iosxe": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n            ignore_modules ('list'): Modules to ignore status check\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L188"
    },
    "iosxr": {
      "doc": " Check status of slot using 'show platform'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check slot status\n            interval ('int'): Max interval to re-check slot status\n            ignore_modules ('list'): Modules to ignore the status check\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/platform/verify.py#L95"
    },
    "nxos": {
      "doc": " Check status of slot using 'show module'\n        Args:\n            device ('obj'): Device object\n            timeout ('int'): Max timeout to re-check module status\n            interval ('int'): Max interval to re-check module status\n            ignore_modules ('list'): Modules to ignore the status check\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_module_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/verify.py#L214"
    }
  },
  "verify_mpls_binding_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            ipv4 (`str`): ipv4 with prefix\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L152"
    },
    "iosxr": {
      "doc": " Verify local and remote binding labels for prefix\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            prefix (`str`): ipv4/ipv6\n        Returns:\n            verified result\n        Raises:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_binding_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L114"
    }
  },
  "verify_mpls_experimental_bits": {
    "com": {
      "doc": " Verify the first packet to have expected_dst_address has the\n        MPLS experiement bits set to expected_bit_value\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n        expected_bit_value (int): Expected bit value to check\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_experimental_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2265"
    }
  },
  "verify_mpls_forwarding_table_gid_counter": {
    "iosxe": {
      "doc": " Verifies counters for gid in mpls forwarding-table\n\n        Args:\n            prefix_type ('str')  : prefix type \n\t\t\tbytes_labeled_switched ('str') : counter value\n            mdt_data_cnt ('int', optional) : expected mdt count to be present in the output\n            max_time (`int`, optional): Max time, default: 60\n            check_interval (`int`, optional): Check interval, default: 10\n            expected_prefix_exempted ('int', optional): Number of prefixes expected not to learn traffic \n                                                        default: 2\n        Raises:\n            Exception\n\n        Returns\n            True or False\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_gid_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L679"
    }
  },
  "verify_mpls_forwarding_table_has_prefix_in_subnet_range": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_has_prefix_in_subnet_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L271"
    }
  },
  "verify_mpls_forwarding_table_local_label_for_subnet": {
    "iosxe": {
      "doc": " Verifies local label for entries with a prefix inside subnet\n\n        Args:\n            device ('obj'): Device to use\n            subnet ('str'): Subnet to verify inside\n            min_range ('int'): Minimum label\n            max_range ('int'): Maximum label\n            in_range ('bool'): True to verify between min_range/max_range, False to verify outside\n            max_time ('int'): Max time to check\n            check_interval ('int'): How often to check\n\n        returns:\n            True/False\n\n        raises:\n            N/A\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_local_label_for_subnet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L325"
    }
  },
  "verify_mpls_forwarding_table_outgoing_label": {
    "iosxe": {
      "doc": " Verify local and remote binding labels for ipv4\n\n        Args:\n            device (`obj`): Device object\n            ip (`str`): IP address\n            expected_label (`str`): Expected label\n            same_as_local (`bool`):\n                True if verify outgoing labels with local label\n                False if verify outgoing labels with expected label\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_outgoing_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L26"
    }
  },
  "verify_mpls_forwarding_table_vrf_mdt": {
    "iosxe": {
      "doc": " Verifies counters for mdt in mpls forwarding-table\n\n        Args:\n            vrf ('str')  : vrf name\n            prefix_type ('str') : prefix type \n\t\t\texpected_prefix ('str') : expected prefix \n\t\t\tbytes_labeled_switched ('str') : counter value\n            mdt_cnt ('int', optional): mdt data configured, default: 1\n            max_time (`int`, optional): Max time, default: 60\n            check_interval (`int`, optional): Check interval, default: 10\n        Raises:\n            Exception\n\n        Returns\n            True or False\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_forwarding_table_vrf_mdt",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L614"
    }
  },
  "verify_mpls_mldp_count": {
    "iosxe": {
      "doc": "Verify mpls mldp count\n\n    Args:\n            device ('obj'): Device object\n            mp2mp_entries ('int'): number of m2mp entries\n            p2mp_entries ('int'): number of p2mp entries\n            mldp_roots ('int'): number of mldp root\n            mldp_neighbors (`int`): number of mldp neighbotss\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mldp_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L466"
    }
  },
  "verify_mpls_mldp_neighbor": {
    "iosxe": {
      "doc": "Verify mpls mldp neighbors\n\n    Args:\n            device ('obj'): Device object\n            neighbors (`dict`): neighbors contains interface,ip address.\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mldp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L68"
    }
  },
  "verify_mpls_mldp_root": {
    "iosxe": {
      "doc": "Verify mpls mldp root\n\n    Args:\n            device ('obj'): Device object\n            neighbors (`list`): neighbors to be verified\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mldp_root",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L134"
    }
  },
  "verify_mpls_mroute_groupip": {
    "iosxe": {
      "doc": "Verify SM, SSM group ip output\n\n    Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            groupip (`str`): multicast group ip\n            sourceip (`str`, optional): sourceip of the multicast group ip\n            flag (`str`, optional): flag\n            outgng_intf (`str`, optional): outgoing interface\n            max_time (`int`, optional): Max time, default: 30\n            check_interval (`int`, optional): Check interval, default: 10\n            next_hop (`str`, optional): next hop address, default: None\n    ",
      "module_name": "multicast.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_mroute_groupip",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/multicast/verify.py#L296"
    }
  },
  "verify_mpls_ping": {
    "iosxe": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            mask (`str`):  mask of the ip address\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            vrf (`str`): vrf id\n            vc_id (`str`): vc id\n            tunnel_id (`str`): tunnel id\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L560"
    }
  },
  "verify_mpls_rlist_summary_before_and_after_sso": {
    "iosxe": {
      "doc": " Verify whether rlist summary is same before and after sso on both active and standby device\n        Args:\n            device ('obj'): Device object\n            active_rlist_summary_bsso ('int'): active device rlist summary result before sso\n            standby_rlist_summary_bsso ('int'): standby device rlist summary result before sso\n            current_lspvif_adj_label_count ('bool'): True if current lspvif adjaceny label count needs to be verified\n                                                     False if current lspvif adjaceny label count need not be verified\n        Return:\n            True if rlist summary are same on active and standby device before and after sso\n            or else returns False\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_rlist_summary_before_and_after_sso",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L235"
    }
  },
  "verify_mpls_summary_label": {
    "iosxe": {
      "doc": " Verifying mpls label value with label stack value\n        Args:\n            device ('obj'): Device object\n            label_stack ('str'): Label value\n            prefix('str'): Prefix value\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_summary_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L740"
    }
  },
  "verify_mpls_summary_lspa": {
    "iosxe": {
      "doc": " Verifying mpls lspa value with bgp value\n      \n        Args: \n            bgp_value('str'): Bgp value\n        Returns:\n            result(`str`): verify result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_mpls_summary_lspa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L765"
    }
  },
  "verify_neighbor_count": {
    "iosxe": {
      "doc": " verify the neighbor count\n\n        Args:\n            device('obj'): device to configure on\n            protocol('str'): Protocol name\n            neighbor'str'): neighbor (or) neighbors\n            value ('str'): grep the count using specific value\n            neighbor_count (int): expected neighbor count details\n        Return:\n            boolean\n        Raises:\n            SubCommandFailure: Failed executing command\n    ",
      "module_name": "protocols.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_neighbor_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/protocols/verify.py#L9"
    }
  },
  "verify_neighbor_state_went_down": {
    "junos": {
      "doc": " Verifies message in log\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface that went down\n            realm ('str'): ospf/ospf3 realm\n            fail_reason ('str'): Reason state changed from full to down\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_neighbor_state_went_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L239"
    }
  },
  "verify_next_hop": {
    "iosxe": {
      "doc": "\n    Verifies that route's next hop matches that of expected_next_hop.\n\n    Args:\n        device (): Device used to run commands\n        route ('str'): Route whose next hop will be checked\n        expected_next_hop ('str'): Next hop that route is expected to match\n\n    Returns True if route's next hop matches expected_next_hop, False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_next_hop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L988"
    }
  },
  "verify_next_hop_in_route": {
    "junos": {
      "doc": "Verify next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_next_hop ('str'): Next Hop address\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n            active_tag (bool, optional): True if needs to verify next hop of best path. Default to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1768"
    }
  },
  "verify_next_hops": {
    "iosxe": {
      "doc": "\n    Verifies that the routes' next hops match that of expected_next_hop.\n\n    Args:\n        device (): Device used to run commands\n        routes ('list'): Routes whose next hops will be checked\n        expected_next_hop ('str'): Next hops that routes are expected to match\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_next_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1010"
    }
  },
  "verify_no_access_session": {
    "iosxe": {
      "doc": "\n    Verify access-session monitor present in the interface \n    Args:\n        device ('obj'): device object\n        interface ('str'): interface to check\n    Returns:\n        result(bool): True if present else false\n    Raises:\n        SubCommandFailure: If command not executed raises subcommand failure error\n    ",
      "module_name": "dot1x.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_access_session",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/verify.py#L43"
    }
  },
  "verify_no_interface_errors": {
    "junos": {
      "doc": " Verify interface input and output errors\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Pass interface in show command\n            type (`str`, Optional): Error type to check. Options are 'input', 'output', and None\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_interface_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L730"
    }
  },
  "verify_no_interface_ip_route_connected": {
    "iosxe": {
      "doc": "Verify interface IP address route is not present in\n        - show ip route connected\n\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            ip_address (`str`): Interface ip address\n            prefix (`int`): prefix length\n            vrf (`str`): vrf name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): verify result\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_interface_ip_route_connected",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L402"
    }
  },
  "verify_no_isis_neighbor": {
    "iosxr": {
      "doc": " Verify ISIS neighbors not found\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "isis.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_isis_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/isis/verify.py#L66"
    }
  },
  "verify_no_log_output": {
    "junos": {
      "doc": "\n    Verify no log exists\n\n    Args:\n        device('obj'): device to use  \n        file_name('str') : File name to check log\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        invert ('bool', 'optional'): Inverts to check if it doesn't exist\n        match ('str' or 'list', 'optional'): used in show log command to specify output\n        exclude ('str' or 'list', 'optional'): used in show log command to exclude output\n\n    Returns:  \n        Boolean       \n    Raises:\n        N/A    \n    ",
      "module_name": "log.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_log_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/log/verify.py#L114"
    }
  },
  "verify_no_mpls_header": {
    "com": {
      "doc": " Verify no mpls header\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_dst_address (str): Destination IP address to search for\n\n    Returns:\n        bool: True or False\n\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_mpls_header",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2716"
    }
  },
  "verify_no_ntp_association_configuration": {
    "iosxr": {
      "doc": " Verify no NTP association configuration on the device\n\n        Args:\n            device (`obj`): Device object\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ntp_association_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L287"
    }
  },
  "verify_no_ospf3_neigbor_output": {
    "junos": {
      "doc": " Verifies if ospf3 neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf3_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L117"
    }
  },
  "verify_no_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L861"
    }
  },
  "verify_no_ospf_neigbor_output": {
    "junos": {
      "doc": " Verifies ospf neighbor doesn't exists\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface being searched for\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospf_neigbor_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L181"
    }
  },
  "verify_no_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospfv3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_no_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L609"
    }
  },
  "verify_node_reachable": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n\n        Returns:\n            boolean: True/False\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_node_reachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L16"
    }
  },
  "verify_node_state": {
    "virl": {
      "doc": "Verify node reachable\n\n        Args:\n            device (`obj`): Device object\n            simulation_name ('str'): simulation name\n            node_name ('str'): node name\n            max_time (`int`): maximum wait time in seconds. Default: 300\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 15\n            state (`str`): state to verify\n\n        Returns:\n            state ('str'): node state\n        \n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_node_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L51"
    }
  },
  "verify_ntp_association_with_server": {
    "iosxe": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L216"
    },
    "iosxr": {
      "doc": "Verify association with server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address_server (`str`): IP address to server\n            peer_mode (`str`): peer mode type\n            max_stratum (`int`): maximum stratum value\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_association_with_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L191"
    }
  },
  "verify_ntp_leap_second": {
    "iosxe": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L148"
    },
    "iosxr": {
      "doc": " Verify that leap second happened\n        Args:\n            device (`obj`): Device object\n            time_list (`obj`): timedelta object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_leap_second",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L127"
    }
  },
  "verify_ntp_mode": {
    "junos": {
      "doc": " Verify a peer has expected ntp mode\n\n        Args:\n            device (`obj`): Device object\n            expected_mode (`str`): Expected mode\n            expected_peer (`str`): Expected peer IP\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_mode",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ntp/verify.py#L10"
    }
  },
  "verify_ntp_time": {
    "iosxe": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L170"
    },
    "iosxr": {
      "doc": " Verify ntp clock is same on two devices\n\n        Args:\n            device (`obj`): Device object\n            target (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L147"
    }
  },
  "verify_ntp_time_changed": {
    "iosxe": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L120"
    },
    "iosxr": {
      "doc": " Verify that time has changed on clock\n\n        Args:\n            device (`obj`): Device object\n            search_time (`str`): time to search\n                ex ) search_time = '23:59:55'\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ntp_time_changed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L103"
    }
  },
  "verify_num_routes_equal_before_and_after_clear": {
    "iosxe": {
      "doc": "\n    Verifies that the number of routes before\n    and after running the clr_cmd are equal\n\n    Args:\n        device (): Device used to run commands\n        show_cmd ('str'): show command to run\n        clr_cmd ('str'): clear command to run\n\n    Returns True if number of routes before and after clear are equal, None if exception,\n    False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_num_routes_equal_before_and_after_clear",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1025"
    }
  },
  "verify_number_of_interfaces": {
    "iosxe": {
      "doc": " Verify  verify number of interfaces in device\n        Args:\n            device (`obj`): Device object\n            expected_fast_ethernet ('str'): Expected fast ethernet interfaces. \n            Default to None if no inputs\n            expected_gigabit_ethernet ('str'): Expected gigabit ethernet interfaces.\n            Default to None if no inputs\n            expected_two_gigabit_ethernet ('str'): Expected 2.5 gigabit ethernet interfaces. \n            Default to None if no inputs\n            expected_five_gigabit_ethernet ('str'): Expected five gigabit ethernet interfaces. \n            Default to None if no inputs\n            expected_ten_gigabit_ethernet ('str'): Expected ten gigabit ethernet interfaces. \n            Default to None if no inputs\n            expected_virtual_ethernet ('str'): Expected virtual gigabit ethernet interfaces. \n            Default to None if no inputs\n            max_time ('int', Optional): Max time, default: 15 seconds\n            check_interval ('int', Optional): Check interval, default: 5 seconds\n        Returns:\n            result ('bool'): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_number_of_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L431"
    }
  },
  "verify_nve_evni_peer_ip_state": {
    "iosxe": {
      "doc": "Issues `show nve peers peer-ip <>` on device and checks for:\n\n       Args:\n            device ('obj')      : device to execute on\n            peer_ip ('str')     : IP address of peer to be checked\n            local_vni('str')    : VNI field in output\n            evni('str')         : eVNI field in output\n            state('str')        : UP/DOWN\n            max_time('int')     : max time for Timeout\n            check_interval('int): check interval period for Timeout\n       Returns:\n            True/False\n        ",
      "module_name": "evpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_nve_evni_peer_ip_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/evpn/verify.py#L13"
    }
  },
  "verify_object_manager_error_objects_statistics": {
    "iosxe": {
      "doc": " Verify show platform software object-manager {sp_type} statistics\n        Args:\n            device (`obj`): Device object\n            sp_type (`str`): fp active | fp standby\n            expected_error_objects (`int`): expected no.of error objects\n\n        Returns:\n            True : returns true in case of passed scenario\n            False : returns false if not expected output\n    ",
      "module_name": "acl.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_object_manager_error_objects_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/acl/verify.py#L180"
    }
  },
  "verify_opaque_type_7_prefix_and_flags": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_opaque_type_7_prefix_and_flags",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L727"
    }
  },
  "verify_operation_state": {
    "com": {
      "doc": "Verify the operation state of devcie\n        Args:\n            device (obj): Device object\n            operation_state (str): Operation state of device\n            max_time (int, optional): Maximum time in seconds. Defaults to 100\n            check_interval (int, optional): check interval in seconds. Defaults to 10\n\n        Returns:\n            True - if the expected Operation is seen\n            False - if the expected Operation is NOT seen\n\n        Raises:\n            N/A\n\n        ",
      "module_name": "cheetah.ap.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_operation_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/cheetah/ap/verify.py#L7"
    }
  },
  "verify_optics_in_state": {
    "iosxr": {
      "doc": " Verify optics state\n\n        Args:\n            device (`obj`): Device object\n            optics (`str`): Optics port\n            rx_power (`float`): Expected RX power\n            controller_state (`str`): Expected controller state\n            led_state (`str`): Expected LED state\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "controllers.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_optics_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/controllers/verify.py#L12"
    }
  },
  "verify_ospf3_database_prefix": {
    "junos": {
      "doc": "API for verifying ospf3 prefix exists in database\n\n    Args:\n        device (obj): device object\n        expected_prefix (string): prefix being searched for\n        ipaddress (string): IP address to use in show command. Defaults to None. \n        max_time (int, optional): maximum timeoute time. Defaults to 60.\n        check_interval (int, optional): check interval. Defaults to 10.\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_database_prefix",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L659"
    }
  },
  "verify_ospf3_interface": {
    "junos": {
      "doc": " Verifies ospf3 interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval (`int`,optional): Check interval, default: 10 seconds\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L231"
    }
  },
  "verify_ospf3_interface_type": {
    "junos": {
      "doc": " Verifies ospf3 interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L17"
    }
  },
  "verify_ospf3_metric": {
    "junos": {
      "doc": "Verify the OSPF3 metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF3 metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L341"
    }
  },
  "verify_ospf3_neighbor_address": {
    "junos": {
      "doc": " Verifies ospf3 neighbors address\n        Args:\n            device ('obj'): device to use\n            max_time ('int'): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n            neighbor_address ('str'): neighbor_address\n            expected_state (`str`): expected neighbor state\n                                    Default to `Full`\n            expected_failure (`bool`): make result opposite\n                                       Default to False\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L963"
    }
  },
  "verify_ospf3_neighbor_instance_state_all": {
    "junos": {
      "doc": "Verifies all states of ospfv3 neighbor instance\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_state (str): Expected state to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_instance_state_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L933"
    }
  },
  "verify_ospf3_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf3 neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive('bool'): Flag to differentiate show commands. Defaults to False.            \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            \n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L161"
    }
  },
  "verify_ospf3_neighbor_state": {
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            neighbor_address ('str'): Neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L63"
    }
  },
  "verify_ospf3_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L389"
    }
  },
  "verify_ospf3_overview": {
    "junos": {
      "doc": " Verifies ospf3 overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L485"
    }
  },
  "verify_ospf3_route_nexthop": {
    "junos": {
      "doc": " Verifies nexthop of ospf3 route\n        Args:\n            device (`obj`): device to use\n            route (`str`): target route\n            expected_nexthop (`str`): expected nexthop of ospf3 route\n            max_time (`int`): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval (`int`): How often to check\n                                    Default to 10 secs\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf3_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1027"
    }
  },
  "verify_ospf_advertising_router_metric_in_database": {
    "junos": {
      "doc": " Verifies ospf advertising router metric in database\n\n        Args:\n            device ('obj'): Device to use\n            lsa_id: lsa_id to check\n            ospf_link_id ('str'): Ospf link id to check\n            expected_metric ('str'): Metric of desired ospf link\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_advertising_router_metric_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L806"
    }
  },
  "verify_ospf_database": {
    "junos": {
      "doc": " Verifies information from show ospf database\n\n    Args:\n        device ([obj]): Device object\n        lsa_type ([str], optional): LSA type to check. Defaults to None.\n        expected_lsa_id ([str], optional): Expected LSA ID to find. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        extensive (bool, optional): Extensive or not. Default to True.\n        invert (bool, optional): Inverts verification to check if criteria doesn't exist\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1217"
    }
  },
  "verify_ospf_database_contains_sid_neighbor_address_pairs": {
    "iosxe": {
      "doc": " Verifies the ospf database contains the sid and neighbor address pairs provided\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Ospf router id\n            pairs ('dict'): Get from 'get_ospf_sr_adj_sid_and_neighbor_address'\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_contains_sid_neighbor_address_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1449"
    }
  },
  "verify_ospf_database_flag": {
    "iosxe": {
      "doc": " Verify ospf database flag does (not) have expected value\n\n        Args:\n            device (`obj`): Device object\n            lsa_id (`str`): Link State ID\n            expected_flag (`str`): Expected flag value\n            has_flag (`bool`): True if expect to contain flag\n                               False if expect not to contain flag\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L25"
    }
  },
  "verify_ospf_database_lsa_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id {lsa_id}' against criteria\n\n    Args:\n        lsa_id ('str'): lsa_id to check\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n        expected_node_id ('str'): Expected node ID to check for\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_database_lsa_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L918"
    }
  },
  "verify_ospf_icmp_ping": {
    "iosxe": {
      "doc": "Verify ping\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate\n            expected_min_success_rate (int): Expected minimum success rate\n            vrf (`str`): vrf id\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n            size('int'):size\n            repeat('int'):repeat\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_icmp_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1536"
    }
  },
  "verify_ospf_in_state": {
    "iosxe": {
      "doc": " Verifies ospf process is enabled by checking if neighbors exist.\n        If a list of neighbors is passed it will also verify is those neighbors\n        have reached state\n\n        Args:\n            device('obj'): device to use\n            neighbors('list'): If specified, function will verify the neighbors\n                               are listed.\n            state('str'): If specified, function will verify the neighbors are in\n                          state.\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L277"
    }
  },
  "verify_ospf_interface": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_state ('str'): Interface state\n            extensive ('boolean'): Flag for extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_hello_interval ('str'): Expected hello interval\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L331"
    }
  },
  "verify_ospf_interface_cost": {
    "junos": {
      "doc": " Verifies ospf cost on interface\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            cost_type ('str'): Cost type configured\n            expected_cost ('int'): Expected configured cost\n            instance ('str'): Instance to use\n            area ('str'): Area to use\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_cost",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L22"
    }
  },
  "verify_ospf_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            subnet_mask ('str'): Subnet mask\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            max_time ('int', optional): Maximum time to keep checking. Defaults to 60 seconds.\n            check_interval (`int`): Check interval, default: 10\n\n        Returns:\n            Boolean\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L716"
    }
  },
  "verify_ospf_interface_type": {
    "junos": {
      "doc": " Verifies ospf interface type\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use\n            interface_type ('str'): Interface type\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_interface_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L288"
    }
  },
  "verify_ospf_max_metric_configuration": {
    "iosxe": {
      "doc": "Verify OSPF max-metric configuration\n\n        Args:\n            device (`obj`): Device object\n            ospf_process_id (`int`): OSPF process ID\n            metric_value (`int`): Metric value to be configured\n            expected_state (`str`): State to check\n            max_time (int): Maximum wait time for the trigger,\n                             in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result(`bool`): verify result\n            state\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_max_metric_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L91"
    }
  },
  "verify_ospf_metric": {
    "junos": {
      "doc": "Verify the OSPF metric\n\n    Args:\n        device (obj): Device object\n        interface (str): Interface name\n        metric (str): OSPF metric\n    Returns:\n        True/False\n    Raises:\n        N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L472"
    }
  },
  "verify_ospf_neighbor_address": {
    "junos": {
      "doc": " Verifies ospf neighbors address\n        Args:\n            device ('obj'): device to use\n            max_time ('int'): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval ('int'): How often to check\n                                    Default to 10 secs\n            neighbor_address ('str'): neighbor_address\n            expected_state (`str`): expected neighbor state\n                                    Default to `Full`\n            expected_failure (`bool`): flag to make result opposite\n                                       Default to False\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1278"
    }
  },
  "verify_ospf_neighbor_address_in_state": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is in a specific state\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            state ('str'): State to verify the interfaces are in\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_address_in_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1389"
    }
  },
  "verify_ospf_neighbor_addresses_are_not_listed": {
    "iosxe": {
      "doc": " Verifies that an ospf neighbor using the provided address is not listed\n\n        Args:\n            device ('obj'): Device to use\n            addresses ('list'): List of addresses to check\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_addresses_are_not_listed",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1420"
    }
  },
  "verify_ospf_neighbor_instance_state_all": {
    "junos": {
      "doc": "Verifies all states of ospf neighbor instance\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_state (str): Expected state to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_instance_state_all",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1465"
    }
  },
  "verify_ospf_neighbor_number": {
    "junos": {
      "doc": " Verifies the number of ospf neighbors that meets the criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_number ('str'): State occurrence\n            expected_state ('str'): Interface state\n            extensive ('bool'): Flag to differentiate show commands\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L403"
    }
  },
  "verify_ospf_neighbor_state": {
    "iosxe": {
      "doc": "Verify OSPF neighbor is state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State to check for neighbor\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False        \n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L152"
    },
    "junos": {
      "doc": " Verifies state of ospf neighbor\n\n        Args:\n            device ('obj'): device to use\n            expected_state ('str'): OSPF adjacency state that is expected\n            interface ('str'): Name of interface\n            neighbor_address ('str'): Neighbor address\n            extensive ('bool'): If ospf command is extensive\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbor_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L126"
    }
  },
  "verify_ospf_neighbors_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_interface ('str'): Interface to check for\n            instance ('str'): Instance to check for\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbors_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L526"
    }
  },
  "verify_ospf_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospf neighbors values don't exist\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L577"
    }
  },
  "verify_ospf_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1142"
    }
  },
  "verify_ospf_overview": {
    "junos": {
      "doc": " Verifies ospf overview values\n\n        Args:\n            device ('obj'): device to use\n            router_id ('str'): Router ID\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n            expected_configured_overload ('str'/'int'): Configured overload time or * for any\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_overview",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L623"
    }
  },
  "verify_ospf_route_nexthop": {
    "junos": {
      "doc": " Verifies nexthop of ospf route\n        Args:\n            device (`obj`): device to use\n            route (`str`): target route\n            expected_nexthop (`str`): expected nexthop of ospf route\n            max_time (`int`): Maximum time to keep checking\n                              Default to 90 secs\n            check_interval (`int`): How often to check\n                                    Default to 10 secs\n        Returns:\n            True/False\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_route_nexthop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1341"
    }
  },
  "verify_ospf_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database network lsa-id {ipaddress} detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1106"
    }
  },
  "verify_ospf_segment_routing_gb_srgb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing gb SRGB Base value\n\n        Args:\n            device ('obj'): Device to use\n            router_id ('str'): Router entry to look under\n            expected_srgb_base ('int'): Expected value for SRGB Base\n            expected_srgb_base ('int'): Expected value for SRGB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_segment_routing_gb_srgb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1141"
    }
  },
  "verify_ospf_segment_routing_lb_srlb_base_and_range": {
    "iosxe": {
      "doc": " Verifies segment routing lb SRLB Base value\n\n        Args:\n            device ('obj'): Device to use\n            process_id ('str'): Ospf process id\n            router_id ('str'): Router entry to look under\n            expected_srlb_base ('int'): Expected value for SRLB Base\n            expected_srlb_range ('int'): Expected value for SRLB Range\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n             True/False\n\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_segment_routing_lb_srlb_base_and_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1198"
    }
  },
  "verify_ospf_sid_database_prefixes_advertised": {
    "iosxe": {
      "doc": " Verifies prefixes advertised by advertising_router are only allowed_prefixes\n\n        Args:\n            device ('obj'): Device to execute command on\n            advertising_router ('str'): Advertising router id\n            allowed_prefixes ('list'): Prefixes allowed to be advertised.\n                                       Can be subset of full prefix.\n            max_time ('int'): Maximum time to wait\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_sid_database_prefixes_advertised",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L406"
    }
  },
  "verify_ospf_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L675"
    }
  },
  "verify_ospf_sr_label_preference": {
    "iosxe": {
      "doc": " Verify SR label preference for a process id\n        Args:\n            device ('obj'): Device object\n            process_id ('str'): Process if\n            expected_preference ('bool'): Sr label preference that is expected\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_sr_label_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1088"
    }
  },
  "verify_ospf_tilfa_in_state_in_ospf": {
    "iosxe": {
      "doc": " Verify if TI-LFA is enabled in OSPF\n\n        Args:\n            device ('str'): Device object\n            interface ('str'): Interface name\n            process_id ('int'): Process id\n            max_time (int): Maximum wait time in seconds checking an ouput\n            check_interval (int): Wait time between iterations when looping\n\n        Raises:\n            None\n        Returns:\n            True\n            False\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_tilfa_in_state_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L876"
    }
  },
  "verify_ospf_two_router_id": {
    "junos": {
      "doc": "Verify 'show ospf database lsa-id ipaddress detail' contains expected_id_1 and expected_id_2\n\n    Args:\n        device ('obj'): device to use\n        expected_id_1 ('str'): expected router id\n        expected_id_2 ('str'): expected router id\n        ipaddress ('str'): address to use in show command\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check            \n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospf_two_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1179"
    }
  },
  "verify_ospfv3_interface_in_database": {
    "junos": {
      "doc": " Verifies ospf interface exists with criteria\n\n        Args:\n            device ('obj'): device to use\n            expected_interface ('str'): Interface to use\n            expected_interface_type ('str'): Interface type\n            expected_metric ('str'): Metric of Interface\n            adv_router ('bool'): Whether to look for address in adversiting router\n            expect_output ('str'): Flag, either expecting output or no output\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            Boolean\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_interface_in_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L537"
    }
  },
  "verify_ospfv3_neighbors_not_found": {
    "junos": {
      "doc": " Verifies ospfv3 neighbors values exists\n\n        Args:\n            device ('obj'): device to use\n            extensive ('str'): If to check with extensive command. Defaults to False\n            max_time ('int'): Maximum time to keep checking. Defaults to 90\n            check_interval ('int'): How often to check. Defaults to 10\n            expected_interface ('str'): Interface to check for. Defaults to None\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_neighbors_not_found",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L439"
    }
  },
  "verify_ospfv3_no_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router doesn't contain expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_no_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L898"
    }
  },
  "verify_ospfv3_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L802"
    }
  },
  "verify_ospfv3_router_id": {
    "junos": {
      "doc": "Verify 'show ospf3 database network detail' attached-router contains expected_id\n\n    Args:\n        device ('obj'): device to use\n        expected_id ('str'): expected router id\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_router_id",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L863"
    }
  },
  "verify_ospfv3_spf_delay": {
    "junos": {
      "doc": " Verify SPF delay\n\n        Args:\n            device('obj'): device to use\n            expected_spf_delay('float'): SPF delay time    \n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:  \n            Boolean       \n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ospfv3_spf_delay",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L303"
    }
  },
  "verify_path_type": {
    "junos": {
      "doc": "Verify 'show ospf route network extensive'\n\n    Args:\n        device ('obj'): device to use\n        expected_interface ('str'): address to verify\n        expected_path_type ('str'): path to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_path_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1045"
    }
  },
  "verify_pattern_in_output": {
    "iosxe": {
      "doc": "\n        Verifies pattern list in output in sequence\n        Args:\n            output (str): Output string in which pattern needs to be verified\n            pattern_list (list): List of patterns to verify in output\n        Returns:\n            bool\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pattern_in_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L61"
    }
  },
  "verify_pattern_in_show_logging": {
    "iosxe": {
      "doc": "Verifies the pattern in show logging output\n        Args:\n            device (`obj`): Device object\n            pattern_list (`list`): pattern list to be verified in the output\n            exclude (`str`, optional): String to exclude from show logging\n            include (`str`, optional): String to include from show logging\n            output (`list`, optional): output of show logging in list\n        Returns:\n            True if pattern list matches in show logging output\n            False if pattern list does not match in show logging output\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pattern_in_show_logging",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L154"
    }
  },
  "verify_pcap_as_path": {
    "com": {
      "doc": " Verify pcap AS path values\n    Args:\n        pcap_location (obj): PCAP file location\n        layer (str): Given target route address\n        expected_as_path (str): Expected AS path value\n\n    Returns:\n        bool: True of False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3371"
    }
  },
  "verify_pcap_capability": {
    "com": {
      "doc": " Verify pcap AS path values\n    Args:\n        pcap_location (obj): PCAP file location\n        source (str): Source address\n        destination (str): Destination address\n        expected_capability (str or int): Expected capability in string or integer\n\n    Returns:\n        bool: True of False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_capability",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L3475"
    }
  },
  "verify_pcap_dscp_bits": {
    "com": {
      "doc": "Verifies the dscp bits of packets in a capture file\n\n    Args:\n        pcap_location (str): Location of pcap file\n        expected_bits (str/int): Expeceted bits to find / Integer to be converted to bits\n        position (int, optional): Which packet to check. Defaults to 0.\n        expected_protocol (str, optional): Expected protocol to verify against. Defaults to None\n        expected_protocol_message_type (str, optional): Expected protocol message type. Defaults to None\n                                                        Eg.BGPOpen, BGPUpdate, BGPKeepAlive\n        expected_dst_port_number (int, optional): Expected destination port number to verify again. Defaults to None\n        expected_src_address (str, optional): Expected source IP address. Defaults to None\n        expected_dst_address (str, optional): Expected destination IP address. Defaults to None\n        check_all (bool, optional): Ignore position and check all packets until one is found that meets criteria. Defaults to False\n        expected_src_port_number (int, optional): Expected source port number to verify again. Defaults to None\n        port_and_or (str, optional): Whether to and/or the expected port number results. Defaults to 'and'\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_dscp_bits",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2298"
    }
  },
  "verify_pcap_has_imcp_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcp destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmp destination reachable message in pcap\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_has_imcp_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2069"
    }
  },
  "verify_pcap_has_imcpv6_destination_unreachable": {
    "com": {
      "doc": " Verify that the pcap file has messages with imcpv6 destination\n        unreachable with type and code\n\n        Args:\n            pcap_location ('str'): location of pcap file\n            msg_type ('int'): pcap message type\n            msg_code ('int'): pcap message code\n        Returns:\n            Boolean if icmpv6 destination reachable message in pcap\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_has_imcpv6_destination_unreachable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2103"
    }
  },
  "verify_pcap_ldp_packet": {
    "com": {
      "doc": "Verifies expected type of a packet\n    Args:\n        pcap_location (str): Location of pcap file\n        expected_ldp_hello (bool): Expected LDPHello\n        expected_ldp_keepalive (bool): Expected LDPKeepAlive\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_ldp_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4208"
    }
  },
  "verify_pcap_mpls_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_src_port_number(int): Expected source port number to verify again. Defaults to None\n        expected_dst_port_number (int): Expected destination port number to verify again. Defaults to None\n        port_and_or (str, optional): Whether to and/or the expected port number results. Defaults to 'and'\n        expected_inner_exp_bits (int): Expected inner Exp bits\n        expected_outer_exp_bits (int): Expected outer Exp bits\n        expected_tos (int): Expected tos value\n        expected_protocol_message_type (str, optional): Expected protocol message type. Defaults to None\n                                                        Eg.BGPOpen, BGPUpdate, BGPKeepAlive\n        expected_mpls_label (str): Expected mpls label\n        check_all (bool): Check all matching packets\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_mpls_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2558"
    }
  },
  "verify_pcap_packet": {
    "com": {
      "doc": " Verify pcap mpls packets values\n\n    Args:\n        pcap_location (obj): PCAP file location\n        expected_src_address (str): Source IP address to search for\n        expected_dst_address (str): Destination IP address to search for\n        expected_protocol (str): Expected protocol in packet\n        expected_dst_port_number (int): Expected destination port number\n        expected_src_port_number (int): Expected source port number\n        expected_tos (int): Expected type of service(tos) value\n        expected_traffic_class (str): Expected traffic class\n        expected_fragment_flag (bool): Expected Fragment flag\n        check_all (bool): Check all matching packets\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2822"
    }
  },
  "verify_pcap_packet_destination_port": {
    "com": {
      "doc": "Verifies expected destination port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_destination_port (`str`): Expected destination port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_destination_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2528"
    }
  },
  "verify_pcap_packet_protocol": {
    "com": {
      "doc": "Verifies expected protocol of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_protocol (`str`): Expected protocol name\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2468"
    }
  },
  "verify_pcap_packet_source_port": {
    "com": {
      "doc": "Verifies expected source port of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_source_port (`str`): Expected source port\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_source_port",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2497"
    }
  },
  "verify_pcap_packet_type": {
    "com": {
      "doc": "Verifies expected type of a packet\n\n    Args:\n        pcap_location (`str`): Location of pcap file\n        expected_type (`str`): Expected type\n        position (`int`, optional): Which packet to check. Defaults to 0.\n\n    Returns:\n        bool: True or False\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_pcap_packet_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L2439"
    }
  },
  "verify_ping": {
    "aireos": {
      "doc": " Verify ping\n\n    Args:\n        device ('obj'): Device object\n        ip_addr ('str'): An ip address\n        max_time ('int'): Max time to execute; default is 30\n        check_interval ('int'): An interval to check again; default is 10\n    ",
      "module_name": "verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/aireos/verify.py#L22"
    },
    "ios": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate (default: 100)\n            expected_min_success_rate (int): Expected minimum success rate (default: 1)\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/utils.py#L461"
    },
    "iosxe": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int,optional): Expected maximum success rate ( Default is 100 )\n            expected_min_success_rate (int,optional): Expected minimum success rate ( Default is 1 )\n            count ('int',optional): Count value for ping command ( Default is None )\n            source ('str',optional): Source IP address ( Default is None )\n            vrf (`str`,optional): vrf id ( Default is None )\n            max_time (`int`,optional): Max time ( Default is 60 )\n            check_interval (`int`,optional): Check interval ( Default is 10 )\n            size ('int',optional): Datagram size ( Default is None )\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L467"
    },
    "iosxr": {
      "doc": "Verify ping\n\n    Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            expected_max_success_rate (int): Expected maximum success rate (default: 100)\n            expected_min_success_rate (int): Expected minimum success rate (default: 1)\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/utils.py#L23"
    },
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            size {'str'}: Size value for ping command\n            tos {'str'}: tos value for ping command\n            ping_size {'str'}: data bytes expected\n            ttl ('int'): ttl value passed in command\n            wait ('int'): wait value passed in command\n            mpls_rsvp ('str'): MPLS RSVP value\n            loss_rate ('int'): Expected loss rate value\n            count ('int'): Count value for ping command\n            interface ('str'): source interface\n            source ('str'): Source IP address, default: None\n            rapid ('bool'): Appears in command or not, default: False\n            do_not_fragment ('bool'): Appears in command or not, default: False\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L15"
    }
  },
  "verify_ping_from_server": {
    "iosxe": {
      "doc": "Verify ping from server\n\n        Args:\n            server (`obj`): Server Device object\n            ip_address (`str`): IP address to ping\n            count (`int`): repeat ping count\n            interface (`str`): source ip/interface value\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "server.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/server/verify.py#L10"
    }
  },
  "verify_ping_one_iterations": {
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address value\n            size {'str'}: Size value for ping command\n            tos {'str'}: tos value for ping command\n            ping_size {'str'}: data bytes expected\n            ttl ('int'): ttl value passed in command\n            wait ('int'): wait value passed in command\n            mpls_rsvp ('str'): MPLS RSVP value\n            loss_rate ('int'): Expected loss rate value\n            count ('int'): Count value for ping command\n            source ('str'): Source IP address, default: None\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_one_iterations",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L191"
    }
  },
  "verify_ping_packet_transmission": {
    "junos": {
      "doc": " Verify ping loss rate on ip address provided\n\n        Args:\n            device ('obj'): Device object\n            address ('str'): Address\n            count ('int'): Count value for ping command\n            expected_transmitted_rate ('int'): Expected transmitted rate\n            max_time (`int`, Optional): Max time, default: 30 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n        Raises:\n            None\n    ",
      "module_name": "ping.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ping_packet_transmission",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ping/verify.py#L139"
    }
  },
  "verify_pki_trustpoint_state": {
    "iosxe": {
      "c9800": {
        "doc": "Verify the pki state  has configured\n    Args:\n        device (obj): Device object\n        trustpoint_name (str): trustpoint name\n        max_time (int, optional): Maximum time. Defaults to 60\n        check_interval (int, optional): check interval. Defaults to 10\n\n    Returns:\n        True - if the values of keys_generated, issuing_ca_authenticated, certificate_requests are \"yes\"\n        False - if the values of keys_generated, issuing_ca_authenticated, certificate_requests are other then \"yes\"\n\n    Raises:\n        None\n\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_pki_trustpoint_state",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/verify.py#L33"
      }
    }
  },
  "verify_platform_details": {
    "iosxe": {
      "doc": "Verify  verify platform details in device\n        Args:\n            device (`obj`): Device object\n            expected_hw_ver ('str'): Expected hardware version. Default to None if no inputs\n            expected_mac_address ('str'): Expected mac_address. Default to None if no inputs\n            expected_model_name ('str'): Expected model name. Default to None if no inputs\n            expected_ports ('str'): Expected ports. Default to None if no inputs\n            expected_slot ('str'): Expected slot. Default to None if no inputs\n            expected_sn ('str'): Expected serial number . Default to None if no inputs\n            expected_sw_ver ('str'): Expected software version. Default to None if no inputs\n            max_time (`int`, Optional): Max time, default: 15 seconds\n            check_interval (`int`, Optional): Check interval, default: 5 seconds\n        Returns:\n            result ('bool'): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_platform_details",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L365"
    }
  },
  "verify_platform_model_number": {
    "iosxe": {
      "doc": " Verify given pid are as expected model number or chassis type\n        Args:\n            device ('obj'): Device object\n            pid ('str'): Product Identifcation Number(PID)  or model number or chassis type\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_platform_model_number",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L349"
    }
  },
  "verify_platform_resources": {
    "iosxe": {
      "doc": "\n    Verifies the details for show platform resource\n    Args:\n            device (`obj`): Device object\n            dram_max ('str'): max value for the dram for a device\n            tmpfs_max ('str'): max value for the tmpfs for a device\n            bootflash_max ('str'): max value for the bootflash for a device\n            harddisk_max ('str'): max value for the harddisk for a device\n            max_time ('str', Optional): Max time, default: 15 seconds\n            check_interval ('str', Optional): Check interval, default: 5 seconds\n    Returns:\n            result ('bool'): Verified result\n    Raises:\n            N/A\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_platform_resources",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/verify.py#L499"
    }
  },
  "verify_policy_map_packet_count_match": {
    "iosxe": {
      "doc": " Compare the packets' count for the provided traffic flows\n\n        Args:\n            flows_dict (`dict`): Dictionary of traffic flows\n            class_map_out_packets_dict (`dict`): Dictionary of retrieved traffic flows packets count\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_packet_count_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L210"
    }
  },
  "verify_policy_map_packets_counting_up": {
    "iosxe": {
      "doc": "Verify packets are counting up\n\n        Args:\n            device (`obj`): Device object\n            packet_classes (`Dict`): list of packet classes\n                ex.)\n                    packet_classes: ['BGP_Class', 'OSPF_Class', 'LDP_Class']\n\n            control_plane_policy (`str`): Control policy name\n            policy_map ('str'): policy map name\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_packets_counting_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L427"
    }
  },
  "verify_policy_map_policy_map_configuration": {
    "iosxe": {
      "doc": " Verify policy map configuration\n\n        Args:\n            device (`obj`): Device object\n            interfaces (`List`): List of interfaces\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L172"
    }
  },
  "verify_policy_map_policy_map_configuration_policy_map_with_operational": {
    "iosxe": {
      "doc": " Compare configuration policy map with operational \n\n        Args:\n            configurational_container (`dict`): Dictionary of configurational container\n            operational_container (`dict`): Dictionary of operational container\n            table (`obj`): Table object\n            spaces ('str'): Spaces in table field\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configuration_policy_map_with_operational",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L338"
    }
  },
  "verify_policy_map_policy_map_configurational_operational_policy_map": {
    "iosxe": {
      "doc": "Verify configured policy map and operational state match\n\n        Args:\n            device (`obj`): Device object\n            configurational_out (`Dict`): Configurational status\n            interface (`str`): Interface name\n\n        Returns:\n            result(`bool`): Verify result\n            table(`obj`): Table result\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_policy_map_configurational_operational_policy_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L21"
    }
  },
  "verify_policy_map_row_added": {
    "iosxe": {
      "doc": "Add row to Table\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            parameter_value (`str`): Parameter value\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_row_added",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L137"
    }
  },
  "verify_policy_map_values": {
    "iosxe": {
      "doc": "Verify running configuration values to operational one and add Table row\n\n        Args:\n            table (`obj`): Table object\n            parameter_name (`str`): Parameter name\n            config_key (`str`): Configuration key to check\n            oper_key (`str`): Operational key to check\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "policy_map.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_policy_map_values",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/policy_map/verify.py#L95"
    }
  },
  "verify_port_channel_member_state": {
    "iosxe": {
      "doc": "Verifies interface list matches the bundle state\n    i.e. Does interface port-channel state match the bundle_state\n        Args:\n            device ('obj')    : device to use\n            port_channel ('str'): Port-channel interface (i.e. Port-channel5)\n            interfaces ('list'): List of member interfaces to check\n            bundle_state ('bootlean',optional): Bundle State to compare (default is True)\n            max_time ('int'): Max time to check status (Default is 60s)\n            check_interval ('int'): Loop interval (default is 10s)\n        Returns:\n            Boolean. True if interfaces list bundle state match bundle_state. False otherwise.\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_port_channel_member_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L922"
    }
  },
  "verify_portfast_state": {
    "iosxe": {
      "doc": "\n    Verify portfast is enabled or not on interface\n    Args:\n        device ('obj'): device object\n        interface ('str'): interface to check\n    Returns:\n        result(bool): True if enabled else false\n    Raises:\n            SubCommandFailure: If command not executed raises subcommand failure error\n    ",
      "module_name": "spanning_tree.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_portfast_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/verify.py#L9"
    }
  },
  "verify_ppm_transmissions": {
    "junos": {
      "doc": " Verifiy the session state\n\n    Args:\n        device (obj): Device object\n        destination (str): route address\n        expected_distributed_values (list): list of boolean values describing transmission distributed\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        expected_interface (str, optional): Expected interface to check\n    ",
      "module_name": "ppm.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ppm_transmissions",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ppm/verify.py#L14"
    }
  },
  "verify_preference_show_route": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            address ('str'): address to be ued in show command\n            preference ('int'): Preference name\n            max_time (`int`): Max time, defaults to 60 seconds\n            check_interval (`int`): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_preference_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3298"
    }
  },
  "verify_protocol_next_hop_in_route": {
    "junos": {
      "doc": "Verify protocol next hop in route\n\n        Args:\n            device ('obj'): Device to use\n            route ('str'): IP address in show command\n            expected_protocol_next_hop ('str'): Protocol next Hop address\n            max_time ('int', optional): Maximum time to keep checking. Default to 60.\n            check_interval ('int', optional): How often to check. Default to 10.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_protocol_next_hop_in_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1853"
    }
  },
  "verify_ptp_8275_holdover_spec_duration": {
    "iosxe": {
      "doc": " Verify ptp 8275 holdover spec duration value in show ptp clock command\n        Args:\n            device ('obj'): Device object\n            holdover ('int'): PTP 8275 holdover spec duration\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_8275_holdover_spec_duration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L357"
    }
  },
  "verify_ptp_8275_local_clock_port_priority": {
    "iosxe": {
      "doc": " Verify ptp 8275 local clock port priority value in show ptp clock command\n        Args:\n            device ('obj'): Device object\n            interface ('list'): PTP interface\n            local_port_priority ('int'): PTP local clock port priority\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_8275_local_clock_port_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L318"
    }
  },
  "verify_ptp_8275_local_clock_priority": {
    "iosxe": {
      "doc": " Verify ptp 8275 local clock priority value in show ptp clock command\n        Args:\n            device ('obj'): Device object\n            local_priority ('int'): PTP local clock priority\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_8275_local_clock_priority",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L281"
    }
  },
  "verify_ptp_calibration_states": {
    "iosxe": {
      "doc": " Verify ptp parent values in show ptp parent command\n        Args:\n            device (`obj`): Device object\n            states ('str): PTP calibration state\n            domain ('str): PTP domain\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_calibration_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L245"
    }
  },
  "verify_ptp_clock": {
    "iosxe": {
      "doc": " Verify ptp clock values in show ptp clock command\n        Args:\n            device ('obj'): Device object\n            device_type ('str'): Clock type\n            domain ('int'): PTP domain\n            priority1 ('str'): PTP priority1\n            priority2 ('str'): PTP priority2\n            offset ('list'): PTP offset from master\n            dscp_event ('int'): PTP ip dscp event message (default value is 59)\n            dscp_general ('int'): PTP ip dscp general message ( default value is 47)\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_clock",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L104"
    }
  },
  "verify_ptp_counters": {
    "iosxe": {
      "doc": " Verify ptp fed counter values in show ptp fed command\n        Args:\n            device ('obj'): Device object\n            interfaces ('list'): PTP interfaces\n            sync_trans ('list'): Sync messages transmitted\n            follow_trans ('int'): Follow up messages transmitted\n            sync_recv ('list'): Sync messages received\n            follow_recv ('str'): Follow up messages received\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_counters",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L157"
    }
  },
  "verify_ptp_parent": {
    "iosxe": {
      "doc": " Verify ptp parent values in show ptp parent command\n        Args:\n            device (`obj`): Device object\n            priority1 ('str'): PTP priority1\n            priority2 ('str'): PTP priority2\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_parent",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L204"
    }
  },
  "verify_ptp_platform_fed_results": {
    "iosxe": {
      "doc": " Verify ptp fed values in show ptp fed command\n        Args:\n            device ('obj'): Device object\n            interfaces ('list'): PTP interfaces\n            states ('list'): Expected states\n            clock_mode ('str'): Clock mode\n            delay_mech ('str'): PTP delay mechanism\n            domain ('int'): PTP domain\n            profile ('str'): PTP profile\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval ('int'): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_platform_fed_results",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L55"
    }
  },
  "verify_ptp_profile": {
    "iosxe": {
      "doc": " Verify ptp state convergence in show ptp port interface \n        Args:\n            device ('obj'): Device object\n            mode ('str'): Expected ptp mode or configured profile\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_profile",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L394"
    }
  },
  "verify_ptp_states": {
    "iosxe": {
      "doc": " Verify ptp state convergence in show ptp port interface \n        Args:\n            device ('obj'): Device object\n            interface ('list'): PTP interface\n            states ('list'): Expected states\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "ptp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ptp_states",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ptp/verify.py#L16"
    }
  },
  "verify_push_present_in_show_route": {
    "junos": {
      "doc": "Verify if Push value is present in 'show route {address} extensive'\n\n        Args:\n            device ('obj'): Device to use\n            address ('str'): IP address for show command\n            push_value ('str'): Push value in show route {address} extensive command\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_push_present_in_show_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1333"
    }
  },
  "verify_rib_fib_lfib_consistency": {
    "iosxe": {
      "doc": " Verify the outgoing label for route are the same in:\n        - show ip route <route>\n        - show ip cef <route>\n        - show mpls forwarding-table <route>\n\n        Args:\n            device (`obj`): Device object\n            route (`str`): Route or ipn\n            none_pattern (`list`): None label pattern\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rib_fib_lfib_consistency",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L101"
    }
  },
  "verify_rollback_description": {
    "iosxe": {
      "doc": "\n    Verifies rollback label for rollback id\n    Args:\n        device ('obj'): Device object\n        rollback_id ('int'): rollback id for which label has to be verified\n        rollback_description ('str'): rollback label\n    Returns:\n        True if rollback label matches\n        False if rollback label not matches\n    Raises:\n        error\n    ",
      "module_name": "install.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rollback_description",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/verify.py#L85"
    }
  },
  "verify_rollback_label": {
    "iosxe": {
      "doc": "\n    Verifies rollback label for rollback id\n    Args:\n        device ('obj'): Device object\n        rollback_id ('int'): rollback id for which label has to be verified\n        rollback_label ('str'): rollback label\n    Returns:\n        True if rollback label matches\n        False if rollback label not matches\n    Raises:\n        error\n    ",
      "module_name": "install.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rollback_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/install/verify.py#L5"
    }
  },
  "verify_route_advertised_protocol_community": {
    "junos": {
      "doc": "Verify community has the given community_list against criteria\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Target route to check\n            community_list ('list(str)'): List of communities to verify\n            ip_address ('str'): IP address to check\n            protocol ('str'): Protocol name that passed in command\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking, default 60 seconds\n            check_interval ('int', optional): How often to check, default 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_advertised_protocol_community",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L438"
    }
  },
  "verify_route_all_as_length": {
    "junos": {
      "doc": "Verifies the as path length of all paths\n\n    Args:\n        device (object): Device object\n        route (str): Route to check path lengths of\n        expected_path_as_length (str): Expected AS path length\n        excluded_paths (list, optional): Paths to exclude from the count. Defaults to [].\n        max_time (int, optional): Max timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_all_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2849"
    }
  },
  "verify_route_as_length": {
    "junos": {
      "doc": " Verify the length as-path of best path and non best path\n\n        Args:\n            device (`obj`): Device object\n            route('str'): Target route address\n            expected_bestpath_as_length (`int`): Expected best path as length\n            expected_nonbestpath_as_length (`int`): Expected non best path as length, default: None\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_as_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2391"
    }
  },
  "verify_route_as_path_count": {
    "junos": {
      "doc": "Verify route as path count\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_count (int): Expected count to check against\n        excluded_paths (list, optional): Paths to exclude. Defaults to [].\n        best_path (bool, optional): Check the best path or the next, non-best path. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_internval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_as_path_count",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2771"
    }
  },
  "verify_route_best_path": {
    "junos": {
      "doc": " Verify Best path is toward $ip_address or with preference $preference\n\n        Args:\n            device (`obj`): Device object\n            target_route (`str`): Target route to check\n            ip_address (`str`): IP Address to verify is best path, default: None\n            preference (`int`): Preference of best path, default: None\n            active_tag (`str`, optional): Active tag to check, default: '*' (best path)\n            interface (`str`, optional): IP address in show command. Defaults to None. \n            extensive (`bool`, optional): 'extensive' added in the show command. Defaults to None.\n            expected_to (`str`, optional): Expected address that be towarded to. Defaults to None.\n            expected_med (`str`, optional): Expected med that be towarded to. Defaults to None.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1385"
    }
  },
  "verify_route_best_path_counter": {
    "junos": {
      "doc": " Verify best path counter\n\n        Args:\n            device ('str'): Device str\n            expected_count ('int'): Expected best path count\n            protocol ('str'): Protocol name. Default to None\n            ip_address ('str'): IP address. Default to None.\n            max_time (`int`, optional): Max time, defaults to 60 seconds\n            check_interval (`int`, optional): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path_counter",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3412"
    }
  },
  "verify_route_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of best path\n\n        Args:\n            device (`obj`): Device object\n            expected_metric (`int`): Expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1523"
    }
  },
  "verify_route_exists": {
    "junos": {
      "doc": " Verifies route exists via show route protocol bgp\n\n    Args:\n        device (obj): Device object\n        expected_route (str): Expected route\n        invert (bool): Default to False. Set to True if verify route doesn't exist.\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.    \n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3255"
    }
  },
  "verify_route_flag": {
    "junos": {
      "doc": " Verify the IGP/EGP flag\n\n        Args:\n            device (`obj`): Device object\n            target_route ('str'): Route to check\n            expected_flag (`str`): Expected IGP flag\n            active_tag (`str`): Flag for 'best path'. Defaults to '*'.\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n\n        Returns:\n            result (`bool`): Verified result\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_flag",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1911"
    }
  },
  "verify_route_forwarding_table": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        expected_nh_index (str): Expected nh-index. Defaults to None\n        expected_netif (str): Expected netif. Defaults to None\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_forwarding_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3022"
    }
  },
  "verify_route_forwarding_type": {
    "junos": {
      "doc": " Verifies route-forwarding type given a label\n\n    Args:\n        device (obj): Device object\n        label (str): Label to check\n        expected_type (str): Expected type\n        max_time (int, optional): Maximum sleep time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        str or None: mpls out label\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_forwarding_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1043"
    }
  },
  "verify_route_four_byte_as": {
    "junos": {
      "doc": " Verify best path counter\n\n        Args:\n            device ('str'): Device str\n            expected_as_path ('int'): Expected 4byte as path\n            peer_address ('str'): IP address.\n            target_address ('str', optional): IP address. Default to None\n            protocol_type ('str', optional): Protocol type. 'receive' or 'advertising'. Default to None\n            protocol ('str', optional): Protocol in command. Defaults to 'bgp'\n            no_protocol_type ('bool', optional): Used to differentiate show commands. Default to False\n            max_time (`int`, optional): Max time, defaults to 60 seconds\n            check_interval (`int`, optional): Check interval, defaults to 10 seconds\n        Returns:\n            True / False\n        Raises:\n            None    \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_four_byte_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3503"
    }
  },
  "verify_route_has_as_path": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        expected_as_path (str): Expected AS path\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n        invert (bool, optional): Inverts to check if AS path doesn't exist. Defaults to False.\n        extensive (bool, optional): True if show command ends with 'extensive'. Defaults to False.\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n        peer_addrress ('str', optional): Address used in show command. Defaults to None. \n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_as_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2109"
    }
  },
  "verify_route_has_as_path_length": {
    "junos": {
      "doc": "Verifies a BGP route has an AS path\n\n    Args:\n        device (object): Device object\n        expected_as_path_length (int): Expected AS path length\n        protocol_type (str, optional): Protocol type in show command, e.g., advertising-protocol\n                                        or receive-protocol. Defaults to 'receive'.\n        peer_address (str, optional): Peer address used in show command. Defaults to None.\n        target_address (str, optional): Target address used in show command. Defaults to None.\n        max_time (int, optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval (int, optional): How often to check. Default to 10 seconds.\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_as_path_length",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2203"
    }
  },
  "verify_route_has_no_output": {
    "junos": {
      "doc": "Verify route has no output\n\n    Args:\n        target_route ('str'): Route to check\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n        protocol ('str', optional): Protocol to check. Defaults to None.\n        invert ('bool', optional): Invert the operation. Defaults to False\n        protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                         or receive-protocol. Default to None.\n        peer_address ('str', optional): Address used in command. Defaults to None. \n        target_address ('str', optional): Address used in command. Defaults to None. \n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_has_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1701"
    }
  },
  "verify_route_instance_exists": {
    "junos": {
      "doc": "Verifies a route instance exists\n\n    Args:\n        devices (obj): Device object\n        instance_name (str): Instance name\n        expected_instance_name (str): Expected instance name to check for\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_instance_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3598"
    }
  },
  "verify_route_instance_type": {
    "junos": {
      "doc": "Verifies route instance type\n\n    Args:\n        device (obj): Device object\n        instance_name (str): Instance name\n        expected_type (str): Expected instance type\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_instance_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3565"
    }
  },
  "verify_route_is_advertised_or_received": {
    "junos": {
      "doc": " Verify the route is advertised\n\n        Args:\n            device ('obj'): Device object\n            protocol_type ('str'): Protocol type in show command, e.g., advertising-protocol or receive-protocol\n            expected_route ('str'): Expected route\n            address ('str'): IP address\n            target_address ('str'): Address used in show command\n            protocol ('str', optional): Protocol name that passed in command. Defaults to 'bgp'\n            extensive ('bool', optional): True means the show command contains 'extensive'. Defaults to False. \n            invert ('bool', optional): True means to verify not advertised or received. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60\n            check_interval ('int', optional): How often to check. Default to 10.     \n\n        Returns:\n            True/False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_is_advertised_or_received",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L935"
    }
  },
  "verify_route_known_via": {
    "iosxe": {
      "doc": " Verify route known via\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            known_via ('str'): Known via value\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_known_via",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L756"
    },
    "iosxr": {
      "doc": " Verify route known via\n\n        Args:\n            device ('obj'): Device object\n            route ('str'): Route address\n            known_via ('str'): Known via value\n            max_time ('int'): Max time in seconds checking output\n            check_interval ('int'): Interval in seconds of each checking \n        Return:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_known_via",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/routing/verify.py#L11"
    }
  },
  "verify_route_logical_system_has_no_output": {
    "junos": {
      "doc": "Verify route logical system has no output\n\n    Args:\n        logical_name ('str'): Logical system name\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n        invert ('bool', optional): Invert the operation. Defaults to False\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_logical_system_has_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3466"
    }
  },
  "verify_route_map": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            route_map_name (`str`): Route map name\n            expected_acl_name (`str`): Access-list name\n            expected_ip_next_hop (`str`): Next-hop ip\n            pbr_sequence_num (`str`): PBR Sequence number\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_map",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L15"
    }
  },
  "verify_route_non_best_path_metric": {
    "junos": {
      "doc": " Verify the metric of non best path\n\n        Args:\n            device (`obj`): Device object\n            non_expected_metric (`int`): Not expected metric number \n            ip_address (`str`): IP address in show command. \n            metric2(`bool`, optional): Flag used to distinguish 'metric' and 'metric2', default: False\n            max_time (`int`, optional): Max time, default: 60 seconds\n            check_interval (`int`, optional): Check interval, default: 10 seconds\n        \n        Returns:\n            result (`bool`): Verified result\n        \n        Raises:\n            N/A \n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_non_best_path_metric",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1613"
    }
  },
  "verify_route_output_empty": {
    "junos": {
      "doc": "Verifies if output is empty or not via 'show route protocol {protocol}'\n\n    Args:\n        addr_list('list'): List to verify\n        protocol ('str'): Protocol type to check in show route\n        ip_address ('str'): Address to use in show command\n        invert(bool, optional): Flips from verying \n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_output_empty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3664"
    }
  },
  "verify_route_peer_as": {
    "junos": {
      "doc": "Verify a BGP route's peer as\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_peer_as (str): Expected peer as to check for\n        best_path (bool, optional): Whether to check the best route or not. Defaults to True.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Checkout interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_peer_as",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3091"
    }
  },
  "verify_route_push_label": {
    "junos": {
      "doc": " Verifies there is Push expected_label in the table_name via show route ip_address\n\n    Args:\n        device (obj): Device object\n        table_name (str): Given table name\n        expected_label (str): Expected label\n        ip_address (str): IP address used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_push_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3148"
    }
  },
  "verify_route_same_as_peer_local": {
    "junos": {
      "doc": "Verifies a route's Peer AS and Local AS are the same\n\n    Args:\n        device (object): Device object\n        target_route (str): Target route to check\n        best_path (bool): Whether to check the best path or not\n        invert (bool, optional): Invert to check if they're different. Defaults to False.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_same_as_peer_local",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2913"
    }
  },
  "verify_route_table_label": {
    "junos": {
      "doc": " Verify the out label\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label. Defaults to None.\n            php_label (`str`): php label. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1212"
    }
  },
  "verify_route_table_label_output": {
    "junos": {
      "doc": " Verifies there is path via show route table table_name label label_name\n\n    Args:\n        device (obj): Device object\n        table_name (str): Table name used in show command. Defaults to 'mpls.0'\n        label_name (str): Given label used in show command\n        max_time (int, optional): Maximum sleep time. Defaults to 60 seconds.\n        check_interval (int, optional): Check interval. Defaults to 10 seconds.\n\n    Returns:\n        bool\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_label_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3201"
    }
  },
  "verify_route_table_mpls_label": {
    "junos": {
      "doc": "Verifies mpls label based on table name\n\n    Args:\n        device ('str'): Device object\n        table ('str'): Table name\n        label ('bool'): label for show command\n        expected_mpls_label('str'): Expected MPLS label\n        max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n        check_interval ('int', optional): How often to check. Default to 10 seconds.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_mpls_label",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2027"
    }
  },
  "verify_route_table_output_interface": {
    "junos": {
      "doc": " Verify the route table output interface\n\n        Args:\n            device (`obj`): Device object\n            label (`str`): show route label\n            table (`str`): Table name, Default mpls.0\n            output_interface (`str`): Output interface. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_output_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2975"
    }
  },
  "verify_route_table_route_exists": {
    "junos": {
      "doc": "Verifies a route exists in the route table\n\n    Args:\n        device (obj): Device object\n        route (str): Route table route name\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_table_route_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L3632"
    }
  },
  "verify_route_vrf_nexthop_with_source_protocol": {
    "iosxe": {
      "doc": " Verify route target is present\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): VRF name\n            address_family ('str'): address family to check\n            route_ip ('list'): list of routes to compare\n                ex.) routes = ['192.168.1.1', '192.168.1.2']\n            ignore_routes ('list'): list of routes to ignore with type\n                ex.) ignore_routes = ['L', 'B', 'C']\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_route_vrf_nexthop_with_source_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L909"
    }
  },
  "verify_routing_accepted_message": {
    "junos": {
      "doc": "Verify accepted message of route\n\n    Args:\n        device (object): Device object\n        route (str): Route to check\n        expected_message (str): Expected message to verify against\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_accepted_message",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2274"
    }
  },
  "verify_routing_interface_preference": {
    "junos": {
      "doc": " Verify routing interface preference\n\n        Args:\n            device ('str'): Device str\n            protocol ('str'): Protocol name\n            ip_address ('str'): IP address , default: None\n            interface ('str'): Interface name\n            preference ('int'): Preference value\n            extensive ('bool'): Check with extensive command\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_interface_preference",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L200"
    }
  },
  "verify_routing_ip_bgp_neighbors_routes_exists": {
    "iosxe": {
      "doc": " Verify if the initial_route provided exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            expected_result ('bool'): expected result to check\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_bgp_neighbors_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L569"
    }
  },
  "verify_routing_ip_exist": {
    "junos": {
      "doc": " Verify routing ip exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): Destination address to check existence\n            protocol ('str'): Protocol name\n            extensive_protocol ('bool'): If show command includes extensive\n            max_time (`int`): Max time, default: 60\n            metric (`int`): Metric of routing protocol\n            check_interval (`int`): Check interval, default: 10\n            extensive ('bool'): Is extensive\n            exact ('bool'): Is exact\n            protocol_type ('str'): Protocol type \n            command_address ('str'): Address to run command with\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_exist",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L283"
    }
  },
  "verify_routing_ip_routes": {
    "iosxe": {
      "doc": " Verify ip route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output provided as argument\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ip_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L355"
    }
  },
  "verify_routing_local_and_connected_route": {
    "iosxe": {
      "doc": " Verify there is local and connected route registered for the vrf\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n        Returns:\n            (`dict`): Interface dict contain ip route info\n            False\n        Raises:\n            None\n     ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_local_and_connected_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L296"
    }
  },
  "verify_routing_neighbors_advertised_routes_exists": {
    "iosxe": {
      "doc": " Verify if neighbors advertised routes exists\n\n        Args:\n            device ('obj'): Device object\n            address_family ('str'): address family\n            rd ('str'): rd export value\n            neighbor ('str'): neighbor address to find routes\n            vrf ('str'): vrf name\n            initial_route ('str'): intial route to search\n            max_time ('int') : max time for Timeout\n            check_interval ('int'): interval for Timeout\n            output ('list'): list of neighbors advertised routes (get_bgp_neighbors_advertised_routes)\n        Returns:\n            True\n            False\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_neighbors_advertised_routes_exists",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L627"
    }
  },
  "verify_routing_no_ospf_metric_match": {
    "junos": {
      "doc": "Verify that no OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_no_ospf_metric_match",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L683"
    }
  },
  "verify_routing_ospf_metric_match_or_greater": {
    "junos": {
      "doc": "Verify that all OSPF routes have given metric\n\n    Args:\n        device (obj): Device object\n        metric (int): Metric to check for\n        address_exceptions (list, optional): List of addresses to not check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_ospf_metric_match_or_greater",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L717"
    }
  },
  "verify_routing_route": {
    "junos": {
      "doc": "Verify show route exists against critera\n\n    Args:\n        route ('str'): Route to check\n        expected_protocol_name ('str'): Expected protol in route\n        expected_community ('str'): Expected community in route\n        extensive ('bool): Whether to use extensive or not\n        expected_table_name ('str'): Table name to check for\n        expected_active_tag ('str'): Route table active tag to check, default: '*'\n        expected_tag ('str'): Route table tag to check for\n        invert (bool, optional): Inverts from equals to not equals. Defaults to False.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L500"
    }
  },
  "verify_routing_route_attrs": {
    "iosxe": {
      "doc": "Verify default IPv4 route exists with given properties.\n\n    Args:\n        device (obj): Device to verify route on.\n        route (str): route to verify.\n        address_family (str, optional): address family of route (\"ipv4\" or \"ipv6\"). Defaults to \"ipv4\".\n        vrf_name (str, optional): vrf name to verify route on. Defaults to None.\n        route_attrs (obj, optional): If specified, verify the specified attributes in the route. Defaults to None.\n        next_hop_info (obj, optional): If specified, next hop info to confirm a matching entry in the route. Defaults to None.\n            next_hop_info is of format:\n                {\n                    \"next_hop\": \"172.20.190.110\",\n                    \"updated\": \"5w6d\",\n                    \"outgoing_interface\": \"TenGigabitEthernet1/1/4\"\n                }\n            where all keys are optional; ony the keys specified will be\n            checked. If no keys are given, then no keys are checked and this\n            will be considered a match.\n        max_time (int, optional): Maximum timeout (seconds). Defaults to 60.\n        check_interval (int, optional): Check interval (seconds). Defaults to 10.\n\n    Returns:\n        bool: True if route is verified, False otherwise.\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_route_attrs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L502"
    }
  },
  "verify_routing_route_ip_on_interface": {
    "iosxe": {
      "doc": " Verify routes match the configured IP address in running config\n\n        Args:\n            device (`obj`): Device object\n            interface_dict (`dict`): Interface dict contain ip route info. Get from libs/routing/verify.py::verify_routing_local_and_connected_route\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_route_ip_on_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L329"
    }
  },
  "verify_routing_routes": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        addr_list('list'): List to verify\n        protocol ('str'): Protocol type to check in show route\n        contains ('boolean'): flag to check if addr_list is contained/excluded\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L609"
    }
  },
  "verify_routing_static_routes": {
    "iosxe": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            route ('str'): ip address to verify\n            interface ('str'): interface name to verify\n            destination_address ('str'): detsination ip address to verify\n            output ('str'): output from 'show ip route static'\n            repeat ('int'): repeat value\n        Returns:\n            True / False\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L428"
    },
    "junos": {
      "doc": " Verify static route exists\n\n        Args:\n            device ('str'): Device str\n            destination_address ('str'): destination ip address\n            to ('str'): to value\n            not_to ('str'): not to value\n            known_via ('str'): known via value\n            tag ('str'): Tag value\n            preference ('str'): Preference value\n            protocol_name ('str'): Protocol name\n            extensive ('bool'): if command with extensive at the end\n            max_time (`int`): Max time, default: 60\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            True / False\n        Raises:\n            None\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_static_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L96"
    }
  },
  "verify_routing_subnet_entry": {
    "iosxe": {
      "doc": " Verify route entry is present in\n        'show ip route vrf {vrf} {prefix}'/'show ip route {prefix}'\n\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): prefix\n            max_time ('int', optional): maximum time to wait in seconds, \n                default is 30\n            check_interval ('int', optional): how often to check in seconds, \n                default is 10\n            vrf ('str', optional): VRF name, default None\n        Returns:\n            Result('bool'): verified result\n        Raises:\n            None\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_routing_subnet_entry",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L864"
    }
  },
  "verify_rsvp_neighbor": {
    "junos": {
      "doc": "\n    Verify there is a neighbor\n\n    Args:\n        device (`obj`): Device object\n        expected_ipaddress (`str`): The IP address that is expected in the output \n        max_time (`int`): Max time, default: 30\n        check_interval (`int`): Check interval, default: 10\n    Returns:\n        result (`bool`): Verified result \n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rsvp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L78"
    }
  },
  "verify_rsvp_session_state": {
    "junos": {
      "doc": " Verify RSVP session state\n\n    Args:\n        device (obj): device object\n        expected_state (str): Expected state\n        session_name (str, optional): Session name. Defaults to None.\n        session_type (str): Which session to look into. Defaults to \"Transit\"\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "rsvp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rsvp_session_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/rsvp/verify.py#L170"
    }
  },
  "verify_rt_destination": {
    "junos": {
      "doc": "Verify rt destination\n\n        Args:\n            device ('obj'): Device to use\n            target_route ('str'): target route address\n            invert(bool, optional): Inverts from equals to not equals. Defaults to False.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds.\n            check_interval ('int', optional): How often to check. Default to 10 seconds.\n            interface ('str', optional): expected interface address. Default to None.\n            extensive(bool, optional): True if show command has extensive. Defaults to False.\n            protocol ('str', optional): Protocol name that passed in command. Default to None.\n            protocol_type ('str', optional): Protocol type in show command, e.g., advertising-protocol\n                                             or receive-protocol. Default to None.\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_rt_destination",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L2698"
    }
  },
  "verify_segment_routing_dynamic_metric_type": {
    "iosxe": {
      "doc": " Verify segment-routing metric type under dynamic path with active state\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_type (`str`): Expected metric type\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_dynamic_metric_type",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L242"
    }
  },
  "verify_segment_routing_gb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing gb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L532"
    },
    "iosxr": {
      "doc": " Verify segment routing global block range\n\n        Args:\n            device (`obj`): Device object\n            expected_label_min (`int`): Segment routing global block start\n            expected_label_max (`int`): Segment routing global block end\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_gb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/mpls/verify.py#L17"
    }
  },
  "verify_segment_routing_label_by_traceroute": {
    "iosxr": {
      "doc": " Verify Segment routing label by traceroute\n\n        Args:\n            device (`obj`): Device object\n            traceroute_address ('str): Traceroute address\n            process_id ('str'): Router ISIS process ID\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_label_by_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L64"
    }
  },
  "verify_segment_routing_lb_range": {
    "iosxe": {
      "doc": " Verifies the segment routing lb range is as expected\n\n        Args:\n            device ('obj'): device to use\n            expected_minimum ('int'): expected label range minimum to compare against. Ignored if None\n            expected_maximum ('int'): expected label range maximum to compare against. Ignored if None\n            max_time ('int'): maximum time to keep checking\n            check_interval ('int'): how often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            None\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_lb_range",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L480"
    }
  },
  "verify_segment_routing_operation": {
    "iosxr": {
      "doc": " Verify Segment routing operation\n\n        Args:\n            device (`obj`): Device object\n            loopback_interface (`str`): Loopback interface\n            label_min (`int`): Segment routing global block start\n            prefix_sid_index (`int`): Prefix-sid index\n            max_time (`int`): Max time\n            check_interval (`int`): Check interval\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_operation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/segment_routing/verify.py#L15"
    }
  },
  "verify_segment_routing_policy_attributes": {
    "iosxe": {
      "doc": " Verify segment-routing policy attributes is as expected\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            expected_bsid (`int`): Expected Binding SID\n            expected_mode (`str`): Expected allocation mode\n            expected_state (`str`): Expected binding state\n            policy_dict (`dict`): Policy dict from parser output \n                IOSXE Parser - ShowSegmentRoutingTrafficEngPolicy\n                cmd - show segment-routing traffic-eng policy all\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n            sid (`int`): Binding sid\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_attributes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L19"
    }
  },
  "verify_segment_routing_policy_hops": {
    "iosxe": {
      "doc": " Verify segment-routing policy hops with order and extract labels\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name\n            segment_list (`list`): Segment list to verify\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n            path_type (`int`): Tath Type, default: explicit\n        Returns\n            result (`bool`): Verified result\n            labels (`list`): Hops labels\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L154"
    }
  },
  "verify_segment_routing_policy_state": {
    "iosxe": {
      "doc": " Verify segment-routing policy state is as expected (Admin/Operational)\n        using 'show segment-routing traffic-eng policy name {policy}'\n        \n        Args:\n            device (`obj`): Device object\n            policy (`str`): Policy name, if not specified will verify all\n            expected_admin (`str`): Expected admin state\n            expected_oper (`str`): Expected operational state\n            max_time (`int`): Max time, default: 30\n            check_interval (`int`): Check interval, default: 10\n        Returns\n            result (`bool`): Verified result\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_policy_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L95"
    }
  },
  "verify_segment_routing_traffic_eng_policies": {
    "iosxe": {
      "doc": " Verifies configured traffic_eng policies have expected configurations\n\n        Args:\n            device ('obj'): Device to use\n            policy_name ('str'): Policy name to verify. If not specified will verify all\n            expected_admin_status ('str'): Expected admin status\n            expected_oper_status ('str'): Expected operational status\n            expected_metric_type ('str'): Expected metric type\n            expected_path_accumulated_metric ('int'): Expected path accumulated metric\n            expected_path_status ('str'): Expected path status\n            expected_affinity_type ('str'): Expected affinity type\n            expected_affinities ('list'): Expected affinities\n            expected_preference ('int'): Expected preference path \n            expected_endpoint_ip ('str'): Expected Endpoint IP\n            max_time ('int'): Maximum amount of time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_segment_routing_traffic_eng_policies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L681"
    }
  },
  "verify_services_accounting_aggregation": {
    "junos": {
      "doc": " Verify if there are errors in 'show services accounting errors'\n\n    Args:\n        device (obj): Device object\n        expected_source_address ('str'): expected source address\n        expected_destination_address ('str'): expected destination address\n        expected_snmp_interface ('str'): expected snmp interface\n        expected_mpls_label1 ('str'): expected mpls label1\n        expected_mpls_label2 ('str'): expected mpls label2\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_aggregation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L227"
    }
  },
  "verify_services_accounting_errors": {
    "junos": {
      "doc": " Verify if there are errors in 'show services accounting errors'\n\n    Args:\n        device (obj): Device object\n        expected_service_set_dropped ('str'): service set dropped\n        expected_active_timeout_failures ('str'): active timeout failures\n        expected_export_packet_failures ('str'): exported packet failures\n        expected_flow_creation_failures ('str'): flow creation failures\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_errors",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L163"
    }
  },
  "verify_services_accounting_flow": {
    "junos": {
      "doc": " Verify 'show services accounting flow' against criteria\n\n    Args:\n        device (obj): Device object\n        expected_flow_packets_ten_second_rate (str): flow packets ten second rate\n        expected_active_flows (str): expected active flows\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n        invert (bool, optional): Inverts the API\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L101"
    }
  },
  "verify_services_accounting_flow_active": {
    "junos": {
      "doc": "Verify accounting flow active count\n\n    Args:\n        device (obj): Device object\n        expected_count (int/str): Expected count\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:\n        bool: True/False\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow_active",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L17"
    }
  },
  "verify_services_accounting_flow_no_output": {
    "junos": {
      "doc": " Verify no output in 'show services accounting flow'\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_flow_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L350"
    }
  },
  "verify_services_accounting_status": {
    "junos": {
      "doc": " Verify 'show services accounting status' against criteria\n\n    Args:\n        device (obj): Device object\n        expected_export_format (str): Session address\n        route_record_threshold (str): Expected session state\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L47"
    }
  },
  "verify_services_accounting_status_no_output": {
    "junos": {
      "doc": " Verify no output in 'show services accounting status'\n\n    Args:\n        device (obj): Device object\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n\n    Returns:  \n        Boolean\n\n    Raises:\n        N/A\n    ",
      "module_name": "services.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_services_accounting_status_no_output",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/services/verify.py#L310"
    }
  },
  "verify_session_state_bgp_neighbor": {
    "iosxe": {
      "doc": " Verify if session state matches expected state\n        Args:\n            device ('obg')                    : Device object\n            output ('dict')                   : Parsed output\n            address_family ('str')            : Address family to be verified\n            address_families ('list')         : List of address families to check in session\n                ex.) address_families = ['VPNv4 Unicast', 'L2VPN Vpls']\n            neighbor_address ('str')          : Address family to be searched under\n            expected_session_state  ('str')   : List of expected state\n            vrf_name ('str')                  : VRF value\n            max_time ('int'): max time\n            check_interval ('int'): check interval\n        Returns: \n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "bgp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_session_state_bgp_neighbor",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/bgp/verify.py#L631"
    }
  },
  "verify_show_boot_variable": {
    "ios": {
      "doc": " Verifies by issue 'show boot' on the device\n        Args:\n            None\n        Return: the output\n    ",
      "module_name": "platform.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/verify.py#L96"
    }
  },
  "verify_show_ospf3_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf3 database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval (`int`,optional): Check interval, default: 10 seconds\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf3_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L718"
    }
  },
  "verify_show_ospf_database_lsa_types": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf_database_lsa_types",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L963"
    }
  },
  "verify_show_ospf_route_network_extensive": {
    "junos": {
      "doc": "Verify 'show ospf database' lsa-types contains expected_types\n\n    Args:\n        device ('obj'): device to use\n        expected_types ('str'): types to verify\n        max_time ('int'): Maximum time to keep checking. Defaults to 60\n        check_interval ('int'): How often to check. Defaults to 10\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospf_route_network_extensive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1004"
    }
  },
  "verify_show_ospfv3_database": {
    "junos": {
      "doc": " Verify data in show ospf3 database\n\n    Args:\n        device (obj): Device object\n        advertising_router (str, optional): Advertising router to check. Defaults to None.\n        lsa_type (str, optional): LSA Type to check for. Defaults to None.\n        expected_node_id (str, optional): Expected node ID to check. Defaults to None.\n        max_time (int, optional): Maximum timeout time. Defaults to 60.\n        check_interval (int, optional): Check interval. Defaults to 10.\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_ospfv3_database",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L758"
    }
  },
  "verify_show_run_aaa": {
    "iosxe": {
      "doc": "\n    Verify that the configurations available in show run aaa\n    Args:\n        device ('obj'): Device object\n        config_list ('list'): List of configuration command details\n        timeout ('int): timeout value for the command execution\n           ex.)\n               cmd1 = '''aaa group server radius Test-VRf\n                        server name Test-radius\n                        ip vrf forwarding Mgmt-vrf\n                        ip radius source-interface GigabitEthernet0/0\n                        '''\n                cmd2 = '''\n                        aaa group server radius Test-radius\n                        server name Test-server\n                        ip vrf forwarding Mgmt-vrf\n                        '''\n                cmd3 = 'aaa group server radius rad1'\n\n               config_list = [cmd1, cmd2, cmd3]\n    Returns:\n        True - if provided commands are available in 'show run aaa'\n        False - if any of the provided commands are not available in 'show run aaa'\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_run_aaa",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L14"
    }
  },
  "verify_show_template": {
    "iosxe": {
      "doc": " Verify show template {template_name}\n        Args:\n            device('obj'): device object\n            template_name('str'): template_name name\n            interface('str', Optional): interface\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "template.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_template",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/template/verify.py#L13"
    }
  },
  "verify_show_template_empty": {
    "iosxe": {
      "doc": " Verify show template {template_name}\n        Args:\n            device('obj'): device object\n            template_name('str'): template_name name\n        Returns:\n            Bool\n        Raises:\n            None\n    ",
      "module_name": "template.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_show_template_empty",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/template/verify.py#L39"
    }
  },
  "verify_sid_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            sid (`int`): SID value\n            code (`str`): Check for codes in output\n                ex.) code = 'L'\n            ip_address (`str`): IP address to check in output\n            avoid_codes (`list`): List of codes to avoid\n                ex.)\n                    avoid_codes = ['L', 'C']\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            output ('list'): Pass output as reference - modifies the calling output\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L498"
    }
  },
  "verify_sid_in_ospf_pairs": {
    "iosxe": {
      "doc": " Verifies if SID is found in ospf pairs\n        from command 'show ip ospf segment-routing sid-database'\n\n        Args:\n            device (`obj`): Device to be executed command\n            process_id (`int`): Process Id to check in output\n            max_time ('int'): maximum time to wait\n            check_interval ('int'): how often to check\n            expected_result ('bool'): Expected result\n                set expected_result = False if method should fail\n                set expected_result = True if method should pass (default value)\n            output ('str'): Pass output as value\n            pairs = [{'sid': 10, 'prefix':'172.16.1.1/32', 'codes': 'M'}, {...}]\n\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_ospf_pairs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L1264"
    }
  },
  "verify_sid_in_segment_routing": {
    "iosxe": {
      "doc": " Verifies if SID is found in segment-routing\n        from command 'show segment-routing mpls connected-prefix-sid-map ipv4' or\n        from command 'show segment-routing mpls connected-prefix-sid-map local ipv4'\n        \n        Args:\n            device (`obj`): Device to be executed command\n            address_family (`str`): Address family name\n            local (`bool`): Flag to check command with local\n\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_in_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L294"
    }
  },
  "verify_sid_is_advertised_in_ospf": {
    "iosxe": {
      "doc": " Verifies if SID is advertised in ospf\n        from command 'show ip ospf database opaque-area adv-router {router_id}'\n\n        Args:\n            device (`obj`): Device to be executed command\n            router_id (`str`): Router ID\n            vrf (`str`): VRF name\n            address_family (`str`): Address family\n            instance (`str`): Instance value\n                ex.) instance = '65109'\n            prefix (`str`): IP address to check as prefix in output\n                ex.) prefix = '10.66.12.12/32'\n            flags (`str`): Flags to check in output\n                ex.) flags = 'N-bit'\n        Raises:\n            None\n        Returns\n            True\n            False\n\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sid_is_advertised_in_ospf",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ospf/verify.py#L798"
    }
  },
  "verify_simulation": {
    "virl": {
      "doc": "Verify if simulation exists\n\n        Args:\n            device (`obj`): Device object\n            simulation_name (`str`): simulation name\n            max_time (`int`): maximum wait time in seconds. Default: 60\n            check_interval (`int`): Wait time between iterations when looping                 is needed in secnods. Default: 10\n            exist (`Bool`): True if simulation exists. False for opposite check.\n\n        Returns:\n            Bool: True/False\n        Raise:\n            None\n    ",
      "module_name": "std.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_simulation",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/virl/std/verify.py#L92"
    }
  },
  "verify_single_ospf3_neighbor_address": {
    "junos": {
      "doc": " Verifies single ospf3 neighbor exists\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): ospf neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf3.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_single_ospf3_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf3/verify.py#L1075"
    }
  },
  "verify_single_ospf_neighbor_address": {
    "junos": {
      "doc": " Verifies single ospf neighbor exists\n\n        Args:\n            device ('obj'): device to use\n            neighbor_address ('str'): ospf neighbor address\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ospf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_single_ospf_neighbor_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ospf/verify.py#L1388"
    }
  },
  "verify_smallest_stratum_ntp_system_peer": {
    "iosxe": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/ntp/verify.py#L20"
    },
    "iosxr": {
      "doc": " Verify NTP server with the smallest stratum is elected as system peer\n\n        Args:\n            device (`obj`): Device object\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 90\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 15\n        Returns:\n            result (`bool`): Verified result\n            sys_peer (`str`): System peer ip\n            other_peers (`list`): Other peers ip\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_smallest_stratum_ntp_system_peer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L17"
    }
  },
  "verify_smart_account_is_activated": {
    "iosxe": {
      "doc": " Verify smart account is configured and linked in show license summary\n        Args:\n            device ('obj'): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_smart_account_is_activated",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L103"
    }
  },
  "verify_snmp_statistics": {
    "junos": {
      "doc": " Verify snmp statistics\n\n        Args:\n            device (`obj`): Device object\n            expected_output_counter (`str`): Expected output counter\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n            invert('bool'): True if negative scenario to verify\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_snmp_statistics",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/verify.py#L53"
    }
  },
  "verify_snmp_target": {
    "junos": {
      "doc": " Verify snmp target\n\n        Args:\n            device (`obj`): Device object\n            expected_target (`str`): Expected target IP\n            max_time (`int`): Max time, default: 60 seconds\n            check_interval (`int`): Check interval, default: 10 seconds\n        Returns:\n            result (`bool`): Verified result\n        Raises:\n            N/A\n    ",
      "module_name": "snmp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_snmp_target",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/snmp/verify.py#L12"
    }
  },
  "verify_software_fed_ip_igmp_snooping_groups": {
    "iosxe": {
      "doc": "\n    Api method to call parser and return boolean True If Vlan Port Matched\n    Args:\n            device ('obj'): Device object\n            state (string) : Device State (Such as : active, switch active, switch {1})\n            vlan (string) : Device Vlan Port (Example : 10)\n            key (string) : Key depicts the key of the dict as output got from parser to varify it value\n            value (string) : Value suppose to be the data inside the key which api will verify by compare this value and actual value inside output\n    Returns:\n            Boolean: Validation of Vlan Port True or False\n    ",
      "module_name": "Software_Fed_ip_igmp_snooping_groups.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_software_fed_ip_igmp_snooping_groups",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/Software_Fed_ip_igmp_snooping_groups/verify.py#L9"
    }
  },
  "verify_source_of_best_path": {
    "junos": {
      "doc": "Verify the source of the best path\n\n    Args:\n        target_route ('str'): Route to check\n        expected_best_path ('str'): Best path address\n        max_time ('int', optional): Maximum time to keep checking. Default to 60.\n        check_interval ('int', optional): How often to check. Default to 10.\n\n    Raise: None\n\n    Returns: Boolean\n\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_source_of_best_path",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L1089"
    }
  },
  "verify_source_protocol": {
    "iosxe": {
      "doc": "\n    Verifies that route's source protocol matches that of expected_source.\n\n    Args:\n        device (): Device used to run commands\n        route ('str'): Route whose source protocol will be checked\n        expected_source ('str'): Source protocol that route is expected to match\n    \n    Returns True expected source protocol matches device source protocol, False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_source_protocol",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L952"
    }
  },
  "verify_source_protocols": {
    "iosxe": {
      "doc": "\n    Verifies that multiple routes' source protocols match that of expected_source.\n\n    Args:\n        device (): Device used to run commands\n        routes ('list'): List of routes whose source protocols will be checked\n        expected_source ('str'): Source protocol that all routes are expected to match\n    \n    Returns True if all routes' souce protocols match the expected source protocol, False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_source_protocols",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L971"
    }
  },
  "verify_spanning_tree_loop_inc": {
    "iosxe": {
      "doc": "\n    Verify spanning tree loop inconsistancy is enabled on interface\n    Args:\n        device ('obj'): device object     \n        vlan_id ('str'): Vlan id on the interface\n        interface ('str'): interface to check\n    Returns:\n        result(bool): True if enabled else false\n    Raises:\n            SubCommandFailure: If command not executed raises subcommand failure error\n    ",
      "module_name": "spanning_tree.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_spanning_tree_loop_inc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/verify.py#L69"
    }
  },
  "verify_spanning_tree_root_inc": {
    "iosxe": {
      "doc": "\n    Verify spanning tree root inconsistancy is enabled on interface\n    Args:\n        device ('obj'): device object     \n        vlan_id ('str'): Vlan id on the interface\n        interface ('str'): interface to check\n\n    Returns:\n        result(bool): True if enabled else false\n    Raises:\n            SubCommandFailure: If command not executed raises subcommand failure error\n    ",
      "module_name": "spanning_tree.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_spanning_tree_root_inc",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/spanning_tree/verify.py#L38"
    }
  },
  "verify_specific_route": {
    "junos": {
      "doc": "Verifies address list agianst 'show route protocol {protocol}'\n\n    Args:\n        device ('obj'): device to use\n        address('str'): address to search for\n        learn_protocol('str'): Learned protocol\n        max_time ('int'): Maximum time to keep checking\n        check_interval ('int'): How often to check\n\n    Returns:\n        True/False\n\n    Raises:\n        N/A\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_specific_route",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/routing/verify.py#L829"
    }
  },
  "verify_state": {
    "iosxe": {
      "doc": "Trigger Pre-Processor:\n        * verify state:\n    ",
      "module_name": "prepostprocessor.processors",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/prepostprocessor/processors.py#L49"
    }
  },
  "verify_static_arp": {
    "iosxe": {
      "doc": " Verify static arp entry is present in ARP table\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`str`): IP address\n            mac_address (`str`): MAC address\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            True\n            False\n    ",
      "module_name": "arp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_static_arp",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/arp/verify.py#L13"
    }
  },
  "verify_static_routing_route_attrs": {
    "iosxe": {
      "doc": "Verify default IPv4 static route exists with given properties.\n\n    Args:\n        device (obj): Device to verify route on.\n        route (str): route to verify.\n        address_family (str, optional): address family of route (\"ipv4\" or \"ipv6\"). Defaults to \"ipv4\".\n        vrf_name (str, optional): vrf name to verify route on. Defaults to None.\n        route_attrs (obj, optional): If specified, verify the specified attributes in the route. Defaults to None.\n        next_hop_info (obj, optional): If specified, next hop info to confirm a matching entry in the route. Defaults to None.\n            next_hop_info is of format:\n                {\n                    \"active\": True,\n                    \"next_hop\": \"192.168.1.1\",\n                    \"outgoing_interface\": \"GigabitEthernet1\",\n                    \"preference\": 3,\n                    \"owner_code\": \"M\",\n                }\n            where all keys are optional; ony the keys specified will be\n            checked. If no keys are given, then no keys are checked and this\n            will be considered a match.\n        max_time (int, optional): Maximum timeout (seconds). Defaults to 60.\n        check_interval (int, optional): Check interval (seconds). Defaults to 10.\n\n    Returns:\n        bool: True if static route is verified, False otherwise.\n    ",
      "module_name": "static_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_static_routing_route_attrs",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/static_routing/verify.py#L13"
    }
  },
  "verify_status_of_segment_routing": {
    "iosxe": {
      "doc": " Verifies if state matches expected_state state in segment-routing\n        from command 'show segment-routing mpls state'\n\n        Args:\n            device (`obj`): Device to be executed command\n            state (`str`): Expected state\n        Raises:\n            None\n        Returns\n            True/False\n\n    ",
      "module_name": "segment_routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_status_of_segment_routing",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/segment_routing/verify.py#L343"
    }
  },
  "verify_sudi_cert": {
    "iosxe": {
      "doc": " Verify sudi certificate status in show platform sudi certificate or show platform sudi certificate sign nonce xxx\n        Args:\n            device ('obj'): Device object\n            sign_nonce ('str'): input from user #\"123\"\n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sudi_cert",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L127"
    }
  },
  "verify_sudi_pki": {
    "iosxe": {
      "doc": " Verify cert present  in show platform sudi pki\n        Args:\n            device ('obj'): Device object\n            status ('str'): Expected output \n            max_time ('int'): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "sudi.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_sudi_pki",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/sudi/verify.py#L160"
    }
  },
  "verify_synced_ntp_server": {
    "iosxr": {
      "doc": " Verify synched NTP server\n\n        Args:\n            device (`obj`): Device object\n            ip_address (`list`): list of Server peer IP address\n            max_time (int): Maximum wait time for the trigger,\n                            in seconds. Default: 1200\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in seconds. Default: 30\n        Returns:\n            peer_dict (`dict`): Peer dictionary\n    ",
      "module_name": "ntp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_synced_ntp_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxr/ntp/verify.py#L247"
    }
  },
  "verify_syslog_bgp_peer_down": {
    "iosxe": {
      "doc": " Verify log for bgp peer down message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_bgp_peer_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L201"
    }
  },
  "verify_syslog_bgp_peer_up": {
    "iosxe": {
      "doc": " Verify log for bgp peer up message\n\n        Args:\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_bgp_peer_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L169"
    }
  },
  "verify_syslog_interface_link_down": {
    "iosxe": {
      "doc": " Verify link down message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_link_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L274"
    }
  },
  "verify_syslog_interface_link_up": {
    "iosxe": {
      "doc": " Verify link up message in syslog server\n\n        Args:\n            device ('obj'): Device object\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_link_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L233"
    }
  },
  "verify_syslog_interface_shut": {
    "iosxe": {
      "doc": " Verify log for interface shut message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_shut",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L9"
    }
  },
  "verify_syslog_interface_up": {
    "iosxe": {
      "doc": " Verify log for interface up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_interface_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L48"
    }
  },
  "verify_syslog_ospf_neighbor_down": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor down message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_ospf_neighbor_down",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L129"
    }
  },
  "verify_syslog_ospf_neighbor_up": {
    "iosxe": {
      "doc": " Verify log for ospf neighbor up message\n\n        Args:\n            interface ('str'): Interface to be verified\n            output ('obj'): Tcpdump output\n            server ('str'): Syslog server address\n        Returns:\n            True\n            False\n        Raises:\n            None\n\n    ",
      "module_name": "syslog.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_syslog_ospf_neighbor_up",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/syslog/verify.py#L88"
    }
  },
  "verify_tacacs_packet": {
    "iosxe": {
      "doc": "Validating Authentication, Authorization and Accounting json data\n    with the verifydict data\n        Args:\n            tacacs_json_dict: parsed tacacs packet data\n            verfifydict:  dict having authentication or accounting or\n                        authorization attributes to verify\n        Returns:\n            final_verify: dict contains authentication or accounting or\n            authorization bool values\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tacacs_packet",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/utils.py#L1063"
    }
  },
  "verify_task_replication": {
    "junos": {
      "doc": " Verifies task replication info\n\n        Args:\n            device (`obj`): device to use\n            expected_state (`str`): expected state of stateful replication to verify\n            expected_re_mode (`str`): expected re mode to verify\n            expected_protcols (`list`, Optional): specify protocols to check\n                                                  Default to None\n            expected_protcols_sync_status (`list`, Optional): specify protocol sync status which corresponding to expected_protocols\n                                                              Default to None\n            output (`str`, optional): output of show task replication\n                                      Default to None\n            max_time (`int`): Maximum time to keep checking\n                              Default to 60 secs\n            check_interval (`int`): How often to check\n                                    Default to 15 secs\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "task.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_task_replication",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/task/verify.py#L21"
    }
  },
  "verify_ted_interface": {
    "junos": {
      "doc": " Verifies ted interface exists\n\n        Args:\n            device ('obj'): device to use\n            interface ('str'): Interface to use in show command\n            expected_interface ('str'): expected interface\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How often to check\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A\n    ",
      "module_name": "ted.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_ted_interface",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/ted/verify.py#L16"
    }
  },
  "verify_telemetry_enabled": {
    "iosxe": {
      "doc": " Verify pae in show running-config all \n        Args:\n            device ('obj'): Device object\n            supported ('list') : ''\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_telemetry_enabled",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L12"
    }
  },
  "verify_telemetry_report_in_show_summary": {
    "iosxe": {
      "doc": " Verify telemetry report_id is in show summary\n        Args:\n            device ('obj'): Device object\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_telemetry_report_in_show_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L52"
    }
  },
  "verify_telemetry_report_kpi_in_show_kpi_summary": {
    "iosxe": {
      "doc": " Verify telemetry report_id and kpi is in show kpi summary\n        Args:\n            device ('obj'): Device object\n            kpi_list ('list'): Kpi list\n        Returns:\n            result (`bool`): Verified result\n    ",
      "module_name": "telemetry.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_telemetry_report_kpi_in_show_kpi_summary",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/telemetry/verify.py#L75"
    }
  },
  "verify_template_bind": {
    "iosxe": {
      "doc": "\n    check if template is bound to an interface\n    Arg:\n        device('obj'):Name of the dut\n        interface('str'): switch interface\n        template_name('str'): template name\n        method(`str`, optional): {static|dynamic}. Default value is dynamic.\n    returns:\n            True if given template is bound to an interface with given method type\n            False otherwise\n    ",
      "module_name": "dot1x.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_template_bind",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/dot1x/verify.py#L16"
    }
  },
  "verify_test_aaa_cmd": {
    "iosxe": {
      "doc": " To verify radius connectivity with test aaa command\n    Args:\n        device (`obj`): Device object\n        servergrp (`str`): Radius server group name\n        username (`str`): username\n        password (`str`): password\n        path (`str`): legacy/new-code\n    Return:\n        None\n    Raise:\n        SubCommandFailure: Failed configuring\n    ",
      "module_name": "aaa.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_test_aaa_cmd",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/aaa/verify.py#L93"
    }
  },
  "verify_total_cdp_entries_displayed_interfaces": {
    "iosxe": {
      "doc": " Check Total cdp entries displayed value\n        Args:\n            device ('obj'): Device object\n            Total cdp entries displayed ('int'): integer value of Total cdp entries displayed \n            max_time (`int`): max time\n            check_interval (`int`): check interval\n        Returns:\n            result(`bool`): True if expected cdp entries displayed on device\n                            or else return Flase\n    ",
      "module_name": "cdp.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_total_cdp_entries_displayed_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/cdp/verify.py#L60"
    }
  },
  "verify_traceroute": {
    "iosxe": {
      "doc": " Verify traceroute if it matches expected_output_label_list or expected_hop_list\n        Args:\n            device ('obj'): Device object\n            vrf ('str'): vrf name\n            addr ('str'): Destination address\n            proto ('str'): Protocol(ip/ipv6)\n            ingress ('str'): Ingress traceroute\n            source ('str'): Source address or interface\n            dscp ('int'): DSCP Value\n            numeric ('str'): Numeric display\n            timeout ('int'): Timeout in seconds\n            probe ('int'): Probe count\n            minimum_ttl ('int'): Minimum Time to Live\n            maximum_ttl ('int'): Maximum Time to Live\n            port ('int'): Port Number\n            ignore_last_label ('bool'): Ignore last label in expected_output_label_list,\n            ignore_first_label ('bool'): Ignore first label in expected_output_label_list\n            expected_output_label_list ('list'): Expected output label list of first hop\n                ex.) \n                    expected_output_label_list = ['16052','16062','16063','39']\n            expected_hop_list ('list'): Expected hop list\n                ex.) \n                    expected_hop_list = ['10.19.198.29', '10.169.14.129', '10.169.14.34', '192.168.1.1']\n            check_first_hop ('bool'): flag to check all labels only from first hop's labels. \n                                      if False, all top label from each hop will be checked.\n            max_time ('int'): Maximum time to keep checking\n            check_interval ('int'): How long to wait between checks\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L62"
    }
  },
  "verify_traceroute_final_hop": {
    "junos": {
      "doc": " Verifies the final hop is expected_final_hop via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address passed in command\n            expected_final_hop ('str'): Expected final hop\n            source ('str'): address used in command. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n            check_interval ('int', optional): How often to check. Default to 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_final_hop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L65"
    }
  },
  "verify_traceroute_first_hop_address": {
    "iosxe": {
      "doc": " Verify if first hop ip address is expected one\n        Args:\n            device ('obj'): Device object\n            prefix ('str'): Prefix address\n            expected_hop_address ('str'): Expected next hop ip address\n        Returns:\n            True/False\n        Raises:\n            None\n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_first_hop_address",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/traceroute/verify.py#L17"
    }
  },
  "verify_traceroute_intermediate_hop": {
    "junos": {
      "doc": " Verifies the intermediate hop is expected_intermediate_hop via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            ip_address ('str'): IP address passed in command\n            expected_intermediate_hop ('str'): Expected intermediate hop\n            source ('str'): address used in command. Defaults to None.\n            max_time ('int', optional): Maximum time to keep checking. Default to 60 seconds\n            check_interval ('int', optional): How often to check. Default to 10 seconds\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_intermediate_hop",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L136"
    }
  },
  "verify_traceroute_number_of_hops": {
    "junos": {
      "doc": " Verifies the number of hops is expected_amount via\n        traceroute {ip_address} no-resolve\n\n        Args:\n            device ('obj'): device to use\n            expected_amount ('int'): Expected number of hops in output\n            ip_address ('str'): IP address passed in command\n            max_time ('int', optional): Maximum time to keep checking. Default to 100\n            check_interval ('int', optional): How often to check. Default to 30\n\n        Returns:\n            True/False\n\n        Raises:\n            N/A   \n    ",
      "module_name": "traceroute.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traceroute_number_of_hops",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/traceroute/verify.py#L15"
    }
  },
  "verify_traffic_flow_on_svl_interfaces": {
    "iosxe": {
      "doc": " Verify that packets are not flowings on svl links\n        Args:\n            device(`obj`): Device object\n            min_packet_flow (`int`): control packets expected to flow.\n        returns:\n            True if traffic is not flowing, false in all other cases\n    ",
      "module_name": "stackwise_virtual.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traffic_flow_on_svl_interfaces",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/stackwise_virtual/verify.py#L9"
    }
  },
  "verify_traffic_statistics_data": {
    "junos": {
      "doc": " Verify queue counters dropped based on interfaces queue\n\n        Args:\n            device ('obj'): Device object\n            interface('str'): Interface name\n            expected_input_packet ('str'): input packet\n            expected_output_packet ('str'): output packet\n            invert ('bool'): Check the invert way, default: False\n            max_time (`int`, Optional): Max time, default: 60 seconds\n            check_interval (`int`, Optional): Check interval, default: 10 seconds\n        Returns:\n            Boolean\n\n        Raises:\n            None\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_traffic_statistics_data",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/junos/interface/verify.py#L655"
    }
  },
  "verify_tunnel_linklocal_based_on_ipv4_addr": {
    "iosxe": {
      "doc": "\n    Verifies that tunnel_intf's ipv6 linklocal address is based on\n    the ipv4 address of an ipv4_intf\n\n    Args:\n        device ('Device'): Device used to run commands\n        tunnel_intf ('str'): Tunnel interface whose linklocal address is being checked\n        ipv4_intf ('str'): IPv4 interface\n        isatap ('bool'): Checks for ISATAP address or not\n\n    Returns True if tunnel_intf's ipv6 linklocal address is based on ipv4_intf's address, False otherwise\n    ",
      "module_name": "routing.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_linklocal_based_on_ipv4_addr",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/routing/verify.py#L1168"
    }
  },
  "verify_tunnel_protection": {
    "iosxe": {
      "doc": "Verify if tunnel protection is enabled\n        Args:\n            device (`obj`): Device object\n            interface (`str`): Interface name\n            max_time (`int`): max time\n            check_interval (`int`): check interval\n            mode=(`str`): Tunnel mode (Default is GRE)\n            protocol(`str`): Tunnel Protocol(Default is IP)\n            protection('str'): Tunnel protection (Default is IPSEC)\n\n        Returns:\n            result(`bool`): True if is up else False\n    ",
      "module_name": "interface.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_protection",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/interface/verify.py#L1184"
    }
  },
  "verify_tunnel_stats": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            tunnel_id (`str`): Tunnel id\n            direction (`str`): Traffic direction\n            tx_packets (`int`): Transmit packets\n            pkt_rate (`str`): Frames per seconds\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 3\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_stats",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L102"
    }
  },
  "verify_tunnel_status": {
    "iosxe": {
      "doc": " Verify acl usage\n        Args:\n            device (`obj`): Device object\n            tunnel_id (`str`): Tunnel id\n            expected_tunnel_status (`str`): Tunnel status, Default is up\n            max_time ('int',optional): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (`int`, optional): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n\n        Returns:\n            True\n            False\n\n    ",
      "module_name": "pbr.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnel_status",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/pbr/verify.py#L59"
    }
  },
  "verify_tunnels_state": {
    "iosxe": {
      "doc": " Verifies if the tunnels created are up\n\n        Args:\n            prot ('str')  : state of the prot\n\t\t\tstate ('str') : state of the tunnel\n\t\t\ttunnels ('list') : list of tunnels to be checked\n\n        Raises:\n            Exception\n\n        Returns\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_tunnels_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L415"
    }
  },
  "verify_tx_power": {
    "iosxe": {
      "c9800": {
        "doc": "Verify the given tx power has configured\n    Args:\n        device (obj): Device object\n        tp_name (str): trustpoint name\n        tx_power (str): transmit power \n        max_time (int, optional): Maximum time in seconds. Defaults to 60\n        check_interval (int, optional): check interval in seconds. Defaults to 10\n\n    Returns:\n        True - if the expected trustpoint is configured\n        False - if the expected trustpoint is NOT configured\n\n    Raises:\n        N/A\n\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_tx_power",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/verify.py#L60"
      }
    }
  },
  "verify_unused_channel": {
    "iosxe": {
      "c9800": {
        "doc": "Verify the given un used channel list \n    Args:\n        device (obj): Device object\n        unused_channel_lst (list): un used channel list\n        max_time (int, optional): Maximum time in seconds. Defaults to 60\n        check_interval (int, optional): check interval in seconds. Defaults to 10\n\n    Returns:\n        True - if the expected un used channel list is configured\n        False - if the expected un used channel list is NOT configured\n\n    Raises:\n        N/A\n\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_unused_channel",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/verify.py#L87"
      }
    }
  },
  "verify_vc_destination_sect": {
    "iosxe": {
      "doc": " Verifies the required field in destionation section of VC detail\n\n        Args:\n            destination_peer ('str')  : Address of the Peer VC\n            vc_id ('str') : vc id of the circuit\n\t\t\tvc_state ('str') : state of the VC\n\t\t\toutput_interface ('str') : output interface of the VC\n            preferred_path('str') : Preferred path of the vc\n            preferred_path_state ('str') : Preferred path state of the vc\n            Parsed_output: output of the section passed\n        Raises:\n            Exception\n\n        Returns\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vc_destination_sect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L481"
    }
  },
  "verify_vc_state": {
    "iosxe": {
      "doc": "Verify VC state\n\n        Args:\n            device (`obj`): Device object\n            state (`str`): State of the VC\n            destination_address (`str`): Destination address of the vc\n            vc_id ('str'): VC id \n        Returns:\n            None\n    ",
      "module_name": "mpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vc_state",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/mpls/verify.py#L196"
    }
  },
  "verify_vpls_same_interface_for_l2vpn_and_l3vpn": {
    "iosxe": {
      "doc": " Verify that subinterface for L3VPN vrf and service instance for L2VPN bridge-domain belong to same interface\n\n        Args:\n            device('obj'): device object \n            vrf ('str'): vrf name\n            bridge_domain_id ('int'): bridge-domain id\n        Returns:\n            True\n            False\n        Raises:\n            None\n    ",
      "module_name": "l2vpn.vpls.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vpls_same_interface_for_l2vpn_and_l3vpn",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/l2vpn/vpls/verify.py#L23"
    }
  },
  "verify_vpn_route_targets": {
    "iosxe": {
      "doc": " Verify route target are imported, exported or both\n\n        Args:\n            device ('obj'): Device object\n            route_targets ('list'): list of route targets to check\n                ex.)\n                    [\n                        '65109:4005',\n                        '65109:4006'\n                    ]\n            rt_type ('str'): route target type\n                ex.) rt_type = 'import' OR\n                     rt_type = 'export' OR\n                     rt_type = 'both'\n            address_family ('str'): address family to check\n            vrf ('str'): vrf name\n            route_distinguisher ('str'): route distinguisher value\n            max_time (int): Maximum wait time for the trigger,\n                            in second. Default: 15\n            check_interval (int): Wait time between iterations when looping is needed,\n                            in second. Default: 5\n            \n        Returns:\n            True\n            False\n    ",
      "module_name": "vpn.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vpn_route_targets",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vpn/verify.py#L17"
    }
  },
  "verify_vrf_advertised_routes": {
    "iosxe": {
      "doc": " Verify if each VRF/route distinguisher have at least one advertised route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be search under in advertised routes\n            advertised_routes ('dict'): Advertised routes from command:\n                'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_advertised_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L25"
    }
  },
  "verify_vrf_description_in_running_config": {
    "iosxe": {
      "doc": "Verify vrf description in show running-config\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): VRF name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            Exception\n            KeyError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_description_in_running_config",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L287"
    }
  },
  "verify_vrf_description_in_show_ip_vrf_detail": {
    "iosxe": {
      "doc": "Verify vrf description in show ip vrf detail <vrf>\n\n        Args:\n            device (`obj`): Device object\n            vrf (`str`): Vrf name\n            description (`str`): Description\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n            Exception\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_description_in_show_ip_vrf_detail",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L252"
    }
  },
  "verify_vrf_received_routes": {
    "iosxe": {
      "doc": " Verify if each neighbor has at least one received route\n\n        Args:\n            device ('obj'): Device object\n            neighbor ('str'): Neighbor\n            address_family ('address_family'): Address family\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            vrf_name_routes ('str'): VRf name to be searched under in received routes\n            received_routes ('dict'): Advertised routes from command:\n                 'show bgp {address_family} all neighbors {neighbor} routes\n\n        Returns:\n            True\n            False\n\n        Raises:\n            None\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_received_routes",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L181"
    }
  },
  "verify_vrf_routes_in_bgp_table": {
    "iosxe": {
      "doc": " Verify that each VRF and route distinguisher has at least one route in BGP table\n\n        Args:\n            device ('obj'): Device object\n            config_vrf_list ('dict'): Dictionary with VRF config from command 'show config'\n            address_family ('address_family'): Address family\n            routes_dict ('dict'): Parsed output from command 'show ip bgp all'\n\n        Returns:\n            True\n            False\n\n        Raises:\n            SchemaEmptyParserError\n    ",
      "module_name": "vrf.verify",
      "package": "genie.libs.sdk.apis",
      "uid": "verify_vrf_routes_in_bgp_table",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/vrf/verify.py#L109"
    }
  },
  "verify_wireless_management_trustpoint_name": {
    "iosxe": {
      "c9800": {
        "doc": "Verify the given trustpoint has configured\n    Args:\n        device (obj): Device object\n        trustpoint_name (str): trustpoint name\n        max_time (int, optional): Maximum time in seconds. Defaults to 60\n        check_interval (int, optional): check interval in seconds. Defaults to 10\n\n    Returns:\n        True - if the expected trustpoint is configured\n        False - if the expected trustpoint is NOT configured\n\n    Raises:\n        N/A\n\n    ",
        "module_name": "platform.verify",
        "package": "genie.libs.sdk.apis",
        "uid": "verify_wireless_management_trustpoint_name",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/c9800/platform/verify.py#L8"
      }
    }
  },
  "web_interaction": {
    "com": {
      "doc": "\n    Returns result of user choice after changes in physical world.\n\n    Use-case:\n\n    There are rare cases when a result must be manually determined by a human.\n    Such as a test that relies upon changes that happen in the physical world.\n    For these cases this utility that allows a user to decide the result.\n\n    This api web_interaction can pause test execution and notify a user via email\n    that input is required. This email has a link to a webpage hosted by WebInteraction\n    that has a form for the user to submit to give a result.\n\n    Args:\n        subject (str) : A brief description of the interaction.\n        message (str) : This is the message that describes to the\n                        user what the test is and how they determine\n                        the result.\n        section_name (ref) : Reference to section or step that called interaction.\n                        This provides the name of the test to the user,\n                        as well as the APIs to return a test result.\n\n        [optional args]\n        from_address(str): The email address that the notification will be sent from.\n                           Defaults to the user login.\n        to_address(str): The email address that the notification will be sent to.\n                         Defaults to the user login.\n\n    Returns:\n        result (str)\n        Eg. aborted, blocked, errored, failed, passed, passx, skipped\n\n    Note:\n        You can apply additional arguments to webinteraction api.\n        List of arguments for the api can be found at the link below:\n        https://pubhub.devnetcloud.com/media/pyats/docs/aetest/results.html?highlight=webinteraction#interaction-results\n        In this api, section_name is equal to section in the above docs.\n\n    Blitz example:\n\n        - api:\n              function: web_interaction\n              common_api: True\n              alias: To wait, till manual work is done.\n              arguments:\n                subject: \"Testing web interaction api\"\n                message: \"Message for the user about how to assess this test\"\n                section_name: \"%VARIABLES{section}\"  #section ref can be passed like this.\n                from_address: \"example@cisco.com\"\n              result_status: \"passx\"\n              include:\n                  - \"passx\"\n    ",
      "module_name": "utils",
      "package": "genie.libs.sdk.apis",
      "uid": "web_interaction",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/utils.py#L4113"
    }
  },
  "write_erase_reload_device": {
    "iosxe": {
      "doc": "Execute 'write erase' on device, reload and apply basic configuration.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            static_route_ip (`str`): IP address for static route configuration\n            config_sleep (`int`): Time to wait after applying mgmt IP configuration\n            vrf (`str`): VRF to use for management IP operations\n            via_mgmt(`str`): Via to use to reach the device mgt IP.\n            post_reconnect_time(`int`): Maximum time to wait after reload before configuring\n\n\n        Returns:\n            None\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L185"
    }
  },
  "write_erase_reload_device_without_reconfig": {
    "ios": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            sleep_after_reload (int, optional): Amount of time to sleep after reload.\n                Defaults to 15 seconds.\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/ios/platform/utils.py#L5"
    },
    "iosxe": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            sleep_after_reload (int, optional): Amount of time to sleep after reload.\n                Defaults to 15 seconds.\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/iosxe/platform/utils.py#L27"
    },
    "nxos": {
      "doc": "Execute 'write erase' on device and reload without reconfiguring.\n\n        Args:\n            device(`obj`): Device object\n            via_console(`str`): Via to use to reach the device console.\n            reload_timeout(`int`): Maximum time to wait for reload to complete\n            reload_creds(`str or list`): Creds to apply if reloading device asks\n            sleep_after_reload (int, optional): Amount of time to sleep after reload.\n                Defaults to 15 seconds.\n    ",
      "module_name": "platform.utils",
      "package": "genie.libs.sdk.apis",
      "uid": "write_erase_reload_device_without_reconfig",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/sdk-pkg/src/genie/libs/sdk/apis/nxos/platform/utils.py#L20"
    }
  }
}