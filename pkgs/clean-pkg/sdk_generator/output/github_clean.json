{
  "apply_configuration": {
    "com": {
      "doc": " Apply configuration on the device, either by providing a file and/or\n    raw configuration.\n\n    Stage Schema\n    ------------\n    apply_configuration:\n        configuration: <Configuration block to be applied, 'str'> (Optional)\n        configuration_from_file: <File that contains a configuration to apply, 'str'> (Optional)\n        file: <Configuration file for config replace> (Optional)\n        configure_replace: <Use configure replace instead of copy 'bool'> (Optional)\n        config_timeout: <Timeout in seconds, 'int'> (Optional)\n        config_stable_time: <Time for configuration stability in seconds, 'int'> (Optional)\n        copy_vdc_all: <To copy on all VDCs or not, 'bool'> (Optional)\n        max_time: <Maximum time section will take for checks in seconds, 'int'> (Optional)\n        check_interval: <Time interval, 'int'> (Optional)\n        skip_copy_run_start: <Option to skip copy run start. Default False. 'bool'> (Optional)\n\n    Example\n    -------\n    apply_configuration:\n        configuration: |\n            interface ethernet2/1\n            no shutdown\n        file: bootflash:/ISSUCleanGolden.cfg\n        configure_replace: True\n        config_timeout: 600\n        config_stable_time: 10\n        copy_vdc_all: True\n        max_time: 300\n        check_interval: 20\n\n    ",
      "module_name": "stages.stages",
      "uid": "apply_configuration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1206"
    }
  },
  "backup_file_on_device": {
    "com": {
      "doc": " This stage copies an existing file on the device and prepends 'backup_'\n    to the start of the file name.\n\n    Stage Schema\n    ------------\n    backup_file_on_device:\n        copy_dir ('str'): Directory containing file to be backed up (Mandatory)\n        copy_file ('str'): File to be backed up (Mandatory)\n        overwrite ('bool'): Overwrite the file if exists. Default value is True (Optional)\n        timeout ('int'): Copy timeout in second. Default value is 300 (Optional)\n\n    Example\n    -------\n    backup_file_on_device:\n        copy_dir: bootflash:\n        copy_file: ISSUCleanGolden.cfg\n\n    ",
      "module_name": "stages.stages",
      "uid": "backup_file_on_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1348"
    }
  },
  "change_boot_variable": {
    "iosxe": {
      "cat9500": {
        "doc": " This stage configures the boot variables to the provided image in\n    preparation for the next device reload.\n\n    Stage Schema\n    ------------\n    change_boot_variable:\n        images (list): Images to copy\n\n        timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n        max_time (int, optional): Maximum time to wait while saving\n            running-config to startup-config in seconds. Defaults to 300.\n\n        check_interval (int, optional): Time interval while checking save\n            running-config to startup-config completed in seconds. Defaults to 30.\n\n        write_memory (bool, optional): Execute 'write memory' after setting\n            BOOT var. Defaults to False.\n\n    Example\n    -------\n    change_boot_variable:\n        images:\n            - harddisk:/Genie-12351822-iedge-asr-uut\n        timeout: 150\n        max_time: 300\n        check_interval: 20\n\n    ",
        "module_name": "stages.stages",
        "uid": "change_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9500/stages.py#L26"
      },
      "cat9k": {
        "doc": " This stage configures the boot variables to the provided image in\n    preparation for the next device reload.\n\n    Stage Schema\n    ------------\n    change_boot_variable:\n        images (list): Images to copy\n\n        timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n        max_time (int, optional): Maximum time to wait while saving\n            running-config to startup-config in seconds. Defaults to 300.\n\n        check_interval (int, optional): Time interval while checking save\n            running-config to startup-config completed in seconds. Defaults to 30.\n\n        write_memory (bool, optional): Execute 'write memory' after setting\n            BOOT var. Defaults to False.\n\n    Example\n    -------\n    change_boot_variable:\n        images:\n            - harddisk:/Genie-12351822-iedge-asr-uut\n        timeout: 150\n        max_time: 300\n        check_interval: 20\n\n    ",
        "module_name": "stages.stages",
        "uid": "change_boot_variable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L22"
      },
      "doc": " This stage configures the boot variables to the provided image in\n    preparation for the next device reload.\n\n    Stage Schema\n    ------------\n    change_boot_variable:\n        images (list): Images to copy\n\n        timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n        max_time (int, optional): Maximum time to wait while saving\n            running-config to startup-config in seconds. Defaults to 300.\n\n        check_interval (int, optional): Time interval while checking save\n            running config to startup-config completed in seconds. Defaults to 30.\n\n        write_memory (bool, optional): Execute 'write memory' after\n            setting BOOT var. Defaults to False.\n\n        config_register (str, optional): Value to set config-register for\n            reload. Defaults to 0x2102.\n\n    Example\n    -------\n    change_boot_variable:\n        images:\n            - harddisk:/Genie-12351822-iedge-asr-uut\n        timeout: 150\n        max_time: 300\n        check_interval: 20\n\n    ",
      "module_name": "stages.stages",
      "uid": "change_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L27"
    },
    "nxos": {
      "doc": " This stage configures the boot variables to the provided image in\n    preparation for the next device reload.\n\n    Stage Schema\n    ------------\n    change_boot_variable:\n        images:\n            kickstart: [<kickstart image>] (Optional)\n            system: [<system image>] (Mandatory)\n        copy_vdc_all: <Copy on all VDCs, 'Boolean'> (Optional)\n        timeout: <Execute timeout in seconds, 'int'> (Optional)\n        max_time: <Maximum time section will take for checks in seconds, 'int'> (Optional)\n        check_interval: <Time interval, 'int'> (Optional)\n        stabilize_time: <Time in seconds till boot variables stabilization, 'int'> (Optional)\n        standby_copy_max_time: <Maximum time section will take for checks in seconds, 'int'> (Optional)\n        standby_copy_check_interval: <Time interval, 'int'> (Optional)\n\n\n    Example\n    -------\n    change_boot_variable:\n        images:\n            kickstart: bootflash:/kisckstart.gbin\n            system: bootflash:/system.gbin\n        copy_vdc_all: True\n        timeout: 150\n        max_time: 300\n        check_interval: 20\n        stabilize_time: 100\n        standby_copy_max_time: 100\n        standby_copy_check_interval: 10\n\n    ",
      "module_name": "stages.stages",
      "uid": "change_boot_variable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/stages.py#L28"
    }
  },
  "connect": {
    "com": {
      "doc": " This stage connects to the device that is being cleaned.\n\n    Stage Schema\n    ------------\n    connect:\n        timeout (int, optional): Connection timeout. Defaults to 200.\n        retry_timeout (int, optional): Overall timeout for retry mechanism. Defaults to 0 which means no retry.\n        retry_interval (int, optional): Interval for retry mechanism. Defaults to 0 which means no retry.\n\n    Example\n    -------\n    connect:\n        timeout: 60\n\n    ",
      "module_name": "stages.stages",
      "uid": "connect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L39"
    }
  },
  "copy_to_device": {
    "com": {
      "doc": " This stage will copy an image to a device from a networked location.\n\n    Stage Schema\n    ------------\n    copy_to_device:\n        origin:\n            files ('list'): Image files location on the server (Mandatory)\n            hostname ('str'): Hostname or address of the server (Mandatory)\n        destination:\n            directory ('str'): Location on the device to copy images (Mandatory)\n        protocol ('str'): Protocol used for copy operation (Mandatory)\n        verify_num_images ('bool'): Verify number of images provided by user\n                                  for clean is correct\n                                  Default True (Optional)\n        expected_num_images ('int'): Number of images expected to be provided\n                                   by user for clean\n                                   Default 1 (Optional)\n        vrf ('str'): Vrf name if applicable\n                   Default None (Optional)\n        timeout ('int'): Copy operation timeout in seconds\n                       Default 300 (Optional)\n        compact ('bool'): Compact copy mode if supported by the device\n                        Default False (Optional)\n        protected_files ('list'): File patterns that shouldn't be deleted\n                                Default None (Optional)\n        overwrite ('bool'): If image file already exists on device,\n                          still copy the file to the device\n                          Default False (Optional)\n        skip_deletion ('bool'): Do not delete any files even if there isn't\n                              any space on device\n                              Default False (Optional)\n        copy_attempts ('int'): Number of times to attempt copying image files\n                             Default 1 (no retry) (Optional)\n        check_file_stability ('bool'): Verify if the files are still being\n                                     copied on the file server\n                                     Default False (Optional)\n        stability_check_tries ('int'): Max number of checks that can be done\n                                     when checking file stability\n                                     Default 3 (Optional)\n        stability_check_delay ('int'): Delay between tries when checking file\n                                     stability in seconds\n                                     Default 2 (Optional)\n        min_free_space_percent ('int') : Minimum acceptable free disk space\n                                       percentage trying to reach by\n                                       deleting unprotected files\n                                       Default None (Optional)\n        use_kstack ('bool'): Use faster version of copy with limited options\n                           Default False (Optional)\n\n    Example\n    -------\n    copy_to_device:\n        origin:\n            hostname: server-1\n            files:\n                - /home/cisco/asr1k.bin\n        destination:\n            directory: harddisk:/\n        protocol: sftp\n        timeout: 300\n\n    ",
      "module_name": "stages.stages",
      "uid": "copy_to_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L615"
    }
  },
  "copy_to_linux": {
    "com": {
      "doc": " This stage copies an image to a location on a linux device. It can keep\n    the original name or modify the name as required.\n\n    Stage Schema\n    ------------\n    copy_to_linux:\n        origin:\n            files: <File location on remote server or local disk, 'list'> (Mandatory)\n            hostname: <Hostname or address of the server, if not provided the file will be treated as local. 'str'> (Optional)\n        destination:\n            directory: <Location on the file server, 'str'> (Mandatory)\n            hostname: <Hostname or address of the file server, if not provided the directory will be treated as local.\n                        This value is optional only when the hostname under origin is also optional. 'str'> (Optional)\n        protocol: <Protocol used for copy operation, 'str', default sftp> (Optional)\n        overwrite: <overwrite the file if the same file already exists, 'bool', default False> (Optional)\n        timeout: <Copy operation timeout in seconds, default 300 'int'> (Optional)\n        check_image_length: <check if image length exceeds certain limit 'bool', default False> (Optional)\n        image_length_limit: <custom image length limit, defaults 63, 'int'>  (Optional)\n        append_hostname: <append device hostname to the end of image while copying 'bool', default False> (Optional)\n        copy_attempts: <number of times to retry if copy failed, default 1 (no retry) 'int'> (Optional)\n        check_file_stability: <Verify if the files are still being copied on the file server, 'bool' default False> (Optional)\n        unique_file_name: <Enable/Disable appending six-digit random number to the end of file name to make it unique, 'bool', default False> (Optional)\n        unique_number: <User provided six-digit random number to append to the end of file name to make it unique, 'int', default None> (Optional)\n        rename_images: <User provided new file name. If multiple files exist then we append an incrementing number 'str'> (Optional)\n\n    Example\n    -------\n    copy_to_linux:\n        protocol: sftp\n        origin:\n            hostname: server-1\n            files:\n            - /home/cisco/kickstart.bin\n            - /home/cisco/system.bin\n        timeout: 300\n        destination:\n            hostname: file-server\n            directory: /auto/tftp-ssr/\n        copy_attempts: 2\n        check_file_stability: True\n        unique_file_name: True\n\n    ",
      "module_name": "stages.stages",
      "uid": "copy_to_linux",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L233"
    }
  },
  "delete_backup_from_device": {
    "com": {
      "doc": " This stage removes a backed up file from the device. It can optionally\n    replace the original file with the one that was backed up.\n\n    Stage Schema\n    ------------\n    delete_backup_from_device:\n        delete_dir ('str'): Directory containing file to be deleted (Mandatory)\n        delete_dir_stby ('str'): Directory containing file to be deleted for standby (Optional)\n        delete_file ('str'): File to be deleted up (Mandatory)\n        restore_from_backup ('bool'): Restore the file from backup file.\n                                    Default value is False (Optional)\n        overwrite ('bool'): Overwrite the file if exists. Default value is True (Optional)\n        timeout ('int'): Copy/Execute timeout in second. Default value is 300 (Optional)\n\n    Example\n    -------\n    delete_backup_from_device:\n        delete_dir: 'bootflash:'\n        delete_dir_stby: 'bootflash-stby:'\n        delete_file: ISSUCleanGolden.cfg_backup\n\n    ",
      "module_name": "stages.stages",
      "uid": "delete_backup_from_device",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1436"
    }
  },
  "delete_files_from_server": {
    "com": {
      "doc": " This stage deletes files from a server.\n\n    Stage Schema\n    ------------\n    delete_files_from_server:\n        server ('str'): <Hostname or address of the server> (optional)\n        files ('list'): <list of images to delete> (Optional)\n        protocol ('str'): <protocol used for deletion, Default value is sftp> (Optional)\n\n    Example\n    -------\n    delete_files_from_server:\n        server: 1.1.1.1\n        files:\n            - /home/cisco/kickstart.bin\n        protocol: sftp\n\n    ",
      "module_name": "stages.stages",
      "uid": "delete_files_from_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1557"
    }
  },
  "fabric_clean": {
    "nxos": {
      "aci": {
        "doc": " This stage will clean both ACI controllers and switches.\n\n    For controllers the stage will execute 'acidiag touch clean'.\n\n    For switches the stage will execute the following commands, where <boot_image>\n    is the currently running image if it exists, or the image copied to the\n    device (if applicable)::\n        - '/bin/setup-clean-config.sh'\n        - '/bin/setup-bootvars.sh <boot_image>'\n\n    Finally the stage will reload the device whether it's a controller or switch.\n\n    Stage Schema\n    ------------\n    fabric_clean:\n\n        aci_device_type (str): 'controller' or 'switch' used to define what type\n            of aci device this is.\n\n        cleaning_timeout (int, optional): Max time for cleaning scripts to execute.\n            Defaults to 90.\n\n        reload_timeout (int, optional): Max time for reload. Defaults to 800.\n\n        sleep_after_reload (int, optional): Time in seconds to sleep after the\n            device completes reloading. Defaults to 60.\n\n        copy_boot_image (dict, optional):\n\n            origin:\n\n                files (list): Image files location on the server.\n\n                hostname (str): Hostname or address of the server to copy from.\n                    This must exist in the testbed under the 'servers' block.\n\n            destination:\n\n                directory (str): Location on the device where the images\n                    should be copied to.\n\n            protocol (str): Protocol used for copy operation.\n\n            timeout (int, optional): Max time allowed for copy operation in\n                seconds. Defaults to 300.\n\n    Example\n    -------\n    fabric_clean:\n        aci_device_type: controller\n        cleaning_timeout: 90\n        copy_boot_image:\n            origin:\n                files: [/my_switch_image.bin]\n                hostname: my_server_from_testbed\n            destination:\n                directory: '/bootflash'\n            protocol: scp\n    ",
        "module_name": "stages.stages",
        "uid": "fabric_clean",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/aci/stages.py#L213"
      }
    }
  },
  "fabric_upgrade": {
    "nxos": {
      "aci": {
        "doc": " This stage upgrades (or downgrades) the firmware version for APIC\n    devices. This includes the controller-group and the switch-group.\n\n    Stage Schema\n    ------------\n    fabric_upgrade:\n\n        controller_image (list, optional): Contains the controller image.\n            Defaults to None.\n\n        switch_image (list, optional): Contains the switch image. Defaults to\n            None.\n\n        switch_group_name (str, optional): The name of the switch-group to\n            create. Defaults to switches.\n\n        clear_switch_group (bool, optional): Whether or not to clear the\n            switch-group configuration before configuring it. Defaults to True.\n\n        sleep_after_delete (int, optional): How long in seconds to sleep after\n            clearing the firmware repository. Defaults to 5.\n\n        switch_group_nodes (list, optional): Contains the Nodes which will\n            be added to the switch_group_name. Defaults to None.\n\n        timeouts (dict, optional):\n\n            firmware_repository_add (int, optional): Max time in seconds allowed\n                for adding images to the firmware repository. Defaults to\n                300 (5 mins).\n\n            controller_upgrade (int, optional): Max time in seconds allowed for\n                upgrading the controller. Defaults to 1800 (30 mins).\n\n            controller_reconnect (int, optional): Max time in seconds allowed\n                for reconnecting to the controller during upgrade. This may\n                occur if there is only one controller. Defaults to 900 (15 mins).\n\n            controller_upgrade_after_reconnect (int, optional): Max time in\n                seconds allowed for completing the controller upgrade after\n                reconnecting. Defaults to 300 (5 mins).\n\n            switch_upgrade (int, optional): Max time in seconds allowed for\n                upgrading switches. Defaults to 2700 (45 mins).\n\n            stabilize_switch_group_config (int, optional): Time to sleep after\n                configuring the switch-group. Defaults to 120 (2 mins).\n\n    Example\n    -------\n    fabric_upgrade:\n        switch_group_name: my_switches\n        switch_group_nodes: [switch1, switch2]\n    ",
        "module_name": "stages.stages",
        "uid": "fabric_upgrade",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/aci/stages.py#L18"
      }
    }
  },
  "install_image": {
    "iosxe": {
      "doc": " This stage installs a provided image onto the device using the install\n    CLI. It also handles the automatic reloading of your device after the\n    install is complete.\n\n    Stage Schema\n    ------------\n    install_image:\n        images (list): Image to install\n\n        save_system_config (bool, optional): Whether or not to save the system\n            config if it was modified. Defaults to False.\n\n        install_timeout (int, optional): Maximum time to wait for install\n            process to finish. Defaults to 500.\n\n        reload_timeout (int, optional): Maximum time to wait for reload process\n            to finish. Defaults to 800.\n\n    Example\n    -------\n    install_image:\n        images:\n          - /auto/some-location/that-this/image/stay-isr-image.bin\n        save_system_config: True\n        install_timeout: 1000\n        reload_timeout: 1000\n\n    ",
      "module_name": "stages.stages",
      "uid": "install_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L447"
    }
  },
  "install_image_and_packages": {
    "iosxr": {
      "doc": " This stage installs the provided image and optional packages onto\n    your device using the install CLI. The stage will also handle the\n    automatic reload.\n\n    Stage Schema\n    ------------\n    install_image_and_packages:\n        image:\n            - <image to install> (Mandatory)\n        packages:\n            - <package to install> (Optional)\n            - <package to install> (Optional)\n        install_timeout: <timeout used for install operations, 'int', Default 300> (Optional)\n        reload_timeout: <timeout used for device reloads, 'int', Default 900> (Optional)\n\n\n    Example\n    -------\n    install_image_and_packages:\n        image:\n            - flash:image.iso\n        packages:\n            - flash:package.rpm\n\n    ",
      "module_name": "stages.stages",
      "uid": "install_image_and_packages",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L293"
    }
  },
  "install_packages": {
    "iosxe": {
      "doc": " This stage installs the provided packages using the install CLI.\n\n    Stage Schema\n    ------------\n    install_packages:\n        packages (list): Packages to install.\n\n        save_system_config (bool, optional): Whether or not to save the system\n            config if it was modified. Defaults to False.\n\n        install_timeout (int, optional): Maximum time to wait for install\n            process to finish. Defaults to 300.\n\n    Example\n    -------\n    install_image:\n        images:\n          - /auto/some-location/that-this/image/stay-isr-image.bin\n        save_system_config: True\n        install_timeout: 1000\n\n    ",
      "module_name": "stages.stages",
      "uid": "install_packages",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L592"
    }
  },
  "install_remove_inactive": {
    "iosxe": {
      "doc": " This stage removes partially installed packages/images left\n    on the device. If a super package is left partially installed,\n    we cannot attempt to install another until it is removed.\n\n    Stage Schema\n    ------------\n    install_image:\n        timeout (int, optional): Maximum time to wait for remove process to\n            finish. Defaults to 180.\n\n    Example\n    -------\n    install_remove_inactive:\n        timeout: 180\n\n    ",
      "module_name": "stages.stages",
      "uid": "install_remove_inactive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L409"
    }
  },
  "load_pies": {
    "iosxr": {
      "doc": " This stage installs provided pies onto the device.\n\n    Stage Schema\n    ------------\n    load_pies:\n        files ('list'): List of XR pies to install\n        server('str'): Hostname or IP address of server to use for install command\n                     Default None (testbed YAML reverse lookup for TFTP server)\n        prompt_level('str'): Prompt-level argument for install command\n                           Default 'none' (Optional)\n        synchronous ('bool'): Synchronous option for install command\n                            Default True (Optional)\n        install_timeout ('int'): Maximum time required for install command execution to complete\n                               Default 600 seconds (Optional)\n        max_time ('int'): Maximum time to wait while checking for pies installed\n                        Default 300 seconds (Optional)\n        check_interval ('int'): Time interval while checking for pies installed\n                              Default 30 seconds (Optional)\n\n    Example\n    -------\n    load_pies:\n        files:\n            - /auto/path/to/image/asr9k-mcast-px.pie-7.3.1.08I\n            - /auto/path/to/image/asr9k-mgbl-px.pie-7.3.1.08I\n            - /auto/path/to/image/asr9k-mpls-px.pie-7.3.1.08I\n        server: 10.1.6.244\n        prompt_level: 'all'\n        synchronous: True\n        timeout: 150\n        max_time: 300\n        check_interval: 20\n\n    ",
      "module_name": "stages.stages",
      "uid": "load_pies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L37"
    }
  },
  "node_registration": {
    "nxos": {
      "aci": {
        "doc": " This stage registers nodes on APIC using REST API.\n\n    Stage Schema\n    ------------\n    node_registration:\n\n        nodes (list): Nodes to register on APIC\n\n        rest_alias (str, optional): Connection alias for REST connection.\n            Defaults to 'rest'.\n\n        verify_max_time (int, optional): Max time to verify node registration.\n            Defaults to 480.\n\n        verify_interval (int, optional): How often to attempt verify node registration.\n            Defaults to 30.\n\n    Example\n    -------\n    node_registration:\n        nodes: [Spine1, Spine2]\n        rest_alias: cli\n    ",
        "module_name": "stages.stages",
        "uid": "node_registration",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/aci/stages.py#L365"
      }
    }
  },
  "ping_server": {
    "com": {
      "doc": " This stage pings a server from a device to ensure connectivity.\n\n    Stage Schema\n    ------------\n    ping_server:\n        server: <Hostname or address of the server to ping `str`> (Mandatory)\n        vrf: <Vrf used in ping `str`> (Optional)\n        timeout: <timeout for ping command. Default 60 seconds `int`> (Optional)\n        min_success_rate: <minimum ping success rate to mark seciton as passed. Default 60 % `int`> (Optional)\n        max_attempts: <maximum number of attempts to check minimum ping success rate. Default 5 `int`> (Optional)\n        interval: <time between re-attempts to check minimum ping success rate. Default 30 seconds `int`> (Optional)\n\n    Example\n    -------\n    ping_server:\n        server: server-1\n        vrf: management\n        timeout: 120\n        min_success_rate: 75\n        max_attempts: 3\n        interval: 60\n\n    ",
      "module_name": "stages.stages",
      "uid": "ping_server",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L115"
    }
  },
  "power_cycle": {
    "com": {
      "doc": " This stage power cycles the device\n\n        Stage schema\n        ------------\n        power_cycle:\n\n            sleep_after_power_off (int, optional): Time in seconds to sleep\n                after powering off the device. Defaults to 30.\n\n            boot_timeout (int, option): Max time in seconds allowed for the\n                device to boot. Defaults to 600.\n\n        Example\n        -------\n        power_cycle:\n            sleep_after_power_off: 5\n    ",
      "module_name": "stages.stages",
      "uid": "power_cycle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1984"
    }
  },
  "reload": {
    "com": {
      "doc": " This stage reloads the device.\n\n    Stage Schema\n    ------------\n    reload:\n        reload_service_args: (Optional, if not specified defaults below are used)\n            timeout: <reload timeout value, default 800 seconds. 'int'> (Optional)\n            reload_creds: <Credential name defined in the testbed yaml file to be used during reload, default 'default'. 'str'> (Optional)\n            prompt_recovery: <Enable/Disable prompt recovery feature, 'bool'> (Optional)\n            <Key>: <Value> (Any other key:value pairs that the unicon reload service allows for)\n\n        check_modules:\n            check: <Enable/Disable checking of modules after reload, default 'True'. 'bool'> (Optional)>\n            timeout: <timeout value to verify modules are in stable state, default 180 seconds. 'int'> (Optional)\n            interval: <interval value between checks for verifying module status, default 30 seconds. 'int'> (Optional)\n\n\n    Example\n    -------\n    reload:\n        reload_service_args:\n            timeout: 600\n            reload_creds: clean_reload_creds\n            prompt_recovery: True\n            reconnect_sleep: 200 (Unicon NXOS reload service argument)\n\n        check_modules:\n            check: False\n\n    ",
      "module_name": "stages.stages",
      "uid": "reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1075"
    }
  },
  "revert_vm_snapshot": {
    "com": {
      "doc": " This stage reverts the virtual device to the provided snapshot\n\n        Stage schema\n        ------------\n        revert_snapshot:\n\n            vm_hostname (str, optional): Name of the VM that is on the ESXi\n                server, if not provided, it will be set as the device name.\n\n            esxi_server (str): ESXI Server which holds the vm to revert the\n                snapshot.\n\n            recovery_snapshot_name (str): Name of the snapshot to have VM\n                reverted back to.\n\n            max_recovery_attempts (int, optional): Maximum number of recovery\n                attempts. Defaults to 2.\n\n            sleep_after_powering_off (int, optional): Wait time after powering\n                off devices. Default value is 60 seconds.\n\n            sleep_time_stabilize_device (int, optional): Wait time before\n                finishing revert snapshot stage. Defaults to 300.\n\n            sleep_time_after_powering_on (int, optional): Wait time after\n                powering on devices to reach steady state. Defaults to 600.\n\n        Example\n        -------\n        revert_vm_snapshot:\n            esxi_server: ssr-ucs2\n            vm_hostname: P1-4\n            max_recovery_attempts: 2\n            sleep_after_powering_off: 60\n            sleep_time_after_powering_on: 600\n            sleep_time_stabilize_device: 300\n            recovery_snapshot_name: golden\n    ",
      "module_name": "stages.stages",
      "uid": "revert_vm_snapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1635"
    }
  },
  "tftp_boot": {
    "iosxe": {
      "doc": " This stage boots a new image onto your device using the tftp booting\n    method.\n\n    Stage Schema\n    ------------\n    tftp_boot:\n        image (list): Image to boot with\n\n        ip_address (list): Management ip address to configure to reach to the\n            tftp server\n\n        subnet_mask (str): Management subnet mask\n\n        gateway (str): Management gateway\n\n        tftp_server (str): Tftp server that is reachable with management interface\n\n        recovery_password (str, optional): Enable password for device\n            required after bootup. Defaults to None.\n\n        save_system_config (bool, optional): Whether or not to save the\n            system config if it was modified. Defaults to True.\n\n        timeout (int, optional): Max time during which tftp boot must\n            complete. Defaults to 600.\n\n        config_reg_timeout (int, optional): Max time to set config-register.\n            Defaults to 30.\n\n    Example\n    -------\n    tftp_boot:\n        image:\n          - /auto/some-location/that-this/image/stay-isr-image.bin\n        ip_address: [10.1.7.126, 10.1.7.127]\n        gateway: 10.1.7.1\n        subnet_mask: 255.255.255.0\n        tftp_server: 11.1.7.251\n        recovery_password: nbv_12345\n        save_system_config: False\n        timeout: 600\n        config_reg_timeout: 10\n\n    There is more than one ip address, one for each supervisor.\n\n    ",
      "module_name": "stages.stages",
      "uid": "tftp_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L216"
    },
    "iosxr": {
      "doc": " This stage boots a new image onto your device using the tftp booting\n    method.\n\n    Stage Schema\n    ------------\n    tftp_boot:\n        image: <Image to boot with `list`> (Mandatory)\n        ip_address: <Management ip address to configure to reach to the TFTP server `str`> (Mandatory)\n        subnet_mask: <Management subnet mask `str`> (Mandatory)\n        gateway: <Management gateway `str`> (Mandatory)\n        tftp_server: <tftp server is reachable with management interface `str`> (Mandatory)\n        timeout: <Maximum time during which TFTP boot process must complete `int`> (Optional, Default 600 seconds)\n        config_reg_timeout: <Time to wait after setting config-register `int`> (Optional, Default 30 seconds)\n        device_reload_sleep: <Time to wait after reloading device `int`> (Optional, Default 20 seconds)\n        recovery_username: <Enable username for device required after bootup `str`> (Optional, Default None)\n        recovery_password: <Enable password for device required after bootup `str`> (Optional, Default None)\n\n    Example\n    -------\n    tftp_boot:\n        image:\n            - /auto/some-location/that-this/image/asr9k-mini-px.vm\n        ip_address: [10.1.7.126, 10.1.7.127]\n        gateway: 10.1.7.1\n        subnet_mask: 255.255.255.0\n        tftp_server: 11.1.7.251\n        timeout: 1200\n        config_reg_timeout: 60\n        device_reload_sleep: 300\n        recovery_username: admin\n        recovery_password: nbv_12345\n\n    Note: There is more than one ip address, one for each supervisor.\n\n    ",
      "module_name": "stages.stages",
      "uid": "tftp_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L138"
    },
    "nxos": {
      "doc": " This stage boots a new image onto your device using the tftp booting\n    method.\n\n    Stage Schema\n    ------------\n    tftp_boot:\n        image: <Image to boot with `str`> (Mandatory)\n        ip_address: <Management ip address to configure to reach to the TFTP server `str`> (Mandatory)\n        subnet_mask: <Management subnet mask `str`> (Mandatory)\n        gateway: <Management gateway `str`> (Mandatory)\n        tftp_server: <tftp server is reachable with management interface> (Mandatory)\n        timeout: <Maximum time for tftp boot `int`> (Mandatory)\n        reboot_delay: <Maximum time for tftp boot `int`> (Optional)\n        reconnect_delay: <Once device recovered, delay before final reconnect>, 'int'> (Default: 60)\n\n    Example:\n    --------\n    tftp_boot:\n        image:\n          - /auto/some-location/that-this/image/stay-isr-image.bin\n        ip_address: [10.1.7.126, 10.1.7.127]\n        gateway: 10.1.7.1\n        subnet_mask: 255.255.255.0\n        tftp_server: 11.1.7.251\n\n    There is more than one ip address, one for each supervisor.\n\n    ",
      "module_name": "stages.stages",
      "uid": "tftp_boot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/stages.py#L136"
    }
  },
  "tokens": [
    "iosxr",
    "nxos",
    "aci",
    "com",
    "iosxe",
    "cat9500",
    "cat9k"
  ],
  "verify_running_image": {
    "com": {
      "doc": " This stage verifies the currently running image is the expected image.\n\n    Stage Schema\n    ------------\n    verify_running_image:\n        images: <Images reloaded on the device, 'list'> (Mandatory)\n\n    Example\n    -------\n    verify_running_image:\n        images:\n            - test_image.gbin\n\n    ",
      "module_name": "stages.stages",
      "uid": "verify_running_image",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1310"
    }
  },
  "write_erase": {
    "com": {
      "doc": " This stage executes 'write erase' on the device\n\n    Stage Schema\n    ------------\n    write_erase:\n        timeout (int, optional): Max time allowed for command to complete. Defaults to 300 seconds.\n\n    Example\n    -------\n    write_erase:\n        timeout: 100\n\n    ",
      "module_name": "stages.stages",
      "uid": "write_erase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1037"
    }
  }
}