{
  "ApplyConfiguration": {
    "apic": {
      "doc": "This stage executes the REST API against the device.\n\nStage schema\n------------\napply_configuration:\n\n    method (str, optional): the REST API method to call (get/put/post/delete).\n        Defaults to 'post'.\n\n    rest_alias (str, optional): the connection alias for the REST\n        connection. Defaults to 'rest'.\n\n    rest_via (str, optional): the connection name from the topology.\n        Defaults to 'rest'.\n\n    kwargs (dict, optional): the keyword arguments to pass to the REST API call.\n        Defaults to None.\n\nExample\n-------\napply_configuration:\n    method: get\n    kwargs:\n        dn: api/class/topSystem.json\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ApplyConfiguration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/apic/stages.py#L1036"
    },
    "com": {
      "doc": "Apply configuration on the device, either by providing a file or a\nraw configuration.\n\nStage Schema\n------------\napply_configuration:\n\n    configuration (str, optional): String representation of the configuration to\n        apply. Defaults to None.\n\n    configuration_from_file (str, optional): A file that contains a configuration\n        that will be read. The configuration contained will then be applied as\n        if a string representation of the config was applied. Defaults to None.\n\n    file (str, optional): A saved configuration file that will be used. The file\n        will either be used in copy run start or configure replace based on the\n        'configure_replace' argument. Defaults to None.\n\n    configure_replace (bool, optional): When 'True' use 'configure replace' instead\n        of 'copy run start'. Defaults to False.\n\n    config_timeout (int, optional): Max time in seconds allowed for applying the\n        configuration. Defaults to 60.\n\n    config_stable_time (int, optional): Max time in seconds allowed for the\n        configuration to stabilize. Defaults to 10.\n\n    copy_vdc_all (bool, optional): If 'True' copy on all VDCs. Defaults to False.\n\n    max_time (int, optional): Maximum time in seconds allowed for any\n        verifications. Defaults to 300.\n\n    check_interval (int, optional): How often in seconds to check. Defaults to 60.\n\n    skip_copy_run_start (bool, optional): If 'True' do not copy the running config\n        to the startup config. Defaults to False.\n\n    copy_directly_to_startup (bool, optional): If 'True' copy the provided\n        configuration directly to the startup config. Defaults to False.\n\n    error_pattern (list, optional): if error_pattern list is given,\n        it will be passed to device.configure() to use the error_pattern\n\nExample\n-------\napply_configuration:\n    configuration: |\n        interface ethernet2/1\n        no shutdown\n    config_timeout: 600\n    config_stable_time: 10\n    copy_vdc_all: True\n    max_time: 300\n    check_interval: 20\n    copy_directly_to_startup: False\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ApplyConfiguration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1568"
    },
    "iosxe": {
      "sdwan": {
        "doc": "Apply configuration on the device, either by providing a file or a\nraw configuration.\n\nStage Schema\n------------\napply_configuration:\n\n    configuration (str, optional): String representation of the configuration to\n        apply. Defaults to None.\n\n    configuration_from_file (str, optional): A file that contains a configuration\n        that will be read. The configuration contained will then be applied as\n        if a string representation of the config was applied. Defaults to None.\n\n    file (str, optional): A saved configuration file that will be used. The file\n        will either be used in copy run start or configure replace based on the\n        'configure_replace' argument. Defaults to None.\n\n    configure_replace (bool, optional): When 'True' use 'configure replace' instead\n        of 'copy run start'. Defaults to False.\n\n    config_timeout (int, optional): Max time in seconds allowed for applying the\n        configuration. Defaults to 60.\n\n    config_stable_time (int, optional): Max time in seconds allowed for the\n        configuration to stabilize. Defaults to 10.\n\n    copy_vdc_all (bool, optional): If 'True' copy on all VDCs. Defaults to False.\n\n    max_time (int, optional): Maximum time in seconds allowed for any\n        verifications. Defaults to 300.\n\n    check_interval (int, optional): How often in seconds to check. Defaults to 60.\n\n    skip_copy_run_start (bool, optional): If 'True' do not copy the running config\n        to the startup config. Defaults to False.\n\n    copy_directly_to_startup (bool, optional): If 'True' copy the provided\n        configuration directly to the startup config. Defaults to False.\n\nExample\n-------\napply_configuration:\n    configuration: |\n        interface ethernet2/1\n        no shutdown\n    config_timeout: 600\n    config_stable_time: 10\n    copy_vdc_all: True\n    max_time: 300\n    check_interval: 20\n    copy_directly_to_startup: False\n\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ApplyConfiguration",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L262"
      }
    },
    "iosxr": {
      "doc": "Apply configuration on the device, either by providing a file or a\nraw configuration.\n\nStage Schema\n------------\napply_configuration:\n\n    configuration (str, optional): String representation of the configuration to\n        apply. Defaults to None.\n\n    configuration_from_file (str, optional): A file that contains a configuration\n        that will be read. The configuration contained will then be applied as\n        if a string representation of the config was applied. Defaults to None.\n\n    file (str, optional): A saved configuration file that will be used. The file\n        will either be used in copy run start or configure replace based on the\n        'configure_replace' argument. Defaults to None.\n\n    configure_replace (bool, optional): When 'True' use 'configure replace' instead\n        of 'copy run start'. Defaults to False.\n\n    config_timeout (int, optional): Max time in seconds allowed for applying the\n        configuration. Defaults to 60.\n\n    config_stable_time (int, optional): Max time in seconds allowed for the\n        configuration to stabilize. Defaults to 10.\n\n    copy_directly_to_startup (bool, optional): If 'True' copy the provided\n        configuration directly to the startup config. Defaults to False.\n\nExample\n-------\napply_configuration:\n    configuration: |\n        interface ethernet2/1\n        no shutdown\n    config_timeout: 600\n    config_stable_time: 10\n    copy_directly_to_startup: False\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ApplyConfiguration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L645"
    }
  },
  "ApplyGlobalConfiguration": {
    "linux": {
      "wsim": {
        "doc": "This stage apply configuration on the device with user provided data\nStage Schema\n------------\napply_global_configuration:\n    ctrl_type(str): Type of the controller in which wsim will simulate the Aps/Clients.\n    ctrl_ip(str): Management IP of the controller\n    ctrl_username(str): username of the controller\n    ctrl_password(str): password of the controller\n    ap_name(str): Base Ap name\n    ap_version(str,optional): Version of the AP\n    ap_vlan(str): Vlan of the AP\n    ap_freq(str,optional): Ap radio 2.4Ghz/5GHz\n    ap_base_mac(str): Base mac address of the AP\n    client_base_mac(str): Client base mac address\n\nExample\n-------\napply_global_configuration:\n    ctrl_type: 'EWLC'\n    ctrl_ip: '9.2.45.15'\n    ctrl_username: 'welcome'\n    ctrl_password: 'welcome'\n    ap_name: 'wsim-AP'\n    ap_model: '9117'\n    ap_vlan: '46'\n    ap_ip: '9.2.45.15' #give the controller mgmt IP\n    ap_base_mac: '00:e5:64:00:00:00'\n    client_base_mac: '00:00:e5:64:00:00'\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ApplyGlobalConfiguration",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/linux/wsim/stages.py#L101"
      }
    }
  },
  "ApplySelfSignedCert": {
    "iosxe": {
      "c9800": {
        "c9800_cl": {
          "doc": " This stage configures the self-signed-certificate for the given trustpoint.\n\n    Stage Schema\n    ------------\n    apply_self_signed_cert:\n\n        key_size (int, optional): Key size to be configured. Default is 2048\n\n        signature_algorithm (str, optional): Algorithm to be applied. Default is sha256\n\n        encryption_type (int, optional): Encryption type to be configured. Default is 0\n\n        password (str): Password to be configured for the trustpoint.\n\n        timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    Examples:\n        apply_self_signed_cert:\n            key_size:2048\n            signature_algorithm:sha256\n            encryption_type:0\n            password:cisco123\n            timeout: 150\n    ",
          "module_name": "stages.stages",
          "package": "genie.libs.clean",
          "uid": "ApplySelfSignedCert",
          "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/c9800_cl/stages.py#L19"
        }
      }
    }
  },
  "BackupFileOnDevice": {
    "com": {
      "doc": "This stage copies an existing file on the device and prepends 'backup_'\nto the start of the file name.\n\nStage Schema\n------------\nbackup_file_on_device:\n\n    copy_dir (str): Directory containing file to be backed up\n\n    copy_file (str): File to be backed up\n\n    overwrite (bool, optional): Overwrite the file if exists. Defaults to True.\n\n    timeout (int, optional): Copy timeout in second. Defaults to 300.\n\nExample\n-------\nbackup_file_on_device:\n    copy_dir: bootflash:\n    copy_file: ISSUCleanGolden.cfg\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "BackupFileOnDevice",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1893"
    }
  },
  "ChangeBootVariable": {
    "ios": {
      "doc": "This stage configures boot variables of the device.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images (list): Images to copy\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    current_running_image (bool, optional): Set the boot variable to the currently\n        running image from the show version command instead of the image provided.\n        Defaults to False.\n\nExample\n-------\nchange_boot_variable:\n    images:\n        - harddisk:/Genie-12351822-iedge-asr-uut\n    timeout: 150\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ChangeBootVariable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/ios/stages.py#L16"
    },
    "iosxe": {
      "cat9500": {
        "doc": "This stage configures boot variables of the device using the following steps:\n\n    - Delete existing boot variables.\n    - Configure boot variables using the provided 'images'.\n    - Write memory.\n    - Verify the boot variables are as expected.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images (list): Image files to use when configuring the boot variables.\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    current_running_image (bool, optional): Set the boot variable to the currently\n        running image from the show version command instead of the image provided.\n        Defaults to False.\n\nExample\n-------\nchange_boot_variable:\n    images:\n        - harddisk:/image.bin\n    timeout: 150\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ChangeBootVariable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9500/stages.py#L17"
      },
      "cat9k": {
        "doc": "This stage configures boot variables of the device using the following steps:\n\n    - Delete existing boot variables.\n    - Configure boot variables using the provided 'images'.\n    - Write memory.\n    - Verify the boot variables are as expected.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images (list): Image files to use when configuring the boot variables.\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    current_running_image (bool, optional): Set the boot variable to the currently\n        running image from the show version command instead of the image provided.\n        Defaults to False.\n\nExample\n-------\nchange_boot_variable:\n    images:\n        - harddisk:/image.bin\n    timeout: 150\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ChangeBootVariable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L32"
      },
      "doc": "This stage configures boot variables of the device using the following steps:\n\n    - Delete existing boot variables.\n    - Configure boot variables using the provided 'images'.\n    - Set the configuration-register using the provided 'config_register'.\n    - Write memory.\n    - Verify the boot variables are as expected.\n    - Verify the configuration-register is as expected.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images (list): Image files to use when configuring the boot variables.\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    config_register (str, optional): Value to set config-register for\n        reload. Defaults to 0x2102.\n\n    current_running_image (bool, optional): Set the boot variable to the currently\n        running image from the show version command instead of the image provided.\n        Defaults to False.\n\nExample\n-------\nchange_boot_variable:\n    images:\n        - harddisk:/image.bin\n    timeout: 150\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "sdwan": {
        "doc": "This stage change boot variables of the device using the following steps:\n\n    - Delete existing boot variables.\n    - Configure boot variables using the provided 'images'.\n    - Write memory.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images (list): Image files to use when configuring the boot variables.\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\nExample\n-------\nchange_boot_variable:\n    timeout: 150\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ChangeBootVariable",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L969"
      },
      "uid": "ChangeBootVariable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L29"
    },
    "nxos": {
      "doc": "This stage configures boot variables of the device using the following steps:\n\n    - Delete existing boot variables.\n    - Configure boot variables using the provided 'images'.\n    - Write memory.\n    - Verify the boot variables are as expected.\n\nStage Schema\n------------\nchange_boot_variable:\n\n    images:\n\n        kickstart (list, optional): The kickstart image file\n\n        system (list): The system image file\n\n    copy_vdc_all (bool, optional): If True copy onto all VDCs. Defaults to False.\n\n    timeout (int, optional): Execute timeout in seconds. Defaults to 300.\n\n    max_time (int, optional): Maximum time in seconds allowed for verifications.\n        Defaults to 300.\n\n    check_interval (int, optional): How often to check verifications in seconds.\n        Defaults to 60.\n\n    standby_copy_max_time (int, optional): Maximum time in seconds allowed for\n        copying to standby RP. Defaults to 300.\n\n    standby_copy_check_interval (int, optional): How often to check if the copy\n        to the standby RP is complete. Defaults to 20.\n\n    current_running_image (bool, optional): Set the boot variable to the currently\n        running image from the show version command instead of the image provided.\n        Defaults to False.\n\nExample\n-------\nchange_boot_variable:\n    images:\n        kickstart: bootflash:/kisckstart.gbin\n        system: bootflash:/system.gbin\n    copy_vdc_all: True\n    timeout: 150\n    max_time: 300\n    check_interval: 20\n    standby_copy_max_time: 100\n    standby_copy_check_interval: 10\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ChangeBootVariable",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/stages.py#L25"
    }
  },
  "CliBoot": {
    "aireos": {
      "doc": "This stage boot the device from CLI using the following steps:\n\n    - Using the provided info to download the requested boot image\n    - Waiting for the image download\n    - Reboot the device\n\nStage Schema\n------------\nCliBoot:\n\n    filename (str): The name of the file to be using to download.\n\n    username (str, optional): FTP username if using FTP protocol\n    \n    password (str, optional): FTP password if using FTP protocol\n\n    protocol (str): Supporting TFTP/FTP, default is FTP\n\n    path (str): A path to the image location\n\n    tftp_server (str): an IP address for tftp server\n    \n\n\nExample\n-------\ncli_boot:\n    filename: 'AIR-CT3504-K9-8-8-111-0.aes'\n    timeout: 1000\n    username: rcpuser\n    password: cisco123$\n    protocol: ftp\n    tftp_server: 10.10.2.10\n    path: /auto/my-ftp/\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "CliBoot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/aireos/stages.py#L26"
    }
  },
  "ConfigureApTxPower": {
    "iosxe": {
      "c9800": {
        "doc": " This stage verifies the configured Tx power.\n\n    Stage Schema\n    ------------\n    configure_ap_tx_power:\n        configure_ap_tx_power(str): tx power to be verified\n\n    Examples:\n        configure_ap_tx_power:\n            tx_power: \n                - \"1\"\n                - \"2\"\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ConfigureApTxPower",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L250"
      }
    }
  },
  "ConfigureManagement": {
    "com": {
      "doc": "This stage configures the management IP settings on the device.\n\nStage Schema\n------------\nconfigure_management:\n\n        address ('dict', optional):  Address(es) to configure on the device (syntax: address/mask) (optional)\n            ipv4 ('str') or ('list'): ipv4 address\n            ipv6 ('str') or ('list'): ipv6 address\n\n        gateway: (dict, optional) Gateway address(es) for default route\n            ipv4 ('str') or ('list'): ipv4 gateway address\n            ipv6 ('str') or ('list'): ipv6 gateway address\n\n        vrf (str, optional): VRF to use for management interface\n\n        interface (str, optional): Management interface to use\n\n        routes ('dict', optional):\n           ipv4 (list of 'dict'): ipv4 routes\n              - subnet: (str) subnet including mask\n                next_hop: (str) next_hop for this subnet\n           ipv6 (list of 'dict'): ipv6 routes\n              - subnet: (str) subnet including mask\n                next_hop: (str) next_hop for this subnet\n\n        dhcp_timeout ('int', optional): DHCP timeout in seconds (default: 30)\n\n        protocols ('list', optional): [list of protocols]\n\n        set_hostname (bool): Configure device hostname (default: False)\n\n\nExample\n-------\nconfigure_management:\n    vrf: Mgmt-vrf\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ConfigureManagement",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2802"
    }
  },
  "ConfigureRrmDcaChannel": {
    "iosxe": {
      "c9800": {
        "doc": " This stage removes the specified channels from the controller.\n\n    Stage Schema\n    ------------\n    configure_rrm_dca_channel:\n        N/A\n\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ConfigureRrmDcaChannel",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L149"
      }
    }
  },
  "Connect": {
    "com": {
      "doc": "This stage connects to the device that is being cleaned.\n\nStage Schema\n------------\nconnect:\n\n    via (str, optional): Which connection to use from the testbed file. Uses the\n        default connection if not specified.\n\n    timeout (int, optional): The timeout for the connection to complete in seconds.\n        Defaults to 200.\n\n    retry_timeout (int, optional): Overall timeout for retry mechanism in seconds.\n        Defaults to 0 which means no retry.\n\n    retry_interval (int, optional): Interval for retry mechanism in seconds. Defaults\n        to 0 which means no retry.\n\nExample\n-------\nconnect:\n    timeout: 60\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "Connect",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L33"
    },
    "iosxe": {
      "sdwan": {
        "doc": "This stage connects to the device that is being cleaned.\n\nStage Schema\n------------\nconnect:\n\n    via (str, optional): Which connection to use from the testbed file. Uses the\n        default connection if not specified.\n\n    timeout (int, optional): The timeout for the connection to complete in seconds.\n        Defaults to 200.\n\n    retry_timeout (int, optional): Overall timeout for retry mechanism in seconds.\n        Defaults to 0 which means no retry.\n\n    retry_interval (int, optional): Interval for retry mechanism in seconds. Defaults\n        to 0 which means no retry.\n\nExample\n-------\nconnect:\n    timeout: 60\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "Connect",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L31"
      }
    },
    "linux": {
      "wsim": {
        "doc": "This stage connects to the device that is being cleaned.\nStage Schema\n------------\nconnect:\n    via (str, optional): Which connection to use from the testbed file. Uses the\n        default connection if not specified.\n    timeout (int, optional): The timeout for the connection to complete in seconds.\n        Defaults to 200.\n    retry_timeout (int, optional): Overall timeout for retry mechanism in seconds.\n        Defaults to 0 which means no retry.\n    retry_interval (int, optional): Interval for retry mechanism in seconds. Defaults\n        to 0 which means no retry.\nExample\n-------\nconnect:\n    timeout: 60\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "Connect",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/linux/wsim/stages.py#L19"
      }
    }
  },
  "CopyRunToFlash": {
    "com": {
      "doc": "This stage will copy running-configuration to device flash.\n\nStage Schema\n------------\ncopy_run_to_flash:\n\n    file_name (str): Name of the file to be saved to flash.\n    timeout (int, optional): Copy operation timeout in seconds. Defaults to 300.\n    overwrite (bool, optional): Overwrite the file if a file with the same name already exists. Defaults to True.\n\nExample\n-------\ncopy_run_to_flash:\n    file_name: base.cfg\n    timeout: 300\n    overwrite: True\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "CopyRunToFlash",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2752"
    }
  },
  "CopyToDevice": {
    "apic": {
      "doc": "This stage will copy an image to a device from a networked location.\n\nStage Schema\n------------\ncopy_to_device:\n\n    origin:\n        files (list): Image files location on the server.\n\n        hostname (str): Hostname or address of the server.\n\n    destination:\n\n        directory (str): Location on the device to copy images.\n\n    protocol (str): Protocol used for copy operation.\n\n    verify_num_images (bool, optional): Verify number of images provided by\n        user for clean is correct. Defaults to True.\n\n    expected_num_images (int, optional): Number of images expected to be\n        provided by user for clean. Defaults to 1.\n\n    vrf (str, optional): Vrf used to copy. Defaults to an empty string.\n\n    timeout (int, optional): Copy operation timeout in seconds. Defaults to 300.\n\n    compact (bool, optional): Compact copy mode if supported by the device.\n        Defaults to False.\n\n    protected_files (list, optional): File patterns that should not be deleted.\n        Defaults to None.\n\n    overwrite (bool, optional): Overwrite the file if a file with the same\n        name already exists. Defaults to False.\n\n    skip_deletion (bool, optional): Do not delete any files even if there isn't\n        any space on device. Defaults to False.\n\n    copy_attempts (int, optional): Number of times to attempt copying image\n        files. Defaults to 1 (no retry).\n\n    copy_attempts_sleep (int, optional): Number of seconds to sleep between\n        copy_attempts. Defaults to 30.\n\n    check_file_stability (bool, optional): Verifies that the file size is not\n        changing. This ensures the image is not actively being copied.\n        Defaults to False.\n\n    stability_check_tries (int, optional): Max number of checks that can be\n        done when checking file stability. Defaults to 3.\n\n    stability_check_delay (int, optional): Delay between tries when checking\n        file stability in seconds. Defaults to 2.\n\n    min_free_space_percent (int, optional) : Percentage of total disk space\n        that must be free. If specified the percentage is not free then the\n        stage will attempt to delete unprotected files to reach the minimum\n        percentage. Defaults to None.\n\n    use_kstack (bool, optional): Use faster version of copy with limited options.\n        Defaults to False.\n\nExample\n-------\ncopy_to_device:\n    origin:\n        hostname: server-1\n        files:\n            - /home/cisco/asr1k.bin\n    destination:\n        directory: harddisk:/\n    protocol: sftp\n    timeout: 300\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "CopyToDevice",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/apic/stages.py#L519"
    },
    "com": {
      "doc": "This stage will copy an image to a device from a networked location.\n\nStage Schema\n------------\ncopy_to_device:\n\n    origin:\n\n        files (list): Image files location on the server.\n\n        hostname (str): Hostname or address of the server.\n\n    destination:\n\n        directory (str): Directory on the device to copy the images to.\n\n        standby_directory (str, optional): Standby directory on the device\n            to copy the images to. Defaults to None.\n\n    protocol (str): Protocol used for copy operation.\n\n    verify_num_images (bool, optional): Verify number of images provided by\n        user for clean is correct. Defaults to True.\n\n    expected_num_images (int, optional): Number of images expected to be\n        provided by user for clean. Defaults to 1.\n\n    vrf (str, optional): Vrf used to copy. Defaults to an empty string.\n\n    timeout (int, optional): Copy operation timeout in seconds. Defaults to 300.\n\n    compact (bool, optional): Compact copy mode if supported by the device.\n        Defaults to False.\n\n    protected_files (list, optional): File patterns that should not be deleted.\n        Defaults to None.\n\n    overwrite (bool, optional): Overwrite the file if a file with the same\n        name already exists. Defaults to False.\n\n    skip_deletion (bool, optional): Do not delete any files even if there isn't\n        any space on device. Defaults to False.\n\n    copy_attempts (int, optional): Number of times to attempt copying image\n        files. Defaults to 1 (no retry).\n\n    copy_attempts_sleep (int, optional): Number of seconds to sleep between\n        copy_attempts. Defaults to 30.\n\n    check_file_stability (bool, optional): Verifies that the file size is not\n        changing. This ensures the image is not actively being copied.\n        Defaults to False.\n\n    stability_check_tries (int, optional): Max number of checks that can be\n        done when checking file stability. Defaults to 3.\n\n    stability_check_delay (int, optional): Delay between tries when checking\n        file stability in seconds. Defaults to 2.\n\n    min_free_space_percent ('int', optional) : Percentage of total disk space\n        that must be free. If specified the percentage is not free then the\n        stage will attempt to delete unprotected files to reach the minimum\n        percentage. Defaults to None.\n\n    use_kstack (bool, optional): Use faster version of copy with limited options.\n        Defaults to False.\n\n    interface (str, optional): The interface to use for file transfers, may be needed\n        for copying files on some IOSXE platforms, such as ASR1K when using a VRF\n        Defaults to None\n\n    unique_file_name (bool, optional): Appends a random six-digit number to\n        the end of the image name. Defaults to False.\n\n    unique_number: (int, optional): Appends the provided number to the end of\n        the image name. Defaults to None. Requires unique_file_name is True\n        to be applied.\n\n    rename_images: (str, optional): Rename the image to the provided name.\n        If multiple files exist then an incrementing number is also appended.\n        Defaults to None\n\n    prompt_recovery(bool, optional): Enable the prompt recovery when the  execution\n        command timeout. Defaults to False.\n\nExample\n-------\ncopy_to_device:\n    origin:\n        hostname: server-1\n        files:\n            - /home/cisco/asr1k.bin\n    destination:\n        directory: harddisk:/\n    protocol: sftp\n    timeout: 300\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "CopyToDevice",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L714"
    }
  },
  "CopyToLinux": {
    "com": {
      "doc": "This stage copies an image to a location on a linux device. It can keep\nthe original name or modify the name as required.\n\nStage Schema\n------------\ncopy_to_linux:\n\n    origin:\n\n        files (list): Location of file on the origin server.\n\n        hostname (str, optional): Hostname or address of the origin server.\n            If not provided the file is treated as a local file on the\n            execution host.\n\n    destination:\n\n        directory (str): Directory that the file will be copied to.\n\n        hostname (str, optional): Hostname or address of the origi server.\n            If not provided the directory is treated as a local directory on the\n            execution host. This key is only optional if the hostname under\n            origin is not provided.\n\n    protocol (str, optional): Protocol used for the copy operation. Defaults to\n        sftp.\n\n    overwrite (bool, optional): Overwrite the file if a file with the same\n        name already exists. Defaults to False.\n\n    timeout (int, optional): Copy operation timeout in seconds. Defaults to 300.\n\n    check_image_length (bool, optional): Check if the length of the image name\n        exceeds the image_length_limit. Defaults to False.\n\n    image_length_limit (int, optional): Maximum length of the image name.\n        Defaults to 63.\n\n    append_hostname (bool, optional): Append hostname to the end of the image\n        name during copy. Defaults to False.\n\n    copy_attempts (int, optional): Number of times to attempt copying image\n        files. Defaults to 1 (no retry).\n\n    copy_attempts_sleep (int, optional): Number of seconds to sleep between\n        copy_attempts. Defaults to 30.\n\n    check_file_stability (bool, optional): Verifies that the file size is not\n        changing. This ensures the image is not actively being copied.\n        Defaults to False.\n\n    unique_file_name (bool, optional): Appends a random six-digit number to\n        the end of the image name. Defaults to False.\n\n    unique_number: (int, optional): Appends the provided number to the end of\n        the image name. Defaults to None.\n\n    rename_images: (str, optional): Rename the image to the provided name.\n        If multiple files exist then an incrementing number is also appended.\n        Defaults to None\n\nExample\n-------\ncopy_to_linux:\n    protocol: sftp\n    origin:\n        hostname: server-1\n        files:\n        - /home/cisco/kickstart.bin\n        - /home/cisco/system.bin\n    timeout: 300\n    destination:\n        hostname: file-server\n        directory: /auto/tftp-ssr/\n    copy_attempts: 2\n    check_file_stability: True\n    unique_file_name: True\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "CopyToLinux",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L273"
    }
  },
  "DeleteBackupFromDevice": {
    "com": {
      "doc": "This stage removes a backed up file from the device. It can optionally\nreplace the original file with the one that was backed up.\n\nStage Schema\n------------\ndelete_backup_from_device:\n\n    delete_dir (str): Directory containing file to be deleted\n\n    delete_dir_stby (str, optional): For high availability devices, the directory\n        containing file to be deleted on standby. Defaults to None.\n\n    delete_file (str): File to be deleted\n\n    restore_from_backup (bool, optional): Restore the file from backup file.\n        Defaults to False.\n\n    overwrite (bool, optional): When creating the backup, overwrite the file\n        if one with the same name already exists. Defaults to True.\n\n    timeout (int, optional): Timeout in seconds for copying. Defaults to 300.\n\nExample\n-------\ndelete_backup_from_device:\n    delete_dir: 'bootflash:'\n    delete_dir_stby: 'bootflash-stby:'\n    delete_file: ISSUCleanGolden.cfg_backup\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "DeleteBackupFromDevice",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1988"
    }
  },
  "DeleteFiles": {
    "com": {
      "doc": "Delete files from the device.\n\nUses the `delete_files` device API.\n\nStage Schema\n------------\ndelete_files:\n\n    files (list): List of files including location.\n\n    regex (bool, optional): If regex is used in the file names, set to True. Default False.\n\nExample\n-------\ndelete_files:\n    - flash:core/*.gz\n    - crashinfo/*.tar.gz\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "DeleteFiles",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2211"
    }
  },
  "DeleteFilesFromServer": {
    "com": {
      "doc": "This stage deletes files from a server.\n\nStage Schema\n------------\ndelete_files_from_server:\n\n    server (str, optional): Hostname or address of the server. If not provided,\n        uses the same server from copy_to_linux (if applicable).\n\n    files (list, optional): List of files to delete. If not provided, uses the\n        same files from copy_to_linux (if applicable).\n\n    protocol (str, optional): Protocol used for deletion. Only ftp or sftp is\n        supported. Defaults to sftp.\n\nExample\n-------\ndelete_files_from_server:\n    server: 1.1.1.1\n    files:\n        - /home/cisco/kickstart.bin\n    protocol: sftp\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "DeleteFilesFromServer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2112"
    }
  },
  "EraseApConfiguration": {
    "cheetah": {
      "ap": {
        "doc": "This stage erases the AP configuration\n\n       Stage Schema\n       ------------\n       erase_ap_configuration:\n           login_credentials_alias (str): Alias of login credentials to use after write erase which will be mentioned in TB yaml\n\n           max_time (int, optional): Maximum time for which this clean stage will try to associate Ap to controller.\n               Defaults to 900\n\n           check_interval (int, optional): Interval for retry mechanism in seconds. Defaults to 30\n\n\n       Example\n       -------\n       erase_ap_configuration:\n            login_credentials_alias: \"erase\"\n            max_time: \"600\"\n   ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "EraseApConfiguration",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/cheetah/ap/stages.py#L118"
      }
    }
  },
  "ExecuteCommand": {
    "com": {
      "doc": "Executing commands on the device.\n\nStage Schema\n------------\nexecute_command:\n\n    commands (list): List of commands to execute.\n\n    execute_timeout (int, optional): Max time in seconds allowed for executing the\n        command. Defaults to 60.\n\n    sleep_time(int,optional): Time in seconds to sleep after running each command.\n\nExample\n-------\nexecute_command:\n    commands:\n        - show version\n        - show boot\n    execute_timeout: 60\n    sleep_time: 10\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "ExecuteCommand",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1502"
    }
  },
  "ExpandImage": {
    "iosxe": {
      "sdwan": {
        "doc": "Clear up old packages and expand image\n\nStage Schema\n------------\nexpand_image:\n\n    image (list, optional): Image to boot with\n\nExample\n-------\nexpand_image:\n    image:\n      - bootflash:stay-isr-image.bin\n    timeout: 120\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "ExpandImage",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L691"
      }
    }
  },
  "FabricClean": {
    "apic": {
      "doc": "This stage will clean APIC controllers.\n\nThe stage will execute 'acidiag touch clean' and then reload the controller.\n\nStage Schema\n------------\nfabric_clean:\n\n    cleaning_timeout (int, optional): Max time for cleaning scripts to execute.\n        Defaults to 90.\n\n    reload_timeout (int, optional): Max time for reload. Defaults to 800.\n\n    sleep_after_reload (int, optional): Time in seconds to sleep after the\n        device completes reloading. Defaults to 60.\n\nExample\n-------\nfabric_clean:\n    cleaning_timeout: 90\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "FabricClean",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/apic/stages.py#L340"
    },
    "nxos": {
      "aci": {
        "doc": "This stage will clean NXOS ACI nodes.\n\nThe stage will execute the following commands, where <boot_image>\nis the currently running image if it exists, or the image copied to the\ndevice (if applicable)::\n    - '/bin/setup-clean-config.sh'\n    - '/bin/setup-bootvars.sh <boot_image>'\n\nFinally the stage will reload the node.\n\nStage Schema\n------------\nfabric_clean:\n\n    cleaning_timeout (int, optional): Max time for cleaning scripts to execute.\n        Defaults to 90.\n\n    reload_timeout (int, optional): Max time for reload. Defaults to 800.\n\n    sleep_after_reload (int, optional): Time in seconds to sleep after the\n        device completes reloading. Defaults to 60.\n\n    copy_boot_image (dict, optional):\n\n        origin:\n\n            files (list): Image files location on the server.\n\n            hostname (str): Hostname or address of the server to copy from.\n                This must exist in the testbed under the 'servers' block.\n\n        destination:\n\n            directory (str): Location on the device where the images\n                should be copied to.\n\n        protocol (str): Protocol used for copy operation.\n\n        timeout (int, optional): Max time allowed for copy operation in\n            seconds. Defaults to 300.\n\nExample\n-------\nfabric_clean:\n    cleaning_timeout: 90\n    copy_boot_image:\n        origin:\n            files: [/my_switch_image.bin]\n            hostname: my_server_from_testbed\n        destination:\n            directory: '/bootflash'\n        protocol: scp\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "FabricClean",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/aci/stages.py#L15"
      }
    }
  },
  "FabricUpgrade": {
    "apic": {
      "doc": "This stage upgrades (or downgrades) the firmware version for APIC\ndevices. This includes the controller-group and the switch-group.\n\nStage Schema\n------------\nfabric_upgrade:\n\n    controller_image (list, optional): Contains the controller image.\n        Defaults to None.\n\n    switch_image (list, optional): Contains the switch image. Defaults to\n        None.\n\n    switch_group_name (str, optional): The name of the switch-group to\n        create. Defaults to switches.\n\n    clear_switch_group (bool, optional): Whether or not to clear the\n        switch-group configuration before configuring it. Defaults to True.\n\n    sleep_after_delete (int, optional): How long in seconds to sleep after\n        clearing the firmware repository. Defaults to 5.\n\n    switch_group_nodes (list, optional): Contains the Nodes which will\n        be added to the switch_group_name. Defaults to None.\n\n    timeouts (dict, optional):\n\n        firmware_repository_add (int, optional): Max time in seconds allowed\n            for adding images to the firmware repository. Defaults to\n            300 (5 mins).\n\n        controller_upgrade (int, optional): Max time in seconds allowed for\n            upgrading the controller. Defaults to 1800 (30 mins).\n\n        controller_reconnect (int, optional): Max time in seconds allowed\n            for reconnecting to the controller during upgrade. This may\n            occur if there is only one controller. Defaults to 900 (15 mins).\n\n        controller_upgrade_after_reconnect (int, optional): Max time in\n            seconds allowed for completing the controller upgrade after\n            reconnecting. Defaults to 300 (5 mins).\n\n        switch_upgrade (int, optional): Max time in seconds allowed for\n            upgrading switches. Defaults to 2700 (45 mins).\n\n        stabilize_switch_group_config (int, optional): Time to sleep after\n            configuring the switch-group. Defaults to 120 (2 mins).\n\nExample\n-------\nfabric_upgrade:\n    switch_group_name: my_switches\n    switch_group_nodes: [switch1, switch2]\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "FabricUpgrade",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/apic/stages.py#L27"
    }
  },
  "InstallImage": {
    "iosxe": {
      "cat3k": {
        "doc": "This stage installs a provided image onto the device using the install\nCLI. It also handles the automatic reloading of your device after the\ninstall is complete.\n\nStage Schema\n------------\ninstall_image:\n    images (list): Image to install\n\n    save_system_config (bool, optional): Whether or not to save the system\n        config if it was modified. Defaults to False.\n\n    install_timeout (int, optional): Maximum time in seconds to wait for install\n        process to finish. Defaults to 500.\n\n    reload_timeout (int, optional): Maximum time in seconds to wait for reload\n        process to finish. Defaults to 800.\n\nExample\n-------\ninstall_image:\n    images:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    save_system_config: True\n    install_timeout: 1000\n    reload_timeout: 1000\n\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "InstallImage",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat3k/stages.py#L12"
      },
      "doc": "This stage installs a provided image onto the device using the install\nCLI. It also handles the automatic reloading of your device after the\ninstall is complete.\n\nStage Schema\n------------\ninstall_image:\n    images (list): Image to install\n\n    save_system_config (bool, optional): Whether or not to save the system\n        config if it was modified. Defaults to False.\n\n    install_timeout (int, optional): Maximum time in seconds to wait for install\n        process to finish. Defaults to 500.\n\n    reload_timeout (int, optional): Maximum time in seconds to wait for reload\n        process to finish. Defaults to 800.\n\n    reload_service_args (optional):\n\n        reload_creds (str, optional): The credential to use after the reload is\n            complete. The credential name comes from the testbed yaml file.\n            Defaults to the 'default' credential.\n\n        prompt_recovery (bool, optional): Enable or disable the prompt recovery\n            feature of unicon. Defaults to True.\n\n        append_error_pattern (list, optional): List of regex strings to check for,\n            to be appended to the default error pattern list. Default: [r\"FAILED:.* \",]\n\n        <Key>: <Value>\n            Any other arguments that the Unicon reload service supports\n\nExample\n-------\ninstall_image:\n    images:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    save_system_config: True\n    install_timeout: 1000\n    reload_timeout: 1000\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "InstallImage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L496"
    },
    "iosxr": {
      "ncs540": {
        "doc": "This stage installs the provided image onto your device using the install CLI.\n\nStage Schema\n------------\ninstall_image:\n\n    image (list): Image to install on the device.\n\n    protocol (str, optional): Protocol (http or ftp) used for the install operation.\n         Defaults to http.\n\n    server (str, optional): Hostname or address of the server to install.\n\n    vrf (str, optional): Vrf used to copy. Defaults to default.\n\n    install_timeout (int, optional): Max time in seconds allowed for install\n        operations. Defaults to 300.\n\n    commit_sleep (int, optional): Time in seconds to sleep before executing\n        'install commit'. Defaults to 180.\n\nExample\n-------\ninstall_image:\n    image:\n        - /path/image.iso\n    install_timeout: 1500\n    commit_sleep: 200\n\nor\n\ninstall_image:\n    image:\n        - /http_path/image.iso\n    protocol: http\n    server: 10.1.1.1\n    vrf: default\n    install_timeout: 2700\n    commit_sleep: 180\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "InstallImage",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/ncs540/stages.py#L23"
      }
    },
    "nxos": {
      "n9k": {
        "doc": "This stage installs a provided image onto the device using the install CLI.\nStage Schema\n------------\ninstall_image:\n    images (list): Image to install\n    install_timeout (int, optional): Maximum time in seconds to wait for install\n        process to finish. Defaults to 750.\nExample\n-------\ninstall_image:\n    images:\n      - bootflash:nxos.9.3.5.bin\n    install_timeout: 500\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "InstallImage",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/n9k/stages.py#L14"
      }
    }
  },
  "InstallImageAndPackages": {
    "iosxr": {
      "doc": "This stage installs the provided image and optional packages onto\nyour device using the install CLI. The stage will also handle the\nautomatic reload.\n\nStage Schema\n------------\ninstall_image_and_packages:\n\n    image (list): Image to install on the device.\n\n    packages (list, optional): Packages to install on the device. Defaults to None.\n\n    tftp_server (str, optional): TFTP Server that should be used when installing\n        via tftp. Defaults to None.\n\n    remove_inactive_pkgs (bool, optional): If True remove all the inactive\n        packages before attempting installation. Defaults to True.\n\n    install_timeout (int, optional): Max time in seconds allowed for install\n        operations. Defaults to 300.\n\n    reload_timeout (int, optional): Max time in seconds allowed for the reload\n        to complete. Defaults to 900.\n\n    commit_sleep (int, optional): Time in seconds to sleep before executing\n        'install commit'. Defaults to 180.\n\n    source_directory (str, optional): Directory to copy from. Defaults to 'harddisk:'\n\nExample\n-------\ninstall_image_and_packages:\n    image:\n        - flash:image.iso\n    packages:\n        - flash:package.rpm\n\nor\n\ninstall_image_and_packages:\n    image:\n        - /tftp_path/image.iso\n    packages:\n        - /tftp_path/package.rpm\n    tftp_server: tftp_server_1\n    remove_inactive_pkgs: True\n    install_timeout: 2700\n    reload_timeout: 800\n    commit_sleep: 180\n\nor\n\nimages:\n    - /path/to/system.iso\n    - /path/to/package1.rpm\n    - /path/to/package2.rpm\n\ninstall_image_and_packages:\n    source_directory: \"disk1:\"\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "InstallImageAndPackages",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L263"
    }
  },
  "InstallPackages": {
    "iosxe": {
      "doc": "This stage installs the provided packages using the install CLI.\n\nStage Schema\n------------\ninstall_packages:\n    packages (list): Packages to install.\n\n    save_system_config (bool, optional): Whether or not to save the system\n        config if it was modified. Defaults to False.\n\n    install_timeout (int, optional): Maximum time to wait for install\n        process to finish. Defaults to 300.\n\nExample\n-------\ninstall_packages:\n    packages:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    save_system_config: True\n    install_timeout: 1000\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "InstallPackages",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L692"
    }
  },
  "InstallRemoveInactive": {
    "iosxe": {
      "doc": "This stage removes partially installed packages/images left\non the device. If a super package is left partially installed,\nwe cannot attempt to install another until it is removed.\n\nStage Schema\n------------\ninstall_image:\n    timeout (int, optional): Maximum time to wait for remove process to\n        finish. Defaults to 180.\n\nExample\n-------\ninstall_remove_inactive:\n    timeout: 180\n\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "InstallRemoveInactive",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L441"
    }
  },
  "LoadPies": {
    "iosxr": {
      "doc": "This stage installs provided pies onto the device.\n\nStage Schema\n------------\nload_pies:\n\n    files (list): List of XR pies to install\n\n    server (str, optional): Hostname or IP address of server to use for install\n        command. Defaults to None (Looks in the testbed YAML for a TFTP server)\n\n    prompt_level (str, optional): Prompt-level argument for install command.\n        Defaults to 'none'.\n\n    synchronous (bool, optional): Synchronous option for install command.\n        Defaults to None.\n\n    install_timeout (int, optional): Maximum time in seconds allowed for\n        execution of the install command to complete. Defaults to 600.\n\n    max_time (int, optional): Maximum time in seconds to wait while verifying\n        the pies installed. Defaults to 300.\n\n    check_interval (int, optional): Time interval in seconds while verifying\n        the pies installed. Defaults to 30.\n\nExample\n-------\nload_pies:\n    files:\n        - /auto/path/to/image/asr9k-mcast-px.pie-7.3.1.08I\n        - /auto/path/to/image/asr9k-mgbl-px.pie-7.3.1.08I\n        - /auto/path/to/image/asr9k-mpls-px.pie-7.3.1.08I\n    server: 10.1.6.244\n    prompt_level: 'all'\n    synchronous: True\n    timeout: 150\n    max_time: 300\n    check_interval: 20\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "LoadPies",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L29"
    }
  },
  "NodeRegistration": {
    "apic": {
      "doc": "This stage registers nodes on APIC using REST API.\n\nStage Schema\n------------\nnode_registration:\n\n    nodes (list): Nodes to register on APIC\n\n    rest_alias (str, optional): Connection alias for REST connection.\n        Defaults to 'rest'.\n\n    verify_max_time (int, optional): Max time in seconds to verify node registration.\n        Defaults to 480.\n\n    verify_interval (int, optional): How often in seconds to attempt verify node\n        registration. Defaults to 30.\n\nExample\n-------\nnode_registration:\n    nodes: [Spine1, Spine2]\n    rest_alias: cli\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "NodeRegistration",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/apic/stages.py#L432"
    }
  },
  "PingServer": {
    "com": {
      "doc": " This stage pings a server from a device to ensure connectivity.\n\nStage Schema\n------------\nping_server:\n\n    server (str): Hostname or address of the server to ping.\n\n    vrf (str, optional): Vrf used in ping command. Defaults to None.\n\n    timeout (int, optional): Maximum time in seconds for ping. Defaults to 60.\n\n    min_success_rate (int, optional): Minimum acceptable success rate (percentage)\n        of the ping command. Defaults to 60.\n\n    max_attempts (int, optional): Maximum number of attempts to check minimum\n        ping success rate. Defaults to 5.\n\n    interval (int, optional): Time in seconds between re-attempts to check\n        minimum ping success rate. Defaults to 30.\n\nExample\n-------\nping_server:\n    server: server-1\n    vrf: management\n    timeout: 120\n    min_success_rate: 75\n    max_attempts: 3\n    interval: 60\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "PingServer",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L120"
    }
  },
  "PowerCycle": {
    "com": {
      "doc": "This stage power cycles the device\n\nStage schema\n------------\npower_cycle:\n\n    sleep_after_power_off (int, optional): Time in seconds to sleep\n        after powering off the device. Defaults to 30.\n\n    boot_timeout (int, optional): Max time in seconds allowed for the\n        device to boot. Defaults to 600.\n\n    sleep_before_connect (int, optional): Time to sleep before connecting\n        to the device. Defaults to 60 seconds.\n\n    sleep_after_connect (int, optional): Time to sleep after connecting\n        to the device. Defaults to 0 (no sleep).\n\n    connect_arguments (dict, optional): Arguments to connect() method.\n\n    connect_retry_wait (int, optional). Time to wait before retrying to\n        connect to the device. Defaults to 60 seconds.\n\nExample\n-------\npower_cycle:\n    sleep_after_power_off: 5\n    sleep_after_connect: 10\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "PowerCycle",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2648"
    }
  },
  "PrimeAp": {
    "cheetah": {
      "ap": {
        "doc": "This stage primes accesspoint to desired controller\n\n    Stage Schema\n    ------------\n    prime_ap:\n\n        controller_name (str):Name of the controller where AP needs to join.\n\n        controller_ip_address (str): IPv4/Ipv6 address of controller where AP needs to join.\n\n        max_time (int, optional): Maximum time for which this clean stage will try to associate Ap to controller .\n                                    Defaults to 900\n\n        check_interval (int, optional): Interval for retry mechanism in seconds. Defaults to 30\n\n        sleep_time (int, optional): Interval for sleeping mechanism in seconds after priming AP to controller.\n                                    Defaults to 30\n\n\n    Example\n    -------\n    prime_ap:\n        controller_name: \"ewlc-5\"\n        controller_ip_address: \"9.4.62.41\"\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "PrimeAp",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/cheetah/ap/stages.py#L23"
      }
    }
  },
  "Reload": {
    "com": {
      "doc": " This stage reloads the device.\n\nStage Schema\n------------\nreload:\n\n    reload_service_args (optional):\n\n        timeout (int, optional): Maximum time in seconds allowed for the reload.\n            Defaults to 800.\n\n        reload_creds (str, optional): The credential to use after the reload is\n            complete. The credential name comes from the testbed yaml file.\n            Defaults to the 'default' credential.\n\n        prompt_recovery (bool, optional): Enable or disable the prompt recovery\n            feature of unicon. Defaults to True.\n\n        <Key>: <Value>\n            Any other arguments that the Unicon reload service supports\n\n    check_modules:\n\n        check (bool, optional): Enable the checking of modules after reload.\n            Defaults to True.\n\n        timeout (int, optional): Maximum time in seconds allowed for verifying\n            the modules are in a stable state. Defaults to 180.\n\n        interval (int, optional): How often to check the module states in\n            seconds. Defaults to 30.\n\n    reconnect_via (str, optional): Specify which connection to use after reloading.\n        Defaults to the 'default' connection in the testbed yaml file.\n\n\nExample\n-------\nreload:\n    reload_service_args:\n        timeout: 600\n        reload_creds: clean_reload_creds\n        prompt_recovery: True\n        reconnect_sleep: 200 (Unicon NXOS reload service argument)\n    check_modules:\n        check: False\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "Reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1330"
    },
    "iosxe": {
      "doc": " This stage reloads the device.\n\nStage Schema\n------------\nreload:\n    license: (optional)\n        check: (bool, optional): Enable the checking license inconsistency and fix\n\n    reload_service_args (optional):\n\n        timeout (int, optional): Maximum time in seconds allowed for the reload.\n            Defaults to 800.\n\n        reload_creds (str, optional): The credential to use after the reload is\n            complete. The credential name comes from the testbed yaml file.\n            Defaults to the 'default' credential.\n\n        prompt_recovery (bool, optional): Enable or disable the prompt recovery\n            feature of unicon. Defaults to True.\n\n        <Key>: <Value>\n            Any other arguments that the Unicon reload service supports\n\n    check_modules:\n\n        check (bool, optional): Enable the checking of modules after reload.\n            Defaults to True.\n\n        timeout (int, optional): Maximum time in seconds allowed for verifying\n            the modules are in a stable state. Defaults to 180.\n\n        interval (int, optional): How often to check the module states in\n            seconds. Defaults to 30.\n\n    reconnect_via (str, optional): Specify which connection to use after reloading.\n        Defaults to the 'default' connection in the testbed yaml file.\n\n\nExample\n-------\nreload:\n    reload_service_args:\n        timeout: 600\n        reload_creds: clean_reload_creds\n        prompt_recovery: True\n        reconnect_sleep: 200 (Unicon NXOS reload service argument)\n    check_modules:\n        check: False\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "Reload",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L776"
    }
  },
  "RevertVmSnapshot": {
    "com": {
      "doc": "This stage reverts the virtual device to the provided snapshot\n\nStage schema\n------------\nrevert_snapshot:\n\n    vm_hostname (str, optional): Name of the VM that is on the ESXi\n        server, if not provided, it will be set as the device name.\n\n    esxi_server (str): ESXI Server which holds the vm to revert the\n        snapshot.\n\n    recovery_snapshot_name (str): Name of the snapshot to have VM\n        reverted back to.\n\n    max_recovery_attempts (int, optional): Maximum number of recovery\n        attempts. Defaults to 2.\n\n    sleep_after_powering_off (int, optional): Wait time after powering\n        off devices. Default value is 60 seconds.\n\n    sleep_time_stabilize_device (int, optional): Wait time before\n        finishing revert snapshot stage. Defaults to 300.\n\n    sleep_time_after_powering_on (int, optional): Wait time after\n        powering on devices to reach steady state. Defaults to 600.\n\nExample\n-------\nrevert_vm_snapshot:\n    esxi_server: ssr-ucs2\n    vm_hostname: P1-4\n    max_recovery_attempts: 2\n    sleep_after_powering_off: 60\n    sleep_time_after_powering_on: 600\n    sleep_time_stabilize_device: 300\n    recovery_snapshot_name: golden\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "RevertVmSnapshot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L2281"
    }
  },
  "RommonBoot": {
    "iosxe": {
      "cat9k": {
        "doc": "This stage boots an image onto the device through rommon. Using either\na local image or one from a tftp server.\n\nStage Schema\n------------\nrommon_boot:\n\n    image (list): Image to boot with\n\n    tftp (optional): If specified boot via tftp otherwise boot using local\n        image.\n\n        ip_address (list): Management ip address to configure to reach to the\n            tftp server\n\n        subnet_mask (str): Management subnet mask\n\n        gateway (str): Management gateway\n\n        tftp_server (str): Tftp server that is reachable with management interface\n\n    save_system_config (bool, optional): Whether or not to save the\n        system config if it was modified. Defaults to True.\n\n    timeout (int, optional): Max time allowed for the booting process.\n        Defaults to 600.\n\n    config_reg_timeout (int, optional): Max time to set config-register.\n        Defaults to 30.\n\nExample\n-------\nrommon_boot:\n    image:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    tftp:\n        ip_address: [10.1.7.126, 10.1.7.127]\n        gateway: 10.1.7.1\n        subnet_mask: 255.255.255.0\n        tftp_server: 11.1.7.251\n    save_system_config: False\n    timeout: 600\n    config_reg_timeout: 10\n\nThere is more than one ip address, one for each supervisor.\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "RommonBoot",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L198"
      }
    }
  },
  "RunConfigure": {
    "linux": {
      "wsim": {
        "doc": "This stage apply certs on controller.\nStage Schema\n------------\nrun_configure:\n    timeout(int,optional): 600\nExample\n-------\nrun_configure:\n    timeout: 600\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "RunConfigure",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/linux/wsim/stages.py#L228"
      }
    }
  },
  "SetControllerMode": {
    "iosxe": {
      "sdwan": {
        "doc": "Set controller mode\n\nStage Schema\n------------\nset_controller_mode:\n\n    mode (str, optional): `enable` or `disable`. Defaults to `enable`\n\n    reload_timeout (int, optional): maximum time to wait for reload.\n        Defaults to 600 secs\n\n    configure_retry_interval (int, optional): interval of retry configure().\n        Defaults to 60 secs\n\n    delete_inactive_versions (bool, optional): delete non active version after\n        changing image. Defaults to True\n\nExample\n-------\nset_controller_mode:\n    mode: enable\n    reload_timeout: 600\n    configure_retry_interval: 30\n    delete_inactive_versions: True\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "SetControllerMode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L774"
      }
    }
  },
  "SoftwareInstall": {
    "viptela": {
      "doc": "Software install\n\nStage Schema\n------------\nsoftware_install:\n    origin:\n        files (list): Image files location on the server.\n        hostname (str): Hostname or address of the server.\n    protocol (str): Protocol used for copy operation. \n    vpn (int): Vpn number used to copy.\n    timeout (int, optional): Copy operation timeout in seconds. Defaults to 600.\n\nExample\n-------\nsoftware_install:\n    origin:\n        files:\n            - /home/user/viptela-20.3.4-x86_64.tar.gz\n        hostname: 10.1.1.1\n    protocol: ftp # only ftp is supported\n    vpn: 512\n    timeout: 900\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "SoftwareInstall",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/viptela/stages.py#L36"
    }
  },
  "StartApContainers": {
    "linux": {
      "wsim": {
        "doc": "This stage starts the ap containers.\nStage Schema\n------------\nstart_device_containers:\n\n    ap_count(str,optional): Number of APs that Wsim will simulate\n    client_count(str,optional): Number of Clients that Wsim will simulate\n    timeout(int,optional): timeout for the command execution\n    shell_access(bool,optional): True/False for client shell access\n\nExample\n-------\nstart_ap_containers:\n    ap_count: '1'\n    client_count: '1'\n    timeout:600\n    shell_access:True\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "StartApContainers",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/linux/wsim/stages.py#L271"
      }
    }
  },
  "TftpBoot": {
    "iosxe": {
      "cat9k": {
        "doc": "This stage boots a new image onto your device using the tftp booting\nmethod.\n\nStage Schema\n------------\ntftp_boot:\n\n    image (list): Image to boot with\n\n    ip_address (list): Management ip address to configure to reach to the\n        tftp server\n\n    subnet_mask (str): Management subnet mask\n\n    gateway (str): Management gateway\n\n    tftp_server (str): Tftp server that is reachable with management interface\n\n    recovery_password (str): Enable password for device\n        required after bootup. Defaults to None.\n\n    recovery_username (str): Enable username for device\n        required after bootup. Defaults to None.\n\n    save_system_config (bool, optional): Whether or not to save the\n        system config if it was modified. Defaults to True.\n\n    timeout (int, optional): Max time during which tftp boot must\n        complete. Defaults to 1000 seconds.\n\nExample\n-------\ntftp_boot:\n    image:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    ip_address: [10.1.7.126, 10.1.7.127]\n    gateway: 10.1.7.1\n    subnet_mask: 255.255.255.0\n    tftp_server: 11.1.7.251\n    recovery_password: nbv_12345\n    recovery_username: user_123\n    save_system_config: False\n    timeout: 1000\n\nThere is more than one ip address, one for each supervisor.\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "TftpBoot",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L91"
      },
      "doc": "This stage boots a new image onto your device using the tftp booting\nmethod.\n\nStage Schema\n------------\ntftp_boot:\n\n    image (list): Image to boot with\n\n    ip_address (list): Management ip address to configure to reach to the\n        tftp server\n\n    subnet_mask (str): Management subnet mask\n\n    gateway (str): Management gateway\n\n    tftp_server (str): Tftp server that is reachable with management interface\n\n    recovery_password (str): Enable password for device\n        required after bootup. Defaults to None.\n\n    recovery_en_password (str): Enable password for device\n        required after bootup. Defaults to None.\n\n    recovery_username (str): Enable username for device\n        required after bootup. Defaults to None.\n\n    save_system_config (bool, optional): Whether or not to save the\n        system config if it was modified. Defaults to True.\n\n    timeout (int, optional): Max time during which tftp boot must\n        complete. Defaults to 600.\n\n    config_reg_timeout (int, optional): Max time to set config-register.\n        Defaults to 30.\n\n    image_length_limit(int, optinal): Maximum length of characters for image.\n        Defaults to 110.\n\n    ether_port(int, optional): port to set for tftp boot. Defaults to None.\n\nExample\n-------\ntftp_boot:\n    image:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    ip_address: [10.1.7.126, 10.1.7.127]\n    gateway: 10.1.7.1\n    subnet_mask: 255.255.255.0\n    tftp_server: 11.1.7.251\n    recovery_password: nbv_12345\n    recovery_username: user_12345\n    recovery_en_password: en\n    save_system_config: False\n    timeout: 600\n    config_reg_timeout: 10\n    image_length_limit: 90\n    ether_port: 0\n\nThere is more than one ip address, one for each supervisor.\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "sdwan": {
        "doc": "This stage boots a new image onto your device using the tftp booting\n    method.\n\nStage Schema\n------------\ntftp_boot:\n\n    image (list): Image to boot with\n\n    ip_address (list): Management ip address to configure to reach to the tftp server\n\n    subnet_mask (str): Management subnet mask\n\n    gateway (str): Management gateway\n\n    tftp_server (str): Tftp server that is reachable with management interface\n\n    device_managed_mode (str, optional): Specify mode 'controller' or 'autonomous'\n        Defaults to 'autonomous'\n\n    recovery_password (str, optional): Enable password for device\n        required after bootup. Defaults to None.\n\n    timeout (int, optional): Max time during which tftp boot must\n        complete. Defaults to 600.\n\n    config_reg_timeout (int, optional): Max time to set config-register.\n        Defaults to 30.\n\nExample\n-------\ntftp_boot:\n    image:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    ip_address: [10.1.7.126, 10.1.7.127]\n    gateway: 10.1.7.1\n    subnet_mask: 255.255.255.0\n    tftp_server: 11.1.7.251\n    device_managed_mode: autonomous\n    recovery_password: nbv_12345\n    timeout: 600\n    config_reg_timeout: 10\n\nThere is more than one ip address, one for each supervisor.\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "TftpBoot",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/sdwan/stages.py#L395"
      },
      "uid": "TftpBoot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/stages.py#L180"
    },
    "iosxr": {
      "doc": "This stage boots a new image onto your device using the tftp booting\nmethod.\n\nStage Schema\n------------\ntftp_boot:\n\n    image (list): Image to boot with\n\n    ip_address (list): Management ip address to configure to reach to the\n        tftp server\n\n    subnet_mask (str): Management subnet mask\n\n    gateway (str): Management gateway\n\n    tftp_server (str): Tftp server that is reachable with management interface\n\n    timeout (int, optional): Max time during which tftp boot must\n        complete. Defaults to 600.\n\n    config_reg_timeout (int, optional): Max time to set config-register.\n        Defaults to 30.\n\n    device_reload_sleep (int, optional): Time in seconds to wait after\n        reloading the device. Defaults to 20.\n\n    recovery_username (str, optional): Enable username for device\n        required after bootup. Defaults to None.\n\n    recovery_password (str, optional): Enable password for device\n        required after bootup. Defaults to None.\n\nExample\n-------\ntftp_boot:\n    image:\n        - /auto/some-location/that-this/image/asr9k-mini-px.vm\n    ip_address: [10.1.7.126, 10.1.7.127]\n    gateway: 10.1.7.1\n    subnet_mask: 255.255.255.0\n    tftp_server: 11.1.7.251\n    timeout: 1200\n    config_reg_timeout: 60\n    device_reload_sleep: 300\n    recovery_username: admin\n    recovery_password: nbv_12345\n\nNote: There is more than one ip address, one for each supervisor.\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "TftpBoot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L155"
    },
    "nxos": {
      "doc": "This stage boots a new image onto your device using the tftp booting method.\n\nStage Schema\n------------\ntftp_boot:\n\n    image (str): Image to boot the device with\n\n    ip_address (str): The management IP address that will be configured in order\n        to reach the TFTP server.\n\n    subnet_mask (str): The management subnet mask that will be configured in\n        order to reach the TFTP server.\n\n    gateway (str): The management gateway that will be configured in order\n        to reach the TFTP server.\n\n    tftp_server (str): The TFTP server that is reachable through the management\n        interface.\n\n    timeout (int): The maximum time allowed in seconds to complete the tftp\n        booting process.\n\n    reboot_delay (int, optional): Time in seconds to sleep after sending the\n        reboot command. Defaults to 20.\n\n    reconnect_delay (int, optional): Time is seconds to sleep before reconnecting\n        after the device has come up. Defaults to 60.\n\nExample:\n--------\ntftp_boot:\n    image:\n      - /auto/some-location/that-this/image/stay-isr-image.bin\n    ip_address: [10.1.7.126, 10.1.7.127]\n    gateway: 10.1.7.1\n    subnet_mask: 255.255.255.0\n    tftp_server: 11.1.7.251\n\nThere is more than one ip address, one for each supervisor.\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "TftpBoot",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/nxos/stages.py#L212"
    }
  },
  "VerifyAccessTunnelSummary": {
    "iosxe": {
      "cat9k": {
        "doc": " This stage checks the wireless process.\n\n    Stage Schema\n    ------------\n    verify_access_tunnel_summary:\n\n        ap_name(str): accesspoint name\n        ap_ip(str): accesspoint IP\n        rloc_ip(str): rloc IP\n\n    Examples:\n        verify_access_tunnel_summary:\n            ap_name: \"Ac0\"\n            ap_ip: \"70.201.2.152\"\n            rloc_ip: \"70.1.1.1\"\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyAccessTunnelSummary",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L499"
      }
    }
  },
  "VerifyApAssociation": {
    "iosxe": {
      "c9800": {
        "doc": " This stage verifies the given access point has configured.\n\n    Stage Schema\n    ------------\n    verify_accesspoint_association:\n\n        access_points(list):access_point to be verified if present\n\n    Examples:\n        verify_accesspoint_association:\n            access_points:\n                - \"AP188B.4500.44C8\"            \n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyApAssociation",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L87"
      }
    }
  },
  "VerifyApFabricSummary": {
    "iosxe": {
      "cat9k": {
        "doc": " This stage checks the fabric summary.\n\n    Stage Schema\n    ------------\n    verify_ap_fabric_summary:\n\n        ap_list(str):access point list\n\n    Examples:\n        verify_ap_fabric_summary:\n            ap_list: [\"AP188B.4500.44C8\", \"AP188B.4500.55C8\"]\n\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyApFabricSummary",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L386"
      }
    }
  },
  "VerifyApMode": {
    "iosxe": {
      "c9800": {
        "doc": " This stage verifies the mode of a given access point.\n\n    Stage Schema\n    ------------\n    verify_accesspoint_mode:\n\n        access_points(list):mode of a given access_point\n        ap_mode(str,optional):mode of accesspoint (i.e: local or flexmode)\n\n    Examples:\n        verify_accesspoint_mode:\n            access_point:\n                - \"AP188B.4500.44C8\"\n            ap_mode:\"local\"\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyApMode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L22"
      }
    }
  },
  "VerifyApRunState": {
    "linux": {
      "wsim": {
        "doc": "This stage starts the ap containers.\nStage Schema\n------------\nverify_ap_run_state:\n    ap_count(str): Number of Aps that were being verified\n    max_time(int,optional): 600\nExample\n-------\nverify_ap_run_state:\n    ap_count: '5'\n    max_time: 600\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyApRunState",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/linux/wsim/stages.py#L340"
      }
    }
  },
  "VerifyHaState": {
    "iosxe": {
      "c9800": {
        "doc": " This stage verifies the if HA pair has formed successfully\n\n        Stage Schema\n        ------------\n        verify_ha_state:\n\n        Examples:\n            verify_ha_state:\n        ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyHaState",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L315"
      }
    }
  },
  "VerifyInstallationMode": {
    "iosxe": {
      "c9800": {
        "doc": " This stage verifies the configured installation mode.\n\n    Stage Schema\n    ------------\n    verify_installation_mode:\n        verify_installation_mode(str):installation_mode to be verified if present\n\n    Examples:\n        verify_installation_mode:\n            installation_mode: \"INSTALL\"\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyInstallationMode",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/c9800/stages.py#L206"
      }
    }
  },
  "VerifyLispSessionEstablished": {
    "iosxe": {
      "cat9k": {
        "doc": " This stage validates LISP session establishment.\n\n    Stage Schema\n    ------------\n    show_lisp_session_established:\n\n        peer_ip(str) : peer ip\n\n\n    Examples:\n        show_lisp_session_established:\n            peer_ip: \"112.1.1.1\"\n\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyLispSessionEstablished",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L442"
      }
    }
  },
  "VerifyRunningImage": {
    "com": {
      "doc": "This stage verifies the current running image is the expected image.\nThe verification can be done by either MD5 hash comparison or by filename\ncomparison.\n\nStage Schema\n------------\nverify_running_image:\n\n    images (list): Image(s) that should be running on the device. If not\n        using verify_md5 then this should be the image path on the device.\n        If using verify_md5 then this should be the original image location\n        from the linux server.\n\n    ignore_flash (bool, optional): Ignore flash directory names. Default False.\n\n    verify_md5 (dict, optional): When this dictionary is defined, the image\n            verification will by done by comparing the MD5 hashes of the\n            running image against the expected image.\n\n        hostname (str): Linux server that is used to generate the MD5\n            hashes. This server must exist in the testbed servers block.\n\n        timeout (int, optional): Maximum time in seconds allowed for the\n            hashes to generate. Defaults to 60.\n\nExample\n-------\nverify_running_image:\n    images:\n        - test_image.bin\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "VerifyRunningImage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1731"
    },
    "iosxe": {
      "cat9k": {
        "doc": "This stage verifies the current running image is the expected image.\nThe verification can be done by either MD5 hash comparison or by filename\ncomparison.\n\nStage Schema\n------------\nverify_running_image:\n\n    images (list): Image(s) that should be running on the device. If not\n        using verify_md5 then this should be the image path on the device.\n        If using verify_md5 then this should be the original image location\n        from the linux server.\n\n    ignore_flash (bool, optional): Ignore flash directory names. Default True.\n\n    verify_md5 (dict, optional): When this dictionary is defined, the image\n            verification will by done by comparing the MD5 hashes of the\n            running image against the expected image.\n\n        hostname (str): Linux server that is used to generate the MD5\n            hashes. This server must exist in the testbed servers block.\n\n        timeout (int, optional): Maximum time in seconds allowed for the\n            hashes to generate. Defaults to 60.\n\nExample\n-------\nverify_running_image:\n    images:\n        - test_image.bin\n",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyRunningImage",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L635"
      }
    },
    "iosxr": {
      "doc": "This stage verifies the current running image is the expected image.\nThe verification will be done by compare the result of 'show version' and provided\nimage name under 'images' keyword in the clean yaml file.\n\nStage Schema\n------------\nverify_running_image:\n\n    images (list): Image(s) that should be running on the device. \n\nExample\n-------\nverify_running_image:\n    images:\n        - test_image-7.5.4.08I.ios\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "VerifyRunningImage",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxr/stages.py#L594"
    }
  },
  "VerifyWirelessProcess": {
    "iosxe": {
      "cat9k": {
        "doc": " This stage checks the wireless process.\n\n    Stage Schema\n    ------------\n    verify_wireless_process:\n\n        check_processes(str): check process\n\n    Examples:\n        verify_wireless_process:\n            check_processes : ['wncd','wncmgrd','nmspd','rrm','rogue','fman','dbm']\n\n    ",
        "module_name": "stages.stages",
        "package": "genie.libs.clean",
        "uid": "VerifyWirelessProcess",
        "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/iosxe/cat9k/stages.py#L569"
      }
    }
  },
  "WriteErase": {
    "com": {
      "doc": " This stage executes 'write erase' on the device\n\nStage Schema\n------------\nwrite_erase:\n\n    timeout (int, optional): Max time allowed for command to complete.\n        Defaults to 300 seconds.\n\nExample\n-------\nwrite_erase:\n    timeout: 100\n",
      "module_name": "stages.stages",
      "package": "genie.libs.clean",
      "uid": "WriteErase",
      "url": "https://github.com/CiscoTestAutomation/genielibs/tree/master/pkgs/clean-pkg/src/genie/libs/clean/stages/stages.py#L1286"
    }
  },
  "tokens": [
    "aci",
    "aireos",
    "ap",
    "apic",
    "c9800",
    "c9800_cl",
    "cat3k",
    "cat9500",
    "cat9k",
    "cheetah",
    "com",
    "ios",
    "iosxe",
    "iosxr",
    "linux",
    "n9k",
    "ncs540",
    "nxos",
    "sdwan",
    "viptela",
    "wsim"
  ]
}